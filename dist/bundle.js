/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={524:(e,t,n)=>{"use strict";n.r(t),n.d(t,{animate:()=>oe,animateStyle:()=>Q,createMotionState:()=>De,createStyleString:()=>Ve,createStyles:()=>ze,getAnimationData:()=>o,getStyleName:()=>G,glide:()=>ye,inView:()=>we,mountedStates:()=>Ie,spring:()=>ge,stagger:()=>re,style:()=>q,timeline:()=>fe,wrapAnimationWithControls:()=>ee});class r{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const a=new WeakMap;function o(e){return a.has(e)||a.set(e,{transforms:[],values:new Map}),a.get(e)}const i=()=>{},l=e=>e;function s(e,t){-1===e.indexOf(t)&&e.push(t)}function u(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}const c=["","X","Y","Z"],f={x:"translateX",y:"translateY",z:"translateZ"},d={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},p={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:d,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:l},skew:d},h=new Map,m=e=>`--motion-${e}`,v=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{c.forEach((t=>{v.push(e+t),h.set(m(e+t),p[e])}))}));const g=(e,t)=>v.indexOf(e)-v.indexOf(t),y=new Set(v),b=e=>y.has(e),w=e=>e.sort(g).reduce(x,"").trim(),x=(e,t)=>`${e} ${t}(var(${m(t)}))`,S=e=>e.startsWith("--"),k=new Set,E={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},_=e=>"number"==typeof e,C=e=>"object"==typeof e&&Boolean(e.createAnimation),P=e=>Array.isArray(e)&&!_(e[0]),T=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e;function A(e,t,n,r){if(e===t&&n===r)return l;return a=>0===a||1===a?a:T(function(e,t,n,r,a){let o,i,l=0;do{i=t+(n-t)/2,o=T(i,r,a)-e,o>0?n=i:t=i}while(Math.abs(o)>1e-7&&++l<12);return i}(a,0,1,e,n),t,r)}const M={ease:A(.25,.1,.25,1),"ease-in":A(.42,0,1,1),"ease-in-out":A(.42,0,.58,1),"ease-out":A(0,0,.58,1)},O=/\((.*?)\)/;function R(e){if("function"==typeof e)return e;if(Array.isArray(e))return A(...e);if(M[e])return M[e];if(e.startsWith("steps")){const t=O.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>n=>{const r=(n="end"===t?Math.min(n,.999):Math.max(n,.001))*e;return a=("end"===t?Math.floor(r):Math.ceil(r))/e,Math.min(Math.max(a,0),1);var a})(parseFloat(e[0]),e[1].trim())}}return l}function L(e,t){return P(e)?e[((e,t,n)=>{const r=t-0;return((n-0)%r+r)%r+0})(0,e.length,t)]:e}const I=(e,t,n)=>-n*e+n*t+e,D=(e,t,n)=>t-e==0?1:(n-e)/(t-e);function z(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const a=D(0,t,r);e.push(I(n,1,a))}}function j(e){const t=[0];return z(t,e-1),t}class V{constructor(e,t=[0,1],{easing:n=E.easing,duration:r=E.duration,delay:a=E.delay,endDelay:o=E.endDelay,repeat:i=E.repeat,offset:s,direction:u="normal"}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),C(n)){const e=n.createAnimation(t,(()=>"0"),!0);n=e.easing,void 0!==e.keyframes&&(t=e.keyframes),void 0!==e.duration&&(r=e.duration)}const c=P(n)?l:R(n),f=r*(i+1),d=function(e,t=j(e.length),n=l){const r=e.length,a=r-t.length;return a>0&&z(t,a),a=>{let o=0;for(;o<r-2&&!(a<t[o+1]);o++);let i=(l=D(t[o],t[o+1],a),Math.min(1,Math.max(l,0)));var l;return i=L(n,o)(i),I(e[o],e[o+1],i)}}(t,s,P(n)?n.map(R):l);this.tick=t=>{var n;this.pauseTime&&(t=this.pauseTime);let i=(t-this.startTime)*this.rate;this.t=i,i/=1e3,i=Math.max(i-a,0),"finished"===this.playState&&(i=f);const l=i/r;let s=Math.floor(l),p=l%1;!p&&l>=1&&(p=1),1===p&&s--;const h=s%2;("reverse"===u||"alternate"===u&&h||"alternate-reverse"===u&&!h)&&(p=1-p);const m=i>=f?1:Math.min(p,1),v=d(c(m));e(v),"finished"===this.playState||i>=f+o?(this.playState="finished",null===(n=this.resolve)||void 0===n||n.call(this,v)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},this.play()}play(){var e;const t=performance.now();this.playState="running",this.pauseTime?this.startTime=t-(this.pauseTime-(null!==(e=this.startTime)&&void 0!==e?e:0)):this.startTime||(this.startTime=t),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=performance.now()}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}get currentTime(){return this.t}set currentTime(e){this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}const N=e=>1e3*e,F=e=>(e=>Array.isArray(e)&&_(e[0]))(e)?B(e):e,B=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`,U=e=>document.createElement("div").animate(e,{duration:.001}),H={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{U({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(U({opacity:[0,1]}).finished)},$={},W={};for(const e in H)W[e]=()=>(void 0===$[e]&&($[e]=H[e]()),$[e]);const Y=e=>Array.isArray(e)?e:[e];function G(e){return f[e]&&(e=f[e]),b(e)?m(e):e}const q={get:(e,t)=>{t=G(t);let n=S(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!n&&0!==n){const e=h.get(t);e&&(n=e.initialValue)}return n},set:(e,t,n)=>{t=G(t),S(t)?e.style.setProperty(t,n):e.style[t]=n}};function X(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}function Q(e,t,n,a={}){const l=window.__MOTION_DEV_TOOLS_RECORD,u=!1!==a.record&&l;let c,{duration:d=E.duration,delay:p=E.delay,endDelay:m=E.endDelay,repeat:v=E.repeat,easing:g=E.easing,direction:y,offset:x,allowWebkitAcceleration:T=!1}=a;const A=o(e);let M=W.waapi();const O=b(t);O&&((e,t)=>{f[t]&&(t=f[t]);const{transforms:n}=o(e);s(n,t),e.style.transform=w(n)})(e,t);const R=G(t),L=function(e,t){return e.has(t)||e.set(t,new r),e.get(t)}(A.values,R),I=h.get(R);return X(L.animation,!(C(g)&&L.generator)&&!1!==a.record),()=>{const r=()=>{var t,n;return null!==(n=null!==(t=q.get(e,R))&&void 0!==t?t:null==I?void 0:I.initialValue)&&void 0!==n?n:0};let o=function(e,t){for(let n=0;n<e.length;n++)null===e[n]&&(e[n]=n?e[n-1]:t());return e}(Y(n),r);if(C(g)){const e=g.createAnimation(o,r,O,R,L);g=e.easing,void 0!==e.keyframes&&(o=e.keyframes),void 0!==e.duration&&(d=e.duration)}if(S(R)&&(W.cssRegisterProperty()?function(e){if(!k.has(e)){k.add(e);try{const{syntax:t,initialValue:n}=h.has(e)?h.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:n})}catch(e){}}}(R):M=!1),M){I&&(o=o.map((e=>_(e)?I.toDefaultUnit(e):e))),1!==o.length||W.partialKeyframes()&&!u||o.unshift(r());const t={delay:N(p),duration:N(d),endDelay:N(m),easing:P(g)?void 0:F(g),direction:y,iterations:v+1,fill:"both"};c=e.animate({[R]:o,offset:x,easing:P(g)?g.map(F):void 0},t),c.finished||(c.finished=new Promise(((e,t)=>{c.onfinish=e,c.oncancel=t})));const n=o[o.length-1];c.finished.then((()=>{q.set(e,R,n),c.cancel()})).catch(i),T||(c.playbackRate=1.000001)}else if(O)o=o.map((e=>"string"==typeof e?parseFloat(e):e)),1===o.length&&o.unshift(parseFloat(r())),c=new V((t=>{I&&(t=I.toDefaultUnit(t)),q.set(e,R,t)}),o,Object.assign(Object.assign({},a),{duration:d,easing:g}));else{const t=o[o.length-1];q.set(e,R,I&&_(t)?I.toDefaultUnit(t):t)}return u&&l(e,t,o,{duration:d,delay:p,easing:g,repeat:v,offset:x},"motion-one"),L.setAnimation(c),c}}const K=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function Z(e,t){var n;return"string"==typeof e?t?(null!==(n=t[e])&&void 0!==n||(t[e]=document.querySelectorAll(e)),e=t[e]):e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}const J=e=>e(),ee=(e,t=E.duration)=>new Proxy({animations:e.map(J).filter(Boolean),duration:t},te),te={get:(e,t)=>{const n=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":let r=(null==n?void 0:n[t])||0;return r?r/1e3:0;case"playbackRate":case"playState":return null==n?void 0:n[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(ne)).catch(i)),e.finished;case"stop":return()=>e.animations.forEach((e=>X(e)));default:return void 0===(null==n?void 0:n[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,n)=>{switch(t){case"currentTime":n=N(n);case"currentTime":case"playbackRate":for(let r=0;r<e.animations.length;r++)e.animations[r][t]=n;return!0}return!1}},ne=e=>e.finished;function re(e=.1,{start:t=0,from:n=0,easing:r}={}){return(a,o)=>{const i=_(n)?n:function(e,t){if("first"===e)return 0;{const n=t-1;return"last"===e?n:n/2}}(n,o),l=Math.abs(i-a);let s=e*l;if(r){const t=o*e;s=R(r)(s/t)*t}return t+s}}function ae(e,t,n){return"function"==typeof e?e(t,n):e}function oe(e,t,n={}){const r=(e=Z(e)).length,a=[];for(let o=0;o<r;o++){const i=e[o];for(const e in t){const l=K(n,e);l.delay=ae(l.delay,o,r);const s=Q(i,e,t[e],l);a.push(s)}}return ee(a,n.duration)}var ie=n(655),le=n(394);function se(e,t,n,r){var a;return _(t)?t:t.startsWith("-")||t.startsWith("+")?Math.max(0,e+parseFloat(t)):"<"===t?n:null!==(a=r.get(t))&&void 0!==a?a:e}function ue(e,t,n,r,a,o){!function(e,t,n){for(let r=0;r<e.length;r++){const a=e[r];a.at>t&&a.at<n&&(u(e,a),r--)}}(e,a,o);for(let i=0;i<t.length;i++)e.push({value:t[i],at:I(a,o,r[i]),easing:L(n,i)})}function ce(e,t){return e.at===t.at?null===e.value?1:-1:e.at-t.at}function fe(e,t={}){var n;const r=function(e,t={}){var{defaultOptions:n={}}=t,r=(0,ie.__rest)(t,["defaultOptions"]);const a=[],o=new Map,i={},l=new Map;let s=0,u=0,c=0;for(let t=0;t<e.length;t++){const r=e[t];if("string"==typeof r){l.set(r,u);continue}if(!Array.isArray(r)){l.set(r.name,se(u,r.at,s,l));continue}const[a,p,h={}]=r;void 0!==h.at&&(u=se(u,h.at,s,l));let m=0;const v=Z(a,i),g=v.length;for(let e=0;e<g;e++){const t=(f=v[e],!(d=o).has(f)&&d.set(f,{}),d.get(f));for(const r in p){const a=de(r,t);let o=Y(p[r]);const i=K(h,r);let{duration:l=n.duration||E.duration,easing:s=n.easing||E.easing}=i;if(C(s)){const e=b(r);(0,le.invariant)(2===o.length||!e,"spring must be provided 2 keyframes within timeline");const t=s.createAnimation(o,(()=>"0"),e);s=t.easing,void 0!==t.keyframes&&(o=t.keyframes),void 0!==t.duration&&(l=t.duration)}const f=ae(h.delay,e,g)||0,d=u+f,v=d+l;let{offset:y=j(o.length)}=i;1===y.length&&0===y[0]&&(y[1]=1);const w=length-o.length;w>0&&z(y,w),1===o.length&&o.unshift(null),ue(a,o,s,y,d,v),m=Math.max(f+l,m),c=Math.max(v,c)}}s=u,u+=m}var f,d;return o.forEach(((e,t)=>{for(const o in e){const i=e[o];i.sort(ce);const l=[],s=[],u=[];for(let e=0;e<i.length;e++){const{at:t,value:n,easing:r}=i[e];l.push(n),s.push(D(0,c,t)),u.push(r||E.easing)}0!==s[0]&&(s.unshift(0),l.unshift(l[0]),u.unshift("linear")),1!==s[s.length-1]&&(s.push(1),l.push(null)),a.push([t,o,l,Object.assign(Object.assign(Object.assign({},n),{duration:c,easing:u,offset:s}),r)])}})),a}(e,t),a=r.map((e=>Q(...e))).filter(Boolean);return ee(a,null===(n=r[0])||void 0===n?void 0:n[3].duration)}function de(e,t){return t[e]||(t[e]=[]),t[e]}function pe(e,t,n){const r=Math.max(t-5,0);return a=n-e(r),(o=t-r)?a*(1e3/o):0;var a,o}const he=({stiffness:e=100,damping:t=10,mass:n=1,from:r=0,to:a=1,velocity:o=0,restSpeed:i=2,restDistance:l=.5}={})=>{o=o?o/1e3:0;const s={done:!1,hasReachedTarget:!1,current:r,target:a},u=a-r,c=Math.sqrt(e/n)/1e3,f=((e=100,t=10,n=1)=>t/(2*Math.sqrt(e*n)))(e,t,n);let d;if(f<1){const e=c*Math.sqrt(1-f*f);d=t=>a-Math.exp(-f*c*t)*((f*c*u-o)/e*Math.sin(e*t)+u*Math.cos(e*t))}else d=e=>a-Math.exp(-c*e)*(u+(c*u-o)*e);return e=>{s.current=d(e);const t=0===e?o:pe(d,e,s.current),n=Math.abs(t)<=i,u=Math.abs(a-s.current)<=l;var c,f,p;return s.done=n&&u,s.hasReachedTarget=(c=r,f=a,p=s.current,c<f&&p>=f||c>f&&p<=f),s}};function me(e){const t=new WeakMap;return(n={})=>{const r=new Map,a=(t=0,a=100,o=0,i=!1)=>{const l=`${t}-${a}-${o}-${i}`;return r.has(l)||r.set(l,e(Object.assign({from:t,to:a,velocity:o,restSpeed:i?.05:2,restDistance:i?.01:.5},n))),r.get(l)},o=e=>(t.has(e)||t.set(e,function(e){let t,n=10,r=e(0);const a=[r.current];for(;!r.done&&n<1e4;)r=e(n),a.push(r.done?r.target:r.current),void 0===t&&r.hasReachedTarget&&(t=n),n+=10;const o=n-10;return 1===a.length&&a.push(r.current),{keyframes:a,duration:o/1e3,overshootDuration:(null!=t?t:o)/1e3}}(e)),t.get(e));return{createAnimation:(e,t,n,r,i)=>{var l,s;let u;const c=e.length;if(n&&c<=2&&e.every(ve)){const n=e[c-1],f=1===c?null:e[0];let d=0,p=0;const h=null==i?void 0:i.generator;if(h){const{animation:t,generatorStartTime:n}=i,r=(null==t?void 0:t.startTime)||n||0,a=(null==t?void 0:t.currentTime)||performance.now()-r,o=h(a).current;p=null!==(l=f)&&void 0!==l?l:o,(1===c||2===c&&null===e[0])&&(d=pe((e=>h(e).current),a,o))}else p=null!==(s=f)&&void 0!==s?s:parseFloat(t());const m=a(p,n,d,null==r?void 0:r.includes("scale")),v=o(m);u=Object.assign(Object.assign({},v),{easing:"linear"}),i&&(i.generator=m,i.generatorStartTime=performance.now())}else u={easing:"ease",duration:o(a(0,100)).overshootDuration};return u}}}}const ve=e=>"string"!=typeof e,ge=me(he),ye=me((({from:e=0,velocity:t=0,power:n=.8,decay:r=.325,bounceDamping:a,bounceStiffness:o,changeTarget:i,min:l,max:s,restDistance:u=.5,restSpeed:c})=>{r=N(r);const f={hasReachedTarget:!1,done:!1,current:e,target:e},d=e=>void 0===l?s:void 0===s||Math.abs(l-e)<Math.abs(s-e)?l:s;let p=n*t;const h=e+p,m=void 0===i?h:i(h);f.target=m,m!==h&&(p=m-e);const v=e=>-p*Math.exp(-e/r),g=e=>m+v(e),y=e=>{const t=v(e),n=g(e);f.done=Math.abs(t)<=u,f.current=f.done?m:n};let b,w;const x=e=>{var t;t=f.current,(void 0!==l&&t<l||void 0!==s&&t>s)&&(b=e,w=he({from:f.current,to:d(f.current),velocity:pe(g,e,f.current),damping:a,stiffness:o,restDistance:u,restSpeed:c}))};return x(0),e=>{let t=!1;return w||void 0!==b||(t=!0,y(e),x(e)),void 0!==b&&e>b?(f.hasReachedTarget=!0,w(e-b)):(f.hasReachedTarget=!1,!t&&y(e),f)}})),be={any:0,all:1};function we(e,t,{root:n,margin:r,amount:a="any"}={}){if("undefined"==typeof IntersectionObserver)return()=>{};const o=Z(e),i=new WeakMap,l=new IntersectionObserver((e=>{e.forEach((e=>{const n=i.get(e.target);if(e.isIntersecting!==Boolean(n))if(e.isIntersecting){const n=t(e);"function"==typeof n?i.set(e.target,n):l.unobserve(e.target)}else n&&(n(e),i.delete(e.target))}))}),{root:n,rootMargin:r,threshold:"number"==typeof a?a:be[a]});return o.forEach((e=>l.observe(e))),()=>l.disconnect()}function xe(e,t){return function(e){return"object"==typeof e}(e)?e:e&&t?t[e]:void 0}let Se;function ke(){if(!Se)return;const e=Se.sort(_e).map(Ce);e.forEach(Pe),e.forEach(Pe),Se=void 0}function Ee(e){Se?s(Se,e):(Se=[e],requestAnimationFrame(ke))}const _e=(e,t)=>e.getDepth()-t.getDepth(),Ce=e=>e.animateUpdates(),Pe=e=>e.next(),Te=(e,t)=>new CustomEvent(e,{detail:{target:t}});function Ae(e,t,n){e.dispatchEvent(new CustomEvent(t,{detail:{originalEvent:n}}))}function Me(e,t,n){e.dispatchEvent(new CustomEvent(t,{detail:{originalEntry:n}}))}const Oe=(e,t,n)=>r=>{r.pointerType&&"mouse"!==r.pointerType||(n(),Ae(e,t,r))},Re={inView:{isActive:e=>Boolean(e.inView),subscribe:(e,{enable:t,disable:n},{inViewOptions:r={}})=>{const{once:a}=r,o=(0,ie.__rest)(r,["once"]);return we(e,(r=>{if(t(),Me(e,"viewenter",r),!a)return t=>{n(),Me(e,"viewleave",t)}}),o)}},hover:{isActive:e=>Boolean(e.hover),subscribe:(e,{enable:t,disable:n})=>{const r=Oe(e,"hoverstart",t),a=Oe(e,"hoverend",n);return e.addEventListener("pointerenter",r),e.addEventListener("pointerleave",a),()=>{e.removeEventListener("pointerenter",r),e.removeEventListener("pointerleave",a)}}},press:{isActive:e=>Boolean(e.press),subscribe:(e,{enable:t,disable:n})=>{const r=t=>{n(),Ae(e,"pressend",t),window.removeEventListener("pointerup",r)},a=n=>{t(),Ae(e,"pressstart",n),window.addEventListener("pointerup",r)};return e.addEventListener("pointerdown",a),()=>{e.removeEventListener("pointerdown",a),window.removeEventListener("pointerup",r)}}}},Le=["initial","animate",...Object.keys(Re),"exit"],Ie=new WeakMap;function De(e={},t){let n,r=t?t.getDepth()+1:0;const a={initial:!0,animate:!0},o={},l={};for(const n of Le)l[n]="string"==typeof e[n]?e[n]:null==t?void 0:t.getContext()[n];const s=!1===e.initial?"animate":"initial";let c=xe(e[s]||l[s],e.variants)||{},f=(0,ie.__rest)(c,["transition"]);const d=Object.assign({},f),p=(e,t)=>()=>{a[e]=t,Ee(m)},h=()=>{for(const t in Re){const r=Re[t].isActive(e),a=o[t];r&&!a?o[t]=Re[t].subscribe(n,{enable:p(t,!0),disable:p(t,!1)},e):!r&&a&&(a(),delete o[t])}},m={update:t=>{n&&(e=t,h(),Ee(m))},setActive:(e,t)=>{n&&(a[e]=t,Ee(m))},animateUpdates:function*(){var t,r;const o=f;f={};const l={};for(const n of Le){if(!a[n])continue;const o=xe(e[n]);if(o)for(const n in o)"transition"!==n&&(f[n]=o[n],l[n]=K(null!==(r=null!==(t=o.transition)&&void 0!==t?t:e.transition)&&void 0!==r?r:{},n))}const s=new Set([...Object.keys(f),...Object.keys(o)]),u=[];s.forEach((e=>{var t,r,a;void 0===f[e]&&(f[e]=d[e]),typeof(r=o[e])==typeof(a=f[e])&&(Array.isArray(r)&&Array.isArray(a)?function(e,t){const n=t.length;if(n!==e.length)return!1;for(let r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}(r,a):r===a)||(null!==(t=d[e])&&void 0!==t||(d[e]=q.get(n,e)),u.push(Q(n,e,f[e],l[e])))})),yield;const c=u.map((e=>e())).filter(Boolean);if(!c.length)return;const p=f;n.dispatchEvent(Te("motionstart",p)),Promise.all(c.map((e=>e.finished))).then((()=>{n.dispatchEvent(Te("motioncomplete",p))})).catch(i)},getDepth:()=>r,getTarget:()=>f,getOptions:()=>e,getContext:()=>l,mount:e=>((0,le.invariant)(Boolean(e),"Animation state must be mounted with valid Element"),n=e,Ie.set(n,m),h(),()=>{Ie.delete(n),function(e){Se&&u(Se,e)}(m);for(const e in o)o[e]()}),isMounted:()=>Boolean(n)};return m}function ze(e){const t={},n=[];for(let r in e){const a=e[r];b(r)&&(f[r]&&(r=f[r]),n.push(r),r=m(r));let o=Array.isArray(a)?a[0]:a;const i=h.get(r);i&&(o=_(a)?i.toDefaultUnit(a):a),t[r]=o}return n.length&&(t.transform=w(n)),t}const je=e=>`-${e.toLowerCase()}`;function Ve(e={}){const t=ze(e);let n="";for(const e in t)n+=e.startsWith("--")?e:e.replace(/[A-Z]/g,je),n+=`: ${t[e]}; `;return n}},431:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(655),a=n(294),o=n(394),i=n(839),l=n(878),s=n(573),u=n(524);function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function f(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var d=f(a),p=c(a),h=c(i),m=("undefined"==typeof process||process.env,"production"),v=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},g={measureLayout:v(["layout","layoutId","drag"]),animation:v(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:v(["exit"]),drag:v(["drag","dragControls"]),focus:v(["whileFocus"]),hover:v(["whileHover","onHoverStart","onHoverEnd"]),tap:v(["whileTap","onTap","onTapStart","onTapCancel"]),pan:v(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:v(["whileInView","onViewportEnter","onViewportLeave"])};function y(e){for(var t in e)null!==e[t]&&("projectionNodeConstructor"===t?g.projectionNodeConstructor=e[t]:g[t].Component=e[t])}var b=a.createContext({strict:!1}),w=Object.keys(g),x=w.length,S=a.createContext({transformPagePoint:function(e){return e},isStatic:!1,reducedMotion:"never"}),k=a.createContext({});function E(){return a.useContext(k).visualElement}var _=a.createContext(null),C="undefined"!=typeof document,P=C?a.useLayoutEffect:a.useEffect,T={current:null},A=!1;function M(){return!A&&function(){if(A=!0,C)if(window.matchMedia){var e=window.matchMedia("(prefers-reduced-motion)"),t=function(){return T.current=e.matches};e.addListener(t),t()}else T.current=!1}(),r.__read(a.useState(T.current),1)[0]}function O(){var e=M(),t=a.useContext(S).reducedMotion;return"never"!==t&&("always"===t||e)}function R(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function L(e){return Array.isArray(e)}function I(e){return"string"==typeof e||L(e)}function D(e,t,n,r,a){var o;return void 0===r&&(r={}),void 0===a&&(a={}),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,a)),"string"==typeof t&&(t=null===(o=e.variants)||void 0===o?void 0:o[t]),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,a)),t}function z(e,t,n){var r=e.getProps();return D(r,t,null!=n?n:r.custom,function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e))}function j(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||I(e.initial)||I(e.animate)||I(e.whileHover)||I(e.whileDrag)||I(e.whileTap)||I(e.whileFocus)||I(e.exit)}function V(e){return Boolean(j(e)||e.variants)}function N(e){return Array.isArray(e)?e.join(" "):e}function F(e){var t=a.useRef(null);return null===t.current&&(t.current=e()),t.current}function B(e,t){-1===e.indexOf(t)&&e.push(t)}function U(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var H=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return B(this.subscriptions,e),function(){return U(t.subscriptions,e)}},e.prototype.notify=function(e,t,n){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(var a=0;a<r;a++){var o=this.subscriptions[a];o&&o(e,t,n)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),$=function(){function e(e){var t,n=this;this.version="6.4.1",this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new H,this.velocityUpdateSubscribers=new H,this.renderSubscribers=new H,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),n.prev=n.current,n.current=e;var r=i.getFrameData(),a=r.delta,o=r.timestamp;n.lastUpdated!==o&&(n.timeDelta=a,n.lastUpdated=o,h.default.postRender(n.scheduleVelocityCheck)),n.prev!==n.current&&n.updateSubscribers.notify(n.current),n.velocityUpdateSubscribers.getSize()&&n.velocityUpdateSubscribers.notify(n.getVelocity()),t&&n.renderSubscribers.notify(n.current)},this.scheduleVelocityCheck=function(){return h.default.postRender(n.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==n.lastUpdated&&(n.prev=n.current,n.velocityUpdateSubscribers.notify(n.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?l.velocityPerSecond(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.hasAnimated=!0,t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function W(e){return new $(e)}var Y=function(e){return Boolean(null!==e&&"object"==typeof e&&e.getVelocity)},G=function(e){return 1e3*e},q={linear:l.linear,easeIn:l.easeIn,easeInOut:l.easeInOut,easeOut:l.easeOut,circIn:l.circIn,circInOut:l.circInOut,circOut:l.circOut,backIn:l.backIn,backInOut:l.backInOut,backOut:l.backOut,anticipate:l.anticipate,bounceIn:l.bounceIn,bounceInOut:l.bounceInOut,bounceOut:l.bounceOut},X=function(e){if(Array.isArray(e)){o.invariant(4===e.length,"Cubic bezier arrays must contain four numerical values.");var t=r.__read(e,4),n=t[0],a=t[1],i=t[2],s=t[3];return l.cubicBezier(n,a,i,s)}return"string"==typeof e?(o.invariant(void 0!==q[e],"Invalid easing type '".concat(e,"'")),q[e]):e},Q=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!s.complex.test(t)||t.startsWith("url(")))},K=function(e){return Array.isArray(e)},Z=function(){return{type:"spring",stiffness:500,damping:25,restSpeed:10}},J=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restSpeed:10}},ee=function(){return{type:"keyframes",ease:"linear",duration:.3}},te=function(e){return{type:"keyframes",duration:.8,values:e}},ne={x:Z,y:Z,z:Z,rotate:Z,rotateX:Z,rotateY:Z,rotateZ:Z,scaleX:J,scaleY:J,scale:J,opacity:ee,backgroundColor:ee,color:ee,default:J},re=r.__assign(r.__assign({},s.number),{transform:Math.round}),ae={borderWidth:s.px,borderTopWidth:s.px,borderRightWidth:s.px,borderBottomWidth:s.px,borderLeftWidth:s.px,borderRadius:s.px,radius:s.px,borderTopLeftRadius:s.px,borderTopRightRadius:s.px,borderBottomRightRadius:s.px,borderBottomLeftRadius:s.px,width:s.px,maxWidth:s.px,height:s.px,maxHeight:s.px,size:s.px,top:s.px,right:s.px,bottom:s.px,left:s.px,padding:s.px,paddingTop:s.px,paddingRight:s.px,paddingBottom:s.px,paddingLeft:s.px,margin:s.px,marginTop:s.px,marginRight:s.px,marginBottom:s.px,marginLeft:s.px,rotate:s.degrees,rotateX:s.degrees,rotateY:s.degrees,rotateZ:s.degrees,scale:s.scale,scaleX:s.scale,scaleY:s.scale,scaleZ:s.scale,skew:s.degrees,skewX:s.degrees,skewY:s.degrees,distance:s.px,translateX:s.px,translateY:s.px,translateZ:s.px,x:s.px,y:s.px,z:s.px,perspective:s.px,transformPerspective:s.px,opacity:s.alpha,originX:s.progressPercentage,originY:s.progressPercentage,originZ:s.px,zIndex:re,fillOpacity:s.alpha,strokeOpacity:s.alpha,numOctaves:re},oe=r.__assign(r.__assign({},ae),{color:s.color,backgroundColor:s.color,outlineColor:s.color,fill:s.color,stroke:s.color,borderColor:s.color,borderTopColor:s.color,borderRightColor:s.color,borderBottomColor:s.color,borderLeftColor:s.color,filter:s.filter,WebkitFilter:s.filter}),ie=function(e){return oe[e]};function le(e,t){var n,r=ie(e);return r!==s.filter&&(r=s.complex),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,t)}var se={current:!1},ue=function(e){return K(e)?e[e.length-1]||0:e},ce=!1;function fe(e,t,n){var a,i,l,s;return Array.isArray(t.to)&&(null!==(a=e.duration)&&void 0!==a||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=r.__spreadArray([],r.__read(e.to),!1),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=r.__rest(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=r.__assign(r.__assign({},e),(i=n,l=t.to,s=K(l)?te:ne[i]||ne.default,r.__assign({to:l},s(l))))),r.__assign(r.__assign({},t),function(e){var t=e.ease,n=e.times,a=e.yoyo,i=e.flip,l=e.loop,s=r.__rest(e,["ease","times","yoyo","flip","loop"]),u=r.__assign({},s);return n&&(u.offset=n),s.duration&&(u.duration=G(s.duration)),s.repeatDelay&&(u.repeatDelay=G(s.repeatDelay)),t&&(u.ease=function(e){return Array.isArray(e)&&"number"!=typeof e[0]}(t)?t.map(X):X(t)),"tween"===s.type&&(u.type="keyframes"),(a||l||i)&&(o.warning(!ce,"yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options."),ce=!0,a?u.repeatType="reverse":l?u.repeatType="loop":i&&(u.repeatType="mirror"),u.repeat=l||a||i||s.repeat),"spring"!==s.type&&(u.type="keyframes"),u}(e))}function de(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function pe(e){return"number"==typeof e?0:le("",e)}function he(e,t){return e[t]||e.default||e}function me(e,t,n,a){return void 0===a&&(a={}),se.current&&(a={type:!1}),t.start((function(i){var s,u,c=function(e,t,n,a,i){var s,u=he(a,e),c=null!==(s=u.from)&&void 0!==s?s:t.get(),f=Q(e,n);"none"===c&&f&&"string"==typeof n?c=le(e,n):de(c)&&"string"==typeof n?c=pe(n):!Array.isArray(n)&&de(n)&&"string"==typeof c&&(n=pe(c));var d=Q(e,c);return o.warning(d===f,"You are trying to animate ".concat(e,' from "').concat(c,'" to "').concat(n,'". ').concat(c," is not an animatable value - to enable this animation set ").concat(c," to a value animatable to ").concat(n," via the `style` property.")),d&&f&&!1!==u.type?function(){var a={from:c,to:n,velocity:t.getVelocity(),onComplete:i,onUpdate:function(e){return t.set(e)}};return"inertia"===u.type||"decay"===u.type?l.inertia(r.__assign(r.__assign({},a),u)):l.animate(r.__assign(r.__assign({},fe(u,a,e)),{onUpdate:function(e){var t;a.onUpdate(e),null===(t=u.onUpdate)||void 0===t||t.call(u,e)},onComplete:function(){var e;a.onComplete(),null===(e=u.onComplete)||void 0===e||e.call(u)}}))}:function(){var e,r,a=ue(n);return t.set(a),i(),null===(e=null==u?void 0:u.onUpdate)||void 0===e||e.call(u,a),null===(r=null==u?void 0:u.onComplete)||void 0===r||r.call(u),{stop:function(){}}}}(e,t,n,a,i),f=function(e,t){var n,r;return null!==(r=null!==(n=(he(e,t)||{}).delay)&&void 0!==n?n:e.delay)&&void 0!==r?r:0}(a,e),d=function(){return u=c()};return f?s=window.setTimeout(d,G(f)):d(),function(){clearTimeout(s),null==u||u.stop()}}))}function ve(e,t,n){void 0===n&&(n={});var r=Y(e)?e:W(e);return me("",r,t,n),{stop:function(){return r.stop()},isAnimating:function(){return r.isAnimating()}}}var ge=["TopLeft","TopRight","BottomLeft","BottomRight"],ye=ge.length,be=function(e){return"string"==typeof e?parseFloat(e):e},we=function(e){return"number"==typeof e||s.px.test(e)};function xe(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e.borderRadius}var Se=Ee(0,.5,l.circOut),ke=Ee(.5,.95,l.linear);function Ee(e,t,n){return function(r){return r<e?0:r>t?1:n(l.progress(e,t,r))}}function _e(e,t){e.min=t.min,e.max=t.max}function Ce(e,t){_e(e.x,t.x),_e(e.y,t.y)}function Pe(e){return void 0===e||1===e}function Te(e){var t=e.scale,n=e.scaleX,r=e.scaleY;return!Pe(t)||!Pe(n)||!Pe(r)}function Ae(e){return Te(e)||Me(e.x)||Me(e.y)||e.z||e.rotate||e.rotateX||e.rotateY}function Me(e){return e&&"0%"!==e}function Oe(e,t,n){return n+t*(e-n)}function Re(e,t,n,r,a){return void 0!==a&&(e=Oe(e,a,r)),Oe(e,n,r)+t}function Le(e,t,n,r,a){void 0===t&&(t=0),void 0===n&&(n=1),e.min=Re(e.min,t,n,r,a),e.max=Re(e.max,t,n,r,a)}function Ie(e,t){var n=t.x,r=t.y;Le(e.x,n.translate,n.scale,n.originPoint),Le(e.y,r.translate,r.scale,r.originPoint)}function De(e,t){e.min=e.min+t,e.max=e.max+t}function ze(e,t,n){var a=r.__read(n,3),o=a[0],i=a[1],s=a[2],u=void 0!==t[s]?t[s]:.5,c=l.mix(e.min,e.max,u);Le(e,t[o],t[i],c,t.scale)}var je=["x","scaleX","originX"],Ve=["y","scaleY","originY"];function Ne(e,t){ze(e.x,t,je),ze(e.y,t,Ve)}function Fe(e){return e.max-e.min}function Be(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),l.distance(e,t)<n}function Ue(e,t,n,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=l.mix(t.min,t.max,e.origin),e.scale=Fe(n)/Fe(t),(Be(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=l.mix(n.min,n.max,e.origin)-e.originPoint,(Be(e.translate)||isNaN(e.translate))&&(e.translate=0)}function He(e,t,n,r){Ue(e.x,t.x,n.x,null==r?void 0:r.originX),Ue(e.y,t.y,n.y,null==r?void 0:r.originY)}function $e(e,t,n){e.min=n.min+t.min,e.max=e.min+Fe(t)}function We(e,t,n){e.min=t.min-n.min,e.max=e.min+Fe(t)}function Ye(e,t,n){We(e.x,t.x,n.x),We(e.y,t.y,n.y)}function Ge(e,t,n,r,a){return e=Oe(e-=t,1/n,r),void 0!==a&&(e=Oe(e,1/a,r)),e}function qe(e,t,n,a,o){var i=r.__read(n,3),u=i[0],c=i[1],f=i[2];!function(e,t,n,r,a,o,i){if(void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5),void 0===o&&(o=e),void 0===i&&(i=e),s.percent.test(t)&&(t=parseFloat(t),t=l.mix(i.min,i.max,t/100)-i.min),"number"==typeof t){var u=l.mix(o.min,o.max,r);e===o&&(u-=t),e.min=Ge(e.min,t,n,u,a),e.max=Ge(e.max,t,n,u,a)}}(e,t[u],t[c],t[f],t.scale,a,o)}var Xe=["x","scaleX","originX"],Qe=["y","scaleY","originY"];function Ke(e,t,n,r){qe(e.x,t,Xe,null==n?void 0:n.x,null==r?void 0:r.x),qe(e.y,t,Qe,null==n?void 0:n.y,null==r?void 0:r.y)}var Ze=function(){return{x:{min:0,max:0},y:{min:0,max:0}}};function Je(e){return 0===e.translate&&1===e.scale}function et(e){return Je(e.x)&&Je(e.y)}function tt(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}var nt=function(){function e(){this.members=[]}return e.prototype.add=function(e){B(this.members,e),e.scheduleRender()},e.prototype.remove=function(e){if(U(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){var t=this.members[this.members.length-1];t&&this.promote(t)}},e.prototype.relegate=function(e){var t,n=this.members.findIndex((function(t){return e===t}));if(0===n)return!1;for(var r=n;r>=0;r--){var a=this.members[r];if(!1!==a.isPresent){t=a;break}}return!!t&&(this.promote(t),!0)},e.prototype.promote=function(e,t){var n,r=this.lead;e!==r&&(this.prevLead=r,this.lead=e,e.show(),r&&(r.instance&&r.scheduleRender(),e.scheduleRender(),e.resumeFrom=r,t&&(e.resumeFrom.preserveOpacity=!0),r.snapshot&&(e.snapshot=r.snapshot,e.snapshot.latestValues=r.animationValues||r.latestValues,e.snapshot.isShared=!0),(null===(n=e.root)||void 0===n?void 0:n.isUpdating)&&(e.isLayoutDirty=!0),!1===e.options.crossfade&&r.hide()))},e.prototype.exitAnimationComplete=function(){this.members.forEach((function(e){var t,n,r,a,o;null===(n=(t=e.options).onExitComplete)||void 0===n||n.call(t),null===(o=null===(r=e.resumingFrom)||void 0===r?void 0:(a=r.options).onExitComplete)||void 0===o||o.call(a)}))},e.prototype.scheduleRender=function(){this.members.forEach((function(e){e.instance&&e.scheduleRender(!1)}))},e.prototype.removeLeadSnapshot=function(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)},e}(),rt={};function at(e){Object.assign(rt,e)}function ot(e,t,n){var r=e.x.translate/t.x,a=e.y.translate/t.y,o="translate3d(".concat(r,"px, ").concat(a,"px, 0) ");if(o+="scale(".concat(1/t.x,", ").concat(1/t.y,") "),n){var i=n.rotate,l=n.rotateX,s=n.rotateY;i&&(o+="rotate(".concat(i,"deg) ")),l&&(o+="rotateX(".concat(l,"deg) ")),s&&(o+="rotateY(".concat(s,"deg) "))}var u=e.x.scale*t.x,c=e.y.scale*t.y;return"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)"===(o+="scale(".concat(u,", ").concat(c,")"))?"none":o}function it(e){return[e("x"),e("y")]}var lt=["","X","Y","Z"],st=["transformPerspective","x","y","z"];function ut(e,t){return st.indexOf(e)-st.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return lt.forEach((function(t){return st.push(e+t)}))}));var ct=new Set(st);function ft(e){return ct.has(e)}var dt=new Set(["originX","originY","originZ"]);function pt(e){return dt.has(e)}var ht=function(e,t){return e.depth-t.depth},mt=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){B(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){U(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(ht),this.isDirty=!1,this.children.forEach(e)},e}();function vt(e){var t,n=Y(e)?e.get():e;return t=n,Boolean(t&&"object"==typeof t&&t.mix&&t.toValue)?n.toValue():n}var gt={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function yt(e){var t=e.attachResizeListener,n=e.defaultParent,a=e.measureScroll,o=e.checkIsScrollRoot,u=e.resetTransform;return function(){function e(e,t,a){var o=this;void 0===t&&(t={}),void 0===a&&(a=null==n?void 0:n()),this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=function(){o.isUpdating&&(o.isUpdating=!1,o.clearAllSnapshots())},this.updateProjection=function(){o.nodes.forEach(_t),o.nodes.forEach(Ct)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=e,this.latestValues=t,this.root=a?a.root||a:this,this.path=a?r.__spreadArray(r.__spreadArray([],r.__read(a.path),!1),[a],!1):[],this.parent=a,this.depth=a?a.depth+1:0,e&&this.root.registerPotentialNode(e,this);for(var i=0;i<this.path.length;i++)this.path[i].shouldResetTransform=!0;this.root===this&&(this.nodes=new mt)}return e.prototype.addEventListener=function(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new H),this.eventHandlers.get(e).add(t)},e.prototype.notifyListeners=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var a=this.eventHandlers.get(e);null==a||a.notify.apply(a,r.__spreadArray([],r.__read(t),!1))},e.prototype.hasListeners=function(e){return this.eventHandlers.has(e)},e.prototype.registerPotentialNode=function(e,t){this.potentialNodes.set(e,t)},e.prototype.mount=function(e,n){var a,o=this;if(void 0===n&&(n=!1),!this.instance){this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;var i=this.options,l=i.layoutId,s=i.layout,u=i.visualElement;if(u&&!u.getInstance()&&u.mount(e),this.root.nodes.add(this),null===(a=this.parent)||void 0===a||a.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(s||l)&&(this.isLayoutDirty=!0),t){var c,f=function(){return o.root.updateBlockedByResize=!1};t(e,(function(){o.root.updateBlockedByResize=!0,clearTimeout(c),c=window.setTimeout(f,250),gt.hasAnimatedSinceResize&&(gt.hasAnimatedSinceResize=!1,o.nodes.forEach(Et))}))}l&&this.root.registerSharedNode(l,this),!1!==this.options.animate&&u&&(l||s)&&this.addEventListener("didUpdate",(function(e){var t,n,a,i,l,s=e.delta,c=e.hasLayoutChanged,f=e.hasRelativeTargetChanged,d=e.layout;if(o.isTreeAnimationBlocked())return o.target=void 0,void(o.relativeTarget=void 0);var p=null!==(n=null!==(t=o.options.transition)&&void 0!==t?t:u.getDefaultTransition())&&void 0!==n?n:Rt,h=u.getProps(),m=h.onLayoutAnimationStart,v=h.onLayoutAnimationComplete,g=!o.targetLayout||!tt(o.targetLayout,d)||f,y=!c&&f;if((null===(a=o.resumeFrom)||void 0===a?void 0:a.instance)||y||c&&(g||!o.currentAnimation)){o.resumeFrom&&(o.resumingFrom=o.resumeFrom,o.resumingFrom.resumingFrom=void 0),o.setAnimationOrigin(s,y);var b=r.__assign(r.__assign({},he(p,"layout")),{onPlay:m,onComplete:v});u.shouldReduceMotion&&(b.delay=0,b.type=!1),o.startAnimation(b)}else c||0!==o.animationProgress||o.finishAnimation(),o.isLead()&&(null===(l=(i=o.options).onExitComplete)||void 0===l||l.call(i));o.targetLayout=d}))}},e.prototype.unmount=function(){var e,t;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(e=this.getStack())||void 0===e||e.remove(this),null===(t=this.parent)||void 0===t||t.children.delete(this),this.instance=void 0,i.cancelSync.preRender(this.updateProjection)},e.prototype.blockUpdate=function(){this.updateManuallyBlocked=!0},e.prototype.unblockUpdate=function(){this.updateManuallyBlocked=!1},e.prototype.isUpdateBlocked=function(){return this.updateManuallyBlocked||this.updateBlockedByResize},e.prototype.isTreeAnimationBlocked=function(){var e;return this.isAnimationBlocked||(null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimationBlocked())||!1},e.prototype.startUpdate=function(){var e;this.isUpdateBlocked()||(this.isUpdating=!0,null===(e=this.nodes)||void 0===e||e.forEach(Pt))},e.prototype.willUpdate=function(e){var t,n,r;if(void 0===e&&(e=!0),this.root.isUpdateBlocked())null===(n=(t=this.options).onExitComplete)||void 0===n||n.call(t);else if(!this.root.isUpdating&&this.root.startUpdate(),!this.isLayoutDirty){this.isLayoutDirty=!0;for(var a=0;a<this.path.length;a++){var o=this.path[a];o.shouldResetTransform=!0,o.updateScroll()}var i=this.options,l=i.layoutId,s=i.layout;if(void 0!==l||s){var u=null===(r=this.options.visualElement)||void 0===r?void 0:r.getProps().transformTemplate;this.prevTransformTemplateValue=null==u?void 0:u(this.latestValues,""),this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}}},e.prototype.didUpdate=function(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(St);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(Lt),this.potentialNodes.clear()),this.nodes.forEach(kt),this.nodes.forEach(bt),this.nodes.forEach(wt),this.clearAllSnapshots(),i.flushSync.update(),i.flushSync.preRender(),i.flushSync.render())},e.prototype.clearAllSnapshots=function(){this.nodes.forEach(xt),this.sharedNodes.forEach(Tt)},e.prototype.scheduleUpdateProjection=function(){h.default.preRender(this.updateProjection,!1,!0)},e.prototype.scheduleCheckAfterUnmount=function(){var e=this;h.default.postRender((function(){e.isLayoutDirty?e.root.didUpdate():e.root.checkUpdateFailed()}))},e.prototype.updateSnapshot=function(){if(!this.snapshot&&this.instance){var e=this.measure(),t=this.removeTransform(this.removeElementScroll(e));Dt(t),this.snapshot={measured:e,layout:t,latestValues:{}}}},e.prototype.updateLayout=function(){var e;if(this.instance&&(this.updateScroll(),this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty)){if(this.resumeFrom&&!this.resumeFrom.instance)for(var t=0;t<this.path.length;t++)this.path[t].updateScroll();var n=this.measure();Dt(n);var r=this.layout;this.layout={measured:n,actual:this.removeElementScroll(n)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(e=this.options.visualElement)||void 0===e||e.notifyLayoutMeasure(this.layout.actual,null==r?void 0:r.actual)}},e.prototype.updateScroll=function(){this.options.layoutScroll&&this.instance&&(this.isScrollRoot=o(this.instance),this.scroll=a(this.instance))},e.prototype.resetTransform=function(){var e;if(u){var t=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!et(this.projectionDelta),r=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate,a=null==r?void 0:r(this.latestValues,""),o=a!==this.prevTransformTemplateValue;t&&(n||Ae(this.latestValues)||o)&&(u(this.instance,a),this.shouldResetTransform=!1,this.scheduleRender())}},e.prototype.measure=function(){var e=this.options.visualElement;if(!e)return{x:{min:0,max:0},y:{min:0,max:0}};var t=e.measureViewportBox(),n=this.root.scroll;return n&&(De(t.x,n.x),De(t.y,n.y)),t},e.prototype.removeElementScroll=function(e){var t={x:{min:0,max:0},y:{min:0,max:0}};Ce(t,e);for(var n=0;n<this.path.length;n++){var r=this.path[n],a=r.scroll,o=r.options,i=r.isScrollRoot;if(r!==this.root&&a&&o.layoutScroll){if(i){Ce(t,e);var l=this.root.scroll;l&&(De(t.x,-l.x),De(t.y,-l.y))}De(t.x,a.x),De(t.y,a.y)}}return t},e.prototype.applyTransform=function(e,t){void 0===t&&(t=!1);var n={x:{min:0,max:0},y:{min:0,max:0}};Ce(n,e);for(var r=0;r<this.path.length;r++){var a=this.path[r];!t&&a.options.layoutScroll&&a.scroll&&a!==a.root&&Ne(n,{x:-a.scroll.x,y:-a.scroll.y}),Ae(a.latestValues)&&Ne(n,a.latestValues)}return Ae(this.latestValues)&&Ne(n,this.latestValues),n},e.prototype.removeTransform=function(e){var t,n={x:{min:0,max:0},y:{min:0,max:0}};Ce(n,e);for(var r=0;r<this.path.length;r++){var a=this.path[r];if(a.instance&&Ae(a.latestValues)){Te(a.latestValues)&&a.updateSnapshot();var o={x:{min:0,max:0},y:{min:0,max:0}};Ce(o,a.measure()),Ke(n,a.latestValues,null===(t=a.snapshot)||void 0===t?void 0:t.layout,o)}}return Ae(this.latestValues)&&Ke(n,this.latestValues),n},e.prototype.setTargetDelta=function(e){this.targetDelta=e,this.root.scheduleUpdateProjection()},e.prototype.setOptions=function(e){var t;this.options=r.__assign(r.__assign(r.__assign({},this.options),e),{crossfade:null===(t=e.crossfade)||void 0===t||t})},e.prototype.clearMeasurements=function(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1},e.prototype.resolveTargetDelta=function(){var e,t,n,r,a=this.options,o=a.layout,i=a.layoutId;this.layout&&(o||i)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},Ye(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),Ce(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(e=this.relativeParent)||void 0===e?void 0:e.target)?(t=this.target,n=this.relativeTarget,r=this.relativeParent.target,$e(t.x,n.x,r.x),$e(t.y,n.y,r.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):Ce(this.target,this.layout.actual),Ie(this.target,this.targetDelta)):Ce(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},Ye(this.relativeTargetOrigin,this.target,this.relativeParent.target),Ce(this.relativeTarget,this.relativeTargetOrigin)))))},e.prototype.getClosestProjectingParent=function(){if(this.parent&&!Ae(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()},e.prototype.calcProjection=function(){var e,t=this.options,n=t.layout,r=t.layoutId;if(this.isTreeAnimating=Boolean((null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),this.layout&&(n||r)){var a=this.getLead();Ce(this.layoutCorrected,this.layout.actual),function(e,t,n,r){var a,o;void 0===r&&(r=!1);var i=n.length;if(i){var l,s;t.x=t.y=1;for(var u=0;u<i;u++)s=(l=n[u]).projectionDelta,"contents"!==(null===(o=null===(a=l.instance)||void 0===a?void 0:a.style)||void 0===o?void 0:o.display)&&(r&&l.options.layoutScroll&&l.scroll&&l!==l.root&&Ne(e,{x:-l.scroll.x,y:-l.scroll.y}),s&&(t.x*=s.x.scale,t.y*=s.y.scale,Ie(e,s)),r&&Ae(l.latestValues)&&Ne(e,l.latestValues))}}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==a);var o=a.target;if(o){this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});var i=this.treeScale.x,l=this.treeScale.y,s=this.projectionTransform;He(this.projectionDelta,this.layoutCorrected,o,this.latestValues),this.projectionTransform=ot(this.projectionDelta,this.treeScale),this.projectionTransform===s&&this.treeScale.x===i&&this.treeScale.y===l||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",o))}}},e.prototype.hide=function(){this.isVisible=!1},e.prototype.show=function(){this.isVisible=!0},e.prototype.scheduleRender=function(e){var t,n,r;void 0===e&&(e=!0),null===(n=(t=this.options).scheduleRender)||void 0===n||n.call(t),e&&(null===(r=this.getStack())||void 0===r||r.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)},e.prototype.setAnimationOrigin=function(e,t){var n,a=this;void 0===t&&(t=!1);var o=this.snapshot,i=(null==o?void 0:o.latestValues)||{},u=r.__assign({},this.latestValues),c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!t;var f={x:{min:0,max:0},y:{min:0,max:0}},d=null==o?void 0:o.isShared,p=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,h=Boolean(d&&!p&&!0===this.options.crossfade&&!this.path.some(Ot));this.animationProgress=0,this.mixTargetDelta=function(t){var n,r,o,m,v,g=t/1e3;At(c.x,e.x,g),At(c.y,e.y,g),a.setTargetDelta(c),a.relativeTarget&&a.relativeTargetOrigin&&a.layout&&(null===(n=a.relativeParent)||void 0===n?void 0:n.layout)&&(Ye(f,a.layout.actual,a.relativeParent.layout.actual),r=a.relativeTarget,o=a.relativeTargetOrigin,m=f,v=g,Mt(r.x,o.x,m.x,v),Mt(r.y,o.y,m.y,v)),d&&(a.animationValues=u,function(e,t,n,r,a,o){var i,u,c,f;a?(e.opacity=l.mix(0,null!==(i=n.opacity)&&void 0!==i?i:1,Se(r)),e.opacityExit=l.mix(null!==(u=t.opacity)&&void 0!==u?u:1,0,ke(r))):o&&(e.opacity=l.mix(null!==(c=t.opacity)&&void 0!==c?c:1,null!==(f=n.opacity)&&void 0!==f?f:1,r));for(var d=0;d<ye;d++){var p="border".concat(ge[d],"Radius"),h=xe(t,p),m=xe(n,p);void 0===h&&void 0===m||(h||(h=0),m||(m=0),0===h||0===m||we(h)===we(m)?(e[p]=Math.max(l.mix(be(h),be(m),r),0),(s.percent.test(m)||s.percent.test(h))&&(e[p]+="%")):e[p]=m)}(t.rotate||n.rotate)&&(e.rotate=l.mix(t.rotate||0,n.rotate||0,r))}(u,i,a.latestValues,g,h,p)),a.root.scheduleUpdateProjection(),a.scheduleRender(),a.animationProgress=g},this.mixTargetDelta(0)},e.prototype.startAnimation=function(e){var t,n,a=this;this.notifyListeners("animationStart"),null===(t=this.currentAnimation)||void 0===t||t.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(i.cancelSync.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=h.default.update((function(){gt.hasAnimatedSinceResize=!0,a.currentAnimation=ve(0,1e3,r.__assign(r.__assign({},e),{onUpdate:function(t){var n;a.mixTargetDelta(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:function(){var t;null===(t=e.onComplete)||void 0===t||t.call(e),a.completeAnimation()}})),a.resumingFrom&&(a.resumingFrom.currentAnimation=a.currentAnimation),a.pendingAnimation=void 0}))},e.prototype.completeAnimation=function(){var e;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(e=this.getStack())||void 0===e||e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")},e.prototype.finishAnimation=function(){var e;this.currentAnimation&&(null===(e=this.mixTargetDelta)||void 0===e||e.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()},e.prototype.applyTransformsToTarget=function(){var e=this.getLead(),t=e.targetWithTransforms,n=e.target,r=e.layout,a=e.latestValues;t&&n&&r&&(Ce(t,n),Ne(t,a),He(this.projectionDeltaWithTransform,this.layoutCorrected,t,a))},e.prototype.registerSharedNode=function(e,t){var n,r,a;this.sharedNodes.has(e)||this.sharedNodes.set(e,new nt),this.sharedNodes.get(e).add(t),t.promote({transition:null===(n=t.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(a=null===(r=t.options.initialPromotionConfig)||void 0===r?void 0:r.shouldPreserveFollowOpacity)||void 0===a?void 0:a.call(r,t)})},e.prototype.isLead=function(){var e=this.getStack();return!e||e.lead===this},e.prototype.getLead=function(){var e;return this.options.layoutId&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this},e.prototype.getPrevLead=function(){var e;return this.options.layoutId?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0},e.prototype.getStack=function(){var e=this.options.layoutId;if(e)return this.root.sharedNodes.get(e)},e.prototype.promote=function(e){var t=void 0===e?{}:e,n=t.needsReset,r=t.transition,a=t.preserveFollowOpacity,o=this.getStack();o&&o.promote(this,a),n&&(this.projectionDelta=void 0,this.needsReset=!0),r&&this.setOptions({transition:r})},e.prototype.relegate=function(){var e=this.getStack();return!!e&&e.relegate(this)},e.prototype.resetRotation=function(){var e=this.options.visualElement;if(e){for(var t=!1,n={},r=0;r<lt.length;r++){var a="rotate"+lt[r];e.getStaticValue(a)&&(t=!0,n[a]=e.getStaticValue(a),e.setStaticValue(a,0))}if(t){for(var a in null==e||e.syncRender(),n)e.setStaticValue(a,n[a]);e.scheduleRender()}}},e.prototype.getProjectionStyles=function(e){var t,n,r,a,o,i;void 0===e&&(e={});var l={};if(!this.instance||this.isSVG)return l;if(!this.isVisible)return{visibility:"hidden"};l.visibility="";var s=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,l.opacity="",l.pointerEvents=vt(e.pointerEvents)||"",l.transform=s?s(this.latestValues,""):"none",l;var u=this.getLead();if(!this.projectionDelta||!this.layout||!u.target){var c={};return this.options.layoutId&&(c.opacity=null!==(n=this.latestValues.opacity)&&void 0!==n?n:1,c.pointerEvents=vt(e.pointerEvents)||""),this.hasProjected&&!Ae(this.latestValues)&&(c.transform=s?s({},""):"none",this.hasProjected=!1),c}var f=u.animationValues||u.latestValues;this.applyTransformsToTarget(),l.transform=ot(this.projectionDeltaWithTransform,this.treeScale,f),s&&(l.transform=s(f,l.transform));var d=this.projectionDelta,p=d.x,h=d.y;for(var m in l.transformOrigin="".concat(100*p.origin,"% ").concat(100*h.origin,"% 0"),u.animationValues?l.opacity=u===this?null!==(a=null!==(r=f.opacity)&&void 0!==r?r:this.latestValues.opacity)&&void 0!==a?a:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:l.opacity=u===this?null!==(o=f.opacity)&&void 0!==o?o:"":null!==(i=f.opacityExit)&&void 0!==i?i:0,rt)if(void 0!==f[m]){var v=rt[m],g=v.correct,y=v.applyTo,b=g(f[m],u);if(y)for(var w=y.length,x=0;x<w;x++)l[y[x]]=b;else l[m]=b}return this.options.layoutId&&(l.pointerEvents=u===this?vt(e.pointerEvents)||"":"none"),l},e.prototype.clearSnapshot=function(){this.resumeFrom=this.snapshot=void 0},e.prototype.resetTree=function(){this.root.nodes.forEach((function(e){var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(St),this.root.sharedNodes.clear()},e}()}function bt(e){e.updateLayout()}function wt(e){var t,n,r,a,o=null!==(n=null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)&&void 0!==n?n:e.snapshot;if(e.isLead()&&e.layout&&o&&e.hasListeners("didUpdate")){var i=e.layout,l=i.actual,s=i.measured;"size"===e.options.animationType?it((function(e){var t=o.isShared?o.measured[e]:o.layout[e],n=Fe(t);t.min=l[e].min,t.max=t.min+n})):"position"===e.options.animationType&&it((function(e){var t=o.isShared?o.measured[e]:o.layout[e],n=Fe(l[e]);t.max=t.min+n}));var u={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};He(u,l,o.layout);var c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};o.isShared?He(c,e.applyTransform(s,!0),o.measured):He(c,l,o.layout);var f=!et(u),d=!1;if(!e.resumeFrom&&(e.relativeParent=e.getClosestProjectingParent(),e.relativeParent&&!e.relativeParent.resumeFrom)){var p=e.relativeParent,h=p.snapshot,m=p.layout;if(h&&m){var v={x:{min:0,max:0},y:{min:0,max:0}};Ye(v,o.layout,h.layout);var g={x:{min:0,max:0},y:{min:0,max:0}};Ye(g,l,m.actual),tt(v,g)||(d=!0)}}e.notifyListeners("didUpdate",{layout:l,snapshot:o,delta:c,layoutDelta:u,hasLayoutChanged:f,hasRelativeTargetChanged:d})}else e.isLead()&&(null===(a=(r=e.options).onExitComplete)||void 0===a||a.call(r));e.options.transition=void 0}function xt(e){e.clearSnapshot()}function St(e){e.clearMeasurements()}function kt(e){var t=e.options.visualElement;(null==t?void 0:t.getProps().onBeforeLayoutMeasure)&&t.notifyBeforeLayoutMeasure(),e.resetTransform()}function Et(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0}function _t(e){e.resolveTargetDelta()}function Ct(e){e.calcProjection()}function Pt(e){e.resetRotation()}function Tt(e){e.removeLeadSnapshot()}function At(e,t,n){e.translate=l.mix(t.translate,0,n),e.scale=l.mix(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function Mt(e,t,n,r){e.min=l.mix(t.min,n.min,r),e.max=l.mix(t.max,n.max,r)}function Ot(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}var Rt={duration:.45,ease:[.4,0,.1,1]};function Lt(e,t){for(var n=e.root,r=e.path.length-1;r>=0;r--)if(Boolean(e.path[r].instance)){n=e.path[r];break}var a=(n&&n!==e.root?n.instance:document).querySelector('[data-projection-id="'.concat(t,'"]'));a&&e.mount(a,!0)}function It(e){e.min=Math.round(e.min),e.max=Math.round(e.max)}function Dt(e){It(e.x),It(e.y)}var zt=1,jt=a.createContext({}),Vt=a.createContext({}),Nt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.getSnapshotBeforeUpdate=function(){return this.updateProps(),null},t.prototype.componentDidUpdate=function(){},t.prototype.updateProps=function(){var e=this.props,t=e.visualElement,n=e.props;t&&t.setProps(n)},t.prototype.render=function(){return this.props.children},t}(p.default.Component);function Ft(e){var t=e.preloadedFeatures,n=e.createVisualElement,i=e.projectionNodeConstructor,l=e.useRender,s=e.useVisualState,u=e.Component;return t&&y(t),a.forwardRef((function(e,c){var f=function(e){var t,n=e.layoutId,r=null===(t=a.useContext(jt))||void 0===t?void 0:t.id;return r&&void 0!==n?r+"-"+n:n}(e);e=r.__assign(r.__assign({},e),{layoutId:f});var p=a.useContext(S),h=null,v=function(e){var t=function(e,t){if(j(e)){var n=e.initial,r=e.animate;return{initial:!1===n||I(n)?n:void 0,animate:I(r)?r:void 0}}return!1!==e.inherit?t:{}}(e,a.useContext(k)),n=t.initial,r=t.animate;return a.useMemo((function(){return{initial:n,animate:r}}),[N(n),N(r)])}(e),y=p.isStatic?void 0:F((function(){if(gt.hasEverUpdated)return zt++})),T=s(e,p.isStatic);return!p.isStatic&&C&&(v.visualElement=function(e,t,n,r){var o=a.useContext(b),i=E(),l=a.useContext(_),s=O(),u=a.useRef(void 0);r||(r=o.renderer),!u.current&&r&&(u.current=r(e,{visualState:t,parent:i,props:n,presenceId:null==l?void 0:l.id,blockInitialAnimation:!1===(null==l?void 0:l.initial),shouldReduceMotion:s}));var c=u.current;return P((function(){null==c||c.syncRender()})),a.useEffect((function(){var e;null===(e=null==c?void 0:c.animationState)||void 0===e||e.animateChanges()})),P((function(){return function(){return null==c?void 0:c.notifyUnmount()}}),[]),c}(u,T,r.__assign(r.__assign({},p),e),n),function(e,t,n,r){var o,i=t.layoutId,l=t.layout,s=t.drag,u=t.dragConstraints,c=t.layoutScroll,f=a.useContext(Vt);r&&n&&!(null==n?void 0:n.projection)&&(n.projection=new r(e,n.getLatestValues(),null===(o=n.parent)||void 0===o?void 0:o.projection),n.projection.setOptions({layoutId:i,layout:l,alwaysMeasureLayout:Boolean(s)||u&&R(u),visualElement:n,scheduleRender:function(){return n.scheduleRender()},animationType:"string"==typeof l?l:"both",initialPromotionConfig:f,layoutScroll:c}))}(y,e,v.visualElement,i||g.projectionNodeConstructor),h=function(e,t,n){var i=[],l=a.useContext(b);if(!t)return null;"production"!==m&&n&&l.strict&&o.invariant(!1,"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");for(var s=0;s<x;s++){var u=w[s],c=g[u],f=c.isEnabled,p=c.Component;f(e)&&p&&i.push(d.createElement(p,r.__assign({key:u},e,{visualElement:t})))}return i}(e,v.visualElement,t)),d.createElement(Nt,{visualElement:v.visualElement,props:r.__assign(r.__assign({},p),e)},h,d.createElement(k.Provider,{value:v},l(u,e,y,function(e,t,n){return a.useCallback((function(r){var a;r&&(null===(a=e.mount)||void 0===a||a.call(e,r)),t&&(r?t.mount(r):t.unmount()),n&&("function"==typeof n?n(r):R(n)&&(n.current=r))}),[t])}(T,v.visualElement,c),T,p.isStatic,v.visualElement)))}))}function Bt(e){function t(t,n){return void 0===n&&(n={}),Ft(e(t,n))}if("undefined"==typeof Proxy)return t;var n=new Map;return new Proxy(t,{get:function(e,r){return n.has(r)||n.set(r,t(r)),n.get(r)}})}var Ut=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function Ht(e){return"string"==typeof e&&!e.includes("-")&&!!(Ut.indexOf(e)>-1||/[A-Z]/.test(e))}function $t(e,t){var n=t.layout,r=t.layoutId;return ft(e)||pt(e)||(n||void 0!==r)&&(!!rt[e]||"opacity"===e)}var Wt={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function Yt(e){return e.startsWith("--")}var Gt=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function qt(e,t,n,r){var a,o=e.style,i=e.vars,l=e.transform,s=e.transformKeys,u=e.transformOrigin;s.length=0;var c=!1,f=!1,d=!0;for(var p in t){var h=t[p];if(Yt(p))i[p]=h;else{var m=ae[p],v=Gt(h,m);if(ft(p)){if(c=!0,l[p]=v,s.push(p),!d)continue;h!==(null!==(a=m.default)&&void 0!==a?a:0)&&(d=!1)}else pt(p)?(u[p]=v,f=!0):o[p]=v}}c?o.transform=function(e,t,n,r){var a=e.transform,o=e.transformKeys,i=t.enableHardwareAcceleration,l=void 0===i||i,s=t.allowTransformNone,u=void 0===s||s,c="";o.sort(ut);for(var f=!1,d=o.length,p=0;p<d;p++){var h=o[p];c+="".concat(Wt[h]||h,"(").concat(a[h],") "),"z"===h&&(f=!0)}return!f&&l?c+="translateZ(0)":c=c.trim(),r?c=r(a,n?"":c):u&&n&&(c="none"),c}(e,n,d,r):r?o.transform=r({},""):!t.transform&&o.transform&&(o.transform="none"),f&&(o.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,a=void 0===r?"50%":r,o=e.originZ,i=void 0===o?0:o;return"".concat(n," ").concat(a," ").concat(i)}(u))}function Xt(e,t,n){for(var r in t)Y(t[r])||$t(r,n)||(e[r]=t[r])}function Qt(e,t,n){var o={},i=function(e,t,n){var o={};return Xt(o,e.style||{},e),Object.assign(o,function(e,t,n){var o=e.transformTemplate;return a.useMemo((function(){var e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};qt(e,t,{enableHardwareAcceleration:!n},o);var a=e.vars,i=e.style;return r.__assign(r.__assign({},a),i)}),[t])}(e,t,n)),e.transformValues&&(o=e.transformValues(o)),o}(e,t,n);return Boolean(e.drag)&&!1!==e.dragListener&&(o.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===e.drag?"none":"pan-".concat("x"===e.drag?"y":"x")),o.style=i,o}var Kt=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover","whileInView","onViewportEnter","onViewportLeave","viewport","layoutScroll"]);function Zt(e){return Kt.has(e)}var Jt=function(e){return!Zt(e)};function en(e){e&&(Jt=function(t){return t.startsWith("on")?!Zt(t):e(t)})}try{en(n(910).Z)}catch(e){}function tn(e,t,n){var r={};for(var a in e)(Jt(a)||!0===n&&Zt(a)||!t&&!Zt(a)||e.draggable&&a.startsWith("onDrag"))&&(r[a]=e[a]);return r}function nn(e,t,n){return"string"==typeof e?e:s.px.transform(t+n*e)}var rn={offset:"stroke-dashoffset",array:"stroke-dasharray"},an={offset:"strokeDashoffset",array:"strokeDasharray"};function on(e,t,n,a){var o=t.attrX,i=t.attrY,l=t.originX,u=t.originY,c=t.pathLength,f=t.pathSpacing,d=void 0===f?1:f,p=t.pathOffset,h=void 0===p?0:p;qt(e,r.__rest(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),n,a),e.attrs=e.style,e.style={};var m=e.attrs,v=e.style,g=e.dimensions;m.transform&&(g&&(v.transform=m.transform),delete m.transform),g&&(void 0!==l||void 0!==u||v.transform)&&(v.transformOrigin=function(e,t,n){var r=nn(t,e.x,e.width),a=nn(n,e.y,e.height);return"".concat(r," ").concat(a)}(g,void 0!==l?l:.5,void 0!==u?u:.5)),void 0!==o&&(m.x=o),void 0!==i&&(m.y=i),void 0!==c&&function(e,t,n,r,a){void 0===n&&(n=1),void 0===r&&(r=0),void 0===a&&(a=!0),e.pathLength=1;var o=a?rn:an;e[o.offset]=s.px.transform(-r);var i=s.px.transform(t),l=s.px.transform(n);e[o.array]="".concat(i," ").concat(l)}(m,c,d,h,!1)}var ln=function(){return r.__assign(r.__assign({},{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}),{attrs:{}})};function sn(e,t){var n=a.useMemo((function(){var n=ln();return on(n,t,{enableHardwareAcceleration:!1},e.transformTemplate),r.__assign(r.__assign({},n.attrs),{style:r.__assign({},n.style)})}),[t]);if(e.style){var o={};Xt(o,e.style,e),n.style=r.__assign(r.__assign({},o),n.style)}return n}function un(e){return void 0===e&&(e=!1),function(t,n,o,i,l,s){var u=l.latestValues,c=(Ht(t)?sn:Qt)(n,u,s),f=tn(n,"string"==typeof t,e),d=r.__assign(r.__assign(r.__assign({},f),c),{ref:i});return o&&(d["data-projection-id"]=o),a.createElement(t,d)}}var cn=/([a-z])([A-Z])/g,fn=function(e){return e.replace(cn,"$1-$2").toLowerCase()};function dn(e,t,n,r){var a=t.style,o=t.vars;for(var i in Object.assign(e.style,a,r&&r.getProjectionStyles(n)),o)e.style.setProperty(i,o[i])}var pn=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function hn(e,t,n,r){for(var a in dn(e,t,void 0,r),t.attrs)e.setAttribute(pn.has(a)?a:fn(a),t.attrs[a])}function mn(e){var t=e.style,n={};for(var r in t)(Y(t[r])||$t(r,e))&&(n[r]=t[r]);return n}function vn(e){var t=mn(e);for(var n in e)Y(e[n])&&(t["x"===n||"y"===n?"attr"+n.toUpperCase():n]=e[n]);return t}function gn(e){return"object"==typeof e&&"function"==typeof e.start}function yn(e,t,n,r){var a=e.scrapeMotionValuesFromProps,o=e.createRenderState,i=e.onMount,l={latestValues:wn(t,n,r,a),renderState:o()};return i&&(l.mount=function(e){return i(t,e,l)}),l}var bn=function(e){return function(t,n){var r=a.useContext(k),o=a.useContext(_);return n?yn(e,t,r,o):F((function(){return yn(e,t,r,o)}))}};function wn(e,t,n,a){var o={},i=!1===(null==n?void 0:n.initial),l=a(e);for(var s in l)o[s]=vt(l[s]);var u=e.initial,c=e.animate,f=j(e),d=V(e);t&&d&&!f&&!1!==e.inherit&&(null!=u||(u=t.initial),null!=c||(c=t.animate));var p=i||!1===u,h=p?c:u;return h&&"boolean"!=typeof h&&!gn(h)&&(Array.isArray(h)?h:[h]).forEach((function(t){var n=D(e,t);if(n){var a=n.transitionEnd;n.transition;var i=r.__rest(n,["transitionEnd","transition"]);for(var l in i){var s=i[l];Array.isArray(s)&&(s=s[p?s.length-1:0]),null!==s&&(o[l]=s)}for(var l in a)o[l]=a[l]}})),o}var xn,Sn={useVisualState:bn({scrapeMotionValuesFromProps:vn,createRenderState:ln,onMount:function(e,t,n){var r=n.renderState,a=n.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}on(r,a,{enableHardwareAcceleration:!1},e.transformTemplate),hn(t,r)}})},kn={useVisualState:bn({scrapeMotionValuesFromProps:mn,createRenderState:function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}}})};function En(e,t,n,a,o){var i=t.forwardMotionProps,l=void 0!==i&&i,s=Ht(e)?Sn:kn;return r.__assign(r.__assign({},s),{preloadedFeatures:n,useRender:un(l),createVisualElement:a,projectionNodeConstructor:o,Component:e})}function _n(e,t,n,r){return void 0===r&&(r={passive:!0}),e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n)}}function Cn(e,t,n,r){a.useEffect((function(){var a=e.current;if(n&&a)return _n(a,t,n,r)}),[e,t,n,r])}function Pn(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Tn(e){return!!e.touches}t.AnimationType=void 0,(xn=t.AnimationType||(t.AnimationType={})).Animate="animate",xn.Hover="whileHover",xn.Tap="whileTap",xn.Drag="whileDrag",xn.Focus="whileFocus",xn.InView="whileInView",xn.Exit="exit";var An={pageX:0,pageY:0};function Mn(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||An;return{x:n[t+"X"],y:n[t+"Y"]}}function On(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Rn(e,t){return void 0===t&&(t="page"),{point:Tn(e)?Mn(e,t):On(e,t)}}var Ln=function(e,t){void 0===t&&(t=!1);var n,r=function(t){return e(t,Rn(t))};return t?(n=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&n(e)}):r},In={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Dn={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function zn(e){return C&&null===window.onpointerdown?e:C&&null===window.ontouchstart?Dn[e]:C&&null===window.onmousedown?In[e]:e}function jn(e,t,n,r){return _n(e,zn(t),Ln(n,"pointerdown"===t),r)}function Vn(e,t,n,r){return Cn(e,zn(t),n&&Ln(n,"pointerdown"===t),r)}function Nn(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var Fn=Nn("dragHorizontal"),Bn=Nn("dragVertical");function Un(e){var t=!1;if("y"===e)t=Bn();else if("x"===e)t=Fn();else{var n=Fn(),r=Bn();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function Hn(){var e=Un(!0);return!e||(e(),!1)}function $n(e,n,r){return function(a,o){var i;Pn(a)&&!Hn()&&(null===(i=e.animationState)||void 0===i||i.setActive(t.AnimationType.Hover,n),null==r||r(a,o))}}var Wn=function(e,t){return!!t&&(e===t||Wn(e,t.parentElement))};function Yn(e){return a.useEffect((function(){return function(){return e()}}),[])}var Gn=new Set,qn=new WeakMap,Xn=new WeakMap,Qn=function(e){var t;null===(t=qn.get(e.target))||void 0===t||t(e)},Kn=function(e){e.forEach(Qn)};var Zn={some:0,all:1};function Jn(e,n,o,i){var l=i.root,s=i.margin,u=i.amount,c=void 0===u?"some":u,f=i.once;a.useEffect((function(){if(e){var a={root:null==l?void 0:l.current,rootMargin:s,threshold:"number"==typeof c?c:Zn[c]};return function(e,t,n){var a=function(e){var t=e.root,n=r.__rest(e,["root"]),a=t||document;Xn.has(a)||Xn.set(a,{});var o=Xn.get(a),i=JSON.stringify(n);return o[i]||(o[i]=new IntersectionObserver(Kn,r.__assign({root:t},n))),o[i]}(t);return qn.set(e,n),a.observe(e),function(){qn.delete(e),a.unobserve(e)}}(o.getInstance(),a,(function(e){var r,a=e.isIntersecting;if(n.isInView!==a&&(n.isInView=a,!f||a||!n.hasEnteredView)){a&&(n.hasEnteredView=!0),null===(r=o.animationState)||void 0===r||r.setActive(t.AnimationType.InView,a);var i=o.getProps(),l=a?i.onViewportEnter:i.onViewportLeave;null==l||l(e)}}))}}),[e,l,s,c])}function er(e,n,r,o){var i=o.fallback,l=void 0===i||i;a.useEffect((function(){var a;e&&l&&("production"!==m&&(a="IntersectionObserver not available on this device. whileInView animations will trigger on mount.",Gn.has(a)||(console.warn(a),Gn.add(a))),requestAnimationFrame((function(){var e;n.hasEnteredView=!0;var a=r.getProps().onViewportEnter;null==a||a(null),null===(e=r.animationState)||void 0===e||e.setActive(t.AnimationType.InView,!0)})))}),[e])}var tr=function(e){return function(t){return e(t),null}},nr={inView:tr((function(e){var t=e.visualElement,n=e.whileInView,r=e.onViewportEnter,o=e.onViewportLeave,i=e.viewport,l=void 0===i?{}:i,s=a.useRef({hasEnteredView:!1,isInView:!1}),u=Boolean(n||r||o);l.once&&s.current.hasEnteredView&&(u=!1),("undefined"==typeof IntersectionObserver?er:Jn)(u,s.current,t,l)})),tap:tr((function(e){var n=e.onTap,r=e.onTapStart,o=e.onTapCancel,i=e.whileTap,s=e.visualElement,u=n||r||o||i,c=a.useRef(!1),f=a.useRef(null),d={passive:!(r||n||o||g)};function p(){var e;null===(e=f.current)||void 0===e||e.call(f),f.current=null}function h(){var e;return p(),c.current=!1,null===(e=s.animationState)||void 0===e||e.setActive(t.AnimationType.Tap,!1),!Hn()}function m(e,t){h()&&(Wn(s.getInstance(),e.target)?null==n||n(e,t):null==o||o(e,t))}function v(e,t){h()&&(null==o||o(e,t))}function g(e,n){var a;p(),c.current||(c.current=!0,f.current=l.pipe(jn(window,"pointerup",m,d),jn(window,"pointercancel",v,d)),null===(a=s.animationState)||void 0===a||a.setActive(t.AnimationType.Tap,!0),null==r||r(e,n))}Vn(s,"pointerdown",u?g:void 0,d),Yn(p)})),focus:tr((function(e){var n=e.whileFocus,r=e.visualElement;Cn(r,"focus",n?function(){var e;null===(e=r.animationState)||void 0===e||e.setActive(t.AnimationType.Focus,!0)}:void 0),Cn(r,"blur",n?function(){var e;null===(e=r.animationState)||void 0===e||e.setActive(t.AnimationType.Focus,!1)}:void 0)})),hover:tr((function(e){var t=e.onHoverStart,n=e.onHoverEnd,r=e.whileHover,a=e.visualElement;Vn(a,"pointerenter",t||r?$n(a,!0,t):void 0,{passive:!t}),Vn(a,"pointerleave",n||r?$n(a,!1,n):void 0,{passive:!n})}))},rr=0,ar=function(){return rr++},or=function(){return F(ar)};function ir(){var e=a.useContext(_);if(null===e)return[!0,null];var t=e.isPresent,n=e.onExitComplete,r=e.register,o=or();return a.useEffect((function(){return r(o)}),[]),!t&&n?[!1,function(){return null==n?void 0:n(o)}]:[!0]}function lr(e,t){if(!Array.isArray(t))return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}var sr=function(e){return function(t){return t.test(e)}},ur=[s.number,s.px,s.percent,s.degrees,s.vw,s.vh,{test:function(e){return"auto"===e},parse:function(e){return e}}],cr=function(e){return ur.find(sr(e))},fr=r.__spreadArray(r.__spreadArray([],r.__read(ur),!1),[s.color,s.complex],!1),dr=function(e){return fr.find(sr(e))};function pr(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,W(n))}function hr(e,t){var n=z(e,t),a=n?e.makeTargetAnimatable(n,!1):{},o=a.transitionEnd,i=void 0===o?{}:o;a.transition;var l=r.__rest(a,["transitionEnd","transition"]);for(var s in l=r.__assign(r.__assign({},l),i))pr(e,s,ue(l[s]))}function mr(e,t){r.__spreadArray([],r.__read(t),!1).reverse().forEach((function(n){var r,a=e.getVariant(n);a&&hr(e,a),null===(r=e.variantChildren)||void 0===r||r.forEach((function(e){mr(e,t)}))}))}function vr(e,t,n){var r,a,o,i,l=Object.keys(t).filter((function(t){return!e.hasValue(t)})),u=l.length;if(u)for(var c=0;c<u;c++){var f=l[c],d=t[f],p=null;Array.isArray(d)&&(p=d[0]),null===p&&(p=null!==(a=null!==(r=n[f])&&void 0!==r?r:e.readValue(f))&&void 0!==a?a:t[f]),null!=p&&("string"==typeof p&&(/^\-?\d*\.?\d+$/.test(p)||/^0[^.\s]+$/.test(p))?p=parseFloat(p):!dr(p)&&s.complex.test(d)&&(p=le(f,d)),e.addValue(f,W(p)),null!==(o=(i=n)[f])&&void 0!==o||(i[f]=p),e.setBaseTarget(f,p))}}function gr(e,t){if(t)return(t[e]||t.default||t).from}function yr(e,t,n){var r,a,o={};for(var i in e)o[i]=null!==(r=gr(i,t))&&void 0!==r?r:null===(a=n.getValue(i))||void 0===a?void 0:a.get();return o}function br(e,t,n){var r;if(void 0===n&&(n={}),e.notifyAnimationStart(t),Array.isArray(t)){var a=t.map((function(t){return wr(e,t,n)}));r=Promise.all(a)}else if("string"==typeof t)r=wr(e,t,n);else{var o="function"==typeof t?z(e,t,n.custom):t;r=xr(e,o,n)}return r.then((function(){return e.notifyAnimationComplete(t)}))}function wr(e,t,n){var a;void 0===n&&(n={});var o=z(e,t,n.custom),i=(o||{}).transition,l=void 0===i?e.getDefaultTransition()||{}:i;n.transitionOverride&&(l=n.transitionOverride);var s=o?function(){return xr(e,o,n)}:function(){return Promise.resolve()},u=(null===(a=e.variantChildren)||void 0===a?void 0:a.size)?function(a){void 0===a&&(a=0);var o=l.delayChildren,i=void 0===o?0:o,s=l.staggerChildren,u=l.staggerDirection;return function(e,t,n,a,o,i){void 0===n&&(n=0),void 0===a&&(a=0),void 0===o&&(o=1);var l=[],s=(e.variantChildren.size-1)*a,u=1===o?function(e){return void 0===e&&(e=0),e*a}:function(e){return void 0===e&&(e=0),s-e*a};return Array.from(e.variantChildren).sort(Sr).forEach((function(e,a){l.push(wr(e,t,r.__assign(r.__assign({},i),{delay:n+u(a)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(l)}(e,t,i+a,s,u,n)}:function(){return Promise.resolve()},c=l.when;if(c){var f=r.__read("beforeChildren"===c?[s,u]:[u,s],2),d=f[0],p=f[1];return d().then(p)}return Promise.all([s(),u(n.delay)])}function xr(e,t,n){var a,o=void 0===n?{}:n,i=o.delay,l=void 0===i?0:i,s=o.transitionOverride,u=o.type,c=e.makeTargetAnimatable(t),f=c.transition,d=void 0===f?e.getDefaultTransition():f,p=c.transitionEnd,h=r.__rest(c,["transition","transitionEnd"]);s&&(d=s);var m=[],v=u&&(null===(a=e.animationState)||void 0===a?void 0:a.getState()[u]);for(var g in h){var y=e.getValue(g),b=h[g];if(!(!y||void 0===b||v&&kr(v,g))){var w=r.__assign({delay:l},d);e.shouldReduceMotion&&ft(g)&&(w=r.__assign(r.__assign({},w),{type:!1,delay:0}));var x=me(g,y,b,w);m.push(x)}}return Promise.all(m).then((function(){p&&hr(e,p)}))}function Sr(e,t){return e.sortNodePosition(t)}function kr(e,t){var n=e.protectedKeys,r=e.needsAnimating,a=n.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,a}var Er=[t.AnimationType.Animate,t.AnimationType.InView,t.AnimationType.Focus,t.AnimationType.Hover,t.AnimationType.Tap,t.AnimationType.Drag,t.AnimationType.Exit],_r=r.__spreadArray([],r.__read(Er),!1).reverse(),Cr=Er.length;function Pr(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var Tr={animation:tr((function(e){var n=e.visualElement,o=e.animate;n.animationState||(n.animationState=function(e){var n,a=function(e){return function(t){return Promise.all(t.map((function(t){var n=t.animation,r=t.options;return br(e,n,r)})))}}(e),o=((n={})[t.AnimationType.Animate]=Pr(!0),n[t.AnimationType.InView]=Pr(),n[t.AnimationType.Hover]=Pr(),n[t.AnimationType.Tap]=Pr(),n[t.AnimationType.Drag]=Pr(),n[t.AnimationType.Focus]=Pr(),n[t.AnimationType.Exit]=Pr(),n),i={},l=!0,s=function(t,n){var a=z(e,n);if(a){a.transition;var o=a.transitionEnd,i=r.__rest(a,["transition","transitionEnd"]);t=r.__assign(r.__assign(r.__assign({},t),i),o)}return t};function u(t,n){for(var u,c=e.getProps(),f=e.getVariantContext(!0)||{},d=[],p=new Set,h={},m=1/0,v=function(a){var i=_r[a],v=o[i],g=null!==(u=c[i])&&void 0!==u?u:f[i],y=I(g),b=i===n?v.isActive:null;!1===b&&(m=a);var w=g===f[i]&&g!==c[i]&&y;if(w&&l&&e.manuallyAnimateOnMount&&(w=!1),v.protectedKeys=r.__assign({},h),!v.isActive&&null===b||!g&&!v.prevProp||gn(g)||"boolean"==typeof g)return"continue";var x=function(e,t){return"string"==typeof t?t!==e:!!L(t)&&!lr(t,e)}(v.prevProp,g),S=x||i===n&&v.isActive&&!w&&y||a>m&&y,k=Array.isArray(g)?g:[g],E=k.reduce(s,{});!1===b&&(E={});var _=v.prevResolvedValues,C=void 0===_?{}:_,P=r.__assign(r.__assign({},C),E),T=function(e){S=!0,p.delete(e),v.needsAnimating[e]=!0};for(var A in P){var M=E[A],O=C[A];h.hasOwnProperty(A)||(M!==O?K(M)&&K(O)?!lr(M,O)||x?T(A):v.protectedKeys[A]=!0:void 0!==M?T(A):p.add(A):void 0!==M&&p.has(A)?T(A):v.protectedKeys[A]=!0)}v.prevProp=g,v.prevResolvedValues=E,v.isActive&&(h=r.__assign(r.__assign({},h),E)),l&&e.blockInitialAnimation&&(S=!1),S&&!w&&d.push.apply(d,r.__spreadArray([],r.__read(k.map((function(e){return{animation:e,options:r.__assign({type:i},t)}}))),!1))},g=0;g<Cr;g++)v(g);if(i=r.__assign({},h),p.size){var y={};p.forEach((function(t){var n=e.getBaseTarget(t);void 0!==n&&(y[t]=n)})),d.push({animation:y})}var b=Boolean(d.length);return l&&!1===c.initial&&!e.manuallyAnimateOnMount&&(b=!1),l=!1,b?a(d):Promise.resolve()}return{isAnimated:function(e){return void 0!==i[e]},animateChanges:u,setActive:function(t,n,r){var a;if(o[t].isActive===n)return Promise.resolve();null===(a=e.variantChildren)||void 0===a||a.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),o[t].isActive=n;var i=u(r,t);for(var l in o)o[l].protectedKeys={};return i},setAnimateFunction:function(t){a=t(e)},getState:function(){return o}}}(n)),gn(o)&&a.useEffect((function(){return o.subscribe(n)}),[o])})),exit:tr((function(e){var n=e.custom,o=e.visualElement,i=r.__read(ir(),2),l=i[0],s=i[1],u=a.useContext(_);a.useEffect((function(){var e,r;o.isPresent=l;var a=null===(e=o.animationState)||void 0===e?void 0:e.setActive(t.AnimationType.Exit,!l,{custom:null!==(r=null==u?void 0:u.custom)&&void 0!==r?r:n});!l&&(null==a||a.then(s))}),[l])}))},Ar=function(){function e(e,t,n){var a=this,o=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(a.lastMoveEvent&&a.lastMoveEventInfo){var e=Rr(a.lastMoveEventInfo,a.history),t=null!==a.startEvent,n=l.distance(e.offset,{x:0,y:0})>=3;if(t||n){var o=e.point,s=i.getFrameData().timestamp;a.history.push(r.__assign(r.__assign({},o),{timestamp:s}));var u=a.handlers,c=u.onStart,f=u.onMove;t||(c&&c(a.lastMoveEvent,e),a.startEvent=a.lastMoveEvent),f&&f(a.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){a.lastMoveEvent=e,a.lastMoveEventInfo=Mr(t,a.transformPagePoint),Pn(e)&&0===e.buttons?a.handlePointerUp(e,t):h.default.update(a.updatePoint,!0)},this.handlePointerUp=function(e,t){a.end();var n=a.handlers,r=n.onEnd,o=n.onSessionEnd,i=Rr(Mr(t,a.transformPagePoint),a.history);a.startEvent&&r&&r(e,i),o&&o(e,i)},!(Tn(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=o;var s=Mr(Rn(e),this.transformPagePoint),u=s.point,c=i.getFrameData().timestamp;this.history=[r.__assign(r.__assign({},u),{timestamp:c})];var f=t.onSessionStart;f&&f(e,Rr(s,this.history)),this.removeListeners=l.pipe(jn(window,"pointermove",this.handlePointerMove),jn(window,"pointerup",this.handlePointerUp),jn(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),i.cancelSync.update(this.updatePoint)},e}();function Mr(e,t){return t?{point:t(e.point)}:e}function Or(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Rr(e,t){var n=e.point;return{point:n,delta:Or(n,Ir(t)),offset:Or(n,Lr(t)),velocity:Dr(t,.1)}}function Lr(e){return e[0]}function Ir(e){return e[e.length-1]}function Dr(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,a=Ir(e);n>=0&&(r=e[n],!(a.timestamp-r.timestamp>G(t)));)n--;if(!r)return{x:0,y:0};var o=(a.timestamp-r.timestamp)/1e3;if(0===o)return{x:0,y:0};var i={x:(a.x-r.x)/o,y:(a.y-r.y)/o};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function zr(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function jr(e,t){var n,a=t.min-e.min,o=t.max-e.max;return t.max-t.min<e.max-e.min&&(a=(n=r.__read([o,a],2))[0],o=n[1]),{min:a,max:o}}var Vr=.35;function Nr(e,t,n){return{min:Fr(e,t),max:Fr(e,n)}}function Fr(e,t){var n;return"number"==typeof e?e:null!==(n=e[t])&&void 0!==n?n:0}function Br(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}function Ur(e,t){return Br(function(e,t){if(!t)return e;var n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}var Hr=new WeakMap,$r=function(){function e(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=e}return e.prototype.start=function(e,n){var r=this,a=(void 0===n?{}:n).snapToCursor,o=void 0!==a&&a;!1!==this.visualElement.isPresent&&(this.panSession=new Ar(e,{onSessionStart:function(e){r.stopAnimation(),o&&r.snapToCursor(Rn(e,"page").point)},onStart:function(e,n){var a,o=r.getProps(),i=o.drag,l=o.dragPropagation,u=o.onDragStart;(!i||l||(r.openGlobalLock&&r.openGlobalLock(),r.openGlobalLock=Un(i),r.openGlobalLock))&&(r.isDragging=!0,r.currentDirection=null,r.resolveConstraints(),r.visualElement.projection&&(r.visualElement.projection.isAnimationBlocked=!0,r.visualElement.projection.target=void 0),it((function(e){var t,n,a=r.getAxisMotionValue(e).get()||0;if(s.percent.test(a)){var o=null===(n=null===(t=r.visualElement.projection)||void 0===t?void 0:t.layout)||void 0===n?void 0:n.actual[e];o&&(a=Fe(o)*(parseFloat(a)/100))}r.originPoint[e]=a})),null==u||u(e,n),null===(a=r.visualElement.animationState)||void 0===a||a.setActive(t.AnimationType.Drag,!0))},onMove:function(e,t){var n=r.getProps(),a=n.dragPropagation,o=n.dragDirectionLock,i=n.onDirectionLock,l=n.onDrag;if(a||r.openGlobalLock){var s=t.offset;if(o&&null===r.currentDirection)return r.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(s),void(null!==r.currentDirection&&(null==i||i(r.currentDirection)));r.updateAxis("x",t.point,s),r.updateAxis("y",t.point,s),r.visualElement.syncRender(),null==l||l(e,t)}},onSessionEnd:function(e,t){return r.stop(e,t)}},{transformPagePoint:this.visualElement.getTransformPagePoint()}))},e.prototype.stop=function(e,t){var n=this.isDragging;if(this.cancel(),n){var r=t.velocity;this.startAnimation(r);var a=this.getProps().onDragEnd;null==a||a(e,t)}},e.prototype.cancel=function(){var e,n;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(e=this.panSession)||void 0===e||e.end(),this.panSession=void 0,!this.getProps().dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(n=this.visualElement.animationState)||void 0===n||n.setActive(t.AnimationType.Drag,!1)},e.prototype.updateAxis=function(e,t,n){var r=this.getProps().drag;if(n&&Wr(e,r,this.currentDirection)){var a,o,i,s,u,c=this.getAxisMotionValue(e),f=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(a=f,o=this.constraints[e],i=this.elastic[e],s=o.min,u=o.max,void 0!==s&&a<s?a=i?l.mix(s,a,i.min):Math.max(a,s):void 0!==u&&a>u&&(a=i?l.mix(u,a,i.max):Math.min(a,u)),f=a),c.set(f)}},e.prototype.resolveConstraints=function(){var e=this,t=this.getProps(),n=t.dragConstraints,r=t.dragElastic,a=(this.visualElement.projection||{}).layout,o=this.constraints;n&&R(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!n||!a)&&function(e,t){var n=t.top,r=t.left,a=t.bottom,o=t.right;return{x:zr(e.x,r,o),y:zr(e.y,n,a)}}(a.actual,n),this.elastic=function(e){return void 0===e&&(e=Vr),!1===e?e=0:!0===e&&(e=Vr),{x:Nr(e,"left","right"),y:Nr(e,"top","bottom")}}(r),o!==this.constraints&&a&&this.constraints&&!this.hasMutatedConstraints&&it((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(a.actual[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(){var e=this.getProps(),t=e.dragConstraints,n=e.onMeasureDragConstraints;if(!t||!R(t))return!1;var r=t.current;o.invariant(null!==r,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");var a=this.visualElement.projection;if(!a||!a.layout)return!1;var i=function(e,t,n){var r=Ur(e,n),a=t.scroll;return a&&(De(r.x,a.x),De(r.y,a.y)),r}(r,a.root,this.visualElement.getTransformPagePoint()),l=function(e,t){return{x:jr(e.x,t.x),y:jr(e.y,t.y)}}(a.layout.actual,i);if(n){var s=n(function(e){var t=e.x,n=e.y;return{top:n.min,right:t.max,bottom:n.max,left:t.min}}(l));this.hasMutatedConstraints=!!s,s&&(l=Br(s))}return l},e.prototype.startAnimation=function(e){var t=this,n=this.getProps(),a=n.drag,o=n.dragMomentum,i=n.dragElastic,l=n.dragTransition,s=n.dragSnapToOrigin,u=n.onDragTransitionEnd,c=this.constraints||{},f=it((function(n){var u;if(Wr(n,a,t.currentDirection)){var f=null!==(u=null==c?void 0:c[n])&&void 0!==u?u:{};s&&(f={min:0,max:0});var d=i?200:1e6,p=i?40:1e7,h=r.__assign(r.__assign({type:"inertia",velocity:o?e[n]:0,bounceStiffness:d,bounceDamping:p,timeConstant:750,restDelta:1,restSpeed:10},l),f);return t.startAxisValueAnimation(n,h)}}));return Promise.all(f).then(u)},e.prototype.startAxisValueAnimation=function(e,t){return me(e,this.getAxisMotionValue(e),0,t)},e.prototype.stopAnimation=function(){var e=this;it((function(t){return e.getAxisMotionValue(t).stop()}))},e.prototype.getAxisMotionValue=function(e){var t,n,r="_drag"+e.toUpperCase();return this.visualElement.getProps()[r]||this.visualElement.getValue(e,null!==(n=null===(t=this.visualElement.getProps().initial)||void 0===t?void 0:t[e])&&void 0!==n?n:0)},e.prototype.snapToCursor=function(e){var t=this;it((function(n){if(Wr(n,t.getProps().drag,t.currentDirection)){var r=t.visualElement.projection,a=t.getAxisMotionValue(n);if(r&&r.layout){var o=r.layout.actual[n],i=o.min,s=o.max;a.set(e[n]-l.mix(i,s,.5))}}}))},e.prototype.scalePositionWithinConstraints=function(){var e,t=this,n=this.getProps(),r=n.drag,a=n.dragConstraints,o=this.visualElement.projection;if(R(a)&&o&&this.constraints){this.stopAnimation();var i={x:0,y:0};it((function(e){var n,r,a,o,s,u=t.getAxisMotionValue(e);if(u){var c=u.get();i[e]=(n={min:c,max:c},r=t.constraints[e],a=.5,o=Fe(n),(s=Fe(r))>o?a=l.progress(r.min,r.max-o,n.min):o>s&&(a=l.progress(n.min,n.max-s,r.min)),l.clamp(0,1,a))}}));var s=this.visualElement.getProps().transformTemplate;this.visualElement.getInstance().style.transform=s?s({},""):"none",null===(e=o.root)||void 0===e||e.updateScroll(),o.updateLayout(),this.resolveConstraints(),it((function(e){if(Wr(e,r,null)){var n=t.getAxisMotionValue(e),a=t.constraints[e],o=a.min,s=a.max;n.set(l.mix(o,s,i[e]))}}))}},e.prototype.addListeners=function(){var e,t=this;Hr.set(this.visualElement,this);var n=jn(this.visualElement.getInstance(),"pointerdown",(function(e){var n=t.getProps(),r=n.drag,a=n.dragListener;r&&(void 0===a||a)&&t.start(e)})),r=function(){R(t.getProps().dragConstraints)&&(t.constraints=t.resolveRefConstraints())},a=this.visualElement.projection,o=a.addEventListener("measure",r);a&&!a.layout&&(null===(e=a.root)||void 0===e||e.updateScroll(),a.updateLayout()),r();var i=_n(window,"resize",(function(){return t.scalePositionWithinConstraints()}));return a.addEventListener("didUpdate",(function(e){var n=e.delta,r=e.hasLayoutChanged;t.isDragging&&r&&(it((function(e){var r=t.getAxisMotionValue(e);r&&(t.originPoint[e]+=n[e].translate,r.set(r.get()+n[e].translate))})),t.visualElement.syncRender())})),function(){i(),n(),o()}},e.prototype.getProps=function(){var e=this.visualElement.getProps(),t=e.drag,n=void 0!==t&&t,a=e.dragDirectionLock,o=void 0!==a&&a,i=e.dragPropagation,l=void 0!==i&&i,s=e.dragConstraints,u=void 0!==s&&s,c=e.dragElastic,f=void 0===c?Vr:c,d=e.dragMomentum,p=void 0===d||d;return r.__assign(r.__assign({},e),{drag:n,dragDirectionLock:o,dragPropagation:l,dragConstraints:u,dragElastic:f,dragMomentum:p})},e}();function Wr(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}var Yr={pan:tr((function(e){var t=e.onPan,n=e.onPanStart,r=e.onPanEnd,o=e.onPanSessionStart,i=e.visualElement,l=t||n||r||o,s=a.useRef(null),u=a.useContext(S).transformPagePoint,c={onSessionStart:o,onStart:n,onMove:t,onEnd:function(e,t){s.current=null,r&&r(e,t)}};a.useEffect((function(){null!==s.current&&s.current.updateHandlers(c)})),Vn(i,"pointerdown",l&&function(e){s.current=new Ar(e,c,{transformPagePoint:u})}),Yn((function(){return s.current&&s.current.end()}))})),drag:tr((function(e){var t=e.dragControls,n=e.visualElement,r=F((function(){return new $r(n)}));a.useEffect((function(){return t&&t.subscribe(r)}),[r,t]),a.useEffect((function(){return r.addListeners()}),[r])}))},Gr=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","LayoutAnimationStart","SetAxisTarget","Unmount"],qr=function(e){var t=e.treeType,n=void 0===t?"":t,a=e.build,o=e.getBaseTarget,l=e.makeTargetAnimatable,s=e.measureViewportBox,u=e.render,c=e.readValueFromInstance,f=e.removeValueFromRenderState,d=e.sortNodePosition,p=e.scrapeMotionValuesFromProps;return function(e,t){var m=e.parent,v=e.props,g=e.presenceId,y=e.blockInitialAnimation,b=e.visualState,w=e.shouldReduceMotion;void 0===t&&(t={});var x,S,k=!1,E=b.latestValues,_=b.renderState,C=function(){var e=Gr.map((function(){return new H})),t={},n={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){Gr.forEach((function(r){var a,o="on"+r,i=e[o];null===(a=t[r])||void 0===a||a.call(t),i&&(t[r]=n[o](i))}))}};return e.forEach((function(e,t){n["on"+Gr[t]]=function(t){return e.add(t)},n["notify"+Gr[t]]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.notify.apply(e,r.__spreadArray([],r.__read(t),!1))}})),n}(),P=new Map,T=new Map,A={},M=r.__assign({},E);function O(){x&&k&&(R(),u(x,_,v.style,$.projection))}function R(){a($,_,E,t,v)}function L(){C.notifyUpdate(E)}function D(e,t){var n=t.onChange((function(t){E[e]=t,v.onUpdate&&h.default.update(L,!1,!0)})),r=t.onRenderRequest($.scheduleRender);T.set(e,(function(){n(),r()}))}var z=p(v);for(var N in z){var F=z[N];void 0!==E[N]&&Y(F)&&F.set(E[N],!1)}var B=j(v),U=V(v),$=r.__assign(r.__assign({treeType:n,current:null,depth:m?m.depth+1:0,parent:m,children:new Set,presenceId:g,shouldReduceMotion:w,variantChildren:U?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==m?void 0:m.isMounted()),blockInitialAnimation:y,isMounted:function(){return Boolean(x)},mount:function(e){k=!0,x=$.current=e,$.projection&&$.projection.mount(e),U&&m&&!B&&(S=null==m?void 0:m.addVariantChild($)),P.forEach((function(e,t){return D(t,e)})),null==m||m.children.add($),$.setProps(v)},unmount:function(){var e;null===(e=$.projection)||void 0===e||e.unmount(),i.cancelSync.update(L),i.cancelSync.render(O),T.forEach((function(e){return e()})),null==S||S(),null==m||m.children.delete($),C.clearAllListeners(),x=void 0,k=!1},addVariantChild:function(e){var t,n=$.getClosestVariantNode();if(n)return null===(t=n.variantChildren)||void 0===t||t.add(e),function(){return n.variantChildren.delete(e)}},sortNodePosition:function(e){return d&&n===e.treeType?d($.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return U?$:null==m?void 0:m.getClosestVariantNode()},getLayoutId:function(){return v.layoutId},getInstance:function(){return x},getStaticValue:function(e){return E[e]},setStaticValue:function(e,t){return E[e]=t},getLatestValues:function(){return E},setVisibility:function(e){$.isVisible!==e&&($.isVisible=e,$.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),l($,e,v,t)},measureViewportBox:function(){return s(x,v)},addValue:function(e,t){$.hasValue(e)&&$.removeValue(e),P.set(e,t),E[e]=t.get(),D(e,t)},removeValue:function(e){var t;P.delete(e),null===(t=T.get(e))||void 0===t||t(),T.delete(e),delete E[e],f(e,_)},hasValue:function(e){return P.has(e)},getValue:function(e,t){var n=P.get(e);return void 0===n&&void 0!==t&&(n=W(t),$.addValue(e,n)),n},forEachValue:function(e){return P.forEach(e)},readValue:function(e){var n;return null!==(n=E[e])&&void 0!==n?n:c(x,e,t)},setBaseTarget:function(e,t){M[e]=t},getBaseTarget:function(e){if(o){var t=o(v,e);if(void 0!==t&&!Y(t))return t}return M[e]}},C),{build:function(){return R(),_},scheduleRender:function(){h.default.render(O,!1,!0)},syncRender:O,setProps:function(e){(e.transformTemplate||v.transformTemplate)&&$.scheduleRender(),v=e,C.updatePropListeners(e),A=function(e,t,n){var r;for(var a in t){var o=t[a],i=n[a];if(Y(o))e.addValue(a,o);else if(Y(i))e.addValue(a,W(o));else if(i!==o)if(e.hasValue(a)){var l=e.getValue(a);!l.hasAnimated&&l.set(o)}else e.addValue(a,W(null!==(r=e.getStaticValue(a))&&void 0!==r?r:o))}for(var a in n)void 0===t[a]&&e.removeValue(a);return t}($,p(v),A)},getProps:function(){return v},getVariant:function(e){var t;return null===(t=v.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return v.transition},getTransformPagePoint:function(){return v.transformPagePoint},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==m?void 0:m.getVariantContext();if(!B){var t=(null==m?void 0:m.getVariantContext())||{};return void 0!==v.initial&&(t.initial=v.initial),t}for(var n={},r=0;r<Qr;r++){var a=Xr[r],o=v[a];(I(o)||!1===o)&&(n[a]=o)}return n}});return $}},Xr=r.__spreadArray(["initial"],r.__read(Er),!1),Qr=Xr.length;function Kr(e){return"string"==typeof e&&e.startsWith("var(--")}var Zr=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Jr(e,t,n){void 0===n&&(n=1),o.invariant(n<=4,'Max CSS variable fallback depth detected in property "'.concat(e,'". This may indicate a circular fallback dependency.'));var a=r.__read(function(e){var t=Zr.exec(e);if(!t)return[,];var n=r.__read(t,3);return[n[1],n[2]]}(e),2),i=a[0],l=a[1];if(i){var s=window.getComputedStyle(t).getPropertyValue(i);return s?s.trim():Kr(l)?Jr(l,t,n+1):l}}var ea,ta=new Set(["width","height","top","left","right","bottom","x","y"]),na=function(e){return ta.has(e)},ra=function(e,t){e.set(t,!1),e.set(t)},aa=function(e){return e===s.number||e===s.px};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(ea||(ea={}));var oa=function(e,t){return parseFloat(e.split(", ")[t])},ia=function(e,t){return function(n,r){var a=r.transform;if("none"===a||!a)return 0;var o=a.match(/^matrix3d\((.+)\)$/);if(o)return oa(o[1],t);var i=a.match(/^matrix\((.+)\)$/);return i?oa(i[1],e):0}},la=new Set(["x","y","z"]),sa=st.filter((function(e){return!la.has(e)})),ua={width:function(e,t){var n=e.x,r=t.paddingLeft,a=void 0===r?"0":r,o=t.paddingRight,i=void 0===o?"0":o;return n.max-n.min-parseFloat(a)-parseFloat(i)},height:function(e,t){var n=e.y,r=t.paddingTop,a=void 0===r?"0":r,o=t.paddingBottom,i=void 0===o?"0":o;return n.max-n.min-parseFloat(a)-parseFloat(i)},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:ia(4,13),y:ia(5,14)};function ca(e,t,n,a){return function(e){return Object.keys(e).some(na)}(t)?function(e,t,n,a){void 0===n&&(n={}),void 0===a&&(a={}),t=r.__assign({},t),a=r.__assign({},a);var i=Object.keys(t).filter(na),l=[],u=!1,c=[];if(i.forEach((function(r){var i=e.getValue(r);if(e.hasValue(r)){var f,d=n[r],p=cr(d),h=t[r];if(K(h)){var m=h.length,v=null===h[0]?1:0;d=h[v],p=cr(d);for(var g=v;g<m;g++)f?o.invariant(cr(h[g])===f,"All keyframes must be of the same type"):(f=cr(h[g]),o.invariant(f===p||aa(p)&&aa(f),"Keyframes must be of the same dimension as the current value"))}else f=cr(h);if(p!==f)if(aa(p)&&aa(f)){var y=i.get();"string"==typeof y&&i.set(parseFloat(y)),"string"==typeof h?t[r]=parseFloat(h):Array.isArray(h)&&f===s.px&&(t[r]=h.map(parseFloat))}else(null==p?void 0:p.transform)&&(null==f?void 0:f.transform)&&(0===d||0===h)?0===d?i.set(f.transform(d)):t[r]=p.transform(h):(u||(l=function(e){var t=[];return sa.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),u=!0),c.push(r),a[r]=void 0!==a[r]?a[r]:t[r],ra(i,h))}})),c.length){var f=c.indexOf("height")>=0?window.pageYOffset:null,d=function(e,t,n){var r=t.measureViewportBox(),a=t.getInstance(),o=getComputedStyle(a),i=o.display,l={};"none"===i&&t.setStaticValue("display",e.display||"block"),n.forEach((function(e){l[e]=ua[e](r,o)})),t.syncRender();var s=t.measureViewportBox();return n.forEach((function(n){var r=t.getValue(n);ra(r,l[n]),e[n]=ua[n](s,o)})),e}(t,e,c);return l.length&&l.forEach((function(t){var n=r.__read(t,2),a=n[0],o=n[1];e.getValue(a).set(o)})),e.syncRender(),null!==f&&window.scrollTo({top:f}),{target:d,transitionEnd:a}}return{target:t,transitionEnd:a}}(e,t,n,a):{target:t,transitionEnd:a}}var fa={treeType:"dom",readValueFromInstance:function(e,t){if(ft(t)){var n=ie(t);return n&&n.default||0}var r,a=(r=e,window.getComputedStyle(r));return(Yt(t)?a.getPropertyValue(t):a[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var n;return null===(n=e.style)||void 0===n?void 0:n[t]},measureViewportBox:function(e,t){return Ur(e,t.transformPagePoint)},resetTransform:function(e,t,n){var r=n.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var n=t.vars,r=t.style;delete n[e],delete r[e]},makeTargetAnimatable:function(e,t,n,a){var o=n.transformValues;void 0===a&&(a=!0);var i=t.transition,l=t.transitionEnd,s=r.__rest(t,["transition","transitionEnd"]),u=yr(s,i||{},e);if(o&&(l&&(l=o(l)),s&&(s=o(s)),u&&(u=o(u))),a){vr(e,s,u);var c=function(e,t,n,a){var o=function(e,t,n){var a,o=r.__rest(t,[]),i=e.getInstance();if(!(i instanceof Element))return{target:o,transitionEnd:n};for(var l in n&&(n=r.__assign({},n)),e.forEachValue((function(e){var t=e.get();if(Kr(t)){var n=Jr(t,i);n&&e.set(n)}})),o){var s=o[l];if(Kr(s)){var u=Jr(s,i);u&&(o[l]=u,n&&(null!==(a=n[l])&&void 0!==a||(n[l]=s)))}}return{target:o,transitionEnd:n}}(e,t,a);return ca(e,t=o.target,n,a=o.transitionEnd)}(e,s,u,l);l=c.transitionEnd,s=c.target}return r.__assign({transition:i,transitionEnd:l},s)},scrapeMotionValuesFromProps:mn,build:function(e,t,n,r,a){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden"),qt(t,n,r,a.transformTemplate)},render:dn},da=qr(fa),pa=qr(r.__assign(r.__assign({},fa),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var n;return ft(t)?(null===(n=ie(t))||void 0===n?void 0:n.default)||0:(t=pn.has(t)?t:fn(t),e.getAttribute(t))},scrapeMotionValuesFromProps:vn,build:function(e,t,n,r,a){on(t,n,r,a.transformTemplate)},render:hn})),ha=function(e,t){return Ht(e)?pa(t,{enableHardwareAcceleration:!1}):da(t,{enableHardwareAcceleration:!0})};function ma(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}var va={correct:function(e,t){if(!t.target)return e;if("string"==typeof e){if(!s.px.test(e))return e;e=parseFloat(e)}var n=ma(e,t.target.x),r=ma(e,t.target.y);return"".concat(n,"% ").concat(r,"%")}},ga="_$css",ya={correct:function(e,t){var n=t.treeScale,r=t.projectionDelta,a=e,o=e.includes("var("),i=[];o&&(e=e.replace(Zr,(function(e){return i.push(e),ga})));var u=s.complex.parse(e);if(u.length>5)return a;var c=s.complex.createTransformer(e),f="number"!=typeof u[0]?1:0,d=r.x.scale*n.x,p=r.y.scale*n.y;u[0+f]/=d,u[1+f]/=p;var h=l.mix(d,p,.5);"number"==typeof u[2+f]&&(u[2+f]/=h),"number"==typeof u[3+f]&&(u[3+f]/=h);var m=c(u);if(o){var v=0;m=m.replace(ga,(function(){var e=i[v];return v++,e}))}return m}},ba=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.componentDidMount=function(){var e=this,t=this.props,n=t.visualElement,a=t.layoutGroup,o=t.switchLayoutGroup,i=t.layoutId,l=n.projection;at(wa),l&&((null==a?void 0:a.group)&&a.group.add(l),(null==o?void 0:o.register)&&i&&o.register(l),l.root.didUpdate(),l.addEventListener("animationComplete",(function(){e.safeToRemove()})),l.setOptions(r.__assign(r.__assign({},l.options),{onExitComplete:function(){return e.safeToRemove()}}))),gt.hasEverUpdated=!0},t.prototype.getSnapshotBeforeUpdate=function(e){var t=this,n=this.props,r=n.layoutDependency,a=n.visualElement,o=n.drag,i=n.isPresent,l=a.projection;return l?(l.isPresent=i,o||e.layoutDependency!==r||void 0===r?l.willUpdate():this.safeToRemove(),e.isPresent!==i&&(i?l.promote():l.relegate()||h.default.postRender((function(){var e;(null===(e=l.getStack())||void 0===e?void 0:e.members.length)||t.safeToRemove()}))),null):null},t.prototype.componentDidUpdate=function(){var e=this.props.visualElement.projection;e&&(e.root.didUpdate(),!e.currentAnimation&&e.isLead()&&this.safeToRemove())},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.visualElement,n=e.layoutGroup,r=e.switchLayoutGroup,a=t.projection;a&&(a.scheduleCheckAfterUnmount(),(null==n?void 0:n.group)&&n.group.remove(a),(null==r?void 0:r.deregister)&&r.deregister(a))},t.prototype.safeToRemove=function(){var e=this.props.safeToRemove;null==e||e()},t.prototype.render=function(){return null},t}(p.default.Component),wa={borderRadius:r.__assign(r.__assign({},va),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:va,borderTopRightRadius:va,borderBottomLeftRadius:va,borderBottomRightRadius:va,boxShadow:ya},xa={measureLayout:function(e){var t=r.__read(ir(),2),n=t[0],o=t[1],i=a.useContext(jt);return p.default.createElement(ba,r.__assign({},e,{layoutGroup:i,switchLayoutGroup:a.useContext(Vt),isPresent:n,safeToRemove:o}))}},Sa=yt({attachResizeListener:function(e,t){return _n(e,"resize",t)},measureScroll:function(){return{x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}},checkIsScrollRoot:function(){return!0}}),ka={current:void 0},Ea=yt({measureScroll:function(e){return{x:e.scrollLeft,y:e.scrollTop}},defaultParent:function(){if(!ka.current){var e=new Sa(0,{});e.mount(window),e.setOptions({layoutScroll:!0}),ka.current=e}return ka.current},resetTransform:function(e,t){e.style.transform=null!=t?t:"none"},checkIsScrollRoot:function(e){return Boolean("fixed"===window.getComputedStyle(e).position)}}),_a=r.__assign(r.__assign(r.__assign(r.__assign({},Tr),nr),Yr),xa),Ca=Bt((function(e,t){return En(e,t,_a,ha,Ea)})),Pa=Bt(En);function Ta(){var e=a.useRef(!1);return P((function(){return e.current=!0,function(){e.current=!1}}),[]),e}function Aa(){var e=Ta(),t=r.__read(a.useState(0),2),n=t[0],o=t[1],i=a.useCallback((function(){e.current&&o(n+1)}),[n]);return[a.useCallback((function(){return h.default.postRender(i)}),[i]),n]}var Ma=function(e){var t=e.children,n=e.initial,o=e.isPresent,i=e.onExitComplete,l=e.custom,s=e.presenceAffectsLayout,u=F(Oa),c=or(),f=a.useMemo((function(){return{id:c,initial:n,isPresent:o,custom:l,onExitComplete:function(e){var t,n;u.set(e,!0);try{for(var a=r.__values(u.values()),o=a.next();!o.done;o=a.next())if(!o.value)return}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}null==i||i()},register:function(e){return u.set(e,!1),function(){return u.delete(e)}}}}),s?void 0:[o]);return a.useMemo((function(){u.forEach((function(e,t){return u.set(t,!1)}))}),[o]),d.useEffect((function(){!o&&!u.size&&(null==i||i())}),[o]),d.createElement(_.Provider,{value:f},t)};function Oa(){return new Map}var Ra=function(e){return e.key||""},La=a.createContext(null),Ia=function(e){return!e.isLayoutDirty&&e.willUpdate(!1)};var Da=function(e){return!0===e},za=function(e){var t,n,o=e.children,i=e.id,l=e.inheritId,s=e.inherit,u=void 0===s||s;void 0!==l&&(u=l);var c,f,p,h=a.useContext(jt),m=a.useContext(La),v=r.__read(Aa(),2),g=v[0],y=v[1],b=a.useRef(null),w=null!==(t=h.id)&&void 0!==t?t:m;null===b.current&&(function(e){return Da(!0===e)||"id"===e}(u)&&w&&(i=i?w+"-"+i:w),b.current={id:i,group:Da(u)&&null!==(n=null==h?void 0:h.group)&&void 0!==n?n:(c=new Set,f=new WeakMap,p=function(){return c.forEach(Ia)},{add:function(e){c.add(e),f.set(e,e.addEventListener("willUpdate",p))},remove:function(e){var t;c.delete(e),null===(t=f.get(e))||void 0===t||t(),f.delete(e),p()},dirty:p})});var x=a.useMemo((function(){return r.__assign(r.__assign({},b.current),{forceRender:g})}),[y]);return d.createElement(jt.Provider,{value:x},o)},ja=0;function Va(e){return"function"==typeof e}var Na=a.createContext(null);var Fa=a.forwardRef((function(e,t){var n=e.children,i=e.as,s=void 0===i?"ul":i,u=e.axis,c=void 0===u?"y":u,f=e.onReorder,p=e.values,h=r.__rest(e,["children","as","axis","onReorder","values"]),m=F((function(){return Ca(s)})),v=[],g=a.useRef(!1);o.invariant(Boolean(p),"Reorder.Group must be provided a values prop");var y={axis:c,registerItem:function(e,t){t&&-1===v.findIndex((function(t){return e===t.value}))&&(v.push({value:e,layout:t[c]}),v.sort(Ua))},updateOrder:function(e,t,n){if(!g.current){var a=function(e,t,n,a){if(!a)return e;var o=e.findIndex((function(e){return e.value===t}));if(-1===o)return e;var i=a>0?1:-1,s=e[o+i];if(!s)return e;var u=e[o],c=s.layout,f=l.mix(c.min,c.max,.5);return 1===i&&u.layout.max+n>f||-1===i&&u.layout.min+n<f?function(e,t,n){var a=r.__read(e).slice(0),o=t<0?a.length+t:t;if(o>=0&&o<a.length){var i=n<0?a.length+n:n,l=r.__read(a.splice(t,1),1)[0];a.splice(i,0,l)}return a}(e,o,o+i):e}(v,e,t,n);v!==a&&(g.current=!0,f(a.map(Ba).filter((function(e){return-1!==p.indexOf(e)}))))}}};return a.useEffect((function(){g.current=!1})),d.createElement(m,r.__assign({},h,{ref:t}),d.createElement(Na.Provider,{value:y},n))}));function Ba(e){return e.value}function Ua(e,t){return e.layout.min-t.layout.min}function Ha(e){var t=F((function(){return W(e)}));if(a.useContext(S).isStatic){var n=r.__read(a.useState(e),2)[1];a.useEffect((function(){return t.onChange(n)}),[])}return t}var $a=function(e){return function(e){return"object"==typeof e&&e.mix}(e)?e.mix:void 0};function Wa(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=!Array.isArray(e[0]),a=n?0:-1,o=e[0+a],i=e[1+a],s=e[2+a],u=e[3+a],c=l.interpolate(i,s,r.__assign({mixer:$a(s[0])},u));return n?c(o):c}function Ya(e,t){var n=Ha(t()),r=function(){return n.set(t())};return r(),function(e,t){a.useEffect((function(){var n=e.map((function(e){return e.onChange(t)}));return function(){return n.forEach((function(e){return e()}))}}))}(e,(function(){return h.default.update(r,!1,!0)})),n}function Ga(e,t,n,a){var o="function"==typeof t?t:Wa(t,n,a);return Array.isArray(e)?qa(e,o):qa([e],(function(e){var t=r.__read(e,1)[0];return o(t)}))}function qa(e,t){var n=F((function(){return[]}));return Ya(e,(function(){n.length=0;for(var r=e.length,a=0;a<r;a++)n[a]=e[a].get();return t(n)}))}function Xa(e,t){return void 0===t&&(t=0),Y(e)?e:Ha(t)}var Qa,Ka={Group:Fa,Item:a.forwardRef((function(e,t){var n=e.children,i=e.style,l=e.value,s=e.as,u=void 0===s?"li":s,c=e.onDrag,f=e.layout,p=void 0===f||f,h=r.__rest(e,["children","style","value","as","onDrag","layout"]),m=F((function(){return Ca(u)})),v=a.useContext(Na),g={x:Xa(null==i?void 0:i.x),y:Xa(null==i?void 0:i.y)},y=Ga([g.x,g.y],(function(e){var t=r.__read(e,2),n=t[0],a=t[1];return n||a?1:"unset"})),b=a.useRef(null);o.invariant(Boolean(v),"Reorder.Item must be a child of Reorder.Group");var w=v,x=w.axis,S=w.registerItem,k=w.updateOrder;return a.useEffect((function(){S(l,b.current)}),[v]),d.createElement(m,r.__assign({drag:x},h,{dragSnapToOrigin:!0,style:r.__assign(r.__assign({},i),{x:g.x,y:g.y,zIndex:y}),layout:p,onDrag:function(e,t){var n=t.velocity;n[x]&&k(l,g[x].get(),n[x]),null==c||c(e,t)},onLayoutMeasure:function(e){b.current=e},ref:t}),n)}))},Za=r.__assign(r.__assign({renderer:ha},Tr),nr),Ja=r.__assign(r.__assign(r.__assign(r.__assign({},Za),Yr),xa),{projectionNodeConstructor:Ea});function eo(){return{scrollX:W(0),scrollY:W(0),scrollXProgress:W(0),scrollYProgress:W(0)}}function to(e,t,n){n.set(e&&t?e/t:0)}function no(e,t){var n=function(){var n=t(),r=n.xOffset,a=n.yOffset,o=n.xMaxOffset,i=n.yMaxOffset;e.scrollX.set(r),e.scrollY.set(a),to(r,o,e.scrollXProgress),to(a,i,e.scrollYProgress)};return n(),n}function ro(){return{xOffset:window.pageXOffset,yOffset:window.pageYOffset,xMaxOffset:document.body.clientWidth-window.innerWidth,yMaxOffset:document.body.clientHeight-window.innerHeight}}var ao=!1,oo="undefined"!=typeof performance?function(){return performance.now()}:function(){return Date.now()};function io(e){var t=F(oo),n=a.useContext(S).isStatic;a.useEffect((function(){if(!n){var r=function(n){var r=n.timestamp;e(r-t)};return h.default.update(r,!0),function(){return i.cancelSync.update(r)}}}),[e])}function lo(){var e=!1,t=[],n=new Set,a={subscribe:function(e){return n.add(e),function(){n.delete(e)}},start:function(r,a){if(e){var o=[];return n.forEach((function(e){o.push(br(e,r,{transitionOverride:a}))})),Promise.all(o)}return new Promise((function(e){t.push({animation:[r,a],resolve:e})}))},set:function(t){return o.invariant(e,"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook."),n.forEach((function(e){!function(e,t){Array.isArray(t)?mr(e,t):"string"==typeof t?mr(e,[t]):hr(e,t)}(e,t)}))},stop:function(){n.forEach((function(e){!function(e){e.forEachValue((function(e){return e.stop()}))}(e)}))},mount:function(){return e=!0,t.forEach((function(e){var t=e.animation,n=e.resolve;a.start.apply(a,r.__spreadArray([],r.__read(t),!1)).then(n)})),function(){e=!1,a.stop()}}};return a}function so(){var e=F(lo);return a.useEffect(e.mount,[]),e}var uo=so,co=function(){function e(){this.componentControls=new Set}return e.prototype.subscribe=function(e){var t=this;return this.componentControls.add(e),function(){return t.componentControls.delete(e)}},e.prototype.start=function(e,t){this.componentControls.forEach((function(n){n.start(e.nativeEvent||e,t)}))},e}(),fo=function(){return new co};function po(){return ho}function ho(e){ka.current&&(ka.current.isUpdating=!1,ka.current.blockUpdate(),null==e||e())}var mo=function(){return{}},vo=qr({build:function(){},measureViewportBox:Ze,resetTransform:function(){},restoreTransform:function(){},removeValueFromRenderState:function(){},render:function(){},scrapeMotionValuesFromProps:mo,readValueFromInstance:function(e,t,n){return n.initialState[t]||0},makeTargetAnimatable:function(e,t){var n=t.transition,a=t.transitionEnd,o=r.__rest(t,["transition","transitionEnd"]);return vr(e,o,yr(o,n||{},e)),r.__assign({transition:n,transitionEnd:a},o)}}),go=bn({scrapeMotionValuesFromProps:mo,createRenderState:mo}),yo=function(e){return e>.001?1/e:1e5},bo=!1;t.AnimatePresence=function(e){var t=e.children,n=e.custom,o=e.initial,i=void 0===o||o,l=e.onExitComplete,s=e.exitBeforeEnter,u=e.presenceAffectsLayout,c=void 0===u||u,f=r.__read(Aa(),1)[0],p=a.useContext(jt).forceRender;p&&(f=p);var h=Ta(),v=function(e){var t=[];return a.Children.forEach(e,(function(e){a.isValidElement(e)&&t.push(e)})),t}(t),g=v,y=new Set,b=a.useRef(g),w=a.useRef(new Map).current,x=a.useRef(!0);if(P((function(){x.current=!1,function(e,t){e.forEach((function(e){var n=Ra(e);t.set(n,e)}))}(v,w),b.current=g})),Yn((function(){x.current=!0,w.clear(),y.clear()})),x.current)return d.createElement(d.Fragment,null,g.map((function(e){return d.createElement(Ma,{key:Ra(e),isPresent:!0,initial:!!i&&void 0,presenceAffectsLayout:c},e)})));g=r.__spreadArray([],r.__read(g),!1);for(var S=b.current.map(Ra),k=v.map(Ra),E=S.length,_=0;_<E;_++){var C=S[_];-1===k.indexOf(C)&&y.add(C)}return s&&y.size&&(g=[]),y.forEach((function(e){if(-1===k.indexOf(e)){var t=w.get(e);if(t){var r=S.indexOf(e);g.splice(r,0,d.createElement(Ma,{key:Ra(t),isPresent:!1,onExitComplete:function(){w.delete(e),y.delete(e);var t=b.current.findIndex((function(t){return t.key===e}));if(b.current.splice(t,1),!y.size){if(b.current=v,!1===h.current)return;f(),l&&l()}},custom:n,presenceAffectsLayout:c},t))}}})),g=g.map((function(e){var t=e.key;return y.has(t)?e:d.createElement(Ma,{key:Ra(e),isPresent:!0,presenceAffectsLayout:c},e)})),"production"!==m&&s&&g.length>1&&console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour."),d.createElement(d.Fragment,null,y.size?g:g.map((function(e){return a.cloneElement(e)})))},t.AnimateSharedLayout=function(e){var t=e.children;return d.useEffect((function(){o.warning(!1,"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations")}),[]),d.createElement(za,{id:F((function(){return"asl-".concat(ja++)}))},t)},t.DeprecatedLayoutGroupContext=La,t.DragControls=co,t.FlatTree=mt,t.LayoutGroup=za,t.LayoutGroupContext=jt,t.LazyMotion=function(e){var t=e.children,n=e.features,o=e.strict,i=void 0!==o&&o,l=r.__read(a.useState(!Va(n)),2)[1],s=a.useRef(void 0);if(!Va(n)){var u=n.renderer,c=r.__rest(n,["renderer"]);s.current=u,y(c)}return a.useEffect((function(){Va(n)&&n().then((function(e){var t=e.renderer;y(r.__rest(e,["renderer"])),s.current=t,l(!0)}))}),[]),d.createElement(b.Provider,{value:{renderer:s.current,strict:i}},t)},t.MotionConfig=function(e){var t=e.children,n=e.isValidProp,o=r.__rest(e,["children","isValidProp"]);n&&en(n),(o=r.__assign(r.__assign({},a.useContext(S)),o)).isStatic=F((function(){return o.isStatic}));var i=a.useMemo((function(){return o}),[JSON.stringify(o.transition),o.transformPagePoint,o.reducedMotion]);return d.createElement(S.Provider,{value:i},t)},t.MotionConfigContext=S,t.MotionContext=k,t.MotionValue=$,t.PresenceContext=_,t.Reorder=Ka,t.SwitchLayoutGroupContext=Vt,t.addPointerEvent=jn,t.addScaleCorrector=at,t.animate=ve,t.animateVisualElement=br,t.animationControls=lo,t.animations=Tr,t.calcLength=Fe,t.checkTargetForNewValues=vr,t.createBox=Ze,t.createDomMotionComponent=function(e){return Ft(En(e,{forwardMotionProps:!1},_a,ha,Ea))},t.createMotionComponent=Ft,t.domAnimation=Za,t.domMax=Ja,t.filterProps=tn,t.isBrowser=C,t.isDragActive=Hn,t.isMotionValue=Y,t.isValidMotionProp=Zt,t.m=Pa,t.makeUseVisualState=bn,t.motion=Ca,t.motionValue=W,t.resolveMotionValue=vt,t.transform=Wa,t.useAnimation=uo,t.useAnimationControls=so,t.useAnimationFrame=io,t.useCycle=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=a.useRef(0),o=r.__read(a.useState(e[n.current]),2),i=o[0],s=o[1],u=a.useCallback((function(t){n.current="number"!=typeof t?l.wrap(0,e.length,n.current+1):t,s(e[n.current])}),r.__spreadArray([e.length],r.__read(e),!1));return[i,u]},t.useDeprecatedAnimatedState=function(e){var t=r.__read(a.useState(e),2),n=t[0],o=t[1],i=go({},!1),l=F((function(){return vo({props:{},visualState:i},{initialState:e})}));return a.useEffect((function(){return l.mount({}),l.unmount}),[l]),a.useEffect((function(){l.setProps({onUpdate:function(e){o(r.__assign({},e))}})}),[o,l]),[n,F((function(){return function(e){return br(l,e)}}))]},t.useDeprecatedInvertedScale=function(e){var t=Ha(1),n=Ha(1),r=E();return o.invariant(!(!e&&!r),"If no scale values are provided, useInvertedScale must be used within a child of another motion component."),o.warning(bo,"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead."),bo=!0,e?(t=e.scaleX||t,n=e.scaleY||n):r&&(t=r.getValue("scaleX",1),n=r.getValue("scaleY",1)),{scaleX:Ga(t,yo),scaleY:Ga(n,yo)}},t.useDomEvent=Cn,t.useDragControls=function(){return F(fo)},t.useElementScroll=function(e){var t=F(eo);return P((function(){var n=e.current;if(o.invariant(!!n,"ref provided to useScroll must be passed into a HTML element."),n){var r=no(t,function(e){return function(){return{xOffset:e.scrollLeft,yOffset:e.scrollTop,xMaxOffset:e.scrollWidth-e.offsetWidth,yMaxOffset:e.scrollHeight-e.offsetHeight}}}(n)),a=_n(n,"scroll",r),i=_n(n,"resize",r);return function(){a&&a(),i&&i()}}}),[]),t},t.useForceUpdate=Aa,t.useInView=function(e,t){var n=void 0===t?{}:t,o=n.root,i=n.margin,l=n.amount,s=n.once,c=void 0!==s&&s,f=r.__read(a.useState(!1),2),d=f[0],p=f[1];return a.useEffect((function(){var t;if(!(!e.current||c&&d)){var n={root:null!==(t=null==o?void 0:o.current)&&void 0!==t?t:void 0,margin:i,amount:"some"===l?"any":l};return u.inView(e.current,(function(){return p(!0),c?void 0:function(){return p(!1)}}),n)}}),[o,e,i,c]),d},t.useInstantLayoutTransition=po,t.useInstantTransition=function(){var e=r.__read(Aa(),2),t=e[0],n=e[1],o=po();return a.useEffect((function(){h.default.postRender((function(){return h.default.postRender((function(){return se.current=!1}))}))}),[n]),function(e){o((function(){se.current=!0,t(),e()}))}},t.useIsPresent=function(){return null===(e=a.useContext(_))||e.isPresent;var e},t.useIsomorphicLayoutEffect=P,t.useMotionTemplate=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=e.length;function a(){for(var n="",a=0;a<r;a++)n+=e[a],t[a]&&(n+=t[a].get());return n}return Ya(t,a)},t.useMotionValue=Ha,t.usePresence=ir,t.useReducedMotion=M,t.useReducedMotionConfig=O,t.useResetProjection=function(){return d.useCallback((function(){var e=ka.current;e&&e.resetTree()}),[])},t.useSpring=function(e,t){void 0===t&&(t={});var n=a.useContext(S).isStatic,o=a.useRef(null),i=Ha(Y(e)?e.get():e);return a.useMemo((function(){return i.attach((function(e,a){return n?a(e):(o.current&&o.current.stop(),o.current=l.animate(r.__assign(r.__assign({from:i.get(),to:e,velocity:i.getVelocity()},t),{onUpdate:a})),i.get())}))}),[JSON.stringify(t)]),function(e,t){a.useEffect((function(){if(Y(e))return e.onChange(t)}),[t])}(e,(function(e){return i.set(parseFloat(e))})),i},t.useTime=function(){var e=Ha(0);return io((function(t){return e.set(t)})),e},t.useTransform=Ga,t.useUnmountEffect=Yn,t.useVelocity=function(e){var t=Ha(e.getVelocity());return a.useEffect((function(){return e.velocityUpdateSubscribers.add((function(e){t.set(e)}))}),[e]),t},t.useViewportScroll=function(){return Qa||(Qa=eo()),P((function(){!ao&&function(){ao=!0;var e=no(Qa,ro);_n(window,"scroll",e),_n(window,"resize",e)}()}),[]),Qa},t.useVisualElementContext=E,t.visualElement=qr,t.wrapHandler=Ln},910:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const a=(o={},function(e){return void 0===o[e]&&(o[e]=(t=e,r.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),o[e];var t});var o},839:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=1/60*1e3,r="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),a="undefined"!=typeof window?e=>window.requestAnimationFrame(e):e=>setTimeout((()=>e(r())),n);let o=!0,i=!1,l=!1;const s={delta:0,timestamp:0},u=["read","update","preRender","render","postRender"],c=u.reduce(((e,t)=>(e[t]=function(e){let t=[],n=[],r=0,a=!1,o=!1;const i=new WeakSet,l={schedule:(e,o=!1,l=!1)=>{const s=l&&a,u=s?t:n;return o&&i.add(e),-1===u.indexOf(e)&&(u.push(e),s&&a&&(r=t.length)),e},cancel:e=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1),i.delete(e)},process:s=>{if(a)o=!0;else{if(a=!0,[t,n]=[n,t],n.length=0,r=t.length,r)for(let n=0;n<r;n++){const r=t[n];r(s),i.has(r)&&(l.schedule(r),e())}a=!1,o&&(o=!1,l.process(s))}}};return l}((()=>i=!0)),e)),{}),f=u.reduce(((e,t)=>{const n=c[t];return e[t]=(e,t=!1,r=!1)=>(i||v(),n.schedule(e,t,r)),e}),{}),d=u.reduce(((e,t)=>(e[t]=c[t].cancel,e)),{}),p=u.reduce(((e,t)=>(e[t]=()=>c[t].process(s),e)),{}),h=e=>c[e].process(s),m=e=>{i=!1,s.delta=o?n:Math.max(Math.min(e-s.timestamp,40),1),s.timestamp=e,l=!0,u.forEach(h),l=!1,i&&(o=!1,a(m))},v=()=>{i=!0,o=!0,l||a(m)};t.cancelSync=d,t.default=f,t.flushSync=p,t.getFrameData=()=>s},394:(e,t,n)=>{"use strict";n.r(t),n.d(t,{invariant:()=>a,warning:()=>r});var r=function(){},a=function(){}},679:(e,t,n)=>{"use strict";var r=n(296),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var a=p(n);a&&a!==h&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=s(t),m=s(n),v=0;v<i.length;++v){var g=i[v];if(!(o[g]||r&&r[g]||m&&m[g]||l&&l[g])){var y=d(n,g);try{u(t,g,y)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case v:case m:case s:return e;default:return t}}case a:return t}}}function S(e){return x(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=v,t.Memo=m,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||x(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return x(e)===u},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===o},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=x},296:(e,t,n)=>{"use strict";e.exports=n(103)},878:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(655),a=n(394),o=n(573),i=n(839);function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=l(i);const u=(e,t,n)=>Math.min(Math.max(n,e),t);function c(e,t){return e*Math.sqrt(1-t*t)}const f=["duration","bounce"],d=["stiffness","damping","mass"];function p(e,t){return t.some((t=>void 0!==e[t]))}function h(e){var{from:t=0,to:n=1,restSpeed:o=2,restDelta:i}=e,l=r.__rest(e,["from","to","restSpeed","restDelta"]);const s={done:!1,value:t};let{stiffness:h,damping:v,mass:g,velocity:y,duration:b,isResolvedFromDuration:w}=function(e){let t=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!p(e,d)&&p(e,f)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,i;a.warning(e<=1e4,"Spring duration must be 10 seconds or less");let l=1-t;l=u(.05,1,l),e=u(.01,10,e/1e3),l<1?(o=t=>{const r=t*l,a=r*e;return.001-(r-n)/c(t,l)*Math.exp(-a)},i=t=>{const r=t*l*e,a=r*n+n,i=Math.pow(l,2)*Math.pow(t,2)*e,s=Math.exp(-r),u=c(Math.pow(t,2),l);return(.001-o(t)>0?-1:1)*((a-i)*s)/u}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-.001,i=t=>Math.exp(-t*e)*(e*e*(n-t)));const s=function(e,t,n){let r=n;for(let n=1;n<12;n++)r-=e(r)/t(r);return r}(o,i,5/e);if(e*=1e3,isNaN(s))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(s,2)*r;return{stiffness:t,damping:2*l*Math.sqrt(r*t),duration:e}}}(e);t=Object.assign(Object.assign(Object.assign({},t),n),{velocity:0,mass:1}),t.isResolvedFromDuration=!0}return t}(l),x=m,S=m;function k(){const e=y?-y/1e3:0,r=n-t,a=v/(2*Math.sqrt(h*g)),o=Math.sqrt(h/g)/1e3;if(void 0===i&&(i=Math.min(Math.abs(n-t)/100,.4)),a<1){const t=c(o,a);x=i=>{const l=Math.exp(-a*o*i);return n-l*((e+a*o*r)/t*Math.sin(t*i)+r*Math.cos(t*i))},S=n=>{const i=Math.exp(-a*o*n);return a*o*i*(Math.sin(t*n)*(e+a*o*r)/t+r*Math.cos(t*n))-i*(Math.cos(t*n)*(e+a*o*r)-t*r*Math.sin(t*n))}}else if(1===a)x=t=>n-Math.exp(-o*t)*(r+(e+o*r)*t);else{const t=o*Math.sqrt(a*a-1);x=i=>{const l=Math.exp(-a*o*i),s=Math.min(t*i,300);return n-l*((e+a*o*r)*Math.sinh(s)+t*r*Math.cosh(s))/t}}}return k(),{next:e=>{const t=x(e);if(w)s.done=e>=b;else{const r=1e3*S(e),a=Math.abs(r)<=o,l=Math.abs(n-t)<=i;s.done=a&&l}return s.value=s.done?n:t,s},flipTarget:()=>{y=-y,[t,n]=[n,t],k()}}}h.needsInterpolation=(e,t)=>"string"==typeof e||"string"==typeof t;const m=e=>0,v=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},g=(e,t,n)=>-n*e+n*t+e;function y(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function b({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let a=0,o=0,i=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,l=2*n-r;a=y(l,r,e+1/3),o=y(l,r,e),i=y(l,r,e-1/3)}else a=o=i=n;return{red:Math.round(255*a),green:Math.round(255*o),blue:Math.round(255*i),alpha:r}}const w=(e,t,n)=>{const r=e*e,a=t*t;return Math.sqrt(Math.max(0,n*(a-r)+r))},x=[o.hex,o.rgba,o.hsla],S=e=>x.find((t=>t.test(e))),k=e=>`'${e}' is not an animatable color. Use the equivalent color code instead.`,E=(e,t)=>{let n=S(e),r=S(t);a.invariant(!!n,k(e)),a.invariant(!!r,k(t));let i=n.parse(e),l=r.parse(t);n===o.hsla&&(i=b(i),n=o.rgba),r===o.hsla&&(l=b(l),r=o.rgba);const s=Object.assign({},i);return e=>{for(const t in s)"alpha"!==t&&(s[t]=w(i[t],l[t],e));return s.alpha=g(i.alpha,l.alpha,e),n.transform(s)}},_={x:0,y:0,z:0},C=e=>"number"==typeof e,P=(e,t)=>n=>t(e(n)),T=(...e)=>e.reduce(P);function A(e,t){return C(e)?n=>g(e,t,n):o.color.test(e)?E(e,t):L(e,t)}const M=(e,t)=>{const n=[...e],r=n.length,a=e.map(((e,n)=>A(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=a[t](e);return n}},O=(e,t)=>{const n=Object.assign(Object.assign({},e),t),r={};for(const a in n)void 0!==e[a]&&void 0!==t[a]&&(r[a]=A(e[a],t[a]));return e=>{for(const t in r)n[t]=r[t](e);return n}};function R(e){const t=o.complex.parse(e),n=t.length;let r=0,a=0,i=0;for(let e=0;e<n;e++)r||"number"==typeof t[e]?r++:void 0!==t[e].hue?i++:a++;return{parsed:t,numNumbers:r,numRGB:a,numHSL:i}}const L=(e,t)=>{const n=o.complex.createTransformer(t),r=R(e),i=R(t);return r.numHSL===i.numHSL&&r.numRGB===i.numRGB&&r.numNumbers>=i.numNumbers?T(M(r.parsed,i.parsed),n):(a.warning(!0,`Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),n=>`${n>0?t:e}`)},I=(e,t)=>n=>g(e,t,n);function D(e,t,{clamp:n=!0,ease:r,mixer:i}={}){const l=e.length;a.invariant(l===t.length,"Both input and output ranges must be the same length"),a.invariant(!r||!Array.isArray(r)||r.length===l-1,"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values."),e[0]>e[l-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());const s=function(e,t,n){const r=[],a=n||("number"==typeof(i=e[0])?I:"string"==typeof i?o.color.test(i)?E:L:Array.isArray(i)?M:"object"==typeof i?O:void 0);var i;const l=e.length-1;for(let n=0;n<l;n++){let o=a(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]:t;o=T(e,o)}r.push(o)}return r}(t,r,i),c=2===l?function([e,t],[n]){return r=>n(v(e,t,r))}(e,s):function(e,t){const n=e.length,r=n-1;return a=>{let o=0,i=!1;if(a<=e[0]?i=!0:a>=e[r]&&(o=r-1,i=!0),!i){let t=1;for(;t<n&&!(e[t]>a||t===r);t++);o=t-1}const l=v(e[o],e[o+1],a);return t[o](l)}}(e,s);return n?t=>c(u(e[0],e[l-1],t)):c}const z=e=>t=>1-e(1-t),j=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,V=e=>t=>Math.pow(t,e),N=e=>t=>t*t*((e+1)*t-e),F=e=>{const t=N(e);return e=>(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))},B=e=>e,U=V(2),H=z(U),$=j(U),W=e=>1-Math.sin(Math.acos(e)),Y=z(W),G=j(Y),q=N(1.525),X=z(q),Q=j(q),K=F(1.525),Z=e=>{if(1===e||0===e)return e;const t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},J=z(Z);function ee(e,t){return e.map((()=>t||$)).splice(0,e.length-1)}function te({from:e=0,to:t=1,ease:n,offset:r,duration:a=300}){const o={done:!1,value:e},i=Array.isArray(t)?t:[e,t],l=function(e,t){return e.map((e=>e*t))}(r&&r.length===i.length?r:function(e){const t=e.length;return e.map(((e,n)=>0!==n?n/(t-1):0))}(i),a);function s(){return D(l,i,{ease:Array.isArray(n)?n:ee(i,n)})}let u=s();return{next:e=>(o.value=u(e),o.done=e>=a,o),flipTarget:()=>{i.reverse(),u=s()}}}function ne({velocity:e=0,from:t=0,power:n=.8,timeConstant:r=350,restDelta:a=.5,modifyTarget:o}){const i={done:!1,value:t};let l=n*e;const s=t+l,u=void 0===o?s:o(s);return u!==s&&(l=u-t),{next:e=>{const t=-l*Math.exp(-e/r);return i.done=!(t>a||t<-a),i.value=i.done?u:u+t,i},flipTarget:()=>{}}}const re={keyframes:te,spring:h,decay:ne};function ae(e,t,n=0){return e-t-n}const oe=e=>{const t=({delta:t})=>e(t);return{start:()=>s.default.update(t,!0),stop:()=>i.cancelSync.update(t)}};function ie(e){var t,n,{from:a,autoplay:o=!0,driver:i=oe,elapsed:l=0,repeat:s=0,repeatType:u="loop",repeatDelay:c=0,onPlay:f,onStop:d,onComplete:p,onRepeat:m,onUpdate:v}=e,g=r.__rest(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let y,b,w,{to:x}=g,S=0,k=g.duration,E=!1,_=!0;const C=function(e){if(Array.isArray(e.to))return te;if(re[e.type])return re[e.type];const t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?te:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?h:te}(g);(null===(n=(t=C).needsInterpolation)||void 0===n?void 0:n.call(t,a,x))&&(w=D([0,100],[a,x],{clamp:!1}),a=0,x=100);const P=C(Object.assign(Object.assign({},g),{from:a,to:x}));return o&&(null==f||f(),y=i((function(e){if(_||(e=-e),l+=e,!E){const e=P.next(Math.max(0,l));b=e.value,w&&(b=w(b)),E=_?e.done:l<=0}null==v||v(b),E&&(0===S&&(null!=k||(k=l)),S<s?function(e,t,n,r){return r?e>=t+n:e<=-n}(l,k,c,_)&&(S++,"reverse"===u?(_=S%2==0,l=function(e,t,n=0,r=!0){return r?ae(t+-e,t,n):t-(e-t)+n}(l,k,c,_)):(l=ae(l,k,c),"mirror"===u&&P.flipTarget()),E=!1,m&&m()):(y.stop(),p&&p()))})),y.start()),{stop:()=>{null==d||d(),y.stop()}}}function le(e,t){return t?e*(1e3/t):0}const se=e=>180*e/Math.PI,ue=e=>e,ce=(e=ue)=>(t,n,r)=>{const a=n-r,o=-(0-t+1)*(0-e(Math.abs(a)));return a<=0?n+o:n-o},fe=ce(),de=ce(Math.sqrt),pe=e=>e*Math.PI/180,he=e=>e.hasOwnProperty("x")&&e.hasOwnProperty("y"),me=e=>he(e)&&e.hasOwnProperty("z"),ve=(e,t)=>Math.abs(e-t),ge=(e,t=2)=>(t=Math.pow(10,t),Math.round(e*t)/t),ye=(e,t,n,r=0)=>ge(e+n*(t-e)/Math.max(r,n)),be=(e,t)=>1-3*t+3*e,we=(e,t)=>3*t-6*e,xe=e=>3*e,Se=(e,t,n)=>((be(t,n)*e+we(t,n))*e+xe(t))*e,ke=(e,t,n)=>3*be(t,n)*e*e+2*we(t,n)*e+xe(t),Ee=.1;t.angle=(e,t=_)=>se(Math.atan2(t.y-e.y,t.x-e.x)),t.animate=ie,t.anticipate=K,t.applyOffset=(e,t)=>{let n=!0;return void 0===t&&(t=e,n=!1),r=>n?r-e+t:(e=r,n=!0,t)},t.attract=fe,t.attractExpo=de,t.backIn=q,t.backInOut=Q,t.backOut=X,t.bounceIn=J,t.bounceInOut=e=>e<.5?.5*(1-Z(1-2*e)):.5*Z(2*e-1)+.5,t.bounceOut=Z,t.circIn=W,t.circInOut=G,t.circOut=Y,t.clamp=u,t.createAnticipate=F,t.createAttractor=ce,t.createBackIn=N,t.createExpoIn=V,t.cubicBezier=function(e,t,n,r){if(e===t&&n===r)return B;const a=new Float32Array(11);for(let t=0;t<11;++t)a[t]=Se(t*Ee,e,n);return o=>0===o||1===o?o:Se(function(t){let r=0,o=1;for(;10!==o&&a[o]<=t;++o)r+=Ee;--o;const i=r+(t-a[o])/(a[o+1]-a[o])*Ee,l=ke(i,e,n);return l>=.001?function(e,t,n,r){for(let a=0;a<8;++a){const a=ke(t,n,r);if(0===a)return t;t-=(Se(t,n,r)-e)/a}return t}(t,i,e,n):0===l?i:function(e,t,n,r,a){let o,i,l=0;do{i=t+(n-t)/2,o=Se(i,r,a)-e,o>0?n=i:t=i}while(Math.abs(o)>1e-7&&++l<10);return i}(t,r,r+Ee,e,n)}(o),t,r)},t.decay=ne,t.degreesToRadians=pe,t.distance=function(e,t){if(C(e)&&C(t))return ve(e,t);if(he(e)&&he(t)){const n=ve(e.x,t.x),r=ve(e.y,t.y),a=me(e)&&me(t)?ve(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(a,2))}},t.easeIn=U,t.easeInOut=$,t.easeOut=H,t.inertia=function({from:e=0,velocity:t=0,min:n,max:r,power:a=.8,timeConstant:o=750,bounceStiffness:l=500,bounceDamping:s=10,restDelta:u=1,modifyTarget:c,driver:f,onUpdate:d,onComplete:p,onStop:h}){let m;function v(e){return void 0!==n&&e<n||void 0!==r&&e>r}function g(e){return void 0===n?r:void 0===r||Math.abs(n-e)<Math.abs(r-e)?n:r}function y(e){null==m||m.stop(),m=ie(Object.assign(Object.assign({},e),{driver:f,onUpdate:t=>{var n;null==d||d(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:p,onStop:h}))}function b(e){y(Object.assign({type:"spring",stiffness:l,damping:s,restDelta:u},e))}if(v(e))b({from:e,velocity:t,to:g(e)});else{let r=a*t+e;void 0!==c&&(r=c(r));const l=g(r),s=l===n?-1:1;let f,d;const p=e=>{f=d,d=e,t=le(e-f,i.getFrameData().delta),(1===s&&e>l||-1===s&&e<l)&&b({from:e,to:l,velocity:t})};y({type:"decay",from:e,velocity:t,timeConstant:o,power:a,restDelta:u,modifyTarget:c,onUpdate:v(r)?p:void 0})}return{stop:()=>null==m?void 0:m.stop()}},t.interpolate=D,t.isPoint=he,t.isPoint3D=me,t.keyframes=te,t.linear=B,t.mirrorEasing=j,t.mix=g,t.mixColor=E,t.mixComplex=L,t.pipe=T,t.pointFromVector=(e,t,n)=>(t=pe(t),{x:n*Math.cos(t)+e.x,y:n*Math.sin(t)+e.y}),t.progress=v,t.radiansToDegrees=se,t.reverseEasing=z,t.smooth=(e=50)=>{let t=0,n=0;return r=>{const a=i.getFrameData().timestamp,o=a!==n?a-n:0,l=o?ye(t,r,o,e):t;return n=a,t=l,l}},t.smoothFrame=ye,t.snap=e=>{if("number"==typeof e)return t=>Math.round(t/e)*e;{let t=0;const n=e.length;return r=>{let a=Math.abs(e[0]-r);for(t=1;t<n;t++){const o=e[t],i=Math.abs(o-r);if(0===i)return o;if(i>a)return e[t-1];if(t===n-1)return o;a=i}}}},t.spring=h,t.steps=(e,t="end")=>n=>{const r=(n="end"===t?Math.min(n,.999):Math.max(n,.001))*e,a="end"===t?Math.floor(r):Math.ceil(r);return u(0,1,a/e)},t.toDecimal=ge,t.velocityPerFrame=function(e,t){return e/(1e3/t)},t.velocityPerSecond=le,t.wrap=(e,t,n)=>{const r=t-e;return((n-e)%r+r)%r+e}},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),S=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),P=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),M=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var L=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var I=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}var z,j=Object.assign;function V(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var N=!1;function F(e,t){if(!e||N)return"";N=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{N=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function B(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case _:return"Profiler";case E:return"StrictMode";case A:return"Suspense";case M:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function X(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){K(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,ke=null,Ee=null;function _e(e){if(e=ba(e)){if("function"!=typeof Se)throw Error(o(280));var t=e.stateNode;t&&(t=xa(t),Se(e.stateNode,e.type,t))}}function Ce(e){ke?Ee?Ee.push(e):Ee=[e]:ke=e}function Pe(){if(ke){var e=ke,t=Ee;if(Ee=ke=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Te(e,t){return e(t)}function Ae(){}var Me=!1;function Oe(e,t,n){if(Me)return e(t,n);Me=!0;try{return Te(e,t,n)}finally{Me=!1,(null!==ke||null!==Ee)&&(Ae(),Pe())}}function Re(e,t){var n=e.stateNode;if(null===n)return null;var r=xa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Le=!1;if(c)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){Le=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(ce){Le=!1}function De(e,t,n,r,a,o,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var ze=!1,je=null,Ve=!1,Ne=null,Fe={onError:function(e){ze=!0,je=e}};function Be(e,t,n,r,a,o,i,l,s){ze=!1,je=null,De.apply(Fe,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ue(e)!==e)throw Error(o(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return $e(a),e;if(i===r)return $e(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Ge=a.unstable_scheduleCallback,qe=a.unstable_cancelCallback,Xe=a.unstable_shouldYield,Qe=a.unstable_requestPaint,Ke=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=ft(l):0!=(o&=i)&&(r=ft(o))}else 0!=(i=n&~a)?r=ft(i):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,St,kt,Et,_t,Ct=!1,Pt=[],Tt=null,At=null,Mt=null,Ot=new Map,Rt=new Map,Lt=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":At=null;break;case"mouseover":case"mouseout":Mt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function zt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function jt(e){var t=ya(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void _t(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Nt(e,t,n){Vt(e)&&n.delete(t)}function Ft(){Ct=!1,null!==Tt&&Vt(Tt)&&(Tt=null),null!==At&&Vt(At)&&(At=null),null!==Mt&&Vt(Mt)&&(Mt=null),Ot.forEach(Nt),Rt.forEach(Nt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Ft)))}function Ut(e){function t(t){return Bt(t,e)}if(0<Pt.length){Bt(Pt[0],e);for(var n=1;n<Pt.length;n++){var r=Pt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&Bt(Tt,e),null!==At&&Bt(At,e),null!==Mt&&Bt(Mt,e),Ot.forEach(t),Rt.forEach(t),n=0;n<Lt.length;n++)(r=Lt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Lt.length&&null===(n=Lt[0]).blockedOn;)jt(n),null===n.blockedOn&&Lt.shift()}var Ht=w.ReactCurrentBatchConfig,$t=!0;function Wt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=1,Gt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Yt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=4,Gt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Gt(e,t,n,r){if($t){var a=Xt(e,t,n,r);if(null===a)$r(e,t,r,qt,n),Dt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Tt=zt(Tt,e,t,n,r,a),!0;case"dragenter":return At=zt(At,e,t,n,r,a),!0;case"mouseover":return Mt=zt(Mt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Ot.set(o,zt(Ot.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Rt.set(o,zt(Rt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<It.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&xt(o),null===(o=Xt(e,t,n,r))&&$r(e,t,r,qt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else $r(e,t,r,null,n)}}var qt=null;function Xt(e,t,n,r){if(qt=null,null!==(e=ya(e=xe(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Kt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,a="value"in Kt?Kt.value:Kt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),fn=j({},un,{view:0,detail:0}),dn=an(fn),pn=j({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(on=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=on=0,sn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(j({},pn,{dataTransfer:0})),vn=an(j({},fn,{relatedTarget:0})),gn=an(j({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=j({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),wn=an(j({},un,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function _n(){return En}var Cn=j({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=an(Cn),Tn=an(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),An=an(j({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Mn=an(j({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=an(On),Ln=[9,13,27,32],In=c&&"CompositionEvent"in window,Dn=null;c&&"documentMode"in document&&(Dn=document.documentMode);var zn=c&&"TextEvent"in window&&!Dn,jn=c&&(!In||Dn&&8<Dn&&11>=Dn),Vn=String.fromCharCode(32),Nn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,r){Ce(r),0<(t=Yr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Gn=null;function qn(e){Vr(e,0)}function Xn(e){if(G(wa(e)))return e}function Qn(e,t){if("change"===e)return t}var Kn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Kn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Gn=Yn=null)}function nr(e){if("value"===e.propertyName&&Xn(Gn)){var t=[];Wn(t,Gn,e,xe(e)),Oe(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn(Gn)}function or(e,t){if("click"===e)return Xn(t)}function ir(e,t){if("input"===e||"change"===e)return Xn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==q(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Yr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},kr={},Er={};function _r(e){if(kr[e])return kr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return kr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Cr=_r("animationend"),Pr=_r("animationiteration"),Tr=_r("animationstart"),Ar=_r("transitionend"),Mr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rr(e,t){Mr.set(e,t),s(t,[e])}for(var Lr=0;Lr<Or.length;Lr++){var Ir=Or[Lr];Rr(Ir.toLowerCase(),"on"+(Ir[0].toUpperCase()+Ir.slice(1)))}Rr(Cr,"onAnimationEnd"),Rr(Pr,"onAnimationIteration"),Rr(Tr,"onAnimationStart"),Rr("dblclick","onDoubleClick"),Rr("focusin","onFocus"),Rr("focusout","onBlur"),Rr(Ar,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,s,u){if(Be.apply(this,arguments),ze){if(!ze)throw Error(o(198));var c=je;ze=!1,je=null,Ve||(Ve=!0,Ne=c)}}(r,t,void 0,e),e.currentTarget=null}function Vr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;jr(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;jr(a,l,u),o=s}}}if(Ve)throw e=Ne,Ve=!1,Ne=null,e}function Nr(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Br]){e[Br]=!0,i.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Fr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Qt(t)){case 1:var a=Wt;break;case 4:a=Yt;break;default:a=Gt}n=a.bind(null,t,n,e),a=void 0,!Le||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(s=i.tag)||6===s){r=o=i;continue e}l=l.parentNode}}r=r.return}Oe((function(){var r=o,a=xe(n),i=[];e:{var l=Mr.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=Pn;break;case"focusin":u="focus",s=vn;break;case"focusout":u="blur",s=vn;break;case"beforeblur":case"afterblur":s=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=An;break;case Cr:case Pr:case Tr:s=gn;break;case Ar:s=Mn;break;case"scroll":s=dn;break;case"wheel":s=Rn;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Tn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Re(h,d))&&c.push(Wr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(u=n.relatedTarget||n.fromElement)||!ya(u)&&!u[ha])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ya(u):null)&&(u!==(f=Ue(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==s?l:wa(s),p=null==u?l:wa(u),(l=new c(m,h+"leave",s,n,a)).target=f,l.relatedTarget=p,m=null,ya(a)===r&&((c=new c(d,h+"enter",u,n,a)).target=p,c.relatedTarget=f,m=c),f=m,s&&u)e:{for(d=u,h=0,p=c=s;p;p=Gr(p))h++;for(p=0,m=d;m;m=Gr(m))p++;for(;0<h-p;)c=Gr(c),h--;for(;0<p-h;)d=Gr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Gr(c),d=Gr(d)}c=null}else c=null;null!==s&&qr(i,l,s,c,!1),null!==u&&null!==f&&qr(i,f,u,c,!0)}if("select"===(s=(l=r?wa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var v=Qn;else if($n(l))if(Kn)v=ir;else{v=ar;var g=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=or);switch(v&&(v=v(e,r))?Wn(i,v,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=r?wa(r):window,e){case"focusin":($n(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,a)}var y;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(y=en()):(Zt="value"in(Kt=a)?Kt.value:Kt.textContent,Un=!0)),0<(g=Yr(r,b)).length&&(b=new wn(b,e,null,n,a),i.push({event:b,listeners:g}),(y||null!==(y=Bn(n)))&&(b.data=y))),(y=zn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Nn=!0,Vn);case"textInput":return(e=t.data)===Vn&&Nn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!In&&Fn(e,t)?(e=en(),Jt=Zt=Kt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Vr(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Re(e,n))&&r.unshift(Wr(e,o,a)),null!=(o=Re(e,t))&&r.push(Wr(e,o,a))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=Re(n,o))&&i.unshift(Wr(n,s,l)):a||null!=(s=Re(n,o))&&i.push(Wr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Xr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Xr,"\n").replace(Qr,"")}function Zr(e,t,n){if(t=Kr(t),Kr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function sa(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ha="__reactContainer$"+fa,ma="__reactEvents$"+fa,va="__reactListeners$"+fa,ga="__reactHandles$"+fa;function ya(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xa(e){return e[pa]||null}var Sa=[],ka=-1;function Ea(e){return{current:e}}function _a(e){0>ka||(e.current=Sa[ka],Sa[ka]=null,ka--)}function Ca(e,t){ka++,Sa[ka]=e.current,e.current=t}var Pa={},Ta=Ea(Pa),Aa=Ea(!1),Ma=Pa;function Oa(e,t){var n=e.type.contextTypes;if(!n)return Pa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ra(e){return null!=e.childContextTypes}function La(){_a(Aa),_a(Ta)}function Ia(e,t,n){if(Ta.current!==Pa)throw Error(o(168));Ca(Ta,t),Ca(Aa,n)}function Da(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,H(e)||"Unknown",a));return j({},n,r)}function za(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Pa,Ma=Ta.current,Ca(Ta,e),Ca(Aa,Aa.current),!0}function ja(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Da(e,t,Ma),r.__reactInternalMemoizedMergedChildContext=e,_a(Aa),_a(Ta),Ca(Ta,e)):_a(Aa),Ca(Aa,n)}var Va=null,Na=!1,Fa=!1;function Ba(e){null===Va?Va=[e]:Va.push(e)}function Ua(){if(!Fa&&null!==Va){Fa=!0;var e=0,t=bt;try{var n=Va;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Va=null,Na=!1}catch(t){throw null!==Va&&(Va=Va.slice(e+1)),Ge(Je,Ua),t}finally{bt=t,Fa=!1}}return null}var Ha=w.ReactCurrentBatchConfig;function $a(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Wa=Ea(null),Ya=null,Ga=null,qa=null;function Xa(){qa=Ga=Ya=null}function Qa(e){var t=Wa.current;_a(Wa),e._currentValue=t}function Ka(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Za(e,t){Ya=e,qa=Ga=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(xl=!0),e.firstContext=null)}function Ja(e){var t=e._currentValue;if(qa!==e)if(e={context:e,memoizedValue:t,next:null},null===Ga){if(null===Ya)throw Error(o(308));Ga=e,Ya.dependencies={lanes:0,firstContext:e}}else Ga=Ga.next=e;return t}var eo=null,to=!1;function no(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ao(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function oo(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,tu(e)?(null===(e=n.interleaved)?(t.next=t,null===eo?eo=[n]:eo.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function io(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function so(e,t,n,r){var a=e.updateQueue;to=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?o=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==o){var f=a.baseState;for(i=0,c=u=s=null,l=o;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=j({},f,d);break e;case 2:to=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(d=l).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(s=f),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Ls|=i,e.lanes=i,e.memoizedState=f}}function uo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var co=(new r.Component).refs;function fo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ks(),a=Zs(e),o=ao(r,a);o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Js(e,a,r))&&io(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ks(),a=Zs(e),o=ao(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Js(e,a,r))&&io(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ks(),r=Zs(e),a=ao(n,r);a.tag=2,null!=t&&(a.callback=t),oo(e,a),null!==(t=Js(e,r,n))&&io(t,e,r)}};function ho(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,o))}function mo(e,t,n){var r=!1,a=Pa,o=t.contextType;return"object"==typeof o&&null!==o?o=Ja(o):(a=Ra(t)?Ma:Ta.current,o=(r=null!=(r=t.contextTypes))?Oa(e,a):Pa),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function vo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function go(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=co,no(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Ja(o):(o=Ra(t)?Ma:Ta.current,a.context=Oa(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(fo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&po.enqueueReplaceState(a,a.state,null),so(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var yo=[],bo=0,wo=null,xo=0,So=[],ko=0,Eo=null,_o=1,Co="";function Po(e,t){yo[bo++]=xo,yo[bo++]=wo,wo=e,xo=t}function To(e,t,n){So[ko++]=_o,So[ko++]=Co,So[ko++]=Eo,Eo=e;var r=_o;e=Co;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,_o=1<<32-it(t)+a|n<<a|r,Co=o+e}else _o=1<<o|n<<a|r,Co=e}function Ao(e){null!==e.return&&(Po(e,1),To(e,1,0))}function Mo(e){for(;e===wo;)wo=yo[--bo],yo[bo]=null,xo=yo[--bo],yo[bo]=null;for(;e===Eo;)Eo=So[--ko],So[ko]=null,Co=So[--ko],So[ko]=null,_o=So[--ko],So[ko]=null}var Oo=null,Ro=null,Lo=!1,Io=null;function Do(e,t){var n=Mu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function zo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,Oo=e,Ro=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,Oo=e,Ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Eo?{id:_o,overflow:Co}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Mu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,Oo=e,Ro=null,!0);default:return!1}}function jo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Vo(e){if(Lo){var t=Ro;if(t){var n=t;if(!zo(e,t)){if(jo(e))throw Error(o(418));t=ua(n.nextSibling);var r=Oo;t&&zo(e,t)?Do(r,n):(e.flags=-4097&e.flags|2,Lo=!1,Oo=e)}}else{if(jo(e))throw Error(o(418));e.flags=-4097&e.flags|2,Lo=!1,Oo=e}}}function No(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Oo=e}function Fo(e){if(e!==Oo)return!1;if(!Lo)return No(e),Lo=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=Ro)){if(jo(e)){for(e=Ro;e;)e=ua(e.nextSibling);throw Error(o(418))}for(;t;)Do(e,t),t=ua(t.nextSibling)}if(No(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ro=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ro=null}}else Ro=Oo?ua(e.stateNode.nextSibling):null;return!0}function Bo(){Ro=Oo=null,Lo=!1}function Uo(e){null===Io?Io=[e]:Io.push(e)}function Ho(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===co&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function $o(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Wo(e){return(0,e._init)(e._payload)}function Yo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ru(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=zu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===R&&Wo(o)===t.type)?((r=a(t,n.props)).ref=Ho(e,t,n),r.return=e,r):((r=Lu(n.type,n.key,n.props,null,e.mode,r)).ref=Ho(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ju(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Iu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=zu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Lu(t.type,t.key,t.props,null,e.mode,n)).ref=Ho(e,null,t),n.return=e,n;case S:return(t=ju(t,e.mode,n)).return=e,t;case R:return d(e,(0,t._init)(t._payload),n)}if(te(t)||D(t))return(t=Iu(t,e.mode,n,null)).return=e,t;$o(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===a?u(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null;case R:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||D(n))return null!==a?null:f(e,t,n,r,null);$o(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case R:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||D(r))return f(t,e=e.get(n)||null,r,a,null);$o(t,r)}return null}function m(a,o,l,s){for(var u=null,c=null,f=o,m=o=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(a,f,l[m],s);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(a,f),o=i(g,o,m),null===c?u=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(a,f),Lo&&Po(a,m),u;if(null===f){for(;m<l.length;m++)null!==(f=d(a,l[m],s))&&(o=i(f,o,m),null===c?u=f:c.sibling=f,c=f);return Lo&&Po(a,m),u}for(f=r(a,f);m<l.length;m++)null!==(v=h(f,a,m,l[m],s))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),o=i(v,o,m),null===c?u=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(a,e)})),Lo&&Po(a,m),u}function v(a,l,s,u){var c=D(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var f=c=null,m=l,v=l=0,g=null,y=s.next();null!==m&&!y.done;v++,y=s.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),l=i(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(a,m),Lo&&Po(a,v),c;if(null===m){for(;!y.done;v++,y=s.next())null!==(y=d(a,y.value,u))&&(l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return Lo&&Po(a,v),c}for(m=r(a,m);!y.done;v++,y=s.next())null!==(y=h(m,a,v,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(a,e)})),Lo&&Po(a,v),c}return function e(r,o,i,s){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var u=i.key,c=o;null!==c;){if(c.key===u){if((u=i.type)===k){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===R&&Wo(u)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=Ho(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===k?((o=Iu(i.props.children,r.mode,s,i.key)).return=r,r=o):((s=Lu(i.type,i.key,i.props,null,r.mode,s)).ref=Ho(r,o,i),s.return=r,r=s)}return l(r);case S:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=ju(i,r.mode,s)).return=r,r=o}return l(r);case R:return e(r,o,(c=i._init)(i._payload),s)}if(te(i))return m(r,o,i,s);if(D(i))return v(r,o,i,s);$o(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=zu(i,r.mode,s)).return=r,r=o),l(r)):n(r,o)}}var Go=Yo(!0),qo=Yo(!1),Xo={},Qo=Ea(Xo),Ko=Ea(Xo),Zo=Ea(Xo);function Jo(e){if(e===Xo)throw Error(o(174));return e}function ei(e,t){switch(Ca(Zo,t),Ca(Ko,e),Ca(Qo,Xo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_a(Qo),Ca(Qo,t)}function ti(){_a(Qo),_a(Ko),_a(Zo)}function ni(e){Jo(Zo.current);var t=Jo(Qo.current),n=se(t,e.type);t!==n&&(Ca(Ko,e),Ca(Qo,n))}function ri(e){Ko.current===e&&(_a(Qo),_a(Ko))}var ai=Ea(0);function oi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ii=[];function li(){for(var e=0;e<ii.length;e++)ii[e]._workInProgressVersionPrimary=null;ii.length=0}var si=w.ReactCurrentDispatcher,ui=w.ReactCurrentBatchConfig,ci=0,fi=null,di=null,pi=null,hi=!1,mi=!1,vi=0,gi=0;function yi(){throw Error(o(321))}function bi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function wi(e,t,n,r,a,i){if(ci=i,fi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,si.current=null===e||null===e.memoizedState?rl:al,e=n(r,a),mi){i=0;do{if(mi=!1,vi=0,25<=i)throw Error(o(301));i+=1,pi=di=null,t.updateQueue=null,si.current=ol,e=n(r,a)}while(mi)}if(si.current=nl,t=null!==di&&null!==di.next,ci=0,pi=di=fi=null,hi=!1,t)throw Error(o(300));return e}function xi(){var e=0!==vi;return vi=0,e}function Si(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===pi?fi.memoizedState=pi=e:pi=pi.next=e,pi}function ki(){if(null===di){var e=fi.alternate;e=null!==e?e.memoizedState:null}else e=di.next;var t=null===pi?fi.memoizedState:pi.next;if(null!==t)pi=t,di=e;else{if(null===e)throw Error(o(310));e={memoizedState:(di=e).memoizedState,baseState:di.baseState,baseQueue:di.baseQueue,queue:di.queue,next:null},null===pi?fi.memoizedState=pi=e:pi=pi.next=e}return pi}function Ei(e,t){return"function"==typeof t?t(e):t}function _i(e){var t=ki(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=di,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=l=null,u=null,c=i;do{var f=c.lane;if((ci&f)===f)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=d,l=r):u=u.next=d,fi.lanes|=f,Ls|=f}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(xl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,fi.lanes|=i,Ls|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ci(e){var t=ki(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(xl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Pi(){}function Ti(e,t){var n=fi,r=ki(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,xl=!0),r=r.queue,Ni(Oi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==pi&&1&pi.memoizedState.tag){if(n.flags|=2048,Ii(9,Mi.bind(null,n,r,a,t),void 0,null),null===Cs)throw Error(o(349));0!=(30&ci)||Ai(n,t,a)}return a}function Ai(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Mi(e,t,n,r){t.value=n,t.getSnapshot=r,Ri(t)&&Js(e,1,-1)}function Oi(e,t,n){return n((function(){Ri(t)&&Js(e,1,-1)}))}function Ri(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Li(e){var t=Si();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ei,lastRenderedState:e},t.queue=e,e=e.dispatch=Ki.bind(null,fi,e),[t.memoizedState,e]}function Ii(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Di(){return ki().memoizedState}function zi(e,t,n,r){var a=Si();fi.flags|=e,a.memoizedState=Ii(1|t,n,void 0,void 0===r?null:r)}function ji(e,t,n,r){var a=ki();r=void 0===r?null:r;var o=void 0;if(null!==di){var i=di.memoizedState;if(o=i.destroy,null!==r&&bi(r,i.deps))return void(a.memoizedState=Ii(t,n,o,r))}fi.flags|=e,a.memoizedState=Ii(1|t,n,o,r)}function Vi(e,t){return zi(8390656,8,e,t)}function Ni(e,t){return ji(2048,8,e,t)}function Fi(e,t){return ji(4,2,e,t)}function Bi(e,t){return ji(4,4,e,t)}function Ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Hi(e,t,n){return n=null!=n?n.concat([e]):null,ji(4,4,Ui.bind(null,t,e),n)}function $i(){}function Wi(e,t){var n=ki();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Yi(e,t){var n=ki();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Gi(e,t,n){return 0==(21&ci)?(e.baseState&&(e.baseState=!1,xl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),fi.lanes|=n,Ls|=n,e.baseState=!0),t)}function qi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ui.transition;ui.transition={};try{e(!1),t()}finally{bt=n,ui.transition=r}}function Xi(){return ki().memoizedState}function Qi(e,t,n){var r=Zs(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Zi(e)?Ji(t,n):(el(e,t,n),null!==(e=Js(e,r,n=Ks()))&&tl(e,t,r))}function Ki(e,t,n){var r=Zs(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zi(e))Ji(t,a);else{el(e,t,a);var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i))return}catch(e){}null!==(e=Js(e,r,n=Ks()))&&tl(e,t,r)}}function Zi(e){var t=e.alternate;return e===fi||null!==t&&t===fi}function Ji(e,t){mi=hi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function el(e,t,n){tu(e)?(null===(e=t.interleaved)?(n.next=n,null===eo?eo=[t]:eo.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function tl(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var nl={readContext:Ja,useCallback:yi,useContext:yi,useEffect:yi,useImperativeHandle:yi,useInsertionEffect:yi,useLayoutEffect:yi,useMemo:yi,useReducer:yi,useRef:yi,useState:yi,useDebugValue:yi,useDeferredValue:yi,useTransition:yi,useMutableSource:yi,useSyncExternalStore:yi,useId:yi,unstable_isNewReconciler:!1},rl={readContext:Ja,useCallback:function(e,t){return Si().memoizedState=[e,void 0===t?null:t],e},useContext:Ja,useEffect:Vi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,zi(4194308,4,Ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return zi(4194308,4,e,t)},useInsertionEffect:function(e,t){return zi(4,2,e,t)},useMemo:function(e,t){var n=Si();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Si();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Qi.bind(null,fi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Si().memoizedState=e},useState:Li,useDebugValue:$i,useDeferredValue:function(e){return Si().memoizedState=e},useTransition:function(){var e=Li(!1),t=e[0];return e=qi.bind(null,e[1]),Si().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=fi,a=Si();if(Lo){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Cs)throw Error(o(349));0!=(30&ci)||Ai(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Vi(Oi.bind(null,r,i,e),[e]),r.flags|=2048,Ii(9,Mi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Si(),t=Cs.identifierPrefix;if(Lo){var n=Co;t=":"+t+"R"+(n=(_o&~(1<<32-it(_o)-1)).toString(32)+n),0<(n=vi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=gi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},al={readContext:Ja,useCallback:Wi,useContext:Ja,useEffect:Ni,useImperativeHandle:Hi,useInsertionEffect:Fi,useLayoutEffect:Bi,useMemo:Yi,useReducer:_i,useRef:Di,useState:function(){return _i(Ei)},useDebugValue:$i,useDeferredValue:function(e){return Gi(ki(),di.memoizedState,e)},useTransition:function(){return[_i(Ei)[0],ki().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Ti,useId:Xi,unstable_isNewReconciler:!1},ol={readContext:Ja,useCallback:Wi,useContext:Ja,useEffect:Ni,useImperativeHandle:Hi,useInsertionEffect:Fi,useLayoutEffect:Bi,useMemo:Yi,useReducer:Ci,useRef:Di,useState:function(){return Ci(Ei)},useDebugValue:$i,useDeferredValue:function(e){var t=ki();return null===di?t.memoizedState=e:Gi(t,di.memoizedState,e)},useTransition:function(){return[Ci(Ei)[0],ki().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Ti,useId:Xi,unstable_isNewReconciler:!1};function il(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var sl,ul,cl,fl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,n){(n=ao(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bs||(Bs=!0,Us=r),ll(0,t)},n}function pl(e,t,n){(n=ao(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ll(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ll(0,t),"function"!=typeof r&&(null===Hs?Hs=new Set([this]):Hs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function hl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Eu.bind(null,e,t,n),t.then(e,e))}function ml(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ao(-1,1)).tag=2,oo(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function gl(e,t){if(!Lo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function bl(e,t,n){var r=t.pendingProps;switch(Mo(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return yl(t),null;case 1:case 17:return Ra(t.type)&&La(),yl(t),null;case 3:return r=t.stateNode,ti(),_a(Aa),_a(Ta),li(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Io&&(ou(Io),Io=null))),yl(t),null;case 5:ri(t);var a=Jo(Zo.current);if(n=t.type,null!==e&&null!=t.stateNode)ul(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return yl(t),null}if(e=Jo(Qo.current),Fo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[da]=t,r[pa]=i,e=0!=(1&t.mode),n){case"dialog":Nr("cancel",r),Nr("close",r);break;case"iframe":case"object":case"embed":Nr("load",r);break;case"video":case"audio":for(a=0;a<Dr.length;a++)Nr(Dr[a],r);break;case"source":Nr("error",r);break;case"img":case"image":case"link":Nr("error",r),Nr("load",r);break;case"details":Nr("toggle",r);break;case"input":Q(r,i),Nr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Nr("invalid",r);break;case"textarea":ae(r,i),Nr("invalid",r)}for(var s in ye(n,i),a=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),a=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&Nr("scroll",r)}switch(n){case"input":Y(r),J(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[da]=t,e[pa]=r,sl(e,t),t.stateNode=e;e:{switch(s=be(n,r),n){case"dialog":Nr("cancel",e),Nr("close",e),a=r;break;case"iframe":case"object":case"embed":Nr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Dr.length;a++)Nr(Dr[a],e);a=r;break;case"source":Nr("error",e),a=r;break;case"img":case"image":case"link":Nr("error",e),Nr("load",e),a=r;break;case"details":Nr("toggle",e),a=r;break;case"input":Q(e,r),a=X(e,r),Nr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=j({},r,{value:void 0}),Nr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Nr("invalid",e)}for(i in ye(n,a),u=a)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?ve(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Nr("scroll",e):null!=c&&b(e,i,c,s))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return yl(t),null;case 6:if(e&&null!=t.stateNode)cl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Jo(Zo.current),Jo(Qo.current),Fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(i=r.nodeValue!==n)&&null!==(e=Oo))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return yl(t),null;case 13:if(_a(ai),r=t.memoizedState,Lo&&null!==Ro&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Ro;r;)r=ua(r.nextSibling);return Bo(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Fo(t),null===e){if(!r)throw Error(o(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(o(317));r[da]=t}else Bo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return yl(t),null}return null!==Io&&(ou(Io),Io=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Fo(t):n=null!==e.memoizedState,r!==n&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ai.current)?0===Os&&(Os=3):hu())),null!==t.updateQueue&&(t.flags|=4),yl(t),null);case 4:return ti(),null===e&&Ur(t.stateNode.containerInfo),yl(t),null;case 10:return Qa(t.type._context),yl(t),null;case 19:if(_a(ai),null===(i=t.memoizedState))return yl(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)gl(i,!1);else{if(0!==Os||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=oi(e))){for(t.flags|=128,gl(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ca(ai,1&ai.current|2),t.child}e=e.sibling}null!==i.tail&&Ke()>Ns&&(t.flags|=128,r=!0,gl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=oi(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),gl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!Lo)return yl(t),null}else 2*Ke()-i.renderingStartTime>Ns&&1073741824!==n&&(t.flags|=128,r=!0,gl(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ke(),t.sibling=null,n=ai.current,Ca(ai,r?1&n|2:1&n),t):(yl(t),null);case 22:case 23:return cu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&As)&&(yl(t),6&t.subtreeFlags&&(t.flags|=8192)):yl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}sl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ul=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Jo(Qo.current);var o,i=null;switch(n){case"input":a=X(e,a),r=X(e,r),i=[];break;case"select":a=j({},a,{value:void 0}),r=j({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var s=a[c];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(o in s)!s.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&s[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Nr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},cl=function(e,t,n,r){n!==r&&(t.flags|=4)};var wl=w.ReactCurrentOwner,xl=!1;function Sl(e,t,n,r){t.child=null===e?qo(t,null,n,r):Go(t,e.child,n,r)}function kl(e,t,n,r,a){n=n.render;var o=t.ref;return Za(t,a),r=wi(e,t,n,r,o,a),n=xi(),null===e||xl?(Lo&&n&&Ao(t),t.flags|=1,Sl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$l(e,t,a))}function El(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ou(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Lu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,_l(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)return $l(e,t,a)}return t.flags|=1,(e=Ru(o,r)).ref=t.ref,e.return=t,t.child=e}function _l(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===t.ref){if(xl=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,$l(e,t,a);0!=(131072&e.flags)&&(xl=!0)}}return Tl(e,t,n,r,a)}function Cl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ca(Ms,As),As|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ca(Ms,As),As|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Ca(Ms,As),As|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ca(Ms,As),As|=r;return Sl(e,t,a,n),t.child}function Pl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Tl(e,t,n,r,a){var o=Ra(n)?Ma:Ta.current;return o=Oa(t,o),Za(t,a),n=wi(e,t,n,r,o,a),r=xi(),null===e||xl?(Lo&&r&&Ao(t),t.flags|=1,Sl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$l(e,t,a))}function Al(e,t,n,r,a){if(Ra(n)){var o=!0;za(t)}else o=!1;if(Za(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mo(t,n,r),go(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?Ja(u):Oa(t,u=Ra(n)?Ma:Ta.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&vo(t,i,r,u),to=!1;var d=t.memoizedState;i.state=d,so(t,r,i,a),s=t.memoizedState,l!==r||d!==s||Aa.current||to?("function"==typeof c&&(fo(t,n,c,r),s=t.memoizedState),(l=to||ho(t,n,l,r,d,s,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,ro(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:$a(t.type,l),i.props=u,f=t.pendingProps,d=i.context,s="object"==typeof(s=n.contextType)&&null!==s?Ja(s):Oa(t,s=Ra(n)?Ma:Ta.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==s)&&vo(t,i,r,s),to=!1,d=t.memoizedState,i.state=d,so(t,r,i,a);var h=t.memoizedState;l!==f||d!==h||Aa.current||to?("function"==typeof p&&(fo(t,n,p,r),h=t.memoizedState),(u=to||ho(t,n,u,r,d,h,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ml(e,t,n,r,o,a)}function Ml(e,t,n,r,a,o){Pl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&ja(t,n,!1),$l(e,t,o);r=t.stateNode,wl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Go(t,e.child,null,o),t.child=Go(t,null,l,o)):Sl(e,t,l,o),t.memoizedState=r.state,a&&ja(t,n,!0),t.child}function Ol(e){var t=e.stateNode;t.pendingContext?Ia(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ia(0,t.context,!1),ei(e,t.containerInfo)}function Rl(e,t,n,r,a){return Bo(),Uo(a),t.flags|=256,Sl(e,t,n,r),t.child}var Ll={dehydrated:null,treeContext:null,retryLane:0};function Il(e){return{baseLanes:e,cachePool:null,transitions:null}}function Dl(e,t){return{baseLanes:e.baseLanes|t,cachePool:null,transitions:e.transitions}}function zl(e,t,n){var r,a=t.pendingProps,i=ai.current,l=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ca(ai,1&i),null===e)return Vo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,l?(a=t.mode,l=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=i):l=Du(i,a,0,null),e=Iu(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Il(n),t.memoizedState=Ll,e):jl(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(s)return 256&t.flags?(t.flags&=-257,Fl(e,t,n,Error(o(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=a.fallback,i=t.mode,a=Du({mode:"visible",children:a.children},i,0,null),(l=Iu(l,i,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,0!=(1&t.mode)&&Go(t,e.child,null,n),t.child.memoizedState=Il(n),t.memoizedState=Ll,l);if(0==(1&t.mode))t=Fl(e,t,n,null);else if("$!"===r.data)t=Fl(e,t,n,Error(o(419)));else if(a=0!=(n&e.childLanes),xl||a){if(null!==(a=Cs)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(a=0!=(l&(a.suspendedLanes|n))?0:l)&&a!==i.retryLane&&(i.retryLane=a,Js(e,a,-1))}hu(),t=Fl(e,t,n,Error(o(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=Cu.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,Ro=ua(r.nextSibling),Oo=t,Lo=!0,Io=null,null!==n&&(So[ko++]=_o,So[ko++]=Co,So[ko++]=Eo,_o=n.id,Co=n.overflow,Eo=t),(t=jl(t,t.pendingProps.children)).flags|=4096);return t}return l?(a=Nl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?Il(n):Dl(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=Ll,a):(n=Vl(e,t,a.children,n),t.memoizedState=null,n)}return l?(a=Nl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?Il(n):Dl(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=Ll,a):(n=Vl(e,t,a.children,n),t.memoizedState=null,n)}function jl(e,t){return(t=Du({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Vl(e,t,n,r){var a=e.child;return e=a.sibling,n=Ru(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Nl(e,t,n,r,a){var o=t.mode,i=(e=e.child).sibling,l={mode:"hidden",children:n};return 0==(1&o)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=Ru(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=Ru(i,r):(r=Iu(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Fl(e,t,n,r){return null!==r&&Uo(r),Go(t,e.child,null,n),(e=jl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ka(e.return,t,n)}function Ul(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Hl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Sl(e,t,r.children,n),0!=(2&(r=ai.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bl(e,n,t);else if(19===e.tag)Bl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ca(ai,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===oi(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ul(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===oi(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ul(t,!0,n,null,o);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $l(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ls|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ru(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ru(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wl(e,t){switch(Mo(t),t.tag){case 1:return Ra(t.type)&&La(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ti(),_a(Aa),_a(Ta),li(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ri(t),null;case 13:if(_a(ai),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));Bo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _a(ai),null;case 4:return ti(),null;case 10:return Qa(t.type._context),null;case 22:case 23:return cu(),null;default:return null}}var Yl=!1,Gl=!1,ql="function"==typeof WeakSet?WeakSet:Set,Xl=null;function Ql(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ku(e,t,n)}else n.current=null}function Kl(e,t,n){try{n()}catch(n){ku(e,t,n)}}var Zl=!1;function Jl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&Kl(t,n,o)}a=a.next}while(a!==r)}}function es(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ts(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ns(e){var t=e.alternate;null!==t&&(e.alternate=null,ns(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ma],delete t[va],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function rs(e){return 5===e.tag||3===e.tag||4===e.tag}function as(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||rs(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function os(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(os(e,t,n),e=e.sibling;null!==e;)os(e,t,n),e=e.sibling}function is(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(is(e,t,n),e=e.sibling;null!==e;)is(e,t,n),e=e.sibling}var ls=null,ss=!1;function us(e,t,n){for(n=n.child;null!==n;)cs(e,t,n),n=n.sibling}function cs(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Gl||Ql(n,t);case 6:var r=ls,a=ss;ls=null,us(e,t,n),ss=a,null!==(ls=r)&&(ss?(e=ls,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ls.removeChild(n.stateNode));break;case 18:null!==ls&&(ss?(e=ls,n=n.stateNode,8===e.nodeType?sa(e.parentNode,n):1===e.nodeType&&sa(e,n),Ut(e)):sa(ls,n.stateNode));break;case 4:r=ls,a=ss,ls=n.stateNode.containerInfo,ss=!0,us(e,t,n),ls=r,ss=a;break;case 0:case 11:case 14:case 15:if(!Gl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&Kl(n,t,i),a=a.next}while(a!==r)}us(e,t,n);break;case 1:if(!Gl&&(Ql(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ku(n,t,e)}us(e,t,n);break;case 21:us(e,t,n);break;case 22:1&n.mode?(Gl=(r=Gl)||null!==n.memoizedState,us(e,t,n),Gl=r):us(e,t,n);break;default:us(e,t,n)}}function fs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ql),t.forEach((function(t){var r=Pu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ds(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:ls=s.stateNode,ss=!1;break e;case 3:case 4:ls=s.stateNode.containerInfo,ss=!0;break e}s=s.return}if(null===ls)throw Error(o(160));cs(i,l,a),ls=null,ss=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){ku(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ps(t,e),t=t.sibling}function ps(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ds(t,e),hs(e),4&r){try{Jl(3,e,e.return),es(3,e)}catch(t){ku(e,e.return,t)}try{Jl(5,e,e.return)}catch(t){ku(e,e.return,t)}}break;case 1:ds(t,e),hs(e),512&r&&null!==n&&Ql(n,n.return);break;case 5:if(ds(t,e),hs(e),512&r&&null!==n&&Ql(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){ku(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&K(a,i),be(s,l);var c=be(s,i);for(l=0;l<u.length;l+=2){var f=u[l],d=u[l+1];"style"===f?ve(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(s){case"input":Z(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(a,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){ku(e,e.return,t)}}break;case 6:if(ds(t,e),hs(e),4&r){if(null===e.stateNode)throw Error(o(162));c=e.stateNode,f=e.memoizedProps;try{c.nodeValue=f}catch(t){ku(e,e.return,t)}}break;case 3:if(ds(t,e),hs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){ku(e,e.return,t)}break;case 4:default:ds(t,e),hs(e);break;case 13:ds(t,e),hs(e),8192&(c=e.child).flags&&null!==c.memoizedState&&(null===c.alternate||null===c.alternate.memoizedState)&&(Vs=Ke()),4&r&&fs(e);break;case 22:if(c=null!==n&&null!==n.memoizedState,1&e.mode?(Gl=(f=Gl)||c,ds(t,e),Gl=f):ds(t,e),hs(e),8192&r){f=null!==e.memoizedState;e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,f?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=p.stateNode,l=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=me("display",l))}catch(t){ku(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=f?"":p.memoizedProps}catch(t){ku(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}if(f&&!c&&0!=(1&e.mode))for(Xl=e,e=e.child;null!==e;){for(c=Xl=e;null!==Xl;){switch(d=(f=Xl).child,f.tag){case 0:case 11:case 14:case 15:Jl(4,f,f.return);break;case 1:if(Ql(f,f.return),"function"==typeof(i=f.stateNode).componentWillUnmount){p=f,h=f.return;try{a=p,i.props=a.memoizedProps,i.state=a.memoizedState,i.componentWillUnmount()}catch(e){ku(p,h,e)}}break;case 5:Ql(f,f.return);break;case 22:if(null!==f.memoizedState){ys(c);continue}}null!==d?(d.return=f,Xl=d):ys(c)}e=e.sibling}}break;case 19:ds(t,e),hs(e),4&r&&fs(e);case 21:}}function hs(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(rs(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),is(e,as(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;os(e,as(e),i);break;default:throw Error(o(161))}}catch(t){ku(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ms(e,t,n){Xl=e,vs(e,t,n)}function vs(e,t,n){for(var r=0!=(1&e.mode);null!==Xl;){var a=Xl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Yl;if(!i){var l=a.alternate,s=null!==l&&null!==l.memoizedState||Gl;l=Yl;var u=Gl;if(Yl=i,(Gl=s)&&!u)for(Xl=a;null!==Xl;)s=(i=Xl).child,22===i.tag&&null!==i.memoizedState?bs(a):null!==s?(s.return=i,Xl=s):bs(a);for(;null!==o;)Xl=o,vs(o,t,n),o=o.sibling;Xl=a,Yl=l,Gl=u}gs(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Xl=o):gs(e)}}function gs(e){for(;null!==Xl;){var t=Xl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gl||es(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:$a(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&uo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}uo(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(o(163))}Gl||512&t.flags&&ts(t)}catch(e){ku(t,t.return,e)}}if(t===e){Xl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xl=n;break}Xl=t.return}}function ys(e){for(;null!==Xl;){var t=Xl;if(t===e){Xl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xl=n;break}Xl=t.return}}function bs(e){for(;null!==Xl;){var t=Xl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{es(4,t)}catch(e){ku(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){ku(t,a,e)}}var o=t.return;try{ts(t)}catch(e){ku(t,o,e)}break;case 5:var i=t.return;try{ts(t)}catch(e){ku(t,i,e)}}}catch(e){ku(t,t.return,e)}if(t===e){Xl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Xl=l;break}Xl=t.return}}var ws,xs=Math.ceil,Ss=w.ReactCurrentDispatcher,ks=w.ReactCurrentOwner,Es=w.ReactCurrentBatchConfig,_s=0,Cs=null,Ps=null,Ts=0,As=0,Ms=Ea(0),Os=0,Rs=null,Ls=0,Is=0,Ds=0,zs=null,js=null,Vs=0,Ns=1/0,Fs=null,Bs=!1,Us=null,Hs=null,$s=!1,Ws=null,Ys=0,Gs=0,qs=null,Xs=-1,Qs=0;function Ks(){return 0!=(6&_s)?Ke():-1!==Xs?Xs:Xs=Ke()}function Zs(e){return 0==(1&e.mode)?1:0!=(2&_s)&&0!==Ts?Ts&-Ts:null!==Ha.transition?(0===Qs&&(Qs=mt()),Qs):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function Js(e,t,n){if(50<Gs)throw Gs=0,qs=null,Error(o(185));var r=eu(e,t);return null===r?null:(gt(r,t,n),0!=(2&_s)&&r===Cs||(r===Cs&&(0==(2&_s)&&(Is|=t),4===Os&&iu(r,Ts)),nu(r,n),1===t&&0===_s&&0==(1&e.mode)&&(Ns=Ke()+500,Na&&Ua())),r)}function eu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function tu(e){return(null!==Cs||null!==eo)&&0!=(1&e.mode)&&0==(2&_s)}function nu(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,s=a[i];-1===s?0!=(l&n)&&0==(l&r)||(a[i]=pt(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=dt(e,e===Cs?Ts:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Na=!0,Ba(e)}(lu.bind(null,e)):Ba(lu.bind(null,e)),ia((function(){0===_s&&Ua()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Tu(n,ru.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ru(e,t){if(Xs=-1,Qs=0,0!=(6&_s))throw Error(o(327));var n=e.callbackNode;if(xu()&&e.callbackNode!==n)return null;var r=dt(e,e===Cs?Ts:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=mu(e,r);else{t=r;var a=_s;_s|=2;var i=pu();for(Cs===e&&Ts===t||(Fs=null,Ns=Ke()+500,fu(e,t));;)try{gu();break}catch(t){du(e,t)}Xa(),Ss.current=i,_s=a,null!==Ps?t=0:(Cs=null,Ts=0,t=Os)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=au(e,a)),1===t)throw n=Rs,fu(e,0),iu(e,r),nu(e,Ke()),n;if(6===t)iu(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=mu(e,r))&&0!==(i=ht(e))&&(r=i,t=au(e,i)),1===t))throw n=Rs,fu(e,0),iu(e,r),nu(e,Ke()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:wu(e,js,Fs);break;case 3:if(iu(e,r),(130023424&r)===r&&10<(t=Vs+500-Ke())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Ks(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(wu.bind(null,e,js,Fs),t);break}wu(e,js,Fs);break;case 4:if(iu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xs(r/1960))-r)){e.timeoutHandle=ra(wu.bind(null,e,js,Fs),r);break}wu(e,js,Fs);break;default:throw Error(o(329))}}}return nu(e,Ke()),e.callbackNode===n?ru.bind(null,e):null}function au(e,t){var n=zs;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=mu(e,t))&&(t=js,js=n,null!==t&&ou(t)),e}function ou(e){null===js?js=e:js.push.apply(js,e)}function iu(e,t){for(t&=~Ds,t&=~Is,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(0!=(6&_s))throw Error(o(327));xu();var t=dt(e,0);if(0==(1&t))return nu(e,Ke()),null;var n=mu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=au(e,r))}if(1===n)throw n=Rs,fu(e,0),iu(e,t),nu(e,Ke()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wu(e,js,Fs),nu(e,Ke()),null}function su(e,t){var n=_s;_s|=1;try{return e(t)}finally{0===(_s=n)&&(Ns=Ke()+500,Na&&Ua())}}function uu(e){null!==Ws&&0===Ws.tag&&0==(6&_s)&&xu();var t=_s;_s|=1;var n=Es.transition,r=bt;try{if(Es.transition=null,bt=1,e)return e()}finally{bt=r,Es.transition=n,0==(6&(_s=t))&&Ua()}}function cu(){As=Ms.current,_a(Ms)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Ps)for(n=Ps.return;null!==n;){var r=n;switch(Mo(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&La();break;case 3:ti(),_a(Aa),_a(Ta),li();break;case 5:ri(r);break;case 4:ti();break;case 13:case 19:_a(ai);break;case 10:Qa(r.type._context);break;case 22:case 23:cu()}n=n.return}if(Cs=e,Ps=e=Ru(e.current,null),Ts=As=t,Os=0,Rs=null,Ds=Is=Ls=0,js=zs=null,null!==eo){for(t=0;t<eo.length;t++)if(null!==(r=(n=eo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}eo=null}return e}function du(e,t){for(;;){var n=Ps;try{if(Xa(),si.current=nl,hi){for(var r=fi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}hi=!1}if(ci=0,pi=di=fi=null,mi=!1,vi=0,ks.current=null,null===n||null===n.return){Os=1,Rs=t,Ps=null;break}e:{var i=e,l=n.return,s=n,u=t;if(t=Ts,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,f=s,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=ml(l);if(null!==h){h.flags&=-257,vl(h,l,s,0,t),1&h.mode&&hl(i,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(u),t.updateQueue=v}else m.add(u);break e}if(0==(1&t)){hl(i,c,t),hu();break e}u=Error(o(426))}else if(Lo&&1&s.mode){var g=ml(l);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),vl(g,l,s,0,t),Uo(u);break e}}i=u,4!==Os&&(Os=2),null===zs?zs=[i]:zs.push(i),u=il(u,s),s=l;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,lo(s,dl(0,u,t));break e;case 1:i=u;var y=s.type,b=s.stateNode;if(0==(128&s.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hs||!Hs.has(b)))){s.flags|=65536,t&=-t,s.lanes|=t,lo(s,pl(s,i,t));break e}}s=s.return}while(null!==s)}bu(n)}catch(e){t=e,Ps===n&&null!==n&&(Ps=n=n.return);continue}break}}function pu(){var e=Ss.current;return Ss.current=nl,null===e?nl:e}function hu(){0!==Os&&3!==Os&&2!==Os||(Os=4),null===Cs||0==(268435455&Ls)&&0==(268435455&Is)||iu(Cs,Ts)}function mu(e,t){var n=_s;_s|=2;var r=pu();for(Cs===e&&Ts===t||(Fs=null,fu(e,t));;)try{vu();break}catch(t){du(e,t)}if(Xa(),_s=n,Ss.current=r,null!==Ps)throw Error(o(261));return Cs=null,Ts=0,Os}function vu(){for(;null!==Ps;)yu(Ps)}function gu(){for(;null!==Ps&&!Xe();)yu(Ps)}function yu(e){var t=ws(e.alternate,e,As);e.memoizedProps=e.pendingProps,null===t?bu(e):Ps=t,ks.current=null}function bu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=bl(n,t,As)))return void(Ps=n)}else{if(null!==(n=Wl(n,t)))return n.flags&=32767,void(Ps=n);if(null===e)return Os=6,void(Ps=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ps=t);Ps=t=e}while(null!==t);0===Os&&(Os=5)}function wu(e,t,n){var r=bt,a=Es.transition;try{Es.transition=null,bt=1,function(e,t,n,r){do{xu()}while(null!==Ws);if(0!=(6&_s))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Cs&&(Ps=Cs=null,Ts=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||$s||($s=!0,Tu(tt,(function(){return xu(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Es.transition,Es.transition=null;var l=bt;bt=1;var s=_s;_s|=4,ks.current=null,function(e,t){if(ea=$t,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(s=l+a),d!==i||0!==r&&3!==d.nodeType||(u=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(s=l),p===i&&++f===r&&(u=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},$t=!1,Xl=t;null!==Xl;)if(e=(t=Xl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Xl=e;else for(;null!==Xl;){t=Xl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:$a(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;if(1===w.nodeType)w.textContent="";else if(9===w.nodeType){var x=w.body;null!=x&&(x.textContent="")}break;default:throw Error(o(163))}}catch(e){ku(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xl=e;break}Xl=t.return}m=Zl,Zl=!1}(e,n),ps(n,e),hr(ta),$t=!!ea,ta=ea=null,e.current=n,ms(n,e,a),Qe(),_s=s,bt=l,Es.transition=i}else e.current=n;if($s&&($s=!1,Ws=e,Ys=a),0===(i=e.pendingLanes)&&(Hs=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),nu(e,Ke()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r(t[n]);if(Bs)throw Bs=!1,e=Us,Us=null,e;0!=(1&Ys)&&0!==e.tag&&xu(),0!=(1&(i=e.pendingLanes))?e===qs?Gs++:(Gs=0,qs=e):Gs=0,Ua()}(e,t,n,r)}finally{Es.transition=a,bt=r}return null}function xu(){if(null!==Ws){var e=wt(Ys),t=Es.transition,n=bt;try{if(Es.transition=null,bt=16>e?16:e,null===Ws)var r=!1;else{if(e=Ws,Ws=null,Ys=0,0!=(6&_s))throw Error(o(331));var a=_s;for(_s|=4,Xl=e.current;null!==Xl;){var i=Xl,l=i.child;if(0!=(16&Xl.flags)){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Xl=c;null!==Xl;){var f=Xl;switch(f.tag){case 0:case 11:case 15:Jl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Xl=d;else for(;null!==Xl;){var p=(f=Xl).sibling,h=f.return;if(ns(f),f===c){Xl=null;break}if(null!==p){p.return=h,Xl=p;break}Xl=h}}}var m=i.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Xl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Xl=l;else e:for(;null!==Xl;){if(0!=(2048&(i=Xl).flags))switch(i.tag){case 0:case 11:case 15:Jl(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Xl=y;break e}Xl=i.return}}var b=e.current;for(Xl=b;null!==Xl;){var w=(l=Xl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Xl=w;else e:for(l=b;null!==Xl;){if(0!=(2048&(s=Xl).flags))try{switch(s.tag){case 0:case 11:case 15:es(9,s)}}catch(e){ku(s,s.return,e)}if(s===l){Xl=null;break e}var x=s.sibling;if(null!==x){x.return=s.return,Xl=x;break e}Xl=s.return}}if(_s=a,Ua(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Es.transition=t}}return!1}function Su(e,t,n){oo(e,t=dl(0,t=il(n,t),1)),t=Ks(),null!==(e=eu(e,1))&&(gt(e,1,t),nu(e,t))}function ku(e,t,n){if(3===e.tag)Su(e,e,n);else for(;null!==t;){if(3===t.tag){Su(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r))){oo(t,e=pl(t,e=il(n,e),1)),e=Ks(),null!==(t=eu(t,1))&&(gt(t,1,e),nu(t,e));break}}t=t.return}}function Eu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Ks(),e.pingedLanes|=e.suspendedLanes&n,Cs===e&&(Ts&n)===n&&(4===Os||3===Os&&(130023424&Ts)===Ts&&500>Ke()-Vs?fu(e,0):Ds|=n),nu(e,t)}function _u(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Ks();null!==(e=eu(e,t))&&(gt(e,t,n),nu(e,n))}function Cu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),_u(e,n)}function Pu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),_u(e,n)}function Tu(e,t){return Ge(e,t)}function Au(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Mu(e,t,n,r){return new Au(e,t,n,r)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ru(e,t){var n=e.alternate;return null===n?((n=Mu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Lu(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Ou(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Iu(n.children,a,i,t);case E:l=8,a|=8;break;case _:return(e=Mu(12,n,t,2|a)).elementType=_,e.lanes=i,e;case A:return(e=Mu(13,n,t,a)).elementType=A,e.lanes=i,e;case M:return(e=Mu(19,n,t,a)).elementType=M,e.lanes=i,e;case L:return Du(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case P:l=9;break e;case T:l=11;break e;case O:l=14;break e;case R:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Mu(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Iu(e,t,n,r){return(e=Mu(7,e,r,t)).lanes=n,e}function Du(e,t,n,r){return(e=Mu(22,e,r,t)).elementType=L,e.lanes=n,e.stateNode={},e}function zu(e,t,n){return(e=Mu(6,e,null,t)).lanes=n,e}function ju(e,t,n){return(t=Mu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Nu(e,t,n,r,a,o,i,l,s){return e=new Vu(e,t,n,l,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Mu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},no(o),e}function Fu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bu(e){if(!e)return Pa;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ra(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ra(n))return Da(e,n,t)}return t}function Uu(e,t,n,r,a,o,i,l,s){return(e=Nu(n,r,!0,e,0,o,0,l,s)).context=Bu(null),n=e.current,(o=ao(r=Ks(),a=Zs(n))).callback=null!=t?t:null,oo(n,o),e.current.lanes=a,gt(e,a,r),nu(e,r),e}function Hu(e,t,n,r){var a=t.current,o=Ks(),i=Zs(a);return n=Bu(n),null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),oo(a,t),null!==(e=Js(a,i,o))&&io(e,a,i),i}function $u(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}ws=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Aa.current)xl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return xl=!1,function(e,t,n){switch(t.tag){case 3:Ol(t),Bo();break;case 5:ni(t);break;case 1:Ra(t.type)&&za(t);break;case 4:ei(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ca(Wa,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ca(ai,1&ai.current),t.flags|=128,null):0!=(n&t.child.childLanes)?zl(e,t,n):(Ca(ai,1&ai.current),null!==(e=$l(e,t,n))?e.sibling:null);Ca(ai,1&ai.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ca(ai,ai.current),r)break;return null;case 22:case 23:return t.lanes=0,Cl(e,t,n)}return $l(e,t,n)}(e,t,n);xl=0!=(131072&e.flags)}else xl=!1,Lo&&0!=(1048576&t.flags)&&To(t,xo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Oa(t,Ta.current);Za(t,n),a=wi(null,t,r,e,a,n);var i=xi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ra(r)?(i=!0,za(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,no(t),a.updater=po,t.stateNode=a,a._reactInternals=t,go(t,r,e,n),t=Ml(null,t,r,!0,i,n)):(t.tag=0,Lo&&i&&Ao(t),Sl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===O)return 14}return 2}(r),e=$a(r,e),a){case 0:t=Tl(null,t,r,e,n);break e;case 1:t=Al(null,t,r,e,n);break e;case 11:t=kl(null,t,r,e,n);break e;case 14:t=El(null,t,r,$a(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Tl(e,t,r,a=t.elementType===r?a:$a(r,a),n);case 1:return r=t.type,a=t.pendingProps,Al(e,t,r,a=t.elementType===r?a:$a(r,a),n);case 3:e:{if(Ol(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,ro(e,t),so(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Rl(e,t,r,n,a=Error(o(423)));break e}if(r!==a){t=Rl(e,t,r,n,a=Error(o(424)));break e}for(Ro=ua(t.stateNode.containerInfo.firstChild),Oo=t,Lo=!0,Io=null,n=qo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Bo(),r===a){t=$l(e,t,n);break e}Sl(e,t,r,n)}t=t.child}return t;case 5:return ni(t),null===e&&Vo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),Pl(e,t),Sl(e,t,l,n),t.child;case 6:return null===e&&Vo(t),null;case 13:return zl(e,t,n);case 4:return ei(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Go(t,null,r,n):Sl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,kl(e,t,r,a=t.elementType===r?a:$a(r,a),n);case 7:return Sl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Sl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Ca(Wa,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Aa.current){t=$l(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=ao(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Ka(i.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Ka(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Sl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Za(t,n),r=r(a=Ja(a)),t.flags|=1,Sl(e,t,r,n),t.child;case 14:return a=$a(r=t.type,t.pendingProps),El(e,t,r,a=$a(r.type,a),n);case 15:return _l(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:$a(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Ra(r)?(e=!0,za(t)):e=!1,Za(t,n),mo(t,r,a),go(t,r,a,n),Ml(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return Cl(e,t,n)}throw Error(o(156,t.tag))};var Gu="function"==typeof reportError?reportError:function(e){console.error(e)};function qu(e){this._internalRoot=e}function Xu(e){this._internalRoot=e}function Qu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function Ju(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=$u(i);l.call(e)}}Hu(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=$u(i);o.call(e)}}var i=Uu(t,r,e,0,null,!1,0,"",Zu);return e._reactRootContainer=i,e[ha]=i.current,Ur(8===e.nodeType?e.parentNode:e),uu(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=$u(s);l.call(e)}}var s=Nu(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=s,e[ha]=s.current,Ur(8===e.nodeType?e.parentNode:e),uu((function(){Hu(t,s,n,r)})),s}(n,t,e,a,r);return $u(i)}Xu.prototype.render=qu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Hu(e,t,null,null)},Xu.prototype.unmount=qu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uu((function(){Hu(null,e,null,null)})),t[ha]=null}},Xu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Lt.length&&0!==t&&t<Lt[n].priority;n++);Lt.splice(n,0,e),0===n&&jt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),nu(t,Ke()),0==(6&_s)&&(Ns=Ke()+500,Ua()))}break;case 13:var r=Ks();uu((function(){return Js(e,1,r)})),Yu(e,1)}},St=function(e){13===e.tag&&(Js(e,134217728,Ks()),Yu(e,134217728))},kt=function(e){if(13===e.tag){var t=Ks(),n=Zs(e);Js(e,n,t),Yu(e,n)}},Et=function(){return bt},_t=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=xa(r);if(!a)throw Error(o(90));G(r),Z(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=su,Ae=uu;var ec={usingClientEntryPoint:!1,Events:[ba,wa,xa,Ce,Pe,su]},tc={findFiberByHostInstance:ya,bundleType:0,version:"18.1.0",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.1.0-next-22edb9f77-20220426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Qu(t))throw Error(o(200));return Fu(e,t,null,n)},t.createRoot=function(e,t){if(!Qu(e))throw Error(o(299));var n=!1,r="",a=Gu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Nu(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,Ur(8===e.nodeType?e.parentNode:e),new qu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return uu(e)},t.hydrate=function(e,t,n){if(!Ku(t))throw Error(o(200));return Ju(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Qu(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Gu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Uu(t,null,e,1,null!=n?n:null,a,0,i,l),e[ha]=t.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Xu(t)},t.render=function(e,t,n){if(!Ku(t))throw Error(o(200));return Ju(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ku(e))throw Error(o(40));return!!e._reactRootContainer&&(uu((function(){Ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=su,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ku(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Ju(e,t,n,!1,r)},t.version="18.1.0-next-22edb9f77-20220426"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n,r=Symbol.for("react.element"),a=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");n=Symbol.for("react.module.reference"),t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===l||e===i||e===d||e===p||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case o:case l:case i:case d:case p:return e;default:switch(e=e&&e.$$typeof){case c:case u:case f:case m:case h:case s:return e;default:return t}}case a:return t}}}},864:(e,t,n)=>{"use strict";e.exports=n(921)},879:(e,t,n)=>{"use strict";n.r(t),n.d(t,{BrowserRouter:()=>ae,HashRouter:()=>oe,Link:()=>le,MemoryRouter:()=>Y,NavLink:()=>se,Navigate:()=>G,NavigationType:()=>r,Outlet:()=>q,Route:()=>X,Router:()=>Q,Routes:()=>K,UNSAFE_LocationContext:()=>m,UNSAFE_NavigationContext:()=>h,UNSAFE_RouteContext:()=>v,createPath:()=>d,createRoutesFromChildren:()=>Z,createSearchParams:()=>fe,generatePath:()=>y,matchPath:()=>_,matchRoutes:()=>b,parsePath:()=>p,renderMatches:()=>J,resolvePath:()=>C,unstable_HistoryRouter:()=>ie,useHref:()=>L,useInRouterContext:()=>I,useLinkClickHandler:()=>ue,useLocation:()=>D,useMatch:()=>j,useNavigate:()=>V,useNavigationType:()=>z,useOutlet:()=>B,useOutletContext:()=>F,useParams:()=>U,useResolvedPath:()=>H,useRoutes:()=>$,useSearchParams:()=>ce});var r,a=n(294);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(r||(r={}));var i="beforeunload",l="popstate";function s(e,t,n){return Math.min(Math.max(e,t),n)}function u(e){e.preventDefault(),e.returnValue=""}function c(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function f(){return Math.random().toString(36).substr(2,8)}function d(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,a=void 0===r?"":r,o=e.hash,i=void 0===o?"":o;return a&&"?"!==a&&(n+="?"===a.charAt(0)?a:"?"+a),i&&"#"!==i&&(n+="#"===i.charAt(0)?i:"#"+i),n}function p(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}const h=(0,a.createContext)(null),m=(0,a.createContext)(null),v=(0,a.createContext)({outlet:null,matches:[]});function g(e,t){if(!e)throw new Error(t)}function y(e,t){return void 0===t&&(t={}),e.replace(/:(\w+)/g,((e,n)=>(null==t[n]&&g(!1),t[n]))).replace(/\/*\*$/,(e=>null==t["*"]?"":t["*"].replace(/^\/*/,"/")))}function b(e,t,n){void 0===n&&(n="/");let r=T(("string"==typeof t?p(t):t).pathname||"/",n);if(null==r)return null;let a=w(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=E(a[e],r);return o}function w(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,a)=>{let o={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};o.relativePath.startsWith("/")&&(o.relativePath.startsWith(r)||g(!1),o.relativePath=o.relativePath.slice(r.length));let i=A([r,o.relativePath]),l=n.concat(o);e.children&&e.children.length>0&&(!0===e.index&&g(!1),w(e.children,t,l,i)),(null!=e.path||e.index)&&t.push({path:i,score:k(i,e.index),routesMeta:l})})),t}const x=/^:\w+$/,S=e=>"*"===e;function k(e,t){let n=e.split("/"),r=n.length;return n.some(S)&&(r+=-2),t&&(r+=2),n.filter((e=>!S(e))).reduce(((e,t)=>e+(x.test(t)?3:""===t?1:10)),r)}function E(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,s="/"===a?t:t.slice(a.length)||"/",u=_({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},s);if(!u)return null;Object.assign(r,u.params);let c=i.route;o.push({params:r,pathname:A([a,u.pathname]),pathnameBase:M(A([a,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(a=A([a,u.pathnameBase]))}return o}function _(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):a+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(l[n]||""),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function C(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?p(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:O(r),hash:R(a)}}function P(e,t,n){let r,a="string"==typeof e?p(e):e,o=""===e||""===a.pathname?"/":a.pathname;if(null==o)r=n;else{let e=t.length-1;if(o.startsWith("..")){let t=o.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}r=e>=0?t[e]:"/"}let i=C(a,r);return o&&"/"!==o&&o.endsWith("/")&&!i.pathname.endsWith("/")&&(i.pathname+="/"),i}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const A=e=>e.join("/").replace(/\/\/+/g,"/"),M=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),O=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",R=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function L(e){I()||g(!1);let{basename:t,navigator:n}=(0,a.useContext)(h),{hash:r,pathname:o,search:i}=H(e),l=o;if("/"!==t){let n=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?p(e).pathname:e.pathname}(e),r=null!=n&&n.endsWith("/");l="/"===o?t+(r?"/":""):A([t,o])}return n.createHref({pathname:l,search:i,hash:r})}function I(){return null!=(0,a.useContext)(m)}function D(){return I()||g(!1),(0,a.useContext)(m).location}function z(){return(0,a.useContext)(m).navigationType}function j(e){I()||g(!1);let{pathname:t}=D();return(0,a.useMemo)((()=>_(e,t)),[t,e])}function V(){I()||g(!1);let{basename:e,navigator:t}=(0,a.useContext)(h),{matches:n}=(0,a.useContext)(v),{pathname:r}=D(),o=JSON.stringify(n.map((e=>e.pathnameBase))),i=(0,a.useRef)(!1);return(0,a.useEffect)((()=>{i.current=!0})),(0,a.useCallback)((function(n,a){if(void 0===a&&(a={}),!i.current)return;if("number"==typeof n)return void t.go(n);let l=P(n,JSON.parse(o),r);"/"!==e&&(l.pathname=A([e,l.pathname])),(a.replace?t.replace:t.push)(l,a.state)}),[e,t,o,r])}const N=(0,a.createContext)(null);function F(){return(0,a.useContext)(N)}function B(e){let t=(0,a.useContext)(v).outlet;return t?(0,a.createElement)(N.Provider,{value:e},t):t}function U(){let{matches:e}=(0,a.useContext)(v),t=e[e.length-1];return t?t.params:{}}function H(e){let{matches:t}=(0,a.useContext)(v),{pathname:n}=D(),r=JSON.stringify(t.map((e=>e.pathnameBase)));return(0,a.useMemo)((()=>P(e,JSON.parse(r),n)),[e,r,n])}function $(e,t){I()||g(!1);let{matches:n}=(0,a.useContext)(v),r=n[n.length-1],o=r?r.params:{},i=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let l,s=D();if(t){var u;let e="string"==typeof t?p(t):t;"/"===i||(null==(u=e.pathname)?void 0:u.startsWith(i))||g(!1),l=e}else l=s;let c=l.pathname||"/",f=b(e,{pathname:"/"===i?c:c.slice(i.length)||"/"});return W(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:A([i,e.pathname]),pathnameBase:"/"===e.pathnameBase?i:A([i,e.pathnameBase])}))),n)}function W(e,t){return void 0===t&&(t=[]),null==e?null:e.reduceRight(((n,r,o)=>(0,a.createElement)(v.Provider,{children:void 0!==r.route.element?r.route.element:n,value:{outlet:n,matches:t.concat(e.slice(0,o+1))}})),null)}function Y(e){let{basename:t,children:n,initialEntries:i,initialIndex:l}=e,u=(0,a.useRef)();null==u.current&&(u.current=function(e){void 0===e&&(e={});var t=e,n=t.initialEntries,a=void 0===n?["/"]:n,i=t.initialIndex,l=a.map((function(e){return o({pathname:"/",search:"",hash:"",state:null,key:f()},"string"==typeof e?p(e):e)})),u=s(null==i?l.length-1:i,0,l.length-1),h=r.Pop,m=l[u],v=c(),g=c();function y(e,t){return void 0===t&&(t=null),o({pathname:m.pathname,search:"",hash:""},"string"==typeof e?p(e):e,{state:t,key:f()})}function b(e,t,n){return!g.length||(g.call({action:e,location:t,retry:n}),!1)}function w(e,t){h=e,m=t,v.call({action:h,location:m})}function x(e){var t=s(u+e,0,l.length-1),n=r.Pop,a=l[t];b(n,a,(function(){x(e)}))&&(u=t,w(n,a))}var S={get index(){return u},get action(){return h},get location(){return m},createHref:function(e){return"string"==typeof e?e:d(e)},push:function e(t,n){var a=r.Push,o=y(t,n);b(a,o,(function(){e(t,n)}))&&(u+=1,l.splice(u,l.length,o),w(a,o))},replace:function e(t,n){var a=r.Replace,o=y(t,n);b(a,o,(function(){e(t,n)}))&&(l[u]=o,w(a,o))},go:x,back:function(){x(-1)},forward:function(){x(1)},listen:function(e){return v.push(e)},block:function(e){return g.push(e)}};return S}({initialEntries:i,initialIndex:l}));let h=u.current,[m,v]=(0,a.useState)({action:h.action,location:h.location});return(0,a.useLayoutEffect)((()=>h.listen(v)),[h]),(0,a.createElement)(Q,{basename:t,children:n,location:m.location,navigationType:m.action,navigator:h})}function G(e){let{to:t,replace:n,state:r}=e;I()||g(!1);let o=V();return(0,a.useEffect)((()=>{o(t,{replace:n,state:r})})),null}function q(e){return B(e.context)}function X(e){g(!1)}function Q(e){let{basename:t="/",children:n=null,location:o,navigationType:i=r.Pop,navigator:l,static:s=!1}=e;I()&&g(!1);let u=M(t),c=(0,a.useMemo)((()=>({basename:u,navigator:l,static:s})),[u,l,s]);"string"==typeof o&&(o=p(o));let{pathname:f="/",search:d="",hash:v="",state:y=null,key:b="default"}=o,w=(0,a.useMemo)((()=>{let e=T(f,u);return null==e?null:{pathname:e,search:d,hash:v,state:y,key:b}}),[u,f,d,v,y,b]);return null==w?null:(0,a.createElement)(h.Provider,{value:c},(0,a.createElement)(m.Provider,{children:n,value:{location:w,navigationType:i}}))}function K(e){let{children:t,location:n}=e;return $(Z(t),n)}function Z(e){let t=[];return a.Children.forEach(e,(e=>{if(!(0,a.isValidElement)(e))return;if(e.type===a.Fragment)return void t.push.apply(t,Z(e.props.children));e.type!==X&&g(!1);let n={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(n.children=Z(e.props.children)),t.push(n)})),t}function J(e){return W(e)}function ee(){return ee=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ee.apply(this,arguments)}function te(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}const ne=["onClick","reloadDocument","replace","state","target","to"],re=["aria-current","caseSensitive","className","end","style","to","children"];function ae(e){let{basename:t,children:n,window:s}=e,h=(0,a.useRef)();null==h.current&&(h.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,a=n.history;function s(){var e=n.location,t=e.pathname,r=e.search,o=e.hash,i=a.state||{};return[i.idx,{pathname:t,search:r,hash:o,state:i.usr||null,key:i.key||"default"}]}var h=null;n.addEventListener(l,(function(){if(h)w.call(h),h=null;else{var e=r.Pop,t=s(),n=t[0],a=t[1];if(w.length){if(null!=n){var o=g-n;o&&(h={action:e,location:a,retry:function(){C(-1*o)}},C(o))}}else _(e)}}));var m=r.Pop,v=s(),g=v[0],y=v[1],b=c(),w=c();function x(e){return"string"==typeof e?e:d(e)}function S(e,t){return void 0===t&&(t=null),o({pathname:y.pathname,hash:"",search:""},"string"==typeof e?p(e):e,{state:t,key:f()})}function k(e,t){return[{usr:e.state,key:e.key,idx:t},x(e)]}function E(e,t,n){return!w.length||(w.call({action:e,location:t,retry:n}),!1)}function _(e){m=e;var t=s();g=t[0],y=t[1],b.call({action:m,location:y})}function C(e){a.go(e)}null==g&&(g=0,a.replaceState(o({},a.state,{idx:g}),""));var P={get action(){return m},get location(){return y},createHref:x,push:function e(t,o){var i=r.Push,l=S(t,o);if(E(i,l,(function(){e(t,o)}))){var s=k(l,g+1),u=s[0],c=s[1];try{a.pushState(u,"",c)}catch(e){n.location.assign(c)}_(i)}},replace:function e(t,n){var o=r.Replace,i=S(t,n);if(E(o,i,(function(){e(t,n)}))){var l=k(i,g),s=l[0],u=l[1];a.replaceState(s,"",u),_(o)}},go:C,back:function(){C(-1)},forward:function(){C(1)},listen:function(e){return b.push(e)},block:function(e){var t=w.push(e);return 1===w.length&&n.addEventListener(i,u),function(){t(),w.length||n.removeEventListener(i,u)}}};return P}({window:s}));let m=h.current,[v,g]=(0,a.useState)({action:m.action,location:m.location});return(0,a.useLayoutEffect)((()=>m.listen(g)),[m]),(0,a.createElement)(Q,{basename:t,children:n,location:v.location,navigationType:v.action,navigator:m})}function oe(e){let{basename:t,children:n,window:s}=e,h=(0,a.useRef)();null==h.current&&(h.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,a=n.history;function s(){var e=p(n.location.hash.substr(1)),t=e.pathname,r=void 0===t?"/":t,o=e.search,i=void 0===o?"":o,l=e.hash,s=void 0===l?"":l,u=a.state||{};return[u.idx,{pathname:r,search:i,hash:s,state:u.usr||null,key:u.key||"default"}]}var h=null;function m(){if(h)x.call(h),h=null;else{var e=r.Pop,t=s(),n=t[0],a=t[1];if(x.length){if(null!=n){var o=y-n;o&&(h={action:e,location:a,retry:function(){P(-1*o)}},P(o))}}else C(e)}}n.addEventListener(l,m),n.addEventListener("hashchange",(function(){d(s()[1])!==d(b)&&m()}));var v=r.Pop,g=s(),y=g[0],b=g[1],w=c(),x=c();function S(e){return function(){var e=document.querySelector("base"),t="";if(e&&e.getAttribute("href")){var r=n.location.href,a=r.indexOf("#");t=-1===a?r:r.slice(0,a)}return t}()+"#"+("string"==typeof e?e:d(e))}function k(e,t){return void 0===t&&(t=null),o({pathname:b.pathname,hash:"",search:""},"string"==typeof e?p(e):e,{state:t,key:f()})}function E(e,t){return[{usr:e.state,key:e.key,idx:t},S(e)]}function _(e,t,n){return!x.length||(x.call({action:e,location:t,retry:n}),!1)}function C(e){v=e;var t=s();y=t[0],b=t[1],w.call({action:v,location:b})}function P(e){a.go(e)}return null==y&&(y=0,a.replaceState(o({},a.state,{idx:y}),"")),{get action(){return v},get location(){return b},createHref:S,push:function e(t,o){var i=r.Push,l=k(t,o);if(_(i,l,(function(){e(t,o)}))){var s=E(l,y+1),u=s[0],c=s[1];try{a.pushState(u,"",c)}catch(e){n.location.assign(c)}C(i)}},replace:function e(t,n){var o=r.Replace,i=k(t,n);if(_(o,i,(function(){e(t,n)}))){var l=E(i,y),s=l[0],u=l[1];a.replaceState(s,"",u),C(o)}},go:P,back:function(){P(-1)},forward:function(){P(1)},listen:function(e){return w.push(e)},block:function(e){var t=x.push(e);return 1===x.length&&n.addEventListener(i,u),function(){t(),x.length||n.removeEventListener(i,u)}}}}({window:s}));let m=h.current,[v,g]=(0,a.useState)({action:m.action,location:m.location});return(0,a.useLayoutEffect)((()=>m.listen(g)),[m]),(0,a.createElement)(Q,{basename:t,children:n,location:v.location,navigationType:v.action,navigator:m})}function ie(e){let{basename:t,children:n,history:r}=e;const[o,i]=(0,a.useState)({action:r.action,location:r.location});return(0,a.useLayoutEffect)((()=>r.listen(i)),[r]),(0,a.createElement)(Q,{basename:t,children:n,location:o.location,navigationType:o.action,navigator:r})}const le=(0,a.forwardRef)((function(e,t){let{onClick:n,reloadDocument:r,replace:o=!1,state:i,target:l,to:s}=e,u=te(e,ne),c=L(s),f=ue(s,{replace:o,state:i,target:l});return(0,a.createElement)("a",ee({},u,{href:c,onClick:function(e){n&&n(e),e.defaultPrevented||r||f(e)},ref:t,target:l}))})),se=(0,a.forwardRef)((function(e,t){let{"aria-current":n="page",caseSensitive:r=!1,className:o="",end:i=!1,style:l,to:s,children:u}=e,c=te(e,re),f=D(),d=H(s),p=f.pathname,h=d.pathname;r||(p=p.toLowerCase(),h=h.toLowerCase());let m,v=p===h||!i&&p.startsWith(h)&&"/"===p.charAt(h.length),g=v?n:void 0;m="function"==typeof o?o({isActive:v}):[o,v?"active":null].filter(Boolean).join(" ");let y="function"==typeof l?l({isActive:v}):l;return(0,a.createElement)(le,ee({},c,{"aria-current":g,className:m,ref:t,style:y,to:s}),"function"==typeof u?u({isActive:v}):u)}));function ue(e,t){let{target:n,replace:r,state:o}=void 0===t?{}:t,i=V(),l=D(),s=H(e);return(0,a.useCallback)((t=>{if(!(0!==t.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(t))){t.preventDefault();let n=!!r||d(l)===d(s);i(e,{replace:n,state:o})}}),[l,i,s,r,o,n,e])}function ce(e){let t=(0,a.useRef)(fe(e)),n=D(),r=(0,a.useMemo)((()=>{let e=fe(n.search);for(let n of t.current.keys())e.has(n)||t.current.getAll(n).forEach((t=>{e.append(n,t)}));return e}),[n.search]),o=V();return[r,(0,a.useCallback)(((e,t)=>{o("?"+fe(e),t)}),[o])]}function fe(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var w=b.prototype=new y;w.constructor=b,m(w,g.prototype),w.isPureReactComponent=!0;var x=Array.isArray,S=Object.prototype.hasOwnProperty,k={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,a)&&!E.hasOwnProperty(a)&&(o[a]=t[a]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:k.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===o?"."+T(s,0):o,x(i)?(a="",null!=e&&(a=e.replace(P,"$&/")+"/"),A(i,t,a,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(s=0,o=""===o?".":o+":",x(e))for(var u=0;u<e.length;u++){var c=o+T(l=e[u],u);s+=A(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=A(l=l.value,t,a,c=o+T(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function M(e,t,n){if(null==e)return e;var r=[],a=0;return A(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},L={transition:null},I={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:L,ReactCurrentOwner:k};t.Children={map:M,forEach:function(e,t,n){M(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return M(e,(function(){t++})),t},toArray:function(e){return M(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)S.call(t,u)&&!E.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=L.transition;L.transition={};try{e()}finally{L.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.1.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>o(s,n))u<a&&0>o(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<a&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function x(e){if(v=!1,w(e),!m)if(null!==r(u))m=!0,L(S);else{var t=r(c);null!==t&&I(x,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,y(C),C=-1),h=!0;var o=p;try{for(w(n),d=r(u);null!==d&&(!(d.expirationTime>n)||e&&!A());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(u)&&a(u),w(n)}else a(u);d=r(u)}if(null!==d)var s=!0;else{var f=r(c);null!==f&&I(x,f.startTime-n),s=!1}return s}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,E=!1,_=null,C=-1,P=5,T=-1;function A(){return!(t.unstable_now()-T<P)}function M(){if(null!==_){var e=t.unstable_now();T=e;var n=!0;try{n=_(!0,e)}finally{n?k():(E=!1,_=null)}}else E=!1}if("function"==typeof b)k=function(){b(M)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,R=O.port2;O.port1.onmessage=M,k=function(){R.postMessage(null)}}else k=function(){g(M,0)};function L(e){_=e,E||(E=!0,k())}function I(e,n){C=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,L(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(v?(y(C),C=-1):v=!0,I(x,o-i))):(e.sortIndex=l,n(u,e),m||h||(m=!0,L(S))),e},t.unstable_shouldYield=A,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,r){var a=n?n.call(r,e,t):void 0;if(void 0!==a)return!!a;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var o=Object.keys(e),i=Object.keys(t);if(o.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),s=0;s<o.length;s++){var u=o[s];if(!l(u))return!1;var c=e[u],f=t[u];if(!1===(a=n?n.call(r,c,f,u):void 0)||void 0===a&&c!==f)return!1}return!0}},573:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=(e,t)=>n=>Math.max(Math.min(n,t),e),r=e=>e%1?Number(e.toFixed(5)):e,a=/(-)?([\d]*\.?[\d])+/g,o=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,i=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;function l(e){return"string"==typeof e}const s={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},u=Object.assign(Object.assign({},s),{transform:n(0,1)}),c=Object.assign(Object.assign({},s),{default:1}),f=e=>({test:t=>l(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),d=f("deg"),p=f("%"),h=f("px"),m=f("vh"),v=f("vw"),g=Object.assign(Object.assign({},p),{parse:e=>p.parse(e)/100,transform:e=>p.transform(100*e)}),y=(e,t)=>n=>Boolean(l(n)&&i.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),b=(e,t,n)=>r=>{if(!l(r))return r;const[o,i,s,u]=r.match(a);return{[e]:parseFloat(o),[t]:parseFloat(i),[n]:parseFloat(s),alpha:void 0!==u?parseFloat(u):1}},w={test:y("hsl","hue"),parse:b("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:a=1})=>"hsla("+Math.round(e)+", "+p.transform(r(t))+", "+p.transform(r(n))+", "+r(u.transform(a))+")"},x=n(0,255),S=Object.assign(Object.assign({},s),{transform:e=>Math.round(x(e))}),k={test:y("rgb","red"),parse:b("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:a=1})=>"rgba("+S.transform(e)+", "+S.transform(t)+", "+S.transform(n)+", "+r(u.transform(a))+")"},E={test:y("#"),parse:function(e){let t="",n="",r="",a="";return e.length>5?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2),a=e.substr(7,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),a=e.substr(4,1),t+=t,n+=n,r+=r,a+=a),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:a?parseInt(a,16)/255:1}},transform:k.transform},_={test:e=>k.test(e)||E.test(e)||w.test(e),parse:e=>k.test(e)?k.parse(e):w.test(e)?w.parse(e):E.parse(e),transform:e=>l(e)?e:e.hasOwnProperty("red")?k.transform(e):w.transform(e)},C="${c}",P="${n}";function T(e){"number"==typeof e&&(e=`${e}`);const t=[];let n=0;const r=e.match(o);r&&(n=r.length,e=e.replace(o,C),t.push(...r.map(_.parse)));const i=e.match(a);return i&&(e=e.replace(a,P),t.push(...i.map(s.parse))),{values:t,numColors:n,tokenised:e}}function A(e){return T(e).values}function M(e){const{values:t,numColors:n,tokenised:a}=T(e),o=t.length;return e=>{let t=a;for(let a=0;a<o;a++)t=t.replace(a<n?C:P,a<n?_.transform(e[a]):r(e[a]));return t}}const O=e=>"number"==typeof e?0:e,R={test:function(e){var t,n,r,i;return isNaN(e)&&l(e)&&(null!==(n=null===(t=e.match(a))||void 0===t?void 0:t.length)&&void 0!==n?n:0)+(null!==(i=null===(r=e.match(o))||void 0===r?void 0:r.length)&&void 0!==i?i:0)>0},parse:A,createTransformer:M,getAnimatableNone:function(e){const t=A(e);return M(e)(t.map(O))}},L=new Set(["brightness","contrast","saturate","opacity"]);function I(e){let[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(a)||[];if(!r)return e;const o=n.replace(r,"");let i=L.has(t)?1:0;return r!==n&&(i*=100),t+"("+i+o+")"}const D=/([a-z-]*)\(.*?\)/g,z=Object.assign(Object.assign({},R),{getAnimatableNone:e=>{const t=e.match(D);return t?t.map(I).join(" "):e}});t.alpha=u,t.color=_,t.complex=R,t.degrees=d,t.filter=z,t.hex=E,t.hsla=w,t.number=s,t.percent=p,t.progressPercentage=g,t.px=h,t.rgbUnit=S,t.rgba=k,t.scale=c,t.vh=m,t.vw=v},804:(e,t,n)=>{"use strict";n.r(t),n.d(t,{ServerStyleSheet:()=>Fe,StyleSheetConsumer:()=>ae,StyleSheetContext:()=>re,StyleSheetManager:()=>ce,ThemeConsumer:()=>Re,ThemeContext:()=>Oe,ThemeProvider:()=>Le,__PRIVATE__:()=>He,createGlobalStyle:()=>Ve,css:()=>we,default:()=>$e,isStyledComponent:()=>w,keyframes:()=>Ne,useTheme:()=>Ue,version:()=>S,withTheme:()=>Be});var r=n(864),a=n(294),o=n(774),i=n.n(o);const l=function(e){function t(e,r,s,u,d){for(var p,h,m,v,w,S=0,k=0,E=0,_=0,C=0,R=0,I=m=p=0,z=0,j=0,V=0,N=0,F=s.length,B=F-1,U="",H="",$="",W="";z<F;){if(h=s.charCodeAt(z),z===B&&0!==k+_+E+S&&(0!==k&&(h=47===k?10:47),_=E=S=0,F++,B++),0===k+_+E+S){if(z===B&&(0<j&&(U=U.replace(f,"")),0<U.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:U+=s.charAt(z)}h=59}switch(h){case 123:for(p=(U=U.trim()).charCodeAt(0),m=1,N=++z;z<F;){switch(h=s.charCodeAt(z)){case 123:m++;break;case 125:m--;break;case 47:switch(h=s.charCodeAt(z+1)){case 42:case 47:e:{for(I=z+1;I<B;++I)switch(s.charCodeAt(I)){case 47:if(42===h&&42===s.charCodeAt(I-1)&&z+2!==I){z=I+1;break e}break;case 10:if(47===h){z=I+1;break e}}z=I}}break;case 91:h++;case 40:h++;case 34:case 39:for(;z++<B&&s.charCodeAt(z)!==h;);}if(0===m)break;z++}if(m=s.substring(N,z),0===p&&(p=(U=U.replace(c,"").trim()).charCodeAt(0)),64===p){switch(0<j&&(U=U.replace(f,"")),h=U.charCodeAt(1)){case 100:case 109:case 115:case 45:j=r;break;default:j=O}if(N=(m=t(r,j,m,h,d+1)).length,0<L&&(w=l(3,m,j=n(O,U,V),r,T,P,N,h,d,u),U=j.join(""),void 0!==w&&0===(N=(m=w.trim()).length)&&(h=0,m="")),0<N)switch(h){case 115:U=U.replace(x,i);case 100:case 109:case 45:m=U+"{"+m+"}";break;case 107:m=(U=U.replace(g,"$1 $2"))+"{"+m+"}",m=1===M||2===M&&o("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=U+m,112===u&&(H+=m,m="")}else m=""}else m=t(r,n(r,U,V),m,u,d+1);$+=m,m=V=j=I=p=0,U="",h=s.charCodeAt(++z);break;case 125:case 59:if(1<(N=(U=(0<j?U.replace(f,""):U).trim()).length))switch(0===I&&(p=U.charCodeAt(0),45===p||96<p&&123>p)&&(N=(U=U.replace(" ",":")).length),0<L&&void 0!==(w=l(1,U,r,e,T,P,H.length,u,d,u))&&0===(N=(U=w.trim()).length)&&(U="\0\0"),p=U.charCodeAt(0),h=U.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){W+=U+s.charAt(z);break}default:58!==U.charCodeAt(N-1)&&(H+=a(U,p,h,U.charCodeAt(2)))}V=j=I=p=0,U="",h=s.charCodeAt(++z)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==u&&0<U.length&&(j=1,U+="\0"),0<L*D&&l(0,U,r,e,T,P,H.length,u,d,u),P=1,T++;break;case 59:case 125:if(0===k+_+E+S){P++;break}default:switch(P++,v=s.charAt(z),h){case 9:case 32:if(0===_+S+k)switch(C){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===_+k+S&&(j=V=1,v="\f"+v);break;case 108:if(0===_+k+S+A&&0<I)switch(z-I){case 2:112===C&&58===s.charCodeAt(z-3)&&(A=C);case 8:111===R&&(A=R)}break;case 58:0===_+k+S&&(I=z);break;case 44:0===k+E+_+S&&(j=1,v+="\r");break;case 34:case 39:0===k&&(_=_===h?0:0===_?h:_);break;case 91:0===_+k+E&&S++;break;case 93:0===_+k+E&&S--;break;case 41:0===_+k+S&&E--;break;case 40:0===_+k+S&&(0===p&&(2*C+3*R==533||(p=1)),E++);break;case 64:0===k+E+_+S+I+m&&(m=1);break;case 42:case 47:if(!(0<_+S+E))switch(k){case 0:switch(2*h+3*s.charCodeAt(z+1)){case 235:k=47;break;case 220:N=z,k=42}break;case 42:47===h&&42===C&&N+2!==z&&(33===s.charCodeAt(N+2)&&(H+=s.substring(N,z+1)),v="",k=0)}}0===k&&(U+=v)}R=C,C=h,z++}if(0<(N=H.length)){if(j=r,0<L&&void 0!==(w=l(2,H,j,e,T,P,N,u,d,u))&&0===(H=w).length)return W+H+$;if(H=j.join(",")+"{"+H+"}",0!=M*A){switch(2!==M||o(H,2)||(A=0),A){case 111:H=H.replace(b,":-moz-$1")+H;break;case 112:H=H.replace(y,"::-webkit-input-$1")+H.replace(y,"::-moz-$1")+H.replace(y,":-ms-input-$1")+H}A=0}}return W+H+$}function n(e,t,n){var a=t.trim().split(m);t=a;var o=a.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<o;++l)t[l]=r(e,t[l],n).trim();break;default:var s=l=0;for(t=[];l<o;++l)for(var u=0;u<i;++u)t[s++]=r(e[u]+" ",a[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function a(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var s=i.substring(e,i.length-1).trim();return s=i.substring(0,e).trim()+s+";",1===M||2===M&&o(s,1)?"-webkit-"+s+s:s}if(0===M||2===M&&!o(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(C,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(s=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+s+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(s=i.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=i.replace(w,"tb");break;case 232:s=i.replace(w,"tb-rl");break;case 220:s=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+s+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(s=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:i=i.replace(s,"-webkit-"+s)+";"+i;break;case 207:case 102:i=i.replace(s,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(s,"-webkit-"+s)+";"+i.replace(s,"-ms-"+s+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return s=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+s+"-ms-flex-"+s+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(k,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(k,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===_.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?a(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(s,"-webkit-"+s)+i.replace(s,"-moz-"+s.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function o(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),I(2!==t?r:r.replace(E,"$1"),n,t)}function i(e,t){var n=a(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(S," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,a,o,i,l,s,c){for(var f,d=0,p=t;d<L;++d)switch(f=R[d].call(u,e,p,n,r,a,o,i,l,s,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function s(e){return void 0!==(e=e.prefix)&&(I=null,e?"function"!=typeof e?M=1:(M=2,I=e):M=0),s}function u(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<L){var a=l(-1,n,r,r,T,P,0,0,0,0);void 0!==a&&"string"==typeof a&&(n=a)}var o=t(O,r,n,0,0);return 0<L&&void 0!==(a=l(-2,o,r,r,T,P,o.length,0,0,0))&&(o=a),A=0,P=T=1,o}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,S=/([\s\S]*?);/g,k=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,_=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,P=1,T=1,A=0,M=1,O=[],R=[],L=0,I=null,D=0;return u.use=function e(t){switch(t){case void 0:case null:L=R.length=0;break;default:if("function"==typeof t)R[L++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else D=0|!!t}return e},u.set=s,void 0!==e&&s(e),u},s={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var u=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const c=function(e){var t=Object.create(null);return function(e){return void 0===t[e]&&(t[e]=(n=e,u.test(n)||111===n.charCodeAt(0)&&110===n.charCodeAt(1)&&n.charCodeAt(2)<91)),t[e];var n}}();var f=n(679),d=n.n(f);function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var h=function(e,t){for(var n=[e[0]],r=0,a=t.length;r<a;r+=1)n.push(t[r],e[r+1]);return n},m=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,r.typeOf)(e)},v=Object.freeze([]),g=Object.freeze({});function y(e){return"function"==typeof e}function b(e){return e.displayName||e.name||"Component"}function w(e){return e&&"string"==typeof e.styledComponentId}var x="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",S="5.3.5",k="undefined"!=typeof window&&"HTMLElement"in window,E=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),_={};function C(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var P=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,a=r;e>=a;)(a<<=1)<0&&C(16,""+e);this.groupSizes=new Uint32Array(a),this.groupSizes.set(n),this.length=a;for(var o=r;o<a;o++)this.groupSizes[o]=0}for(var i=this.indexOfGroup(e+1),l=0,s=t.length;l<s;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var a=n;a<r;a++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),a=r+n,o=r;o<a;o++)t+=this.tag.getRule(o)+"/*!sc*/\n";return t},e}(),T=new Map,A=new Map,M=1,O=function(e){if(T.has(e))return T.get(e);for(;A.has(M);)M++;var t=M++;return T.set(e,t),A.set(t,e),t},R=function(e){return A.get(e)},L=function(e,t){t>=M&&(M=t+1),T.set(e,t),A.set(t,e)},I="style["+x+'][data-styled-version="5.3.5"]',D=new RegExp("^"+x+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),z=function(e,t,n){for(var r,a=n.split(","),o=0,i=a.length;o<i;o++)(r=a[o])&&e.registerName(t,r)},j=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],a=0,o=n.length;a<o;a++){var i=n[a].trim();if(i){var l=i.match(D);if(l){var s=0|parseInt(l[1],10),u=l[2];0!==s&&(L(u,s),z(e,u,l[3]),e.getTag().insertRules(s,r)),r.length=0}else r.push(i)}}},V=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},N=function(e){var t=document.head,n=e||t,r=document.createElement("style"),a=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(x))return r}}(n),o=void 0!==a?a.nextSibling:null;r.setAttribute(x,"active"),r.setAttribute("data-styled-version","5.3.5");var i=V();return i&&r.setAttribute("nonce",i),n.insertBefore(r,o),r},F=function(){function e(e){var t=this.element=N(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var a=t[n];if(a.ownerNode===e)return a}C(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),B=function(){function e(e){var t=this.element=N(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),H=k,$={isServer:!k,useCSSOMInjection:!E},W=function(){function e(e,t,n){void 0===e&&(e=g),void 0===t&&(t={}),this.options=p({},$,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&k&&H&&(H=!1,function(e){for(var t=document.querySelectorAll(I),n=0,r=t.length;n<r;n++){var a=t[n];a&&"active"!==a.getAttribute(x)&&(j(e,a),a.parentNode&&a.parentNode.removeChild(a))}}(this))}e.registerId=function(e){return O(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(p({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,a=t.target,e=n?new U(a):r?new F(a):new B(a),new P(e)));var e,t,n,r,a},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(O(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(O(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(O(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",a=0;a<n;a++){var o=R(a);if(void 0!==o){var i=e.names.get(o),l=t.getGroup(a);if(i&&l&&i.size){var s=x+".g"+a+'[id="'+o+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",")})),r+=""+l+s+'{content:"'+u+'"}/*!sc*/\n'}}}return r}(this)},e}(),Y=/(a)(d)/gi,G=function(e){return String.fromCharCode(e+(e>25?39:97))};function q(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=G(t%52)+n;return(G(t%52)+n).replace(Y,"$1-$2")}var X=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Q=function(e){return X(5381,e)};function K(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(y(n)&&!w(n))return!1}return!0}var Z=Q("5.3.5"),J=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&K(e),this.componentId=t,this.baseHash=X(Z,t),this.baseStyle=n,W.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,a=[];if(this.baseStyle&&a.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))a.push(this.staticRulesId);else{var o=ye(this.rules,e,t,n).join(""),i=q(X(this.baseHash,o)>>>0);if(!t.hasNameForId(r,i)){var l=n(o,"."+i,void 0,r);t.insertRules(r,i,l)}a.push(i),this.staticRulesId=i}else{for(var s=this.rules.length,u=X(this.baseHash,n.hash),c="",f=0;f<s;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=ye(d,e,t,n),h=Array.isArray(p)?p.join(""):p;u=X(u,h+f),c+=h}}if(c){var m=q(u>>>0);if(!t.hasNameForId(r,m)){var v=n(c,"."+m,void 0,r);t.insertRules(r,m,v)}a.push(m)}}return a.join(" ")},e}(),ee=/^\s*\/\/.*$/gm,te=[":","[",".","#"];function ne(e){var t,n,r,a,o=void 0===e?g:e,i=o.options,s=void 0===i?g:i,u=o.plugins,c=void 0===u?v:u,f=new l(s),d=[],p=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,a,o,i,l,s,u,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(a[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),h=function(e,r,o){return 0===r&&-1!==te.indexOf(o[n.length])||o.match(a)?e:"."+t};function m(e,o,i,l){void 0===l&&(l="&");var s=e.replace(ee,""),u=o&&i?i+" "+o+" { "+s+" }":s;return t=l,n=o,r=new RegExp("\\"+n+"\\b","g"),a=new RegExp("(\\"+n+"\\b){2,}"),f(i||!o?"":o,u)}return f.use([].concat(c,[function(e,t,a){2===e&&a.length&&a[0].lastIndexOf(n)>0&&(a[0]=a[0].replace(r,h))},p,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=c.length?c.reduce((function(e,t){return t.name||C(15),X(e,t.name)}),5381).toString():"",m}var re=a.createContext(),ae=re.Consumer,oe=a.createContext(),ie=(oe.Consumer,new W),le=ne();function se(){return(0,a.useContext)(re)||ie}function ue(){return(0,a.useContext)(oe)||le}function ce(e){var t=(0,a.useState)(e.stylisPlugins),n=t[0],r=t[1],o=se(),l=(0,a.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),s=(0,a.useMemo)((function(){return ne({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,a.useEffect)((function(){i()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),a.createElement(re.Provider,{value:l},a.createElement(oe.Provider,{value:s},e.children))}var fe=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=le);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return C(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=le),this.name+e.hash},e}(),de=/([A-Z])/,pe=/([A-Z])/g,he=/^ms-/,me=function(e){return"-"+e.toLowerCase()};function ve(e){return de.test(e)?e.replace(pe,me).replace(he,"-ms-"):e}var ge=function(e){return null==e||!1===e||""===e};function ye(e,t,n,r){if(Array.isArray(e)){for(var a,o=[],i=0,l=e.length;i<l;i+=1)""!==(a=ye(e[i],t,n,r))&&(Array.isArray(a)?o.push.apply(o,a):o.push(a));return o}return ge(e)?"":w(e)?"."+e.styledComponentId:y(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:ye(e(t),t,n,r):e instanceof fe?n?(e.inject(n,r),e.getName(r)):e:m(e)?function e(t,n){var r,a,o=[];for(var i in t)t.hasOwnProperty(i)&&!ge(t[i])&&(Array.isArray(t[i])&&t[i].isCss||y(t[i])?o.push(ve(i)+":",t[i],";"):m(t[i])?o.push.apply(o,e(t[i],i)):o.push(ve(i)+": "+(r=i,(null==(a=t[i])||"boolean"==typeof a||""===a?"":"number"!=typeof a||0===a||r in s?String(a).trim():a+"px")+";")));return n?[n+" {"].concat(o,["}"]):o}(e):e.toString();var u}var be=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function we(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return y(e)||m(e)?be(ye(h(v,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:be(ye(h(e,n)))}new Set;var xe=function(e,t,n){return void 0===n&&(n=g),e.theme!==n.theme&&e.theme||t||n.theme},Se=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ke=/(^-|-$)/g;function Ee(e){return e.replace(Se,"-").replace(ke,"")}var _e=function(e){return q(Q(e)>>>0)};function Ce(e){return"string"==typeof e&&!0}var Pe=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Te=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Ae(e,t,n){var r=e[n];Pe(t)&&Pe(r)?Me(r,t):e[n]=t}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var a=0,o=n;a<o.length;a++){var i=o[a];if(Pe(i))for(var l in i)Te(l)&&Ae(e,i[l],l)}return e}var Oe=a.createContext(),Re=Oe.Consumer;function Le(e){var t=(0,a.useContext)(Oe),n=(0,a.useMemo)((function(){return function(e,t){return e?y(e)?e(t):Array.isArray(e)||"object"!=typeof e?C(8):t?p({},t,{},e):e:C(14)}(e.theme,t)}),[e.theme,t]);return e.children?a.createElement(Oe.Provider,{value:n},e.children):null}var Ie={};function De(e,t,n){var r=w(e),o=!Ce(e),i=t.attrs,l=void 0===i?v:i,s=t.componentId,u=void 0===s?function(e,t){var n="string"!=typeof e?"sc":Ee(e);Ie[n]=(Ie[n]||0)+1;var r=n+"-"+_e("5.3.5"+n+Ie[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):s,f=t.displayName,h=void 0===f?function(e){return Ce(e)?"styled."+e:"Styled("+b(e)+")"}(e):f,m=t.displayName&&t.componentId?Ee(t.displayName)+"-"+t.componentId:t.componentId||u,x=r&&e.attrs?Array.prototype.concat(e.attrs,l).filter(Boolean):l,S=t.shouldForwardProp;r&&e.shouldForwardProp&&(S=t.shouldForwardProp?function(n,r,a){return e.shouldForwardProp(n,r,a)&&t.shouldForwardProp(n,r,a)}:e.shouldForwardProp);var k,E=new J(n,m,r?e.componentStyle:void 0),_=E.isStatic&&0===l.length,C=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,l=e.defaultProps,s=e.foldedComponentIds,u=e.shouldForwardProp,f=e.styledComponentId,d=e.target,h=function(e,t,n){void 0===e&&(e=g);var r=p({},t,{theme:e}),a={};return n.forEach((function(e){var t,n,o,i=e;for(t in y(i)&&(i=i(r)),i)r[t]=a[t]="className"===t?(n=a[t],o=i[t],n&&o?n+" "+o:n||o):i[t]})),[r,a]}(xe(t,(0,a.useContext)(Oe),l)||g,t,o),m=h[0],v=h[1],b=function(e,t,n,r){var a=se(),o=ue();return t?e.generateAndInjectStyles(g,a,o):e.generateAndInjectStyles(n,a,o)}(i,r,m),w=n,x=v.$as||t.$as||v.as||t.as||d,S=Ce(x),k=v!==t?p({},t,{},v):t,E={};for(var _ in k)"$"!==_[0]&&"as"!==_&&("forwardedAs"===_?E.as=k[_]:(u?u(_,c,x):!S||c(_))&&(E[_]=k[_]));return t.style&&v.style!==t.style&&(E.style=p({},t.style,{},v.style)),E.className=Array.prototype.concat(s,f,b!==f?b:null,t.className,v.className).filter(Boolean).join(" "),E.ref=w,(0,a.createElement)(x,E)}(k,e,t,_)};return C.displayName=h,(k=a.forwardRef(C)).attrs=x,k.componentStyle=E,k.displayName=h,k.shouldForwardProp=S,k.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):v,k.styledComponentId=m,k.target=r?e.target:e,k.withComponent=function(e){var r=t.componentId,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(t,["componentId"]),o=r&&r+"-"+(Ce(e)?e:Ee(b(e)));return De(e,p({},a,{attrs:x,componentId:o}),n)},Object.defineProperty(k,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Me({},e.defaultProps,t):t}}),k.toString=function(){return"."+k.styledComponentId},o&&d()(k,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),k}var ze=function(e){return function e(t,n,a){if(void 0===a&&(a=g),!(0,r.isValidElementType)(n))return C(1,String(n));var o=function(){return t(n,a,we.apply(void 0,arguments))};return o.withConfig=function(r){return e(t,n,p({},a,{},r))},o.attrs=function(r){return e(t,n,p({},a,{attrs:Array.prototype.concat(a.attrs,r).filter(Boolean)}))},o}(De,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){ze[e]=ze(e)}));var je=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=K(e),W.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var a=r(ye(this.rules,t,n,r).join(""),""),o=this.componentId+e;n.insertRules(o,o,a)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&W.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function Ve(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=we.apply(void 0,[e].concat(n)),i="sc-global-"+_e(JSON.stringify(o)),l=new je(o,i);function s(e){var t=se(),n=ue(),r=(0,a.useContext)(Oe),o=(0,a.useRef)(t.allocateGSInstance(i)).current;return t.server&&u(o,e,t,r,n),(0,a.useLayoutEffect)((function(){if(!t.server)return u(o,e,t,r,n),function(){return l.removeStyles(o,t)}}),[o,e,t,r,n]),null}function u(e,t,n,r,a){if(l.isStatic)l.renderStyles(e,_,n,a);else{var o=p({},t,{theme:xe(t,r,s.defaultProps)});l.renderStyles(e,o,n,a)}}return a.memo(s)}function Ne(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var a=we.apply(void 0,[e].concat(n)).join(""),o=_e(a);return new fe(o,a)}var Fe=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=V();return"<style "+[n&&'nonce="'+n+'"',x+'="true"','data-styled-version="5.3.5"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?C(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return C(2);var n=((t={})[x]="",t["data-styled-version"]="5.3.5",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=V();return r&&(n.nonce=r),[a.createElement("style",p({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new W({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?C(2):a.createElement(ce,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return C(3)},e}(),Be=function(e){var t=a.forwardRef((function(t,n){var r=(0,a.useContext)(Oe),o=e.defaultProps,i=xe(t,r,o);return a.createElement(e,p({},t,{theme:i,ref:n}))}));return d()(t,e),t.displayName="WithTheme("+b(e)+")",t},Ue=function(){return(0,a.useContext)(Oe)},He={StyleSheet:W,masterSheet:ie};const $e=ze},161:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Navbar=void 0;const a=r(n(294)),o=r(n(804)),i=n(699),l=n(593),s=o.default.nav`
  background-color: #2b2b2b;
  color: white;
  display: flex;
  flex-direction: row;
  height: 40px;
  width: 100%;
  position: sticky;
  z-index: 3;
  top: 0px;
  border-bottom: 3px solid #14a76c;
  @font-face {
    font-family: "Roboto";
    src: url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.eot");
    src: url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.eot?#iefix")
        format("embedded-opentype"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.woff2")
        format("woff2"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.woff")
        format("woff"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.ttf")
        format("truetype"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.svg#Roboto")
        format("svg");
  }
  font-family: Roboto;
`,u=o.default.li`
  display: inline-block;
`,c=o.default.div`
  text-decoration: none;
  color: white;
  :hover {
    color: #e73c7e;
    cursor: pointer;
  }
  transition: 0.5s;
`,f=o.default.ul`
  display: flex;
  align-items: center;
  gap: 20px;
  width: 100%;
  font-size: 20px;
`;t.Navbar=()=>a.default.createElement(s,null,a.default.createElement(f,null,a.default.createElement(u,null,a.default.createElement(c,{onClick:()=>{(0,l.ScrollTo)(i.Sections.home)}},"Home")),a.default.createElement(u,null,a.default.createElement(c,{onClick:()=>{(0,l.ScrollTo)(i.Sections.about)}},"About")),a.default.createElement(u,null,a.default.createElement(c,{onClick:()=>{(0,l.ScrollTo)(i.Sections.projects)}},"Projects")),a.default.createElement(u,null,a.default.createElement(c,{onClick:()=>{(0,l.ScrollTo)(i.Sections.contact)}},"Contact"))))},310:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.About=void 0;const a=r(n(294)),o=r(n(804)),i=n(431),l=n(699),s=n(513),u=n(305),c=n(323),f=n(110),d=n(334),p=n(635),h=n(593),m=n(38),v=o.default.div`
  background-color: #2b2b2b;
  height: fit-content;
  width: 100%;
  font-family: Roboto;
  padding-bottom: 100px;
`,g=o.default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`,y=(0,o.default)(i.motion.div)`
  color: white;
  font-family: inherit;
  font-size: 30pt;
  font-weight: bold;
  position: relative;
  padding-top: 40px;
`,b=o.default.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
  justify-content: space-around;
  font-family: inherit;
`,w=o.default.div`
  justify-content: center;
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 40px;
`,x=o.default.img`
  height: 400px;
  width: 400px;
  border-radius: 7px;
`,S=o.default.div`
  width: 700px;
  font-size: 20px;
  color: white;
  justify-content: flex-start;
`,k=o.default.div`
  display: flex;
  justify-content: center;
  position: relative;
  flex-direction: column;
  padding-top: 40px;
  gap: 10px;
  font-family: inherit;
`,E=o.default.div`
  display: flex;
  color: white;
  font-weight: bold;
  font-size: 30px;
  align-items: center;
  justify-content: center;
`,_=o.default.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  color: white;
  gap: 60px;
`,C=o.default.div`
  display: flex;
  padding-top: 30px;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: center;
`,P=o.default.ul`
  display: grid;
  grid-template-columns: repeat(1, minmax(140px, 200px));
  gap: 20px;
  align-items: flex-start;
  justify-content: flex-start;
`;t.About=()=>a.default.createElement(v,{id:l.Sections.about},a.default.createElement(g,null,a.default.createElement(y,null,"About Me"),a.default.createElement(m.LineTwo,null)),a.default.createElement(b,null,a.default.createElement(w,null,a.default.createElement(S,null,"Hello! My name's Nader and I'm a self-taught, front-end developer from Southern California. Crafting a fun yet beautifully simple user experience is what I aim for with all of my projects.",a.default.createElement("br",null)," I'm regularly working on improving my skills and furthering my development, one design problem at a time."," "),a.default.createElement(x,{src:`${(0,h.GetBaseImgPath)()}/pictureOfMe.jpg`})),a.default.createElement(k,null,a.default.createElement(E,null,"Skills"),a.default.createElement(_,null,a.default.createElement(P,null,a.default.createElement(C,null,a.default.createElement(s.ReactLogo,null)," React"),a.default.createElement(C,null,a.default.createElement(u.JSLogo,null)," JavaScript"),a.default.createElement(C,null,a.default.createElement(c.HTMLLogo,null)," HTML")),a.default.createElement(P,null,a.default.createElement(C,null,a.default.createElement(f.CSSLogo,null)," CSS"),a.default.createElement(C,null,a.default.createElement(p.TypeScriptLogo,null)," TypeScript"),a.default.createElement(C,null,a.default.createElement(d.NodeJSLogo,null)," Node.js"))))))},824:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Contact=void 0;const a=r(n(294)),o=n(431),i=r(n(804)),l=n(142),s=n(883),u=n(873),c=n(699),f=n(498),d=n(593),p=n(934),h=n(38),m=i.default.div`
  display: flex;
  height: 50vh;
  flex: 1;
  background-color: #2b2b2b;
  flex-direction: column;
  font-family: Roboto;
`,v=i.default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`,g=i.default.div`
  color: white;
  font-weight: bold;
  font-size: 40pt;
`,y=i.default.div`
  color: white;
  font-size: 17pt;
`,b=i.default.div`
  display: flex;
  height: calc(100% - 4px - 20px);
  width: calc(100% - 4px - 20px);
  border: 3px #14a76c solid;
  border-radius: 5px;
  gap: 20px;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  margin: auto;
`,w=i.default.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 20px;
  padding-top: 15px;
`,x=(0,i.default)(o.motion.div)`
  display: flex;
  height: fit-content;
  width: fit-content;
`,S=i.default.div`
  display: flex;
  position: sticky;
  :hover {
    background-color: #14a76c;
  }
  justify-content: center;
  width: 60px;
  transition: 0.5s;
`,k=i.default.div`
  display: flex;
  font-family: inherit;
  font-size: 13px;
  color: rgba(255, 255, 255, 0.65);
`;t.Contact=({scaleSize:e=1.1})=>a.default.createElement(m,{id:c.Sections.contact},a.default.createElement(b,null,a.default.createElement(v,null,a.default.createElement(g,null,"Want to know more?"),a.default.createElement(h.LineTwo,null),a.default.createElement(y,null,"I'm currently open to new job opportunities, ",a.default.createElement("br",null),"if you would like to get in touch, my inbox is always open!")),a.default.createElement(w,null,a.default.createElement(x,{whileHover:{scale:e}},a.default.createElement(u.Resume,{onClick:()=>{window.open("https://drive.google.com/file/d/1t8Ob4M_V2B8fxoffVCIgKlNLGlez9Jyt/view?usp=sharing")}})),a.default.createElement(x,{whileHover:{scale:e}},a.default.createElement(l.Github,{onClick:()=>{window.open("https://github.com/terminader7")}})),a.default.createElement(x,{whileHover:{scale:e}},a.default.createElement(s.Linkedin,{onClick:()=>{window.open("https://www.linkedin.com/in/nader-ebrahim-28576b199/")}})),a.default.createElement(x,{whileHover:{scale:e}},a.default.createElement(p.EmailLogo,{onClick:()=>{window.open("mailto:nebrahim2424@gmail.com")}}))),a.default.createElement(S,null,a.default.createElement(f.UpArrow,{onClick:()=>{(0,d.ScrollTo)(c.Sections.home)}})),a.default.createElement(k,null,"Designed & Built by Nader Ebrahim")))},361:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Homepage=void 0;const a=r(n(294)),o=r(n(804)),i=n(824),l=n(310),s=n(592),u=n(593),c=n(699),f=n(161),d=n(227),p=o.default.div`
  display: flex;
  align-items: center;
  flex-direction: column;
  width: 100%;
`,h=o.default.div`
  display: flex;
  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #14a76c);
  background-size: 400% 400%;
  animation: gradient 60s ease infinite;
  height: 100vh;
  width: 100%;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
`,m=o.default.h1`
  @font-face {
    font-family: "Roboto";
    src: url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.eot");
    src: url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.eot?#iefix")
        format("embedded-opentype"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.woff2")
        format("woff2"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.woff")
        format("woff"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.ttf")
        format("truetype"),
      url("//db.onlinewebfonts.com/t/0033a2fbc0329740fb86c1cfd134cb94.svg#Roboto")
        format("svg");
  }
  font-family: Roboto;
  color: white;
  font-size: 50px;
`,v=o.default.button`
  background: transparent;
  border: 2px solid white;
  color: white;
  font-size: 18px;
  font-weight: bold;
  font-family: Roboto;
  padding: 15px;
  height: 50px;
  width: fit-content;
  :hover {
    color: #e73c7e;
    background-color: white;
    border-color: #e73c7e;
    cursor: pointer;
  }
  transition: background-color 0.5s;
`,g=o.default.div`
  align-items: center;
  text-align: center;
  font-size: 25px;
  justify-content: center;
  width: 100%;
`;t.Homepage=()=>a.default.createElement(p,null,a.default.createElement(h,{id:c.Sections.home},a.default.createElement(m,null,"Hi, I'm Nader Ebrahim.",a.default.createElement("br",null)," I'm a front-end developer."),a.default.createElement(v,{onClick:()=>{(0,u.ScrollTo)(c.Sections.about)}},"Learn more about me")),a.default.createElement(f.Navbar,null),a.default.createElement(g,null,a.default.createElement(l.About,null),a.default.createElement(s.Projects,null),a.default.createElement(d.Socials,null),a.default.createElement(i.Contact,null)))},452:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectItem=void 0;const a=r(n(294)),o=r(n(804)),i=n(887),l=n(393),s=o.default.div``,u=o.default.div`
  display: flex;
  flex-direction: row;
  position: relative;
  height: auto;
  width: 1500px;
  align-items: flex-start;
  justify-content: center;
  overflow: hidden;
  padding-top: 30px;
`,c=o.default.div`
  :hover {
    color: #14a76c;
    cursor: pointer;
  }
  display: flex;
  justify-content: flex-end;
  font-weight: bold;
  transition: 0.5s;
  padding-top: 20px;
  width: fit-content;
  margin-left: 200px;
`,f=o.default.div`
  display: flex;
  height: 400px;
  width: 500px;
  overflow: hidden;
  justify-content: center;
  align-items: center;
`,d=o.default.img`
  :hover {
    opacity: 0.65;
    cursor: pointer;
  }
  height: auto;
  width: 500px;
  border-radius: 3px;
  transition: 0.5s;
`,p=o.default.div`
  font-size: 30px;
  color: white;
  z-index: 2;
  height: 350px;
  justify-content: flex-end;
  align-items: center;
  margin-left: -60px;
  width: 500px;
`,h=o.default.div`
  color: white;
  justify-content: center;
  align-items: center;
  background-color: #3d3d3d;
  border-radius: 5px;
  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
  width: 500px;
  height: fit-content;
  margin-top: 95px;
`,m=o.default.div`
  display: flex;
  padding: 25px;
  justify-content: flex-start;
  font-size: 17px;
`,v=o.default.div`
  display: flex;
  justify-content: flex-end;
  padding-top: 30px;
`,g=o.default.div`
  display: flex;
  color: rgba(255, 255, 255, 0.65);
  font-size: 15px;
  flex-direction: row;
`,y=o.default.div`
  display: flex;
  justify-content: flex-end;
  position: absolute;
  bottom: 0;
  flex-direction: row;
  gap: 10px;
  padding-bottom: 15px;
  margin-left: 420px;
`;t.ProjectItem=({title:e,src:t,path:n,description:r,technologies:o,github:b})=>a.default.createElement(s,null,a.default.createElement(u,null,a.default.createElement(f,null,a.default.createElement(d,{src:t,onClick:()=>{window.open(n)}})),a.default.createElement(p,null,a.default.createElement(c,{onClick:()=>{window.open(n)}},e),a.default.createElement(h,null,a.default.createElement(m,null,r)),a.default.createElement(v,null,a.default.createElement(g,null,o.join(",  "))),a.default.createElement(y,null,a.default.createElement(i.TinyGithub,{onClick:()=>{window.open(b)}}),a.default.createElement(l.AppLink,{onClick:()=>{window.open(n)}})))))},592:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Projects=void 0;const a=r(n(294)),o=r(n(804)),i=n(699),l=n(593),s=n(452),u=n(38),c=o.default.div`
  display: flex;
  flex-direction: column;
  background-color: #2b2b2b;
  font-family: Roboto;
  padding-bottom: 100px;
`,f=o.default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`,d=o.default.div`
  padding-top: 10px;
  color: white;
  font-size: 30pt;
  font-weight: bold;
`,p=o.default.div`
  display: flex;
  align-items: center;
  flex-direction: column;
`,h=o.default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`,m=o.default.div`
  display: flex;
  gap: 20px;
  padding-bottom: 20px;
  padding-top: 20px;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 30px;
`;t.Projects=()=>{const e=[{title:"Github Finder",src:`${(0,l.GetBaseImgPath)()}/Screenshots/githubFinderScreenshot.png`,path:"https://github-finder-nader.herokuapp.com/",github:"https://github.com/terminader7/github-finder",description:"React app that makes requests to the Github API by searching profiles on github and returning information and data, such as profile image, biography, latest repository commits, etc.",technologies:["Axios "," Github API "," React "," Heroku "]},{title:"Calculator",src:`${(0,l.GetBaseImgPath)()}/Screenshots/calculatorScreenshot.png`,path:"https://js-calculator-nader.herokuapp.com/",github:"https://github.com/terminader7/js-calculator",description:"Calculator app that uses JavaScript to perform mathematical equations accurately.",technologies:["React","Styled Components","Heroku","JavaScript"]},{title:"25 + 5 Clock",src:`${(0,l.GetBaseImgPath)()}/Screenshots/clockScreenshot.png`,path:"https://clock-nader.herokuapp.com/",github:"https://github.com/terminader7/clock",description:"A clock app that switches between input session and break time automatically.",technologies:["React","JavaScript","Heroku","Styled Components"]},{title:"Drum-Machine",src:`${(0,l.GetBaseImgPath)()}/Screenshots/drumMachineScreenshot.png`,path:"https://drum-machine-nader.herokuapp.com/",github:"https://github.com/terminader7/drum-machine-fcc",description:"Drum machine app with audio tied to each individual button press",technologies:["React","CSS Styling","JavaScript","React Hooks","Heroku"]}];return a.default.createElement(c,{id:i.Sections.projects},a.default.createElement(f,null,a.default.createElement(d,null,"Projects I've Worked On"),a.default.createElement(u.LineTwo,null)),a.default.createElement(p,null,a.default.createElement(h,null,a.default.createElement(m,null,e.map((({title:e,src:t,path:n,description:r,technologies:o,github:i})=>a.default.createElement(s.ProjectItem,{title:e,src:t,path:n,description:r,technologies:o,github:i})))))))}},227:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socials=void 0;const a=r(n(294)),o=r(n(804)),i=n(431),l=n(887),s=o.default.div`
  display: flex;
  position: sticky;
  flex-direction: column;
  z-index: 3;
  bottom: 0px;
  justify-content: flex-start;
  background-color: #2b2b2b;
  padding-left: 80px;
`,u=o.default.div`
  display: flex;
  flex-direction: column;
`,c=(0,o.default)(i.motion.div)`
  :hover {
    color: #14a76c;
  }
  display: flex;
  color: white;
  transition: 0.5s;
`;t.Socials=()=>a.default.createElement(s,null,a.default.createElement(u,null,a.default.createElement(c,{whileHover:{y:-5},transition:{duration:.2}},a.default.createElement(l.TinyGithub,{onClick:()=>{window.open("https://github.com/terminader7")}}))))},393:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppLink=void 0;const a=r(n(294)),o=r(n(804)).default.svg`
  :hover {
    cursor: pointer;
    color: #14a76c;
  }
  transition: 0.5s;
`;t.AppLink=({height:e="25px",width:t="25px",onClick:n})=>a.default.createElement(o,{xmlns:"http://www.w3.org/2000/svg",role:"img",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",height:e,width:t,onClick:n},a.default.createElement("title",null,"External Link"),a.default.createElement("path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}),a.default.createElement("polyline",{points:"15 3 21 3 21 9"}),a.default.createElement("line",{x1:"10",y1:"14",x2:"21",y2:"3"}))},110:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CSSLogo=void 0;const a=r(n(294));t.CSSLogo=({height:e="45px",width:t="45px"})=>a.default.createElement("svg",{width:t,height:e,viewBox:"-52.5 0 361 361",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid"},a.default.createElement("path",{d:"M127.844 360.088L23.662 331.166.445 70.766h255.11l-23.241 260.36-104.47 28.962z",fill:"#264DE4"}),a.default.createElement("path",{d:"M212.417 314.547l19.86-222.49H128V337.95l84.417-23.403z",fill:"#2965F1"}),a.default.createElement("path",{d:"M53.669 188.636l2.862 31.937H128v-31.937H53.669zM47.917 123.995l2.903 31.937H128v-31.937H47.917zM128 271.58l-.14.037-35.568-9.604-2.274-25.471h-32.06l4.474 50.146 65.421 18.16.147-.04V271.58z",fill:"#EBEBEB"}),a.default.createElement("path",{d:"M60.484 0h38.68v16.176H76.66v16.176h22.506v16.175H60.484V0zM106.901 0h38.681v14.066h-22.505v2.813h22.505v32.352h-38.68V34.46h22.505v-2.813H106.9V0zM153.319 0H192v14.066h-22.505v2.813H192v32.352h-38.681V34.46h22.505v-2.813H153.32V0z"}),a.default.createElement("path",{d:"M202.127 188.636l5.765-64.641H127.89v31.937h45.002l-2.906 32.704H127.89v31.937h39.327l-3.708 41.42-35.62 9.614v33.226l65.473-18.145.48-5.396 7.506-84.08.779-8.576z",fill:"#FFF"}))},934:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.EmailLogo=void 0;const a=r(n(294)),o=r(n(804)).default.svg`
  :hover {
    fill: #14a76c;
  }
  cursor: pointer;
  transition: fill 0.5s;
`;t.EmailLogo=({height:e="90px",width:t="65px",onClick:n})=>a.default.createElement(o,{fill:"white",version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg",width:t,height:e,viewBox:"0 0 96.264 96.264",onClick:n},a.default.createElement("g",null,a.default.createElement("path",{d:"M94.264,17.132H2c-1.104,0-2,0.896-2,2v58c0,1.104,0.896,2,2,2h92.264c1.104,0,2-0.896,2-2v-58\r\n            C96.264,18.028,95.367,17.132,94.264,17.132z M90.929,34.825c0,0.548-0.299,1.052-0.778,1.315l-41.29,22.61\r\n            c-0.225,0.123-0.473,0.185-0.721,0.185s-0.496-0.062-0.721-0.184L6.115,36.141c-0.481-0.263-0.78-0.768-0.78-1.316v-7.55\r\n            c0-0.525,0.274-1.011,0.724-1.283c0.447-0.271,1.008-0.29,1.472-0.046l39.684,20.762c0.552,0.29,1.301,0.289,1.855-0.001\r\n            l39.664-20.76c0.463-0.244,1.021-0.226,1.472,0.046c0.448,0.272,0.724,0.758,0.724,1.283L90.929,34.825L90.929,34.825z"})),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null))},142:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Github=void 0;const a=r(n(294)),o=r(n(804)).default.svg`
  :hover {
    fill: #e73c7e;
    cursor: pointer;
  }
  transition: 0.5s;
`;t.Github=({height:e="90px",width:t="90px",onClick:n})=>a.default.createElement(o,{fill:"white",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",width:t,height:e,onClick:n}," ",a.default.createElement("path",{d:"M10.9,2.1c-4.6,0.5-8.3,4.2-8.8,8.7c-0.5,4.7,2.2,8.9,6.3,10.5C8.7,21.4,9,21.2,9,20.8v-1.6c0,0-0.4,0.1-0.9,0.1 c-1.4,0-2-1.2-2.1-1.9c-0.1-0.4-0.3-0.7-0.6-1C5.1,16.3,5,16.3,5,16.2C5,16,5.3,16,5.4,16c0.6,0,1.1,0.7,1.3,1c0.5,0.8,1.1,1,1.4,1 c0.4,0,0.7-0.1,0.9-0.2c0.1-0.7,0.4-1.4,1-1.8c-2.3-0.5-4-1.8-4-4c0-1.1,0.5-2.2,1.2-3C7.1,8.8,7,8.3,7,7.6C7,7.2,7,6.6,7.3,6 c0,0,1.4,0,2.8,1.3C10.6,7.1,11.3,7,12,7s1.4,0.1,2,0.3C15.3,6,16.8,6,16.8,6C17,6.6,17,7.2,17,7.6c0,0.8-0.1,1.2-0.2,1.4 c0.7,0.8,1.2,1.8,1.2,3c0,2.2-1.7,3.5-4,4c0.6,0.5,1,1.4,1,2.3v2.6c0,0.3,0.3,0.6,0.7,0.5c3.7-1.5,6.3-5.1,6.3-9.3 C22,6.1,16.9,1.4,10.9,2.1z"}))},323:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HTMLLogo=void 0;const a=r(n(294));t.HTMLLogo=({height:e="45px",width:t="45px"})=>a.default.createElement("svg",{width:t,height:e,viewBox:"-52.5 0 361 361",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMinYMin meet"},a.default.createElement("path",{d:"M255.555 70.766l-23.241 260.36-104.47 28.962-104.182-28.922L.445 70.766h255.11z",fill:"#E44D26"}),a.default.createElement("path",{d:"M128 337.95l84.417-23.403 19.86-222.49H128V337.95z",fill:"#F16529"}),a.default.createElement("path",{d:"M82.82 155.932H128v-31.937H47.917l.764 8.568 7.85 88.01H128v-31.937H85.739l-2.919-32.704zM90.018 236.542h-32.06l4.474 50.146 65.421 18.16.147-.04V271.58l-.14.037-35.568-9.604-2.274-25.471z",fill:"#EBEBEB"}),a.default.createElement("path",{d:"M24.18 0h16.23v16.035h14.847V0h16.231v48.558h-16.23v-16.26H40.411v16.26h-16.23V0zM92.83 16.103H78.544V0h44.814v16.103h-14.295v32.455h-16.23V16.103h-.001zM130.47 0h16.923l10.41 17.062L168.203 0h16.93v48.558h-16.164V24.49l-11.166 17.265h-.28L146.35 24.49v24.068h-15.88V0zM193.21 0h16.235v32.508h22.824v16.05h-39.06V0z"}),a.default.createElement("path",{d:"M127.89 220.573h39.327l-3.708 41.42-35.62 9.614v33.226l65.473-18.145.48-5.396 7.506-84.08.779-8.576H127.89v31.937zM127.89 155.854v.078h77.143l.64-7.178 1.456-16.191.763-8.568H127.89v31.86z",fill:"#FFF"}))},305:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.JSLogo=void 0;const a=r(n(294));t.JSLogo=({height:e="40px",width:t="40px"})=>a.default.createElement("svg",{width:t,height:e,viewBox:"0 0 256 256",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMinYMin meet"},a.default.createElement("path",{d:"M0 0h256v256H0V0z",fill:"#F7DF1E"}),a.default.createElement("path",{d:"M67.312 213.932l19.59-11.856c3.78 6.701 7.218 12.371 15.465 12.371 7.905 0 12.89-3.092 12.89-15.12v-81.798h24.057v82.138c0 24.917-14.606 36.259-35.916 36.259-19.245 0-30.416-9.967-36.087-21.996M152.381 211.354l19.588-11.341c5.157 8.421 11.859 14.607 23.715 14.607 9.969 0 16.325-4.984 16.325-11.858 0-8.248-6.53-11.17-17.528-15.98l-6.013-2.58c-17.357-7.387-28.87-16.667-28.87-36.257 0-18.044 13.747-31.792 35.228-31.792 15.294 0 26.292 5.328 34.196 19.247L210.29 147.43c-4.125-7.389-8.591-10.31-15.465-10.31-7.046 0-11.514 4.468-11.514 10.31 0 7.217 4.468 10.14 14.778 14.608l6.014 2.577c20.45 8.765 31.963 17.7 31.963 37.804 0 21.654-17.012 33.51-39.867 33.51-22.339 0-36.774-10.654-43.819-24.574"}))},38:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LineTwo=void 0;const a=r(n(294)),o=r(n(804)).default.svg``;t.LineTwo=({height:e="60px",width:t="150px"})=>a.default.createElement(o,{width:t,height:e,viewBox:"0 4 16 12",version:"1.1",xmlns:"http://www.w3.org/2000/svg",fill:"white"},a.default.createElement("path",{fill:"white",d:"M0 7h16v1h-16v-1z"}))},883:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Linkedin=void 0;const a=r(n(294)),o=r(n(804)).default.svg`
  :hover {
    fill: #23a6d5;
    cursor: pointer;
  }
  transition: fill 0.5s;
`;t.Linkedin=({height:e="90px",width:t="90px",onClick:n})=>a.default.createElement(o,{fill:"white",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 30 30",width:t,height:e,onClick:n}," ",a.default.createElement("path",{d:"M15,3C8.373,3,3,8.373,3,15c0,6.627,5.373,12,12,12s12-5.373,12-12C27,8.373,21.627,3,15,3z M10.496,8.403 c0.842,0,1.403,0.561,1.403,1.309c0,0.748-0.561,1.309-1.496,1.309C9.561,11.022,9,10.46,9,9.712C9,8.964,9.561,8.403,10.496,8.403z M12,20H9v-8h3V20z M22,20h-2.824v-4.372c0-1.209-0.753-1.488-1.035-1.488s-1.224,0.186-1.224,1.488c0,0.186,0,4.372,0,4.372H14v-8 h2.918v1.116C17.294,12.465,18.047,12,19.459,12C20.871,12,22,13.116,22,15.628V20z"}))},334:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.NodeJSLogo=void 0;const a=r(n(294));t.NodeJSLogo=({height:e="40px",width:t="40px"})=>a.default.createElement("svg",{width:t,height:e,viewBox:"-16.5 0 289 289",version:"1.1",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid"},a.default.createElement("g",null,a.default.createElement("path",{d:"M127.999999,288.463771 C124.024844,288.463771 120.314699,287.403728 116.869564,285.548656 L81.6231884,264.612838 C76.32298,261.697724 78.9730854,260.637682 80.5631458,260.107661 C87.7184259,257.72257 89.0434775,257.192547 96.4637688,252.952381 C97.2587979,252.422361 98.3188405,252.687372 99.1138718,253.217392 L126.144927,269.383024 C127.20497,269.913045 128.530021,269.913045 129.325053,269.383024 L235.064182,208.165634 C236.124225,207.635611 236.654245,206.575571 236.654245,205.250519 L236.654245,83.0807467 C236.654245,81.7556929 236.124225,80.6956526 235.064182,80.1656324 L129.325053,19.2132506 C128.26501,18.6832305 126.939959,18.6832305 126.144927,19.2132506 L20.4057954,80.1656324 C19.3457551,80.6956526 18.8157349,82.0207041 18.8157349,83.0807467 L18.8157349,205.250519 C18.8157349,206.31056 19.3457551,207.635611 20.4057954,208.165634 L49.2919247,224.861286 C64.9275364,232.811595 74.7329196,223.536234 74.7329196,214.260871 L74.7329196,93.681159 C74.7329196,92.0910985 76.0579711,90.5010358 77.9130428,90.5010358 L91.4285716,90.5010358 C93.0186343,90.5010358 94.6086948,91.8260873 94.6086948,93.681159 L94.6086948,214.260871 C94.6086948,235.196689 83.2132512,247.387164 63.3374737,247.387164 C57.2422362,247.387164 52.4720502,247.387164 38.9565214,240.761906 L11.1304347,224.861286 C4.24016581,220.886129 5.68434189e-14,213.46584 5.68434189e-14,205.515528 L5.68434189e-14,83.3457557 C5.68434189e-14,75.3954465 4.24016581,67.9751552 11.1304347,64.0000006 L116.869564,2.78260752 C123.494824,-0.927535841 132.505176,-0.927535841 139.130436,2.78260752 L244.869565,64.0000006 C251.759834,67.9751552 256,75.3954465 256,83.3457557 L256,205.515528 C256,213.46584 251.759834,220.886129 244.869565,224.861286 L139.130436,286.078676 C135.685299,287.668739 131.710145,288.463771 127.999999,288.463771 L127.999999,288.463771 Z M160.596274,204.455488 C114.219461,204.455488 104.679089,183.254659 104.679089,165.233955 C104.679089,163.643893 106.004141,162.053832 107.859212,162.053832 L121.639752,162.053832 C123.229813,162.053832 124.554864,163.113872 124.554864,164.703935 C126.674947,178.749484 132.770187,185.639753 160.861283,185.639753 C183.122154,185.639753 192.662526,180.604556 192.662526,168.67909 C192.662526,161.788821 190.012423,156.753624 155.296065,153.308489 C126.409938,150.393375 108.389235,144.033126 108.389235,120.977226 C108.389235,99.5113875 126.409938,86.7908901 156.621119,86.7908901 C190.542443,86.7908901 207.238095,98.4513472 209.358178,123.89234 C209.358178,124.687371 209.093167,125.482403 208.563147,126.277434 C208.033127,126.807454 207.238095,127.337474 206.443064,127.337474 L192.662526,127.337474 C191.337475,127.337474 190.012423,126.277434 189.747412,124.952382 C186.567289,110.376813 178.351966,105.606625 156.621119,105.606625 C132.240165,105.606625 129.325053,114.086957 129.325053,120.447205 C129.325053,128.132506 132.770187,130.5176 165.631471,134.757766 C198.227744,138.997931 213.598344,145.093169 213.598344,167.884058 C213.333333,191.20497 194.252589,204.455488 160.596274,204.455488 L160.596274,204.455488 Z",fill:"#539E43"})))},513:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ReactLogo=void 0;const a=r(n(294)),o=r(n(804)).default.svg``;t.ReactLogo=({height:e="45px",width:t="45px"})=>a.default.createElement(o,{xmlns:"http://www.w3.org/2000/svg",width:t,height:e,viewBox:"0 0 32 32"},a.default.createElement("g",{transform:"matrix(.05696 0 0 .05696 .647744 2.43826)",fill:"none",fillRule:"evenodd"},a.default.createElement("circle",{r:"50.167",cy:"237.628",cx:"269.529",fill:"#00d8ff"}),a.default.createElement("g",{stroke:"#00d8ff",strokeWidth:"24"},a.default.createElement("path",{d:"M269.53 135.628c67.356 0 129.928 9.665 177.107 25.907 56.844 19.57 91.794 49.233 91.794 76.093 0 27.99-37.04 59.503-98.083 79.728-46.15 15.29-106.88 23.272-170.818 23.272-65.554 0-127.63-7.492-174.3-23.44-59.046-20.182-94.61-52.103-94.61-79.56 0-26.642 33.37-56.076 89.415-75.616 47.355-16.51 111.472-26.384 179.486-26.384z"}),a.default.createElement("path",{d:"M180.736 186.922c33.65-58.348 73.28-107.724 110.92-140.48C337.006 6.976 380.163-8.48 403.43 4.937c24.248 13.983 33.042 61.814 20.067 124.796-9.8 47.618-33.234 104.212-65.176 159.6-32.75 56.788-70.25 106.82-107.377 139.272-46.98 41.068-92.4 55.93-116.185 42.213-23.08-13.3-31.906-56.92-20.834-115.233 9.355-49.27 32.832-109.745 66.8-168.664z"}),a.default.createElement("path",{d:"M180.82 289.482C147.075 231.2 124.1 172.195 114.51 123.227c-11.544-59-3.382-104.11 19.864-117.566 24.224-14.024 70.055 2.244 118.14 44.94 36.356 32.28 73.688 80.837 105.723 136.173 32.844 56.733 57.46 114.21 67.036 162.582 12.117 61.213 2.31 107.984-21.453 121.74-23.057 13.348-65.25-.784-110.24-39.5-38.013-32.71-78.682-83.253-112.76-142.115z"}))))},873:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Resume=void 0;const a=r(n(294)),o=r(n(804)).default.svg`
  :hover {
    fill: #ee7752;
  }
  transition: 0.5s;
  cursor: pointer;
`;t.Resume=({height:e="75px",width:t="80px",onClick:n})=>a.default.createElement(o,{xmlns:"http://www.w3.org/2000/svg",height:e,viewBox:"0 0 24 24",width:t,fill:"white",onClick:n},a.default.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),a.default.createElement("path",{d:"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"}))},887:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TinyGithub=void 0;const a=r(n(294)),o=r(n(804)).default.svg`
  :hover {
    cursor: pointer;
    color: #14a76c;
  }

  transition: 0.5s;
`;t.TinyGithub=({height:e="25px",width:t="25px",onClick:n})=>a.default.createElement(o,{xmlns:"http://www.w3.org/2000/svg",height:e,width:t,role:"img",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",onClick:n},a.default.createElement("path",{d:"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}))},635:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TypeScriptLogo=void 0;const a=r(n(294)),o=r(n(804)).default.svg``;t.TypeScriptLogo=({height:e="45px",width:t="45px"})=>a.default.createElement(o,{xmlns:"http://www.w3.org/2000/svg",width:t,height:e,viewBox:"0 0 75 75 "},a.default.createElement("path",{d:"M0 32v32h64.002V-.002H0zm51.577-2.55c1.625.406 2.865 1.128 4.003 2.306.59.63 1.463 1.778 1.534 2.052.02.08-2.763 1.95-4.45 2.997-.06.04-.305-.223-.58-.63-.823-1.2-1.686-1.717-3.007-1.808-1.94-.132-3.2.884-3.18 2.58 0 .498.07.792.274 1.2.427.884 1.22 1.412 3.708 2.49 4.582 1.97 6.542 3.27 7.76 5.12 1.36 2.062 1.666 5.354.742 7.802-1.016 2.662-3.535 4.47-7.08 5.07-1.097.193-3.698.163-4.876-.05-2.57-.457-5.008-1.727-6.512-3.393-.59-.65-1.737-2.347-1.666-2.47.03-.04.295-.203.59-.376l2.377-1.37 1.84-1.067.386.57c.538.823 1.717 1.95 2.428 2.326 2.042 1.077 4.846.924 6.227-.315.59-.538.833-1.097.833-1.92 0-.742-.09-1.067-.477-1.625-.498-.71-1.514-1.31-4.4-2.56-3.302-1.422-4.724-2.306-6.024-3.708-.752-.813-1.463-2.113-1.758-3.2-.244-.904-.305-3.17-.112-4.084.68-3.2 3.088-5.415 6.563-6.075 1.128-.213 3.75-.132 4.856.142zM36.552 32.12l.02 2.62h-8.33v23.67H22.35v-23.67h-8.33v-2.57l.07-2.64c.03-.04 5.1-.06 11.246-.05l11.185.03z",fill:"#007acc"}))},498:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UpArrow=void 0;const a=r(n(294)),o=r(n(804)).default.svg`
  cursor: pointer;
`;t.UpArrow=({height:e="50px",width:t="40px",onClick:n})=>a.default.createElement(o,{version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg",width:t,height:e,viewBox:"0 0 49 49",fill:"white",onClick:n},a.default.createElement("g",null,a.default.createElement("g",null,a.default.createElement("path",{d:"M1.277,29.998h46c0.432,0,0.814-0.277,0.95-0.687s-0.008-0.86-0.355-1.117l-23-17c-0.353-0.261-0.836-0.261-1.188,0\r\n\t\t\tl-23,17c-0.347,0.257-0.491,0.707-0.356,1.117S0.846,29.998,1.277,29.998z M24.277,13.242l19.965,14.756H4.313L24.277,13.242z"}),a.default.createElement("path",{d:"M48,32.001H1c-0.552,0-1,0.448-1,1v4c0,0.552,0.448,1,1,1h47c0.552,0,1-0.448,1-1v-4C49,32.449,48.552,32.001,48,32.001z\r\n\t\t\t M47,36.001H2v-2h45V36.001z"}))),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null),a.default.createElement("g",null))},629:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const a=r(n(294)),o=r(n(804)),i=r(n(935)),l=n(879),s=n(361),u=o.default.div`
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100vh;
`;t.App=()=>a.default.createElement(u,null,a.default.createElement(l.BrowserRouter,null,a.default.createElement(l.Routes,null,a.default.createElement(l.Route,{path:"/personal-website",element:a.default.createElement(s.Homepage,null)})))),i.default.render(a.default.createElement(t.App,null),document.getElementById("root"))},699:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Sections=void 0,(n=t.Sections||(t.Sections={})).about="about",n.contact="contact",n.projects="projects",n.home="home"},593:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GetBaseImgPath=t.IsInDev=t.ScrollTo=void 0,t.ScrollTo=e=>{const t=document.getElementById(e);window.scrollTo({top:null==t?void 0:t.offsetTop,left:0,behavior:"smooth"})},t.IsInDev=()=>!1,t.GetBaseImgPath=()=>(0,t.IsInDev)()?"images":"dist/images"},655:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>o,__asyncDelegator:()=>x,__asyncGenerator:()=>w,__asyncValues:()=>S,__await:()=>b,__awaiter:()=>c,__classPrivateFieldGet:()=>P,__classPrivateFieldIn:()=>A,__classPrivateFieldSet:()=>T,__createBinding:()=>d,__decorate:()=>l,__exportStar:()=>p,__extends:()=>a,__generator:()=>f,__importDefault:()=>C,__importStar:()=>_,__makeTemplateObject:()=>k,__metadata:()=>u,__param:()=>s,__read:()=>m,__rest:()=>i,__spread:()=>v,__spreadArray:()=>y,__spreadArrays:()=>g,__values:()=>h});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},o.apply(this,arguments)};function i(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}function l(e,t,n,r){var a,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(i=(o<3?a(i):o>3?a(t,n,i):a(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function s(e,t){return function(n,r){t(n,r,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}var d=Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function p(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||d(t,e,n)}function h(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function g(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,l=o.length;i<l;i++,a++)r[a]=o[i];return r}function y(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))}function b(e){return this instanceof b?(this.v=e,this):new b(e)}function w(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,a=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){a[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||l(e,t)}))})}function l(e,t){try{(n=a[e](t)).value instanceof b?Promise.resolve(n.value.v).then(s,u):c(o[0][2],n)}catch(e){c(o[0][3],e)}var n}function s(e){l("next",e)}function u(e){l("throw",e)}function c(e,t){e(t),o.shift(),o.length&&l(o[0][0],o[0][1])}}function x(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,a){t[r]=e[r]?function(t){return(n=!n)?{value:b(e[r](t)),done:"return"===r}:a?a(t):t}:a}}function S(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=h(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,a){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,a,(t=e[n](t)).done,t.value)}))}}}function k(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var E=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function _(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&d(t,e,n);return E(t,e),t}function C(e){return e&&e.__esModule?e:{default:e}}function P(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function T(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n}function A(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7b1ZBTUEsTUFBTUEsRUFDRkMsYUFBYUMsR0FDVEMsS0FBS0QsVUFBWUEsRUFDakJBLE1BQUFBLEdBQXNEQSxFQUFVRSxTQUFTQyxNQUFLLElBQU1GLEtBQUtHLG1CQUFrQkMsT0FBTSxTQUVySEQsaUJBQ0lILEtBQUtELFVBQVlDLEtBQUtLLGVBQVlDLEdDVjFDLE1BQU1DLEVBQU8sSUFBSUMsUUFDakIsU0FBU0MsRUFBaUJDLEdBT3RCLE9BTktILEVBQUtJLElBQUlELElBQ1ZILEVBQUtLLElBQUlGLEVBQVMsQ0FDZEcsV0FBWSxHQUNaQyxPQUFRLElBQUlDLE1BR2JSLEVBQUtTLElBQUlOLEdDVnBCLE1BQU1PLEVBQU8sT0FDUEMsRUFBY0MsR0FBTUEsRUNEMUIsU0FBU0MsRUFBY0MsRUFBT0MsSUFDRCxJQUF6QkQsRUFBTUUsUUFBUUQsSUFBZ0JELEVBQU1HLEtBQUtGLEdBRTdDLFNBQVNHLEVBQVdDLEVBQUtKLEdBQ3JCLE1BQU1LLEVBQVFELEVBQUlILFFBQVFELEdBQzFCSyxHQUFTLEdBQUtELEVBQUlFLE9BQU9ELEVBQU8sR0NFcEMsTUFBTUUsRUFBTyxDQUFDLEdBQUksSUFBSyxJQUFLLEtBTXRCQyxFQUFpQixDQUNuQkMsRUFBRyxhQUNIQyxFQUFHLGFBQ0hDLEVBQUcsY0FFREMsRUFBVyxDQUNiQyxPQUFRLFVBQ1JDLGFBQWMsT0FDZEMsY0FBZ0JsQixHQUFNQSxFQUFJLE9BRXhCbUIsRUFBMEIsQ0FDNUJDLFVBQVcsQ0FDUEosT0FBUSxzQkFDUkMsYUFBYyxNQUNkQyxjQUFnQmxCLEdBQU1BLEVBQUksTUFFOUJxQixPQUFRTixFQUNSTyxNQUFPLENBQ0hOLE9BQVEsV0FDUkMsYUFBYyxFQUNkQyxjQUFlbkIsR0FFbkJ3QixLQUFNUixHQUVKUyxFQUF1QixJQUFJNUIsSUFDM0I2QixFQUFxQkMsR0FBUyxZQUFZQSxJQUkxQ2hDLEVBQWEsQ0FBQyxJQUFLLElBQUssS0E5QmhCLENBQUMsWUFBYSxRQUFTLFNBQVUsUUErQnpDaUMsU0FBU0QsSUFDWGhCLEVBQUtpQixTQUFTQyxJQUNWbEMsRUFBV1csS0FBS3FCLEVBQU9FLEdBQ3ZCSixFQUFxQi9CLElBQUlnQyxFQUFrQkMsRUFBT0UsR0FBT1QsRUFBd0JPLFVBTXpGLE1BQU1HLEVBQXdCLENBQUNDLEVBQUdDLElBQU1yQyxFQUFXVSxRQUFRMEIsR0FBS3BDLEVBQVdVLFFBQVEyQixHQUk3RUMsRUFBa0IsSUFBSUMsSUFBSXZDLEdBQzFCd0MsRUFBZVIsR0FBU00sRUFBZ0J4QyxJQUFJa0MsR0FhNUNTLEVBQTBCekMsR0FBZUEsRUFDMUMwQyxLQUFLUCxHQUNMUSxPQUFPQyxFQUF1QixJQUM5QkMsT0FDQ0QsRUFBd0IsQ0FBQ0UsRUFBVWQsSUFBUyxHQUFHYyxLQUFZZCxTQUFZRCxFQUFrQkMsT0N4RXpGZSxFQUFZZixHQUFTQSxFQUFLZ0IsV0FBVyxNQUNyQ0MsRUFBdUIsSUFBSVYsSUNIM0JXLEVBQVcsQ0FDYkMsU0FBVSxHQUNWQyxNQUFPLEVBQ1BDLFNBQVUsRUFDVkMsT0FBUSxFQUNSQyxPQUFRLFFDTE5DLEVBQVlDLEdBQTJCLGlCQUFWQSxFQUU3QkMsRUFBcUJILEdBQTZCLGlCQUFYQSxHQUN6Q0ksUUFBUUosRUFBT0ssaUJBRWJDLEVBQWdCTixHQUFXTyxNQUFNQyxRQUFRUixLQUFZQyxFQUFTRCxFQUFPLElDa0JyRVMsRUFBYSxDQUFDQyxFQUFHQyxFQUFJQyxPQUFVLEVBQU0sRUFBTUEsRUFBSyxFQUFNRCxHQUFNRCxHQUFLLEVBQU1FLEVBQUssRUFBTUQsSUFBT0QsRUFBSSxFQUFNQyxHQUFNRCxFQW9CL0csU0FBU0csRUFBWUMsRUFBS0MsRUFBS0MsRUFBS0MsR0FFaEMsR0FBSUgsSUFBUUMsR0FBT0MsSUFBUUMsRUFDdkIsT0FBT25FLEVBR1gsT0FBUTRELEdBQVksSUFBTkEsR0FBaUIsSUFBTkEsRUFBVUEsRUFBSUQsRUF2QjNDLFNBQXlCOUMsRUFBR3VELEVBQVlDLEVBQVlMLEVBQUtFLEdBQ3JELElBQUlJLEVBQ0FDLEVBQ0FDLEVBQUksRUFDUixHQUNJRCxFQUFXSCxHQUFjQyxFQUFhRCxHQUFjLEVBQ3BERSxFQUFXWCxFQUFXWSxFQUFVUCxFQUFLRSxHQUFPckQsRUFDeEN5RCxFQUFXLEVBQ1hELEVBQWFFLEVBR2JILEVBQWFHLFFBRVpFLEtBQUtDLElBQUlKLEdBZk8sUUFnQm5CRSxFQWZ1QixJQWdCN0IsT0FBT0QsRUFNa0JJLENBRWtDZixFQUZkLEVBQUcsRUFBR0ksRUFBS0UsR0FFT0QsRUFBS0UsR0NqRHhFLE1DR01TLEVBQWUsQ0FDakJDLEtBQU1kLEVBQVksSUFBTSxHQUFLLElBQU0sR0FDbkMsVUFBV0EsRUFBWSxJQUFNLEVBQUssRUFBSyxHQUN2QyxjQUFlQSxFQUFZLElBQU0sRUFBSyxJQUFNLEdBQzVDLFdBQVlBLEVBQVksRUFBSyxFQUFLLElBQU0sSUFFdENlLEVBQW9CLFlBQzFCLFNBQVNDLEVBQWtCQyxHQUV2QixHQUEwQixtQkFBZkEsRUFDUCxPQUFPQSxFQUVYLEdBQUl2QixNQUFNQyxRQUFRc0IsR0FDZCxPQUFPakIsS0FBZWlCLEdBRTFCLEdBQUlKLEVBQWFJLEdBQ2IsT0FBT0osRUFBYUksR0FFeEIsR0FBSUEsRUFBV3JDLFdBQVcsU0FBVSxDQUNoQyxNQUFNc0MsRUFBT0gsRUFBa0JJLEtBQUtGLEdBQ3BDLEdBQUlDLEVBQU0sQ0FDTixNQUFNRSxFQUFZRixFQUFLLEdBQUdHLE1BQU0sS0FDaEMsTUN2QkUsRUFBQ0MsRUFBT0MsRUFBWSxRQUFXQyxJQUt6QyxNQUFNQyxHQUpORCxFQUNrQixRQUFkRCxFQUNNYixLQUFLZ0IsSUFBSUYsRUFBVSxNQUNuQmQsS0FBS2lCLElBQUlILEVBQVUsT0FDREYsRUFFNUIsT0ZUcUJwRixHRVFTLFFBQWRxRixFQUFzQmIsS0FBS2tCLE1BQU1ILEdBQVlmLEtBQUttQixLQUFLSixJQUMxQ0gsRUZURlosS0FBS2dCLElBQUloQixLQUFLaUIsSUFBSXpGLEVFU2hDLEdBQUcsR0ZUTixJQUFXQSxHQ3lCTm9GLENBQU1RLFdBQVdWLEVBQVUsSUFBS0EsRUFBVSxHQUFHM0MsU0FHNUQsT0FBT3hDLEVBRVgsU0FBUzhGLEVBQW9CNUMsRUFBUXNCLEdBQ2pDLE9BQU9oQixFQUFhTixHQUNkQSxFRWhDRyxFQUFDdUMsRUFBS0MsRUFBS3pGLEtBQ3BCLE1BQU04RixFQUFZTCxFRitCQSxFRTlCbEIsUUFBV3pGLEVGOEJPLEdFOUJJOEYsRUFBYUEsR0FBYUEsRUY4QjlCLEdBQUxDLENBQUssRUFBRzlDLEVBQU8rQyxPQUFRekIsSUFDOUJ0QixFR2pDVixNQUFNZ0QsRUFBTSxDQUFDVCxFQUFLQyxFQUFLSCxLQUFjQSxFQUFXRSxFQUFNRixFQUFXRyxFQUFNRCxFQ0FqRUYsRUFBVyxDQUFDRSxFQUFLQyxFQUFLdEMsSUFBVXNDLEVBQU1ELEdBQVEsRUFBSSxHQUFLckMsRUFBUXFDLElBQVFDLEVBQU1ELEdDR25GLFNBQVNVLEVBQVdDLEVBQVFDLEdBQ3hCLE1BQU1aLEVBQU1XLEVBQU9BLEVBQU9ILE9BQVMsR0FDbkMsSUFBSyxJQUFJekIsRUFBSSxFQUFHQSxHQUFLNkIsRUFBVzdCLElBQUssQ0FDakMsTUFBTThCLEVBQWlCZixFQUFTLEVBQUdjLEVBQVc3QixHQUM5QzRCLEVBQU85RixLQUFLNEYsRUFBSVQsRUFBSyxFQUFHYSxLQUdoQyxTQUFTQyxFQUFjTixHQUNuQixNQUFNRyxFQUFTLENBQUMsR0FFaEIsT0FEQUQsRUFBV0MsRUFBUUgsRUFBUyxHQUNyQkcsRUNUWCxNQUFNSSxFQUNGQyxZQUFZQyxFQUFRQyxFQUFZLENBQUMsRUFBRyxJQUFJLE9BQUV6RCxFQUFTTCxFQUFTSyxPQUFNLFNBQUVKLEVBQVdELEVBQVNDLFNBQVEsTUFBRUMsRUFBUUYsRUFBU0UsTUFBSyxTQUFFQyxFQUFXSCxFQUFTRyxTQUFRLE9BQUVDLEVBQVNKLEVBQVNJLE9BQU0sT0FBRW1ELEVBQU0sVUFBRWQsRUFBWSxVQUFjLElBVWhOLEdBVEF4RyxLQUFLOEgsVUFBWSxLQUNqQjlILEtBQUsrSCxLQUFPLEVBQ1ovSCxLQUFLOEUsRUFBSSxFQUNUOUUsS0FBS2dJLGdCQUFrQixLQUN2QmhJLEtBQUtpSSxVQUFZLE9BQ2pCakksS0FBS0MsU0FBVyxJQUFJaUksU0FBUSxDQUFDQyxFQUFTQyxLQUNsQ3BJLEtBQUttSSxRQUFVQSxFQUNmbkksS0FBS29JLE9BQVNBLEtBRWQ3RCxFQUFrQkgsR0FBUyxDQUMzQixNQUFNaUUsRUFBU2pFLEVBQU9LLGdCQUFnQm9ELEdBQVcsSUFBTSxNQUFLLEdBQzVEekQsRUFBU2lFLEVBQU9qRSxZQUNTOUQsSUFBckIrSCxFQUFPUixZQUNQQSxFQUFZUSxFQUFPUixnQkFDQ3ZILElBQXBCK0gsRUFBT3JFLFdBQ1BBLEVBQVdxRSxFQUFPckUsVUFFMUIsTUFBTXNFLEVBQWtCNUQsRUFBYU4sR0FDL0JsRCxFQUNBK0UsRUFBa0I3QixHQUNsQm1FLEVBQWdCdkUsR0FBWUcsRUFBUyxHQUNyQ3FFLEVDdkJkLFNBQXFCWixFQUFRYSxFQUFRaEIsRUFBY0csRUFBT1QsUUFBUy9DLEVBQVNsRCxHQUN4RSxNQUFNaUcsRUFBU1MsRUFBT1QsT0FPaEJ1QixFQUFZdkIsRUFBU3NCLEVBQU10QixPQUVqQyxPQURBdUIsRUFBWSxHQUFLckIsRUFBV29CLEVBQU9DLEdBQzNCNUQsSUFDSixJQUFJWSxFQUFJLEVBQ1IsS0FBT0EsRUFBSXlCLEVBQVMsS0FDWnJDLEVBQUkyRCxFQUFNL0MsRUFBSSxJQURDQSxLQUl2QixJQUFJaUQsR0FqQldDLEVBaUJxQm5DLEVBQVNnQyxFQUFNL0MsR0FBSStDLEVBQU0vQyxFQUFJLEdBQUlaLEdBakJoRGEsS0FBS2dCLElBQUksRUFBR2hCLEtBQUtpQixJQUFJZ0MsRUFBRyxLQUEvQixJQUFDQSxFQW9CZixPQURBRCxFQURzQjNCLEVBQW9CNUMsRUFBUXNCLEVBQ2hDbUQsQ0FBY0YsR0FDekJ2QixFQUFJUSxFQUFPbEMsR0FBSWtDLEVBQU9sQyxFQUFJLEdBQUlpRCxJRElmRyxDQUFZakIsRUFBV1AsRUFBUTVDLEVBQWFOLEdBQVVBLEVBQU8yRSxJQUFJOUMsR0FBcUIvRSxHQUM1R2xCLEtBQUtnSixLQUFRQyxJQUNULElBQUlDLEVBR0FsSixLQUFLbUosWUFDTEYsRUFBWWpKLEtBQUttSixXQUNyQixJQUFJckUsR0FBS21FLEVBQVlqSixLQUFLOEgsV0FBYTlILEtBQUsrSCxLQUM1Qy9ILEtBQUs4RSxFQUFJQSxFQUVUQSxHQUFLLElBRUxBLEVBQUlhLEtBQUtpQixJQUFJOUIsRUFBSWIsRUFBTyxHQUtELGFBQW5CakUsS0FBS2lJLFlBQ0xuRCxFQUFJeUQsR0FNUixNQUFNOUIsRUFBVzNCLEVBQUlkLEVBTXJCLElBQUlvRixFQUFtQnpELEtBQUtrQixNQUFNSixHQUs5QjRDLEVBQW9CNUMsRUFBVyxHQUM5QjRDLEdBQXFCNUMsR0FBWSxJQUNsQzRDLEVBQW9CLEdBTUYsSUFBdEJBLEdBQTJCRCxJQUkzQixNQUFNRSxFQUFpQkYsRUFBbUIsR0FDeEIsWUFBZDVDLEdBQ2UsY0FBZEEsR0FBNkI4QyxHQUNmLHNCQUFkOUMsSUFBc0M4QyxLQUN2Q0QsRUFBb0IsRUFBSUEsR0FFNUIsTUFBTVQsRUFBSTlELEdBQUt5RCxFQUFnQixFQUFJNUMsS0FBS2dCLElBQUkwQyxFQUFtQixHQUN6REUsRUFBU2YsRUFBY0YsRUFBZ0JNLElBQzdDaEIsRUFBTzJCLEdBQ3dDLGFBQW5CdkosS0FBS2lJLFdBQTRCbkQsR0FBS3lELEVBQWdCckUsR0FFOUVsRSxLQUFLaUksVUFBWSxXQUNPLFFBQXZCaUIsRUFBS2xKLEtBQUttSSxlQUE0QixJQUFQZSxHQUF5QkEsRUFBR00sS0FBS3hKLEtBQU11SixJQUUvQyxTQUFuQnZKLEtBQUtpSSxZQUNWakksS0FBS3lKLGVBQWlCQyxzQkFBc0IxSixLQUFLZ0osUUFHekRoSixLQUFLMkosT0FFVEEsT0FDSSxJQUFJVCxFQUNKLE1BQU1VLEVBQU1DLFlBQVlELE1BQ3hCNUosS0FBS2lJLFVBQVksVUFDYmpJLEtBQUttSixVQUNMbkosS0FBSzhILFVBQVk4QixHQUFPNUosS0FBS21KLFdBQXVDLFFBQXpCRCxFQUFLbEosS0FBSzhILGlCQUE4QixJQUFQb0IsRUFBZ0JBLEVBQUssSUFFM0ZsSixLQUFLOEgsWUFDWDlILEtBQUs4SCxVQUFZOEIsR0FFckI1SixLQUFLZ0ksZ0JBQWtCaEksS0FBSzhILFVBQzVCOUgsS0FBS21KLGVBQVk3SSxFQUNqQm9KLHNCQUFzQjFKLEtBQUtnSixNQUUvQmMsUUFDSTlKLEtBQUtpSSxVQUFZLFNBQ2pCakksS0FBS21KLFVBQVlVLFlBQVlELE1BRWpDRyxTQUNJL0osS0FBS2lJLFVBQVksV0FDakJqSSxLQUFLZ0osS0FBSyxHQUVkZ0IsT0FDSSxJQUFJZCxFQUNKbEosS0FBS2lJLFVBQVksWUFDVzNILElBQXhCTixLQUFLeUosZ0JBQ0xRLHFCQUFxQmpLLEtBQUt5SixnQkFFUCxRQUF0QlAsRUFBS2xKLEtBQUtvSSxjQUEyQixJQUFQYyxHQUF5QkEsRUFBR00sS0FBS3hKLE1BQU0sR0FFMUVrSyxTQUNJbEssS0FBS2dLLE9BQ0xoSyxLQUFLZ0osS0FBS2hKLEtBQUtnSSxpQkFFbkJtQyxVQUNJbkssS0FBSytILE9BQVMsRUFFbEJxQyxnQkFDSUMsa0JBQ0EsT0FBT3JLLEtBQUs4RSxFQUVadUYsZ0JBQVl2RixHQUNSOUUsS0FBS21KLFdBQTJCLElBQWRuSixLQUFLK0gsS0FDdkIvSCxLQUFLbUosVUFBWXJFLEVBR2pCOUUsS0FBSzhILFVBQVkrQixZQUFZRCxNQUFROUUsRUFBSTlFLEtBQUsrSCxLQUdsRHVDLG1CQUNBLE9BQU90SyxLQUFLK0gsS0FFWnVDLGlCQUFhdkMsR0FDYi9ILEtBQUsrSCxLQUFPQSxHRW5KcEIsTUFBTXdDLEVBQ0dDLEdBQXNCLElBQVZBLEVDQ2ZDLEVBQWlCckcsR1pFRCxDQUFDQSxHQUFXTyxNQUFNQyxRQUFRUixJQUFXQyxFQUFTRCxFQUFPLElZRnpDc0csQ0FBY3RHLEdBQVV1RyxFQUFvQnZHLEdBQVVBLEVBQ2xGdUcsRUFBc0IsRUFBRTFILEVBQUdDLEVBQUcwSCxFQUFHQyxLQUFPLGdCQUFnQjVILE1BQU1DLE1BQU0wSCxNQUFNQyxLQ0gxRUMsRUFBaUJqRCxHQUFja0QsU0FBU0MsY0FBYyxPQUFPQyxRQUFRcEQsRUFBVyxDQUFFN0QsU0FBVSxPQUM1RmtILEVBQWUsQ0FDakJDLG9CQUFxQixJQUFxQixvQkFBUkMsS0FDOUJDLE9BQU9DLGVBQWU5QixLQUFLNEIsSUFBSyxvQkFDcENHLE1BQU8sSUFBTUYsT0FBT0MsZUFBZTlCLEtBQUtnQyxRQUFRQyxVQUFXLFdBQzNEQyxpQkFBa0IsS0FDZCxJQUNJWixFQUFjLENBQUVhLFFBQVMsQ0FBQyxLQUU5QixNQUFPQyxHQUNILE9BQU8sRUFFWCxPQUFPLEdBRVgzTCxTQUFVLElBQU11RSxRQUFRc0csRUFBYyxDQUFFYSxRQUFTLENBQUMsRUFBRyxLQUFNMUwsV0FFekQ0TCxFQUFVLEdBQ1ZDLEVBQVcsR0FDakIsSUFBSyxNQUFNQyxLQUFPYixFQUNkWSxFQUFTQyxHQUFPLFVBQ1N6TCxJQUFqQnVMLEVBQVFFLEtBQ1JGLEVBQVFFLEdBQU9iLEVBQWFhLE1BQ3pCRixFQUFRRSxJQ2R2QixNQUFNQyxFQUFpQm5FLEdBQWNsRCxNQUFNQyxRQUFRaUQsR0FBYUEsRUFBWSxDQUFDQSxHQ043RSxTQUFTb0UsRUFBYUYsR0FHbEIsT0FGSWpLLEVBQWVpSyxLQUNmQSxFQUFNakssRUFBZWlLLElBQ2xCMUksRUFBWTBJLEdBQU9uSixFQUFrQm1KLEdBQU9BLEVDRHZELE1BQU1HLEVBQVEsQ0FDVmxMLElBQUssQ0FBQ04sRUFBU21DLEtBQ1hBLEVBQU9vSixFQUFhcEosR0FDcEIsSUFBSXlCLEVBQVFWLEVBQVNmLEdBQ2ZuQyxFQUFRd0wsTUFBTUMsaUJBQWlCdEosR0FDL0J1SixpQkFBaUIxTCxHQUFTbUMsR0FDaEMsSUFBS3lCLEdBQW1CLElBQVZBLEVBQWEsQ0FDdkIsTUFBTTRCLEVBQWF2RCxFQUFxQjNCLElBQUk2QixHQUN4Q3FELElBQ0E1QixFQUFRNEIsRUFBVzlELGNBRTNCLE9BQU9rQyxHQUVYMUQsSUFBSyxDQUFDRixFQUFTbUMsRUFBTXlCLEtBQ2pCekIsRUFBT29KLEVBQWFwSixHQUNoQmUsRUFBU2YsR0FDVG5DLEVBQVF3TCxNQUFNRyxZQUFZeEosRUFBTXlCLEdBR2hDNUQsRUFBUXdMLE1BQU1ySixHQUFReUIsSUN2QmxDLFNBQVNnSSxFQUFjdk0sRUFBV3dNLEdBQWMsR0FDNUMsR0FBS3hNLEdBQXFDLGFBQXhCQSxFQUFVa0ksVUFHNUIsSUFDUWxJLEVBQVVpSyxLQUNWakssRUFBVWlLLFFBR1Z1QyxHQUFleE0sRUFBVXFLLGVBQ3pCckssRUFBVW1LLFVBR2xCLE1BQU8wQixLQ0VYLFNBQVNZLEVBQWE5TCxFQUFTcUwsRUFBS1UsRUFBcUJDLEVBQVUsSUFDL0QsTUFBTUMsRUFIQ0MsT0FBT0MsMEJBSVJDLEdBQWlDLElBQW5CSixFQUFRQyxRQUFvQkEsRUFDaEQsSUFBSTVNLEdBQ0EsU0FBRWlFLEVBQVdELEVBQVNDLFNBQVEsTUFBRUMsRUFBUUYsRUFBU0UsTUFBSyxTQUFFQyxFQUFXSCxFQUFTRyxTQUFRLE9BQUVDLEVBQVNKLEVBQVNJLE9BQU0sT0FBRUMsRUFBU0wsRUFBU0ssT0FBTSxVQUFFb0MsRUFBUyxPQUFFYyxFQUFNLHdCQUFFeUYsR0FBMEIsR0FBV0wsRUFDdE0sTUFBTW5NLEVBQU9FLEVBQWlCQyxHQUM5QixJQUFJc00sRUFBcUJsQixFQUFTUCxRQUNsQyxNQUFNMEIsRUFBbUI1SixFQUFZMEksR0FLckNrQixHckIrQjBCLEVBQUN2TSxFQUFTbUMsS0FFaENmLEVBQWVlLEtBQ2ZBLEVBQU9mLEVBQWVlLElBQzFCLE1BQU0sV0FBRWhDLEdBQWVKLEVBQWlCQyxHQUN4Q1UsRUFBY1AsRUFBWWdDLEdBSzFCbkMsRUFBUXdMLE1BQU1nQixVQUFZNUosRUFBdUJ6QyxJcUJ6QzdCc00sQ0FBc0J6TSxFQUFTcUwsR0FDbkQsTUFBTWxKLEVBQU9vSixFQUFhRixHQUNwQnFCLEV4QmpCVixTQUF3QkMsRUFBY3hLLEdBSWxDLE9BSEt3SyxFQUFhMU0sSUFBSWtDLElBQ2xCd0ssRUFBYXpNLElBQUlpQyxFQUFNLElBQUloRCxHQUV4QndOLEVBQWFyTSxJQUFJNkIsR3dCYUp5SyxDQUFlL00sRUFBS08sT0FBUStCLEdBSzFDcUQsRUFBYXZELEVBQXFCM0IsSUFBSTZCLEdBWTVDLE9BTEF5SixFQUFjYyxFQUFZck4sWUFBYXdFLEVBQWtCSCxJQUFXZ0osRUFBWS9NLGFBQ3pELElBQW5CcU0sRUFBUUMsUUFJTCxLQUNILE1BQU1ZLEVBQW1CLEtBQVEsSUFBSXJFLEVBQUlzRSxFQUFJLE9BQW1LLFFBQTNKQSxFQUF5QyxRQUFuQ3RFLEVBQUtnRCxFQUFNbEwsSUFBSU4sRUFBU21DLFVBQTBCLElBQVBxRyxFQUFnQkEsRUFBS2hELE1BQUFBLE9BQStDLEVBQVNBLEVBQVc5RCxvQkFBaUMsSUFBUG9MLEVBQWdCQSxFQUFLLEdBSzdPLElBQUkzRixFSnBEWixTQUEwQkEsRUFBVzBGLEdBQ2pDLElBQUssSUFBSTdILEVBQUksRUFBR0EsRUFBSW1DLEVBQVVWLE9BQVF6QixJQUNiLE9BQWpCbUMsRUFBVW5DLEtBQ1ZtQyxFQUFVbkMsR0FBS0EsRUFBSW1DLEVBQVVuQyxFQUFJLEdBQUs2SCxLQUc5QyxPQUFPMUYsRUk4Q2E0RixDQUFpQnpCLEVBQWNTLEdBQXNCYyxHQUNyRSxHQUFJaEosRUFBa0JILEdBQVMsQ0FDM0IsTUFBTWlFLEVBQVNqRSxFQUFPSyxnQkFBZ0JvRCxFQUFXMEYsRUFBa0JOLEVBQWtCcEssRUFBTXVLLEdBQzNGaEosRUFBU2lFLEVBQU9qRSxZQUNTOUQsSUFBckIrSCxFQUFPUixZQUNQQSxFQUFZUSxFQUFPUixnQkFDQ3ZILElBQXBCK0gsRUFBT3JFLFdBQ1BBLEVBQVdxRSxFQUFPckUsVUFtQjFCLEdBWklKLEVBQVNmLEtBQ0xpSixFQUFTWCxzQnBCL0R6QixTQUE2QnRJLEdBQ3pCLElBQUlpQixFQUFxQm5ELElBQUlrQyxHQUE3QixDQUVBaUIsRUFBcUI0SixJQUFJN0ssR0FDekIsSUFDSSxNQUFNLE9BQUVWLEVBQU0sYUFBRUMsR0FBaUJPLEVBQXFCaEMsSUFBSWtDLEdBQ3BERixFQUFxQjNCLElBQUk2QixHQUN6QixHQUNOdUksSUFBSXVDLGlCQUFpQixDQUNqQjlLLEtBQUFBLEVBQ0ErSyxVQUFVLEVBQ1Z6TCxPQUFBQSxFQUNBQyxhQUFBQSxJQUdSLE1BQU93SixNb0JpREtpQyxDQUFvQmhMLEdBR3BCbUssR0FBcUIsR0FPekJBLEVBQW9CLENBS2hCOUcsSUFDQTJCLEVBQVlBLEVBQVVrQixLQUFLekUsR0FBVUQsRUFBU0MsR0FBUzRCLEVBQVc3RCxjQUFjaUMsR0FBU0EsS0FNcEUsSUFBckJ1RCxFQUFVVixRQUNSMkUsRUFBU0oscUJBQXNCb0IsR0FDakNqRixFQUFVaUcsUUFBUVAsS0FFdEIsTUFBTVEsRUFBbUIsQ0FDckI5SixNQUFPc0csRUFBUXRHLEdBQ2ZELFNBQVV1RyxFQUFRdkcsR0FDbEJFLFNBQVVxRyxFQUFRckcsR0FDbEJFLE9BQVNNLEVBQWFOLFFBQWtDOUQsRUFBeEJtSyxFQUFjckcsR0FDOUNvQyxVQUFBQSxFQUNBd0gsV0FBWTdKLEVBQVMsRUFDckI4SixLQUFNLFFBRVZsTyxFQUFZVyxFQUFRdUssUUFBUSxDQUN4QixDQUFDcEksR0FBT2dGLEVBQ1JQLE9BQUFBLEVBQ0FsRCxPQUFRTSxFQUFhTixHQUFVQSxFQUFPMkUsSUFBSTBCLFFBQWlCbkssR0FDNUR5TixHQUlFaE8sRUFBVUUsV0FDWEYsRUFBVUUsU0FBVyxJQUFJaUksU0FBUSxDQUFDQyxFQUFTQyxLQUN2Q3JJLEVBQVVtTyxTQUFXL0YsRUFDckJwSSxFQUFVb08sU0FBVy9GLE1BRzdCLE1BQU1nRyxFQUFTdkcsRUFBVUEsRUFBVVYsT0FBUyxHQUM1Q3BILEVBQVVFLFNBQ0xDLE1BQUssS0FFTmdNLEVBQU10TCxJQUFJRixFQUFTbUMsRUFBTXVMLEdBRXpCck8sRUFBVW1LLFlBRVQ5SixNQUFNYSxHQVVOOEwsSUFDRGhOLEVBQVV1SyxhQUFlLGVBTTVCLEdBQUkyQyxFQUtMcEYsRUFBWUEsRUFBVWtCLEtBQUt6RSxHQUEyQixpQkFBVkEsRUFBcUJ5QyxXQUFXekMsR0FBU0EsSUFLNUQsSUFBckJ1RCxFQUFVVixRQUNWVSxFQUFVaUcsUUFBUS9HLFdBQVd3RyxNQU9qQ3hOLEVBQVksSUFBSTJILEdBTEE2QixJQUNSckQsSUFDQXFELEVBQVNyRCxFQUFXN0QsY0FBY2tILElBQ3RDMkMsRUFBTXRMLElBQUlGLEVBQVNtQyxFQUFNMEcsS0FFSzFCLEVBQVd3RCxPQUFPZ0QsT0FBT2hELE9BQU9nRCxPQUFPLEdBQUkzQixHQUFVLENBQUUxSSxTQUFBQSxFQUNyRkksT0FBQUEsU0FFSCxDQUNELE1BQU1nSyxFQUFTdkcsRUFBVUEsRUFBVVYsT0FBUyxHQUM1QytFLEVBQU10TCxJQUFJRixFQUFTbUMsRUFBTXFELEdBQWM3QixFQUFTK0osR0FDMUNsSSxFQUFXN0QsY0FBYytMLEdBQ3pCQSxHQVlWLE9BVkl0QixHQUNBSCxFQUFPak0sRUFBU3FMLEVBQUtsRSxFQUFXLENBQzVCN0QsU0FBQUEsRUFDQUMsTUFBT0EsRUFDUEcsT0FBQUEsRUFDQUQsT0FBQUEsRUFDQW1ELE9BQUFBLEdBQ0QsY0FFUDhGLEVBQVl0TixhQUFhQyxHQUNsQkEsR0NuTGYsTUFBTXVPLEVBQWEsQ0FBQzVCLEVBQVNYLElBTTdCVyxFQUFRWCxHQUFPVixPQUFPZ0QsT0FBT2hELE9BQU9nRCxPQUFPLEdBQUkzQixHQUFVQSxFQUFRWCxJQUFRVixPQUFPZ0QsT0FBTyxHQUFJM0IsR0NOM0YsU0FBUzZCLEVBQWdCQyxFQUFVQyxHQUMvQixJQUFJdkYsRUFnQkosTUFmd0IsaUJBQWJzRixFQUNIQyxHQUNtQyxRQUFsQ3ZGLEVBQUt1RixFQUFjRCxVQUE4QixJQUFQdEYsSUFBc0J1RixFQUFjRCxHQUFZekQsU0FBUzJELGlCQUFpQkYsSUFDckhBLEVBQVdDLEVBQWNELElBR3pCQSxFQUFXekQsU0FBUzJELGlCQUFpQkYsR0FHcENBLGFBQW9CaEQsVUFDekJnRCxFQUFXLENBQUNBLElBS1Q3SixNQUFNZ0ssS0FBS0gsR0FBWSxJQ2RsQyxNQUFNL0osRUFBbUJtSyxHQUFZQSxJQUMvQkMsR0FBNEIsQ0FBQ0MsRUFBa0I5SyxFQUFXRCxFQUFTQyxXQUFhLElBQUkrSyxNQUFNLENBQzVGQyxXQUFZRixFQUFpQi9GLElBQUl0RSxHQUFpQndLLE9BQU96SyxTQUN6RFIsU0FBQUEsR0FDRGtMLElBT0dBLEdBQVcsQ0FDYmxPLElBQUssQ0FBQ29OLEVBQVFyQyxLQUNWLE1BQU1vRCxFQUFxQ2YsRUFIUFksV0FBVyxHQUkvQyxPQUFRakQsR0FDSixJQUFLLFdBQ0QsT0FBT3FDLEVBQU9wSyxTQUNsQixJQUFLLGNBQ0QsSUFBSXVHLEdBQVE0RSxNQUFBQSxPQUF5RCxFQUFTQSxFQUFnQnBELEtBQVMsRUFDdkcsT0FBT3hCLEVBQU9BLEVBQU8sSUFBTyxFQUNoQyxJQUFLLGVBQ0wsSUFBSyxZQUNELE9BQU80RSxNQUFBQSxPQUF5RCxFQUFTQSxFQUFnQnBELEdBQzdGLElBQUssV0FJRCxPQUhLcUMsRUFBT25PLFdBQ1JtTyxFQUFPbk8sU0FBV2lJLFFBQVFrSCxJQUFJaEIsRUFBT1ksV0FBV2pHLElBQUlzRyxLQUFpQmpQLE1BQU1hLElBRXhFbU4sRUFBT25PLFNBQ2xCLElBQUssT0FDRCxNQUFPLElBQU1tTyxFQUFPWSxXQUFXbE0sU0FBUy9DLEdBQWN1TSxFQUFjdk0sS0FDeEUsUUFDSSxZQUEyRyxLQUE1Rm9QLE1BQUFBLE9BQXlELEVBQVNBLEVBQWdCcEQsU0FDM0Z6TCxFQUNBLElBQU04TixFQUFPWSxXQUFXbE0sU0FBUy9DLEdBQWNBLEVBQVVnTSxTQUczRW5MLElBQUssQ0FBQ3dOLEVBQVFyQyxFQUFLekgsS0FDZixPQUFReUgsR0FDSixJQUFLLGNBQ0R6SCxFQUFRaUcsRUFBUWpHLEdBQ3BCLElBQUssY0FDTCxJQUFLLGVBQ0QsSUFBSyxJQUFJb0IsRUFBSSxFQUFHQSxFQUFJMEksRUFBT1ksV0FBVzdILE9BQVF6QixJQUMxQzBJLEVBQU9ZLFdBQVd0SixHQUFHcUcsR0FBT3pILEVBRWhDLE9BQU8sRUFFZixPQUFPLElBR1QrSyxHQUFrQnRQLEdBQWNBLEVBQVVFLFNDbERoRCxTQUFTcVAsR0FBUXRMLEVBQVcsSUFBSyxNQUFFdUwsRUFBUSxFQUFDLEtBQUVaLEVBQU8sRUFBQyxPQUFFdkssR0FBVyxJQUMvRCxNQUFPLENBQUNzQixFQUFHOEosS0FDUCxNQUFNQyxFQUFZcEwsRUFBU3NLLEdBQVFBLEVBVzNDLFNBQXNCQSxFQUFNYSxHQUN4QixHQUFhLFVBQVRiLEVBQ0EsT0FBTyxFQUVOLENBQ0QsTUFBTWUsRUFBWUYsRUFBUSxFQUMxQixNQUFnQixTQUFUYixFQUFrQmUsRUFBWUEsRUFBWSxHQWpCUEMsQ0FBYWhCLEVBQU1hLEdBQ3ZESSxFQUFXakssS0FBS0MsSUFBSTZKLEVBQVkvSixHQUN0QyxJQUFJekIsRUFBUUQsRUFBVzRMLEVBQ3ZCLEdBQUl4TCxFQUFRLENBQ1IsTUFBTXlMLEVBQVdMLEVBQVF4TCxFQUV6QkMsRUFEdUJnQyxFQUFrQjdCLEVBQ2pDMEwsQ0FBZTdMLEVBQVE0TCxHQUFZQSxFQUUvQyxPQUFPTixFQUFRdEwsR0FZdkIsU0FBUzhMLEdBQWNDLEVBQVF0SyxFQUFHOEosR0FDOUIsTUFBeUIsbUJBQVhRLEVBQ1JBLEVBQU90SyxFQUFHOEosR0FDVlEsRUN0QlYsU0FBUy9FLEdBQVF1RCxFQUFVM0csRUFBVzZFLEVBQVUsSUFFNUMsTUFBTXVELEdBRE56QixFQUFXRCxFQUFnQkMsSUFDRXJILE9BSXZCK0ksRUFBcUIsR0FDM0IsSUFBSyxJQUFJeEssRUFBSSxFQUFHQSxFQUFJdUssRUFBYXZLLElBQUssQ0FDbEMsTUFBTWhGLEVBQVU4TixFQUFTOUksR0FDekIsSUFBSyxNQUFNcUcsS0FBT2xFLEVBQVcsQ0FDekIsTUFBTXNJLEVBQWU3QixFQUFXNUIsRUFBU1gsR0FDekNvRSxFQUFhbE0sTUFBUThMLEdBQWNJLEVBQWFsTSxNQUFPeUIsRUFBR3VLLEdBQzFELE1BQU1sUSxFQUFZeU0sRUFBYTlMLEVBQVNxTCxFQUFLbEUsRUFBVWtFLEdBQU1vRSxHQUM3REQsRUFBbUIxTyxLQUFLekIsSUFHaEMsT0FBTzhPLEdBQTBCcUIsRUFVakN4RCxFQUFRMUksa0NDOUJaLFNBQVNvTSxHQUFhQyxFQUFTQyxFQUFNQyxFQUFNQyxHQUN2QyxJQUFJdEgsRUFDSixPQUFJN0UsRUFBU2lNLEdBQ0ZBLEVBRUZBLEVBQUt6TSxXQUFXLE1BQVF5TSxFQUFLek0sV0FBVyxLQUN0QzhCLEtBQUtpQixJQUFJLEVBQUd5SixFQUFVdEosV0FBV3VKLElBRTFCLE1BQVRBLEVBQ0VDLEVBRzRCLFFBQTNCckgsRUFBS3NILEVBQU94UCxJQUFJc1AsVUFBMEIsSUFBUHBILEVBQWdCQSxFQUFLbUgsRUNEeEUsU0FBU0ksR0FBYUMsRUFBVTdJLEVBQVd6RCxFQUFRa0QsRUFBUVEsRUFBVzZJLElBVnRFLFNBQXdCRCxFQUFVNUksRUFBVzZJLEdBQ3pDLElBQUssSUFBSWpMLEVBQUksRUFBR0EsRUFBSWdMLEVBQVN2SixPQUFRekIsSUFBSyxDQUN0QyxNQUFNa0wsRUFBV0YsRUFBU2hMLEdBQ3RCa0wsRUFBU0MsR0FBSy9JLEdBQWE4SSxFQUFTQyxHQUFLRixJQUN6Q2xQLEVBQVdpUCxFQUFVRSxHQUVyQmxMLE1BVVJvTCxDQUFlSixFQUFVNUksRUFBVzZJLEdBQ3BDLElBQUssSUFBSWpMLEVBQUksRUFBR0EsRUFBSW1DLEVBQVVWLE9BQVF6QixJQUNsQ2dMLEVBQVNsUCxLQUFLLENBQ1Y4QyxNQUFPdUQsRUFBVW5DLEdBQ2pCbUwsR0FBSXpKLEVBQUlVLEVBQVc2SSxFQUFTckosRUFBTzVCLElBQ25DdEIsT0FBUTRDLEVBQW9CNUMsRUFBUXNCLEtDeEJoRCxTQUFTcUwsR0FBYzlOLEVBQUdDLEdBQ3RCLE9BQUlELEVBQUU0TixLQUFPM04sRUFBRTJOLEdBQ1EsT0FBWjVOLEVBQUVxQixNQUFpQixHQUFLLEVBR3hCckIsRUFBRTROLEdBQUszTixFQUFFMk4sR0NTeEIsU0FBU0csR0FBUzlLLEVBQVl3RyxFQUFVLElBQ3BDLElBQUl4RCxFQUNKLE1BQU0rSCxFQVdWLFNBQXNDL0ssRUFBWWdELEVBQUssSUFDbkQsSUFBSSxlQUFFZ0ksRUFBaUIsSUFBT2hJLEVBQUlpSSxHQUFrQixLQUFBQyxRQUFPbEksRUFBSSxDQUFDLG1CQUNoRSxNQUFNK0gsRUFBdUIsR0FDdkJJLEVBQW1CLElBQUl0USxJQUN2QnVRLEVBQWUsR0FDZkMsRUFBYSxJQUFJeFEsSUFDdkIsSUFBSXlRLEVBQVcsRUFDWG5ILEVBQWMsRUFDZDlCLEVBQWdCLEVBTXBCLElBQUssSUFBSTdDLEVBQUksRUFBR0EsRUFBSVEsRUFBV2lCLE9BQVF6QixJQUFLLENBQ3hDLE1BQU0rTCxFQUFVdkwsRUFBV1IsR0FJM0IsRzNCN0NxQyxpQjJCNkN4QitMLEVBQVUsQ0FDbkJGLEVBQVczUSxJQUFJNlEsRUFBU3BILEdBQ3hCLFNBRUMsSUFBSzFGLE1BQU1DLFFBQVE2TSxHQUFVLENBQzlCRixFQUFXM1EsSUFBSTZRLEVBQVE1TyxLQUFNdU4sR0FBYS9GLEVBQWFvSCxFQUFRWixHQUFJVyxFQUFVRCxJQUM3RSxTQUVKLE1BQU9HLEVBQW1CN0osRUFBVzZFLEVBQVUsSUFBTStFLE9BS2xDblIsSUFBZm9NLEVBQVFtRSxLQUNSeEcsRUFBYytGLEdBQWEvRixFQUFhcUMsRUFBUW1FLEdBQUlXLEVBQVVELElBTWxFLElBQUlJLEVBQWMsRUFLbEIsTUFBTW5ELEVBQVdELEVBQWdCbUQsRUFBbUJKLEdBQzlDckIsRUFBY3pCLEVBQVNySCxPQUM3QixJQUFLLElBQUl5SyxFQUFlLEVBQUdBLEVBQWUzQixFQUFhMkIsSUFBZ0IsQ0FDbkUsTUFDTUMsR0E0R1VuUixFQTdHQThOLEVBQVNvRCxLQTZHQUUsRUE1RzJCVCxHQTZHakQxUSxJQUFJRCxJQUFZb1IsRUFBVWxSLElBQUlGLEVBQVMsSUFDM0NvUixFQUFVOVEsSUFBSU4sSUE3R2IsSUFBSyxNQUFNcUwsS0FBT2xFLEVBQVcsQ0FDekIsTUFBTWtLLEVBQWdCQyxHQUFpQmpHLEVBQUs4RixHQUM1QyxJQUFJSSxFQUFpQmpHLEVBQWNuRSxFQUFVa0UsSUFDN0MsTUFBTW9FLEVBQWU3QixFQUFXNUIsRUFBU1gsR0FDekMsSUFBSSxTQUFFL0gsRUFBV2tOLEVBQWVsTixVQUFZRCxFQUFTQyxTQUFRLE9BQUVJLEVBQVM4TSxFQUFlOU0sUUFBVUwsRUFBU0ssUUFBWStMLEVBQ3RILEdBQUk1TCxFQUFrQkgsR0FBUyxDQUMzQixNQUFNNkksRUFBbUI1SixFQUFZMEksSUFDckMsS0FBQW1HLFdBQW9DLElBQTFCRCxFQUFlOUssU0FBaUI4RixFQUFrQix1REFDNUQsTUFBTTVFLEVBQVNqRSxFQUFPSyxnQkFBZ0J3TixHQUd0QyxJQUFNLEtBQUtoRixHQUNYN0ksRUFBU2lFLEVBQU9qRSxZQUNTOUQsSUFBckIrSCxFQUFPUixZQUNQb0ssRUFBaUI1SixFQUFPUixnQkFDSnZILElBQXBCK0gsRUFBT3JFLFdBQ1BBLEVBQVdxRSxFQUFPckUsVUFFMUIsTUFBTUMsRUFBUThMLEdBQWNyRCxFQUFRekksTUFBTzJOLEVBQWMzQixJQUFnQixFQUNuRW5JLEVBQVl1QyxFQUFjcEcsRUFDMUJrTyxFQUFhckssRUFBWTlELEVBSS9CLElBQUksT0FBRXNELEVBQVNHLEVBQWN3SyxFQUFlOUssU0FBWWdKLEVBTWxDLElBQWxCN0ksRUFBT0gsUUFBOEIsSUFBZEcsRUFBTyxLQUM5QkEsRUFBTyxHQUFLLEdBS2hCLE1BQU1vQixFQUFZdkIsT0FBUzhLLEVBQWU5SyxPQUMxQ3VCLEVBQVksR0FBS3JCLEVBQVdDLEVBQVFvQixHQU1WLElBQTFCdUosRUFBZTlLLFFBQWdCOEssRUFBZW5FLFFBQVEsTUFJdEQyQyxHQUFhc0IsRUFBZUUsRUFBZ0I3TixFQUFRa0QsRUFBUVEsRUFBV3FLLEdBQ3ZFUixFQUFjaE0sS0FBS2lCLElBQUkzQyxFQUFRRCxFQUFVMk4sR0FDekNwSixFQUFnQjVDLEtBQUtpQixJQUFJdUwsRUFBWTVKLElBRzdDaUosRUFBV25ILEVBQ1hBLEdBQWVzSCxFQXNEdkIsSUFBNEJqUixFQUFTb1IsRUFGakMsT0EvQ0FULEVBQWlCdk8sU0FBUSxDQUFDc1AsRUFBZ0IxUixLQUN0QyxJQUFLLE1BQU1xTCxLQUFPcUcsRUFBZ0IsQ0FDOUIsTUFBTUwsRUFBZ0JLLEVBQWVyRyxHQUlyQ2dHLEVBQWN4TyxLQUFLd04sSUFDbkIsTUFBTWxKLEVBQVksR0FDWndLLEVBQWMsR0FDZEMsRUFBYyxHQUtwQixJQUFLLElBQUk1TSxFQUFJLEVBQUdBLEVBQUlxTSxFQUFjNUssT0FBUXpCLElBQUssQ0FDM0MsTUFBTSxHQUFFbUwsRUFBRSxNQUFFdk0sRUFBSyxPQUFFRixHQUFXMk4sRUFBY3JNLEdBQzVDbUMsRUFBVXJHLEtBQUs4QyxHQUNmK04sRUFBWTdRLEtBQUtpRixFQUFTLEVBQUc4QixFQUFlc0ksSUFDNUN5QixFQUFZOVEsS0FBSzRDLEdBQVVMLEVBQVNLLFFBT2pCLElBQW5CaU8sRUFBWSxLQUNaQSxFQUFZdkUsUUFBUSxHQUNwQmpHLEVBQVVpRyxRQUFRakcsRUFBVSxJQUM1QnlLLEVBQVl4RSxRQUFRLFdBT29CLElBQXhDdUUsRUFBWUEsRUFBWWxMLE9BQVMsS0FDakNrTCxFQUFZN1EsS0FBSyxHQUNqQnFHLEVBQVVyRyxLQUFLLE9BRW5CeVAsRUFBcUJ6UCxLQUFLLENBQ3RCZCxFQUNBcUwsRUFDQWxFLEVBQ0F3RCxPQUFPZ0QsT0FBT2hELE9BQU9nRCxPQUFPaEQsT0FBT2dELE9BQU8sR0FBSTZDLEdBQWlCLENBQUVsTixTQUFVdUUsRUFBZW5FLE9BQVFrTyxFQUFhaEwsT0FBUStLLElBQWdCbEIsU0FJNUlGLEVBcktzQnNCLENBQTZCck0sRUFBWXdHLEdBSWhFd0QsRUFBcUJlLEVBQ3RCbEksS0FBSzdDLEdBQWVzRyxLQUFnQnRHLEtBQ3BDK0ksT0FBT3pLLFNBQ1osT0FBT3FLLEdBQTBCcUIsRUFFRSxRQUFsQ2hILEVBQUsrSCxFQUFxQixVQUF1QixJQUFQL0gsT0FBZ0IsRUFBU0EsRUFBRyxHQUFHbEYsVUFrSzlFLFNBQVNnTyxHQUFpQm5QLEVBQU1pUCxHQUc1QixPQUZLQSxFQUFValAsS0FDWGlQLEVBQVVqUCxHQUFRLElBQ2ZpUCxFQUFValAsR0MzTHJCLFNBQVMyUCxHQUFzQkMsRUFBYzNOLEVBQUd1TCxHQUM1QyxNQUFNcUMsRUFBUS9NLEtBQUtpQixJQUFJOUIsRUFGWCxFQUV3QixHQUNwQyxPQ0N1QjZOLEVEREV0QyxFQUFVb0MsRUFBYUMsSUNDZkUsRUREdUI5TixFQUFJNE4sR0NFckNDLEdBQVksSUFBT0MsR0FBaUIsRUFEL0QsSUFBMkJELEVBQVVDLEVDQXJDLE1BQU1DLEdBQVMsRUFBR0MsVUFBQUEsRUNMSCxJREttQ0MsUUFBQUEsRUNKckMsR0RJaUVDLEtBQUFBLEVDSHBFLEVERzBGckUsS0FBQUEsRUFBTyxFQUFHc0UsR0FBQUEsRUFBSyxFQUFHTixTQUFBQSxFQUFXLEVBQUtPLFVBQUFBLEVBQVksRUFBR0MsYUFBQUEsRUFBZSxJQUFTLE1BQ3pLUixFQUFXQSxFQUFrQkEsRW5CTE8sSW1CS0ssRUFDekMsTUFBTVMsRUFBUSxDQUNWQyxNQUFNLEVBQ05DLGtCQUFrQixFQUNsQmpELFFBQVMxQixFQUNUUCxPQUFRNkUsR0FFTk0sRUFBZU4sRUFBS3RFLEVBQ3BCNkUsRUFBc0I3TixLQUFLOE4sS0FBS1gsRUFBWUUsR0FBUSxJQUNwRFUsRUVkZSxFQUFDWixFRERYLElDQzJDQyxFREE3QyxHQ0F5RUMsRURDNUUsSUNEcUdELEdBQVcsRUFBSXBOLEtBQUs4TixLQUFLWCxFQUFZRSxJRmMzSFcsQ0FBaUJiLEVBQVdDLEVBQVNDLEdBQzFELElBQUlZLEVBQ0osR0FBSUYsRUFBZSxFQUFHLENBQ2xCLE1BQU1HLEVBQWNMLEVBQXNCN04sS0FBSzhOLEtBQUssRUFBSUMsRUFBZUEsR0FFdkVFLEVBQWlCOU8sR0FBTW1PLEVBQ25CdE4sS0FBS21PLEtBQUtKLEVBQWVGLEVBQXNCMU8sS0FDNUI0TyxFQUFlRixFQUFzQkQsRUFBaERaLEdBQ0FrQixFQUNBbE8sS0FBS29PLElBQUlGLEVBQWMvTyxHQUN2QnlPLEVBQWU1TixLQUFLcU8sSUFBSUgsRUFBYy9PLFNBSWxEOE8sRUFBaUI5TyxHQUNMbU8sRUFDSnROLEtBQUttTyxLQUFLTixFQUFzQjFPLElBQzNCeU8sR0FBNEJDLEVBQXNCRCxFQUFqQ1osR0FBaUQ3TixHQUduRixPQUFRQSxJQUNKc08sRUFBTS9DLFFBQVV1RCxFQUFjOU8sR0FDOUIsTUFBTW1QLEVBQXdCLElBQU5uUCxFQUNsQjZOLEVBQ0FILEdBQXNCb0IsRUFBZTlPLEVBQUdzTyxFQUFNL0MsU0FDOUM2RCxFQUEyQnZPLEtBQUtDLElBQUlxTyxJQUFvQmYsRUFDeERpQixFQUErQnhPLEtBQUtDLElBQUlxTixFQUFLRyxFQUFNL0MsVUFBWThDLEVHMUM3RSxJQUEwQmlCLEVBQVFoRyxFQUFRaUMsRUg2Q2xDLE9BRkErQyxFQUFNQyxLQUFPYSxHQUE0QkMsRUFDekNmLEVBQU1FLGtCRzVDWWMsRUg0Q3dCekYsRUc1Q2hCUCxFSDRDc0I2RSxFRzVDZDVDLEVINENrQitDLEVBQU0vQyxRRzNDckQrRCxFQUFTaEcsR0FBVWlDLEdBQVdqQyxHQUNsQ2dHLEVBQVNoRyxHQUFVaUMsR0FBV2pDLEdIMkN4QmdGLElJM0NmLFNBQVNpQixHQUFzQkMsR0FDM0IsTUFBTUMsRUFBaUIsSUFBSS9ULFFBQzNCLE1BQU8sQ0FBQ2tNLEVBQVUsTUFDZCxNQUFNOEgsRUFBaUIsSUFBSXpULElBQ3JCMFQsRUFBZSxDQUFDOUYsRUFBTyxFQUFHc0UsRUFBSyxJQUFLTixFQUFXLEVBQUcrQixHQUFVLEtBQzlELE1BQU0zSSxFQUFNLEdBQUc0QyxLQUFRc0UsS0FBTU4sS0FBWStCLElBTXpDLE9BTEtGLEVBQWU3VCxJQUFJb0wsSUFDcEJ5SSxFQUFlNVQsSUFBSW1MLEVBQUt1SSxFQUFnQmpKLE9BQU9nRCxPQUFPLENBQUVNLEtBQUFBLEVBQ3BEc0UsR0FBQUEsRUFDQU4sU0FBQUEsRUFBVU8sVUFBV3dCLEVBQVUsSUFBTyxFQUFHdkIsYUFBY3VCLEVBQVUsSUFBTyxJQUFPaEksS0FFaEY4SCxFQUFleFQsSUFBSStLLElBRXhCNEksRUFBZ0J0VSxJQUNia1UsRUFBZTVULElBQUlOLElBQ3BCa1UsRUFBZTNULElBQUlQLEVDZm5DLFNBQThCQSxHQUMxQixJQUFJdVUsRUFDQTNMLEVBSlMsR0FLVG1LLEVBQVEvUyxFQUFVLEdBQ3RCLE1BQU13SCxFQUFZLENBQUN1TCxFQUFNL0MsU0FDekIsTUFBUStDLEVBQU1DLE1BQVFwSyxFQU5OLEtBT1ptSyxFQUFRL1MsRUFBVTRJLEdBQ2xCcEIsRUFBVXJHLEtBQUs0UixFQUFNQyxLQUFPRCxFQUFNaEYsT0FBU2dGLEVBQU0vQyxjQUN2Qi9QLElBQXRCc1UsR0FBbUN4QixFQUFNRSxtQkFDekNzQixFQUFvQjNMLEdBRXhCQSxHQWJTLEdBZWIsTUFBTWpGLEVBQVdpRixFQWZKLEdBc0JiLE9BRnlCLElBQXJCcEIsRUFBVVYsUUFDVlUsRUFBVXJHLEtBQUs0UixFQUFNL0MsU0FDbEIsQ0FDSHhJLFVBQUFBLEVBQ0E3RCxTQUFVQSxFQUFXLElBQ3JCNFEsbUJBQW9CQSxNQUFBQSxFQUE2REEsRUFBb0I1USxHQUFZLEtEUjNFNlEsQ0FBcUJ4VSxJQUVoRGtVLEVBQWV2VCxJQUFJWCxJQUU5QixNQUFPLENBQ0hvRSxnQkFBaUIsQ0FBQ29ELEVBQVdpTixFQUFXQyxFQUFpQmxTLEVBQU11SyxLQUMzRCxJQUFJbEUsRUFBSXNFLEVBQ1IsSUFBSXdILEVBQ0osTUFBTUMsRUFBZXBOLEVBQVVWLE9BSS9CLEdBSHlCNE4sR0FDckJFLEdBQWdCLEdBQ2hCcE4sRUFBVXFOLE1BQU1DLElBQ0ksQ0FDcEIsTUFBTS9HLEVBQVN2RyxFQUFVb04sRUFBZSxHQUNsQ0csRUFBb0MsSUFBakJILEVBQXFCLEtBQU9wTixFQUFVLEdBQy9ELElBQUk4SyxFQUFXLEVBQ1h5QixFQUFTLEVBQ2IsTUFBTWlCLEVBQWdCakksTUFBQUEsT0FBaUQsRUFBU0EsRUFBWS9NLFVBQzVGLEdBQUlnVixFQUFlLENBS2YsTUFBTSxVQUFFdFYsRUFBUyxtQkFBRXVWLEdBQXVCbEksRUFDcEN0RixHQUFhL0gsTUFBQUEsT0FBNkMsRUFBU0EsRUFBVStILFlBQWN3TixHQUFzQixFQUNqSGpMLEdBQWV0SyxNQUFBQSxPQUE2QyxFQUFTQSxFQUFVc0ssY0FBZ0JSLFlBQVlELE1BQVE5QixFQUNuSHlOLEVBQXVCRixFQUFjaEwsR0FBYWdHLFFBQ3hEK0QsRUFBcUMsUUFBM0JsTCxFQUFLa00sU0FBcUMsSUFBUGxNLEVBQWdCQSxFQUFLcU0sR0FDN0MsSUFBakJOLEdBQ2tCLElBQWpCQSxHQUF1QyxPQUFqQnBOLEVBQVUsTUFDakM4SyxFQUFXSCxJQUF1QjFOLEdBQU11USxFQUFjdlEsR0FBR3VMLFNBQVNoRyxFQUFha0wsU0FJbkZuQixFQUFxQyxRQUEzQjVHLEVBQUs0SCxTQUFxQyxJQUFQNUgsRUFBZ0JBLEVBQUt6RyxXQUFXK04sS0FFakYsTUFBTXpVLEVBQVlvVSxFQUFhTCxFQUFRaEcsRUFBUXVFLEVBQVU5UCxNQUFBQSxPQUFtQyxFQUFTQSxFQUFLMlMsU0FBUyxVQUM3R0MsRUFBb0JkLEVBQWF0VSxHQUN2QzJVLEVBQVczSixPQUFPZ0QsT0FBT2hELE9BQU9nRCxPQUFPLEdBQUlvSCxHQUFvQixDQUFFclIsT0FBUSxXQUVyRWdKLElBQ0FBLEVBQVkvTSxVQUFZQSxFQUN4QitNLEVBQVlrSSxtQkFBcUJ6TCxZQUFZRCxZQUtqRG9MLEVBQVcsQ0FDUDVRLE9BQVEsT0FDUkosU0FIc0IyUSxFQUFhRixFQUFhLEVBQUcsTUFHdkJHLG1CQUdwQyxPQUFPSSxLQUt2QixNQUFNRyxHQUFrQjdRLEdBQTJCLGlCQUFWQSxFRXZFbkMsR0FBUytQLEdBQXNCeEIsSUNBL0IsR0FBUXdCLElDQ0EsRUFBRzFGLEtBQUFBLEVBQU8sRUFBR2dFLFNBQUFBLEVBQVcsRUFBSytDLE1BQUFBLEVBQVEsR0FBS0MsTUFBQUEsRUFBUSxLQUFPQyxjQUFBQSxFQUFlQyxnQkFBQUEsRUFBaUJDLGFBQUFBLEVBQWNuUCxJQUFBQSxFQUFLQyxJQUFBQSxFQUFLdU0sYUFBQUEsRUFBZSxHQUFLRCxVQUFBQSxNQUMvSXlDLEVBQVFwTCxFQUFRb0wsR0FDaEIsTUFBTXZDLEVBQVEsQ0FDVkUsa0JBQWtCLEVBQ2xCRCxNQUFNLEVBQ05oRCxRQUFTMUIsRUFDVFAsT0FBUU8sR0FHTm9ILEVBQW1CNVUsUUFDVGIsSUFBUnFHLEVBQ09DLE9BQ0N0RyxJQUFSc0csR0FFR2pCLEtBQUtDLElBQUllLEVBQU14RixHQUFLd0UsS0FBS0MsSUFBSWdCLEVBQU16RixHQUQvQndGLEVBQzBDQyxFQUV6RCxJQUFJb1AsRUFBWU4sRUFBUS9DLEVBQ3hCLE1BQU1zRCxFQUFRdEgsRUFBT3FILEVBQ2Y1SCxPQUEwQjlOLElBQWpCd1YsRUFBNkJHLEVBQVFILEVBQWFHLEdBQ2pFN0MsRUFBTWhGLE9BQVNBLEVBS1hBLElBQVc2SCxJQUNYRCxFQUFZNUgsRUFBU08sR0FDekIsTUFBTXVILEVBQWFwUixJQUFPa1IsRUFBWXJRLEtBQUttTyxLQUFLaFAsRUFBSTZRLEdBQzlDUSxFQUFjclIsR0FBTXNKLEVBQVM4SCxFQUFVcFIsR0FDdkNzUixFQUFpQnRSLElBQ25CLE1BQU11UixFQUFRSCxFQUFVcFIsR0FDbEJ5RSxFQUFTNE0sRUFBV3JSLEdBQzFCc08sRUFBTUMsS0FBTzFOLEtBQUtDLElBQUl5USxJQUFVbEQsRUFDaENDLEVBQU0vQyxRQUFVK0MsRUFBTUMsS0FBT2pGLEVBQVM3RSxHQVExQyxJQUFJK00sRUFDQUMsRUFDSixNQUFNQyxFQUFzQjFSLElBbENOLElBQUMzRCxFQUFBQSxFQW1DQWlTLEVBQU0vQyxjQW5DUy9QLElBQVJxRyxHQUFxQnhGLEVBQUl3RixRQUFpQnJHLElBQVJzRyxHQUFxQnpGLEVBQUl5RixLQXFDckYwUCxFQUFzQnhSLEVBQ3RCeVIsRUFBVzFELEdBQU8sQ0FDZGxFLEtBQU15RSxFQUFNL0MsUUFDWjRDLEdBQUk4QyxFQUFnQjNDLEVBQU0vQyxTQUMxQnNDLFNBQVVILEdBQXNCMkQsRUFBWXJSLEVBQUdzTyxFQUFNL0MsU0FDckQwQyxRQUFTNkMsRUFDVDlDLFVBQVcrQyxFQUNYMUMsYUFBQUEsRUFDQUQsVUFBQUEsTUFJUixPQURBc0QsRUFBbUIsR0FDWDFSLElBT0osSUFBSTJSLEdBQWtCLEVBVXRCLE9BVEtGLFFBQW9DalcsSUFBeEJnVyxJQUNiRyxHQUFrQixFQUNsQkwsRUFBY3RSLEdBQ2QwUixFQUFtQjFSLFNBTUt4RSxJQUF4QmdXLEdBQXFDeFIsRUFBSXdSLEdBQ3pDbEQsRUFBTUUsa0JBQW1CLEVBQ2xCaUQsRUFBU3pSLEVBQUl3UixLQUdwQmxELEVBQU1FLGtCQUFtQixHQUN4Qm1ELEdBQW1CTCxFQUFjdFIsR0FDM0JzTyxPQ25GYnNELEdBQWEsQ0FDZkMsSUFBSyxFQUNMdkgsSUFBSyxHQUVULFNBQVN3SCxHQUFPcEksRUFBVXFJLEdBQVMsS0FBRUMsRUFBTUMsT0FBUUMsRUFBVSxPQUFFQyxFQUFTLE9BQVUsSUFPOUUsR0FBb0Msb0JBQXpCQyxxQkFDUCxNQUFPLE9BRVgsTUFBTUMsRUFBbUI1SSxFQUFnQkMsR0FDbkM0SSxFQUFzQixJQUFJNVcsUUF5QjFCNlcsRUFBVyxJQUFJSCxzQkF4QlNJLElBQzFCQSxFQUFReFUsU0FBU3lVLElBQ2IsTUFBTUMsRUFBUUosRUFBb0JwVyxJQUFJdVcsRUFBTW5KLFFBSzVDLEdBQUltSixFQUFNRSxpQkFBbUJqVCxRQUFRZ1QsR0FFckMsR0FBSUQsRUFBTUUsZUFBZ0IsQ0FDdEIsTUFBTUMsRUFBV2IsRUFBUVUsR0FDRCxtQkFBYkcsRUFDUE4sRUFBb0J4VyxJQUFJMlcsRUFBTW5KLE9BQVFzSixHQUd0Q0wsRUFBU00sVUFBVUosRUFBTW5KLGFBR3hCb0osSUFDTEEsRUFBTUQsR0FDTkgsRUFBb0JRLE9BQU9MLEVBQU1uSixjQUltQixDQUM1RDBJLEtBQUFBLEVBQ0FFLFdBQUFBLEVBQ0FhLFVBQTZCLGlCQUFYWixFQUFzQkEsRUFBU1AsR0FBV08sS0FHaEUsT0FEQUUsRUFBaUJyVSxTQUFTcEMsR0FBWTJXLEVBQVNTLFFBQVFwWCxLQUNoRCxJQUFNMlcsRUFBU1UsYUM5QzFCLFNBQVNDLEdBQWU5UixFQUFZK1IsR0FDaEMsT0NISixTQUFtQi9SLEdBQ2YsTUFBNkIsaUJBQWZBLEVERVZnUyxDQUFVaFMsR0FDSEEsRUFFRkEsR0FBYytSLEVBQ1pBLEVBQVMvUixRQURmLEVFSlQsSUFBSWlTLEdBQ0osU0FBU0MsS0FDTCxJQUFLRCxHQUNELE9BQ0osTUFBTUUsRUFBYUYsR0FBVTVVLEtBQUsrVSxJQUFnQnZQLElBQUl3UCxJQUN0REYsRUFBV3ZWLFFBQVEwVixJQUNuQkgsRUFBV3ZWLFFBQVEwVixJQUNuQkwsUUFBWTdYLEVBRWhCLFNBQVNtWSxHQUFrQnJGLEdBQ2xCK0UsR0FLRC9XLEVBQWMrVyxHQUFXL0UsSUFKekIrRSxHQUFZLENBQUMvRSxHQUNiMUosc0JBQXNCME8sS0FTOUIsTUFBTUUsR0FBaUIsQ0FBQ3JWLEVBQUdDLElBQU1ELEVBQUV5VixXQUFheFYsRUFBRXdWLFdBQzVDSCxHQUFzQm5GLEdBQVVBLEVBQU11RixpQkFDdENILEdBQVlJLEdBQWFBLEVBQVN0SSxPQ3pCbEN1SSxHQUFjLENBQUNoVyxFQUFNdUwsSUFBVyxJQUFJMEssWUFBWWpXLEVBQU0sQ0FBRWtXLE9BQVEsQ0FBRTNLLE9BQUFBLEtBQ3hFLFNBQVM0SyxHQUFxQnRZLEVBQVNtQyxFQUFNb1csR0FDekN2WSxFQUFRd1ksY0FBYyxJQUFJSixZQUFZalcsRUFBTSxDQUFFa1csT0FBUSxDQUFFSSxjQUFlRixNQUUzRSxTQUFTRyxHQUFrQjFZLEVBQVNtQyxFQUFNMFUsR0FDdEM3VyxFQUFRd1ksY0FBYyxJQUFJSixZQUFZalcsRUFBTSxDQUFFa1csT0FBUSxDQUFFTSxjQUFlOUIsTUNEM0UsTUNGTStCLEdBQWEsQ0FBQzVZLEVBQVNtQyxFQUFNMFcsSUFBWU4sSUFDdkNBLEVBQU1PLGFBQXFDLFVBQXRCUCxFQUFNTyxjQUUvQkQsSUFDQVAsR0FBcUJ0WSxFQUFTbUMsRUFBTW9XLEtDUWxDUSxHQUFXLENBQUU3QyxPRlZKLENBQ1g4QyxTQUFXaE4sR0FBWWxJLFFBQVFrSSxFQUFRa0ssUUFDdkMrQyxVQUFXLENBQUNqWixHQUFXa1osT0FBQUEsRUFBUUMsUUFBQUEsSUFBYUMsY0FBQUEsRUFBZ0IsT0FDeEQsTUFBTSxLQUFFQyxHQUFTRCxFQUFlRSxHQUFjLEtBQUE1SSxRQUFPMEksRUFBZSxDQUFDLFNBQ3JFLE9BQU9sRCxHQUFTbFcsR0FBVXVaLElBR3RCLEdBRkFMLElBQ0FSLEdBQWtCMVksRUFBUyxZQUFhdVosSUFDbkNGLEVBQ0QsT0FBUUcsSUFDSkwsSUFDQVQsR0FBa0IxWSxFQUFTLFlBQWF3WixNQUdqREYsS0VIYyxNRE5YLENBQ1ZOLFNBQVdoTixHQUFZbEksUUFBUWtJLEVBQVF5TixPQUN2Q1IsVUFBVyxDQUFDalosR0FBV2taLE9BQUFBLEVBQVFDLFFBQUFBLE1BQzNCLE1BQU1PLEVBQVVkLEdBQVc1WSxFQUFTLGFBQWNrWixHQUM1Q1MsRUFBVWYsR0FBVzVZLEVBQVMsV0FBWW1aLEdBR2hELE9BRkFuWixFQUFRNFosaUJBQWlCLGVBQWdCRixHQUN6QzFaLEVBQVE0WixpQkFBaUIsZUFBZ0JELEdBQ2xDLEtBQ0gzWixFQUFRNlosb0JBQW9CLGVBQWdCSCxHQUM1QzFaLEVBQVE2WixvQkFBb0IsZUFBZ0JGLE1DSHhCLE1DWmxCLENBQ1ZYLFNBQVdoTixHQUFZbEksUUFBUWtJLEVBQVE4TixPQUN2Q2IsVUFBVyxDQUFDalosR0FBV2taLE9BQUFBLEVBQVFDLFFBQUFBLE1BQzNCLE1BQU1ZLEVBQWV4QixJQUNqQlksSUFDQWIsR0FBcUJ0WSxFQUFTLFdBQVl1WSxHQUMxQ3JNLE9BQU8yTixvQkFBb0IsWUFBYUUsSUFFdENDLEVBQWlCekIsSUFDbkJXLElBQ0FaLEdBQXFCdFksRUFBUyxhQUFjdVksR0FDNUNyTSxPQUFPME4saUJBQWlCLFlBQWFHLElBR3pDLE9BREEvWixFQUFRNFosaUJBQWlCLGNBQWVJLEdBQ2pDLEtBQ0hoYSxFQUFRNlosb0JBQW9CLGNBQWVHLEdBQzNDOU4sT0FBTzJOLG9CQUFvQixZQUFhRSxPREM5Q0UsR0FBYSxDQUFDLFVBQVcsYUFBY3RQLE9BQU91UCxLQUFLbkIsSUFBVyxRQUs5RG9CLEdBQWdCLElBQUlyYSxRQUMxQixTQUFTc2EsR0FBa0JwTyxFQUFVLEdBQUlxTyxHQVFyQyxJQUFJcmEsRUFJQXNhLEVBQVFELEVBQVNBLEVBQU9yQyxXQUFhLEVBQUksRUFJN0MsTUFBTXVDLEVBQWUsQ0FBRUMsU0FBUyxFQUFNalEsU0FBUyxHQUt6Q2tRLEVBQXVCLEdBS3ZCQyxFQUFVLEdBQ2hCLElBQUssTUFBTXZZLEtBQVE4WCxHQUNmUyxFQUFRdlksR0FDcUIsaUJBQWxCNkosRUFBUTdKLEdBQ1Q2SixFQUFRN0osR0FDUmtZLE1BQUFBLE9BQXVDLEVBQVNBLEVBQU9NLGFBQWF4WSxHQU1sRixNQUFNeVksR0FBMkMsSUFBcEI1TyxFQUFRd08sUUFBb0IsVUFBWSxVQUlyRSxJQUFJaFMsRUFBSzhPLEdBQWV0TCxFQUFRNE8sSUFBeUJGLEVBQVFFLEdBQXVCNU8sRUFBUXVMLFdBQWEsR0FBSTdKLEdBQVMsS0FBQWdELFFBQU9sSSxFQUFJLENBQUMsZUFPdEksTUFBTXFTLEVBQWFsUSxPQUFPZ0QsT0FBTyxHQUFJRCxHQXNEL0JvTixFQUFhLENBQUMzWSxFQUFNNlcsSUFBYSxLQUNuQ3VCLEVBQWFwWSxHQUFRNlcsRUFDckJqQixHQUFrQnJGLElBRWhCcUksRUFBNkIsS0FDL0IsSUFBSyxNQUFNNVksS0FBUTRXLEdBQVUsQ0FDekIsTUFBTWlDLEVBQWtCakMsR0FBUzVXLEdBQU02VyxTQUFTaE4sR0FDMUNpUCxFQUFTUixFQUFxQnRZLEdBQ2hDNlksSUFBb0JDLEVBQ3BCUixFQUFxQnRZLEdBQVE0VyxHQUFTNVcsR0FBTThXLFVBQVVqWixFQUFTLENBQzNEa1osT0FBUTRCLEVBQVczWSxHQUFNLEdBQ3pCZ1gsUUFBUzJCLEVBQVczWSxHQUFNLElBQzNCNkosSUFFR2dQLEdBQW1CQyxJQUN6QkEsV0FDT1IsRUFBcUJ0WSxNQUlsQ3VRLEVBQVEsQ0FDVndJLE9BQVNDLElBQ0FuYixJQUVMZ00sRUFBVW1QLEVBQ1ZKLElBQ0FoRCxHQUFrQnJGLEtBRXRCMEksVUFBVyxDQUFDalosRUFBTTZXLEtBQ1RoWixJQUVMdWEsRUFBYXBZLEdBQVE2VyxFQUNyQmpCLEdBQWtCckYsS0FFdEJ1RixlQWxGSixZQUNJLElBQUl6UCxFQUFJc0UsRUFDUixNQUFNdU8sRUFBYTNOLEVBQ25CQSxFQUFTLEdBQ1QsTUFBTUwsRUFBbUIsR0FDekIsSUFBSyxNQUFNbEwsS0FBUThYLEdBQVksQ0FDM0IsSUFBS00sRUFBYXBZLEdBQ2QsU0FDSixNQUFNbVosRUFBVWhFLEdBQWV0TCxFQUFRN0osSUFDdkMsR0FBS21aLEVBRUwsSUFBSyxNQUFNalEsS0FBT2lRLEVBQ0YsZUFBUmpRLElBRUpxQyxFQUFPckMsR0FBT2lRLEVBQVFqUSxHQUN0QmdDLEVBQWlCaEMsR0FBT3VDLEVBQW9HLFFBQXhGZCxFQUFtQyxRQUE3QnRFLEVBQUs4UyxFQUFRQyxrQkFBK0IsSUFBUC9TLEVBQWdCQSxFQUFLd0QsRUFBUXVQLGtCQUErQixJQUFQek8sRUFBZ0JBLEVBQUssR0FBSXpCLElBR3JLLE1BQU1tUSxFQUFnQixJQUFJOVksSUFBSSxJQUN2QmlJLE9BQU91UCxLQUFLeE0sTUFDWi9DLE9BQU91UCxLQUFLbUIsS0FFYjdMLEVBQXFCLEdBQzNCZ00sRUFBY3BaLFNBQVNpSixJQUNuQixJQUFJN0MsRUV2R0lqRyxFQUFHQyxPRndHUzVDLElBQWhCOE4sRUFBT3JDLEtBQ1BxQyxFQUFPckMsR0FBT3dQLEVBQVd4UCxXRXpHckI5SSxFRjJHTzhZLEVBQVdoUSxZRTNHZjdJLEVGMkdxQmtMLEVBQU9yQyxNRXhHM0NwSCxNQUFNQyxRQUFRM0IsSUFBTTBCLE1BQU1DLFFBQVExQixHQUkxQyxTQUF3Qm9OLEVBQU1DLEdBQzFCLE1BQU00TCxFQUFhNUwsRUFBS3BKLE9BQ3hCLEdBQUlnVixJQUFlN0wsRUFBS25KLE9BQ3BCLE9BQU8sRUFDWCxJQUFLLElBQUl6QixFQUFJLEVBQUdBLEVBQUl5VyxFQUFZelcsSUFDNUIsR0FBSTZLLEVBQUs3SyxLQUFPNEssRUFBSzVLLEdBQ2pCLE9BQU8sRUFFZixPQUFPLEVBWEswVyxDQUFlblosRUFBR0MsR0FDdkJELElBQU1DLEtGdUcwQixRQUExQmdHLEVBQUtxUyxFQUFXeFAsVUFBeUIsSUFBUDdDLElBQXNCcVMsRUFBV3hQLEdBQU9HLEVBQU1sTCxJQUFJTixFQUFTcUwsSUFDOUZtRSxFQUFtQjFPLEtBQUtnTCxFQUFhOUwsRUFBU3FMLEVBQUtxQyxFQUFPckMsR0FBTWdDLEVBQWlCaEMsZUFLekYsTUFBTWlELEVBQWFrQixFQUNkbkgsS0FBSzZGLEdBQVlBLE1BQ2pCSyxPQUFPekssU0FDWixJQUFLd0ssRUFBVzdILE9BQ1osT0FDSixNQUFNa1YsRUFBa0JqTyxFQUN4QjFOLEVBQVF3WSxjQUFjTCxHQUFZLGNBQWV3RCxJQUNqRG5VLFFBQVFrSCxJQUFJSixFQUFXakcsS0FBS2hKLEdBQWNBLEVBQVVFLFlBQy9DQyxNQUFLLEtBQ05RLEVBQVF3WSxjQUFjTCxHQUFZLGlCQUFrQndELE9BRW5EamMsTUFBTWEsSUFxQ1h5WCxTQUFVLElBQU1zQyxFQUNoQnNCLFVBQVcsSUFBTWxPLEVBQ2pCRSxXQUFZLElBQU01QixFQUNsQjJPLFdBQVksSUFBTUQsRUFDbEJtQixNQUFRQyxLQUNKLEtBQUF0SyxXQUFVMU4sUUFBUWdZLEdBQWEsc0RBQy9COWIsRUFBVThiLEVBQ1YzQixHQUFjamEsSUFBSUYsRUFBUzBTLEdBQzNCcUksSUFDTyxLQUNIWixHQUFjakQsT0FBT2xYLEdKeEpyQyxTQUE2QjBTLEdBQ3pCK0UsSUFBYTFXLEVBQVcwVyxHQUFXL0UsR0l3SnZCcUosQ0FBb0JySixHQUNwQixJQUFLLE1BQU1ySCxLQUFPb1AsRUFDZEEsRUFBcUJwUCxPQUlqQzJRLFVBQVcsSUFBTWxZLFFBQVE5RCxJQUU3QixPQUFPMFMsRUdsTFgsU0FBU3VKLEdBQWE5VSxHQUNsQixNQUFNK1UsRUFBbUIsR0FDbkJDLEVBQWdCLEdBQ3RCLElBQUssSUFBSTlRLEtBQU9sRSxFQUFXLENBQ3ZCLE1BQU12RCxFQUFRdUQsRUFBVWtFLEdBQ3BCMUksRUFBWTBJLEtBQ1JqSyxFQUFlaUssS0FDZkEsRUFBTWpLLEVBQWVpSyxJQUN6QjhRLEVBQWNyYixLQUFLdUssR0FDbkJBLEVBQU1uSixFQUFrQm1KLElBRTVCLElBQUkrUSxFQUFrQm5ZLE1BQU1DLFFBQVFOLEdBQVNBLEVBQU0sR0FBS0EsRUFLeEQsTUFBTTRCLEVBQWF2RCxFQUFxQjNCLElBQUkrSyxHQUN4QzdGLElBQ0E0VyxFQUFrQnpZLEVBQVNDLEdBQ3JCNEIsRUFBVzdELGNBQWNpQyxHQUN6QkEsR0FFVnNZLEVBQWlCN1EsR0FBTytRLEVBSzVCLE9BSElELEVBQWMxVixTQUNkeVYsRUFBaUIxUCxVQUFZNUosRUFBdUJ1WixJQUVqREQsRUM1QlgsTUFBTUcsR0FBMkJDLEdBQVcsSUFBSUEsRUFBT0MsZ0JBRXZELFNBQVNDLEdBQWtCOU8sRUFBUyxJQUNoQyxNQUFNK08sRUFBU1IsR0FBYXZPLEdBQzVCLElBQUlsQyxFQUFRLEdBQ1osSUFBSyxNQUFNSCxLQUFPb1IsRUFDZGpSLEdBQVNILEVBQUlsSSxXQUFXLE1BQVFrSSxFQUFzQkEsRUFMekJxUixRQUFRLFNBQVVMLElBTS9DN1EsR0FBUyxLQUFLaVIsRUFBT3BSLE9BRXpCLE9BQU9HLCtCQ1RYYixPQUFPZ1MsZUFBZUMsRUFBUyxhQUEvQixDQUErQ2haLE9BQU8sSUFFdEQsSUFBSWlaLEVBQVEsRUFBUSxLQUNoQkMsRUFBUSxFQUFRLEtBQ2hCQyxFQUFZLEVBQVEsS0FDcEJDLEVBQU8sRUFBUSxLQUNmQyxFQUFZLEVBQVEsS0FDcEJDLEVBQWtCLEVBQVEsS0FDMUJDLEVBQU0sRUFBUSxLQUVsQixTQUFTQyxFQUF1QmxTLEdBQUssT0FBT0EsR0FBa0IsaUJBQU5BLEdBQWtCLFlBQWFBLEVBQUlBLEVBQUksQ0FBRSxRQUFXQSxHQUU1RyxTQUFTbVMsRUFBa0JuUyxHQUN2QixHQUFJQSxHQUFLQSxFQUFFb1MsV0FBWSxPQUFPcFMsRUFDOUIsSUFBSXFTLEVBQUk1UyxPQUFPNlMsT0FBTyxNQWF0QixPQVpJdFMsR0FDQVAsT0FBT3VQLEtBQUtoUCxHQUFHOUksU0FBUSxTQUFVcWIsR0FDN0IsR0FBVSxZQUFOQSxFQUFpQixDQUNqQixJQUFJdFQsRUFBSVEsT0FBTytTLHlCQUF5QnhTLEVBQUd1UyxHQUMzQzlTLE9BQU9nUyxlQUFlWSxFQUFHRSxFQUFHdFQsRUFBRTdKLElBQU02SixFQUFJLENBQ3BDd1QsWUFBWSxFQUNacmQsSUFBSyxXQUFjLE9BQU80SyxFQUFFdVMsVUFLNUNGLEVBQVcsUUFBSXJTLEVBQ1JQLE9BQU9pVCxPQUFPTCxHQUd6QixJQUFJTSxFQUFnQ1IsRUFBa0JQLEdBQ2xEZ0IsRUFBOEJWLEVBQXNCTixHQUNwRGlCLEVBQTZCWCxFQUFzQkosR0FNbkRnQixHQUF5QixvQkFBWkMsU0FBMkJBLFFBQVFELElBRDNCLGNBS3JCRSxFQUFtQixTQUFVQyxHQUFhLE1BQU8sQ0FDakRDLFVBQVcsU0FBVUMsR0FBUyxPQUFPRixFQUFVRyxNQUFLLFNBQVVuYyxHQUFRLFFBQVNrYyxFQUFNbGMsU0FFckZvYyxFQUFxQixDQUNyQkMsY0FBZU4sRUFBaUIsQ0FBQyxTQUFVLFdBQVksU0FDdkQ3ZSxVQUFXNmUsRUFBaUIsQ0FDeEIsVUFDQSxPQUNBLFdBQ0EsYUFDQSxXQUNBLGFBQ0EsWUFDQSxnQkFFSk8sS0FBTVAsRUFBaUIsQ0FBQyxTQUN4QlEsS0FBTVIsRUFBaUIsQ0FBQyxPQUFRLGlCQUNoQ1MsTUFBT1QsRUFBaUIsQ0FBQyxlQUN6QnpFLE1BQU95RSxFQUFpQixDQUFDLGFBQWMsZUFBZ0IsZUFDdkRVLElBQUtWLEVBQWlCLENBQUMsV0FBWSxRQUFTLGFBQWMsZ0JBQzFEVyxJQUFLWCxFQUFpQixDQUNsQixRQUNBLGFBQ0Esb0JBQ0EsYUFFSmhJLE9BQVFnSSxFQUFpQixDQUNyQixjQUNBLGtCQUNBLHFCQUdSLFNBQVNZLEVBQWFDLEdBQ2xCLElBQUssSUFBSTFULEtBQU8wVCxFQUNVLE9BQWxCQSxFQUFTMVQsS0FFRCw4QkFBUkEsRUFDQWtULEVBQW1CUywwQkFBNEJELEVBQVMxVCxHQUd4RGtULEVBQW1CbFQsR0FBSzRULFVBQVlGLEVBQVMxVCxJQUt6RCxJQUFJNlQsRUFBY3BDLEVBQU1xQyxjQUFjLENBQUVDLFFBQVEsSUFFNUNDLEVBQWUxVSxPQUFPdVAsS0FBS3FFLEdBQzNCZSxFQUFjRCxFQUFhNVksT0FrQzNCOFksRUFBc0J6QyxFQUFNcUMsY0FBYyxDQUMxQ0ssbUJBQW9CLFNBQVV0WCxHQUFLLE9BQU9BLEdBQzFDdVgsVUFBVSxFQUNWQyxjQUFlLFVBR2ZDLEVBQWdCN0MsRUFBTXFDLGNBQWMsSUFDeEMsU0FBU1MsSUFDTCxPQUFPOUMsRUFBTStDLFdBQVdGLEdBQWVHLGNBTTNDLElBQUlDLEVBQWtCakQsRUFBTXFDLGNBQWMsTUFFdENhLEVBQWdDLG9CQUFiM1YsU0FFbkI0VixFQUE0QkQsRUFBWWxELEVBQU1vRCxnQkFBa0JwRCxFQUFNcUQsVUFHdEVDLEVBQXVCLENBQUV6USxRQUFTLE1BQ2xDMFEsR0FBYyxFQTJDbEIsU0FBU0MsSUFTTCxPQUxDRCxHQTlDTCxXQUVJLEdBREFBLEdBQWMsRUFDVEwsRUFFTCxHQUFJOVQsT0FBT3FVLFdBQVksQ0FDbkIsSUFBSUMsRUFBcUJ0VSxPQUFPcVUsV0FBVyw0QkFDdkNFLEVBQThCLFdBQzlCLE9BQVFMLEVBQXFCelEsUUFBVTZRLEVBQW1CRSxTQUU5REYsRUFBbUJHLFlBQVlGLEdBQy9CQSxTQUdBTCxFQUFxQnpRLFNBQVUsRUFpQ25CaVIsR0FDUC9ELEVBQU1nRSxPQUFPL0QsRUFBTWdFLFNBQVNWLEVBQXFCelEsU0FBVSxHQUE0QixHQU1wRyxTQUFTb1IsSUFDTCxJQUFJQyxFQUEwQlYsSUFDMUJaLEVBQWdCNUMsRUFBTStDLFdBQVdOLEdBQXFCRyxjQUMxRCxNQUFzQixVQUFsQkEsSUFHdUIsV0FBbEJBLEdBSUVzQixHQXFDZixTQUFTQyxFQUFZQyxHQUNqQixNQUF1QixpQkFBUkEsR0FDWHZXLE9BQU9JLFVBQVVILGVBQWU5QixLQUFLb1ksRUFBSyxXQW9DbEQsU0FBU0MsRUFBZ0IxZ0IsR0FDckIsT0FBT3dELE1BQU1DLFFBQVF6RCxHQUt6QixTQUFTMmdCLEVBQWUzZ0IsR0FDcEIsTUFBb0IsaUJBQU5BLEdBQWtCMGdCLEVBQWdCMWdCLEdBa0JwRCxTQUFTNGdCLEVBQXdCaEQsRUFBTzdZLEVBQVltQyxFQUFRMlosRUFBZS9OLEdBQ3ZFLElBQUkvSyxFQXdCSixZQXZCc0IsSUFBbEI4WSxJQUE0QkEsRUFBZ0IsU0FDeEIsSUFBcEIvTixJQUE4QkEsRUFBa0IsSUFJMUIsbUJBQWYvTixJQUNQQSxFQUFhQSxFQUFXbUMsTUFBQUEsRUFBdUNBLEVBQVMwVyxFQUFNMVcsT0FBUTJaLEVBQWUvTixJQU0vRSxpQkFBZi9OLElBQ1BBLEVBQXVDLFFBQXpCZ0QsRUFBSzZWLEVBQU05RyxnQkFBNkIsSUFBUC9PLE9BQWdCLEVBQVNBLEVBQUdoRCxJQU9yRCxtQkFBZkEsSUFDUEEsRUFBYUEsRUFBV21DLE1BQUFBLEVBQXVDQSxFQUFTMFcsRUFBTTFXLE9BQVEyWixFQUFlL04sSUFFbEcvTixFQUVYLFNBQVM4UixFQUFld0ksRUFBZXRhLEVBQVltQyxHQUMvQyxJQUFJMFcsRUFBUXlCLEVBQWN5QixXQUMxQixPQUFPRixFQUF3QmhELEVBQU83WSxFQUFZbUMsTUFBQUEsRUFBdUNBLEVBQVMwVyxFQUFNMVcsT0ExQzVHLFNBQW9CbVksR0FDaEIsSUFBSW5RLEVBQVUsR0FFZCxPQURBbVEsRUFBYzBCLGNBQWEsU0FBVTVkLEVBQU95SCxHQUFPLE9BQVFzRSxFQUFRdEUsR0FBT3pILEVBQU10RCxTQUN6RXFQLEVBdUN5RzhSLENBQVczQixHQWxDL0gsU0FBdUJBLEdBQ25CLElBQUk3TixFQUFXLEdBRWYsT0FEQTZOLEVBQWMwQixjQUFhLFNBQVU1ZCxFQUFPeUgsR0FBTyxPQUFRNEcsRUFBUzVHLEdBQU96SCxFQUFNOGQsaUJBQzFFelAsRUErQm9JMFAsQ0FBYzdCLElBRTdKLFNBQVM4QixFQUEyQnZELEdBQ2hDLElBQUk3VixFQUNKLE1BQXdGLG1CQUEvQyxRQUF4QkEsRUFBSzZWLEVBQU05VCxlQUE0QixJQUFQL0IsT0FBZ0IsRUFBU0EsRUFBR3FHLFFBQ3pFdVMsRUFBZS9DLEVBQU03RCxVQUNyQjRHLEVBQWUvQyxFQUFNOVQsVUFDckI2VyxFQUFlL0MsRUFBTXdELGFBQ3JCVCxFQUFlL0MsRUFBTXlELFlBQ3JCVixFQUFlL0MsRUFBTTBELFdBQ3JCWCxFQUFlL0MsRUFBTTJELGFBQ3JCWixFQUFlL0MsRUFBTUksTUFFN0IsU0FBU3dELEVBQW1CNUQsR0FDeEIsT0FBT3ZhLFFBQVE4ZCxFQUEyQnZELElBQVVBLEVBQU05RyxVQW9COUQsU0FBUzJLLEVBQTBCQyxHQUMvQixPQUFPbGUsTUFBTUMsUUFBUWllLEdBQVFBLEVBQUtDLEtBQUssS0FBT0QsRUFVbEQsU0FBU0UsRUFBWUMsR0FDakIsSUFBSXBCLEVBQU1wRSxFQUFNeUYsT0FBTyxNQUl2QixPQUhvQixPQUFoQnJCLEVBQUl2UixVQUNKdVIsRUFBSXZSLFFBQVUyUyxLQUVYcEIsRUFBSXZSLFFBR2YsU0FBU2pQLEVBQWNNLEVBQUtKLElBQ0QsSUFBdkJJLEVBQUlILFFBQVFELElBQWdCSSxFQUFJRixLQUFLRixHQUV6QyxTQUFTRyxFQUFXQyxFQUFLSixHQUNyQixJQUFJSyxFQUFRRCxFQUFJSCxRQUFRRCxHQUN4QkssR0FBUyxHQUFLRCxFQUFJRSxPQUFPRCxFQUFPLEdBY3BDLElBQUl1aEIsRUFBcUMsV0FDckMsU0FBU0EsSUFDTGxqQixLQUFLbWpCLGNBQWdCLEdBa0N6QixPQWhDQUQsRUFBb0J6WCxVQUFVaUMsSUFBTSxTQUFVMFYsR0FDMUMsSUFBSUMsRUFBUXJqQixLQUVaLE9BREFvQixFQUFjcEIsS0FBS21qQixjQUFlQyxHQUMzQixXQUFjLE9BQU8zaEIsRUFBVzRoQixFQUFNRixjQUFlQyxLQUVoRUYsRUFBb0J6WCxVQUFVNlgsT0FBUyxTQUFVcmdCLEVBQUdDLEVBQUcwSCxHQUNuRCxJQUFJMlksRUFBbUJ2akIsS0FBS21qQixjQUFjaGMsT0FDMUMsR0FBS29jLEVBRUwsR0FBeUIsSUFBckJBLEVBSUF2akIsS0FBS21qQixjQUFjLEdBQUdsZ0IsRUFBR0MsRUFBRzBILFFBRzVCLElBQUssSUFBSWxGLEVBQUksRUFBR0EsRUFBSTZkLEVBQWtCN2QsSUFBSyxDQUt2QyxJQUFJMGQsRUFBVXBqQixLQUFLbWpCLGNBQWN6ZCxHQUNqQzBkLEdBQVdBLEVBQVFuZ0IsRUFBR0MsRUFBRzBILEtBSXJDc1ksRUFBb0J6WCxVQUFVK1gsUUFBVSxXQUNwQyxPQUFPeGpCLEtBQUttakIsY0FBY2hjLFFBRTlCK2IsRUFBb0J6WCxVQUFVZ1ksTUFBUSxXQUNsQ3pqQixLQUFLbWpCLGNBQWNoYyxPQUFTLEdBRXpCK2IsRUFwQzZCLEdBK0NwQ3JqQixFQUE2QixXQVM3QixTQUFTQSxFQUFZbWpCLEdBQ2pCLElBbEJnQjFlLEVBa0JaK2UsRUFBUXJqQixLQUtaQSxLQUFLMGpCLFFBQVUsUUFNZjFqQixLQUFLMmpCLFVBQVksRUFNakIzakIsS0FBSzRqQixZQUFjLEVBTW5CNWpCLEtBQUs2akIsa0JBQW9CLElBQUlYLEVBTTdCbGpCLEtBQUs4akIsMEJBQTRCLElBQUlaLEVBTXJDbGpCLEtBQUsrakIsa0JBQW9CLElBQUliLEVBUTdCbGpCLEtBQUtna0Isa0JBQW1CLEVBQ3hCaGtCLEtBQUtpa0IsZ0JBQWtCLFNBQVU5aUIsRUFBRytpQixRQUNqQixJQUFYQSxJQUFxQkEsR0FBUyxHQUNsQ2IsRUFBTTlTLEtBQU84UyxFQUFNaFQsUUFDbkJnVCxFQUFNaFQsUUFBVWxQLEVBRWhCLElBQUkrSCxFQUFLd1UsRUFBS3lHLGVBQWdCOU4sRUFBUW5OLEVBQUdtTixNQUFPcE4sRUFBWUMsRUFBR0QsVUFDM0RvYSxFQUFNTyxjQUFnQjNhLElBQ3RCb2EsRUFBTU0sVUFBWXROLEVBQ2xCZ04sRUFBTU8sWUFBYzNhLEVBQ3BCd1YsRUFBdUIsUUFBRTJGLFdBQVdmLEVBQU1nQix3QkFHMUNoQixFQUFNOVMsT0FBUzhTLEVBQU1oVCxTQUNyQmdULEVBQU1RLGtCQUFrQlAsT0FBT0QsRUFBTWhULFNBR3JDZ1QsRUFBTVMsMEJBQTBCTixXQUNoQ0gsRUFBTVMsMEJBQTBCUixPQUFPRCxFQUFNakIsZUFHN0M4QixHQUNBYixFQUFNVSxrQkFBa0JULE9BQU9ELEVBQU1oVCxVQVc3Q3JRLEtBQUtxa0Isc0JBQXdCLFdBQWMsT0FBTzVGLEVBQXVCLFFBQUUyRixXQUFXZixFQUFNaUIsZ0JBVTVGdGtCLEtBQUtza0IsY0FBZ0IsU0FBVXBiLEdBQ1hBLEVBQUdELFlBQ0RvYSxFQUFNTyxjQUNwQlAsRUFBTTlTLEtBQU84UyxFQUFNaFQsUUFDbkJnVCxFQUFNUywwQkFBMEJSLE9BQU9ELEVBQU1qQixpQkFHckRwaUIsS0FBS3VrQixhQUFjLEVBQ25CdmtCLEtBQUt1USxLQUFPdlEsS0FBS3FRLFFBQVUyUyxFQUMzQmhqQixLQUFLZ2tCLGtCQWpIVzFmLEVBaUhnQnRFLEtBQUtxUSxTQWhIakNtVSxNQUFNemQsV0FBV3pDLEtBMlN6QixPQXpJQXpFLEVBQVk0TCxVQUFVZ1osU0FBVyxTQUFVQyxHQUN2QyxPQUFPMWtCLEtBQUs2akIsa0JBQWtCblcsSUFBSWdYLElBRXRDN2tCLEVBQVk0TCxVQUFVa1osZUFBaUIsV0FDbkMza0IsS0FBSzZqQixrQkFBa0JKLFNBVTNCNWpCLEVBQVk0TCxVQUFVbVosZ0JBQWtCLFNBQVVGLEdBRzlDLE9BREFBLEVBQWExa0IsS0FBS2dCLE9BQ1hoQixLQUFLK2pCLGtCQUFrQnJXLElBQUlnWCxJQU90QzdrQixFQUFZNEwsVUFBVW9aLE9BQVMsU0FBVUMsR0FDckM5a0IsS0FBSzhrQixjQUFnQkEsR0FpQnpCamxCLEVBQVk0TCxVQUFVN0ssSUFBTSxTQUFVTyxFQUFHK2lCLFFBQ3RCLElBQVhBLElBQXFCQSxHQUFTLEdBQzdCQSxHQUFXbGtCLEtBQUs4a0IsY0FJakI5a0IsS0FBSzhrQixjQUFjM2pCLEVBQUduQixLQUFLaWtCLGlCQUgzQmprQixLQUFLaWtCLGdCQUFnQjlpQixFQUFHK2lCLElBYWhDcmtCLEVBQVk0TCxVQUFVekssSUFBTSxXQUN4QixPQUFPaEIsS0FBS3FRLFNBS2hCeFEsRUFBWTRMLFVBQVVzWixZQUFjLFdBQ2hDLE9BQU8va0IsS0FBS3VRLE1BU2hCMVEsRUFBWTRMLFVBQVUyVyxZQUFjLFdBRWhDLE9BQU9waUIsS0FBS2drQixpQkFFSnJHLEVBQVVxSCxrQkFBa0JqZSxXQUFXL0csS0FBS3FRLFNBQ3hDdEosV0FBVy9HLEtBQUt1USxNQUFPdlEsS0FBSzJqQixXQUNsQyxHQWNWOWpCLEVBQVk0TCxVQUFVOEQsTUFBUSxTQUFVeFAsR0FDcEMsSUFBSXNqQixFQUFRcmpCLEtBRVosT0FEQUEsS0FBS2dLLE9BQ0UsSUFBSTlCLFNBQVEsU0FBVUMsR0FDekJrYixFQUFNa0IsYUFBYyxFQUNwQmxCLEVBQU0vVyxjQUFnQnZNLEVBQVVvSSxNQUNqQ2pJLE1BQUssV0FBYyxPQUFPbWpCLEVBQU1sakIscUJBT3ZDTixFQUFZNEwsVUFBVXpCLEtBQU8sV0FDckJoSyxLQUFLc00sZUFDTHRNLEtBQUtzTSxnQkFDVHRNLEtBQUtHLGtCQU9UTixFQUFZNEwsVUFBVXdaLFlBQWMsV0FDaEMsUUFBU2psQixLQUFLc00sZUFFbEJ6TSxFQUFZNEwsVUFBVXRMLGVBQWlCLFdBQ25DSCxLQUFLc00sY0FBZ0IsTUFXekJ6TSxFQUFZNEwsVUFBVXlaLFFBQVUsV0FDNUJsbEIsS0FBSzZqQixrQkFBa0JKLFFBQ3ZCempCLEtBQUsrakIsa0JBQWtCTixRQUN2QnpqQixLQUFLZ0ssUUFFRm5LLEVBcFNxQixHQXNTaEMsU0FBU3VOLEVBQVk0VixHQUNqQixPQUFPLElBQUluakIsRUFBWW1qQixHQUczQixJQUFJbUMsRUFBZ0IsU0FBVTdnQixHQUMxQixPQUFPRSxRQUFrQixPQUFWRixHQUFtQyxpQkFBVkEsR0FBc0JBLEVBQU04ZCxjQVNwRWdELEVBQXdCLFNBQVU1YSxHQUFXLE9BQWlCLElBQVZBLEdBRXBENmEsRUFBZSxDQUNmQyxPQUFRM0gsRUFBVTJILE9BQ2xCQyxPQUFRNUgsRUFBVTRILE9BQ2xCQyxVQUFXN0gsRUFBVTZILFVBQ3JCQyxRQUFTOUgsRUFBVThILFFBQ25CQyxPQUFRL0gsRUFBVStILE9BQ2xCQyxVQUFXaEksRUFBVWdJLFVBQ3JCQyxRQUFTakksRUFBVWlJLFFBQ25CQyxPQUFRbEksRUFBVWtJLE9BQ2xCQyxVQUFXbkksRUFBVW1JLFVBQ3JCQyxRQUFTcEksRUFBVW9JLFFBQ25CQyxXQUFZckksRUFBVXFJLFdBQ3RCQyxTQUFVdEksRUFBVXNJLFNBQ3BCQyxZQUFhdkksRUFBVXVJLFlBQ3ZCQyxVQUFXeEksRUFBVXdJLFdBRXJCQyxFQUE2QixTQUFVbGdCLEdBQ3ZDLEdBQUl2QixNQUFNQyxRQUFRc0IsR0FBYSxDQUUzQnVYLEVBQVV2TCxVQUFnQyxJQUF0QmhNLEVBQVdpQixPQUFjLDJEQUM3QyxJQUFJK0IsRUFBS3FVLEVBQU1nRSxPQUFPcmIsRUFBWSxHQUFJbWdCLEVBQUtuZCxFQUFHLEdBQUlvZCxFQUFLcGQsRUFBRyxHQUFJcWQsRUFBS3JkLEVBQUcsR0FBSXNkLEVBQUt0ZCxFQUFHLEdBQ2xGLE9BQU95VSxFQUFVMVksWUFBWW9oQixFQUFJQyxFQUFJQyxFQUFJQyxHQUV4QyxNQUEwQixpQkFBZnRnQixHQUVadVgsRUFBVXZMLGVBQXVDNVIsSUFBN0Ira0IsRUFBYW5mLEdBQTJCLHdCQUF3QnVnQixPQUFPdmdCLEVBQVksTUFDaEdtZixFQUFhbmYsSUFFakJBLEdBZVB3Z0IsRUFBZSxTQUFVM2EsRUFBS3pILEdBRTlCLFFBQVksV0FBUnlILEdBS2lCLGlCQUFWekgsSUFBc0JLLE1BQU1DLFFBQVFOLEtBRTFCLGlCQUFWQSxJQUNQc1osRUFBZ0IrSSxRQUFRQyxLQUFLdGlCLElBQzVCQSxFQUFNVCxXQUFXLFdBT3RCZ2pCLEVBQW9CLFNBQVUxbEIsR0FDOUIsT0FBT3dELE1BQU1DLFFBQVF6RCxJQUdyQjJsQixFQUFvQixXQUFjLE1BQU8sQ0FDekNDLEtBQU0sU0FDTmpVLFVBQVcsSUFDWEMsUUFBUyxHQUNURyxVQUFXLEtBRVg4VCxFQUF5QixTQUFVL1QsR0FBTSxNQUFPLENBQ2hEOFQsS0FBTSxTQUNOalUsVUFBVyxJQUNYQyxRQUFnQixJQUFQRSxFQUFXLEVBQUl0TixLQUFLOE4sS0FBSyxLQUFPLEdBQ3pDUCxVQUFXLEtBRVgrVCxHQUFjLFdBQWMsTUFBTyxDQUNuQ0YsS0FBTSxZQUNOaGhCLEtBQU0sU0FDTi9CLFNBQVUsS0FFVjZELEdBQVksU0FBVS9HLEdBQVUsTUFBTyxDQUN2Q2ltQixLQUFNLFlBQ04vaUIsU0FBVSxHQUNWbEQsT0FBUUEsSUFFUm9tQixHQUFxQixDQUNyQm5sQixFQUFHK2tCLEVBQ0g5a0IsRUFBRzhrQixFQUNIN2tCLEVBQUc2a0IsRUFDSHRrQixPQUFRc2tCLEVBQ1JLLFFBQVNMLEVBQ1RNLFFBQVNOLEVBQ1RPLFFBQVNQLEVBQ1RRLE9BQVFOLEVBQ1JPLE9BQVFQLEVBQ1J2a0IsTUFBT3VrQixFQUNQcmIsUUFBU3NiLEdBQ1RPLGdCQUFpQlAsR0FDakJRLE1BQU9SLEdBQ1BTLFFBQVNWLEdBY1RXLEdBQU1wSyxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUloSyxFQUFnQmlLLFFBQVMsQ0FBRTNhLFVBQVd2SCxLQUFLbWlCLFFBRW5GQyxHQUFtQixDQUVuQkMsWUFBYXBLLEVBQWdCcUssR0FDN0JDLGVBQWdCdEssRUFBZ0JxSyxHQUNoQ0UsaUJBQWtCdkssRUFBZ0JxSyxHQUNsQ0csa0JBQW1CeEssRUFBZ0JxSyxHQUNuQ0ksZ0JBQWlCekssRUFBZ0JxSyxHQUNqQ0ssYUFBYzFLLEVBQWdCcUssR0FDOUJNLE9BQVEzSyxFQUFnQnFLLEdBQ3hCTyxvQkFBcUI1SyxFQUFnQnFLLEdBQ3JDUSxxQkFBc0I3SyxFQUFnQnFLLEdBQ3RDUyx3QkFBeUI5SyxFQUFnQnFLLEdBQ3pDVSx1QkFBd0IvSyxFQUFnQnFLLEdBRXhDVyxNQUFPaEwsRUFBZ0JxSyxHQUN2QlksU0FBVWpMLEVBQWdCcUssR0FDMUJhLE9BQVFsTCxFQUFnQnFLLEdBQ3hCYyxVQUFXbkwsRUFBZ0JxSyxHQUMzQmUsS0FBTXBMLEVBQWdCcUssR0FDdEJnQixJQUFLckwsRUFBZ0JxSyxHQUNyQmlCLE1BQU90TCxFQUFnQnFLLEdBQ3ZCa0IsT0FBUXZMLEVBQWdCcUssR0FDeEJtQixLQUFNeEwsRUFBZ0JxSyxHQUV0Qm9CLFFBQVN6TCxFQUFnQnFLLEdBQ3pCcUIsV0FBWTFMLEVBQWdCcUssR0FDNUJzQixhQUFjM0wsRUFBZ0JxSyxHQUM5QnVCLGNBQWU1TCxFQUFnQnFLLEdBQy9Cd0IsWUFBYTdMLEVBQWdCcUssR0FDN0JsUixPQUFRNkcsRUFBZ0JxSyxHQUN4QnlCLFVBQVc5TCxFQUFnQnFLLEdBQzNCMEIsWUFBYS9MLEVBQWdCcUssR0FDN0IyQixhQUFjaE0sRUFBZ0JxSyxHQUM5QjRCLFdBQVlqTSxFQUFnQnFLLEdBRTVCemxCLE9BQVFvYixFQUFnQmtNLFFBQ3hCM0MsUUFBU3ZKLEVBQWdCa00sUUFDekIxQyxRQUFTeEosRUFBZ0JrTSxRQUN6QnpDLFFBQVN6SixFQUFnQmtNLFFBQ3pCcm5CLE1BQU9tYixFQUFnQm5iLE1BQ3ZCNmtCLE9BQVExSixFQUFnQm5iLE1BQ3hCOGtCLE9BQVEzSixFQUFnQm5iLE1BQ3hCc25CLE9BQVFuTSxFQUFnQm5iLE1BQ3hCQyxLQUFNa2IsRUFBZ0JrTSxRQUN0QkUsTUFBT3BNLEVBQWdCa00sUUFDdkJHLE1BQU9yTSxFQUFnQmtNLFFBQ3ZCbGEsU0FBVWdPLEVBQWdCcUssR0FDMUJpQyxXQUFZdE0sRUFBZ0JxSyxHQUM1QmtDLFdBQVl2TSxFQUFnQnFLLEdBQzVCbUMsV0FBWXhNLEVBQWdCcUssR0FDNUJsbUIsRUFBRzZiLEVBQWdCcUssR0FDbkJqbUIsRUFBRzRiLEVBQWdCcUssR0FDbkJobUIsRUFBRzJiLEVBQWdCcUssR0FDbkJvQyxZQUFhek0sRUFBZ0JxSyxHQUM3QnFDLHFCQUFzQjFNLEVBQWdCcUssR0FDdEN0YyxRQUFTaVMsRUFBZ0IyTSxNQUN6QkMsUUFBUzVNLEVBQWdCNk0sbUJBQ3pCQyxRQUFTOU0sRUFBZ0I2TSxtQkFDekJFLFFBQVMvTSxFQUFnQnFLLEdBRXpCMkMsT0FBUWpELEdBRVJrRCxZQUFhak4sRUFBZ0IyTSxNQUM3Qk8sY0FBZWxOLEVBQWdCMk0sTUFDL0JRLFdBQVlwRCxJQU1acUQsR0FBb0J6TixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUlHLElBQW1CLENBRXpFTixNQUFPN0osRUFBZ0I2SixNQUFPRCxnQkFBaUI1SixFQUFnQjZKLE1BQU93RCxhQUFjck4sRUFBZ0I2SixNQUFPeFosS0FBTTJQLEVBQWdCNkosTUFBT3lELE9BQVF0TixFQUFnQjZKLE1BRWhLMEQsWUFBYXZOLEVBQWdCNkosTUFBTzJELGVBQWdCeE4sRUFBZ0I2SixNQUFPNEQsaUJBQWtCek4sRUFBZ0I2SixNQUFPNkQsa0JBQW1CMU4sRUFBZ0I2SixNQUFPOEQsZ0JBQWlCM04sRUFBZ0I2SixNQUFPeFksT0FBUTJPLEVBQWdCM08sT0FBUXVjLGFBQWM1TixFQUFnQjNPLFNBSXBRd2MsR0FBc0IsU0FBVTFmLEdBQU8sT0FBT2lmLEdBQWtCamYsSUFFcEUsU0FBUzJmLEdBQWtCM2YsRUFBS3pILEdBQzVCLElBQUk0RSxFQUNBeWlCLEVBQW1CRixHQUFvQjFmLEdBSTNDLE9BSEk0ZixJQUFxQi9OLEVBQWdCM08sU0FDckMwYyxFQUFtQi9OLEVBQWdCK0ksU0FFYyxRQUE3Q3pkLEVBQUt5aUIsRUFBaUJELHlCQUFzQyxJQUFQeGlCLE9BQWdCLEVBQVNBLEVBQUdNLEtBQUttaUIsRUFBa0JybkIsR0FHcEgsSUFBSXNuQixHQUF3QixDQUN4QnZiLFNBQVMsR0FNVHdiLEdBQStCLFNBQVUxcUIsR0FFekMsT0FBTzBsQixFQUFrQjFsQixHQUFLQSxFQUFFQSxFQUFFZ0csT0FBUyxJQUFNLEVBQUloRyxHQVlyRDJxQixJQUFzQixFQXNFMUIsU0FBU0MsR0FBNkI5UCxFQUFZdlAsRUFBU1gsR0FDdkQsSUFBSTdDLEVBbk02QjhpQixFQUFVL1ksRUFDdkNnWixFQTZNSixPQVZJdG5CLE1BQU1DLFFBQVE4SCxFQUFRdUcsTUFDUyxRQUE5Qi9KLEVBQUsrUyxFQUFXalksZ0JBQTZCLElBQVBrRixJQUFzQitTLEVBQVdqWSxTQUFXLEtBVjNGLFNBQTBCMEksR0FDbEIvSCxNQUFNQyxRQUFROEgsRUFBUXVHLEtBQXlCLE9BQWxCdkcsRUFBUXVHLEdBQUcsS0FDeEN2RyxFQUFRdUcsR0FBS3NLLEVBQU0yTyxjQUFjLEdBQUkzTyxFQUFNZ0UsT0FBTzdVLEVBQVF1RyxLQUFLLEdBQy9EdkcsRUFBUXVHLEdBQUcsR0FBS3ZHLEVBQVFpQyxNQVM1QmxCLENBQWlCZixHQS9FckIsU0FBNkJ4RCxHQUN6QkEsRUFBR2lqQixLQUFNampCLEVBQUdqRixNQUFPaUYsRUFBR2tqQixjQUFlbGpCLEVBQUdtakIsZ0JBQWlCbmpCLEVBQUdvakIsaUJBQWtCcGpCLEVBQUcvRSxPQUFRK0UsRUFBR3FqQixXQUFZcmpCLEVBQUdzakIsWUFBYXRqQixFQUFHeUYsS0FBTSxJQUFJc04sRUFBYXNCLEVBQU1uTSxPQUFPbEksRUFBSSxDQUFDLE9BQVEsUUFBUyxnQkFBaUIsa0JBQW1CLG1CQUFvQixTQUFVLGFBQWMsY0FBZSxTQUNwUixRQUFTbUMsT0FBT3VQLEtBQUtxQixHQUFZOVUsT0FpRjVCc2xCLENBQW9CeFEsS0FDckJBLEVBQWFzQixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUkzTCxJQTVNbEIrUCxFQTRNb0RqZ0IsRUE1TTFDa0gsRUE0TStDdkcsRUFBUXVHLEdBek05RmdaLEVBREFwRixFQUFrQjVULEdBQ0VwTCxHQUloQnFmLEdBQW1COEUsSUFBYTlFLEdBQW1CUSxRQUVwRG5LLEVBQU1xSyxTQUFTLENBQUUzVSxHQUFJQSxHQUFNZ1osRUFBa0JoWixPQXFNN0NzSyxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUlsYixHQTlFN0MsU0FBNkN4RCxHQUN6QyxJQUFJbkQsRUFBT21ELEVBQUduRCxLQUFNMm1CLEVBQVF4akIsRUFBR3dqQixNQUFPQyxFQUFPempCLEVBQUd5akIsS0FBTUMsRUFBTzFqQixFQUFHMGpCLEtBQU1DLEVBQU8zakIsRUFBRzJqQixLQUFNNVEsRUFBYXNCLEVBQU1uTSxPQUFPbEksRUFBSSxDQUFDLE9BQVEsUUFBUyxPQUFRLE9BQVEsU0FDbEp3RCxFQUFVNlEsRUFBTXFLLFNBQVMsR0FBSTNMLEdBK0NqQyxPQTlDSXlRLElBQ0FoZ0IsRUFBZ0IsT0FBSWdnQixHQUlwQnpRLEVBQVdqWSxXQUNYMEksRUFBa0IsU0FBSTBZLEVBQXNCbkosRUFBV2pZLFdBQ3ZEaVksRUFBV3VRLGNBQ1g5ZixFQUFROGYsWUFBY3BILEVBQXNCbkosRUFBV3VRLGNBSXZEem1CLElBQ0EyRyxFQUFjLEtBek5GLFNBQVUzRyxHQUMxQixPQUFPcEIsTUFBTUMsUUFBUW1CLElBQTRCLGlCQUFaQSxFQUFLLEdBd05wQittQixDQUFjL21CLEdBQzFCQSxFQUFLZ0QsSUFBSXFkLEdBQ1RBLEVBQTJCcmdCLElBS2IsVUFBcEJrVyxFQUFXOEssT0FDWHJhLEVBQVFxYSxLQUFPLGNBSWY0RixHQUFRRSxHQUFRRCxLQUNoQm5QLEVBQVVzUCxTQUFTakIsR0FBcUIsbUdBQ3hDQSxJQUFzQixFQUNsQmEsRUFDQWpnQixFQUFRNmYsV0FBYSxVQUVoQk0sRUFDTG5nQixFQUFRNmYsV0FBYSxPQUVoQkssSUFDTGxnQixFQUFRNmYsV0FBYSxVQUV6QjdmLEVBQVF2SSxPQUFTMG9CLEdBQVFGLEdBQVFDLEdBQVEzUSxFQUFXOVgsUUFPaEMsV0FBcEI4WCxFQUFXOEssT0FDWHJhLEVBQVFxYSxLQUFPLGFBQ1pyYSxFQTZCNENzZ0IsQ0FBb0MvUSxJQStEM0YsU0FBU2dSLEdBQU8zb0IsR0FDWixPQUFrQixJQUFWQSxHQUNjLGlCQUFWQSxHQUNrQixJQUF0QnlDLFdBQVd6QyxLQUNhLElBQXhCQSxFQUFNL0MsUUFBUSxLQUUxQixTQUFTMnJCLEdBQVlDLEdBQ2pCLE1BQW9DLGlCQUF0QkEsRUFDUixFQUNBekIsR0FBa0IsR0FBSXlCLEdBRWhDLFNBQVNDLEdBQW1CblIsRUFBWWxRLEdBQ3BDLE9BQU9rUSxFQUFXbFEsSUFBUWtRLEVBQW9CLFNBQUtBLEVBTXZELFNBQVNvUixHQUFldGhCLEVBQUt6SCxFQUFPOEosRUFBUTZOLEdBS3hDLFlBSm1CLElBQWZBLElBQXlCQSxFQUFhLElBQ3RDMlAsR0FBc0J2YixVQUN0QjRMLEVBQWEsQ0FBRThLLE1BQU0sSUFFbEJ6aUIsRUFBTWlMLE9BQU0sU0FBVStkLEdBQ3pCLElBQUlDLEVBQ0FyZSxFQUNBblAsRUFwRlosU0FBc0JnTSxFQUFLekgsRUFBTzhKLEVBQVE2TixFQUFZcVIsR0FDbEQsSUFBSXBrQixFQUNBc2tCLEVBQWtCSixHQUFtQm5SLEVBQVlsUSxHQUNqRHFJLEVBQXlDLFFBQS9CbEwsRUFBS3NrQixFQUFnQjdlLFlBQXlCLElBQVB6RixFQUFnQkEsRUFBSzVFLEVBQU10RCxNQUM1RXlzQixFQUFxQi9HLEVBQWEzYSxFQUFLcUMsR0FDNUIsU0FBWGdHLEdBQXFCcVosR0FBd0MsaUJBQVhyZixFQUtsRGdHLEVBQVNzWCxHQUFrQjNmLEVBQUtxQyxHQUUzQjZlLEdBQU83WSxJQUE2QixpQkFBWGhHLEVBQzlCZ0csRUFBUzhZLEdBQVk5ZSxJQUVmekosTUFBTUMsUUFBUXdKLElBQ3BCNmUsR0FBTzdlLElBQ1csaUJBQVhnRyxJQUNQaEcsRUFBUzhlLEdBQVk5WSxJQUV6QixJQUFJc1osRUFBcUJoSCxFQUFhM2EsRUFBS3FJLEdBZ0MzQyxPQS9CQXFKLEVBQVVzUCxRQUFRVyxJQUF1QkQsRUFBb0IsNkJBQTZCaEgsT0FBTzFhLEVBQUssV0FBWTBhLE9BQU9yUyxFQUFRLFVBQVlxUyxPQUFPclksRUFBUSxPQUFRcVksT0FBT3JTLEVBQVEsK0RBQStEcVMsT0FBT3JTLEVBQVEsOEJBQThCcVMsT0FBT3JZLEVBQVEsK0JBK0J0U3NmLEdBQ0hELElBQ3dCLElBQXpCRCxFQUFnQnpHLEtBaENwQixXQUNJLElBQUlyYSxFQUFVLENBQ1ZpQyxLQUFNeUYsRUFDTm5CLEdBQUk3RSxFQUNKdUUsU0FBVXJPLEVBQU04ZCxjQUNoQmtMLFdBQVlBLEVBQ1pLLFNBQVUsU0FBVXhzQixHQUFLLE9BQU9tRCxFQUFNMUQsSUFBSU8sS0FFOUMsTUFBZ0MsWUFBekJxc0IsRUFBZ0J6RyxNQUNNLFVBQXpCeUcsRUFBZ0J6RyxLQUNkcEosRUFBVWlRLFFBQVFyUSxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUlsYixHQUFVOGdCLElBQzlEN1AsRUFBVTFTLFFBQVFzUyxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUltRSxHQUE2QnlCLEVBQWlCOWdCLEVBQVNYLElBQU8sQ0FBRTRoQixTQUFVLFNBQVV4c0IsR0FDbEksSUFBSStILEVBQ0p3RCxFQUFRaWhCLFNBQVN4c0IsR0FDbUIsUUFBbkMrSCxFQUFLc2tCLEVBQWdCRyxnQkFBNkIsSUFBUHprQixHQUF5QkEsRUFBR00sS0FBS2drQixFQUFpQnJzQixJQUMvRm1zQixXQUFZLFdBQ1gsSUFBSXBrQixFQUNKd0QsRUFBUTRnQixhQUM4QixRQUFyQ3BrQixFQUFLc2tCLEVBQWdCRixrQkFBK0IsSUFBUHBrQixHQUF5QkEsRUFBR00sS0FBS2drQixRQUcvRixXQUNJLElBQUl0a0IsRUFBSXNFLEVBQ0pxZ0IsRUFBY2hDLEdBQTZCemQsR0FLL0MsT0FKQTlKLEVBQU0xRCxJQUFJaXRCLEdBQ1ZQLElBQ3NHLFFBQXJHcGtCLEVBQUtza0IsTUFBQUEsT0FBeUQsRUFBU0EsRUFBZ0JHLGdCQUE2QixJQUFQemtCLEdBQXlCQSxFQUFHTSxLQUFLZ2tCLEVBQWlCSyxHQUN4RCxRQUF2R3JnQixFQUFLZ2dCLE1BQUFBLE9BQXlELEVBQVNBLEVBQWdCRixrQkFBK0IsSUFBUDlmLEdBQXlCQSxFQUFHaEUsS0FBS2drQixHQUMxSSxDQUFFeGpCLEtBQU0sZUFrQ0M4akIsQ0FBYS9oQixFQUFLekgsRUFBTzhKLEVBQVE2TixFQUFZcVIsR0FDekRycEIsRUFsSFosU0FBZ0NnWSxFQUFZbFEsR0FDeEMsSUFBSTdDLEVBQUlzRSxFQUVSLE9BQWlHLFFBQXpGQSxFQUFzQyxRQUFoQ3RFLEdBRFFra0IsR0FBbUJuUixFQUFZbFEsSUFBUSxJQUMxQjlILGFBQTBCLElBQVBpRixFQUFnQkEsRUFBSytTLEVBQVdoWSxhQUEwQixJQUFQdUosRUFBZ0JBLEVBQUssRUErRzlHdWdCLENBQXVCOVIsRUFBWWxRLEdBQzNDd0QsRUFBUSxXQUFjLE9BQVFMLEVBQVduUCxLQU83QyxPQU5Ja0UsRUFDQXNwQixFQUFhM2dCLE9BQU9vaEIsV0FBV3plLEVBQU82VixFQUFzQm5oQixJQUc1RHNMLElBRUcsV0FDSDBlLGFBQWFWLEdBQ2JyZSxNQUFBQSxHQUFvREEsRUFBU2xGLFdBZ0N6RSxTQUFTaUIsR0FBUTBELEVBQU1zRSxFQUFJZ0osUUFDSixJQUFmQSxJQUF5QkEsRUFBYSxJQUMxQyxJQUFJM1gsRUFBUTZnQixFQUFjeFcsR0FBUUEsRUFBT3ZCLEVBQVl1QixHQUVyRCxPQURBMGUsR0FBZSxHQUFJL29CLEVBQU8yTyxFQUFJZ0osR0FDdkIsQ0FDSGpTLEtBQU0sV0FBYyxPQUFPMUYsRUFBTTBGLFFBQ2pDaWIsWUFBYSxXQUFjLE9BQU8zZ0IsRUFBTTJnQixnQkFJaEQsSUFBSWlKLEdBQVUsQ0FBQyxVQUFXLFdBQVksYUFBYyxlQUNoREMsR0FBYUQsR0FBUS9tQixPQUNyQmluQixHQUFXLFNBQVU5cEIsR0FDckIsTUFBd0IsaUJBQVZBLEVBQXFCeUMsV0FBV3pDLEdBQVNBLEdBRXZEK3BCLEdBQU8sU0FBVS9wQixHQUNqQixNQUF3QixpQkFBVkEsR0FBc0JzWixFQUFnQnFLLEdBQUdyQixLQUFLdGlCLElBNkNoRSxTQUFTZ3FCLEdBQVV4dEIsRUFBUXl0QixHQUN2QixJQUFJcmxCLEVBQ0osT0FBcUMsUUFBN0JBLEVBQUtwSSxFQUFPeXRCLFVBQWdDLElBQVBybEIsRUFBZ0JBLEVBQUtwSSxFQUFPd25CLGFBeUI3RSxJQUFJa0csR0FBa0JDLEdBQVMsRUFBRyxHQUFLOVEsRUFBVWlJLFNBQzdDOEksR0FBbUJELEdBQVMsR0FBSyxJQUFNOVEsRUFBVTJILFFBQ3JELFNBQVNtSixHQUFTOW5CLEVBQUtDLEVBQUt4QyxHQUN4QixPQUFPLFNBQVV3RSxHQUViLE9BQUlBLEVBQUlqQyxFQUNHLEVBQ1BpQyxFQUFJaEMsRUFDRyxFQUNKeEMsRUFBT3VaLEVBQVVsWCxTQUFTRSxFQUFLQyxFQUFLZ0MsS0FTbkQsU0FBUytsQixHQUFhNXJCLEVBQU02ckIsR0FDeEI3ckIsRUFBSzRELElBQU1pb0IsRUFBV2pvQixJQUN0QjVELEVBQUs2RCxJQUFNZ29CLEVBQVdob0IsSUFPMUIsU0FBU2lvQixHQUFZQyxFQUFLQyxHQUN0QkosR0FBYUcsRUFBSS9zQixFQUFHZ3RCLEVBQVVodEIsR0FDOUI0c0IsR0FBYUcsRUFBSTlzQixFQUFHK3NCLEVBQVUvc0IsR0FHbEMsU0FBU2d0QixHQUFnQnZzQixHQUNyQixZQUFpQm5DLElBQVZtQyxHQUFpQyxJQUFWQSxFQUVsQyxTQUFTd3NCLEdBQVMvbEIsR0FDZCxJQUFJekcsRUFBUXlHLEVBQUd6RyxNQUFPNmtCLEVBQVNwZSxFQUFHb2UsT0FBUUMsRUFBU3JlLEVBQUdxZSxPQUN0RCxPQUFTeUgsR0FBZ0J2c0IsS0FDcEJ1c0IsR0FBZ0IxSCxLQUNoQjBILEdBQWdCekgsR0FFekIsU0FBUzJILEdBQWFwdUIsR0FDbEIsT0FBUW11QixHQUFTbnVCLElBQ2JxdUIsR0FBYXJ1QixFQUFPaUIsSUFDcEJvdEIsR0FBYXJ1QixFQUFPa0IsSUFDcEJsQixFQUFPbUIsR0FDUG5CLEVBQU8wQixRQUNQMUIsRUFBT3FtQixTQUNQcm1CLEVBQU9zbUIsUUFFZixTQUFTK0gsR0FBYTdxQixHQUNsQixPQUFPQSxHQUFtQixPQUFWQSxFQU1wQixTQUFTOHFCLEdBQVdDLEVBQU81c0IsRUFBTzZzQixHQUc5QixPQUFPQSxFQURNN3NCLEdBRFk0c0IsRUFBUUMsR0FPckMsU0FBU0MsR0FBZ0JGLEVBQU85c0IsRUFBV0UsRUFBTzZzQixFQUFhRSxHQUkzRCxZQUhpQmx2QixJQUFia3ZCLElBQ0FILEVBQVFELEdBQVdDLEVBQU9HLEVBQVVGLElBRWpDRixHQUFXQyxFQUFPNXNCLEVBQU82c0IsR0FBZS9zQixFQUtuRCxTQUFTa3RCLEdBQWUxc0IsRUFBTVIsRUFBV0UsRUFBTzZzQixFQUFhRSxRQUN2QyxJQUFkanRCLElBQXdCQSxFQUFZLFFBQzFCLElBQVZFLElBQW9CQSxFQUFRLEdBQ2hDTSxFQUFLNEQsSUFBTTRvQixHQUFnQnhzQixFQUFLNEQsSUFBS3BFLEVBQVdFLEVBQU82c0IsRUFBYUUsR0FDcEV6c0IsRUFBSzZELElBQU0yb0IsR0FBZ0J4c0IsRUFBSzZELElBQUtyRSxFQUFXRSxFQUFPNnNCLEVBQWFFLEdBS3hFLFNBQVNFLEdBQWNaLEVBQUs1bEIsR0FDeEIsSUFBSW5ILEVBQUltSCxFQUFHbkgsRUFBR0MsRUFBSWtILEVBQUdsSCxFQUNyQnl0QixHQUFlWCxFQUFJL3NCLEVBQUdBLEVBQUVRLFVBQVdSLEVBQUVVLE1BQU9WLEVBQUV1dEIsYUFDOUNHLEdBQWVYLEVBQUk5c0IsRUFBR0EsRUFBRU8sVUFBV1AsRUFBRVMsTUFBT1QsRUFBRXN0QixhQXlDbEQsU0FBU0ssR0FBYzVzQixFQUFNNk0sR0FDekI3TSxFQUFLNEQsSUFBTTVELEVBQUs0RCxJQUFNaUosRUFDdEI3TSxFQUFLNkQsSUFBTTdELEVBQUs2RCxJQUFNZ0osRUFPMUIsU0FBU2dnQixHQUFjN3NCLEVBQU1sQyxFQUFZcUksR0FDckMsSUFBSXNFLEVBQUsrUCxFQUFNZ0UsT0FBT3JZLEVBQUksR0FBSTZDLEVBQU15QixFQUFHLEdBQUlxaUIsRUFBV3JpQixFQUFHLEdBQUlzaUIsRUFBWXRpQixFQUFHLEdBQ3hFdWlCLE9BQXVDenZCLElBQTFCTyxFQUFXaXZCLEdBQTJCanZCLEVBQVdpdkIsR0FBYSxHQUMzRVIsRUFBYzNSLEVBQVV2VyxJQUFJckUsRUFBSzRELElBQUs1RCxFQUFLNkQsSUFBS21wQixHQUVwRE4sR0FBZTFzQixFQUFNbEMsRUFBV2tMLEdBQU1sTCxFQUFXZ3ZCLEdBQVdQLEVBQWF6dUIsRUFBVzRCLE9BS3hGLElBQUl1dEIsR0FBVSxDQUFDLElBQUssU0FBVSxXQUMxQkMsR0FBVSxDQUFDLElBQUssU0FBVSxXQUk5QixTQUFTQyxHQUFhcEIsRUFBSzVoQixHQUN2QjBpQixHQUFjZCxFQUFJL3NCLEVBQUdtTCxFQUFXOGlCLElBQ2hDSixHQUFjZCxFQUFJOXNCLEVBQUdrTCxFQUFXK2lCLElBR3BDLFNBQVNFLEdBQVdwdEIsR0FDaEIsT0FBT0EsRUFBSzZELElBQU03RCxFQUFLNEQsSUFFM0IsU0FBU3lwQixHQUFPOXJCLEVBQU84SixFQUFRaWlCLEdBRzNCLFlBRmUsSUFBWGppQixJQUFxQkEsRUFBUyxRQUNkLElBQWhCaWlCLElBQTBCQSxFQUFjLEtBQ3JDMVMsRUFBVS9OLFNBQVN0TCxFQUFPOEosR0FBVWlpQixFQUUvQyxTQUFTQyxHQUFjamEsRUFBT2thLEVBQVFuaUIsRUFBUWdHLFFBQzNCLElBQVhBLElBQXFCQSxFQUFTLElBQ2xDaUMsRUFBTWpDLE9BQVNBLEVBQ2ZpQyxFQUFNaVosWUFBYzNSLEVBQVV2VyxJQUFJbXBCLEVBQU81cEIsSUFBSzRwQixFQUFPM3BCLElBQUt5UCxFQUFNakMsUUFDaEVpQyxFQUFNNVQsTUFBUTB0QixHQUFXL2hCLEdBQVUraEIsR0FBV0ksSUFDMUNILEdBQU8vWixFQUFNNVQsTUFBTyxFQUFHLE9BQVcraEIsTUFBTW5PLEVBQU01VCxVQUM5QzRULEVBQU01VCxNQUFRLEdBQ2xCNFQsRUFBTTlULFVBQ0ZvYixFQUFVdlcsSUFBSWdILEVBQU96SCxJQUFLeUgsRUFBT3hILElBQUt5UCxFQUFNakMsUUFBVWlDLEVBQU1pWixhQUM1RGMsR0FBTy9aLEVBQU05VCxZQUFjaWlCLE1BQU1uTyxFQUFNOVQsY0FDdkM4VCxFQUFNOVQsVUFBWSxHQUUxQixTQUFTaXVCLEdBQWFuYSxFQUFPa2EsRUFBUW5pQixFQUFRZ0csR0FDekNrYyxHQUFjamEsRUFBTXRVLEVBQUd3dUIsRUFBT3h1QixFQUFHcU0sRUFBT3JNLEVBQUdxUyxNQUFBQSxPQUF1QyxFQUFTQSxFQUFPb1csU0FDbEc4RixHQUFjamEsRUFBTXJVLEVBQUd1dUIsRUFBT3Z1QixFQUFHb00sRUFBT3BNLEVBQUdvUyxNQUFBQSxPQUF1QyxFQUFTQSxFQUFPc1csU0FFdEcsU0FBUytGLEdBQWlCcmlCLEVBQVFzaUIsRUFBVTNWLEdBQ3hDM00sRUFBT3pILElBQU1vVSxFQUFPcFUsSUFBTStwQixFQUFTL3BCLElBQ25DeUgsRUFBT3hILElBQU13SCxFQUFPekgsSUFBTXdwQixHQUFXTyxHQU16QyxTQUFTQyxHQUF5QnZpQixFQUFRd2lCLEVBQVE3VixHQUM5QzNNLEVBQU96SCxJQUFNaXFCLEVBQU9qcUIsSUFBTW9VLEVBQU9wVSxJQUNqQ3lILEVBQU94SCxJQUFNd0gsRUFBT3pILElBQU13cEIsR0FBV1MsR0FFekMsU0FBU0MsR0FBcUJ6aUIsRUFBUXdpQixFQUFRN1YsR0FDMUM0VixHQUF5QnZpQixFQUFPck0sRUFBRzZ1QixFQUFPN3VCLEVBQUdnWixFQUFPaFosR0FDcEQ0dUIsR0FBeUJ2aUIsRUFBT3BNLEVBQUc0dUIsRUFBTzV1QixFQUFHK1ksRUFBTy9ZLEdBTXhELFNBQVM4dUIsR0FBaUJ6QixFQUFPOXNCLEVBQVdFLEVBQU82c0IsRUFBYUUsR0FNNUQsT0FKQUgsRUFBUUQsR0FEUkMsR0FBUzlzQixFQUNpQixFQUFJRSxFQUFPNnNCLFFBQ3BCaHZCLElBQWJrdkIsSUFDQUgsRUFBUUQsR0FBV0MsRUFBTyxFQUFJRyxFQUFVRixJQUVyQ0QsRUE0QlgsU0FBUzBCLEdBQXFCaHVCLEVBQU1sQyxFQUFZcUksRUFBSWtMLEVBQVE0YyxHQUN4RCxJQUFJeGpCLEVBQUsrUCxFQUFNZ0UsT0FBT3JZLEVBQUksR0FBSTZDLEVBQU15QixFQUFHLEdBQUlxaUIsRUFBV3JpQixFQUFHLEdBQUlzaUIsRUFBWXRpQixFQUFHLElBeEJoRixTQUF5QnpLLEVBQU1SLEVBQVdFLEVBQU8yUixFQUFRb2IsRUFBVVosRUFBWW9DLEdBVzNFLFFBVmtCLElBQWR6dUIsSUFBd0JBLEVBQVksUUFDMUIsSUFBVkUsSUFBb0JBLEVBQVEsUUFDakIsSUFBWDJSLElBQXFCQSxFQUFTLFNBQ2YsSUFBZndhLElBQXlCQSxFQUFhN3JCLFFBQ3ZCLElBQWZpdUIsSUFBeUJBLEVBQWFqdUIsR0FDdEM2YSxFQUFnQnFULFFBQVFySyxLQUFLcmtCLEtBQzdCQSxFQUFZd0UsV0FBV3hFLEdBRXZCQSxFQUR1Qm9iLEVBQVV2VyxJQUFJNHBCLEVBQVdycUIsSUFBS3FxQixFQUFXcHFCLElBQUtyRSxFQUFZLEtBQ2xEeXVCLEVBQVdycUIsS0FFckIsaUJBQWRwRSxFQUFYLENBRUEsSUFBSStzQixFQUFjM1IsRUFBVXZXLElBQUl3bkIsRUFBV2pvQixJQUFLaW9CLEVBQVdob0IsSUFBS3dOLEdBQzVEclIsSUFBUzZyQixJQUNUVSxHQUFlL3NCLEdBQ25CUSxFQUFLNEQsSUFBTW1xQixHQUFpQi90QixFQUFLNEQsSUFBS3BFLEVBQVdFLEVBQU82c0IsRUFBYUUsR0FDckV6c0IsRUFBSzZELElBQU1rcUIsR0FBaUIvdEIsRUFBSzZELElBQUtyRSxFQUFXRSxFQUFPNnNCLEVBQWFFLElBUXJFMEIsQ0FBZ0JudUIsRUFBTWxDLEVBQVdrTCxHQUFNbEwsRUFBV2d2QixHQUFXaHZCLEVBQVdpdkIsR0FBWWp2QixFQUFXNEIsTUFBTzJSLEVBQVE0YyxHQUtsSCxJQUFJRyxHQUFRLENBQUMsSUFBSyxTQUFVLFdBQ3hCQyxHQUFRLENBQUMsSUFBSyxTQUFVLFdBSzVCLFNBQVNDLEdBQW9CdkMsRUFBS2p1QixFQUFZa3VCLEVBQVd1QyxHQUNyRFAsR0FBcUJqQyxFQUFJL3NCLEVBQUdsQixFQUFZc3dCLEdBQU9wQyxNQUFBQSxPQUE2QyxFQUFTQSxFQUFVaHRCLEVBQUd1dkIsTUFBQUEsT0FBNkMsRUFBU0EsRUFBVXZ2QixHQUNsTGd2QixHQUFxQmpDLEVBQUk5c0IsRUFBR25CLEVBQVl1d0IsR0FBT3JDLE1BQUFBLE9BQTZDLEVBQVNBLEVBQVUvc0IsRUFBR3N2QixNQUFBQSxPQUE2QyxFQUFTQSxFQUFVdHZCLEdBR3RMLElBV0l1dkIsR0FBWSxXQUFjLE1BQU8sQ0FDakN4dkIsRUFGa0MsQ0FBRzRFLElBQUssRUFBR0MsSUFBSyxHQUdsRDVFLEVBSGtDLENBQUcyRSxJQUFLLEVBQUdDLElBQUssS0FNdEQsU0FBUzRxQixHQUFnQm5iLEdBQ3JCLE9BQTJCLElBQXBCQSxFQUFNOVQsV0FBbUMsSUFBaEI4VCxFQUFNNVQsTUFFMUMsU0FBU2d2QixHQUFZcGIsR0FDakIsT0FBT21iLEdBQWdCbmIsRUFBTXRVLElBQU15dkIsR0FBZ0JuYixFQUFNclUsR0FFN0QsU0FBUzB2QixHQUFVenVCLEVBQUdDLEdBQ2xCLE9BQVFELEVBQUVsQixFQUFFNEUsTUFBUXpELEVBQUVuQixFQUFFNEUsS0FDcEIxRCxFQUFFbEIsRUFBRTZFLE1BQVExRCxFQUFFbkIsRUFBRTZFLEtBQ2hCM0QsRUFBRWpCLEVBQUUyRSxNQUFRekQsRUFBRWxCLEVBQUUyRSxLQUNoQjFELEVBQUVqQixFQUFFNEUsTUFBUTFELEVBQUVsQixFQUFFNEUsSUFHeEIsSUFBSStxQixHQUEyQixXQUMzQixTQUFTQSxJQUNMM3hCLEtBQUs0eEIsUUFBVSxHQXdHbkIsT0F0R0FELEVBQVVsbUIsVUFBVWlDLElBQU0sU0FBVW1rQixHQUNoQ3p3QixFQUFjcEIsS0FBSzR4QixRQUFTQyxHQUM1QkEsRUFBS0Msa0JBRVRILEVBQVVsbUIsVUFBVWtRLE9BQVMsU0FBVWtXLEdBS25DLEdBSkFwd0IsRUFBV3pCLEtBQUs0eEIsUUFBU0MsR0FDckJBLElBQVM3eEIsS0FBSyt4QixXQUNkL3hCLEtBQUsreEIsY0FBV3p4QixHQUVoQnV4QixJQUFTN3hCLEtBQUtneUIsS0FBTSxDQUNwQixJQUFJRCxFQUFXL3hCLEtBQUs0eEIsUUFBUTV4QixLQUFLNHhCLFFBQVF6cUIsT0FBUyxHQUM5QzRxQixHQUNBL3hCLEtBQUtpeUIsUUFBUUYsS0FJekJKLEVBQVVsbUIsVUFBVXltQixTQUFXLFNBQVVMLEdBQ3JDLElBTUlFLEVBTkFJLEVBQWNueUIsS0FBSzR4QixRQUFRUSxXQUFVLFNBQVVDLEdBQVUsT0FBT1IsSUFBU1EsS0FDN0UsR0FBb0IsSUFBaEJGLEVBQ0EsT0FBTyxFQUtYLElBQUssSUFBSXpzQixFQUFJeXNCLEVBQWF6c0IsR0FBSyxFQUFHQSxJQUFLLENBQ25DLElBQUkyc0IsRUFBU3J5QixLQUFLNHhCLFFBQVFsc0IsR0FDMUIsSUFBeUIsSUFBckIyc0IsRUFBT0MsVUFBcUIsQ0FDNUJQLEVBQVdNLEVBQ1gsT0FHUixRQUFJTixJQUNBL3hCLEtBQUtpeUIsUUFBUUYsSUFDTixJQU1mSixFQUFVbG1CLFVBQVV3bUIsUUFBVSxTQUFVSixFQUFNVSxHQUMxQyxJQUFJcnBCLEVBQ0E2b0IsRUFBVy94QixLQUFLZ3lCLEtBQ2hCSCxJQUFTRSxJQUViL3hCLEtBQUsreEIsU0FBV0EsRUFDaEIveEIsS0FBS2d5QixLQUFPSCxFQUNaQSxFQUFLVyxPQUNEVCxJQUNBQSxFQUFTVSxVQUFZVixFQUFTRCxpQkFDOUJELEVBQUtDLGlCQUNMRCxFQUFLYSxXQUFhWCxFQUNkUSxJQUNBVixFQUFLYSxXQUFXQyxpQkFBa0IsR0FFbENaLEVBQVNhLFdBQ1RmLEVBQUtlLFNBQVdiLEVBQVNhLFNBQ3pCZixFQUFLZSxTQUFTQyxhQUNWZCxFQUFTZSxpQkFBbUJmLEVBQVNjLGFBQ3pDaEIsRUFBS2UsU0FBU0csVUFBVyxJQUVKLFFBQXBCN3BCLEVBQUsyb0IsRUFBSy9hLFlBQXlCLElBQVA1TixPQUFnQixFQUFTQSxFQUFHOHBCLGNBQ3pEbkIsRUFBS29CLGVBQWdCLElBR1AsSUFERnBCLEVBQUtubEIsUUFBUXdtQixXQUV6Qm5CLEVBQVNvQixVQWdCckJ4QixFQUFVbG1CLFVBQVUybkIsc0JBQXdCLFdBQ3hDcHpCLEtBQUs0eEIsUUFBUTl1QixTQUFRLFNBQVUrdUIsR0FDM0IsSUFBSTNvQixFQUFJc0UsRUFBSTZsQixFQUFJQyxFQUFJQyxFQUMwQixRQUE3Qy9sQixHQUFNdEUsRUFBSzJvQixFQUFLbmxCLFNBQVM4bUIsc0JBQW1DLElBQVBobUIsR0FBeUJBLEVBQUdoRSxLQUFLTixHQUNtQixRQUF6R3FxQixFQUFrQyxRQUE1QkYsRUFBS3hCLEVBQUs0QixvQkFBaUMsSUFBUEosT0FBZ0IsR0FBVUMsRUFBS0QsRUFBRzNtQixTQUFTOG1CLHNCQUFtQyxJQUFQRCxHQUF5QkEsRUFBRy9wQixLQUFLOHBCLE9BRzNKM0IsRUFBVWxtQixVQUFVcW1CLGVBQWlCLFdBQ2pDOXhCLEtBQUs0eEIsUUFBUTl1QixTQUFRLFNBQVUrdUIsR0FDM0JBLEVBQUtZLFVBQVlaLEVBQUtDLGdCQUFlLE9BTzdDSCxFQUFVbG1CLFVBQVVpb0IsbUJBQXFCLFdBQ2pDMXpCLEtBQUtneUIsTUFBUWh5QixLQUFLZ3lCLEtBQUtZLFdBQ3ZCNXlCLEtBQUtneUIsS0FBS1ksY0FBV3R5QixJQUd0QnF4QixFQTFHbUIsR0E2RzFCZ0MsR0FBa0IsR0FDdEIsU0FBU0MsR0FBa0JDLEdBQ3ZCeG9CLE9BQU9nRCxPQUFPc2xCLEdBQWlCRSxHQUluQyxTQUFTQyxHQUF5QnpkLEVBQU8wZCxFQUFXQyxHQU9oRCxJQUFJQyxFQUFhNWQsRUFBTXRVLEVBQUVRLFVBQVl3eEIsRUFBVWh5QixFQUMzQ215QixFQUFhN2QsRUFBTXJVLEVBQUVPLFVBQVl3eEIsRUFBVS94QixFQUMzQ2tMLEVBQVksZUFBZXVaLE9BQU93TixFQUFZLFFBQVF4TixPQUFPeU4sRUFBWSxXQU03RSxHQURBaG5CLEdBQWEsU0FBU3VaLE9BQU8sRUFBSXNOLEVBQVVoeUIsRUFBRyxNQUFNMGtCLE9BQU8sRUFBSXNOLEVBQVUveEIsRUFBRyxNQUN4RWd5QixFQUFpQixDQUNqQixJQUFJeHhCLEVBQVN3eEIsRUFBZ0J4eEIsT0FBUTJrQixFQUFVNk0sRUFBZ0I3TSxRQUFTQyxFQUFVNE0sRUFBZ0I1TSxRQUM5RjVrQixJQUNBMEssR0FBYSxVQUFVdVosT0FBT2prQixFQUFRLFVBQ3RDMmtCLElBQ0FqYSxHQUFhLFdBQVd1WixPQUFPVSxFQUFTLFVBQ3hDQyxJQUNBbGEsR0FBYSxXQUFXdVosT0FBT1csRUFBUyxVQU1oRCxJQUFJK00sRUFBZ0I5ZCxFQUFNdFUsRUFBRVUsTUFBUXN4QixFQUFVaHlCLEVBQzFDcXlCLEVBQWdCL2QsRUFBTXJVLEVBQUVTLE1BQVFzeEIsRUFBVS94QixFQUU5QyxNQWhDcUIsc0RBK0JyQmtMLEdBQWEsU0FBU3VaLE9BQU8wTixFQUFlLE1BQU0xTixPQUFPMk4sRUFBZSxNQUM5QixPQUFTbG5CLEVBR3ZELFNBQVNtbkIsR0FBU0MsR0FDZCxNQUFPLENBQUNBLEVBQVMsS0FBTUEsRUFBUyxNQU9wQyxJQUFJQyxHQUFnQixDQUFDLEdBQUksSUFBSyxJQUFLLEtBUy9CQyxHQUFpQixDQUFDLHVCQUF3QixJQUFLLElBQUssS0FTeEQsU0FBU0MsR0FBbUJ4eEIsRUFBR0MsR0FDM0IsT0FBT3N4QixHQUFlanpCLFFBQVEwQixHQUFLdXhCLEdBQWVqekIsUUFBUTJCLEdBZGxELENBQUMsWUFBYSxRQUFTLFNBQVUsUUFLdkNKLFNBQVEsU0FBVTR4QixHQUNwQixPQUFPSCxHQUFjenhCLFNBQVEsU0FBVTZ4QixHQUNuQyxPQUFPSCxHQUFlaHpCLEtBQUtrekIsRUFBZUMsU0FZbEQsSUFBSUMsR0FBbUIsSUFBSXh4QixJQUFJb3hCLElBQy9CLFNBQVNLLEdBQWdCOW9CLEdBQ3JCLE9BQU82b0IsR0FBaUJqMEIsSUFBSW9MLEdBS2hDLElBQUkrb0IsR0FBdUIsSUFBSTF4QixJQUFJLENBQUMsVUFBVyxVQUFXLFlBQzFELFNBQVMyeEIsR0FBc0JocEIsR0FDM0IsT0FBTytvQixHQUFxQm4wQixJQUFJb0wsR0FHcEMsSUFBSXVNLEdBQWlCLFNBQVVyVixFQUFHQyxHQUM5QixPQUFPRCxFQUFFK1gsTUFBUTlYLEVBQUU4WCxPQUduQmdhLEdBQTBCLFdBQzFCLFNBQVNBLElBQ0xoMUIsS0FBS2kxQixTQUFXLEdBQ2hCajFCLEtBQUtrMUIsU0FBVSxFQWVuQixPQWJBRixFQUFTdnBCLFVBQVVpQyxJQUFNLFNBQVV5bkIsR0FDL0IvekIsRUFBY3BCLEtBQUtpMUIsU0FBVUUsR0FDN0JuMUIsS0FBS2sxQixTQUFVLEdBRW5CRixFQUFTdnBCLFVBQVVrUSxPQUFTLFNBQVV3WixHQUNsQzF6QixFQUFXekIsS0FBS2kxQixTQUFVRSxHQUMxQm4xQixLQUFLazFCLFNBQVUsR0FFbkJGLEVBQVN2cEIsVUFBVTNJLFFBQVUsU0FBVXd4QixHQUNuQ3QwQixLQUFLazFCLFNBQVdsMUIsS0FBS2kxQixTQUFTMXhCLEtBQUsrVSxJQUNuQ3RZLEtBQUtrMUIsU0FBVSxFQUNmbDFCLEtBQUtpMUIsU0FBU255QixRQUFRd3hCLElBRW5CVSxFQWxCa0IsR0EwQjdCLFNBQVNJLEdBQW1COXdCLEdBQ3hCLElBeHpCMEJuRCxFQXd6QnRCazBCLEVBQWlCbFEsRUFBYzdnQixHQUFTQSxFQUFNdEQsTUFBUXNELEVBQzFELE9BenpCMEJuRCxFQXl6QkxrMEIsRUF4ekJkN3dCLFFBQVFyRCxHQUFrQixpQkFBTkEsR0FBa0JBLEVBQUVpRyxLQUFPakcsRUFBRW0wQixTQXl6QmxERCxFQUFlQyxVQUNmRCxFQU9WLElBTUlFLEdBQXdCLENBS3hCQyx3QkFBd0IsRUFLeEJDLGdCQUFnQixHQUVwQixTQUFTQyxHQUFxQnhzQixHQUMxQixJQUFJeXNCLEVBQXVCenNCLEVBQUd5c0IscUJBQXNCQyxFQUFnQjFzQixFQUFHMHNCLGNBQWVDLEVBQWdCM3NCLEVBQUcyc0IsY0FBZUMsRUFBb0I1c0IsRUFBRzRzQixrQkFBbUJDLEVBQWlCN3NCLEVBQUc2c0IsZUFDdEwsT0FBc0IsV0FDbEIsU0FBU0MsRUFBZUMsRUFBSXBELEVBQWM5WCxHQUN0QyxJQUFJc0ksRUFBUXJqQixVQUNTLElBQWpCNnlCLElBQTJCQSxFQUFlLFNBQy9CLElBQVg5WCxJQUFxQkEsRUFBUzZhLE1BQUFBLE9BQXFELEVBQVNBLEtBT2hHNTFCLEtBQUtpMUIsU0FBVyxJQUFJN3hCLElBS3BCcEQsS0FBSzBNLFFBQVUsR0FNZjFNLEtBQUtrMkIsaUJBQWtCLEVBQ3ZCbDJCLEtBQUttMkIsb0JBQXFCLEVBTzFCbjJCLEtBQUtpekIsZUFBZ0IsRUFJckJqekIsS0FBS28yQix1QkFBd0IsRUFDN0JwMkIsS0FBS3EyQix1QkFBd0IsRUFLN0JyMkIsS0FBS2d6QixZQUFhLEVBSWxCaHpCLEtBQUtzMkIsT0FBUSxFQUtidDJCLEtBQUt1MkIsWUFBYSxFQUlsQnYyQixLQUFLdzJCLHNCQUF1QixFQVM1QngyQixLQUFLK3pCLFVBQVksQ0FBRWh5QixFQUFHLEVBQUdDLEVBQUcsR0FJNUJoQyxLQUFLeTJCLGNBQWdCLElBQUkxMUIsSUFFekJmLEtBQUswMkIsZUFBaUIsSUFBSTMxQixJQUMxQmYsS0FBSzIyQixrQkFBb0IsV0FDakJ0VCxFQUFNMlAsYUFDTjNQLEVBQU0yUCxZQUFhLEVBQ25CM1AsRUFBTXVULHNCQUdkNTJCLEtBQUs2MkIsaUJBQW1CLFdBQ3BCeFQsRUFBTXlULE1BQU1oMEIsUUFBUWkwQixJQUNwQjFULEVBQU15VCxNQUFNaDBCLFFBQVFrMEIsS0FFeEJoM0IsS0FBS2kzQixjQUFlLEVBQ3BCajNCLEtBQUtrM0IsV0FBWSxFQUNqQmwzQixLQUFLbTNCLGtCQUFvQixFQUt6Qm4zQixLQUFLbzNCLFlBQWMsSUFBSXIyQixJQUN2QmYsS0FBS2kyQixHQUFLQSxFQUNWajJCLEtBQUs2eUIsYUFBZUEsRUFDcEI3eUIsS0FBSzhXLEtBQU9pRSxFQUFTQSxFQUFPakUsTUFBUWlFLEVBQVMvYSxLQUM3Q0EsS0FBS3EzQixLQUFPdGMsRUFBU3dDLEVBQU0yTyxjQUFjM08sRUFBTTJPLGNBQWMsR0FBSTNPLEVBQU1nRSxPQUFPeEcsRUFBT3NjLE9BQU8sR0FBUSxDQUFDdGMsSUFBUyxHQUFTLEdBQ3ZIL2EsS0FBSythLE9BQVNBLEVBQ2QvYSxLQUFLZ2IsTUFBUUQsRUFBU0EsRUFBT0MsTUFBUSxFQUFJLEVBQ3pDaWIsR0FBTWoyQixLQUFLOFcsS0FBS3dnQixzQkFBc0JyQixFQUFJajJCLE1BQzFDLElBQUssSUFBSTBGLEVBQUksRUFBR0EsRUFBSTFGLEtBQUtxM0IsS0FBS2x3QixPQUFRekIsSUFDbEMxRixLQUFLcTNCLEtBQUszeEIsR0FBRzh3QixzQkFBdUIsRUFFcEN4MkIsS0FBSzhXLE9BQVM5VyxPQUNkQSxLQUFLODJCLE1BQVEsSUFBSTlCLElBczVCekIsT0FwNUJBZ0IsRUFBZXZxQixVQUFVNk8saUJBQW1CLFNBQVV6WCxFQUFNdWdCLEdBSXhELE9BSEtwakIsS0FBS3kyQixjQUFjOTFCLElBQUlrQyxJQUN4QjdDLEtBQUt5MkIsY0FBYzcxQixJQUFJaUMsRUFBTSxJQUFJcWdCLEdBRTlCbGpCLEtBQUt5MkIsY0FBY3oxQixJQUFJNkIsR0FBTTZLLElBQUkwVixJQUU1QzRTLEVBQWV2cUIsVUFBVThyQixnQkFBa0IsU0FBVTEwQixHQUVqRCxJQURBLElBQUlzRCxFQUFPLEdBQ0ZxeEIsRUFBSyxFQUFHQSxFQUFLQyxVQUFVdHdCLE9BQVFxd0IsSUFDcENyeEIsRUFBS3F4QixFQUFLLEdBQUtDLFVBQVVELEdBRTdCLElBQUlFLEVBQXNCMTNCLEtBQUt5MkIsY0FBY3oxQixJQUFJNkIsR0FDakQ2MEIsTUFBQUEsR0FBMEVBLEVBQW9CcFUsT0FBT3FVLE1BQU1ELEVBQXFCbmEsRUFBTTJPLGNBQWMsR0FBSTNPLEVBQU1nRSxPQUFPcGIsSUFBTyxLQUVoTDZ2QixFQUFldnFCLFVBQVVtc0IsYUFBZSxTQUFVLzBCLEdBQzlDLE9BQU83QyxLQUFLeTJCLGNBQWM5MUIsSUFBSWtDLElBRWxDbXpCLEVBQWV2cUIsVUFBVTZyQixzQkFBd0IsU0FBVXJCLEVBQUlwRSxHQUMzRDd4QixLQUFLMDJCLGVBQWU5MUIsSUFBSXExQixFQUFJcEUsSUFLaENtRSxFQUFldnFCLFVBQVU4USxNQUFRLFNBQVVrVyxFQUFVUSxHQUNqRCxJQUNJL3BCLEVBREFtYSxFQUFRcmpCLEtBR1osUUFEc0IsSUFBbEJpekIsSUFBNEJBLEdBQWdCLElBQzVDanpCLEtBQUt5eUIsU0FBVCxDQUVBenlCLEtBQUtzMkIsTUFDRDdELGFBQW9Cb0YsWUFBbUMsUUFBckJwRixFQUFTcUYsUUFDL0M5M0IsS0FBS3l5QixTQUFXQSxFQUNoQixJQUFJamxCLEVBQUt4TixLQUFLME0sUUFBU3FyQixFQUFXdnFCLEVBQUd1cUIsU0FBVW5ILEVBQVNwakIsRUFBR29qQixPQUFRcFEsRUFBZ0JoVCxFQUFHZ1QsY0FVdEYsR0FUSUEsSUFBa0JBLEVBQWN3WCxlQUNoQ3hYLEVBQWNqRSxNQUFNa1csR0FFeEJ6eUIsS0FBSzhXLEtBQUtnZ0IsTUFBTXBwQixJQUFJMU4sTUFDRyxRQUF0QmtKLEVBQUtsSixLQUFLK2EsY0FBMkIsSUFBUDdSLEdBQXlCQSxFQUFHK3JCLFNBQVN2bkIsSUFBSTFOLE1BQ3hFQSxLQUFLaTJCLElBQU1qMkIsS0FBSzhXLEtBQUs0ZixlQUFlOWUsT0FBTzVYLEtBQUtpMkIsSUFDNUNoRCxJQUFrQnJDLEdBQVVtSCxLQUM1Qi8zQixLQUFLaXpCLGVBQWdCLEdBRXJCMEMsRUFBc0IsQ0FDdEIsSUFBSXNDLEVBQ0FDLEVBQXdCLFdBQ3hCLE9BQVE3VSxFQUFNdk0sS0FBS3VmLHVCQUF3QixHQUUvQ1YsRUFBcUJsRCxHQUFVLFdBQzNCcFAsRUFBTXZNLEtBQUt1Zix1QkFBd0IsRUFDbkNwSSxhQUFhZ0ssR0FDYkEsRUFBbUJyckIsT0FBT29oQixXQUFXa0ssRUFBdUIsS0FDeEQzQyxHQUFzQkMseUJBQ3RCRCxHQUFzQkMsd0JBQXlCLEVBQy9DblMsRUFBTXlULE1BQU1oMEIsUUFBUXExQixRQUk1QkosR0FDQS8zQixLQUFLOFcsS0FBS3NoQixtQkFBbUJMLEVBQVUvM0IsT0FHZCxJQUF6QkEsS0FBSzBNLFFBQVF6QixTQUNidVYsSUFDQ3VYLEdBQVluSCxJQUNiNXdCLEtBQUtzYSxpQkFBaUIsYUFBYSxTQUFVcFIsR0FDekMsSUFBSXNFLEVBQUk2bEIsRUFBSUMsRUFBSUMsRUFBSThFLEVBQ2hCaGlCLEVBQVFuTixFQUFHbU4sTUFBT2lpQixFQUFtQnB2QixFQUFHb3ZCLGlCQUFrQkMsRUFBMkJydkIsRUFBR3F2Qix5QkFBMEJDLEVBQVl0dkIsRUFBRzBuQixPQUNySSxHQUFJdk4sRUFBTW9WLHlCQUdOLE9BRkFwVixFQUFNalYsWUFBUzlOLE9BQ2YraUIsRUFBTXFWLG9CQUFpQnA0QixHQUkzQixJQUFJcTRCLEVBQW9JLFFBQWhIdEYsRUFBeUMsUUFBbkM3bEIsRUFBSzZWLEVBQU0zVyxRQUFRdVAsa0JBQStCLElBQVB6TyxFQUFnQkEsRUFBS2dULEVBQWNvWSw4QkFBMkMsSUFBUHZGLEVBQWdCQSxFQUFLd0YsR0FDaktDLEVBQUt0WSxFQUFjeUIsV0FBWThXLEVBQXlCRCxFQUFHQyx1QkFBd0JDLEVBQTRCRixFQUFHRSwwQkFLbEhDLEdBQWlCNVYsRUFBTTZWLGVBQ3RCeEgsR0FBVXJPLEVBQU02VixhQUFjVixJQUMvQkQsRUFNQVksR0FBZ0NiLEdBQW9CQyxFQUN4RCxJQUFpQyxRQUEzQmpGLEVBQUtqUSxFQUFNcVAsa0JBQStCLElBQVBZLE9BQWdCLEVBQVNBLEVBQUdiLFdBQ2pFMEcsR0FDQ2IsSUFDSVcsSUFBa0I1VixFQUFNK1Ysa0JBQW9CLENBQzdDL1YsRUFBTXFQLGFBQ05yUCxFQUFNb1EsYUFBZXBRLEVBQU1xUCxXQUMzQnJQLEVBQU1vUSxhQUFhQSxrQkFBZW56QixHQUV0QytpQixFQUFNZ1csbUJBQW1CaGpCLEVBQU84aUIsR0FDaEMsSUFBSXByQixFQUFtQndQLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSXdGLEdBQW1CdUwsRUFBa0IsV0FBWSxDQUFFVyxPQUFRUCxFQUF3QnpMLFdBQVkwTCxJQUNwSnhZLEVBQWMrWSxxQkFDZHhyQixFQUFpQjlKLE1BQVEsRUFDekI4SixFQUFpQmdaLE1BQU8sR0FFNUIxRCxFQUFNZ0ssZUFBZXRmLFFBUWhCdXFCLEdBQzJCLElBQTVCalYsRUFBTThULG1CQUNOOVQsRUFBTThVLGtCQUVWOVUsRUFBTW1XLFdBQTRELFFBQTlDbkIsR0FBTTlFLEVBQUtsUSxFQUFNM1csU0FBUzhtQixzQkFBbUMsSUFBUDZFLEdBQXlCQSxFQUFHN3VCLEtBQUsrcEIsSUFFL0dsUSxFQUFNNlYsYUFBZVYsT0FJakN4QyxFQUFldnFCLFVBQVVndUIsUUFBVSxXQUMvQixJQUFJdndCLEVBQUlzRSxFQUNSeE4sS0FBSzBNLFFBQVFxckIsVUFBWS8zQixLQUFLMDVCLGFBQzlCMTVCLEtBQUs4VyxLQUFLZ2dCLE1BQU1uYixPQUFPM2IsTUFDSSxRQUExQmtKLEVBQUtsSixLQUFLMjVCLGtCQUErQixJQUFQendCLEdBQXlCQSxFQUFHeVMsT0FBTzNiLE1BQy9DLFFBQXRCd04sRUFBS3hOLEtBQUsrYSxjQUEyQixJQUFQdk4sR0FBeUJBLEVBQUd5bkIsU0FBU3JkLE9BQU81WCxNQUMzRUEsS0FBS3l5QixjQUFXbnlCLEVBQ2hCb2QsRUFBS2tjLFdBQVdDLFVBQVU3NUIsS0FBSzYyQixtQkFHbkNiLEVBQWV2cUIsVUFBVXF1QixZQUFjLFdBQ25DOTVCLEtBQUtvMkIsdUJBQXdCLEdBRWpDSixFQUFldnFCLFVBQVVzdUIsY0FBZ0IsV0FDckMvNUIsS0FBS28yQix1QkFBd0IsR0FFakNKLEVBQWV2cUIsVUFBVXV1QixnQkFBa0IsV0FDdkMsT0FBT2g2QixLQUFLbzJCLHVCQUF5QnAyQixLQUFLcTJCLHVCQUU5Q0wsRUFBZXZxQixVQUFVZ3RCLHVCQUF5QixXQUM5QyxJQUFJdnZCLEVBQ0osT0FBUWxKLEtBQUttMkIscUJBQ2UsUUFBdEJqdEIsRUFBS2xKLEtBQUsrYSxjQUEyQixJQUFQN1IsT0FBZ0IsRUFBU0EsRUFBR3V2Qiw0QkFDNUQsR0FHUnpDLEVBQWV2cUIsVUFBVXd1QixZQUFjLFdBQ25DLElBQUkvd0IsRUFDQWxKLEtBQUtnNkIsb0JBRVRoNkIsS0FBS2d6QixZQUFhLEVBQ0ksUUFBckI5cEIsRUFBS2xKLEtBQUs4MkIsYUFBMEIsSUFBUDV0QixHQUF5QkEsRUFBR3BHLFFBQVFvM0IsTUFFdEVsRSxFQUFldnFCLFVBQVVpdUIsV0FBYSxTQUFVUyxHQUM1QyxJQUFJanhCLEVBQUlzRSxFQUFJNmxCLEVBRVosUUFEOEIsSUFBMUI4RyxJQUFvQ0EsR0FBd0IsR0FDNURuNkIsS0FBSzhXLEtBQUtrakIsa0JBQ29DLFFBQTdDeHNCLEdBQU10RSxFQUFLbEosS0FBSzBNLFNBQVM4bUIsc0JBQW1DLElBQVBobUIsR0FBeUJBLEVBQUdoRSxLQUFLTixRQUkzRixJQURDbEosS0FBSzhXLEtBQUtrYyxZQUFjaHpCLEtBQUs4VyxLQUFLbWpCLGVBQy9CajZCLEtBQUtpekIsY0FBVCxDQUVBanpCLEtBQUtpekIsZUFBZ0IsRUFDckIsSUFBSyxJQUFJdnRCLEVBQUksRUFBR0EsRUFBSTFGLEtBQUtxM0IsS0FBS2x3QixPQUFRekIsSUFBSyxDQUN2QyxJQUFJbXNCLEVBQU83eEIsS0FBS3EzQixLQUFLM3hCLEdBQ3JCbXNCLEVBQUsyRSxzQkFBdUIsRUFLNUIzRSxFQUFLdUksZUFFVCxJQUFJOUcsRUFBS3R6QixLQUFLME0sUUFBU3FyQixFQUFXekUsRUFBR3lFLFNBQVVuSCxFQUFTMEMsRUFBRzFDLE9BQzNELFFBQWlCdHdCLElBQWJ5M0IsR0FBMkJuSCxFQUEvQixDQUVBLElBQUl5SixFQUEwRCxRQUFyQ2hILEVBQUtyekIsS0FBSzBNLFFBQVE4VCxxQkFBa0MsSUFBUDZTLE9BQWdCLEVBQVNBLEVBQUdwUixXQUFXb1ksa0JBQzdHcjZCLEtBQUtzNkIsMkJBQTZCRCxNQUFBQSxPQUE2RCxFQUFTQSxFQUFrQnI2QixLQUFLNnlCLGFBQWMsSUFDN0k3eUIsS0FBS3U2QixpQkFDTEosR0FBeUJuNkIsS0FBS3UzQixnQkFBZ0IsaUJBR2xEdkIsRUFBZXZxQixVQUFVK3VCLFVBQVksV0FLakMsR0FKdUJ4NkIsS0FBS2c2QixrQkFReEIsT0FIQWg2QixLQUFLKzVCLGdCQUNMLzVCLEtBQUs0MkIseUJBQ0w1MkIsS0FBSzgyQixNQUFNaDBCLFFBQVEyM0IsSUFHbEJ6NkIsS0FBS2d6QixhQUVWaHpCLEtBQUtnekIsWUFBYSxFQU9kaHpCLEtBQUswMkIsZUFBZTFOLE9BQ3BCaHBCLEtBQUswMkIsZUFBZTV6QixRQUFRNDNCLElBQzVCMTZCLEtBQUswMkIsZUFBZWpULFNBS3hCempCLEtBQUs4MkIsTUFBTWgwQixRQUFRNjNCLElBS25CMzZCLEtBQUs4MkIsTUFBTWgwQixRQUFRODNCLElBS25CNTZCLEtBQUs4MkIsTUFBTWgwQixRQUFRKzNCLElBQ25CNzZCLEtBQUs0MkIsb0JBRUxsWixFQUFLb2QsVUFBVWxmLFNBQ2Y4QixFQUFLb2QsVUFBVWpCLFlBQ2ZuYyxFQUFLb2QsVUFBVTVXLFdBRW5COFIsRUFBZXZxQixVQUFVbXJCLGtCQUFvQixXQUN6QzUyQixLQUFLODJCLE1BQU1oMEIsUUFBUWk0QixJQUNuQi82QixLQUFLbzNCLFlBQVl0MEIsUUFBUWs0QixLQUU3QmhGLEVBQWV2cUIsVUFBVXd2Qix5QkFBMkIsV0FDaER4YyxFQUF1QixRQUFFb2IsVUFBVTc1QixLQUFLNjJCLGtCQUFrQixHQUFPLElBRXJFYixFQUFldnFCLFVBQVV5dkIsMEJBQTRCLFdBQ2pELElBQUk3WCxFQUFRcmpCLEtBTVp5ZSxFQUF1QixRQUFFMkYsWUFBVyxXQUM1QmYsRUFBTTRQLGNBQ041UCxFQUFNdk0sS0FBSzBqQixZQUdYblgsRUFBTXZNLEtBQUs2Zix3QkFPdkJYLEVBQWV2cUIsVUFBVTh1QixlQUFpQixXQUN0QyxJQUFJdjZCLEtBQUs0eUIsVUFBYTV5QixLQUFLeXlCLFNBQTNCLENBRUEsSUFBSTBJLEVBQVduN0IsS0FBS283QixVQUNoQnhLLEVBQVM1d0IsS0FBS3E3QixnQkFBZ0JyN0IsS0FBS3M3QixvQkFBb0JILElBQzNESSxHQUFTM0ssR0FDVDV3QixLQUFLNHlCLFNBQVcsQ0FDWnVJLFNBQVVBLEVBQ1Z2SyxPQUFRQSxFQUNSaUMsYUFBYyxNQUd0Qm1ELEVBQWV2cUIsVUFBVW12QixhQUFlLFdBQ3BDLElBQUkxeEIsRUFDSixHQUFLbEosS0FBS3l5QixXQUdWenlCLEtBQUtvNkIsZUFDQ3A2QixLQUFLME0sUUFBUTh1QixxQkFBdUJ4N0IsS0FBS3c1QixVQUMxQ3g1QixLQUFLaXpCLGVBRFYsQ0FXQSxHQUFJanpCLEtBQUsweUIsYUFBZTF5QixLQUFLMHlCLFdBQVdELFNBQ3BDLElBQUssSUFBSS9zQixFQUFJLEVBQUdBLEVBQUkxRixLQUFLcTNCLEtBQUtsd0IsT0FBUXpCLElBQ3ZCMUYsS0FBS3EzQixLQUFLM3hCLEdBQ2hCMDBCLGVBR2IsSUFBSWUsRUFBV243QixLQUFLbzdCLFVBQ3BCRyxHQUFTSixHQUNULElBQUlNLEVBQWF6N0IsS0FBSzR3QixPQUN0QjV3QixLQUFLNHdCLE9BQVMsQ0FDVnVLLFNBQVVBLEVBQ1ZPLE9BQVExN0IsS0FBS3M3QixvQkFBb0JILElBRXJDbjdCLEtBQUsyN0IsZ0JBMXBCb0IsQ0FDakM1NUIsRUFGa0MsQ0FBRzRFLElBQUssRUFBR0MsSUFBSyxHQUdsRDVFLEVBSGtDLENBQUcyRSxJQUFLLEVBQUdDLElBQUssSUE0cEIxQzVHLEtBQUtpekIsZUFBZ0IsRUFDckJqekIsS0FBSzQ3QixxQkFBa0J0N0IsRUFDdkJOLEtBQUt1M0IsZ0JBQWdCLFVBQVd2M0IsS0FBSzR3QixPQUFPOEssUUFDTixRQUFyQ3h5QixFQUFLbEosS0FBSzBNLFFBQVE4VCxxQkFBa0MsSUFBUHRYLEdBQXlCQSxFQUFHMnlCLG9CQUFvQjc3QixLQUFLNHdCLE9BQU84SyxPQUFRRCxNQUFBQSxPQUErQyxFQUFTQSxFQUFXQyxVQUV6TDFGLEVBQWV2cUIsVUFBVTJ1QixhQUFlLFdBQ2hDcDZCLEtBQUswTSxRQUFRb3ZCLGNBQWdCOTdCLEtBQUt5eUIsV0FDbEN6eUIsS0FBSys3QixhQUFlakcsRUFBa0I5MUIsS0FBS3l5QixVQUMzQ3p5QixLQUFLZzhCLE9BQVNuRyxFQUFjNzFCLEtBQUt5eUIsWUFHekN1RCxFQUFldnFCLFVBQVVzcUIsZUFBaUIsV0FDdEMsSUFBSTdzQixFQUNKLEdBQUs2c0IsRUFBTCxDQUVBLElBQUlrRyxFQUFtQmo4QixLQUFLaXpCLGVBQWlCanpCLEtBQUt3MkIscUJBQzlDMEYsRUFBZ0JsOEIsS0FBSzQ3QixrQkFBb0JuSyxHQUFZenhCLEtBQUs0N0IsaUJBQzFEdkIsRUFBMEQsUUFBckNueEIsRUFBS2xKLEtBQUswTSxRQUFROFQscUJBQWtDLElBQVB0WCxPQUFnQixFQUFTQSxFQUFHK1ksV0FBV29ZLGtCQUN6RzhCLEVBQXlCOUIsTUFBQUEsT0FBNkQsRUFBU0EsRUFBa0JyNkIsS0FBSzZ5QixhQUFjLElBQ3BJdUosRUFBOEJELElBQTJCbjhCLEtBQUtzNkIsMkJBQzlEMkIsSUFDQ0MsR0FDR2hOLEdBQWFsdkIsS0FBSzZ5QixlQUNsQnVKLEtBQ0pyRyxFQUFlLzFCLEtBQUt5eUIsU0FBVTBKLEdBQzlCbjhCLEtBQUt3MkIsc0JBQXVCLEVBQzVCeDJCLEtBQUs4eEIsb0JBR2JrRSxFQUFldnFCLFVBQVUydkIsUUFBVSxXQUMvQixJQUFJNWEsRUFBZ0J4Z0IsS0FBSzBNLFFBQVE4VCxjQUNqQyxJQUFLQSxFQUNELE1BM3JCcUIsQ0FDakN6ZSxFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQTZyQjFDLElBQUlrb0IsRUFBTXRPLEVBQWM2YixxQkFFcEJMLEVBQVNoOEIsS0FBSzhXLEtBQUtrbEIsT0FLdkIsT0FKSUEsSUFDQXJNLEdBQWNiLEVBQUkvc0IsRUFBR2k2QixFQUFPajZCLEdBQzVCNHRCLEdBQWNiLEVBQUk5c0IsRUFBR2c2QixFQUFPaDZCLElBRXpCOHNCLEdBRVhrSCxFQUFldnFCLFVBQVU2dkIsb0JBQXNCLFNBQVV4TSxHQUNyRCxJQUFJd04sRUF0c0JxQixDQUNqQ3Y2QixFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQXdzQjFDaW9CLEdBQVl5TixFQUFrQnhOLEdBSzlCLElBQUssSUFBSXBwQixFQUFJLEVBQUdBLEVBQUkxRixLQUFLcTNCLEtBQUtsd0IsT0FBUXpCLElBQUssQ0FDdkMsSUFBSW1zQixFQUFPN3hCLEtBQUtxM0IsS0FBSzN4QixHQUNqQjYyQixFQUFXMUssRUFBS21LLE9BQVF0dkIsRUFBVW1sQixFQUFLbmxCLFFBQVNxdkIsRUFBZWxLLEVBQUtrSyxhQUN4RSxHQUFJbEssSUFBUzd4QixLQUFLOFcsTUFBUXlsQixHQUFZN3ZCLEVBQVFvdkIsYUFBYyxDQUt4RCxHQUFJQyxFQUFjLENBQ2RsTixHQUFZeU4sRUFBa0J4TixHQUM5QixJQUFJME4sRUFBYXg4QixLQUFLOFcsS0FBS2tsQixPQUt2QlEsSUFDQTdNLEdBQWMyTSxFQUFpQnY2QixHQUFJeTZCLEVBQVd6NkIsR0FDOUM0dEIsR0FBYzJNLEVBQWlCdDZCLEdBQUl3NkIsRUFBV3g2QixJQUd0RDJ0QixHQUFjMk0sRUFBaUJ2NkIsRUFBR3c2QixFQUFTeDZCLEdBQzNDNHRCLEdBQWMyTSxFQUFpQnQ2QixFQUFHdTZCLEVBQVN2NkIsSUFHbkQsT0FBT3M2QixHQUVYdEcsRUFBZXZxQixVQUFVZ3hCLGVBQWlCLFNBQVUzTixFQUFLNE4sUUFDL0IsSUFBbEJBLElBQTRCQSxHQUFnQixHQUNoRCxJQUFJQyxFQXh1QnFCLENBQ2pDNTZCLEVBRmtDLENBQUc0RSxJQUFLLEVBQUdDLElBQUssR0FHbEQ1RSxFQUhrQyxDQUFHMkUsSUFBSyxFQUFHQyxJQUFLLElBMHVCMUNpb0IsR0FBWThOLEVBQWdCN04sR0FDNUIsSUFBSyxJQUFJcHBCLEVBQUksRUFBR0EsRUFBSTFGLEtBQUtxM0IsS0FBS2x3QixPQUFRekIsSUFBSyxDQUN2QyxJQUFJbXNCLEVBQU83eEIsS0FBS3EzQixLQUFLM3hCLElBQ2hCZzNCLEdBQ0Q3SyxFQUFLbmxCLFFBQVFvdkIsY0FDYmpLLEVBQUttSyxRQUNMbkssSUFBU0EsRUFBSy9hLE1BQ2RvWixHQUFheU0sRUFBZ0IsQ0FDekI1NkIsR0FBSTh2QixFQUFLbUssT0FBT2o2QixFQUNoQkMsR0FBSTZ2QixFQUFLbUssT0FBT2g2QixJQUduQmt0QixHQUFhMkMsRUFBS2dCLGVBRXZCM0MsR0FBYXlNLEVBQWdCOUssRUFBS2dCLGNBS3RDLE9BSEkzRCxHQUFhbHZCLEtBQUs2eUIsZUFDbEIzQyxHQUFheU0sRUFBZ0IzOEIsS0FBSzZ5QixjQUUvQjhKLEdBRVgzRyxFQUFldnFCLFVBQVU0dkIsZ0JBQWtCLFNBQVV2TSxHQUNqRCxJQUFJNWxCLEVBQ0EwekIsRUFod0JxQixDQUNqQzc2QixFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQWt3QjFDaW9CLEdBQVkrTixFQUFxQjlOLEdBQ2pDLElBQUssSUFBSXBwQixFQUFJLEVBQUdBLEVBQUkxRixLQUFLcTNCLEtBQUtsd0IsT0FBUXpCLElBQUssQ0FDdkMsSUFBSW1zQixFQUFPN3hCLEtBQUtxM0IsS0FBSzN4QixHQUNyQixHQUFLbXNCLEVBQUtZLFVBRUx2RCxHQUFhMkMsRUFBS2dCLGNBQXZCLENBRUE1RCxHQUFTNEMsRUFBS2dCLGVBQWlCaEIsRUFBSzBJLGlCQUNwQyxJQUFJakosRUF6d0JpQixDQUNqQ3Z2QixFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQTR3QnRDaW9CLEdBQVl5QyxFQURFTyxFQUFLdUosV0FFbkIvSixHQUFvQnVMLEVBQXFCL0ssRUFBS2dCLGFBQXVDLFFBQXhCM3BCLEVBQUsyb0IsRUFBS2UsZ0JBQTZCLElBQVAxcEIsT0FBZ0IsRUFBU0EsRUFBRzBuQixPQUFRVSxJQUtySSxPQUhJcEMsR0FBYWx2QixLQUFLNnlCLGVBQ2xCeEIsR0FBb0J1TCxFQUFxQjU4QixLQUFLNnlCLGNBRTNDK0osR0FLWDVHLEVBQWV2cUIsVUFBVW94QixlQUFpQixTQUFVeG1CLEdBQ2hEclcsS0FBSzg4QixZQUFjem1CLEVBQ25CclcsS0FBSzhXLEtBQUtta0IsNEJBRWRqRixFQUFldnFCLFVBQVVzeEIsV0FBYSxTQUFVcndCLEdBQzVDLElBQUl4RCxFQUNKbEosS0FBSzBNLFFBQVU2USxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSTVuQixLQUFLME0sU0FBVUEsR0FBVSxDQUFFd21CLFVBQXdDLFFBQTVCaHFCLEVBQUt3RCxFQUFRd21CLGlCQUE4QixJQUFQaHFCLEdBQWdCQSxLQUUvSjhzQixFQUFldnFCLFVBQVVndkIsa0JBQW9CLFdBQ3pDejZCLEtBQUtnOEIsWUFBUzE3QixFQUNkTixLQUFLNHdCLFlBQVN0d0IsRUFDZE4sS0FBSzR5QixjQUFXdHlCLEVBQ2hCTixLQUFLczZCLGdDQUE2Qmg2QixFQUNsQ04sS0FBSzg4QixpQkFBY3g4QixFQUNuQk4sS0FBS29PLFlBQVM5TixFQUNkTixLQUFLaXpCLGVBQWdCLEdBS3pCK0MsRUFBZXZxQixVQUFVc3JCLG1CQUFxQixXQUMxQyxJQUFJN3RCLEVBMTNCU2tGLEVBQVFzaUIsRUFBVTNWLEVBMjNCM0J2TixFQUFLeE4sS0FBSzBNLFFBQVNra0IsRUFBU3BqQixFQUFHb2pCLE9BQVFtSCxFQUFXdnFCLEVBQUd1cUIsU0FJcEQvM0IsS0FBSzR3QixTQUFZQSxHQUFVbUgsS0FRM0IvM0IsS0FBSzg4QixhQUFnQjk4QixLQUFLMDRCLGlCQUUzQjE0QixLQUFLZzlCLGVBQWlCaDlCLEtBQUtpOUIsNkJBQ3ZCajlCLEtBQUtnOUIsZ0JBQWtCaDlCLEtBQUtnOUIsZUFBZXBNLFNBQzNDNXdCLEtBQUswNEIsZUE1ekJZLENBQ2pDMzJCLEVBRmtDLENBQUc0RSxJQUFLLEVBQUdDLElBQUssR0FHbEQ1RSxFQUhrQyxDQUFHMkUsSUFBSyxFQUFHQyxJQUFLLElBOHpCbEM1RyxLQUFLazlCLHFCQTd6QlksQ0FDakNuN0IsRUFGa0MsQ0FBRzRFLElBQUssRUFBR0MsSUFBSyxHQUdsRDVFLEVBSGtDLENBQUcyRSxJQUFLLEVBQUdDLElBQUssSUErekJsQ2lxQixHQUFxQjd3QixLQUFLazlCLHFCQUFzQmw5QixLQUFLNHdCLE9BQU84SyxPQUFRMTdCLEtBQUtnOUIsZUFBZXBNLE9BQU84SyxRQUMvRjdNLEdBQVk3dUIsS0FBSzA0QixlQUFnQjE0QixLQUFLazlCLHlCQU96Q2w5QixLQUFLMDRCLGdCQUFtQjE0QixLQUFLODhCLGVBSzdCOThCLEtBQUtvTyxTQUNOcE8sS0FBS29PLE9BNTBCZ0IsQ0FDakNyTSxFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQTgwQnRDNUcsS0FBS205QixxQkE3MEJnQixDQUNqQ3A3QixFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxLQW0xQnRDNUcsS0FBSzA0QixnQkFDTDE0QixLQUFLazlCLHVCQUMyQixRQUE5QmgwQixFQUFLbEosS0FBS2c5QixzQkFBbUMsSUFBUDl6QixPQUFnQixFQUFTQSxFQUFHa0YsU0FuNkIzREEsRUFvNkJPcE8sS0FBS29PLE9BcDZCSnNpQixFQW82Qlkxd0IsS0FBSzA0QixlQXA2QlAzZCxFQW82QnVCL2EsS0FBS2c5QixlQUFlNXVCLE9BbjZCbEZxaUIsR0FBaUJyaUIsRUFBT3JNLEVBQUcydUIsRUFBUzN1QixFQUFHZ1osRUFBT2haLEdBQzlDMHVCLEdBQWlCcmlCLEVBQU9wTSxFQUFHMHVCLEVBQVMxdUIsRUFBRytZLEVBQU8vWSxJQXU2QjdCaEMsS0FBSzg4QixhQUNOdDRCLFFBQVF4RSxLQUFLeXpCLGNBRWJ6ekIsS0FBS29PLE9BQVNwTyxLQUFLeThCLGVBQWV6OEIsS0FBSzR3QixPQUFPOEssUUFHOUM3TSxHQUFZN3VCLEtBQUtvTyxPQUFRcE8sS0FBSzR3QixPQUFPOEssUUFFekNoTSxHQUFjMXZCLEtBQUtvTyxPQUFRcE8sS0FBSzg4QixjQU1oQ2pPLEdBQVk3dUIsS0FBS29PLE9BQVFwTyxLQUFLNHdCLE9BQU84SyxRQUtyQzE3QixLQUFLbzlCLGlDQUNMcDlCLEtBQUtvOUIsZ0NBQWlDLEVBQ3RDcDlCLEtBQUtnOUIsZUFBaUJoOUIsS0FBS2k5Qiw2QkFDdkJqOUIsS0FBS2c5QixnQkFDTHg0QixRQUFReEUsS0FBS2c5QixlQUFldkosZ0JBQ3hCanZCLFFBQVF4RSxLQUFLeXpCLGdCQUNoQnp6QixLQUFLZzlCLGVBQWV0d0IsUUFBUW92QixjQUM3Qjk3QixLQUFLZzlCLGVBQWU1dUIsU0FDcEJwTyxLQUFLMDRCLGVBcjNCWSxDQUNqQzMyQixFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQXUzQmxDNUcsS0FBS2s5QixxQkF0M0JZLENBQ2pDbjdCLEVBRmtDLENBQUc0RSxJQUFLLEVBQUdDLElBQUssR0FHbEQ1RSxFQUhrQyxDQUFHMkUsSUFBSyxFQUFHQyxJQUFLLElBdzNCbENpcUIsR0FBcUI3d0IsS0FBS2s5QixxQkFBc0JsOUIsS0FBS29PLE9BQVFwTyxLQUFLZzlCLGVBQWU1dUIsUUFDakZ5Z0IsR0FBWTd1QixLQUFLMDRCLGVBQWdCMTRCLEtBQUtrOUIsMkJBSWxEbEgsRUFBZXZxQixVQUFVd3hCLDJCQUE2QixXQUNsRCxHQUFLajlCLEtBQUsrYSxTQUFVbVUsR0FBYWx2QixLQUFLK2EsT0FBTzhYLGNBRTdDLE9BQUs3eUIsS0FBSythLE9BQU8yZCxnQkFBa0IxNEIsS0FBSythLE9BQU8raEIsY0FDM0M5OEIsS0FBSythLE9BQU82VixPQUNMNXdCLEtBQUsrYSxPQUdML2EsS0FBSythLE9BQU9raUIsOEJBRzNCakgsRUFBZXZxQixVQUFVdXJCLGVBQWlCLFdBQ3RDLElBQUk5dEIsRUFDQXNFLEVBQUt4TixLQUFLME0sUUFBU2trQixFQUFTcGpCLEVBQUdvakIsT0FBUW1ILEVBQVd2cUIsRUFBR3VxQixTQVd6RCxHQU5BLzNCLEtBQUtrMkIsZ0JBQWtCMXhCLFNBQWdDLFFBQXRCMEUsRUFBS2xKLEtBQUsrYSxjQUEyQixJQUFQN1IsT0FBZ0IsRUFBU0EsRUFBR2d0QixrQkFDdkZsMkIsS0FBS281QixrQkFDTHA1QixLQUFLcTlCLGtCQUNKcjlCLEtBQUtrMkIsa0JBQ05sMkIsS0FBSzg4QixZQUFjOThCLEtBQUswNEIsb0JBQWlCcDRCLEdBRXhDTixLQUFLNHdCLFNBQVlBLEdBQVVtSCxHQUFoQyxDQUVBLElBQUkvRixFQUFPaHlCLEtBQUtzOUIsVUFLaEJ6TyxHQUFZN3VCLEtBQUsyN0IsZ0JBQWlCMzdCLEtBQUs0d0IsT0FBTzhLLFFBcGtDMUQsU0FBeUI1TSxFQUFLaUYsRUFBV3dKLEVBQVVDLEdBQy9DLElBQUl0MEIsRUFBSXNFLE9BQ21CLElBQXZCZ3dCLElBQWlDQSxHQUFxQixHQUMxRCxJQUFJQyxFQUFhRixFQUFTcDJCLE9BQzFCLEdBQUtzMkIsRUFBTCxDQUlBLElBQUk1TCxFQUNBeGIsRUFGSjBkLEVBQVVoeUIsRUFBSWd5QixFQUFVL3hCLEVBQUksRUFHNUIsSUFBSyxJQUFJMEQsRUFBSSxFQUFHQSxFQUFJKzNCLEVBQVkvM0IsSUFFNUIyUSxHQURBd2IsRUFBTzBMLEVBQVM3M0IsSUFDSGsyQixnQkFDdUgsY0FBakQsUUFBN0VwdUIsRUFBOEIsUUFBeEJ0RSxFQUFLMm9CLEVBQUtZLGdCQUE2QixJQUFQdnBCLE9BQWdCLEVBQVNBLEVBQUdnRCxhQUEwQixJQUFQc0IsT0FBZ0IsRUFBU0EsRUFBR2t3QixXQUVuSEYsR0FDQTNMLEVBQUtubEIsUUFBUW92QixjQUNiakssRUFBS21LLFFBQ0xuSyxJQUFTQSxFQUFLL2EsTUFDZG9aLEdBQWFwQixFQUFLLENBQUUvc0IsR0FBSTh2QixFQUFLbUssT0FBT2o2QixFQUFHQyxHQUFJNnZCLEVBQUttSyxPQUFPaDZCLElBRXZEcVUsSUFFQTBkLEVBQVVoeUIsR0FBS3NVLEVBQU10VSxFQUFFVSxNQUN2QnN4QixFQUFVL3hCLEdBQUtxVSxFQUFNclUsRUFBRVMsTUFFdkJpdEIsR0FBY1osRUFBS3pZLElBRW5CbW5CLEdBQXNCdE8sR0FBYTJDLEVBQUtnQixlQUN4QzNDLEdBQWFwQixFQUFLK0MsRUFBS2dCLGdCQTRpQ3ZCOEssQ0FBZ0IzOUIsS0FBSzI3QixnQkFBaUIzN0IsS0FBSyt6QixVQUFXL3pCLEtBQUtxM0IsS0FBTTd5QixRQUFReEUsS0FBS3l6QixlQUFpQnp6QixPQUFTZ3lCLEdBQ3hHLElBQUk1akIsRUFBUzRqQixFQUFLNWpCLE9BQ2xCLEdBQUtBLEVBQUwsQ0FFS3BPLEtBQUs0N0Isa0JBQ041N0IsS0FBSzQ3QixnQkExNkJrQixDQUNuQzc1QixFQVB1QyxDQUN2Q1EsVUFBVyxFQUNYRSxNQUFPLEVBQ1AyUixPQUFRLEVBQ1JrYixZQUFhLEdBSWJ0dEIsRUFSdUMsQ0FDdkNPLFVBQVcsRUFDWEUsTUFBTyxFQUNQMlIsT0FBUSxFQUNSa2IsWUFBYSxJQTY2QkR0dkIsS0FBSzQ5Qiw2QkEzNkJrQixDQUNuQzc3QixFQVB1QyxDQUN2Q1EsVUFBVyxFQUNYRSxNQUFPLEVBQ1AyUixPQUFRLEVBQ1JrYixZQUFhLEdBSWJ0dEIsRUFSdUMsQ0FDdkNPLFVBQVcsRUFDWEUsTUFBTyxFQUNQMlIsT0FBUSxFQUNSa2IsWUFBYSxLQSs2QkwsSUFBSXVPLEVBQWlCNzlCLEtBQUsrekIsVUFBVWh5QixFQUNoQys3QixFQUFpQjk5QixLQUFLK3pCLFVBQVUveEIsRUFDaEMrN0IsRUFBMEIvOUIsS0FBS2crQixvQkFVbkN4TixHQUFheHdCLEtBQUs0N0IsZ0JBQWlCNTdCLEtBQUsyN0IsZ0JBQWlCdnRCLEVBQVFwTyxLQUFLNnlCLGNBQ3RFN3lCLEtBQUtnK0Isb0JBQXNCbEssR0FBeUI5ekIsS0FBSzQ3QixnQkFBaUI1N0IsS0FBSyt6QixXQUMzRS96QixLQUFLZytCLHNCQUF3QkQsR0FDN0IvOUIsS0FBSyt6QixVQUFVaHlCLElBQU04N0IsR0FDckI3OUIsS0FBSyt6QixVQUFVL3hCLElBQU04N0IsSUFDckI5OUIsS0FBS2kzQixjQUFlLEVBQ3BCajNCLEtBQUs4eEIsaUJBQ0w5eEIsS0FBS3UzQixnQkFBZ0IsbUJBQW9CbnBCLE9BR2pENG5CLEVBQWV2cUIsVUFBVTBuQixLQUFPLFdBQzVCbnpCLEtBQUtrM0IsV0FBWSxHQUdyQmxCLEVBQWV2cUIsVUFBVSttQixLQUFPLFdBQzVCeHlCLEtBQUtrM0IsV0FBWSxHQUdyQmxCLEVBQWV2cUIsVUFBVXFtQixlQUFpQixTQUFVbU0sR0FDaEQsSUFBSS8wQixFQUFJc0UsRUFBSTZsQixPQUNNLElBQWQ0SyxJQUF3QkEsR0FBWSxHQUNNLFFBQTdDendCLEdBQU10RSxFQUFLbEosS0FBSzBNLFNBQVNvbEIsc0JBQW1DLElBQVB0a0IsR0FBeUJBLEVBQUdoRSxLQUFLTixHQUN2RiswQixJQUF5QyxRQUExQjVLLEVBQUtyekIsS0FBSzI1QixrQkFBK0IsSUFBUHRHLEdBQXlCQSxFQUFHdkIsa0JBQ3pFOXhCLEtBQUt5ekIsZUFBaUJ6ekIsS0FBS3l6QixhQUFhaEIsV0FDeEN6eUIsS0FBS3l6QixrQkFBZW56QixJQUc1QjAxQixFQUFldnFCLFVBQVU0dEIsbUJBQXFCLFNBQVVoakIsRUFBTzhpQixHQUMzRCxJQUNJandCLEVBREFtYSxFQUFRcmpCLFVBRXlCLElBQWpDbTVCLElBQTJDQSxHQUErQixHQUM5RSxJQUFJdkcsRUFBVzV5QixLQUFLNHlCLFNBQ2hCc0wsR0FBd0J0TCxNQUFBQSxPQUEyQyxFQUFTQSxFQUFTQyxlQUFpQixHQUN0R3NMLEVBQWM1Z0IsRUFBTXFLLFNBQVMsR0FBSTVuQixLQUFLNnlCLGNBQ3RDaUssRUEzOUJ1QixDQUNuQy82QixFQVB1QyxDQUN2Q1EsVUFBVyxFQUNYRSxNQUFPLEVBQ1AyUixPQUFRLEVBQ1JrYixZQUFhLEdBSWJ0dEIsRUFSdUMsQ0FDdkNPLFVBQVcsRUFDWEUsTUFBTyxFQUNQMlIsT0FBUSxFQUNSa2IsWUFBYSxJQTg5Qkx0dkIsS0FBSzA0QixlQUFpQjE0QixLQUFLazlCLDBCQUF1QjU4QixFQUNsRE4sS0FBS285QixnQ0FBa0NqRSxFQUN2QyxJQUFJaUYsRUF6OUJxQixDQUNqQ3I4QixFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQTI5QnRDeTNCLEVBQTBCekwsTUFBQUEsT0FBMkMsRUFBU0EsRUFBU0csU0FDdkZ1TCxJQUE0QyxRQUExQnAxQixFQUFLbEosS0FBSzI1QixrQkFBK0IsSUFBUHp3QixPQUFnQixFQUFTQSxFQUFHMG9CLFFBQVF6cUIsU0FBVyxJQUFNLEVBQ3pHbzNCLEVBQXlCLzVCLFFBQVE2NUIsSUFDaENDLElBQzBCLElBQTNCdCtCLEtBQUswTSxRQUFRd21CLFlBQ1psekIsS0FBS3EzQixLQUFLclksS0FBS3dmLEtBQ3BCeCtCLEtBQUttM0Isa0JBQW9CLEVBQ3pCbjNCLEtBQUt5K0IsZUFBaUIsU0FBVWwxQixHQUM1QixJQUFJTCxFQWlhSnRCLEVBQVErRyxFQUFNc0UsRUFBSXJLLEVBaGFkbkMsRUFBVzhDLEVBQVMsSUFDeEJtMUIsR0FBYTVCLEVBQVkvNkIsRUFBR3NVLEVBQU10VSxFQUFHMEUsR0FDckNpNEIsR0FBYTVCLEVBQVk5NkIsRUFBR3FVLEVBQU1yVSxFQUFHeUUsR0FDckM0YyxFQUFNd1osZUFBZUMsR0FDakJ6WixFQUFNcVYsZ0JBQ05yVixFQUFNNlosc0JBQ043WixFQUFNdU4sU0FDMkIsUUFBL0IxbkIsRUFBS21hLEVBQU0yWixzQkFBbUMsSUFBUDl6QixPQUFnQixFQUFTQSxFQUFHMG5CLFVBQ3JFQyxHQUFxQnVOLEVBQWdCL2EsRUFBTXVOLE9BQU84SyxPQUFRclksRUFBTTJaLGVBQWVwTSxPQUFPOEssUUF3WjFGOXpCLEVBdlpXeWIsRUFBTXFWLGVBdVpUL3BCLEVBdlp5QjBVLEVBQU02WixxQkF1WnpCanFCLEVBdlorQ21yQixFQXVaM0N4MUIsRUF2WjJEbkMsRUF3WnpGazRCLEdBQVEvMkIsRUFBTzdGLEVBQUc0TSxFQUFLNU0sRUFBR2tSLEVBQUdsUixFQUFHNkcsR0FDaEMrMUIsR0FBUS8yQixFQUFPNUYsRUFBRzJNLEVBQUszTSxFQUFHaVIsRUFBR2pSLEVBQUc0RyxJQXZaaEJ5MUIsSUFDQWhiLEVBQU15UCxnQkFBa0JxTCxFQTV6QzVDLFNBQW1CL3ZCLEVBQVF3d0IsRUFBUTVNLEVBQU12ckIsRUFBVTgzQixFQUF3QkQsR0FDdkUsSUFBSXAxQixFQUFJc0UsRUFBSTZsQixFQUFJQyxFQUNaaUwsR0FDQW53QixFQUFPekMsUUFBVWdTLEVBQVV2VyxJQUFJLEVBR1AsUUFBdkI4QixFQUFLOG9CLEVBQUtybUIsZUFBNEIsSUFBUHpDLEVBQWdCQSxFQUFLLEVBQUdzbEIsR0FBZ0IvbkIsSUFDeEUySCxFQUFPeXdCLFlBQWNsaEIsRUFBVXZXLElBQThCLFFBQXpCb0csRUFBS294QixFQUFPanpCLGVBQTRCLElBQVA2QixFQUFnQkEsRUFBSyxFQUFHLEVBQUdraEIsR0FBaUJqb0IsS0FFNUc2M0IsSUFDTGx3QixFQUFPekMsUUFBVWdTLEVBQVV2VyxJQUE4QixRQUF6QmlzQixFQUFLdUwsRUFBT2p6QixlQUE0QixJQUFQMG5CLEVBQWdCQSxFQUFLLEVBQTJCLFFBQXZCQyxFQUFLdEIsRUFBS3JtQixlQUE0QixJQUFQMm5CLEVBQWdCQSxFQUFLLEVBQUc3c0IsSUFLckosSUFBSyxJQUFJZixFQUFJLEVBQUdBLEVBQUl5b0IsR0FBWXpvQixJQUFLLENBQ2pDLElBQUlvNUIsRUFBYyxTQUFTclksT0FBT3lILEdBQVF4b0IsR0FBSSxVQUMxQ3E1QixFQUFlelEsR0FBVXNRLEVBQVFFLEdBQ2pDRSxFQUFhMVEsR0FBVTBELEVBQU04TSxRQUNaeCtCLElBQWpCeStCLFFBQTZDeitCLElBQWYwK0IsSUFFbENELElBQWlCQSxFQUFlLEdBQ2hDQyxJQUFlQSxFQUFhLEdBQ0UsSUFBakJELEdBQ00sSUFBZkMsR0FDQTNRLEdBQUswUSxLQUFrQjFRLEdBQUsyUSxJQUU1QjV3QixFQUFPMHdCLEdBQWVuNUIsS0FBS2lCLElBQUkrVyxFQUFVdlcsSUFBSWduQixHQUFTMlEsR0FBZTNRLEdBQVM0USxHQUFhdjRCLEdBQVcsSUFDbEdtWCxFQUFnQnFULFFBQVFySyxLQUFLb1ksSUFBZXBoQixFQUFnQnFULFFBQVFySyxLQUFLbVksTUFDekUzd0IsRUFBTzB3QixJQUFnQixNQUkzQjF3QixFQUFPMHdCLEdBQWVFLElBTTFCSixFQUFPcDhCLFFBQVV3dkIsRUFBS3h2QixVQUN0QjRMLEVBQU81TCxPQUFTbWIsRUFBVXZXLElBQUl3M0IsRUFBT3A4QixRQUFVLEVBQUd3dkIsRUFBS3h2QixRQUFVLEVBQUdpRSxJQXF4Q3hEdzRCLENBQVVkLEVBQWFELEVBQXNCN2EsRUFBTXdQLGFBQWNwc0IsRUFBVTgzQixFQUF3QkQsSUFFdkdqYixFQUFNdk0sS0FBS21rQiwyQkFDWDVYLEVBQU15TyxpQkFDTnpPLEVBQU04VCxrQkFBb0Ixd0IsR0FFOUJ6RyxLQUFLeStCLGVBQWUsSUFFeEJ6SSxFQUFldnFCLFVBQVU0aEIsZUFBaUIsU0FBVTNnQixHQUNoRCxJQUNJeEQsRUFBSXNFLEVBREo2VixFQUFRcmpCLEtBRVpBLEtBQUt1M0IsZ0JBQWdCLGtCQUNZLFFBQWhDcnVCLEVBQUtsSixLQUFLbzVCLHdCQUFxQyxJQUFQbHdCLEdBQXlCQSxFQUFHYyxPQUNqRWhLLEtBQUt5ekIsZUFDeUMsUUFBN0NqbUIsRUFBS3hOLEtBQUt5ekIsYUFBYTJGLHdCQUFxQyxJQUFQNXJCLEdBQXlCQSxFQUFHeEQsUUFFbEZoSyxLQUFLcTlCLG1CQUNMM2YsRUFBS2tjLFdBQVdoZSxPQUFPNWIsS0FBS3E5QixrQkFDNUJyOUIsS0FBS3E5QixzQkFBbUIvOEIsR0FPNUJOLEtBQUtxOUIsaUJBQW1CNWUsRUFBdUIsUUFBRTdDLFFBQU8sV0FDcEQyWixHQUFzQkMsd0JBQXlCLEVBQy9DblMsRUFBTStWLGlCQUFtQm51QixHQUFRLEVBL3dCM0IsSUErd0IrQ3NTLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSWxiLEdBQVUsQ0FBRWloQixTQUFVLFNBQVVwa0IsR0FDL0csSUFBSUwsRUFDSm1hLEVBQU1vYixlQUFlbDFCLEdBQ08sUUFBM0JMLEVBQUt3RCxFQUFRaWhCLGdCQUE2QixJQUFQemtCLEdBQXlCQSxFQUFHTSxLQUFLa0QsRUFBU25ELElBQy9FK2pCLFdBQVksV0FDWCxJQUFJcGtCLEVBQzBCLFFBQTdCQSxFQUFLd0QsRUFBUTRnQixrQkFBK0IsSUFBUHBrQixHQUF5QkEsRUFBR00sS0FBS2tELEdBQ3ZFMlcsRUFBTTZiLHdCQUVWN2IsRUFBTW9RLGVBQ05wUSxFQUFNb1EsYUFBYTJGLGlCQUFtQi9WLEVBQU0rVixrQkFFaEQvVixFQUFNZ2Esc0JBQW1CLzhCLE1BR2pDMDFCLEVBQWV2cUIsVUFBVXl6QixrQkFBb0IsV0FDekMsSUFBSWgyQixFQUNBbEosS0FBS3l6QixlQUNMenpCLEtBQUt5ekIsYUFBYTJGLHNCQUFtQjk0QixFQUNyQ04sS0FBS3l6QixhQUFhZCxxQkFBa0JyeUIsR0FFYixRQUExQjRJLEVBQUtsSixLQUFLMjVCLGtCQUErQixJQUFQendCLEdBQXlCQSxFQUFHa3FCLHdCQUMvRHB6QixLQUFLeXpCLGFBQ0R6ekIsS0FBS281QixpQkFDRHA1QixLQUFLOHlCLHFCQUNEeHlCLEVBQ1pOLEtBQUt1M0IsZ0JBQWdCLHNCQUV6QnZCLEVBQWV2cUIsVUFBVTBzQixnQkFBa0IsV0FDdkMsSUFBSWp2QixFQUNBbEosS0FBS281QixtQkFDMEIsUUFBOUJsd0IsRUFBS2xKLEtBQUt5K0Isc0JBQW1DLElBQVB2MUIsR0FBeUJBLEVBQUdNLEtBQUt4SixLQTl5QmxFLEtBK3lCTkEsS0FBS281QixpQkFBaUJwdkIsUUFFMUJoSyxLQUFLay9CLHFCQUVUbEosRUFBZXZxQixVQUFVMHpCLHdCQUEwQixXQUMvQyxJQUFJajJCLEVBQUtsSixLQUFLczlCLFVBQVdILEVBQXVCajBCLEVBQUdpMEIscUJBQXNCL3VCLEVBQVNsRixFQUFHa0YsT0FBUXdpQixFQUFTMW5CLEVBQUcwbkIsT0FBUWlDLEVBQWUzcEIsRUFBRzJwQixhQUM5SHNLLEdBQXlCL3VCLEdBQVd3aUIsSUFFekMvQixHQUFZc08sRUFBc0IvdUIsR0FNbEM4aEIsR0FBYWlOLEVBQXNCdEssR0FPbkNyQyxHQUFheHdCLEtBQUs0OUIsNkJBQThCNTlCLEtBQUsyN0IsZ0JBQWlCd0IsRUFBc0J0SyxLQUVoR21ELEVBQWV2cUIsVUFBVTJzQixtQkFBcUIsU0FBVUwsRUFBVWxHLEdBQzlELElBQUkzb0IsRUFBSXNFLEVBQUk2bEIsRUFDUHJ6QixLQUFLbzNCLFlBQVl6MkIsSUFBSW8zQixJQUN0Qi8zQixLQUFLbzNCLFlBQVl4MkIsSUFBSW0zQixFQUFVLElBQUlwRyxJQUUzQjN4QixLQUFLbzNCLFlBQVlwMkIsSUFBSSsyQixHQUMzQnJxQixJQUFJbWtCLEdBQ1ZBLEVBQUtJLFFBQVEsQ0FDVGhXLFdBQTJELFFBQTlDL1MsRUFBSzJvQixFQUFLbmxCLFFBQVEweUIsOEJBQTJDLElBQVBsMkIsT0FBZ0IsRUFBU0EsRUFBRytTLFdBQy9Gc1csc0JBQWlKLFFBQXpIYyxFQUFvRCxRQUE5QzdsQixFQUFLcWtCLEVBQUtubEIsUUFBUTB5Qiw4QkFBMkMsSUFBUDV4QixPQUFnQixFQUFTQSxFQUFHNnhCLG1DQUFnRCxJQUFQaE0sT0FBZ0IsRUFBU0EsRUFBRzdwQixLQUFLZ0UsRUFBSXFrQixNQUd0TW1FLEVBQWV2cUIsVUFBVSt0QixPQUFTLFdBQzlCLElBQUk4RixFQUFRdC9CLEtBQUsyNUIsV0FDakIsT0FBTzJGLEdBQVFBLEVBQU10TixPQUFTaHlCLE1BRWxDZzJCLEVBQWV2cUIsVUFBVTZ4QixRQUFVLFdBQy9CLElBQUlwMEIsRUFFSixPQURlbEosS0FBSzBNLFFBQVFxckIsV0FDa0IsUUFBMUI3dUIsRUFBS2xKLEtBQUsyNUIsa0JBQStCLElBQVB6d0IsT0FBZ0IsRUFBU0EsRUFBRzhvQixPQUFnQmh5QixNQUV0R2cyQixFQUFldnFCLFVBQVU4ekIsWUFBYyxXQUNuQyxJQUFJcjJCLEVBRUosT0FEZWxKLEtBQUswTSxRQUFRcXJCLFNBQ2lCLFFBQTFCN3VCLEVBQUtsSixLQUFLMjVCLGtCQUErQixJQUFQendCLE9BQWdCLEVBQVNBLEVBQUc2b0IsY0FBV3p4QixHQUVoRzAxQixFQUFldnFCLFVBQVVrdUIsU0FBVyxXQUNoQyxJQUFJNUIsRUFBVy8zQixLQUFLME0sUUFBUXFyQixTQUM1QixHQUFJQSxFQUNBLE9BQU8vM0IsS0FBSzhXLEtBQUtzZ0IsWUFBWXAyQixJQUFJKzJCLElBRXpDL0IsRUFBZXZxQixVQUFVd21CLFFBQVUsU0FBVS9vQixHQUN6QyxJQUFJc0UsT0FBWSxJQUFQdEUsRUFBZ0IsR0FBS0EsRUFBSXF0QixFQUFhL29CLEVBQUcrb0IsV0FBWXRhLEVBQWF6TyxFQUFHeU8sV0FBWXNXLEVBQXdCL2tCLEVBQUcra0Isc0JBQ2pIK00sRUFBUXQvQixLQUFLMjVCLFdBQ2IyRixHQUNBQSxFQUFNck4sUUFBUWp5QixLQUFNdXlCLEdBQ3BCZ0UsSUFDQXYyQixLQUFLNDdCLHFCQUFrQnQ3QixFQUN2Qk4sS0FBS3UyQixZQUFhLEdBRWxCdGEsR0FDQWpjLEtBQUsrOEIsV0FBVyxDQUFFOWdCLFdBQVlBLEtBRXRDK1osRUFBZXZxQixVQUFVeW1CLFNBQVcsV0FDaEMsSUFBSW9OLEVBQVF0L0IsS0FBSzI1QixXQUNqQixRQUFJMkYsR0FDT0EsRUFBTXBOLFNBQVNseUIsT0FNOUJnMkIsRUFBZXZxQixVQUFVeXVCLGNBQWdCLFdBQ3JDLElBQUkxWixFQUFnQnhnQixLQUFLME0sUUFBUThULGNBQ2pDLEdBQUtBLEVBQUwsQ0FPQSxJQUpBLElBQUlnZixHQUFZLEVBRVpDLEVBQWMsR0FFVC81QixFQUFJLEVBQUdBLEVBQUk2dUIsR0FBY3B0QixPQUFRekIsSUFBSyxDQUMzQyxJQUNJcUcsRUFBTSxTQURDd29CLEdBQWM3dUIsR0FJcEI4YSxFQUFja2YsZUFBZTN6QixLQUdsQ3l6QixHQUFZLEVBRVpDLEVBQVkxekIsR0FBT3lVLEVBQWNrZixlQUFlM3pCLEdBQ2hEeVUsRUFBY21mLGVBQWU1ekIsRUFBSyxJQUd0QyxHQUFLeXpCLEVBQUwsQ0FNQSxJQUFLLElBQUl6ekIsS0FGVHlVLE1BQUFBLEdBQThEQSxFQUFjb2YsYUFFNURILEVBQ1pqZixFQUFjbWYsZUFBZTV6QixFQUFLMHpCLEVBQVkxekIsSUFJbER5VSxFQUFjc1Isb0JBRWxCa0UsRUFBZXZxQixVQUFVbzBCLG9CQUFzQixTQUFVQyxHQUNyRCxJQUFJNTJCLEVBQUlzRSxFQUFJNmxCLEVBQUlDLEVBQUlDLEVBQUk4RSxPQUNOLElBQWR5SCxJQUF3QkEsRUFBWSxJQUV4QyxJQUFJM2lCLEVBQVMsR0FDYixJQUFLbmQsS0FBS3l5QixVQUFZenlCLEtBQUtzMkIsTUFDdkIsT0FBT25aLEVBQ1gsSUFBS25kLEtBQUtrM0IsVUFDTixNQUFPLENBQUU2SSxXQUFZLFVBR3JCNWlCLEVBQU80aUIsV0FBYSxHQUV4QixJQUFJMUYsRUFBMEQsUUFBckNueEIsRUFBS2xKLEtBQUswTSxRQUFROFQscUJBQWtDLElBQVB0WCxPQUFnQixFQUFTQSxFQUFHK1ksV0FBV29ZLGtCQUM3RyxHQUFJcjZCLEtBQUt1MkIsV0FRTCxPQVBBdjJCLEtBQUt1MkIsWUFBYSxFQUNsQnBaLEVBQU94UixRQUFVLEdBQ2pCd1IsRUFBTzZpQixjQUNINUssR0FBbUIwSyxFQUFVRSxnQkFBa0IsR0FDbkQ3aUIsRUFBT2pRLFVBQVltdEIsRUFDYkEsRUFBa0JyNkIsS0FBSzZ5QixhQUFjLElBQ3JDLE9BQ0MxVixFQUVYLElBQUk2VSxFQUFPaHlCLEtBQUtzOUIsVUFDaEIsSUFBS3Q5QixLQUFLNDdCLGtCQUFvQjU3QixLQUFLNHdCLFNBQVdvQixFQUFLNWpCLE9BQVEsQ0FDdkQsSUFBSTZ4QixFQUFjLEdBWWxCLE9BWElqZ0MsS0FBSzBNLFFBQVFxckIsV0FDYmtJLEVBQVl0MEIsUUFBK0MsUUFBcEM2QixFQUFLeE4sS0FBSzZ5QixhQUFhbG5CLGVBQTRCLElBQVA2QixFQUFnQkEsRUFBSyxFQUN4Rnl5QixFQUFZRCxjQUNSNUssR0FBbUIwSyxFQUFVRSxnQkFBa0IsSUFFbkRoZ0MsS0FBS2kzQixlQUFpQi9ILEdBQWFsdkIsS0FBSzZ5QixnQkFDeENvTixFQUFZL3lCLFVBQVltdEIsRUFDbEJBLEVBQWtCLEdBQUksSUFDdEIsT0FDTnI2QixLQUFLaTNCLGNBQWUsR0FFakJnSixFQUVYLElBQUlDLEVBQWlCbE8sRUFBS2MsaUJBQW1CZCxFQUFLYSxhQUNsRDd5QixLQUFLbS9CLDBCQUNMaGlCLEVBQU9qUSxVQUFZNG1CLEdBQXlCOXpCLEtBQUs0OUIsNkJBQThCNTlCLEtBQUsrekIsVUFBV21NLEdBQzNGN0YsSUFDQWxkLEVBQU9qUSxVQUFZbXRCLEVBQWtCNkYsRUFBZ0IvaUIsRUFBT2pRLFlBRWhFLElBQUk0ckIsRUFBSzk0QixLQUFLNDdCLGdCQUFpQjc1QixFQUFJKzJCLEVBQUcvMkIsRUFBR0MsRUFBSTgyQixFQUFHOTJCLEVBMkJoRCxJQUFLLElBQUkrSixLQTFCVG9SLEVBQU9nakIsZ0JBQWtCLEdBQUcxWixPQUFrQixJQUFYMWtCLEVBQUVxUyxPQUFjLE1BQU1xUyxPQUFrQixJQUFYemtCLEVBQUVvUyxPQUFjLE9BQzVFNGQsRUFBS2MsZ0JBS0wzVixFQUFPeFIsUUFDSHFtQixJQUFTaHlCLEtBQ2lHLFFBQW5Hc3pCLEVBQXVDLFFBQWpDRCxFQUFLNk0sRUFBZXYwQixlQUE0QixJQUFQMG5CLEVBQWdCQSxFQUFLcnpCLEtBQUs2eUIsYUFBYWxuQixlQUE0QixJQUFQMm5CLEVBQWdCQSxFQUFLLEVBQ2pJdHpCLEtBQUsyeUIsZ0JBQ0QzeUIsS0FBSzZ5QixhQUFhbG5CLFFBQ2xCdTBCLEVBQWVyQixZQU83QjFoQixFQUFPeFIsUUFDSHFtQixJQUFTaHlCLEtBQytCLFFBQWpDdXpCLEVBQUsyTSxFQUFldjBCLGVBQTRCLElBQVA0bkIsRUFBZ0JBLEVBQUssR0FDekIsUUFBckM4RSxFQUFLNkgsRUFBZXJCLG1CQUFnQyxJQUFQeEcsRUFBZ0JBLEVBQUssRUFLakUxRSxHQUNaLFFBQTRCcnpCLElBQXhCNC9CLEVBQWVuMEIsR0FBbkIsQ0FFQSxJQUFJcTBCLEVBQUt6TSxHQUFnQjVuQixHQUFNczBCLEVBQVVELEVBQUdDLFFBQVNDLEVBQVVGLEVBQUdFLFFBQzlEQyxFQUFZRixFQUFRSCxFQUFlbjBCLEdBQU1pbUIsR0FDN0MsR0FBSXNPLEVBRUEsSUFEQSxJQUFJRSxFQUFNRixFQUFRbjVCLE9BQ1R6QixFQUFJLEVBQUdBLEVBQUk4NkIsRUFBSzk2QixJQUNyQnlYLEVBQU9takIsRUFBUTU2QixJQUFNNjZCLE9BSXpCcGpCLEVBQU9wUixHQUFPdzBCLEVBY3RCLE9BTkl2Z0MsS0FBSzBNLFFBQVFxckIsV0FDYjVhLEVBQU82aUIsY0FDSGhPLElBQVNoeUIsS0FDSG8xQixHQUFtQjBLLEVBQVVFLGdCQUFrQixHQUMvQyxRQUVQN2lCLEdBRVg2WSxFQUFldnFCLFVBQVVzdkIsY0FBZ0IsV0FDckMvNkIsS0FBSzB5QixXQUFhMXlCLEtBQUs0eUIsY0FBV3R5QixHQUd0QzAxQixFQUFldnFCLFVBQVVnMUIsVUFBWSxXQUNqQ3pnQyxLQUFLOFcsS0FBS2dnQixNQUFNaDBCLFNBQVEsU0FBVSt1QixHQUFRLElBQUkzb0IsRUFBSSxPQUF3QyxRQUFoQ0EsRUFBSzJvQixFQUFLdUgsd0JBQXFDLElBQVBsd0IsT0FBZ0IsRUFBU0EsRUFBR2MsVUFDOUhoSyxLQUFLOFcsS0FBS2dnQixNQUFNaDBCLFFBQVEyM0IsSUFDeEJ6NkIsS0FBSzhXLEtBQUtzZ0IsWUFBWTNULFNBRW5CdVMsRUF4L0JVLEdBMi9CekIsU0FBUzRFLEdBQWEvSSxHQUNsQkEsRUFBSytJLGVBRVQsU0FBU0MsR0FBbUJoSixHQUN4QixJQUFJM29CLEVBQUlzRSxFQUFJNmxCLEVBQUlDLEVBQ1pWLEVBQThGLFFBQWxGcGxCLEVBQWdDLFFBQTFCdEUsRUFBSzJvQixFQUFLYSxrQkFBK0IsSUFBUHhwQixPQUFnQixFQUFTQSxFQUFHMHBCLGdCQUE2QixJQUFQcGxCLEVBQWdCQSxFQUFLcWtCLEVBQUtlLFNBQ3BJLEdBQUlmLEVBQUsySCxVQUNMM0gsRUFBS2pCLFFBQ0xnQyxHQUNBZixFQUFLK0YsYUFBYSxhQUFjLENBQ2hDLElBQUlyRSxFQUFLMUIsRUFBS2pCLE9BQVE4UCxFQUFXbk4sRUFBR21JLE9BQVFpRixFQUFpQnBOLEVBQUc0SCxTQUc3QixTQUEvQnRKLEVBQUtubEIsUUFBUWswQixjQUNidk0sSUFBUyxTQUFVdHhCLEdBQ2YsSUFBSTg5QixFQUFlak8sRUFBU0csU0FDdEJILEVBQVN1SSxTQUFTcDRCLEdBQ2xCNnZCLEVBQVNoQyxPQUFPN3RCLEdBQ2xCb0UsRUFBU2dwQixHQUFXMFEsR0FDeEJBLEVBQWFsNkIsSUFBTSs1QixFQUFTMzlCLEdBQU00RCxJQUNsQ2s2QixFQUFhajZCLElBQU1pNkIsRUFBYWw2QixJQUFNUSxLQUdOLGFBQS9CMHFCLEVBQUtubEIsUUFBUWswQixlQUNsQnZNLElBQVMsU0FBVXR4QixHQUNmLElBQUk4OUIsRUFBZWpPLEVBQVNHLFNBQ3RCSCxFQUFTdUksU0FBU3A0QixHQUNsQjZ2QixFQUFTaEMsT0FBTzd0QixHQUNsQm9FLEVBQVNncEIsR0FBV3VRLEVBQVMzOUIsSUFDakM4OUIsRUFBYWo2QixJQUFNaTZCLEVBQWFsNkIsSUFBTVEsS0FHOUMsSUFBSTI1QixFQWh6QzJCLENBQ25DLytCLEVBUHVDLENBQ3ZDUSxVQUFXLEVBQ1hFLE1BQU8sRUFDUDJSLE9BQVEsRUFDUmtiLFlBQWEsR0FJYnR0QixFQVJ1QyxDQUN2Q08sVUFBVyxFQUNYRSxNQUFPLEVBQ1AyUixPQUFRLEVBQ1JrYixZQUFhLElBbXpDVGtCLEdBQWFzUSxFQUFhSixFQUFVOU4sRUFBU2hDLFFBQzdDLElBQUltUSxFQWx6QzJCLENBQ25DaC9CLEVBUHVDLENBQ3ZDUSxVQUFXLEVBQ1hFLE1BQU8sRUFDUDJSLE9BQVEsRUFDUmtiLFlBQWEsR0FJYnR0QixFQVJ1QyxDQUN2Q08sVUFBVyxFQUNYRSxNQUFPLEVBQ1AyUixPQUFRLEVBQ1JrYixZQUFhLElBcXpDTHNELEVBQVNHLFNBQ1R2QyxHQUFhdVEsRUFBYWxQLEVBQUs0SyxlQUFla0UsR0FBZ0IsR0FBTy9OLEVBQVN1SSxVQUc5RTNLLEdBQWF1USxFQUFhTCxFQUFVOU4sRUFBU2hDLFFBRWpELElBQUkwSCxHQUFvQjdHLEdBQVlxUCxHQUNoQ3ZJLEdBQTJCLEVBQy9CLElBQUsxRyxFQUFLYSxhQUNOYixFQUFLbUwsZUFBaUJuTCxFQUFLb0wsNkJBS3ZCcEwsRUFBS21MLGlCQUFtQm5MLEVBQUttTCxlQUFldEssWUFBWSxDQUN4RCxJQUFJMkYsRUFBS3hHLEVBQUttTCxlQUFnQmdFLEVBQWlCM0ksRUFBR3pGLFNBQVVxTyxFQUFlNUksRUFBR3pILE9BQzlFLEdBQUlvUSxHQUFrQkMsRUFBYyxDQUNoQyxJQUFJQyxFQS96Q2EsQ0FDakNuL0IsRUFGa0MsQ0FBRzRFLElBQUssRUFBR0MsSUFBSyxHQUdsRDVFLEVBSGtDLENBQUcyRSxJQUFLLEVBQUdDLElBQUssSUFpMENsQ2lxQixHQUFxQnFRLEVBQWtCdE8sRUFBU2hDLE9BQVFvUSxFQUFlcFEsUUFDdkUsSUFBSXdOLEVBajBDYSxDQUNqQ3I4QixFQUZrQyxDQUFHNEUsSUFBSyxFQUFHQyxJQUFLLEdBR2xENUUsRUFIa0MsQ0FBRzJFLElBQUssRUFBR0MsSUFBSyxJQW0wQ2xDaXFCLEdBQXFCdU4sRUFBZ0JzQyxFQUFVTyxFQUFhdkYsUUFDdkRoSyxHQUFVd1AsRUFBa0I5QyxLQUM3QjdGLEdBQTJCLElBSzNDMUcsRUFBSzBGLGdCQUFnQixZQUFhLENBQzlCM0csT0FBUThQLEVBQ1I5TixTQUFVQSxFQUNWdmMsTUFBTzBxQixFQUNQRCxZQUFhQSxFQUNieEksaUJBQWtCQSxFQUNsQkMseUJBQTBCQSxTQUd6QjFHLEVBQUsySCxXQUNvQyxRQUE3Q2xHLEdBQU1ELEVBQUt4QixFQUFLbmxCLFNBQVM4bUIsc0JBQW1DLElBQVBGLEdBQXlCQSxFQUFHOXBCLEtBQUs2cEIsSUFPM0Z4QixFQUFLbmxCLFFBQVF1UCxnQkFBYTNiLEVBRTlCLFNBQVN5NkIsR0FBY2xKLEdBQ25CQSxFQUFLa0osZ0JBRVQsU0FBU04sR0FBa0I1SSxHQUN2QkEsRUFBSzRJLG9CQUVULFNBQVNFLEdBQW9COUksR0FDekIsSUFBSXJSLEVBQWdCcVIsRUFBS25sQixRQUFROFQsZUFDN0JBLE1BQUFBLE9BQXFELEVBQVNBLEVBQWN5QixXQUFXa2Ysd0JBQ3ZGM2dCLEVBQWM0Z0IsNEJBRWxCdlAsRUFBS2tFLGlCQUVULFNBQVNvQyxHQUFnQnRHLEdBQ3JCQSxFQUFLc0csa0JBQ0x0RyxFQUFLaUwsWUFBY2pMLEVBQUs2RyxlQUFpQjdHLEVBQUt6akIsWUFBUzlOLEVBRTNELFNBQVN5MkIsR0FBbUJsRixHQUN4QkEsRUFBS2tGLHFCQUVULFNBQVNDLEdBQWVuRixHQUNwQkEsRUFBS21GLGlCQUVULFNBQVNrRCxHQUFjckksR0FDbkJBLEVBQUtxSSxnQkFFVCxTQUFTYyxHQUFvQnNFLEdBQ3pCQSxFQUFNNUwscUJBRVYsU0FBU2dMLEdBQWE5MkIsRUFBUXlPLEVBQU96TixHQUNqQ2hCLEVBQU9yRixVQUFZb2IsRUFBVXZXLElBQUlpUCxFQUFNOVQsVUFBVyxFQUFHcUcsR0FDckRoQixFQUFPbkYsTUFBUWtiLEVBQVV2VyxJQUFJaVAsRUFBTTVULE1BQU8sRUFBR21HLEdBQzdDaEIsRUFBT3dNLE9BQVNpQyxFQUFNakMsT0FDdEJ4TSxFQUFPMG5CLFlBQWNqWixFQUFNaVosWUFFL0IsU0FBU3FQLEdBQVEvMkIsRUFBUStHLEVBQU1zRSxFQUFJckssR0FDL0JoQixFQUFPakIsSUFBTWdYLEVBQVV2VyxJQUFJdUgsRUFBS2hJLElBQUtzTSxFQUFHdE0sSUFBS2lDLEdBQzdDaEIsRUFBT2hCLElBQU0rVyxFQUFVdlcsSUFBSXVILEVBQUsvSCxJQUFLcU0sRUFBR3JNLElBQUtnQyxHQU1qRCxTQUFTNDFCLEdBQW9CM00sR0FDekIsT0FBUUEsRUFBS2lCLHNCQUF3RHh5QixJQUFyQ3V4QixFQUFLaUIsZ0JBQWdCK0wsWUFFekQsSUFBSWhHLEdBQTBCLENBQzFCNzBCLFNBQVUsSUFDVitCLEtBQU0sQ0FBQyxHQUFLLEVBQUcsR0FBSyxJQUV4QixTQUFTMjBCLEdBQWU3SSxFQUFNb0UsR0FNMUIsSUFEQSxJQUFJb0wsRUFBYXhQLEVBQUsvYSxLQUNicFIsRUFBSW1zQixFQUFLd0YsS0FBS2x3QixPQUFTLEVBQUd6QixHQUFLLEVBQUdBLElBQ3ZDLEdBQUlsQixRQUFRcXRCLEVBQUt3RixLQUFLM3hCLEdBQUcrc0IsVUFBVyxDQUNoQzRPLEVBQWF4UCxFQUFLd0YsS0FBSzN4QixHQUN2QixNQUdSLElBQ0loRixHQURnQjJnQyxHQUFjQSxJQUFleFAsRUFBSy9hLEtBQU91cUIsRUFBVzVPLFNBQVcxbkIsVUFDdkR1MkIsY0FBYyx3QkFBeUI3YSxPQUFPd1AsRUFBSSxPQUMxRXYxQixHQUNBbXhCLEVBQUt0VixNQUFNN2IsR0FBUyxHQUU1QixTQUFTNmdDLEdBQVV4K0IsR0FDZkEsRUFBSzRELElBQU1oQixLQUFLbWlCLE1BQU0va0IsRUFBSzRELEtBQzNCNUQsRUFBSzZELElBQU1qQixLQUFLbWlCLE1BQU0va0IsRUFBSzZELEtBRS9CLFNBQVMyMEIsR0FBU3pNLEdBQ2R5UyxHQUFVelMsRUFBSS9zQixHQUNkdy9CLEdBQVV6UyxFQUFJOXNCLEdBR2xCLElBQUl3L0IsR0FBTyxFQVNQQyxHQUFxQmprQixFQUFNcUMsY0FBYyxJQUt6QzZoQixHQUEyQmxrQixFQUFNcUMsY0FBYyxJQStCL0M4aEIsR0FBc0MsU0FBVUMsR0FFaEQsU0FBU0QsSUFDTCxPQUFrQixPQUFYQyxHQUFtQkEsRUFBT2pLLE1BQU0zM0IsS0FBTXkzQixZQUFjejNCLEtBa0IvRCxPQXBCQXVkLEVBQU1za0IsVUFBVUYsRUFBc0JDLEdBT3RDRCxFQUFxQmwyQixVQUFVcTJCLHdCQUEwQixXQUVyRCxPQURBOWhDLEtBQUsraEMsY0FDRSxNQUVYSixFQUFxQmwyQixVQUFVdTJCLG1CQUFxQixhQUNwREwsRUFBcUJsMkIsVUFBVXMyQixZQUFjLFdBQ3pDLElBQUk3NEIsRUFBS2xKLEtBQUsrZSxNQUFPeUIsRUFBZ0J0WCxFQUFHc1gsY0FBZXpCLEVBQVE3VixFQUFHNlYsTUFDOUR5QixHQUNBQSxFQUFjeWhCLFNBQVNsakIsSUFFL0I0aUIsRUFBcUJsMkIsVUFBVXlZLE9BQVMsV0FDcEMsT0FBT2xrQixLQUFLK2UsTUFBTWtXLFVBRWYwTSxFQXJCOEIsQ0FzQnZDbmpCLEVBQXdCLFFBQUVtQixXQVc1QixTQUFTdWlCLEdBQXNCaDVCLEdBQzNCLElBQUlpNUIsRUFBb0JqNUIsRUFBR2k1QixrQkFBbUJDLEVBQXNCbDVCLEVBQUdrNUIsb0JBQXFCMWlCLEVBQTRCeFcsRUFBR3dXLDBCQUEyQjJpQixFQUFZbjVCLEVBQUdtNUIsVUFBV0MsRUFBaUJwNUIsRUFBR281QixlQUFnQjNpQixFQUFZelcsRUFBR3lXLFVBc0RuTyxPQXJEQXdpQixHQUFxQjNpQixFQUFhMmlCLEdBcUQzQjNrQixFQUFNK2tCLFlBcERiLFNBQXlCeGpCLEVBQU95akIsR0FDNUIsSUFBSXpLLEVBcURaLFNBQXFCN3VCLEdBQ2pCLElBQUlzRSxFQUNBdXFCLEVBQVc3dUIsRUFBRzZ1QixTQUNkMEssRUFBZ0UsUUFBL0NqMUIsRUFBS2dRLEVBQU0rQyxXQUFXa2hCLFdBQXdDLElBQVBqMEIsT0FBZ0IsRUFBU0EsRUFBR3lvQixHQUN4RyxPQUFPd00sUUFBOEJuaUMsSUFBYnkzQixFQUNsQjBLLEVBQWdCLElBQU0xSyxFQUN0QkEsRUEzRGEySyxDQUFZM2pCLEdBQzNCQSxFQUFReEIsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJN0ksR0FBUSxDQUFFZ1osU0FBVUEsSUFPOUQsSUFBSTRLLEVBQVNubEIsRUFBTStDLFdBQVdOLEdBQzFCUixFQUFXLEtBQ1hyRSxFQTNxRlosU0FBZ0MyRCxHQUM1QixJQUFJN1YsRUFkUixTQUFnQzZWLEVBQU8zRCxHQUNuQyxHQUFJa0gsRUFBMkJ2RCxHQUFRLENBQ25DLElBQUk3RCxFQUFVNkQsRUFBTTdELFFBQVNqUSxFQUFVOFQsRUFBTTlULFFBQzdDLE1BQU8sQ0FDSGlRLFNBQXFCLElBQVpBLEdBQXFCNEcsRUFBZTVHLEdBQ3ZDQSxPQUNBNWEsRUFDTjJLLFFBQVM2VyxFQUFlN1csR0FBV0EsT0FBVTNLLEdBR3JELE9BQXlCLElBQWxCeWUsRUFBTTZqQixRQUFvQnhuQixFQUFVLEdBSWxDeW5CLENBQXVCOWpCLEVBQU92QixFQUFNK0MsV0FBV0YsSUFBaUJuRixFQUFVaFMsRUFBR2dTLFFBQVNqUSxFQUFVL0IsRUFBRytCLFFBQzVHLE9BQU91UyxFQUFNc2xCLFNBQVEsV0FBYyxNQUFPLENBQUc1bkIsUUFBU0EsRUFBU2pRLFFBQVNBLEtBQWUsQ0FBQzJYLEVBQTBCMUgsR0FBVTBILEVBQTBCM1gsS0F5cUZwSTgzQixDQUF1QmhrQixHQVlqQ2lrQixFQUFlTCxFQUFPeGlCLGNBQVc3ZixFQXRHbEN5aUIsR0FBWSxXQUNmLEdBQUl3UyxHQUFzQkUsZUFDdEIsT0FBTytMLFFBd0dQeUIsRUFBY1gsRUFBZXZqQixFQUFPNGpCLEVBQU94aUIsVUFxQi9DLE9BcEJLd2lCLEVBQU94aUIsVUFBWU8sSUFPcEJ0RixFQUFRb0YsY0E5MUZwQixTQUEwQmIsRUFBV3NqQixFQUFhbGtCLEVBQU9xakIsR0FDckQsSUFBSWMsRUFBYzFsQixFQUFNK0MsV0FBV1gsR0FDL0I3RSxFQUFTdUYsSUFDVDZpQixFQUFrQjNsQixFQUFNK0MsV0FBV0UsR0FDbkM4WSxFQUFxQjlYLElBQ3JCMmhCLEVBQW1CNWxCLEVBQU15RixZQUFPM2lCLEdBSS9COGhDLElBQ0RBLEVBQXNCYyxFQUFZRyxXQUNqQ0QsRUFBaUIveUIsU0FBVyt4QixJQUM3QmdCLEVBQWlCL3lCLFFBQVUreEIsRUFBb0J6aUIsRUFBVyxDQUN0RHNqQixZQUFhQSxFQUNibG9CLE9BQVFBLEVBQ1JnRSxNQUFPQSxFQUNQdWtCLFdBQVlILE1BQUFBLE9BQXlELEVBQVNBLEVBQWdCbE4sR0FDOUZzTix1QkFBdUgsS0FBL0ZKLE1BQUFBLE9BQXlELEVBQVNBLEVBQWdCam9CLFNBQzFHcWUsbUJBQW9CQSxLQUc1QixJQUFJL1ksRUFBZ0I0aUIsRUFBaUIveUIsUUFTckMsT0FSQXNRLEdBQTBCLFdBQ3RCSCxNQUFBQSxHQUE4REEsRUFBY29mLGdCQUVoRnBpQixFQUFNcUQsV0FBVSxXQUNaLElBQUkzWCxFQUNrRyxRQUFyR0EsRUFBS3NYLE1BQUFBLE9BQXFELEVBQVNBLEVBQWNnakIsc0JBQW1DLElBQVB0NkIsR0FBeUJBLEVBQUd1NkIsb0JBRTlJOWlCLEdBQTBCLFdBQWMsT0FBTyxXQUFjLE9BQU9ILE1BQUFBLE9BQXFELEVBQVNBLEVBQWNrakIsbUJBQXVCLElBQ2hLbGpCLEVBZzBGeUJtakIsQ0FBaUJoa0IsRUFBV3NqQixFQUFhMWxCLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSSthLEdBQVM1akIsR0FBUXFqQixHQXBHaEksU0FBdUJZLEVBQWM5NUIsRUFBSXNYLEVBQWVvakIsR0FDcEQsSUFBSXAyQixFQUNBdXFCLEVBQVc3dUIsRUFBRzZ1QixTQUFVbkgsRUFBUzFuQixFQUFHMG5CLE9BQVF4UixFQUFPbFcsRUFBR2tXLEtBQU15a0IsRUFBa0IzNkIsRUFBRzI2QixnQkFBaUIvSCxFQUFlNXlCLEVBQUc0eUIsYUFDcEhzRCxFQUF5QjVoQixFQUFNK0MsV0FBV21oQixJQUN6Q2tDLEdBQ0FwakIsS0FDQUEsTUFBQUEsT0FBcUQsRUFBU0EsRUFBY3NqQixjQUdqRnRqQixFQUFjc2pCLFdBQWEsSUFBSUYsRUFBMEJaLEVBQWN4aUIsRUFBY3VqQixrQkFBbUQsUUFBL0J2MkIsRUFBS2dULEVBQWN6RixjQUEyQixJQUFQdk4sT0FBZ0IsRUFBU0EsRUFBR3MyQixZQUM1S3RqQixFQUFjc2pCLFdBQVcvRyxXQUFXLENBQ2hDaEYsU0FBVUEsRUFDVm5ILE9BQVFBLEVBQ1I0SyxvQkFBcUJoM0IsUUFBUTRhLElBQVV5a0IsR0FBbUJsaUIsRUFBWWtpQixHQUN0RXJqQixjQUFlQSxFQUNmc1IsZUFBZ0IsV0FBYyxPQUFPdFIsRUFBY3NSLGtCQVFuRDhPLGNBQWlDLGlCQUFYaFEsRUFBc0JBLEVBQVMsT0FDckR3Tyx1QkFBd0JBLEVBQ3hCdEQsYUFBY0EsS0E0RVZrSSxDQUFjaEIsRUFBY2prQixFQUFPM0QsRUFBUW9GLGNBQWVkLEdBQ3REVCxFQUFtQlMsMkJBS3ZCRCxFQTc5RlosU0FBcUJWLEVBQU95QixFQUFlMmhCLEdBQ3ZDLElBQUkxaUIsRUFBVyxHQUNYeWpCLEVBQWMxbEIsRUFBTStDLFdBQVdYLEdBQ25DLElBQUtZLEVBQ0QsT0FBTyxLQUtDLGVBQVI5QixHQUF3QnlqQixHQUFxQmUsRUFBWXBqQixRQUN6RHJDLEVBQVV2TCxXQUFVLEVBQU8sb0pBRS9CLElBQUssSUFBSXhNLEVBQUksRUFBR0EsRUFBSXNhLEVBQWF0YSxJQUFLLENBQ2xDLElBQUl1K0IsRUFBU2xrQixFQUFhcmEsR0FDdEJ3RCxFQUFLK1YsRUFBbUJnbEIsR0FBU25sQixFQUFZNVYsRUFBRzRWLFVBQVdhLEVBQVl6VyxFQUFHeVcsVUFNMUViLEVBQVVDLElBQVVZLEdBQ3BCRixFQUFTamUsS0FBSytjLEVBQWlCdlQsY0FBYzJVLEVBQVdwQyxFQUFNcUssU0FBUyxDQUFFN2IsSUFBS2s0QixHQUFVbGxCLEVBQU8sQ0FBRXlCLGNBQWVBLE1BR3hILE9BQU9mLEVBcThGWXlrQixDQUFZbmxCLEVBQU8zRCxFQUFRb0YsY0FBZTJoQixJQU1qRDVqQixFQUFpQnZULGNBQWMyMkIsR0FBc0IsQ0FBRW5oQixjQUFlcEYsRUFBUW9GLGNBQWV6QixNQUFPeEIsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJK2EsR0FBUzVqQixJQUNuSlUsRUFDQWxCLEVBQWlCdlQsY0FBY3FWLEVBQWM4akIsU0FBVSxDQUFFNy9CLE1BQU84VyxHQUFXaW5CLEVBQVUxaUIsRUFBV1osRUFBT2lrQixFQW4wRm5ILFNBQXNCQyxFQUFhemlCLEVBQWVnaUIsR0FDOUMsT0FBT2hsQixFQUFNNG1CLGFBQVksU0FBVTNSLEdBQy9CLElBQUl2cEIsRUFDSnVwQixJQUEwQyxRQUE1QnZwQixFQUFLKzVCLEVBQVkxbUIsYUFBMEIsSUFBUHJULEdBQXlCQSxFQUFHTSxLQUFLeTVCLEVBQWF4USxJQUM1RmpTLElBQ0FpUyxFQUNNalMsRUFBY2pFLE1BQU1rVyxHQUNwQmpTLEVBQWNpWixXQUVwQitJLElBQzJCLG1CQUFoQkEsRUFDUEEsRUFBWS9QLEdBRVA5USxFQUFZNmdCLEtBQ2pCQSxFQUFZbnlCLFFBQVVvaUIsTUFTbEMsQ0FBQ2pTLElBNHlGNEg2akIsQ0FBYXBCLEVBQWE3bkIsRUFBUW9GLGNBQWVnaUIsR0FBY1MsRUFBYU4sRUFBT3hpQixTQUFVL0UsRUFBUW9GLG9CQTJCdE8sU0FBUzhqQixHQUFrQkMsR0FDdkIsU0FBU2w4QixFQUFPc1gsRUFBVzZrQixHQUV2QixZQURvQyxJQUFoQ0EsSUFBMENBLEVBQThCLElBQ3JFdEMsR0FBc0JxQyxFQUFhNWtCLEVBQVc2a0IsSUFFekQsR0FBcUIsb0JBQVZ6MUIsTUFDUCxPQUFPMUcsRUFNWCxJQUFJbzhCLEVBQWlCLElBQUkxakMsSUFDekIsT0FBTyxJQUFJZ08sTUFBTTFHLEVBQVEsQ0FNckJySCxJQUFLLFNBQVUwakMsRUFBUzM0QixHQU9wQixPQUhLMDRCLEVBQWU5akMsSUFBSW9MLElBQ3BCMDRCLEVBQWU3akMsSUFBSW1MLEVBQUsxRCxFQUFPMEQsSUFFNUIwNEIsRUFBZXpqQyxJQUFJK0ssTUFTdEMsSUFBSTQ0QixHQUF1QixDQUN2QixVQUNBLFNBQ0EsT0FDQSxPQUNBLFVBQ0EsSUFDQSxRQUNBLE9BQ0EsU0FDQSxTQUNBLE9BQ0EsV0FDQSxPQUNBLFVBQ0EsVUFDQSxXQUNBLE9BQ0EsT0FDQSxNQUNBLFNBQ0EsU0FDQSxPQUNBLFFBQ0EsTUFDQSxRQUdKLFNBQVNDLEdBQWVqbEIsR0FDcEIsTUFLcUIsaUJBQWRBLElBSUhBLEVBQVVuSyxTQUFTLFNBT3ZCbXZCLEdBQXFCcGpDLFFBQVFvZSxJQUFjLEdBSXZDLFFBQVFpSCxLQUFLakgsSUFNckIsU0FBU2tsQixHQUFvQjk0QixFQUFLN0MsR0FDOUIsSUFBSTBuQixFQUFTMW5CLEVBQUcwbkIsT0FBUW1ILEVBQVc3dUIsRUFBRzZ1QixTQUN0QyxPQUFRbEQsR0FBZ0I5b0IsSUFDcEJncEIsR0FBc0JocEIsS0FDcEI2a0IsUUFBdUJ0d0IsSUFBYnkzQixPQUNMcEUsR0FBZ0I1bkIsSUFBZ0IsWUFBUkEsR0FHdkMsSUFBSSs0QixHQUFpQixDQUNqQi9pQyxFQUFHLGFBQ0hDLEVBQUcsYUFDSEMsRUFBRyxhQUNIcW9CLHFCQUFzQixlQXNEMUIsU0FBU3lhLEdBQWdCaDVCLEdBQ3JCLE9BQU9BLEVBQUlsSSxXQUFXLE1BTTFCLElBQUltaEMsR0FBaUIsU0FBVTFnQyxFQUFPeWlCLEdBQ2xDLE9BQU9BLEdBQXlCLGlCQUFWemlCLEVBQ2hCeWlCLEVBQUs3WixVQUFVNUksR0FDZkEsR0FHVixTQUFTMmdDLEdBQWdCN3hCLEVBQU95ZixFQUFjbm1CLEVBQVMydEIsR0FDbkQsSUFBSW54QixFQUNBZ0QsRUFBUWtILEVBQU1sSCxNQUFPZzVCLEVBQU85eEIsRUFBTTh4QixLQUFNaDRCLEVBQVlrRyxFQUFNbEcsVUFBVzJQLEVBQWdCekosRUFBTXlKLGNBQWVzakIsRUFBa0Ivc0IsRUFBTStzQixnQkFJdEl0akIsRUFBYzFWLE9BQVMsRUFFdkIsSUFBSStuQixHQUFlLEVBQ2ZpVyxHQUFxQixFQUVyQkMsR0FBa0IsRUFPdEIsSUFBSyxJQUFJcjVCLEtBQU84bUIsRUFBYyxDQUMxQixJQUFJdnVCLEVBQVF1dUIsRUFBYTltQixHQUl6QixHQUFJZzVCLEdBQWdCaDVCLEdBQ2hCbTVCLEVBQUtuNUIsR0FBT3pILE1BRGhCLENBS0EsSUFBSStnQyxFQUFZdGQsR0FBaUJoYyxHQUM3QnU1QixFQUFjTixHQUFlMWdDLEVBQU8rZ0MsR0FDeEMsR0FBSXhRLEdBQWdCOW9CLEdBQU0sQ0FNdEIsR0FKQW1qQixHQUFlLEVBQ2ZoaUIsRUFBVW5CLEdBQU91NUIsRUFDakJ6b0IsRUFBY3JiLEtBQUt1SyxJQUVkcTVCLEVBQ0QsU0FFQTlnQyxLQUF3QyxRQUE1QjRFLEVBQUttOEIsRUFBVTNkLGVBQTRCLElBQVB4ZSxFQUFnQkEsRUFBSyxLQUNyRWs4QixHQUFrQixRQUVqQnJRLEdBQXNCaHBCLElBQzNCbzBCLEVBQWdCcDBCLEdBQU91NUIsRUFFdkJILEdBQXFCLEdBR3JCajVCLEVBQU1ILEdBQU91NUIsR0FHakJwVyxFQUNBaGpCLEVBQU1nQixVQS9HZCxTQUF3QmhFLEVBQUlzRSxFQUFJKzNCLEVBQW9CbEwsR0FDaEQsSUFBSW50QixFQUFZaEUsRUFBR2dFLFVBQVcyUCxFQUFnQjNULEVBQUcyVCxjQUM3Q3dXLEVBQUs3bEIsRUFBR2c0QiwyQkFBNEJBLE9BQW9DLElBQVBuUyxHQUF1QkEsRUFBSUMsRUFBSzlsQixFQUFHaTRCLG1CQUFvQkEsT0FBNEIsSUFBUG5TLEdBQXVCQSxFQUVwS29TLEVBQWtCLEdBRXRCN29CLEVBQWN0WixLQUFLa3hCLElBTW5CLElBSEEsSUFBSWtSLEdBQWdCLEVBRWhCQyxFQUFtQi9vQixFQUFjMVYsT0FDNUJ6QixFQUFJLEVBQUdBLEVBQUlrZ0MsRUFBa0JsZ0MsSUFBSyxDQUN2QyxJQUFJcUcsRUFBTThRLEVBQWNuWCxHQUN4QmdnQyxHQUFtQixHQUFHamYsT0FBT3FlLEdBQWUvNEIsSUFBUUEsRUFBSyxLQUFLMGEsT0FBT3ZaLEVBQVVuQixHQUFNLE1BQ3pFLE1BQVJBLElBQ0E0NUIsR0FBZ0IsR0FnQnhCLE9BZEtBLEdBQWlCSCxFQUNsQkUsR0FBbUIsZ0JBR25CQSxFQUFrQkEsRUFBZ0JoaUMsT0FJbEMyMkIsRUFDQXFMLEVBQWtCckwsRUFBa0JudEIsRUFBV3E0QixFQUFxQixHQUFLRyxHQUVwRUQsR0FBc0JGLElBQzNCRyxFQUFrQixRQUVmQSxFQStFZUcsQ0FBZXp5QixFQUFPMUcsRUFBUzA0QixFQUFpQi9LLEdBRTdEQSxFQUNMbnVCLEVBQU1nQixVQUFZbXRCLEVBQWtCLEdBQUksS0FFbEN4SCxFQUFhM2xCLFdBQWFoQixFQUFNZ0IsWUFDdENoQixFQUFNZ0IsVUFBWSxRQUVsQmk0QixJQUNBajVCLEVBQU1pMEIsZ0JBbEZkLFNBQThCajNCLEdBQzFCLElBQUlzRSxFQUFLdEUsRUFBR3NoQixRQUFTQSxPQUFpQixJQUFQaGQsRUFBZ0IsTUFBUUEsRUFBSTZsQixFQUFLbnFCLEVBQUd3aEIsUUFBU0EsT0FBaUIsSUFBUDJJLEVBQWdCLE1BQVFBLEVBQUlDLEVBQUtwcUIsRUFBR3loQixRQUFTQSxPQUFpQixJQUFQMkksRUFBZ0IsRUFBSUEsRUFDakssTUFBTyxHQUFHN00sT0FBTytELEVBQVMsS0FBSy9ELE9BQU9pRSxFQUFTLEtBQUtqRSxPQUFPa0UsR0FnRi9CbWIsQ0FBcUIzRixJQVlyRCxTQUFTNEYsR0FBa0IzM0IsRUFBUW1pQixFQUFReFIsR0FDdkMsSUFBSyxJQUFJaFQsS0FBT3drQixFQUNQcEwsRUFBY29MLEVBQU94a0IsS0FBVTg0QixHQUFvQjk0QixFQUFLZ1QsS0FDekQzUSxFQUFPckMsR0FBT3drQixFQUFPeGtCLElBMEJqQyxTQUFTaTZCLEdBQWFqbkIsRUFBT2trQixFQUFhOWlCLEdBRXRDLElBQUk4bEIsRUFBWSxHQUNaLzVCLEVBaEJSLFNBQWtCNlMsRUFBT2trQixFQUFhOWlCLEdBQ2xDLElBQ0lqVSxFQUFRLEdBU1osT0FMQTY1QixHQUFrQjc1QixFQUxGNlMsRUFBTTdTLE9BQVMsR0FLSzZTLEdBQ3BDMVQsT0FBT2dELE9BQU9uQyxFQWhCbEIsU0FBZ0NoRCxFQUFJKzVCLEVBQWE5aUIsR0FDN0MsSUFBSWthLEVBQW9CbnhCLEVBQUdteEIsa0JBQzNCLE9BQU83YyxFQUFNc2xCLFNBQVEsV0FDakIsSUFBSTF2QixFQWxCcUMsQ0FDN0NsSCxNQUFPLEdBQ1BnQixVQUFXLEdBQ1gyUCxjQUFlLEdBQ2ZzakIsZ0JBQWlCLEdBQ2pCK0UsS0FBTSxJQWNGRCxHQUFnQjd4QixFQUFPNnZCLEVBQWEsQ0FBRXVDLDRCQUE2QnJsQixHQUFZa2EsR0FDL0UsSUFBSTZLLEVBQU85eEIsRUFBTTh4QixLQUFNaDVCLEVBQVFrSCxFQUFNbEgsTUFDckMsT0FBT3FSLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSXNkLEdBQU9oNUIsS0FDakQsQ0FBQysyQixJQVNpQmlELENBQXVCbm5CLEVBQU9ra0IsRUFBYTlpQixJQUM1RHBCLEVBQU1vbkIsa0JBQ05qNkIsRUFBUTZTLEVBQU1vbkIsZ0JBQWdCajZCLElBRTNCQSxFQUtLazZCLENBQVNybkIsRUFBT2trQixFQUFhOWlCLEdBZ0J6QyxPQWZJM2IsUUFBUXVhLEVBQU1LLFFBQWdDLElBQXZCTCxFQUFNc25CLGVBRTdCSixFQUFVSyxXQUFZLEVBRXRCcDZCLEVBQU1xNkIsV0FDRnI2QixFQUFNczZCLGlCQUNGdDZCLEVBQU11NkIsbUJBQ0YsT0FFWnY2QixFQUFNdzZCLGFBQ2EsSUFBZjNuQixFQUFNSyxLQUNBLE9BQ0EsT0FBT3FILE9BQXNCLE1BQWYxSCxFQUFNSyxLQUFlLElBQU0sTUFFdkQ2bUIsRUFBVS81QixNQUFRQSxFQUNYKzVCLEVBU1gsSUFBSVUsR0FBbUIsSUFBSXZqQyxJQUFJLENBQzNCLFVBQ0EsVUFDQSxPQUNBLFFBQ0EsV0FDQSxhQUNBLG9CQUNBLGtCQUNBLFNBQ0EsVUFDQSxTQUNBLFdBQ0EsbUJBQ0EseUJBQ0EsNEJBQ0Esa0JBQ0Esd0JBQ0EsbUJBQ0Esc0JBQ0EsV0FDQSxjQUNBLFNBQ0EsWUFDQSwyQkFDQSxrQkFDQSxzQkFDQSxPQUNBLGVBQ0EsZUFDQSxrQkFDQSxvQkFDQSxtQkFDQSxTQUNBLFNBQ0EsY0FDQSxlQUNBLGtCQUNBLGlCQUNBLFlBQ0EsUUFDQSxhQUNBLFdBQ0Esb0JBQ0EsUUFDQSxhQUNBLGNBQ0EsZUFDQSxhQUNBLGFBQ0EsV0FDQSxhQUNBLGNBQ0Esa0JBQ0Esa0JBQ0EsV0FDQSxpQkFVSixTQUFTd2pDLEdBQWtCNzZCLEdBQ3ZCLE9BQU80NkIsR0FBaUJobUMsSUFBSW9MLEdBR2hDLElBQUk4NkIsR0FBZ0IsU0FBVTk2QixHQUFPLE9BQVE2NkIsR0FBa0I3NkIsSUFDL0QsU0FBUys2QixHQUF3QkMsR0FDeEJBLElBR0xGLEdBQWdCLFNBQVU5NkIsR0FDdEIsT0FBT0EsRUFBSWxJLFdBQVcsT0FBUytpQyxHQUFrQjc2QixHQUFPZzdCLEVBQVloN0IsS0FnQjVFLElBTUkrNkIsR0FBd0IsVUFFNUIsTUFBTzU5QixJQUdQLFNBQVM4OUIsR0FBWWpvQixFQUFPa29CLEVBQU9DLEdBQy9CLElBQUlDLEVBQWdCLEdBQ3BCLElBQUssSUFBSXA3QixLQUFPZ1QsR0FDUjhuQixHQUFjOTZCLEtBQ1UsSUFBdkJtN0IsR0FBK0JOLEdBQWtCNzZCLEtBQ2hEazdCLElBQVVMLEdBQWtCNzZCLElBRTdCZ1QsRUFBaUIsV0FBS2hULEVBQUlsSSxXQUFXLGFBQ3RDc2pDLEVBQWNwN0IsR0FBT2dULEVBQU1oVCxJQUduQyxPQUFPbzdCLEVBR1gsU0FBU0MsR0FBYWh6QixFQUFROU0sRUFBUTBoQixHQUNsQyxNQUF5QixpQkFBWDVVLEVBQ1JBLEVBQ0F3SixFQUFnQnFLLEdBQUcvYSxVQUFVNUYsRUFBUzBoQixFQUFPNVUsR0FZdkQsSUFBSWl6QixHQUFXLENBQ1gvL0IsT0FBUSxvQkFDUmpHLE1BQU8sb0JBRVBpbUMsR0FBWSxDQUNaaGdDLE9BQVEsbUJBQ1JqRyxNQUFPLG1CQTZCWCxTQUFTa21DLEdBQWNuMEIsRUFBT2xLLEVBQUl3RCxFQUFTMnRCLEdBQ3ZDLElBQUltTixFQUFRdCtCLEVBQUdzK0IsTUFBT0MsRUFBUXYrQixFQUFHdStCLE1BQU9qZCxFQUFVdGhCLEVBQUdzaEIsUUFBU0UsRUFBVXhoQixFQUFHd2hCLFFBQVNnZCxFQUFheCtCLEVBQUd3K0IsV0FBWWw2QixFQUFLdEUsRUFBR3krQixZQUFhQSxPQUFxQixJQUFQbjZCLEVBQWdCLEVBQUlBLEVBQUk2bEIsRUFBS25xQixFQUFHMCtCLFdBQVlBLE9BQW9CLElBQVB2VSxFQUFnQixFQUFJQSxFQUdoTzRSLEdBQWdCN3hCLEVBRFBtSyxFQUFNbk0sT0FBT2xJLEVBQUksQ0FBQyxRQUFTLFFBQVMsVUFBVyxVQUFXLGFBQWMsY0FBZSxlQUNqRXdELEVBQVMydEIsR0FDeENqbkIsRUFBTXkwQixNQUFRejBCLEVBQU1sSCxNQUNwQmtILEVBQU1sSCxNQUFRLEdBQ2QsSUFBSTI3QixFQUFRejBCLEVBQU15MEIsTUFBTzM3QixFQUFRa0gsRUFBTWxILE1BQU80N0IsRUFBYTEwQixFQUFNMDBCLFdBSzdERCxFQUFNMzZCLFlBQ0Y0NkIsSUFDQTU3QixFQUFNZ0IsVUFBWTI2QixFQUFNMzZCLGtCQUNyQjI2QixFQUFNMzZCLFdBR2I0NkIsU0FDYXhuQyxJQUFaa3FCLFFBQXFDbHFCLElBQVpvcUIsR0FBeUJ4ZSxFQUFNZ0IsYUFDekRoQixFQUFNaTBCLGdCQTdEZCxTQUFnQzJILEVBQVl0ZCxFQUFTRSxHQUNqRCxJQUFJcWQsRUFBWVgsR0FBYTVjLEVBQVNzZCxFQUFXL2xDLEVBQUcrbEMsRUFBV2xmLE9BQzNEb2YsRUFBWVosR0FBYTFjLEVBQVNvZCxFQUFXOWxDLEVBQUc4bEMsRUFBV2hmLFFBQy9ELE1BQU8sR0FBR3JDLE9BQU9zaEIsRUFBVyxLQUFLdGhCLE9BQU91aEIsR0EwRFpDLENBQXVCSCxPQUF3QnhuQyxJQUFaa3FCLEVBQXdCQSxFQUFVLFFBQWlCbHFCLElBQVpvcUIsRUFBd0JBLEVBQVUsVUFHMUhwcUIsSUFBVmtuQyxJQUNBSyxFQUFNOWxDLEVBQUl5bEMsUUFDQWxuQyxJQUFWbW5DLElBQ0FJLEVBQU03bEMsRUFBSXlsQyxRQUVLbm5DLElBQWZvbkMsR0FoRFIsU0FBc0JHLEVBQU8xZ0MsRUFBUStnQyxFQUFTNWdDLEVBQVE2Z0MsUUFDbEMsSUFBWkQsSUFBc0JBLEVBQVUsUUFDckIsSUFBWDVnQyxJQUFxQkEsRUFBUyxRQUNkLElBQWhCNmdDLElBQTBCQSxHQUFjLEdBRTVDTixFQUFNSCxXQUFhLEVBR25CLElBQUk5c0IsRUFBT3V0QixFQUFjZCxHQUFXQyxHQUVwQ08sRUFBTWp0QixFQUFLdFQsUUFBVXNXLEVBQWdCcUssR0FBRy9hLFdBQVc1RixHQUVuRCxJQUFJb2dDLEVBQWE5cEIsRUFBZ0JxSyxHQUFHL2EsVUFBVS9GLEdBQzFDd2dDLEVBQWMvcEIsRUFBZ0JxSyxHQUFHL2EsVUFBVWc3QixHQUMvQ0wsRUFBTWp0QixFQUFLdlosT0FBUyxHQUFHb2xCLE9BQU9paEIsRUFBWSxLQUFLamhCLE9BQU9raEIsR0FtQ2xEUyxDQUFhUCxFQUFPSCxFQUFZQyxFQUFhQyxHQUFZLEdBSWpFLElBQUlTLEdBQXVCLFdBQWMsT0FBUTlxQixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBelE5QixDQUM3QzFiLE1BQU8sR0FDUGdCLFVBQVcsR0FDWDJQLGNBQWUsR0FDZnNqQixnQkFBaUIsR0FDakIrRSxLQUFNLEtBb1FtRyxDQUFFMkMsTUFBTyxNQUV0SCxTQUFTUyxHQUFZdnBCLEVBQU9ra0IsR0FDeEIsSUFBSXNGLEVBQWMvcUIsRUFBTXNsQixTQUFRLFdBQzVCLElBQUkxdkIsRUFBUWkxQixLQUVaLE9BREFkLEdBQWNuMEIsRUFBTzZ2QixFQUFhLENBQUV1Qyw0QkFBNEIsR0FBU3ptQixFQUFNc2IsbUJBQ3hFOWMsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJeFUsRUFBTXkwQixPQUFRLENBQUUzN0IsTUFBT3FSLEVBQU1xSyxTQUFTLEdBQUl4VSxFQUFNbEgsV0FDMUYsQ0FBQysyQixJQUNKLEdBQUlsa0IsRUFBTTdTLE1BQU8sQ0FDYixJQUFJczhCLEVBQVksR0FDaEJ6QyxHQUFrQnlDLEVBQVd6cEIsRUFBTTdTLE1BQU82UyxHQUMxQ3dwQixFQUFZcjhCLE1BQVFxUixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUk0Z0IsR0FBWUQsRUFBWXI4QixPQUVsRixPQUFPcThCLEVBR1gsU0FBU0UsR0FBZ0J2QixHQWVyQixZQWQyQixJQUF2QkEsSUFBaUNBLEdBQXFCLEdBQzFDLFNBQVV2bkIsRUFBV1osRUFBT2lrQixFQUFjcGhCLEVBQUsxWSxFQUFJaVgsR0FDL0QsSUFBSTBTLEVBQWUzcEIsRUFBRzJwQixhQUlsQjBWLEdBSGlCM0QsR0FBZWpsQixHQUM5QjJvQixHQUNBdEMsSUFDMkJqbkIsRUFBTzhULEVBQWMxUyxHQUNsRGduQixFQUFnQkgsR0FBWWpvQixFQUE0QixpQkFBZFksRUFBd0J1bkIsR0FDbEV3QixFQUFlbnJCLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJdWYsR0FBZ0JvQixHQUFjLENBQUUzbUIsSUFBS0EsSUFJekcsT0FISW9oQixJQUNBMEYsRUFBYSxzQkFBd0IxRixHQUVsQ3hsQixFQUFNeFMsY0FBYzJVLEVBQVcrb0IsSUFLOUMsSUFBSUMsR0FBcUIsa0JBS3JCQyxHQUFjLFNBQVVDLEdBQ3hCLE9BQU9BLEVBQUl6ckIsUUFBUXVyQixHQUxBLFNBS3NDMXJCLGVBRzdELFNBQVM2ckIsR0FBV3BvQyxFQUFTd0ksRUFBSTQyQixFQUFXZ0UsR0FDeEMsSUFBSTUzQixFQUFRaEQsRUFBR2dELE1BQU9nNUIsRUFBT2g4QixFQUFHZzhCLEtBR2hDLElBQUssSUFBSW41QixLQUZUVixPQUFPZ0QsT0FBTzNOLEVBQVF3TCxNQUFPQSxFQUFPNDNCLEdBQWNBLEVBQVdqRSxvQkFBb0JDLElBRWpFb0YsRUFDWnhrQyxFQUFRd0wsTUFBTUcsWUFBWU4sRUFBS201QixFQUFLbjVCLElBTzVDLElBQUlnOUIsR0FBc0IsSUFBSTNsQyxJQUFJLENBQzlCLGdCQUNBLGtCQUNBLGVBQ0EsbUJBQ0EsYUFDQSxXQUNBLG9CQUNBLGVBQ0EsY0FDQSxhQUNBLFVBQ0EsVUFDQSxlQUNBLG1CQUNBLG1CQUNBLGVBQ0EsY0FDQSxVQUNBLG9CQUNBLGVBR0osU0FBUzRsQyxHQUFVdG9DLEVBQVN1b0MsRUFBYUMsRUFBWXBGLEdBRWpELElBQUssSUFBSS8zQixLQURUKzhCLEdBQVdwb0MsRUFBU3VvQyxPQUFhM29DLEVBQVd3akMsR0FDNUJtRixFQUFZcEIsTUFDeEJubkMsRUFBUXlvQyxhQUFjSixHQUFvQnBvQyxJQUFJb0wsR0FBMEJBLEVBQW5CNjhCLEdBQVk3OEIsR0FBWWs5QixFQUFZcEIsTUFBTTk3QixJQUl2RyxTQUFTcTlCLEdBQThCcnFCLEdBQ25DLElBQUk3UyxFQUFRNlMsRUFBTTdTLE1BQ2RtOUIsRUFBWSxHQUNoQixJQUFLLElBQUl0OUIsS0FBT0csR0FDUmlaLEVBQWNqWixFQUFNSCxLQUFTODRCLEdBQW9COTRCLEVBQUtnVCxNQUN0RHNxQixFQUFVdDlCLEdBQU9HLEVBQU1ILElBRy9CLE9BQU9zOUIsRUFHWCxTQUFTQyxHQUE0QnZxQixHQUNqQyxJQUFJc3FCLEVBQVlELEdBQThCcnFCLEdBQzlDLElBQUssSUFBSWhULEtBQU9nVCxFQUNSb0csRUFBY3BHLEVBQU1oVCxNQUVwQnM5QixFQUR3QixNQUFSdDlCLEdBQXVCLE1BQVJBLEVBQWMsT0FBU0EsRUFBSXc5QixjQUFnQng5QixHQUNuRGdULEVBQU1oVCxJQUdyQyxPQUFPczlCLEVBR1gsU0FBU0csR0FBb0Jyb0MsR0FDekIsTUFBb0IsaUJBQU5BLEdBQXFDLG1CQUFaQSxFQUFFb08sTUFHN0MsU0FBU2s2QixHQUFVdmdDLEVBQUk2VixFQUFPM0QsRUFBUytuQixHQUNuQyxJQUFJbUcsRUFBOEJwZ0MsRUFBR29nQyw0QkFBNkJJLEVBQW9CeGdDLEVBQUd3Z0Msa0JBQW1CQyxFQUFVemdDLEVBQUd5Z0MsUUFDckh2MkIsRUFBUSxDQUNSeWYsYUFBYytXLEdBQWlCN3FCLEVBQU8zRCxFQUFTK25CLEVBQWlCbUcsR0FDaEVMLFlBQWFTLEtBS2pCLE9BSElDLElBQ0F2MkIsRUFBTW1KLE1BQVEsU0FBVWtXLEdBQVksT0FBT2tYLEVBQVE1cUIsRUFBTzBULEVBQVVyZixLQUVqRUEsRUFFWCxJQUFJeTJCLEdBQXFCLFNBQVVsSCxHQUMvQixPQUFPLFNBQVU1akIsRUFBT29CLEdBQ3BCLElBQUkvRSxFQUFVb0MsRUFBTStDLFdBQVdGLEdBQzNCOGlCLEVBQWtCM2xCLEVBQU0rQyxXQUFXRSxHQUN2QyxPQUFPTixFQUNEc3BCLEdBQVU5RyxFQUFRNWpCLEVBQU8zRCxFQUFTK25CLEdBQ2xDcGdCLEdBQVksV0FDVixPQUFPMG1CLEdBQVU5RyxFQUFRNWpCLEVBQU8zRCxFQUFTK25CLFFBSXpELFNBQVN5RyxHQUFpQjdxQixFQUFPM0QsRUFBUytuQixFQUFpQjJHLEdBQ3ZELElBQUlocEMsRUFBUyxHQUNUeWlDLEdBQXdILEtBQS9GSixNQUFBQSxPQUF5RCxFQUFTQSxFQUFnQmpvQixTQUMzRzdOLEVBQWV5OEIsRUFBbUIvcUIsR0FDdEMsSUFBSyxJQUFJaFQsS0FBT3NCLEVBQ1p2TSxFQUFPaUwsR0FBT3FwQixHQUFtQi9uQixFQUFhdEIsSUFFbEQsSUFBSW1QLEVBQVU2RCxFQUFNN0QsUUFBU2pRLEVBQVU4VCxFQUFNOVQsUUFDekM4K0IsRUFBd0J6bkIsRUFBMkJ2RCxHQUNuRGlyQixFQUFnQnJuQixFQUFtQjVELEdBQ25DM0QsR0FDQTR1QixJQUNDRCxJQUNpQixJQUFsQmhyQixFQUFNNmpCLFVBQ04xbkIsTUFBQUEsSUFBb0RBLEVBQVVFLEVBQVFGLFNBQ3RFalEsTUFBQUEsSUFBb0RBLEVBQVVtUSxFQUFRblEsVUFFMUUsSUFBSWcvQixFQUE0QjFHLElBQXFDLElBQVpyb0IsRUFDckRndkIsRUFBZUQsRUFBNEJoL0IsRUFBVWlRLEVBOEJ6RCxPQTdCSWd2QixHQUN3QixrQkFBakJBLElBQ05WLEdBQW9CVSxLQUNWdmxDLE1BQU1DLFFBQVFzbEMsR0FBZ0JBLEVBQWUsQ0FBQ0EsSUFDcERwbkMsU0FBUSxTQUFVb0QsR0FDbkIsSUFBSWlrQyxFQUFXcG9CLEVBQXdCaEQsRUFBTzdZLEdBQzlDLEdBQUtpa0MsRUFBTCxDQUVBLElBQUlDLEVBQWdCRCxFQUFTQyxjQUFlRCxFQUFTbHVCLFdBQVksSUFBSTdOLEVBQVNtUCxFQUFNbk0sT0FBTys0QixFQUFVLENBQUMsZ0JBQWlCLGVBQ3ZILElBQUssSUFBSXArQixLQUFPcUMsRUFBUSxDQUNwQixJQUFJaThCLEVBQWNqOEIsRUFBT3JDLEdBQ3JCcEgsTUFBTUMsUUFBUXlsQyxLQVFkQSxFQUFjQSxFQUhGSixFQUNOSSxFQUFZbGpDLE9BQVMsRUFDckIsSUFHVSxPQUFoQmtqQyxJQUNBdnBDLEVBQU9pTCxHQUFPcytCLEdBR3RCLElBQUssSUFBSXQrQixLQUFPcStCLEVBQ1p0cEMsRUFBT2lMLEdBQU9xK0IsRUFBY3IrQixPQUdqQ2pMLEVBR1gsSUE0Q1d3cEMsR0E1Q1BDLEdBQWtCLENBQ2xCakksZUFBZ0J1SCxHQUFtQixDQUMvQlAsNEJBQTZCQSxHQUM3Qkksa0JBQW1CckIsR0FDbkJzQixRQUFTLFNBQVU1cUIsRUFBTzBULEVBQVV2cEIsR0FDaEMsSUFBSSsvQixFQUFjLy9CLEVBQUcrL0IsWUFBYXBXLEVBQWUzcEIsRUFBRzJwQixhQUNwRCxJQUNJb1csRUFBWW5CLFdBRUosbUJBREdyVixFQUFTK1gsUUFFVi9YLEVBQVMrWCxVQUNUL1gsRUFBU2dZLHdCQUV2QixNQUFPNytCLEdBRUhxOUIsRUFBWW5CLFdBQWEsQ0FDckIvbEMsRUFBRyxFQUNIQyxFQUFHLEVBQ0g0bUIsTUFBTyxFQUNQRSxPQUFRLEdBR2hCeWUsR0FBYzBCLEVBQWFwVyxFQUFjLENBQUUyUyw0QkFBNEIsR0FBU3ptQixFQUFNc2IsbUJBQ3RGMk8sR0FBVXZXLEVBQVV3VyxPQUs1QnlCLEdBQW1CLENBQ25CcEksZUFBZ0J1SCxHQUFtQixDQUMvQlAsNEJBQTZCRixHQUM3Qk0sa0JBaGVvQixXQUFjLE1BQU8sQ0FDN0N4OUIsTUFBTyxHQUNQZ0IsVUFBVyxHQUNYMlAsY0FBZSxHQUNmc2pCLGdCQUFpQixHQUNqQitFLEtBQU0sUUErZFYsU0FBU3lGLEdBQXNCaHJCLEVBQVd6VyxFQUFJaTVCLEVBQW1CQyxFQUFxQjFpQixHQUNsRixJQUFJbFMsRUFBS3RFLEVBQUdnK0IsbUJBQW9CQSxPQUE0QixJQUFQMTVCLEdBQXdCQSxFQUN6RW85QixFQUFhaEcsR0FBZWpsQixHQUMxQjRxQixHQUNBRyxHQUNOLE9BQU9udEIsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJZ2pCLEdBQWEsQ0FBRXpJLGtCQUFtQkEsRUFBbUJFLFVBQVdvRyxHQUFnQnZCLEdBQXFCOUUsb0JBQXFCQSxFQUFxQjFpQiwwQkFBMkJBLEVBQTJCQyxVQUFXQSxJQWM3UCxTQUFTa3JCLEdBQVl6OEIsRUFBUTA4QixFQUFXMW5CLEVBQVMxVyxHQUc3QyxZQUZnQixJQUFaQSxJQUFzQkEsRUFBVSxDQUFFcStCLFNBQVMsSUFDL0MzOEIsRUFBT2tNLGlCQUFpQnd3QixFQUFXMW5CLEVBQVMxVyxHQUNyQyxXQUFjLE9BQU8wQixFQUFPbU0sb0JBQW9CdXdCLEVBQVcxbkIsSUF1QnRFLFNBQVM0bkIsR0FBWXBwQixFQUFLa3BCLEVBQVcxbkIsRUFBUzFXLEdBQzFDOFEsRUFBTXFELFdBQVUsV0FDWixJQUFJbmdCLEVBQVVraEIsRUFBSXZSLFFBQ2xCLEdBQUkrUyxHQUFXMWlCLEVBQ1gsT0FBT21xQyxHQUFZbnFDLEVBQVNvcUMsRUFBVzFuQixFQUFTMVcsS0FFckQsQ0FBQ2tWLEVBQUtrcEIsRUFBVzFuQixFQUFTMVcsSUF1QmpDLFNBQVN1K0IsR0FBYWh5QixHQUVsQixNQUE0QixvQkFBakJpeUIsY0FBZ0NqeUIsYUFBaUJpeUIsZUFDeEIsVUFBdEJqeUIsRUFBTU8sYUFFYlAsYUFBaUJreUIsV0FFNUIsU0FBU0MsR0FBYW55QixHQUVsQixRQURtQkEsRUFBTW95QixRQTFFN0IvdEIsRUFBUWd0QixtQkFBZ0IsR0FDYkEsR0FRUmh0QixFQUFRZ3RCLGdCQUFrQmh0QixFQUFRZ3RCLGNBQWdCLEtBUDFCLFFBQUksVUFDM0JBLEdBQXFCLE1BQUksYUFDekJBLEdBQW1CLElBQUksV0FDdkJBLEdBQW9CLEtBQUksWUFDeEJBLEdBQXFCLE1BQUksYUFDekJBLEdBQXNCLE9BQUksY0FDMUJBLEdBQW9CLEtBQUksT0FvRjVCLElBQUlnQixHQUFtQixDQUFFQyxNQUFPLEVBQUdDLE1BQU8sR0FDMUMsU0FBU0MsR0FBZTcvQixFQUFHOC9CLFFBQ0wsSUFBZEEsSUFBd0JBLEVBQVksUUFDeEMsSUFDSXJjLEVBRGV6akIsRUFBRXkvQixRQUFRLElBQU16L0IsRUFBRSsvQixlQUFlLElBQ3hCTCxHQUM1QixNQUFPLENBQ0h2cEMsRUFBR3N0QixFQUFNcWMsRUFBWSxLQUNyQjFwQyxFQUFHcXRCLEVBQU1xYyxFQUFZLE1BRzdCLFNBQVNFLEdBQWV2YyxFQUFPcWMsR0FFM0IsWUFEa0IsSUFBZEEsSUFBd0JBLEVBQVksUUFDakMsQ0FDSDNwQyxFQUFHc3RCLEVBQU1xYyxFQUFZLEtBQ3JCMXBDLEVBQUdxdEIsRUFBTXFjLEVBQVksTUFHN0IsU0FBU0csR0FBaUI1eUIsRUFBT3l5QixHQUU3QixZQURrQixJQUFkQSxJQUF3QkEsRUFBWSxRQUNqQyxDQUNIcmMsTUFBTytiLEdBQWFueUIsR0FDZHd5QixHQUFleHlCLEVBQU95eUIsR0FDdEJFLEdBQWUzeUIsRUFBT3l5QixJQUdwQyxJQUFJSSxHQUFjLFNBQVUxb0IsRUFBUzJvQixRQUNFLElBQS9CQSxJQUF5Q0EsR0FBNkIsR0FDMUUsSUFyQzBCQyxFQXFDdEJDLEVBQVcsU0FBVWh6QixHQUNyQixPQUFPbUssRUFBUW5LLEVBQU80eUIsR0FBaUI1eUIsS0FFM0MsT0FBTzh5QixHQXhDbUJDLEVBeUNDQyxFQXhDcEIsU0FBVWh6QixHQUNiLElBQUlneUIsRUFBZWh5QixhQUFpQmt5QixhQUNaRixHQUNuQkEsR0FBaUMsSUFBakJoeUIsRUFBTWl6QixTQUV2QkYsRUFBYS95QixLQW9DZmd6QixHQWNORSxHQUFrQixDQUNsQkMsWUFBYSxZQUNiQyxZQUFhLFlBQ2JDLFVBQVcsVUFDWEMsY0FBZSxjQUNmQyxZQUFhLFlBQ2JDLFdBQVksV0FDWkMsYUFBYyxhQUNkQyxhQUFjLGNBRWRDLEdBQWtCLENBQ2xCUixZQUFhLGFBQ2JDLFlBQWEsWUFDYkMsVUFBVyxXQUNYQyxjQUFlLGVBRW5CLFNBQVNNLEdBQW9CaHFDLEdBQ3pCLE9BMUJPNmQsR0FBc0MsT0FBekI5VCxPQUFPa2dDLGNBMkJoQmpxQyxFQXhCSjZkLEdBQXFDLE9BQXhCOVQsT0FBT21nQyxhQTJCaEJILEdBQWdCL3BDLEdBeEJwQjZkLEdBQW9DLE9BQXZCOVQsT0FBT29nQyxZQTJCaEJiLEdBQWdCdHBDLEdBRXBCQSxFQUVYLFNBQVNvcUMsR0FBZ0I3K0IsRUFBUTA4QixFQUFXMW5CLEVBQVMxVyxHQUNqRCxPQUFPbStCLEdBQVl6OEIsRUFBUXkrQixHQUFvQi9CLEdBQVlnQixHQUFZMW9CLEVBQXVCLGdCQUFkMG5CLEdBQThCcCtCLEdBRWxILFNBQVN3Z0MsR0FBZ0J0ckIsRUFBS2twQixFQUFXMW5CLEVBQVMxVyxHQUM5QyxPQUFPcytCLEdBQVlwcEIsRUFBS2lyQixHQUFvQi9CLEdBQVkxbkIsR0FBVzBvQixHQUFZMW9CLEVBQXVCLGdCQUFkMG5CLEdBQThCcCtCLEdBRzFILFNBQVN5Z0MsR0FBV3RxQyxHQUNoQixJQUFJdXFDLEVBQU8sS0FDWCxPQUFPLFdBSUgsT0FBYSxPQUFUQSxJQUNBQSxFQUFPdnFDLEVBSkksV0FDWHVxQyxFQUFPLFFBU25CLElBQUlDLEdBQXVCRixHQUFXLGtCQUNsQ0csR0FBcUJILEdBQVcsZ0JBQ3BDLFNBQVNJLEdBQWNudUIsR0FDbkIsSUFBSWd1QixHQUFPLEVBQ1gsR0FBYSxNQUFUaHVCLEVBQ0FndUIsRUFBT0UsVUFFTixHQUFhLE1BQVRsdUIsRUFDTGd1QixFQUFPQyxTQUVOLENBQ0QsSUFBSUcsRUFBbUJILEtBQ25CSSxFQUFpQkgsS0FDakJFLEdBQW9CQyxFQUNwQkwsRUFBTyxXQUNISSxJQUNBQyxNQUtBRCxHQUNBQSxJQUNBQyxHQUNBQSxLQUdaLE9BQU9MLEVBRVgsU0FBU00sS0FHTCxJQUFJQyxFQUFrQkosSUFBYyxHQUNwQyxPQUFLSSxJQUVMQSxLQUNPLEdBR1gsU0FBU0MsR0FBaUJwdEIsRUFBZTlHLEVBQVU0YSxHQUMvQyxPQUFPLFNBQVVyYixFQUFPNDBCLEdBQ3BCLElBQUkza0MsRUFDQytoQyxHQUFhaHlCLEtBQVV5MEIsT0FLWSxRQUF2Q3hrQyxFQUFLc1gsRUFBY2dqQixzQkFBbUMsSUFBUHQ2QixHQUF5QkEsRUFBRzRTLFVBQVV3QixFQUFRZ3RCLGNBQWN3RCxNQUFPcDBCLEdBQ25INGEsTUFBQUEsR0FBb0RBLEVBQVNyYixFQUFPNDBCLEtBb0I1RSxJQUFJRSxHQUFnQixTQUFVaHpCLEVBQVFvYSxHQUNsQyxRQUFLQSxJQUdJcGEsSUFBV29hLEdBSVQ0WSxHQUFjaHpCLEVBQVFvYSxFQUFNNlksaUJBSTNDLFNBQVNDLEdBQWlCM1osR0FDdEIsT0FBTzlXLEVBQU1xRCxXQUFVLFdBQWMsT0FBTyxXQUFjLE9BQU95VCxPQUFrQixJQStEdkYsSUFBSTRaLEdBQVMsSUFBSTlxQyxJQWViK3FDLEdBQW9CLElBQUkzdEMsUUFNeEI0dEMsR0FBWSxJQUFJNXRDLFFBQ2hCNnRDLEdBQXVCLFNBQVU5MkIsR0FDakMsSUFBSXJPLEVBQzJDLFFBQTlDQSxFQUFLaWxDLEdBQWtCbnRDLElBQUl1VyxFQUFNbkosZUFBNEIsSUFBUGxGLEdBQXlCQSxFQUFHcU8sSUFFbkYrMkIsR0FBMkIsU0FBVWgzQixHQUNyQ0EsRUFBUXhVLFFBQVF1ckMsS0E4Q3BCLElBQUlFLEdBQWlCLENBQ2pCdnZCLEtBQU0sRUFDTjVQLElBQUssR0FFVCxTQUFTby9CLEdBQXdCQyxFQUFlcjdCLEVBQU9vTixFQUFldFgsR0FDbEUsSUFBSTROLEVBQU81TixFQUFHNE4sS0FBTUUsRUFBYTlOLEVBQUc2TixPQUFRdkosRUFBS3RFLEVBQUcrTixPQUFRQSxPQUFnQixJQUFQekosRUFBZ0IsT0FBU0EsRUFBSXVNLEVBQU83USxFQUFHNlEsS0FDNUd5RCxFQUFNcUQsV0FBVSxXQUNaLEdBQUs0dEIsRUFBTCxDQUVBLElBQUkvaEMsRUFBVSxDQUNWb0ssS0FBTUEsTUFBQUEsT0FBbUMsRUFBU0EsRUFBS3pHLFFBQ3ZEMkcsV0FBWUEsRUFDWmEsVUFBNkIsaUJBQVhaLEVBQXNCQSxFQUFTczNCLEdBQWV0M0IsSUFnQ3BFLE9BcEVSLFNBQTZCdlcsRUFBU2dNLEVBQVM0bkIsR0FDM0MsSUFBSW9hLEVBckJSLFNBQWtDeGxDLEdBQzlCLElBQUk0TixFQUFPNU4sRUFBRzROLEtBQU1wSyxFQUFVNlEsRUFBTW5NLE9BQU9sSSxFQUFJLENBQUMsU0FDNUN5bEMsRUFBYTczQixHQUFRL0wsU0FJcEJxakMsR0FBVXp0QyxJQUFJZ3VDLElBQ2ZQLEdBQVV4dEMsSUFBSSt0QyxFQUFZLElBRTlCLElBQUlDLEVBQWdCUixHQUFVcHRDLElBQUkydEMsR0FDOUI1aUMsRUFBTThpQyxLQUFLQyxVQUFVcGlDLEdBUXpCLE9BSEtraUMsRUFBYzdpQyxLQUNmNmlDLEVBQWM3aUMsR0FBTyxJQUFJbUwscUJBQXFCbzNCLEdBQTBCL3dCLEVBQU1xSyxTQUFTLENBQUU5USxLQUFNQSxHQUFRcEssS0FFcEdraUMsRUFBYzdpQyxHQUdXZ2pDLENBQXlCcmlDLEdBR3pELE9BRkF5aEMsR0FBa0J2dEMsSUFBSUYsRUFBUzR6QixHQUMvQm9hLEVBQTBCNTJCLFFBQVFwWCxHQUMzQixXQUNIeXRDLEdBQWtCdjJCLE9BQU9sWCxHQUN6Qmd1QyxFQUEwQi8yQixVQUFValgsSUE4RDdCc3VDLENBQW9CeHVCLEVBQWN3WCxjQUFldHJCLEdBOUI3QixTQUFVNkssR0FDakMsSUFBSXJPLEVBQ0F1TyxFQUFpQkYsRUFBTUUsZUFJM0IsR0FBSXJFLEVBQU02N0IsV0FBYXgzQixJQUV2QnJFLEVBQU02N0IsU0FBV3gzQixHQUtic0MsR0FBU3RDLElBQWtCckUsRUFBTTg3QixnQkFBckMsQ0FHU3ozQixJQUNMckUsRUFBTTg3QixnQkFBaUIsR0FFYSxRQUF2Q2htQyxFQUFLc1gsRUFBY2dqQixzQkFBbUMsSUFBUHQ2QixHQUF5QkEsRUFBRzRTLFVBQVV3QixFQUFRZ3RCLGNBQWM2RSxPQUFRMTNCLEdBS3BILElBQUlzSCxFQUFReUIsRUFBY3lCLFdBQ3RCcVMsRUFBVzdjLEVBQ1RzSCxFQUFNcXdCLGdCQUNOcndCLEVBQU1zd0IsZ0JBQ1ovYSxNQUFBQSxHQUFvREEsRUFBUy9jLFVBR2xFLENBQUNrM0IsRUFBZTMzQixFQUFNRSxFQUFZQyxJQU96QyxTQUFTcTRCLEdBQStCYixFQUFlcjdCLEVBQU9vTixFQUFldFgsR0FDekUsSUFBSXNFLEVBQUt0RSxFQUFHcW1DLFNBQVVBLE9BQWtCLElBQVAvaEMsR0FBdUJBLEVBQ3hEZ1EsRUFBTXFELFdBQVUsV0E5SHBCLElBQTZCMnVCLEVBK0hoQmYsR0FBa0JjLElBRVgsZUFBUjd3QixJQWpJaUI4d0IsRUFrSUQsbUdBaklQdEIsR0FBT3Z0QyxJQUFJNnVDLEtBRTVCQyxRQUFRQyxLQUFLRixHQUdidEIsR0FBT3hnQyxJQUFJOGhDLEtBc0lQOWxDLHVCQUFzQixXQUNsQixJQUFJUixFQUNKa0ssRUFBTTg3QixnQkFBaUIsRUFDdkIsSUFBSUUsRUFBa0I1dUIsRUFBY3lCLFdBQVdtdEIsZ0JBQy9DQSxNQUFBQSxHQUFrRUEsRUFBZ0IsTUFDMUMsUUFBdkNsbUMsRUFBS3NYLEVBQWNnakIsc0JBQW1DLElBQVB0NkIsR0FBeUJBLEVBQUc0UyxVQUFVd0IsRUFBUWd0QixjQUFjNkUsUUFBUSxTQUV6SCxDQUFDVixJQUdSLElBQUlrQixHQUEwQixTQUFVQyxHQUFRLE9BQU8sU0FBVTd3QixHQUU3RCxPQURBNndCLEVBQUs3d0IsR0FDRSxPQUdQOHdCLEdBQW9CLENBQ3BCajVCLE9BQVErNEIsSUFsR1osU0FBcUJ6bUMsR0FDakIsSUFBSXNYLEVBQWdCdFgsRUFBR3NYLGNBQWVzdkIsRUFBYzVtQyxFQUFHNG1DLFlBQWFWLEVBQWtCbG1DLEVBQUdrbUMsZ0JBQWlCQyxFQUFrQm5tQyxFQUFHbW1DLGdCQUFpQjdoQyxFQUFLdEUsRUFBRzZtQyxTQUFVQSxPQUFrQixJQUFQdmlDLEVBQWdCLEdBQUtBLEVBQzlMNEYsRUFBUW9LLEVBQU15RixPQUFPLENBQ3JCaXNCLGdCQUFnQixFQUNoQkQsVUFBVSxJQUVWUixFQUFnQmpxQyxRQUFRc3JDLEdBQWVWLEdBQW1CQyxHQUMxRFUsRUFBU2gyQixNQUFRM0csRUFBTS9DLFFBQVE2K0IsaUJBQy9CVCxHQUFnQixJQUM4QixvQkFBekJ2M0IscUJBQ25CbzRCLEdBQ0FkLElBQ01DLEVBQWVyN0IsRUFBTS9DLFFBQVNtUSxFQUFldXZCLE1BdUZ6RHp3QixJQUFLcXdCLElBdE5ULFNBQXVCem1DLEdBQ25CLElBQUk4bUMsRUFBUTltQyxFQUFHOG1DLE1BQU9DLEVBQWEvbUMsRUFBRyttQyxXQUFZQyxFQUFjaG5DLEVBQUdnbkMsWUFBYXp0QixFQUFXdlosRUFBR3VaLFNBQVVqQyxFQUFnQnRYLEVBQUdzWCxjQUN2SDJ2QixFQUFvQkgsR0FBU0MsR0FBY0MsR0FBZXp0QixFQUMxRDJ0QixFQUFhNXlCLEVBQU15RixRQUFPLEdBQzFCb3RCLEVBQTRCN3lCLEVBQU15RixPQUFPLE1BSXpDcXRCLEVBQWUsQ0FDZnZGLFVBQVdrRixHQUFjRCxHQUFTRSxHQUFleDFCLElBRXJELFNBQVM2MUIsSUFDTCxJQUFJcm5DLEVBQ3lDLFFBQTVDQSxFQUFLbW5DLEVBQTBCaGdDLGVBQTRCLElBQVBuSCxHQUF5QkEsRUFBR00sS0FBSzZtQyxHQUN0RkEsRUFBMEJoZ0MsUUFBVSxLQUV4QyxTQUFTbWdDLElBQ0wsSUFBSXRuQyxFQUlKLE9BSEFxbkMsSUFDQUgsRUFBVy8vQixTQUFVLEVBQ21CLFFBQXZDbkgsRUFBS3NYLEVBQWNnakIsc0JBQW1DLElBQVB0NkIsR0FBeUJBLEVBQUc0UyxVQUFVd0IsRUFBUWd0QixjQUFjbUcsS0FBSyxJQUN6Ry9DLEtBRVosU0FBU2p6QixFQUFZeEIsRUFBTzQwQixHQUNuQjJDLE1BTUp6QyxHQUFjdnRCLEVBQWN3WCxjQUFlL2UsRUFBTTdLLFFBRTVDNGhDLE1BQUFBLEdBQThDQSxFQUFNLzJCLEVBQU80MEIsR0FEM0RxQyxNQUFBQSxHQUEwREEsRUFBWWozQixFQUFPNDBCLElBR3ZGLFNBQVM2QyxFQUFnQnozQixFQUFPNDBCLEdBQ3ZCMkMsTUFFTE4sTUFBQUEsR0FBMERBLEVBQVlqM0IsRUFBTzQwQixJQUVqRixTQUFTbnpCLEVBQWN6QixFQUFPNDBCLEdBQzFCLElBQUkza0MsRUFDSnFuQyxJQUNJSCxFQUFXLy9CLFVBRWYrL0IsRUFBVy8vQixTQUFVLEVBQ3JCZ2dDLEVBQTBCaGdDLFFBQVVzTixFQUFVZ3pCLEtBQUsxRCxHQUFnQnJnQyxPQUFRLFlBQWE2TixFQUFhNjFCLEdBQWVyRCxHQUFnQnJnQyxPQUFRLGdCQUFpQjhqQyxFQUFpQkosSUFJdEksUUFBdkNwbkMsRUFBS3NYLEVBQWNnakIsc0JBQW1DLElBQVB0NkIsR0FBeUJBLEVBQUc0UyxVQUFVd0IsRUFBUWd0QixjQUFjbUcsS0FBSyxHQUNqSFIsTUFBQUEsR0FBd0RBLEVBQVdoM0IsRUFBTzQwQixJQUU5RVgsR0FBZ0Ixc0IsRUFBZSxjQUFlMnZCLEVBQW9CejFCLE9BQWdCcGEsRUFBV2d3QyxHQUM3RnJDLEdBQWlCc0MsTUFrS2pCbHhCLE1BQU9zd0IsSUFyYlgsU0FBeUJ6bUMsR0FDckIsSUFBSXdaLEVBQWF4WixFQUFHd1osV0FBWWxDLEVBQWdCdFgsRUFBR3NYLGNBU25Ed3FCLEdBQVl4cUIsRUFBZSxRQUFTa0MsRUFSdEIsV0FDVixJQUFJeFosRUFDb0MsUUFBdkNBLEVBQUtzWCxFQUFjZ2pCLHNCQUFtQyxJQUFQdDZCLEdBQXlCQSxFQUFHNFMsVUFBVXdCLEVBQVFndEIsY0FBY3NHLE9BQU8sU0FNNUR0d0MsR0FDM0QwcUMsR0FBWXhxQixFQUFlLE9BQVFrQyxFQUx0QixXQUNULElBQUl4WixFQUNvQyxRQUF2Q0EsRUFBS3NYLEVBQWNnakIsc0JBQW1DLElBQVB0NkIsR0FBeUJBLEVBQUc0UyxVQUFVd0IsRUFBUWd0QixjQUFjc0csT0FBTyxTQUc5RHR3QyxNQTJhekQ2WixNQUFPdzFCLElBN1BYLFNBQXlCem1DLEdBQ3JCLElBQUkybkMsRUFBZTNuQyxFQUFHMm5DLGFBQWNDLEVBQWE1bkMsRUFBRzRuQyxXQUFZdnVCLEVBQWFyWixFQUFHcVosV0FBWS9CLEVBQWdCdFgsRUFBR3NYLGNBQy9HMHNCLEdBQWdCMXNCLEVBQWUsZUFBZ0Jxd0IsR0FBZ0J0dUIsRUFDekRxckIsR0FBaUJwdEIsR0FBZSxFQUFNcXdCLFFBQ3RDdndDLEVBQVcsQ0FBRXlxQyxTQUFVOEYsSUFDN0IzRCxHQUFnQjFzQixFQUFlLGVBQWdCc3dCLEdBQWN2dUIsRUFDdkRxckIsR0FBaUJwdEIsR0FBZSxFQUFPc3dCLFFBQ3ZDeHdDLEVBQVcsQ0FBRXlxQyxTQUFVK0YsUUF5UDdCQyxHQUFVLEVBQ1ZDLEdBQWMsV0FBYyxPQUFPRCxNQUNuQ0UsR0FBUSxXQUFjLE9BQU9sdUIsRUFBWWl1QixLQWlDN0MsU0FBU0UsS0FDTCxJQUFJOTFCLEVBQVVvQyxFQUFNK0MsV0FBV0UsR0FDL0IsR0FBZ0IsT0FBWnJGLEVBQ0EsTUFBTyxFQUFDLEVBQU0sTUFDbEIsSUFBSWtYLEVBQVlsWCxFQUFRa1gsVUFBV2tCLEVBQWlCcFksRUFBUW9ZLGVBQWdCMmQsRUFBVy8xQixFQUFRKzFCLFNBSTNGbGIsRUFBS2diLEtBR1QsT0FGQXp6QixFQUFNcUQsV0FBVSxXQUFjLE9BQU9zd0IsRUFBU2xiLEtBQVEsS0FFOUMzRCxHQUFha0IsRUFBaUIsRUFBQyxFQURwQixXQUFjLE9BQU9BLE1BQUFBLE9BQXVELEVBQVNBLEVBQWV5QyxLQUN6RCxFQUFDLEdBNkJuRSxTQUFTN1osR0FBZTlMLEVBQU1DLEdBQzFCLElBQUs1TCxNQUFNQyxRQUFRMkwsR0FDZixPQUFPLEVBQ1gsSUFBSTRMLEVBQWE1TCxFQUFLcEosT0FDdEIsR0FBSWdWLElBQWU3TCxFQUFLbkosT0FDcEIsT0FBTyxFQUNYLElBQUssSUFBSXpCLEVBQUksRUFBR0EsRUFBSXlXLEVBQVl6VyxJQUM1QixHQUFJNkssRUFBSzdLLEtBQU80SyxFQUFLNUssR0FDakIsT0FBTyxFQUVmLE9BQU8sRUFNWCxJQVVJMHJDLEdBQWdCLFNBQVVqd0MsR0FBSyxPQUFPLFNBQVU0bEIsR0FBUSxPQUFPQSxFQUFLSCxLQUFLemxCLEtBYXpFa3dDLEdBQXNCLENBQUN6ekIsRUFBZ0JpSyxPQUFRakssRUFBZ0JxSyxHQUFJckssRUFBZ0JxVCxRQUFTclQsRUFBZ0JrTSxRQUFTbE0sRUFBZ0IwekIsR0FBSTF6QixFQUFnQjJ6QixHQVJsSixDQUNQM3FCLEtBQU0sU0FBVXpsQixHQUFLLE1BQWEsU0FBTkEsR0FDNUJxd0MsTUFBTyxTQUFVcndDLEdBQUssT0FBT0EsS0FVN0Jzd0MsR0FBeUIsU0FBVXR3QyxHQUNuQyxPQUFPa3dDLEdBQW9CSyxLQUFLTixHQUFjandDLEtBTTlDd3dDLEdBQWFwMEIsRUFBTTJPLGNBQWMzTyxFQUFNMk8sY0FBYyxHQUFJM08sRUFBTWdFLE9BQU84dkIsS0FBc0IsR0FBUSxDQUFDenpCLEVBQWdCNkosTUFBTzdKLEVBQWdCK0ksVUFBVSxHQUl0SmlyQixHQUFnQixTQUFVendDLEdBQUssT0FBT3d3QyxHQUFXRCxLQUFLTixHQUFjandDLEtBTXhFLFNBQVMwd0MsR0FBZXJ4QixFQUFlelUsRUFBS3pILEdBQ3BDa2MsRUFBY3N4QixTQUFTL2xDLEdBQ3ZCeVUsRUFBY3V4QixTQUFTaG1DLEdBQUtuTCxJQUFJMEQsR0FHaENrYyxFQUFjd3hCLFNBQVNqbUMsRUFBS3FCLEVBQVk5SSxJQUdoRCxTQUFTMnRDLEdBQVV6eEIsRUFBZXRhLEdBQzlCLElBQUlpa0MsRUFBV255QixFQUFld0ksRUFBZXRhLEdBQ3pDZ0QsRUFBS2loQyxFQUFXM3BCLEVBQWMweEIscUJBQXFCL0gsR0FBVSxHQUFTLEdBQUkzOEIsRUFBS3RFLEVBQUdraEMsY0FBZUEsT0FBdUIsSUFBUDU4QixFQUFnQixHQUFLQSxFQUFJdEUsRUFBRytTLFdBQVksSUFBSTdOLEVBQVNtUCxFQUFNbk0sT0FBT2xJLEVBQUksQ0FBQyxnQkFBaUIsZUFFN00sSUFBSyxJQUFJNkMsS0FEVHFDLEVBQVNtUCxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUl4WixHQUFTZzhCLEdBR2hEeUgsR0FBZXJ4QixFQUFlelUsRUFEbEI4ZixHQUE2QnpkLEVBQU9yQyxLQUl4RCxTQUFTb21DLEdBQVkzeEIsRUFBZTR4QixHQUNYNzBCLEVBQU0yTyxjQUFjLEdBQUkzTyxFQUFNZ0UsT0FBTzZ3QixJQUFnQixHQUFPam9DLFVBQ2xFckgsU0FBUSxTQUFVaUosR0FDN0IsSUFBSTdDLEVBQ0E4UyxFQUFVd0UsRUFBYzZ4QixXQUFXdG1DLEdBQ3ZDaVEsR0FBV2kyQixHQUFVenhCLEVBQWV4RSxHQUNLLFFBQXhDOVMsRUFBS3NYLEVBQWM4eEIsdUJBQW9DLElBQVBwcEMsR0FBeUJBLEVBQUdwRyxTQUFRLFNBQVVxeUIsR0FDM0ZnZCxHQUFZaGQsRUFBT2lkLFNBZS9CLFNBQVNHLEdBQXdCL3hCLEVBQWVwUyxFQUFRZ0csR0FDcEQsSUFBSWxMLEVBQUlzRSxFQUFJNmxCLEVBQ1JDLEVBQ0FrZixFQUFlbm5DLE9BQU91UCxLQUFLeE0sR0FBUWEsUUFBTyxTQUFVbEQsR0FBTyxPQUFReVUsRUFBY3N4QixTQUFTL2xDLE1BQzFGMG1DLEVBQWVELEVBQWFyckMsT0FDaEMsR0FBS3NyQyxFQUVMLElBQUssSUFBSS9zQyxFQUFJLEVBQUdBLEVBQUkrc0MsRUFBYy9zQyxJQUFLLENBQ25DLElBQUlxRyxFQUFNeW1DLEVBQWE5c0MsR0FDbkJndEMsRUFBY3RrQyxFQUFPckMsR0FDckJ6SCxFQUFRLEtBS1JLLE1BQU1DLFFBQVE4dEMsS0FDZHB1QyxFQUFRb3VDLEVBQVksSUFPVixPQUFWcHVDLElBQ0FBLEVBQW9HLFFBQTNGa0osRUFBNEIsUUFBdEJ0RSxFQUFLa0wsRUFBT3JJLFVBQXlCLElBQVA3QyxFQUFnQkEsRUFBS3NYLEVBQWNteUIsVUFBVTVtQyxVQUF5QixJQUFQeUIsRUFBZ0JBLEVBQUtZLEVBQU9yQyxJQU14SXpILE1BQUFBLElBRWlCLGlCQUFWQSxJQW5IMkIsaUJBQWlCc2lCLEtBb0hoQ3RpQixJQS9HZSxhQUFhc2lCLEtBK0dBdGlCLElBRS9DQSxFQUFReUMsV0FBV3pDLElBRWJzdEMsR0FBY3R0QyxJQUFVc1osRUFBZ0IrSSxRQUFRQyxLQUFLOHJCLEtBQzNEcHVDLEVBQVFvbkIsR0FBa0IzZixFQUFLMm1DLElBRW5DbHlCLEVBQWN3eEIsU0FBU2ptQyxFQUFLcUIsRUFBWTlJLElBQ1YsUUFBN0IrdUIsR0FBTUMsRUFBS2xmLEdBQVFySSxVQUF5QixJQUFQc25CLElBQXNCQyxFQUFHdm5CLEdBQU96SCxHQUN0RWtjLEVBQWNveUIsY0FBYzdtQyxFQUFLekgsS0FHekMsU0FBU3V1QyxHQUF3QjltQyxFQUFLa1EsR0FDbEMsR0FBS0EsRUFHTCxPQURzQkEsRUFBV2xRLElBQVFrUSxFQUFvQixTQUFLQSxHQUMzQ3ROLEtBRTNCLFNBQVNtRyxHQUFVMUcsRUFBUTZOLEVBQVl1RSxHQUNuQyxJQUFJdFgsRUFBSXNFLEVBQ0o0RyxFQUFTLEdBQ2IsSUFBSyxJQUFJckksS0FBT3FDLEVBQ1pnRyxFQUFPckksR0FDaUQsUUFBbkQ3QyxFQUFLMnBDLEdBQXdCOW1DLEVBQUtrUSxVQUFnQyxJQUFQL1MsRUFBZ0JBLEVBQTRDLFFBQXRDc0UsRUFBS2dULEVBQWN1eEIsU0FBU2htQyxVQUF5QixJQUFQeUIsT0FBZ0IsRUFBU0EsRUFBR3hNLE1BRXBLLE9BQU9vVCxFQUdYLFNBQVMwK0IsR0FBcUJ0eUIsRUFBZXRhLEVBQVl3RyxHQUdyRCxJQUFJM00sRUFDSixRQUhnQixJQUFaMk0sSUFBc0JBLEVBQVUsSUFDcEM4VCxFQUFjdXlCLHFCQUFxQjdzQyxHQUUvQnZCLE1BQU1DLFFBQVFzQixHQUFhLENBQzNCLElBQUk4SSxFQUFhOUksRUFBVzZDLEtBQUksU0FBVWlULEdBQ3RDLE9BQU9nM0IsR0FBZXh5QixFQUFleEUsRUFBU3RQLE1BRWxEM00sRUFBWW1JLFFBQVFrSCxJQUFJSixRQUV2QixHQUEwQixpQkFBZjlJLEVBQ1puRyxFQUFZaXpDLEdBQWV4eUIsRUFBZXRhLEVBQVl3RyxPQUVyRCxDQUNELElBQUl1bUMsRUFBMkMsbUJBQWYvc0MsRUFDMUI4UixFQUFld0ksRUFBZXRhLEVBQVl3RyxFQUFRckUsUUFDbERuQyxFQUNObkcsRUFBWW16QyxHQUFjMXlCLEVBQWV5eUIsRUFBb0J2bUMsR0FFakUsT0FBTzNNLEVBQVVHLE1BQUssV0FDbEIsT0FBT3NnQixFQUFjMnlCLHdCQUF3Qmp0QyxNQUdyRCxTQUFTOHNDLEdBQWV4eUIsRUFBZXhFLEVBQVN0UCxHQUM1QyxJQUFJeEQsT0FDWSxJQUFad0QsSUFBc0JBLEVBQVUsSUFDcEMsSUFBSXk5QixFQUFXbnlCLEVBQWV3SSxFQUFleEUsRUFBU3RQLEVBQVFyRSxRQUMxRG1GLEdBQU0yOEIsR0FBWSxJQUFJbHVCLFdBQVlBLE9BQW9CLElBQVB6TyxFQUFnQmdULEVBQWNvWSx3QkFBMEIsR0FBS3ByQixFQUM1R2QsRUFBUTBtQyxxQkFDUm4zQixFQUFhdlAsRUFBUTBtQyxvQkFNekIsSUFBSXRsQixFQUFlcWMsRUFDYixXQUFjLE9BQU8rSSxHQUFjMXlCLEVBQWUycEIsRUFBVXo5QixJQUM1RCxXQUFjLE9BQU94RSxRQUFRQyxXQUsvQmtyQyxHQUErRCxRQUF4Q25xQyxFQUFLc1gsRUFBYzh4Qix1QkFBb0MsSUFBUHBwQyxPQUFnQixFQUFTQSxFQUFHOGYsTUFDakcsU0FBVXNxQixRQUNhLElBQWpCQSxJQUEyQkEsRUFBZSxHQUM5QyxJQUFJcHFDLEVBQUsrUyxFQUFXbVEsY0FBZUEsT0FBdUIsSUFBUGxqQixFQUFnQixFQUFJQSxFQUFJbWpCLEVBQWtCcFEsRUFBV29RLGdCQUFpQkMsRUFBbUJyUSxFQUFXcVEsaUJBQ3ZKLE9Bb0RaLFNBQXlCOUwsRUFBZXhFLEVBQVNvUSxFQUFlQyxFQUFpQkMsRUFBa0I1ZixRQUN6RSxJQUFsQjBmLElBQTRCQSxFQUFnQixRQUN4QixJQUFwQkMsSUFBOEJBLEVBQWtCLFFBQzNCLElBQXJCQyxJQUErQkEsRUFBbUIsR0FDdEQsSUFBSXRkLEVBQWEsR0FDYnVrQyxHQUFzQi95QixFQUFjOHhCLGdCQUFnQnRwQixLQUFPLEdBQUtxRCxFQUNoRW1uQixFQUErQyxJQUFyQmxuQixFQUN4QixTQUFVNW1CLEdBRVIsWUFEVSxJQUFOQSxJQUFnQkEsRUFBSSxHQUNqQkEsRUFBSTJtQixHQUViLFNBQVUzbUIsR0FFUixZQURVLElBQU5BLElBQWdCQSxFQUFJLEdBQ2pCNnRDLEVBQXFCN3RDLEVBQUkybUIsR0FPeEMsT0FMQTFuQixNQUFNZ0ssS0FBSzZSLEVBQWM4eEIsaUJBQ3BCL3VDLEtBQUtrd0MsSUFDTDN3QyxTQUFRLFNBQVVxeUIsRUFBT3p2QixHQUMxQnNKLEVBQVd4TixLQUFLd3hDLEdBQWU3ZCxFQUFPblosRUFBU3VCLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSWxiLEdBQVUsQ0FBRXpJLE1BQU9tb0IsRUFBZ0JvbkIsRUFBd0I5dEMsTUFBT3hGLE1BQUssV0FBYyxPQUFPaTFCLEVBQU1nZSx3QkFBd0JuM0IsVUFFeE05VCxRQUFRa0gsSUFBSUosR0F4RUowa0MsQ0FBZ0JsekIsRUFBZXhFLEVBQVNvUSxFQUFnQmtuQixFQUFjam5CLEVBQWlCQyxFQUFrQjVmLElBRWxILFdBQWMsT0FBT3hFLFFBQVFDLFdBSy9CZ2tCLEVBQU9sUSxFQUFXa1EsS0FDdEIsR0FBSUEsRUFBTSxDQUNOLElBQUlrSCxFQUFLOVYsRUFBTWdFLE9BQWdCLG1CQUFUNEssRUFDaEIsQ0FBQzJCLEVBQWN1bEIsR0FDZixDQUFDQSxFQUFvQnZsQixHQUFlLEdBQUk2bEIsRUFBUXRnQixFQUFHLEdBQUl1Z0IsRUFBT3ZnQixFQUFHLEdBQ3ZFLE9BQU9zZ0IsSUFBUXp6QyxLQUFLMHpDLEdBR3BCLE9BQU8xckMsUUFBUWtILElBQUksQ0FBQzBlLElBQWdCdWxCLEVBQW1CM21DLEVBQVF6SSxTQU12RSxTQUFTaXZDLEdBQWMxeUIsRUFBZXRhLEVBQVlnRCxHQUM5QyxJQUFJc0UsRUFDQTZsQixPQUFZLElBQVBucUIsRUFBZ0IsR0FBS0EsRUFBSW9xQixFQUFLRCxFQUFHcHZCLE1BQU9BLE9BQWUsSUFBUHF2QixFQUFnQixFQUFJQSxFQUFJOGYsRUFBcUIvZixFQUFHK2YsbUJBQW9CcnNCLEVBQU9zTSxFQUFHdE0sS0FDbkl3TSxFQUFLL1MsRUFBYzB4QixxQkFBcUJoc0MsR0FBYW15QixFQUFLOUUsRUFBR3RYLFdBQVlBLE9BQW9CLElBQVBvYyxFQUFnQjdYLEVBQWNvWSx1QkFBeUJQLEVBQUkrUixFQUFnQjdXLEVBQUc2VyxjQUFlaDhCLEVBQVNtUCxFQUFNbk0sT0FBT21pQixFQUFJLENBQUMsYUFBYyxrQkFDNU42ZixJQUNBbjNCLEVBQWFtM0IsR0FDakIsSUFBSXBrQyxFQUFhLEdBQ2I2a0MsRUFBcUI5c0IsSUFBaUQsUUFBdkN2WixFQUFLZ1QsRUFBY2dqQixzQkFBbUMsSUFBUGgyQixPQUFnQixFQUFTQSxFQUFHc21DLFdBQVcvc0IsSUFDekgsSUFBSyxJQUFJaGIsS0FBT3FDLEVBQVEsQ0FDcEIsSUFBSTlKLEVBQVFrYyxFQUFjdXhCLFNBQVNobUMsR0FDL0JzK0IsRUFBY2o4QixFQUFPckMsR0FDekIsTUFBS3pILFFBQ2VoRSxJQUFoQitwQyxHQUNDd0osR0FDR0UsR0FBcUJGLEVBQW9COW5DLElBSGpELENBTUEsSUFBSXloQixFQUFrQmpRLEVBQU1xSyxTQUFTLENBQUUzakIsTUFBT0EsR0FBU2dZLEdBSW5EdUUsRUFBYytZLG9CQUFzQjFFLEdBQWdCOW9CLEtBQ3BEeWhCLEVBQWtCalEsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJNEYsR0FBa0IsQ0FBRXpHLE1BQU0sRUFBTzlpQixNQUFPLEtBRWhHLElBQUlsRSxFQUFZc3RCLEdBQWV0aEIsRUFBS3pILEVBQU8rbEMsRUFBYTdjLEdBQ3hEeGUsRUFBV3hOLEtBQUt6QixJQUVwQixPQUFPbUksUUFBUWtILElBQUlKLEdBQVk5TyxNQUFLLFdBQ2hDa3FDLEdBQWlCNkgsR0FBVXp4QixFQUFlNHBCLE1BNEJsRCxTQUFTcUosR0FBZ0J4d0MsRUFBR0MsR0FDeEIsT0FBT0QsRUFBRSt3QyxpQkFBaUI5d0MsR0FROUIsU0FBUzZ3QyxHQUFxQjdxQyxFQUFJNkMsR0FDOUIsSUFBSWtvQyxFQUFnQi9xQyxFQUFHK3FDLGNBQWVDLEVBQWlCaHJDLEVBQUdnckMsZUFDdERDLEVBQWNGLEVBQWMzb0MsZUFBZVMsS0FBZ0MsSUFBeEJtb0MsRUFBZW5vQyxHQUV0RSxPQURBbW9DLEVBQWVub0MsSUFBTyxFQUNmb29DLEVBR1gsSUFBSUMsR0FBdUIsQ0FDdkI5MkIsRUFBUWd0QixjQUFjK0osUUFDdEIvMkIsRUFBUWd0QixjQUFjNkUsT0FDdEI3eEIsRUFBUWd0QixjQUFjc0csTUFDdEJ0ekIsRUFBUWd0QixjQUFjd0QsTUFDdEJ4d0IsRUFBUWd0QixjQUFjbUcsSUFDdEJuekIsRUFBUWd0QixjQUFjZ0ssS0FDdEJoM0IsRUFBUWd0QixjQUFjaUssTUFFdEJDLEdBQXVCajNCLEVBQU0yTyxjQUFjLEdBQUkzTyxFQUFNZ0UsT0FBTzZ5QixLQUF1QixHQUFPanFDLFVBQzFGc3FDLEdBQW9CTCxHQUFxQmp0QyxPQTZTN0MsU0FBU3V0QyxHQUFnQmg3QixHQUVyQixZQURpQixJQUFiQSxJQUF1QkEsR0FBVyxHQUMvQixDQUNIQSxTQUFVQSxFQUNWdTZCLGNBQWUsR0FDZkMsZUFBZ0IsR0FDaEJTLG1CQUFvQixJQWdCNUIsSUFBSTNsQyxHQUFhLENBQ2JqUCxVQUFXNHZDLElBQXdCLFNBQVV6bUMsR0FDekMsSUFBSXNYLEVBQWdCdFgsRUFBR3NYLGNBQWV2VixFQUFVL0IsRUFBRytCLFFBTW5EdVYsRUFBY2dqQixpQkFBbUJoakIsRUFBY2dqQixlQWxVdkQsU0FBOEJoakIsR0FDMUIsSUE2U0l0WCxFQTdTQStCLEVBVFIsU0FBcUJ1VixHQUNqQixPQUFPLFNBQVV4UixHQUNiLE9BQU85RyxRQUFRa0gsSUFBSUosRUFBV2pHLEtBQUksU0FBVUcsR0FDeEMsSUFBSW5KLEVBQVltSixFQUFHbkosVUFBVzJNLEVBQVV4RCxFQUFHd0QsUUFDM0MsT0FBT29tQyxHQUFxQnR5QixFQUFlemdCLEVBQVcyTSxRQUtoRGtvQyxDQUFZcDBCLEdBQ3RCcE4sSUE2U0dsSyxFQUFLLElBQ0xvVSxFQUFRZ3RCLGNBQWMrSixTQUFXSyxJQUFnQixHQUNwRHhyQyxFQUFHb1UsRUFBUWd0QixjQUFjNkUsUUFBVXVGLEtBQ25DeHJDLEVBQUdvVSxFQUFRZ3RCLGNBQWN3RCxPQUFTNEcsS0FDbEN4ckMsRUFBR29VLEVBQVFndEIsY0FBY21HLEtBQU9pRSxLQUNoQ3hyQyxFQUFHb1UsRUFBUWd0QixjQUFjZ0ssTUFBUUksS0FDakN4ckMsRUFBR29VLEVBQVFndEIsY0FBY3NHLE9BQVM4RCxLQUNsQ3hyQyxFQUFHb1UsRUFBUWd0QixjQUFjaUssTUFBUUcsS0FDakN4ckMsR0FwVEEyckMsRUFBa0IsR0FDbEJDLEdBQWtCLEVBS2xCQyxFQUEwQixTQUFVQyxFQUFLOXVDLEdBQ3pDLElBQUlpa0MsRUFBV255QixFQUFld0ksRUFBZXRhLEdBQzdDLEdBQUlpa0MsRUFBVSxDQUNWQSxFQUFTbHVCLFdBQVksSUFBSW11QixFQUFnQkQsRUFBU0MsY0FBZWg4QixFQUFTbVAsRUFBTW5NLE9BQU8rNEIsRUFBVSxDQUFDLGFBQWMsa0JBQ2hINkssRUFBTXozQixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSW90QixHQUFNNW1DLEdBQVNnOEIsR0FFMUUsT0FBTzRLLEdBc0JYLFNBQVN2UixFQUFlLzJCLEVBQVN1b0MsR0FpTTdCLElBaE1BLElBQUkvckMsRUFDQTZWLEVBQVF5QixFQUFjeUIsV0FDdEI3RyxFQUFVb0YsRUFBYzAwQixtQkFBa0IsSUFBUyxHQUtuRGxtQyxFQUFhLEdBS2JtbUMsRUFBYyxJQUFJL3hDLElBTWxCZ3lDLEVBQWtCLEdBS2xCQyxFQUFzQkMsRUFBQUEsRUFDdEJDLEVBQVUsU0FBVTd2QyxHQUNwQixJQUFJcWhCLEVBQU95dEIsR0FBcUI5dUMsR0FDNUI4dkMsRUFBWXBpQyxFQUFNMlQsR0FDbEJsRSxFQUE4QixRQUF0QjNaLEVBQUs2VixFQUFNZ0ksVUFBMEIsSUFBUDdkLEVBQWdCQSxFQUFLa1MsRUFBUTJMLEdBQ25FMHVCLEVBQWdCM3pCLEVBQWVlLEdBSy9CNnlCLEVBQWMzdUIsSUFBU2t1QixFQUFvQk8sRUFBVTk3QixTQUFXLE1BQ2hELElBQWhCZzhCLElBQ0FMLEVBQXNCM3ZDLEdBTzFCLElBQUlpd0MsRUFBYzl5QixJQUFTekgsRUFBUTJMLElBQVNsRSxJQUFTOUQsRUFBTWdJLElBQVMwdUIsRUFlcEUsR0FYSUUsR0FDQWIsR0FDQXQwQixFQUFjbzFCLHlCQUNkRCxHQUFjLEdBTWxCSCxFQUFVdkIsY0FBZ0IxMkIsRUFBTXFLLFNBQVMsR0FBSXd0QixJQUkzQ0ksRUFBVTk3QixVQUE0QixPQUFoQmc4QixJQUVsQjd5QixJQUFTMnlCLEVBQVVLLFVBRXJCck0sR0FBb0IzbUIsSUFDSixrQkFBVEEsRUFDUCxNQUFPLFdBT1gsSUFBSWl6QixFQTZLaEIsU0FBZ0N2bEMsRUFBTUQsR0FDbEMsTUFBb0IsaUJBQVRBLEVBQ0FBLElBQVNDLElBRVhzUixFQUFnQnZSLEtBQ2I4TCxHQUFlOUwsRUFBTUMsR0FsTEZ3bEMsQ0FBdUJQLEVBQVVLLFNBQVVoekIsR0FDOURtekIsRUFBb0JGLEdBRW5CL3VCLElBQVNrdUIsR0FDTk8sRUFBVTk3QixXQUNUaThCLEdBQ0RGLEdBRUgvdkMsRUFBSTJ2QyxHQUF1QkksRUFLNUJRLEVBQWlCdHhDLE1BQU1DLFFBQVFpZSxHQUFRQSxFQUFPLENBQUNBLEdBSy9DcXpCLEVBQWlCRCxFQUFlenlDLE9BQU91eEMsRUFBeUIsS0FDaEQsSUFBaEJXLElBQ0FRLEVBQWlCLElBVXJCLElBQUkxb0MsRUFBS2dvQyxFQUFVYixtQkFBb0JBLE9BQTRCLElBQVBubkMsRUFBZ0IsR0FBS0EsRUFDN0Uyb0MsRUFBVTU0QixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUkrc0IsR0FBcUJ1QixHQUNqRUUsRUFBZ0IsU0FBVXJxQyxHQUMxQmlxQyxHQUFvQixFQUNwQmIsRUFBWXY5QixPQUFPN0wsR0FDbkJ5cEMsRUFBVXRCLGVBQWVub0MsSUFBTyxHQUVwQyxJQUFLLElBQUlBLEtBQU9vcUMsRUFBUyxDQUNyQixJQUFJN2xDLEVBQU80bEMsRUFBZW5xQyxHQUN0QndFLEVBQU9va0MsRUFBbUI1b0MsR0FFMUJxcEMsRUFBZ0I5cEMsZUFBZVMsS0FLL0J1RSxJQUFTQyxFQUtMc1csRUFBa0J2VyxJQUFTdVcsRUFBa0J0VyxJQUN4QzZMLEdBQWU5TCxFQUFNQyxJQUFTdWxDLEVBQy9CTSxFQUFjcnFDLEdBT2R5cEMsRUFBVXZCLGNBQWNsb0MsSUFBTyxPQUdyQnpMLElBQVRnUSxFQUVMOGxDLEVBQWNycUMsR0FJZG9wQyxFQUFZem5DLElBQUkzQixRQUdOekwsSUFBVGdRLEdBQXNCNmtDLEVBQVl4MEMsSUFBSW9MLEdBSzNDcXFDLEVBQWNycUMsR0FPZHlwQyxFQUFVdkIsY0FBY2xvQyxJQUFPLEdBT3ZDeXBDLEVBQVVLLFNBQVdoekIsRUFDckIyeUIsRUFBVWIsbUJBQXFCdUIsRUFJM0JWLEVBQVU5N0IsV0FDVjA3QixFQUFrQjczQixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUl3dEIsR0FBa0JjLElBRXRFcEIsR0FBbUJ0MEIsRUFBYytpQix3QkFDakN5UyxHQUFvQixHQU9wQkEsSUFBc0JMLEdBQ3RCM21DLEVBQVd4TixLQUFLbTJCLE1BQU0zb0IsRUFBWXVPLEVBQU0yTyxjQUFjLEdBQUkzTyxFQUFNZ0UsT0FBTzAwQixFQUFlbHRDLEtBQUksU0FBVWhKLEdBQWEsTUFBTyxDQUNwSEEsVUFBV0EsRUFDWDJNLFFBQVM2USxFQUFNcUssU0FBUyxDQUFFYixLQUFNQSxHQUFRcmEsU0FDbkMsS0FTUmhILEVBQUksRUFBR0EsRUFBSSt1QyxHQUFtQi91QyxJQUNuQzZ2QyxFQUFRN3ZDLEdBUVosR0FOQW12QyxFQUFrQnQzQixFQUFNcUssU0FBUyxHQUFJd3RCLEdBTWpDRCxFQUFZbnNCLEtBQU0sQ0FDbEIsSUFBSXF0QixFQUFzQixHQUMxQmxCLEVBQVlyeUMsU0FBUSxTQUFVaUosR0FDMUIsSUFBSXVxQyxFQUFpQjkxQixFQUFjKzFCLGNBQWN4cUMsUUFDMUJ6TCxJQUFuQmcyQyxJQUNBRCxFQUFvQnRxQyxHQUFPdXFDLE1BR25DdG5DLEVBQVd4TixLQUFLLENBQUV6QixVQUFXczJDLElBRWpDLElBQUlHLEVBQWdCaHlDLFFBQVF3SyxFQUFXN0gsUUFPdkMsT0FOSTJ0QyxJQUNrQixJQUFsQi8xQixFQUFNN0QsVUFDTHNGLEVBQWNvMUIseUJBQ2ZZLEdBQWdCLEdBRXBCMUIsR0FBa0IsRUFDWDBCLEVBQWdCdnJDLEVBQVErRCxHQUFjOUcsUUFBUUMsVUFtQnpELE1BQU8sQ0FDSHN1QyxXQW5RSixTQUFvQjFxQyxHQUNoQixZQUFnQ3pMLElBQXpCdTBDLEVBQWdCOW9DLElBbVF2QjAzQixlQUFnQkEsRUFDaEIzbkIsVUFqQkosU0FBbUJpTCxFQUFNck4sRUFBVWhOLEdBQy9CLElBQUl4RCxFQUVKLEdBQUlrSyxFQUFNMlQsR0FBTXJOLFdBQWFBLEVBQ3pCLE9BQU94UixRQUFRQyxVQUVzQixRQUF4Q2UsRUFBS3NYLEVBQWM4eEIsdUJBQW9DLElBQVBwcEMsR0FBeUJBLEVBQUdwRyxTQUFRLFNBQVVxeUIsR0FBUyxJQUFJanNCLEVBQUksT0FBdUMsUUFBL0JBLEVBQUtpc0IsRUFBTXFPLHNCQUFtQyxJQUFQdDZCLE9BQWdCLEVBQVNBLEVBQUc0UyxVQUFVaUwsRUFBTXJOLE1BQzNNdEcsRUFBTTJULEdBQU1yTixTQUFXQSxFQUN2QixJQUFJMUssRUFBYXkwQixFQUFlLzJCLEVBQVNxYSxHQUN6QyxJQUFLLElBQUloYixLQUFPcUgsRUFDWkEsRUFBTXJILEdBQUtrb0MsY0FBZ0IsR0FFL0IsT0FBT2psQyxHQU1QMG5DLG1CQS9QSixTQUE0QkMsR0FDeEIxckMsRUFBVTByQyxFQUFhbjJCLElBK1B2QnN6QixTQUFVLFdBQWMsT0FBTzFnQyxJQTBDaUN3akMsQ0FBcUJwMkIsSUFJakZncEIsR0FBb0J2K0IsSUFDcEJ1UyxFQUFNcUQsV0FBVSxXQUFjLE9BQU81VixFQUFRME8sVUFBVTZHLEtBQW1CLENBQUN2VixPQUduRmtVLEtBQU13d0IsSUFBd0IsU0FBVTV3QixHQUNwQyxJQUFJMVcsRUFBUzBXLEVBQU0xVyxPQUFRbVksRUFBZ0J6QixFQUFNeUIsY0FDN0N0WCxFQUFLcVUsRUFBTWdFLE9BQU8ydkIsS0FBZSxHQUFJNWUsRUFBWXBwQixFQUFHLEdBQUkydEMsRUFBZTN0QyxFQUFHLEdBQzFFaTZCLEVBQWtCM2xCLEVBQU0rQyxXQUFXRSxHQUN2Q2pELEVBQU1xRCxXQUFVLFdBQ1osSUFBSTNYLEVBQUlzRSxFQUNSZ1QsRUFBYzhSLFVBQVlBLEVBQzFCLElBQUl2eUIsRUFBb0QsUUFBdkNtSixFQUFLc1gsRUFBY2dqQixzQkFBbUMsSUFBUHQ2QixPQUFnQixFQUFTQSxFQUFHNFMsVUFBVXdCLEVBQVFndEIsY0FBY2lLLE1BQU9qaUIsRUFBVyxDQUFFanFCLE9BQTRHLFFBQW5HbUYsRUFBSzIxQixNQUFBQSxPQUF5RCxFQUFTQSxFQUFnQjk2QixjQUEyQixJQUFQbUYsRUFBZ0JBLEVBQUtuRixLQUN4UmlxQixJQUFjdnlCLE1BQUFBLEdBQXNEQSxFQUFVRyxLQUFLMjJDLE1BQ3JGLENBQUN2a0IsUUFPUndrQixHQUE0QixXQUM1QixTQUFTQSxFQUFXNzlCLEVBQU84OUIsRUFBVTd0QyxHQUNqQyxJQUFJbWEsRUFBUXJqQixLQUNzQmtnQixRQUFsQixJQUFQaFgsRUFBZ0IsR0FBS0EsR0FBNEJnWCxtQkEyRDFELEdBdkRBbGdCLEtBQUtnM0MsV0FBYSxLQUlsQmgzQyxLQUFLaTNDLGNBQWdCLEtBSXJCajNDLEtBQUtrM0Msa0JBQW9CLEtBSXpCbDNDLEtBQUsrMkMsU0FBVyxHQUNoQi8yQyxLQUFLbTNDLFlBQWMsV0FDZixHQUFNOXpCLEVBQU00ekIsZUFBaUI1ekIsRUFBTTZ6QixrQkFBbkMsQ0FFQSxJQUFJckosRUFBT3VKLEdBQVcvekIsRUFBTTZ6QixrQkFBbUI3ekIsRUFBTWcwQixTQUNqREMsRUFBb0MsT0FBckJqMEIsRUFBTTJ6QixXQUlyQk8sRUFBMEI1NUIsRUFBVS9OLFNBQVNpK0IsRUFBS3ZtQyxPQUFRLENBQUV2RixFQUFHLEVBQUdDLEVBQUcsS0FBUSxFQUNqRixHQUFLczFDLEdBQWlCQyxFQUF0QixDQUVBLElBQUlsb0IsRUFBUXdlLEVBQUt4ZSxNQUNicG1CLEVBQVl5VSxFQUFLeUcsZUFBZWxiLFVBQ3BDb2EsRUFBTWcwQixRQUFRNzFDLEtBQUsrYixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUl5SCxHQUFRLENBQUVwbUIsVUFBV0EsS0FDMUUsSUFBSUMsRUFBS21hLEVBQU0wekIsU0FBVWxnQyxFQUFVM04sRUFBRzJOLFFBQVMyZ0MsRUFBU3R1QyxFQUFHc3VDLE9BQ3RERixJQUNEemdDLEdBQVdBLEVBQVF3TSxFQUFNNHpCLGNBQWVwSixHQUN4Q3hxQixFQUFNMnpCLFdBQWEzekIsRUFBTTR6QixlQUU3Qk8sR0FBVUEsRUFBT24wQixFQUFNNHpCLGNBQWVwSixNQUUxQzd0QyxLQUFLeTNDLGtCQUFvQixTQUFVeCtCLEVBQU80MEIsR0FDdEN4cUIsRUFBTTR6QixjQUFnQmgrQixFQUN0Qm9LLEVBQU02ekIsa0JBQW9CUSxHQUFlN0osRUFBTXhxQixFQUFNbkQsb0JBRWpEK3FCLEdBQWFoeUIsSUFBNEIsSUFBbEJBLEVBQU0wK0IsUUFDN0J0MEIsRUFBTXUwQixnQkFBZ0IzK0IsRUFBTzQwQixHQUlqQ3B2QixFQUF1QixRQUFFN0MsT0FBT3lILEVBQU04ekIsYUFBYSxJQUV2RG4zQyxLQUFLNDNDLGdCQUFrQixTQUFVMytCLEVBQU80MEIsR0FDcEN4cUIsRUFBTXcwQixNQUNOLElBQUkzdUMsRUFBS21hLEVBQU0wekIsU0FBVXYvQixFQUFRdE8sRUFBR3NPLE1BQU9zZ0MsRUFBZTV1QyxFQUFHNHVDLGFBQ3pEQyxFQUFVWCxHQUFXTSxHQUFlN0osRUFBTXhxQixFQUFNbkQsb0JBQXFCbUQsRUFBTWcwQixTQUMzRWgwQixFQUFNMnpCLFlBQWN4L0IsR0FDcEJBLEVBQU15QixFQUFPOCtCLEdBRWpCRCxHQUFnQkEsRUFBYTcrQixFQUFPOCtCLE1BR3BDM00sR0FBYW55QixJQUFVQSxFQUFNb3lCLFFBQVFsa0MsT0FBUyxHQUFsRCxDQUVBbkgsS0FBSysyQyxTQUFXQSxFQUNoQi8yQyxLQUFLa2dCLG1CQUFxQkEsRUFDMUIsSUFDSTgzQixFQUFjTixHQURQN0wsR0FBaUI1eUIsR0FDV2paLEtBQUtrZ0Isb0JBQ3hDbVAsRUFBUTJvQixFQUFZM29CLE1BQ3BCcG1CLEVBQVl5VSxFQUFLeUcsZUFBZWxiLFVBQ3BDakosS0FBS3EzQyxRQUFVLENBQUM5NUIsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJeUgsR0FBUSxDQUFFcG1CLFVBQVdBLEtBQ3ZFLElBQUlndkMsRUFBaUJsQixFQUFTa0IsZUFDOUJBLEdBQ0lBLEVBQWVoL0IsRUFBT20rQixHQUFXWSxFQUFhaDRDLEtBQUtxM0MsVUFDdkRyM0MsS0FBS2s0QyxnQkFBa0J2NkIsRUFBVWd6QixLQUFLMUQsR0FBZ0JyZ0MsT0FBUSxjQUFlNU0sS0FBS3kzQyxtQkFBb0J4SyxHQUFnQnJnQyxPQUFRLFlBQWE1TSxLQUFLNDNDLGlCQUFrQjNLLEdBQWdCcmdDLE9BQVEsZ0JBQWlCNU0sS0FBSzQzQyxtQkFTcE4sT0FQQWQsRUFBV3JyQyxVQUFVMHNDLGVBQWlCLFNBQVVwQixHQUM1Qy8yQyxLQUFLKzJDLFNBQVdBLEdBRXBCRCxFQUFXcnJDLFVBQVVvc0MsSUFBTSxXQUN2QjczQyxLQUFLazRDLGlCQUFtQmw0QyxLQUFLazRDLGtCQUM3Qng2QixFQUFLa2MsV0FBV2hlLE9BQU81YixLQUFLbTNDLGNBRXpCTCxFQW5Gb0IsR0FxRi9CLFNBQVNZLEdBQWU3SixFQUFNM3RCLEdBQzFCLE9BQU9BLEVBQXFCLENBQUVtUCxNQUFPblAsRUFBbUIydEIsRUFBS3hlLFFBQVd3ZSxFQUU1RSxTQUFTdUssR0FBY24xQyxFQUFHQyxHQUN0QixNQUFPLENBQUVuQixFQUFHa0IsRUFBRWxCLEVBQUltQixFQUFFbkIsRUFBR0MsRUFBR2lCLEVBQUVqQixFQUFJa0IsRUFBRWxCLEdBRXRDLFNBQVNvMUMsR0FBV2x1QyxFQUFJbXVDLEdBQ3BCLElBQUlob0IsRUFBUW5tQixFQUFHbW1CLE1BQ2YsTUFBTyxDQUNIQSxNQUFPQSxFQUNQaFosTUFBTytoQyxHQUFjL29CLEVBQU9ncEIsR0FBZ0JoQixJQUM1Qy92QyxPQUFROHdDLEdBQWMvb0IsRUFBT2lwQixHQUFpQmpCLElBQzlDMWtDLFNBQVV5UCxHQUFZaTFCLEVBQVMsS0FHdkMsU0FBU2lCLEdBQWlCakIsR0FDdEIsT0FBT0EsRUFBUSxHQUVuQixTQUFTZ0IsR0FBZ0JoQixHQUNyQixPQUFPQSxFQUFRQSxFQUFRbHdDLE9BQVMsR0FFcEMsU0FBU2liLEdBQVlpMUIsRUFBUzF6QixHQUMxQixHQUFJMHpCLEVBQVFsd0MsT0FBUyxFQUNqQixNQUFPLENBQUVwRixFQUFHLEVBQUdDLEVBQUcsR0FLdEIsSUFIQSxJQUFJMEQsRUFBSTJ4QyxFQUFRbHdDLE9BQVMsRUFDckJveEMsRUFBbUIsS0FDbkJDLEVBQVlILEdBQWdCaEIsR0FDekIzeEMsR0FBSyxJQUNSNnlDLEVBQW1CbEIsRUFBUTN4QyxLQUN2Qjh5QyxFQUFVdnZDLFVBQVlzdkMsRUFBaUJ0dkMsVUFDdkNtYyxFQUFzQnpCLE1BRzFCamUsSUFFSixJQUFLNnlDLEVBQ0QsTUFBTyxDQUFFeDJDLEVBQUcsRUFBR0MsRUFBRyxHQUV0QixJQUFJdUksR0FBUWl1QyxFQUFVdnZDLFVBQVlzdkMsRUFBaUJ0dkMsV0FBYSxJQUNoRSxHQUFhLElBQVRzQixFQUNBLE1BQU8sQ0FBRXhJLEVBQUcsRUFBR0MsRUFBRyxHQUV0QixJQUFJaVMsRUFBa0IsQ0FDbEJsUyxHQUFJeTJDLEVBQVV6MkMsRUFBSXcyQyxFQUFpQngyQyxHQUFLd0ksRUFDeEN2SSxHQUFJdzJDLEVBQVV4MkMsRUFBSXUyQyxFQUFpQnYyQyxHQUFLdUksR0FRNUMsT0FOSTBKLEVBQWdCbFMsSUFBTXV6QyxFQUFBQSxJQUN0QnJoQyxFQUFnQmxTLEVBQUksR0FFcEJrUyxFQUFnQmpTLElBQU1zekMsRUFBQUEsSUFDdEJyaEMsRUFBZ0JqUyxFQUFJLEdBRWpCaVMsRUF5QlgsU0FBU3drQyxHQUE0QjExQyxFQUFNNEQsRUFBS0MsR0FDNUMsTUFBTyxDQUNIRCxTQUFhckcsSUFBUnFHLEVBQW9CNUQsRUFBSzRELElBQU1BLE9BQU1yRyxFQUMxQ3NHLFNBQWF0RyxJQUFSc0csRUFDQzdELEVBQUs2RCxJQUFNQSxHQUFPN0QsRUFBSzZELElBQU03RCxFQUFLNEQsVUFDbENyRyxHQWlCZCxTQUFTbzRDLEdBQTRCQyxFQUFZQyxHQUM3QyxJQUFJMXZDLEVBQ0F2QyxFQUFNaXlDLEVBQWdCanlDLElBQU1neUMsRUFBV2h5QyxJQUN2Q0MsRUFBTWd5QyxFQUFnQmh5QyxJQUFNK3hDLEVBQVcveEMsSUFPM0MsT0FKSWd5QyxFQUFnQmh5QyxJQUFNZ3lDLEVBQWdCanlDLElBQ3RDZ3lDLEVBQVcveEMsSUFBTSt4QyxFQUFXaHlDLE1BQ01BLEdBQWxDdUMsRUFBS3FVLEVBQU1nRSxPQUFPLENBQUMzYSxFQUFLRCxHQUFNLElBQWEsR0FBSUMsRUFBTXNDLEVBQUcsSUFFckQsQ0FBRXZDLElBQUtBLEVBQUtDLElBQUtBLEdBd0M1QixJQUFJaXlDLEdBQWlCLElBaUJyQixTQUFTQyxHQUFtQkMsRUFBYUMsRUFBVUMsR0FDL0MsTUFBTyxDQUNIdHlDLElBQUt1eUMsR0FBb0JILEVBQWFDLEdBQ3RDcHlDLElBQUtzeUMsR0FBb0JILEVBQWFFLElBRzlDLFNBQVNDLEdBQW9CSCxFQUFhSSxHQUN0QyxJQUFJandDLEVBQ0osTUFBOEIsaUJBQWhCNnZDLEVBQ1JBLEVBQzhCLFFBQTdCN3ZDLEVBQUs2dkMsRUFBWUksVUFBMkIsSUFBUGp3QyxFQUFnQkEsRUFBSyxFQVFyRSxTQUFTa3dDLEdBQXdCbHdDLEdBQzdCLElBQUkrZixFQUFNL2YsRUFBRytmLElBQ2IsTUFBTyxDQUNIbG5CLEVBQUcsQ0FBRTRFLElBRmdCdUMsRUFBR2tnQixLQUVSeGlCLElBRnNCc0MsRUFBR2dnQixPQUd6Q2xuQixFQUFHLENBQUUyRSxJQUFLc2lCLEVBQUtyaUIsSUFIMENzQyxFQUFHaWdCLFNBNEJwRSxTQUFTa1QsR0FBbUI1SixFQUFVaWxCLEdBQ2xDLE9BQU8wQixHQWRYLFNBQTRCL3BCLEVBQU9xb0IsR0FDL0IsSUFBS0EsRUFDRCxPQUFPcm9CLEVBQ1gsSUFBSWdxQixFQUFVM0IsRUFBZSxDQUFFMzFDLEVBQUdzdEIsRUFBTWpHLEtBQU1wbkIsRUFBR3F0QixFQUFNcEcsTUFDbkRxd0IsRUFBYzVCLEVBQWUsQ0FBRTMxQyxFQUFHc3RCLEVBQU1uRyxNQUFPbG5CLEVBQUdxdEIsRUFBTWxHLFNBQzVELE1BQU8sQ0FDSEYsSUFBS293QixFQUFRcjNDLEVBQ2JvbkIsS0FBTWl3QixFQUFRdDNDLEVBQ2RvbkIsT0FBUW13QixFQUFZdDNDLEVBQ3BCa25CLE1BQU9vd0IsRUFBWXYzQyxHQUtRdzNDLENBQW1COW1CLEVBQVNnWSx3QkFBeUJpTixJQVl4RixJQUFJOEIsR0FBc0IsSUFBSWg1QyxRQUsxQmk1QyxHQUEyQyxXQUMzQyxTQUFTQSxFQUEwQmo1QixHQUkvQnhnQixLQUFLMDVDLGVBQWlCLEtBQ3RCMTVDLEtBQUsyNUMsWUFBYSxFQUNsQjM1QyxLQUFLNDVDLGlCQUFtQixLQUN4QjU1QyxLQUFLc3ZCLFlBQWMsQ0FBRXZ0QixFQUFHLEVBQUdDLEVBQUcsR0FJOUJoQyxLQUFLNjVDLGFBQWMsRUFDbkI3NUMsS0FBSzg1Qyx1QkFBd0IsRUFJN0I5NUMsS0FBSys1QyxRQTF6SHdCLENBQ2pDaDRDLEVBRmtDLENBQUc0RSxJQUFLLEVBQUdDLElBQUssR0FHbEQ1RSxFQUhrQyxDQUFHMkUsSUFBSyxFQUFHQyxJQUFLLElBNHpIOUM1RyxLQUFLd2dCLGNBQWdCQSxFQTBYekIsT0F4WEFpNUIsRUFBMEJodUMsVUFBVThELE1BQVEsU0FBVXlxQyxFQUFhOXdDLEdBQy9ELElBQUltYSxFQUFRcmpCLEtBQ3NCcXpCLFFBQWxCLElBQVBucUIsRUFBZ0IsR0FBS0EsR0FBWSt3QyxhQUFjQSxPQUFzQixJQUFQNW1CLEdBQXdCQSxHQUkxRCxJQUFqQ3J6QixLQUFLd2dCLGNBQWM4UixZQXNGdkJ0eUIsS0FBS2s2QyxXQUFhLElBQUlwRCxHQUFXa0QsRUFBYSxDQUMxQy9CLGVBckZpQixTQUFVaC9CLEdBRzNCb0ssRUFBTS9XLGdCQUNGMnRDLEdBQ0E1MkIsRUFBTTQyQixhQUFhcE8sR0FBaUI1eUIsRUFBTyxRQUFRb1csUUFpRnZEeFksUUE5RVUsU0FBVW9DLEVBQU80MEIsR0FDM0IsSUFBSTNrQyxFQUVBc0UsRUFBSzZWLEVBQU1wQixXQUFZN0MsRUFBTzVSLEVBQUc0UixLQUFNKzZCLEVBQWtCM3NDLEVBQUcyc0MsZ0JBQWlCQyxFQUFjNXNDLEVBQUc0c0MsY0FDOUZoN0IsR0FBUys2QixJQUNMOTJCLEVBQU1xMkIsZ0JBQ05yMkIsRUFBTXEyQixpQkFDVnIyQixFQUFNcTJCLGVBQWlCbk0sR0FBY251QixHQUVoQ2lFLEVBQU1xMkIsbUJBR2ZyMkIsRUFBTXMyQixZQUFhLEVBQ25CdDJCLEVBQU11MkIsaUJBQW1CLEtBQ3pCdjJCLEVBQU1nM0IscUJBQ0ZoM0IsRUFBTTdDLGNBQWNzakIsYUFDcEJ6Z0IsRUFBTTdDLGNBQWNzakIsV0FBVzNOLG9CQUFxQixFQUNwRDlTLEVBQU03QyxjQUFjc2pCLFdBQVcxMUIsWUFBUzlOLEdBSzVDK3pCLElBQVMsU0FBVXR4QixHQUNmLElBQUltRyxFQUFJc0UsRUFDSjZDLEVBQVVnVCxFQUFNaTNCLG1CQUFtQnYzQyxHQUFNL0IsT0FBUyxFQUl0RCxHQUFJNGMsRUFBZ0JxVCxRQUFRckssS0FBS3ZXLEdBQVUsQ0FDdkMsSUFBSWtxQyxFQUErRyxRQUEvRi9zQyxFQUErQyxRQUF6Q3RFLEVBQUttYSxFQUFNN0MsY0FBY3NqQixrQkFBK0IsSUFBUDU2QixPQUFnQixFQUFTQSxFQUFHMG5CLGNBQTJCLElBQVBwakIsT0FBZ0IsRUFBU0EsRUFBR2t1QixPQUFPMzRCLEdBQzFKdzNDLElBRUFscUMsRUFEZThmLEdBQVdvcUIsSUFDSnh6QyxXQUFXc0osR0FBVyxNQUdwRGdULEVBQU1pTSxZQUFZdnNCLEdBQVFzTixLQUc5QitwQyxNQUFBQSxHQUEwREEsRUFBWW5oQyxFQUFPNDBCLEdBQy9CLFFBQTdDM2tDLEVBQUttYSxFQUFNN0MsY0FBY2dqQixzQkFBbUMsSUFBUHQ2QixHQUF5QkEsRUFBRzRTLFVBQVV3QixFQUFRZ3RCLGNBQWNnSyxNQUFNLEtBd0N4SGtELE9BdENTLFNBQVV2K0IsRUFBTzQwQixHQUUxQixJQUFJM2tDLEVBQUttYSxFQUFNcEIsV0FBWWs0QixFQUFrQmp4QyxFQUFHaXhDLGdCQUFpQkssRUFBb0J0eEMsRUFBR3N4QyxrQkFBbUJDLEVBQWtCdnhDLEVBQUd1eEMsZ0JBQWlCQyxFQUFTeHhDLEVBQUd3eEMsT0FFN0osR0FBS1AsR0FBb0I5MkIsRUFBTXEyQixlQUEvQixDQUVBLElBQUlweUMsRUFBU3VtQyxFQUFLdm1DLE9BRWxCLEdBQUlrekMsR0FBZ0QsT0FBM0JuM0IsRUFBTXUyQixpQkFNM0IsT0FMQXYyQixFQUFNdTJCLGlCQW1VdEIsU0FBNkJ0eUMsRUFBUXF6QyxRQUNYLElBQWxCQSxJQUE0QkEsRUFBZ0IsSUFDaEQsSUFBSW4wQyxFQUFZLEtBT2hCLE9BTkliLEtBQUtDLElBQUkwQixFQUFPdEYsR0FBSzI0QyxFQUNyQm4wQyxFQUFZLElBRVBiLEtBQUtDLElBQUkwQixFQUFPdkYsR0FBSzQ0QyxJQUMxQm4wQyxFQUFZLEtBRVRBLEVBNVU4Qm8wQyxDQUFvQnR6QyxRQUVkLE9BQTNCK2IsRUFBTXUyQixtQkFDTmEsTUFBQUEsR0FBa0VBLEVBQWdCcDNCLEVBQU11MkIsb0JBS2hHdjJCLEVBQU13M0IsV0FBVyxJQUFLaE4sRUFBS3hlLE1BQU8vbkIsR0FDbEMrYixFQUFNdzNCLFdBQVcsSUFBS2hOLEVBQUt4ZSxNQUFPL25CLEdBT2xDK2IsRUFBTTdDLGNBQWNvZixhQUtwQjhhLE1BQUFBLEdBQWdEQSxFQUFPemhDLEVBQU80MEIsS0FTOURpSyxhQVBlLFNBQVU3K0IsRUFBTzQwQixHQUNoQyxPQUFPeHFCLEVBQU1yWixLQUFLaVAsRUFBTzQwQixLQU8xQixDQUFFM3RCLG1CQUFvQmxnQixLQUFLd2dCLGNBQWNzNkIsNEJBRWhEckIsRUFBMEJodUMsVUFBVXpCLEtBQU8sU0FBVWlQLEVBQU80MEIsR0FDeEQsSUFBSThMLEVBQWEzNUMsS0FBSzI1QyxXQUV0QixHQURBMzVDLEtBQUtrSyxTQUNBeXZDLEVBQUwsQ0FFQSxJQUFJaG5DLEVBQVdrN0IsRUFBS2w3QixTQUNwQjNTLEtBQUtxdEIsZUFBZTFhLEdBQ3BCLElBQUlvb0MsRUFBWS82QyxLQUFLaWlCLFdBQVc4NEIsVUFDaENBLE1BQUFBLEdBQXNEQSxFQUFVOWhDLEVBQU80MEIsS0FFM0U0TCxFQUEwQmh1QyxVQUFVdkIsT0FBUyxXQUN6QyxJQUFJaEIsRUFBSXNFLEVBQ1J4TixLQUFLMjVDLFlBQWEsRUFDZDM1QyxLQUFLd2dCLGNBQWNzakIsYUFDbkI5akMsS0FBS3dnQixjQUFjc2pCLFdBQVczTixvQkFBcUIsR0FFNUIsUUFBMUJqdEIsRUFBS2xKLEtBQUtrNkMsa0JBQStCLElBQVBoeEMsR0FBeUJBLEVBQUcydUMsTUFDL0Q3M0MsS0FBS2s2QyxnQkFBYTU1QyxHQUNJTixLQUFLaWlCLFdBQVdrNEIsaUJBQ2RuNkMsS0FBSzA1QyxpQkFDekIxNUMsS0FBSzA1QyxpQkFDTDE1QyxLQUFLMDVDLGVBQWlCLE1BRW1CLFFBQTVDbHNDLEVBQUt4TixLQUFLd2dCLGNBQWNnakIsc0JBQW1DLElBQVBoMkIsR0FBeUJBLEVBQUdzTyxVQUFVd0IsRUFBUWd0QixjQUFjZ0ssTUFBTSxJQUUzSG1GLEVBQTBCaHVDLFVBQVVvdkMsV0FBYSxTQUFVOTNDLEVBQU1pNEMsRUFBUTF6QyxHQUNyRSxJQUFJOFgsRUFBT3BmLEtBQUtpaUIsV0FBVzdDLEtBRTNCLEdBQUs5WCxHQUFXMnpDLEdBQVdsNEMsRUFBTXFjLEVBQU1wZixLQUFLNDVDLGtCQUE1QyxDQUVBLElBaFVrQnZxQixFQUFPbm1CLEVBQUk2d0MsRUFDN0JwekMsRUFBY0MsRUErVFZzMEMsRUFBWWw3QyxLQUFLczZDLG1CQUFtQnYzQyxHQUNwQ3VOLEVBQU90USxLQUFLc3ZCLFlBQVl2c0IsR0FBUXVFLEVBQU92RSxHQUV2Qy9DLEtBQUs2NUMsYUFBZTc1QyxLQUFLNjVDLFlBQVk5MkMsS0FuVXZCc3NCLEVBb1VVL2UsRUFwVUhwSCxFQW9VU2xKLEtBQUs2NUMsWUFBWTkyQyxHQXBVdEJnM0MsRUFvVTZCLzVDLEtBQUsrNUMsUUFBUWgzQyxHQW5VdkU0RCxFQUFNdUMsRUFBR3ZDLElBQUtDLEVBQU1zQyxFQUFHdEMsU0FDZnRHLElBQVJxRyxHQUFxQjBvQixFQUFRMW9CLEVBRTdCMG9CLEVBQVEwcUIsRUFBVXA4QixFQUFVdlcsSUFBSVQsRUFBSzBvQixFQUFPMHFCLEVBQVFwekMsS0FBT2hCLEtBQUtpQixJQUFJeW9CLEVBQU8xb0IsUUFFOURyRyxJQUFSc0csR0FBcUJ5b0IsRUFBUXpvQixJQUVsQ3lvQixFQUFRMHFCLEVBQVVwOEIsRUFBVXZXLElBQUlSLEVBQUt5b0IsRUFBTzBxQixFQUFRbnpDLEtBQU9qQixLQUFLZ0IsSUFBSTBvQixFQUFPem9CLElBNFR2RTBKLEVBMVREK2UsR0E0VEg2ckIsRUFBVXQ2QyxJQUFJMFAsS0FFbEJtcEMsRUFBMEJodUMsVUFBVTR1QyxtQkFBcUIsV0FDckQsSUFBSWgzQixFQUFRcmpCLEtBQ1JrSixFQUFLbEosS0FBS2lpQixXQUFZNGhCLEVBQWtCMzZCLEVBQUcyNkIsZ0JBQWlCa1YsRUFBYzd2QyxFQUFHNnZDLFlBQzdFbm9CLEdBQVU1d0IsS0FBS3dnQixjQUFjc2pCLFlBQWMsSUFBSWxULE9BQy9DdXFCLEVBQWtCbjdDLEtBQUs2NUMsWUFDdkJoVyxHQUFtQmxpQixFQUFZa2lCLEdBQzFCN2pDLEtBQUs2NUMsY0FDTjc1QyxLQUFLNjVDLFlBQWM3NUMsS0FBS283Qyx5QkFLeEJwN0MsS0FBSzY1QyxlQURMaFcsSUFBbUJqVCxJQXRUbkMsU0FBaUN5cUIsRUFBV255QyxHQUN4QyxJQUFJK2YsRUFBTS9mLEVBQUcrZixJQUFLRyxFQUFPbGdCLEVBQUdrZ0IsS0FBTUQsRUFBU2pnQixFQUFHaWdCLE9BQVFELEVBQVFoZ0IsRUFBR2dnQixNQUNqRSxNQUFPLENBQ0hubkIsRUFBRzAyQyxHQUE0QjRDLEVBQVV0NUMsRUFBR3FuQixFQUFNRixHQUNsRGxuQixFQUFHeTJDLEdBQTRCNEMsRUFBVXI1QyxFQUFHaW5CLEVBQUtFLElBbVR0Qm15QixDQUF3QjFxQixFQUFPOEssT0FBUW1JLEdBTWxFN2pDLEtBQUsrNUMsUUE3UGIsU0FBNEJoQixHQVF4QixZQVBvQixJQUFoQkEsSUFBMEJBLEVBQWNGLEtBQ3hCLElBQWhCRSxFQUNBQSxFQUFjLEdBRU8sSUFBaEJBLElBQ0xBLEVBQWNGLElBRVgsQ0FDSDkyQyxFQUFHKzJDLEdBQW1CQyxFQUFhLE9BQVEsU0FDM0MvMkMsRUFBRzgyQyxHQUFtQkMsRUFBYSxNQUFPLFdBbVAzQndDLENBQW1CeEMsR0FLOUJvQyxJQUFvQm43QyxLQUFLNjVDLGFBQ3pCanBCLEdBQ0E1d0IsS0FBSzY1QyxjQUNKNzVDLEtBQUs4NUMsdUJBQ056bEIsSUFBUyxTQUFVdHhCLEdBQ1hzZ0IsRUFBTWkzQixtQkFBbUJ2M0MsS0FDekJzZ0IsRUFBTXcyQixZQUFZOTJDLEdBdFJ0QyxTQUErQjZ0QixFQUFRaXBCLEdBQ25DLElBQUkyQixFQUFzQixHQU8xQixZQU53Qmw3QyxJQUFwQnU1QyxFQUFZbHpDLE1BQ1o2MEMsRUFBb0I3MEMsSUFBTWt6QyxFQUFZbHpDLElBQU1pcUIsRUFBT2pxQixVQUUvQnJHLElBQXBCdTVDLEVBQVlqekMsTUFDWjQwQyxFQUFvQjUwQyxJQUFNaXpDLEVBQVlqekMsSUFBTWdxQixFQUFPanFCLEtBRWhENjBDLEVBOFFtQ0MsQ0FBc0I3cUIsRUFBTzhLLE9BQU8zNEIsR0FBT3NnQixFQUFNdzJCLFlBQVk5MkMsU0FLdkcwMkMsRUFBMEJodUMsVUFBVTJ2QyxzQkFBd0IsV0FDeEQsSUFBSWx5QyxFQUFLbEosS0FBS2lpQixXQUFZNDNCLEVBQWMzd0MsRUFBRzI2QixnQkFBaUI2WCxFQUEyQnh5QyxFQUFHd3lDLHlCQUMxRixJQUFLN0IsSUFBZ0JsNEIsRUFBWWs0QixHQUM3QixPQUFPLEVBQ1gsSUFBSThCLEVBQXFCOUIsRUFBWXhwQyxRQUNyQ29OLEVBQVV2TCxVQUFpQyxPQUF2QnlwQyxFQUE2QiwwR0FDakQsSUFBSTdYLEVBQWE5akMsS0FBS3dnQixjQUFjc2pCLFdBRXBDLElBQUtBLElBQWVBLEVBQVdsVCxPQUMzQixPQUFPLEVBQ1gsSUFBSWdyQixFQXhOWixTQUF3Qmw3QyxFQUFTbTdDLEVBQW9CMzdCLEdBQ2pELElBQUk0N0IsRUFBY3pmLEdBQW1CMzdCLEVBQVN3ZixHQUMxQzhiLEVBQVM2ZixFQUFtQjdmLE9BS2hDLE9BSklBLElBQ0FyTSxHQUFjbXNCLEVBQVkvNUMsRUFBR2k2QixFQUFPajZCLEdBQ3BDNHRCLEdBQWNtc0IsRUFBWTk1QyxFQUFHZzZCLEVBQU9oNkIsSUFFakM4NUMsRUFpTmtCQyxDQUFlSixFQUFvQjdYLEVBQVdodEIsS0FBTTlXLEtBQUt3Z0IsY0FBY3M2Qix5QkFDeEZrQixFQS9UWixTQUFpQ1gsRUFBV08sR0FDeEMsTUFBTyxDQUNINzVDLEVBQUcyMkMsR0FBNEIyQyxFQUFVdDVDLEVBQUc2NUMsRUFBZTc1QyxHQUMzREMsRUFBRzAyQyxHQUE0QjJDLEVBQVVyNUMsRUFBRzQ1QyxFQUFlNTVDLElBNFRqQ2k2QyxDQUF3Qm5ZLEVBQVdsVCxPQUFPOEssT0FBUWtnQixHQUs1RSxHQUFJRixFQUEwQixDQUMxQixJQUFJUSxFQUFrQlIsRUF4UGxDLFNBQWlDeHlDLEdBQzdCLElBQUluSCxFQUFJbUgsRUFBR25ILEVBQUdDLEVBQUlrSCxFQUFHbEgsRUFDckIsTUFBTyxDQUFFaW5CLElBQUtqbkIsRUFBRTJFLElBQUt1aUIsTUFBT25uQixFQUFFNkUsSUFBS3VpQixPQUFRbm5CLEVBQUU0RSxJQUFLd2lCLEtBQU1ybkIsRUFBRTRFLEtBc1BIdzFDLENBQXdCSCxJQUN2RWg4QyxLQUFLODVDLHdCQUEwQm9DLEVBQzNCQSxJQUNBRixFQUFzQjVDLEdBQXdCOEMsSUFHdEQsT0FBT0YsR0FFWHZDLEVBQTBCaHVDLFVBQVU0aEIsZUFBaUIsU0FBVTFhLEdBQzNELElBQUkwUSxFQUFRcmpCLEtBQ1JrSixFQUFLbEosS0FBS2lpQixXQUFZN0MsRUFBT2xXLEVBQUdrVyxLQUFNZzlCLEVBQWVsekMsRUFBR2t6QyxhQUFjckQsRUFBYzd2QyxFQUFHNnZDLFlBQWFzRCxFQUFpQm56QyxFQUFHbXpDLGVBQWdCQyxFQUFtQnB6QyxFQUFHb3pDLGlCQUFrQkMsRUFBc0JyekMsRUFBR3F6QyxvQkFDek0xQyxFQUFjNzVDLEtBQUs2NUMsYUFBZSxHQUNsQzJDLEVBQXFCbm9CLElBQVMsU0FBVXR4QixHQUN4QyxJQUFJbUcsRUFDSixHQUFLK3hDLEdBQVdsNEMsRUFBTXFjLEVBQU1pRSxFQUFNdTJCLGtCQUFsQyxDQUdBLElBQUkzOUIsRUFBb0csUUFBdEYvUyxFQUFLMndDLE1BQUFBLE9BQWlELEVBQVNBLEVBQVk5MkMsVUFBMEIsSUFBUG1HLEVBQWdCQSxFQUFLLEdBQ2pJb3pDLElBQ0FyZ0MsRUFBYSxDQUFFdFYsSUFBSyxFQUFHQyxJQUFLLElBT2hDLElBQUlpUCxFQUFrQmtqQyxFQUFjLElBQU0sSUFDdENuakMsRUFBZ0JtakMsRUFBYyxHQUFLLElBQ25DbnJCLEVBQVVyUSxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLENBQUViLEtBQU0sVUFBV3BVLFNBQVV5cEMsRUFBZXpwQyxFQUFTNVAsR0FBUSxFQUFHOFMsZ0JBQWlCQSxFQUFpQkQsY0FBZUEsRUFBZTZtQyxhQUFjLElBQUtDLFVBQVcsRUFBR3hwQyxVQUFXLElBQU1tcEMsR0FBaUJwZ0MsR0FJL08sT0FBT29ILEVBQU1zNUIsd0JBQXdCNTVDLEVBQU02cUIsT0FHL0MsT0FBTzFsQixRQUFRa0gsSUFBSW90QyxHQUFvQnQ4QyxLQUFLcThDLElBRWhEOUMsRUFBMEJodUMsVUFBVWt4Qyx3QkFBMEIsU0FBVTU1QyxFQUFNa1osR0FFMUUsT0FBT29SLEdBQWV0cUIsRUFETi9DLEtBQUtzNkMsbUJBQW1CdjNDLEdBQ0QsRUFBR2taLElBRTlDdzlCLEVBQTBCaHVDLFVBQVVhLGNBQWdCLFdBQ2hELElBQUkrVyxFQUFRcmpCLEtBQ1pxMEIsSUFBUyxTQUFVdHhCLEdBQVEsT0FBT3NnQixFQUFNaTNCLG1CQUFtQnYzQyxHQUFNaUgsV0FRckV5dkMsRUFBMEJodUMsVUFBVTZ1QyxtQkFBcUIsU0FBVXYzQyxHQUMvRCxJQUFJbUcsRUFBSXNFLEVBQ0pvdkMsRUFBVSxRQUFVNzVDLEVBQUt3bUMsY0FFN0IsT0FEMEJ2cEMsS0FBS3dnQixjQUFjeUIsV0FBVzI2QixJQUdsRDU4QyxLQUFLd2dCLGNBQWN1eEIsU0FBU2h2QyxFQUE0RyxRQUFyR3lLLEVBQXNELFFBQWhEdEUsRUFBS2xKLEtBQUt3Z0IsY0FBY3lCLFdBQVcvRyxlQUE0QixJQUFQaFMsT0FBZ0IsRUFBU0EsRUFBR25HLFVBQTBCLElBQVB5SyxFQUFnQkEsRUFBSyxJQUUvS2lzQyxFQUEwQmh1QyxVQUFVd3VDLGFBQWUsU0FBVTVxQixHQUN6RCxJQUFJaE0sRUFBUXJqQixLQUNacTBCLElBQVMsU0FBVXR4QixHQUdmLEdBQUtrNEMsR0FBV2w0QyxFQUZMc2dCLEVBQU1wQixXQUFXN0MsS0FFQWlFLEVBQU11MkIsa0JBQWxDLENBRUEsSUFBSTlWLEVBQWF6Z0IsRUFBTTdDLGNBQWNzakIsV0FDakNvWCxFQUFZNzNCLEVBQU1pM0IsbUJBQW1CdjNDLEdBQ3pDLEdBQUkrZ0MsR0FBY0EsRUFBV2xULE9BQVEsQ0FDakMsSUFBSTFuQixFQUFLNDZCLEVBQVdsVCxPQUFPOEssT0FBTzM0QixHQUFPNEQsRUFBTXVDLEVBQUd2QyxJQUFLQyxFQUFNc0MsRUFBR3RDLElBQ2hFczBDLEVBQVV0NkMsSUFBSXl1QixFQUFNdHNCLEdBQVE0YSxFQUFVdlcsSUFBSVQsRUFBS0MsRUFBSyxXQVNoRTZ5QyxFQUEwQmh1QyxVQUFVb3hDLCtCQUFpQyxXQUNqRSxJQUNJM3pDLEVBREFtYSxFQUFRcmpCLEtBRVJ3TixFQUFLeE4sS0FBS2lpQixXQUFZN0MsRUFBTzVSLEVBQUc0UixLQUFNeWtCLEVBQWtCcjJCLEVBQUdxMkIsZ0JBQzNEQyxFQUFhOWpDLEtBQUt3Z0IsY0FBY3NqQixXQUNwQyxHQUFLbmlCLEVBQVlraUIsSUFBcUJDLEdBQWU5akMsS0FBSzY1QyxZQUExRCxDQU1BNzVDLEtBQUtzTSxnQkFLTCxJQUFJd3dDLEVBQWMsQ0FBRS82QyxFQUFHLEVBQUdDLEVBQUcsR0FDN0JxeUIsSUFBUyxTQUFVdHhCLEdBQ2YsSUE1WlF3dEIsRUFBUW5pQixFQUNwQmdHLEVBQ0Eyb0MsRUFDQUMsRUF5WlE5QixFQUFZNzNCLEVBQU1pM0IsbUJBQW1CdjNDLEdBQ3pDLEdBQUltNEMsRUFBVyxDQUNYLElBQUkzeEMsRUFBUzJ4QyxFQUFVbDZDLE1BQ3ZCODdDLEVBQVkvNUMsSUEvWlJ3dEIsRUErWjJCLENBQUU1cEIsSUFBSzRDLEVBQVEzQyxJQUFLMkMsR0EvWnZDNkUsRUErWmlEaVYsRUFBTXcyQixZQUFZOTJDLEdBOVp2RnFSLEVBQVMsR0FDVDJvQyxFQUFlNXNCLEdBQVdJLElBQzFCeXNCLEVBQWU3c0IsR0FBVy9oQixJQUNYMnVDLEVBQ2Yzb0MsRUFBU3VKLEVBQVVsWCxTQUFTMkgsRUFBT3pILElBQUt5SCxFQUFPeEgsSUFBTW0yQyxFQUFjeHNCLEVBQU81cEIsS0FFckVvMkMsRUFBZUMsSUFDcEI1b0MsRUFBU3VKLEVBQVVsWCxTQUFTOHBCLEVBQU81cEIsSUFBSzRwQixFQUFPM3BCLElBQU1vMkMsRUFBYzV1QyxFQUFPekgsTUFFdkVnWCxFQUFVcy9CLE1BQU0sRUFBRyxFQUFHN29DLFFBMlp6QixJQUFJaW1CLEVBQW9CcjZCLEtBQUt3Z0IsY0FBY3lCLFdBQVdvWSxrQkFDdERyNkIsS0FBS3dnQixjQUFjd1gsY0FBYzlyQixNQUFNZ0IsVUFBWW10QixFQUM3Q0EsRUFBa0IsR0FBSSxJQUN0QixPQUNxQixRQUExQm54QixFQUFLNDZCLEVBQVdodEIsWUFBeUIsSUFBUDVOLEdBQXlCQSxFQUFHa3hCLGVBQy9EMEosRUFBV2xKLGVBQ1g1NkIsS0FBS3E2QyxxQkFLTGhtQixJQUFTLFNBQVV0eEIsR0FDZixHQUFLazRDLEdBQVdsNEMsRUFBTXFjLEVBQU0sTUFBNUIsQ0FLQSxJQUFJODdCLEVBQVk3M0IsRUFBTWkzQixtQkFBbUJ2M0MsR0FDckNtRyxFQUFLbWEsRUFBTXcyQixZQUFZOTJDLEdBQU80RCxFQUFNdUMsRUFBR3ZDLElBQUtDLEVBQU1zQyxFQUFHdEMsSUFDekRzMEMsRUFBVXQ2QyxJQUFJK2MsRUFBVXZXLElBQUlULEVBQUtDLEVBQUtrMkMsRUFBWS81QyxXQUcxRDAyQyxFQUEwQmh1QyxVQUFVeXhDLGFBQWUsV0FDL0MsSUFDSWgwQyxFQURBbWEsRUFBUXJqQixLQUVadzVDLEdBQW9CNTRDLElBQUlaLEtBQUt3Z0IsY0FBZXhnQixNQUM1QyxJQUlJbTlDLEVBQXNCbFEsR0FKWmp0QyxLQUFLd2dCLGNBQWN3WCxjQUlrQixlQUFlLFNBQVUvZSxHQUN4RSxJQUFJL1AsRUFBS21hLEVBQU1wQixXQUFZN0MsRUFBT2xXLEVBQUdrVyxLQUFNNVIsRUFBS3RFLEVBQUdtOUIsYUFDbkRqbkIsU0FEdUYsSUFBUDVSLEdBQXVCQSxJQUMvRTZWLEVBQU05VCxNQUFNMEosTUFFcENta0MsRUFBeUIsV0FFckJ6N0IsRUFEa0IwQixFQUFNcEIsV0FBVzRoQixtQkFFbkN4Z0IsRUFBTXcyQixZQUFjeDJCLEVBQU0rM0IsMEJBRzlCdFgsRUFBYTlqQyxLQUFLd2dCLGNBQWNzakIsV0FDaEN1WixFQUE0QnZaLEVBQVd4cEIsaUJBQWlCLFVBQVc4aUMsR0FDbkV0WixJQUFlQSxFQUFXbFQsU0FDQyxRQUExQjFuQixFQUFLNDZCLEVBQVdodEIsWUFBeUIsSUFBUDVOLEdBQXlCQSxFQUFHa3hCLGVBQy9EMEosRUFBV2xKLGdCQUVmd2lCLElBS0EsSUFBSUUsRUFBcUJ6UyxHQUFZaitCLE9BQVEsVUFBVSxXQUNuRCxPQUFPeVcsRUFBTXc1QixvQ0FtQmpCLE9BYkEvWSxFQUFXeHBCLGlCQUFpQixhQUFhLFNBQVdwUixHQUNoRCxJQUFJbU4sRUFBUW5OLEVBQUdtTixNQUFPaWlCLEVBQW1CcHZCLEVBQUdvdkIsaUJBQ3hDalYsRUFBTXMyQixZQUFjcmhCLElBQ3BCakUsSUFBUyxTQUFVdHhCLEdBQ2YsSUFBSXFLLEVBQWNpVyxFQUFNaTNCLG1CQUFtQnYzQyxHQUN0Q3FLLElBRUxpVyxFQUFNaU0sWUFBWXZzQixJQUFTc1QsRUFBTXRULEdBQU1SLFVBQ3ZDNkssRUFBWXhNLElBQUl3TSxFQUFZcE0sTUFBUXFWLEVBQU10VCxHQUFNUixlQUVwRDhnQixFQUFNN0MsY0FBY29mLGlCQUdyQixXQUNIMGQsSUFDQUgsSUFDQUUsTUFHUjVELEVBQTBCaHVDLFVBQVV3VyxTQUFXLFdBQzNDLElBQUlsRCxFQUFRL2UsS0FBS3dnQixjQUFjeUIsV0FDM0IvWSxFQUFLNlYsRUFBTUssS0FBTUEsT0FBYyxJQUFQbFcsR0FBd0JBLEVBQUlzRSxFQUFLdVIsRUFBTXk3QixrQkFBbUJBLE9BQTJCLElBQVBodEMsR0FBd0JBLEVBQUk2bEIsRUFBS3RVLEVBQU1vN0IsZ0JBQWlCQSxPQUF5QixJQUFQOW1CLEdBQXdCQSxFQUFJQyxFQUFLdlUsRUFBTThrQixnQkFBaUJBLE9BQXlCLElBQVB2USxHQUF3QkEsRUFBSUMsRUFBS3hVLEVBQU1nNkIsWUFBYUEsT0FBcUIsSUFBUHhsQixFQUFnQnNsQixHQUFpQnRsQixFQUFJOEUsRUFBS3RaLEVBQU1xOUIsYUFBY0EsT0FBc0IsSUFBUC9qQixHQUF1QkEsRUFDcGEsT0FBTzlhLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSTdJLEdBQVEsQ0FBRUssS0FBTUEsRUFBTW83QixrQkFBbUJBLEVBQW1CTCxnQkFBaUJBLEVBQWlCdFcsZ0JBQWlCQSxFQUFpQmtWLFlBQWFBLEVBQWFxRCxhQUFjQSxLQUU5TTNDLEVBNVltQyxHQThZOUMsU0FBU3dCLEdBQVd6MEMsRUFBVzRZLEVBQU13NkIsR0FDakMsU0FBa0IsSUFBVHg2QixHQUFpQkEsSUFBUzVZLEdBQ1QsT0FBckJvekMsR0FBNkJBLElBQXFCcHpDLEdBNEUzRCxJQUFJNFksR0FBTyxDQUNQRyxJQUFLb3dCLElBN0JULFNBQXVCem1DLEdBQ25CLElBQUlxMEMsRUFBUXIwQyxFQUFHcTBDLE1BQU9DLEVBQWF0MEMsRUFBR3MwQyxXQUFZQyxFQUFXdjBDLEVBQUd1MEMsU0FBVUMsRUFBb0J4MEMsRUFBR3cwQyxrQkFBbUJsOUIsRUFBZ0J0WCxFQUFHc1gsY0FDbkltOUIsRUFBZUosR0FBU0MsR0FBY0MsR0FBWUMsRUFDbER4RCxFQUFhMThCLEVBQU15RixPQUFPLE1BQzFCL0MsRUFBcUIxQyxFQUFNK0MsV0FBV04sR0FBcUJDLG1CQUMzRDYyQixFQUFXLENBQ1hrQixlQUFnQnlGLEVBQ2hCN21DLFFBQVMybUMsRUFDVGhHLE9BQVErRixFQUNSL2xDLE1BQU8sU0FBVXlCLEVBQU80MEIsR0FDcEJxTSxFQUFXN3BDLFFBQVUsS0FDckJvdEMsR0FBWUEsRUFBU3hrQyxFQUFPNDBCLEtBR3BDcndCLEVBQU1xRCxXQUFVLFdBQ2UsT0FBdkJxNUIsRUFBVzdwQyxTQUNYNnBDLEVBQVc3cEMsUUFBUThuQyxlQUFlcEIsTUFRMUM3SixHQUFnQjFzQixFQUFlLGNBQWVtOUIsR0FMOUMsU0FBdUIxa0MsR0FDbkJpaEMsRUFBVzdwQyxRQUFVLElBQUl5bUMsR0FBVzc5QixFQUFPODlCLEVBQVUsQ0FDakQ3MkIsbUJBQW9CQSxNQUk1Qit0QixJQUFpQixXQUFjLE9BQU9pTSxFQUFXN3BDLFNBQVc2cEMsRUFBVzdwQyxRQUFRd25DLFlBSy9FejRCLEtBQU11d0IsSUFwRFYsU0FBaUI1d0IsR0FDYixJQUFJNitCLEVBQW9CNytCLEVBQU04K0IsYUFBY3I5QixFQUFnQnpCLEVBQU15QixjQUM5RHE5QixFQUFlOTZCLEdBQVksV0FBYyxPQUFPLElBQUkwMkIsR0FBMEJqNUIsTUFHbEZoRCxFQUFNcUQsV0FBVSxXQUFjLE9BQU8rOEIsR0FBcUJBLEVBQWtCamtDLFVBQVVra0MsS0FBa0IsQ0FBQ0EsRUFBY0QsSUFFdkhwZ0MsRUFBTXFELFdBQVUsV0FBYyxPQUFPZzlCLEVBQWFYLGlCQUFtQixDQUFDVyxRQWdEdEVDLEdBQVEsQ0FDUixnQkFDQSxzQkFDQSxlQUNBLG9CQUNBLFNBQ0EsU0FDQSxvQkFDQSwwQkFDQSxpQkFDQSx1QkFDQSxnQkFDQSxXQW9GQXQ5QixHQUFnQixTQUFVdFgsR0FDMUIsSUFBSXNFLEVBQUt0RSxFQUFHNjBDLFNBQVVBLE9BQWtCLElBQVB2d0MsRUFBZ0IsR0FBS0EsRUFBSXd3QyxFQUFROTBDLEVBQUc4MEMsTUFBT3pILEVBQWdCcnRDLEVBQUdxdEMsY0FBZXJFLEVBQXVCaHBDLEVBQUdncEMscUJBQXNCN1YsRUFBcUJuekIsRUFBR216QixtQkFBb0I0aEIsRUFBaUIvMEMsRUFBR2diLE9BQVFnNkIsRUFBd0JoMUMsRUFBR2cxQyxzQkFBdUJDLEVBQTZCajFDLEVBQUdpMUMsMkJBQTRCbkssRUFBbUI5cUMsRUFBRzhxQyxpQkFBa0IxSyxFQUE4QnBnQyxFQUFHb2dDLDRCQUM3WixPQUFPLFNBQVVwZ0MsRUFBSXdELEdBQ2pCLElBQUlxTyxFQUFTN1IsRUFBRzZSLE9BQVFnRSxFQUFRN1YsRUFBRzZWLE1BQU91a0IsRUFBYXA2QixFQUFHbzZCLFdBQVlDLEVBQXdCcjZCLEVBQUdxNkIsc0JBQXVCTixFQUFjLzVCLEVBQUcrNUIsWUFBYTFKLEVBQXFCcndCLEVBQUdxd0Isd0JBQzlKLElBQVo3c0IsSUFBc0JBLEVBQVUsSUFDcEMsSUFRSStsQixFQWlDQTJyQixFQXpDQTFoQyxHQUFZLEVBQ1ptVyxFQUFlb1EsRUFBWXBRLGFBQWNvVyxFQUFjaEcsRUFBWWdHLFlBWW5Fb1YsRUFwR1osV0FDSSxJQUFJQyxFQUFXUixHQUFNLzBDLEtBQUksV0FBYyxPQUFPLElBQUltYSxLQUM5Q3E3QixFQUFvQixHQUNwQkYsRUFBYSxDQUNiRyxrQkFBbUIsV0FBYyxPQUFPRixFQUFTeDdDLFNBQVEsU0FBVTI3QyxHQUFXLE9BQU9BLEVBQVFoN0IsWUFDN0ZpN0Isb0JBQXFCLFNBQVUzL0IsR0FDM0IrK0IsR0FBTWg3QyxTQUFRLFNBQVVELEdBQ3BCLElBQUlxRyxFQUNBeTFDLEVBQUssS0FBTzk3QyxFQUNaKzdDLEVBQWU3L0IsRUFBTTQvQixHQUVVLFFBQWxDejFDLEVBQUtxMUMsRUFBa0IxN0MsVUFBMEIsSUFBUHFHLEdBQXlCQSxFQUFHTSxLQUFLKzBDLEdBRXhFSyxJQUNBTCxFQUFrQjE3QyxHQUFRdzdDLEVBQVdNLEdBQUlDLFNBZXpELE9BVkFOLEVBQVN4N0MsU0FBUSxTQUFVMjdDLEVBQVMvNEMsR0FDaEMyNEMsRUFBVyxLQUFPUCxHQUFNcDRDLElBQU0sU0FBVTBkLEdBQVcsT0FBT3E3QixFQUFRL3dDLElBQUkwVixJQUN0RWk3QixFQUFXLFNBQVdQLEdBQU1wNEMsSUFBTSxXQUU5QixJQURBLElBQUlTLEVBQU8sR0FDRnF4QixFQUFLLEVBQUdBLEVBQUtDLFVBQVV0d0IsT0FBUXF3QixJQUNwQ3J4QixFQUFLcXhCLEdBQU1DLFVBQVVELEdBRXpCLE9BQU9pbkIsRUFBUW43QixPQUFPcVUsTUFBTThtQixFQUFTbGhDLEVBQU0yTyxjQUFjLEdBQUkzTyxFQUFNZ0UsT0FBT3BiLElBQU8sUUFHbEZrNEMsRUF1RWNRLEdBTWIvOUMsRUFBUyxJQUFJQyxJQUtiKzlDLEVBQXFCLElBQUkvOUMsSUFNekJnK0MsRUFBbUIsR0FLbkJ4akMsRUFBYWdDLEVBQU1xSyxTQUFTLEdBQUlpTCxHQVdwQyxTQUFTM08sSUFDQXVPLEdBQWEvVixJQUVsQnNpQyxJQUNBZixFQUFleHJCLEVBQVV3VyxFQUFhbHFCLEVBQU03UyxNQUFPeEwsRUFBUW9qQyxhQUUvRCxTQUFTa2IsSUFDTGhCLEVBQU10OUMsRUFBU3VvQyxFQUFhcFcsRUFBY25tQixFQUFTcVMsR0FFdkQsU0FBU25ELElBQ0x5aUMsRUFBV1ksYUFBYXBzQixHQUs1QixTQUFTcXNCLEVBQWtCbnpDLEVBQUt6SCxHQUM1QixJQUFJNjZDLEVBQWlCNzZDLEVBQU1tZ0IsVUFBUyxTQUFVMjZCLEdBQzFDdnNCLEVBQWE5bUIsR0FBT3F6QyxFQUNwQnJnQyxFQUFNNE8sVUFBWWxQLEVBQXVCLFFBQUU3QyxPQUFPQSxHQUFRLEdBQU8sTUFFakV5akMsRUFBd0IvNkMsRUFBTXNnQixnQkFBZ0Jsa0IsRUFBUW94QixnQkFDMURndEIsRUFBbUJsK0MsSUFBSW1MLEdBQUssV0FDeEJvekMsSUFDQUUsT0FhUixJQUFJQyxFQUFzQmhXLEVBQTRCdnFCLEdBQ3RELElBQUssSUFBSWhULEtBQU91ekMsRUFBcUIsQ0FDakMsSUFBSWg3QyxFQUFRZzdDLEVBQW9CdnpDLFFBQ056TCxJQUF0QnV5QixFQUFhOW1CLElBQXNCb1osRUFBYzdnQixJQUNqREEsRUFBTTFELElBQUlpeUIsRUFBYTltQixJQUFNLEdBTXJDLElBQUlnK0IsRUFBd0J6bkIsRUFBMkJ2RCxHQUNuRGlyQixFQUFnQnJuQixFQUFtQjVELEdBQ25DcmUsRUFBVTZjLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsQ0FBRW0yQixTQUFVQSxFQUtwRDF0QyxRQUFTLEtBSVQySyxNQUFPRCxFQUFTQSxFQUFPQyxNQUFRLEVBQUksRUFBR0QsT0FBUUEsRUFBUWthLFNBQVUsSUFBSTd4QixJQUlwRWtnQyxXQUFZQSxFQUFZL0osbUJBQW9CQSxFQU01QytZLGdCQUFpQnRJLEVBQWdCLElBQUk1bUMsU0FBUTlDLEVBTzdDNDJCLGVBQVc1MkIsRUFTWHMxQyx1QkFBd0JweEMsUUFBUXVXLE1BQUFBLE9BQXVDLEVBQVNBLEVBQU8yQixhQUt2RjZtQixzQkFBdUJBLEVBTXZCN21CLFVBQVcsV0FBYyxPQUFPbFksUUFBUWl1QixJQUFjbFcsTUFBTyxTQUFVZ2pDLEdBQ25FN2lDLEdBQVksRUFDWitWLEVBQVcveEIsRUFBUTJQLFFBQVVrdkMsRUFDekI3K0MsRUFBUW9qQyxZQUNScGpDLEVBQVFvakMsV0FBV3ZuQixNQUFNZ2pDLEdBRXpCdlYsR0FBaUJqdkIsSUFBV2d2QixJQUM1QnFVLEVBQXdCcmpDLE1BQUFBLE9BQXVDLEVBQVNBLEVBQU95a0MsZ0JBQWdCOStDLElBRW5HSSxFQUFPZ0MsU0FBUSxTQUFVd0IsRUFBT3lILEdBQU8sT0FBT216QyxFQUFrQm56QyxFQUFLekgsTUFDckV5VyxNQUFBQSxHQUFnREEsRUFBT2thLFNBQVN2bkIsSUFBSWhOLEdBQ3BFQSxFQUFRdWhDLFNBQVNsakIsSUFLckIwYSxRQUFTLFdBQ0wsSUFBSXZ3QixFQUMwQixRQUE3QkEsRUFBS3hJLEVBQVFvakMsa0JBQStCLElBQVA1NkIsR0FBeUJBLEVBQUd1d0IsVUFDbEUvYixFQUFLa2MsV0FBV2hlLE9BQU9BLEdBQ3ZCOEIsRUFBS2tjLFdBQVcxVixPQUFPQSxHQUN2QjQ2QixFQUFtQmg4QyxTQUFRLFNBQVU2WSxHQUFVLE9BQU9BLE9BQ3REeWlDLE1BQUFBLEdBQThFQSxJQUM5RXJqQyxNQUFBQSxHQUFnREEsRUFBT2thLFNBQVNyZCxPQUFPbFgsR0FDdkUyOUMsRUFBV0csb0JBQ1gvckIsT0FBV255QixFQUNYb2MsR0FBWSxHQUtoQjhpQyxnQkFBaUIsU0FBVXJxQixHQUN2QixJQUFJanNCLEVBQ0F1MkMsRUFBcUIvK0MsRUFBUWcvQyx3QkFDakMsR0FBSUQsRUFFQSxPQUQ4QyxRQUE3Q3YyQyxFQUFLdTJDLEVBQW1Cbk4sdUJBQW9DLElBQVBwcEMsR0FBeUJBLEVBQUd3RSxJQUFJeW5CLEdBQy9FLFdBQ0gsT0FBT3NxQixFQUFtQm5OLGdCQUFnQjE2QixPQUFPdWQsS0FHMUQ2ZSxpQkFBa0IsU0FBVTJMLEdBSTNCLE9BQUszTCxHQUFvQitKLElBQWE0QixFQUFNNUIsU0FFckMvSixFQUFpQnR6QyxFQUFRczNCLGNBQWUybkIsRUFBTTNuQixlQUQxQyxHQU9mMG5CLHNCQUF1QixXQUNuQixPQUFPMVYsRUFBZ0J0cEMsRUFBVXFhLE1BQUFBLE9BQXVDLEVBQVNBLEVBQU8ya0MseUJBSzVGRSxZQUFhLFdBQWMsT0FBTzdnQyxFQUFNZ1osVUFJeENDLFlBQWEsV0FBYyxPQUFPdkYsR0FJbENpTixlQUFnQixTQUFVM3pCLEdBQU8sT0FBTzhtQixFQUFhOW1CLElBQVM0ekIsZUFBZ0IsU0FBVTV6QixFQUFLekgsR0FBUyxPQUFRdXVCLEVBQWE5bUIsR0FBT3pILEdBTWxJeS9CLGdCQUFpQixXQUFjLE9BQU9sUixHQUt0Q2d0QixjQUFlLFNBQVU5ZixHQUNqQnIvQixFQUFRdzJCLFlBQWM2SSxJQUUxQnIvQixFQUFRdzJCLFVBQVk2SSxFQUNwQnIvQixFQUFRb3hCLG1CQVNab2dCLHFCQUFzQixTQUFVOWpDLEVBQVEweEMsR0FFcEMsWUFEa0IsSUFBZEEsSUFBd0JBLEdBQVksR0FDakM1TixFQUFxQnh4QyxFQUFTME4sRUFBUTJRLEVBQU8rZ0MsSUFPeER6akIsbUJBQW9CLFdBQ2hCLE9BQU9BLEVBQW1CNUosRUFBVTFULElBTXhDaXpCLFNBQVUsU0FBVWptQyxFQUFLekgsR0FFakI1RCxFQUFRb3hDLFNBQVMvbEMsSUFDakJyTCxFQUFRcS9DLFlBQVloMEMsR0FDeEJqTCxFQUFPRixJQUFJbUwsRUFBS3pILEdBQ2hCdXVCLEVBQWE5bUIsR0FBT3pILEVBQU10RCxNQUMxQmsrQyxFQUFrQm56QyxFQUFLekgsSUFLM0J5N0MsWUFBYSxTQUFVaDBDLEdBQ25CLElBQUk3QyxFQUNKcEksRUFBTzhXLE9BQU83TCxHQUN5QixRQUF0QzdDLEVBQUs0MUMsRUFBbUI5OUMsSUFBSStLLFVBQXlCLElBQVA3QyxHQUF5QkEsSUFDeEU0MUMsRUFBbUJsbkMsT0FBTzdMLFVBQ25COG1CLEVBQWE5bUIsR0FDcEJveUMsRUFBMkJweUMsRUFBS2s5QixJQUtwQzZJLFNBQVUsU0FBVS9sQyxHQUFPLE9BQU9qTCxFQUFPSCxJQUFJb0wsSUFLN0NnbUMsU0FBVSxTQUFVaG1DLEVBQUtpMEMsR0FDckIsSUFBSTE3QyxFQUFReEQsRUFBT0UsSUFBSStLLEdBS3ZCLFlBSmN6TCxJQUFWZ0UsUUFBd0NoRSxJQUFqQjAvQyxJQUN2QjE3QyxFQUFROEksRUFBWTR5QyxHQUNwQnQvQyxFQUFRc3hDLFNBQVNqbUMsRUFBS3pILElBRW5CQSxHQUtYNGQsYUFBYyxTQUFVb1MsR0FBWSxPQUFPeHpCLEVBQU9nQyxRQUFRd3hCLElBTTFEcWUsVUFBVyxTQUFVNW1DLEdBQ2pCLElBQUk3QyxFQUNKLE9BQW9DLFFBQTVCQSxFQUFLMnBCLEVBQWE5bUIsVUFBeUIsSUFBUDdDLEVBQWdCQSxFQUFLZzFDLEVBQXNCenJCLEVBQVUxbUIsRUFBS1csSUFNMUdrbUMsY0FBZSxTQUFVN21DLEVBQUt6SCxHQUMxQmlYLEVBQVd4UCxHQUFPekgsR0FNdEJpeUMsY0FBZSxTQUFVeHFDLEdBQ3JCLEdBQUl3cUMsRUFBZSxDQUNmLElBQUlub0MsRUFBU21vQyxFQUFjeDNCLEVBQU9oVCxHQUNsQyxRQUFlekwsSUFBWDhOLElBQXlCK1csRUFBYy9XLEdBQ3ZDLE9BQU9BLEVBRWYsT0FBT21OLEVBQVd4UCxLQUNqQnN5QyxHQUFhLENBSWxCTCxNQUFPLFdBRUgsT0FEQWdCLElBQ08vVixHQUtYblgsZUFBZ0IsV0FDWnJULEVBQXVCLFFBQUV5RixPQUFPQSxHQUFRLEdBQU8sSUFRbkQwYixXQUFZMWIsRUFLWitkLFNBQVUsU0FBVWdlLElBQ1pBLEVBQVM1bEIsbUJBQXFCdGIsRUFBTXNiLG9CQUNwQzM1QixFQUFRb3hCLGlCQUVaL1MsRUFBUWtoQyxFQUNSNUIsRUFBV0ssb0JBQW9CdUIsR0FDL0JsQixFQTlZaEIsU0FBcUNyK0MsRUFBUzRQLEVBQU1DLEdBQ2hELElBQUlySCxFQUNKLElBQUssSUFBSTZDLEtBQU91RSxFQUFNLENBQ2xCLElBQUk0dkMsRUFBWTV2QyxFQUFLdkUsR0FDakJvMEMsRUFBWTV2QyxFQUFLeEUsR0FDckIsR0FBSW9aLEVBQWMrNkIsR0FLZHgvQyxFQUFRc3hDLFNBQVNqbUMsRUFBS20wQyxRQVNyQixHQUFJLzZCLEVBQWNnN0IsR0FLbkJ6L0MsRUFBUXN4QyxTQUFTam1DLEVBQUtxQixFQUFZOHlDLFNBRWpDLEdBQUlDLElBQWNELEVBTW5CLEdBQUl4L0MsRUFBUW94QyxTQUFTL2xDLEdBQU0sQ0FDdkIsSUFBSXEwQyxFQUFnQjEvQyxFQUFRcXhDLFNBQVNobUMsSUFFcENxMEMsRUFBYzc3QixhQUFlNjdCLEVBQWN4L0MsSUFBSXMvQyxRQUdoRHgvQyxFQUFRc3hDLFNBQVNqbUMsRUFBS3FCLEVBQW1ELFFBQXRDbEUsRUFBS3hJLEVBQVFnL0IsZUFBZTN6QixVQUF5QixJQUFQN0MsRUFBZ0JBLEVBQUtnM0MsSUFLbEgsSUFBSyxJQUFJbjBDLEtBQU93RSxPQUNNalEsSUFBZGdRLEVBQUt2RSxJQUNMckwsRUFBUXEvQyxZQUFZaDBDLEdBRTVCLE9BQU91RSxFQStWd0IrdkMsQ0FBNEIzL0MsRUFBUzRvQyxFQUE0QnZxQixHQUFRZ2dDLElBQzdGOThCLFNBQVUsV0FBYyxPQUFPbEQsR0FLbENzekIsV0FBWSxTQUFVeHZDLEdBQVEsSUFBSXFHLEVBQUksT0FBaUMsUUFBekJBLEVBQUs2VixFQUFNOUcsZ0JBQTZCLElBQVAvTyxPQUFnQixFQUFTQSxFQUFHckcsSUFJM0crMUIscUJBQXNCLFdBQWMsT0FBTzdaLEVBQU05QyxZQUFlNitCLHNCQUF1QixXQUNuRixPQUFPLzdCLEVBQU1tQixvQkFLakJnMUIsa0JBQW1CLFNBQVVvTCxHQUV6QixRQURzQixJQUFsQkEsSUFBNEJBLEdBQWdCLEdBQzVDQSxFQUNBLE9BQU92bEMsTUFBQUEsT0FBdUMsRUFBU0EsRUFBT202QixvQkFDbEUsSUFBS25MLEVBQXVCLENBQ3hCLElBQUl3VyxHQUFheGxDLE1BQUFBLE9BQXVDLEVBQVNBLEVBQU9tNkIsc0JBQXdCLEdBSWhHLFlBSHNCNTBDLElBQWxCeWUsRUFBTTdELFVBQ05xbEMsRUFBVXJsQyxRQUFVNkQsRUFBTTdELFNBRXZCcWxDLEVBR1gsSUFEQSxJQUFJbmxDLEVBQVUsR0FDTDFWLEVBQUksRUFBR0EsRUFBSTg2QyxHQUFpQjk2QyxJQUFLLENBQ3RDLElBQUl1K0IsRUFBU3djLEdBQWEvNkMsR0FDdEJtZCxFQUFPOUQsRUFBTWtsQixJQUNibmlCLEVBQWVlLEtBQWtCLElBQVRBLEtBQ3hCekgsRUFBUTZvQixHQUFVcGhCLEdBRzFCLE9BQU96SCxLQUVmLE9BQU8xYSxJQUdYKy9DLEdBQWVsakMsRUFBTTJPLGNBQWMsQ0FBQyxXQUFZM08sRUFBTWdFLE9BQU82eUIsS0FBdUIsR0FDcEZvTSxHQUFrQkMsR0FBYXQ1QyxPQUVuQyxTQUFTdTVDLEdBQWNwOEMsR0FDbkIsTUFBd0IsaUJBQVZBLEdBQXNCQSxFQUFNVCxXQUFXLFVBV3pELElBQUk4OEMsR0FBbUIsdURBU3ZCLFNBQVNDLEdBQWlCdndDLEVBQVMzUCxFQUFTc2EsUUFDMUIsSUFBVkEsSUFBb0JBLEVBQVEsR0FDaEN5QyxFQUFVdkwsVUFBVThJLEdBSFQsRUFHNEIseURBQTBEeUwsT0FBT3BXLEVBQVMseURBQ2pILElBQUluSCxFQUFLcVUsRUFBTWdFLE9BWG5CLFNBQTBCbFIsR0FDdEIsSUFBSXd3QyxFQUFRRixHQUFpQnY2QyxLQUFLaUssR0FDbEMsSUFBS3d3QyxFQUNELE1BQU8sQ0FBQyxHQUNaLElBQUkzM0MsRUFBS3FVLEVBQU1nRSxPQUFPcy9CLEVBQU8sR0FDN0IsTUFBTyxDQURrQzMzQyxFQUFHLEdBQWVBLEVBQUcsSUFPeEM0M0MsQ0FBaUJ6d0MsR0FBVSxHQUFJMHdDLEVBQVE3M0MsRUFBRyxHQUFJcW1DLEVBQVdybUMsRUFBRyxHQUVsRixHQUFLNjNDLEVBQUwsQ0FHQSxJQUFJNVcsRUFBV3Y5QixPQUFPUixpQkFBaUIxTCxHQUFTeUwsaUJBQWlCNDBDLEdBQ2pFLE9BQUk1VyxFQUNPQSxFQUFTem1DLE9BRVhnOUMsR0FBY25SLEdBRVpxUixHQUFpQnJSLEVBQVU3dUMsRUFBU3NhLEVBQVEsR0FHNUN1MEIsR0FnRGYsSUF1Qkl5UixHQXZCQUMsR0FBaUIsSUFBSTc5QyxJQUFJLENBQ3pCLFFBQ0EsU0FDQSxNQUNBLE9BQ0EsUUFDQSxTQUNBLElBQ0EsTUFFQTg5QyxHQUFrQixTQUFVbjFDLEdBQU8sT0FBT2sxQyxHQUFldGdELElBQUlvTCxJQUk3RG8xQyxHQUFzQixTQUFVNzhDLEVBQU8yTyxHQUd2QzNPLEVBQU0xRCxJQUFJcVMsR0FBSSxHQUNkM08sRUFBTTFELElBQUlxUyxJQUVWbXVDLEdBQWdCLFNBQVVqZ0QsR0FDMUIsT0FBT0EsSUFBTXljLEVBQWdCaUssUUFBVTFtQixJQUFNeWMsRUFBZ0JxSyxLQUdqRSxTQUFXKzRCLEdBQ1BBLEVBQTRCLE1BQUksUUFDaENBLEVBQTZCLE9BQUksU0FDakNBLEVBQTJCLEtBQUksT0FDL0JBLEVBQTRCLE1BQUksUUFDaENBLEVBQTBCLElBQUksTUFDOUJBLEVBQTZCLE9BQUksU0FOckMsQ0FPR0EsS0FBeUJBLEdBQXVCLEtBQ25ELElBQUlLLEdBQW1CLFNBQVVDLEVBQVFDLEdBQ3JDLE9BQU94NkMsV0FBV3U2QyxFQUFPaDdDLE1BQU0sTUFBTWk3QyxLQUVyQ0MsR0FBeUIsU0FBVUMsRUFBTUMsR0FDekMsT0FBTyxTQUFVQyxFQUFPejRDLEdBQ3BCLElBQUlnRSxFQUFZaEUsRUFBR2dFLFVBQ25CLEdBQWtCLFNBQWRBLElBQXlCQSxFQUN6QixPQUFPLEVBQ1gsSUFBSTAwQyxFQUFXMTBDLEVBQVUyekMsTUFBTSxzQkFDL0IsR0FBSWUsRUFDQSxPQUFPUCxHQUFpQk8sRUFBUyxHQUFJRixHQUdyQyxJQUFJSixFQUFTcDBDLEVBQVUyekMsTUFBTSxvQkFDN0IsT0FBSVMsRUFDT0QsR0FBaUJDLEVBQU8sR0FBSUcsR0FHNUIsSUFLbkI1a0MsR0FBZ0IsSUFBSXpaLElBQUksQ0FBQyxJQUFLLElBQUssTUFDbkN5K0MsR0FBZ0NydEIsR0FBZXZsQixRQUFPLFNBQVVsRCxHQUFPLE9BQVE4USxHQUFjbGMsSUFBSW9MLE1BZWpHKzFDLEdBQW1CLENBRW5CbDVCLE1BQU8sU0FBVTFmLEVBQUlzRSxHQUNqQixJQUFJekwsRUFBSW1ILEVBQUduSCxFQUNQc3hCLEVBQUs3bEIsRUFBR2ljLFlBQWFBLE9BQXFCLElBQVA0SixFQUFnQixJQUFNQSxFQUFJQyxFQUFLOWxCLEVBQUcrYixhQUFjQSxPQUFzQixJQUFQK0osRUFBZ0IsSUFBTUEsRUFDNUgsT0FBT3Z4QixFQUFFNkUsSUFBTTdFLEVBQUU0RSxJQUFNSSxXQUFXMGlCLEdBQWUxaUIsV0FBV3dpQixJQUVoRVQsT0FBUSxTQUFVNWYsRUFBSXNFLEdBQ2xCLElBQUl4TCxFQUFJa0gsRUFBR2xILEVBQ1BxeEIsRUFBSzdsQixFQUFHOGIsV0FBWUEsT0FBb0IsSUFBUCtKLEVBQWdCLElBQU1BLEVBQUlDLEVBQUs5bEIsRUFBR2djLGNBQWVBLE9BQXVCLElBQVA4SixFQUFnQixJQUFNQSxFQUM1SCxPQUFPdHhCLEVBQUU0RSxJQUFNNUUsRUFBRTJFLElBQU1JLFdBQVd1aUIsR0FBY3ZpQixXQUFXeWlCLElBRS9EUCxJQUFLLFNBQVUwNEIsRUFBT3o0QyxHQUNsQixJQUFJK2YsRUFBTS9mLEVBQUcrZixJQUNiLE9BQU9saUIsV0FBV2tpQixJQUV0QkcsS0FBTSxTQUFVdTRCLEVBQU96NEMsR0FDbkIsSUFBSWtnQixFQUFPbGdCLEVBQUdrZ0IsS0FDZCxPQUFPcmlCLFdBQVdxaUIsSUFFdEJELE9BQVEsU0FBVWpnQixFQUFJc0UsR0FDbEIsSUFBSXhMLEVBQUlrSCxFQUFHbEgsRUFDUGluQixFQUFNemIsRUFBR3liLElBQ2IsT0FBT2xpQixXQUFXa2lCLElBQVFqbkIsRUFBRTRFLElBQU01RSxFQUFFMkUsTUFFeEN1aUIsTUFBTyxTQUFVaGdCLEVBQUlzRSxHQUNqQixJQUFJekwsRUFBSW1ILEVBQUduSCxFQUNQcW5CLEVBQU81YixFQUFHNGIsS0FDZCxPQUFPcmlCLFdBQVdxaUIsSUFBU3JuQixFQUFFNkUsSUFBTTdFLEVBQUU0RSxNQUd6QzVFLEVBQUd5L0MsR0FBdUIsRUFBRyxJQUM3QngvQyxFQUFHdy9DLEdBQXVCLEVBQUcsS0FtSmpDLFNBQVNPLEdBQWV2aEMsRUFBZXBTLEVBQVFnRyxFQUFRZzJCLEdBQ25ELE9BaFBtQixTQUFVaDhCLEdBQzdCLE9BQU8vQyxPQUFPdVAsS0FBS3hNLEdBQVE0USxLQUFLa2lDLElBK096QmMsQ0FBaUI1ekMsR0FySFcsU0FBVW9TLEVBQWVwUyxFQUFRZ0csRUFBUWcyQixRQUM3RCxJQUFYaDJCLElBQXFCQSxFQUFTLFNBQ1osSUFBbEJnMkIsSUFBNEJBLEVBQWdCLElBQ2hEaDhCLEVBQVNtUCxFQUFNcUssU0FBUyxHQUFJeFosR0FDNUJnOEIsRUFBZ0I3c0IsRUFBTXFLLFNBQVMsR0FBSXdpQixHQUNuQyxJQUFJNlgsRUFBdUI1MkMsT0FBT3VQLEtBQUt4TSxHQUFRYSxPQUFPaXlDLElBR2xEZ0IsRUFBeUIsR0FDekJDLEdBQXNDLEVBQ3RDQyxFQUF1QixHQTRFM0IsR0EzRUFILEVBQXFCbi9DLFNBQVEsU0FBVWlKLEdBQ25DLElBQUl6SCxFQUFRa2MsRUFBY3V4QixTQUFTaG1DLEdBQ25DLEdBQUt5VSxFQUFjc3hCLFNBQVMvbEMsR0FBNUIsQ0FFQSxJQUdJczJDLEVBSEExekMsRUFBT3lGLEVBQU9ySSxHQUNkdTJDLEVBQVc3USxHQUF1QjlpQyxHQUNsQ3NFLEVBQUs3RSxFQUFPckMsR0FNaEIsR0FBSThhLEVBQWtCNVQsR0FBSyxDQUN2QixJQUFJZ0MsRUFBZWhDLEVBQUc5TCxPQUNsQnNJLEVBQXNCLE9BQVZ3RCxFQUFHLEdBQWMsRUFBSSxFQUNyQ3RFLEVBQU9zRSxFQUFHeEQsR0FDVjZ5QyxFQUFXN1EsR0FBdUI5aUMsR0FDbEMsSUFBSyxJQUFJakosRUFBSStKLEVBQVcvSixFQUFJdVAsRUFBY3ZQLElBQ2pDMjhDLEVBTUQ1a0MsRUFBVXZMLFVBQVV1L0IsR0FBdUJ4K0IsRUFBR3ZOLE1BQVEyOEMsRUFBUSwyQ0FMOURBLEVBQVM1USxHQUF1QngrQixFQUFHdk4sSUFDbkMrWCxFQUFVdkwsVUFBVW13QyxJQUFXQyxHQUMxQmxCLEdBQWNrQixJQUFhbEIsR0FBY2lCLEdBQVUsc0VBUWhFQSxFQUFTNVEsR0FBdUJ4K0IsR0FFcEMsR0FBSXF2QyxJQUFhRCxFQUdiLEdBQUlqQixHQUFja0IsSUFBYWxCLEdBQWNpQixHQUFTLENBQ2xELElBQUloeUMsRUFBVS9MLEVBQU10RCxNQUNHLGlCQUFacVAsR0FDUC9MLEVBQU0xRCxJQUFJbUcsV0FBV3NKLElBRVAsaUJBQVA0QyxFQUNQN0UsRUFBT3JDLEdBQU9oRixXQUFXa00sR0FFcEJ0TyxNQUFNQyxRQUFRcU8sSUFBT292QyxJQUFXemtDLEVBQWdCcUssS0FDckQ3WixFQUFPckMsR0FBT2tILEVBQUdsSyxJQUFJaEMsa0JBR25CdTdDLE1BQUFBLE9BQTJDLEVBQVNBLEVBQVNwMUMsYUFDbEVtMUMsTUFBQUEsT0FBdUMsRUFBU0EsRUFBT24xQyxhQUM5QyxJQUFUeUIsR0FBcUIsSUFBUHNFLEdBR0YsSUFBVHRFLEVBQ0FySyxFQUFNMUQsSUFBSXloRCxFQUFPbjFDLFVBQVV5QixJQUczQlAsRUFBT3JDLEdBQU91MkMsRUFBU3AxQyxVQUFVK0YsSUFNaENrdkMsSUFDREQsRUF0SnBCLFNBQXlDMWhDLEdBQ3JDLElBQUkraEMsRUFBb0IsR0FXeEIsT0FWQVYsR0FBOEIvK0MsU0FBUSxTQUFVaUosR0FDNUMsSUFBSXpILEVBQVFrYyxFQUFjdXhCLFNBQVNobUMsUUFDckJ6TCxJQUFWZ0UsSUFDQWkrQyxFQUFrQi9nRCxLQUFLLENBQUN1SyxFQUFLekgsRUFBTXRELFFBQ25Dc0QsRUFBTTFELElBQUltTCxFQUFJbEksV0FBVyxTQUFXLEVBQUksT0FJNUMwK0MsRUFBa0JwN0MsUUFDbEJxWixFQUFjb2YsYUFDWDJpQixFQTJJYUMsQ0FBZ0NoaUMsR0FDcEMyaEMsR0FBc0MsR0FFMUNDLEVBQXFCNWdELEtBQUt1SyxHQUMxQnErQixFQUFjcitCLFFBQ2F6TCxJQUF2QjhwQyxFQUFjcitCLEdBQ1JxK0IsRUFBY3IrQixHQUNkcUMsRUFBT3JDLEdBQ2pCbzFDLEdBQW9CNzhDLEVBQU8yTyxRQUluQ212QyxFQUFxQmo3QyxPQUFRLENBQzdCLElBQUlzN0MsRUFBWUwsRUFBcUI3Z0QsUUFBUSxXQUFhLEVBQ3BEcUwsT0FBTzgxQyxZQUNQLEtBQ0ZDLEVBdkhtQixTQUFVdjBDLEVBQVFvUyxFQUFlb2lDLEdBQzVELElBQUlDLEVBQWFyaUMsRUFBYzZiLHFCQUMzQjM3QixFQUFVOGYsRUFBY3dYLGNBQ3hCOHFCLEVBQXVCMTJDLGlCQUFpQjFMLEdBQ3hDZzlCLEVBQVVvbEIsRUFBcUJwbEIsUUFDL0J0cEIsRUFBUyxHQUdHLFNBQVpzcEIsR0FDQWxkLEVBQWNtZixlQUFlLFVBQVd2eEIsRUFBT3N2QixTQUFXLFNBSzlEa2xCLEVBQVk5L0MsU0FBUSxTQUFVaUosR0FDMUJxSSxFQUFPckksR0FBTysxQyxHQUFpQi8xQyxHQUFLODJDLEVBQVlDLE1BR3BEdGlDLEVBQWNvZixhQUNkLElBQUltakIsRUFBYXZpQyxFQUFjNmIscUJBUS9CLE9BUEF1bUIsRUFBWTkvQyxTQUFRLFNBQVVpSixHQUcxQixJQUFJekgsRUFBUWtjLEVBQWN1eEIsU0FBU2htQyxHQUNuQ28xQyxHQUFvQjc4QyxFQUFPOFAsRUFBT3JJLElBQ2xDcUMsRUFBT3JDLEdBQU8rMUMsR0FBaUIvMUMsR0FBS2czQyxFQUFZRCxNQUU3QzEwQyxFQTRGbUI0MEMsQ0FBeUI1MEMsRUFBUW9TLEVBQWU0aEMsR0FhdEUsT0FYSUYsRUFBdUIvNkMsUUFDdkIrNkMsRUFBdUJwL0MsU0FBUSxTQUFVb0csR0FDckMsSUFBSXNFLEVBQUsrUCxFQUFNZ0UsT0FBT3JZLEVBQUksR0FBSTZDLEVBQU15QixFQUFHLEdBQUlsSixFQUFRa0osRUFBRyxHQUN0RGdULEVBQWN1eEIsU0FBU2htQyxHQUFLbkwsSUFBSTBELE1BSXhDa2MsRUFBY29mLGFBRUksT0FBZDZpQixHQUNBNzFDLE9BQU9xMkMsU0FBUyxDQUFFaDZCLElBQUt3NUIsSUFDcEIsQ0FBRXIwQyxPQUFRdTBDLEVBQWlCdlksY0FBZUEsR0FHakQsTUFBTyxDQUFFaDhCLE9BQVFBLEVBQVFnOEIsY0FBZUEsR0FZdEM4WSxDQUFpQzFpQyxFQUFlcFMsRUFBUWdHLEVBQVFnMkIsR0FDaEUsQ0FBRWg4QixPQUFRQSxFQUFRZzhCLGNBQWVBLEdBTzNDLElBVUkrWSxHQUFhLENBQ2JwRixTQUFVLE1BQ1ZHLHNCQUF1QixTQUFVa0YsRUFBWXIzQyxHQUN6QyxHQUFJOG9CLEdBQWdCOW9CLEdBQU0sQ0FDdEIsSUFBSXMzQyxFQUFjNTNCLEdBQW9CMWYsR0FDdEMsT0FBT3MzQyxHQUFjQSxFQUFZMzdCLFNBQWUsRUFHaEQsSUFYZ0JobkIsRUFXWjRpRCxHQVhZNWlELEVBV3VCMGlELEVBVnhDeDJDLE9BQU9SLGlCQUFpQjFMLElBV3ZCLE9BQVNxa0MsR0FBZ0JoNUIsR0FDbkJ1M0MsRUFBY24zQyxpQkFBaUJKLEdBQy9CdTNDLEVBQWN2M0MsS0FBUyxHQUdyQ2lvQyxpQkFBa0IsU0FBVS93QyxFQUFHQyxHQU0zQixPQUFzQyxFQUEvQkQsRUFBRXNnRCx3QkFBd0JyZ0QsR0FBUyxHQUFLLEdBRW5EcXpDLGNBQWUsU0FBVXgzQixFQUFPaFQsR0FDNUIsSUFBSTdDLEVBQ0osT0FBOEIsUUFBdEJBLEVBQUs2VixFQUFNN1MsYUFBMEIsSUFBUGhELE9BQWdCLEVBQVNBLEVBQUc2QyxJQUV0RXN3QixtQkFBb0IsU0FBVTM3QixFQUFTd0ksR0FFbkMsT0FBT216QixHQUFtQjM3QixFQUREd0ksRUFBR2dYLHFCQVVoQzZWLGVBQWdCLFNBQVVyMUIsRUFBUzBpRCxFQUFZcmtDLEdBQzNDLElBQUlzYixFQUFvQnRiLEVBQU1zYixrQkFDOUIrb0IsRUFBV2wzQyxNQUFNZ0IsVUFBWW10QixFQUN2QkEsRUFBa0IsR0FBSSxJQUN0QixPQUVOMzVCLEVBQVFveEIsa0JBRVoweEIsaUJBQWtCLFNBQVUvd0IsRUFBVWd4QixHQUNsQ2h4QixFQUFTdm1CLE1BQU1nQixVQUFZdTJDLEVBQWF2M0MsTUFBTWdCLFdBRWxEaXhDLDJCQUE0QixTQUFVcHlDLEVBQUs3QyxHQUN2QyxJQUFJZzhCLEVBQU9oOEIsRUFBR2c4QixLQUFNaDVCLEVBQVFoRCxFQUFHZ0QsYUFDeEJnNUIsRUFBS241QixVQUNMRyxFQUFNSCxJQU1qQm1tQyxxQkFBc0IsU0FBVXh4QyxFQUFTd0ksRUFBSXNFLEVBQUlrUCxHQUM3QyxJQUFJeXBCLEVBQWtCMzRCLEVBQUcyNEIscUJBQ1AsSUFBZHpwQixJQUF3QkEsR0FBWSxHQUN4QyxJQUFJVCxFQUFhL1MsRUFBRytTLFdBQVltdUIsRUFBZ0JsaEMsRUFBR2toQyxjQUFlaDhCLEVBQVNtUCxFQUFNbk0sT0FBT2xJLEVBQUksQ0FBQyxhQUFjLGtCQUN2R2tMLEVBQVNVLEdBQVUxRyxFQUFRNk4sR0FBYyxHQUFJdmIsR0FZakQsR0FSSXlsQyxJQUNJaUUsSUFDQUEsRUFBZ0JqRSxFQUFnQmlFLElBQ2hDaDhCLElBQ0FBLEVBQVMrM0IsRUFBZ0IvM0IsSUFDekJnRyxJQUNBQSxFQUFTK3hCLEVBQWdCL3hCLEtBRTdCc0ksRUFBVyxDQUNYNjFCLEdBQXdCN3hDLEVBQVMwTixFQUFRZ0csR0FDekMsSUFBSXN2QyxFQXJGTSxTQUFVbGpDLEVBQWVwUyxFQUFRZ0csRUFBUWcyQixHQUMzRCxJQUFJRCxFQTdTUixTQUE2QjNwQixFQUFldFgsRUFBSWtoQyxHQUM1QyxJQUFJNThCLEVBQ0FZLEVBQVNtUCxFQUFNbk0sT0FBT2xJLEVBQUksSUFDMUJ4SSxFQUFVOGYsRUFBY3dYLGNBQzVCLEtBQU10M0IsYUFBbUI4SyxTQUNyQixNQUFPLENBQUU0QyxPQUFRQSxFQUFRZzhCLGNBQWVBLEdBaUI1QyxJQUFLLElBQUlyK0IsS0FkTHErQixJQUNBQSxFQUFnQjdzQixFQUFNcUssU0FBUyxHQUFJd2lCLElBR3ZDNXBCLEVBQWMwQixjQUFhLFNBQVU1ZCxHQUNqQyxJQUFJK0wsRUFBVS9MLEVBQU10RCxNQUNwQixHQUFLMC9DLEdBQWNyd0MsR0FBbkIsQ0FFQSxJQUFJODVCLEVBQVd5VyxHQUFpQnZ3QyxFQUFTM1AsR0FDckN5cEMsR0FDQTdsQyxFQUFNMUQsSUFBSXVwQyxPQUlGLzdCLEVBQVEsQ0FDcEIsSUFBSWlDLEVBQVVqQyxFQUFPckMsR0FDckIsR0FBSzIwQyxHQUFjcndDLEdBQW5CLENBRUEsSUFBSTg1QixFQUFXeVcsR0FBaUJ2d0MsRUFBUzNQLEdBQ3BDeXBDLElBR0wvN0IsRUFBT3JDLEdBQU9vK0IsRUFJVkMsSUFDOEIsUUFBN0I1OEIsRUFBSzQ4QixFQUFjcitCLFVBQXlCLElBQVB5QixJQUFzQjQ4QixFQUFjcitCLEdBQU9zRSxNQUV6RixNQUFPLENBQUVqQyxPQUFRQSxFQUFRZzhCLGNBQWVBLEdBd1F6QnVaLENBQW9CbmpDLEVBQWVwUyxFQUFRZzhCLEdBRzFELE9BQU8yWCxHQUFldmhDLEVBRnRCcFMsRUFBUys3QixFQUFTLzdCLE9BRTJCZ0csRUFEN0NnMkIsRUFBZ0JELEVBQVNDLGVBa0ZKd1osQ0FBZ0JsakQsRUFBUzBOLEVBQVFnRyxFQUFRZzJCLEdBQ3REQSxFQUFnQnNaLEVBQU90WixjQUN2Qmg4QixFQUFTczFDLEVBQU90MUMsT0FFcEIsT0FBT21QLEVBQU1xSyxTQUFTLENBQUUzTCxXQUFZQSxFQUFZbXVCLGNBQWVBLEdBQWlCaDhCLElBRXBGazdCLDRCQUE2QkYsR0FDN0I0VSxNQUFPLFNBQVV0OUMsRUFBU3VvQyxFQUFhcFcsRUFBY25tQixFQUFTcVMsUUFDaEN6ZSxJQUF0QkksRUFBUXcyQixZQUNSK1IsRUFBWS84QixNQUFNNnpCLFdBQWFyL0IsRUFBUXcyQixVQUNqQyxVQUNBLFVBRVYrTixHQUFnQmdFLEVBQWFwVyxFQUFjbm1CLEVBQVNxUyxFQUFNc2Isb0JBRTlEblcsT0FBUTRrQixJQUVSK2EsR0FBb0JyakMsR0FBYzJpQyxJQUVsQ1csR0FBbUJ0akMsR0FBY2pELEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSXU3QixJQUFhLENBQUU1TSxjQUFlLFNBQVV4M0IsRUFBT2hULEdBQzlHLE9BQU9nVCxFQUFNaFQsSUFDZG15QyxzQkFBdUIsU0FBVWtGLEVBQVlyM0MsR0FDNUMsSUFBSTdDLEVBQ0osT0FBSTJyQixHQUFnQjlvQixJQUM0QixRQUFuQzdDLEVBQUt1aUIsR0FBb0IxZixVQUF5QixJQUFQN0MsT0FBZ0IsRUFBU0EsRUFBR3dlLFVBQVksR0FFaEczYixFQUFPZzlCLEdBQW9CcG9DLElBQUlvTCxHQUEwQkEsRUFBbkI2OEIsR0FBWTc4QixHQUMzQ3EzQyxFQUFXVyxhQUFhaDRDLEtBQ2hDdTlCLDRCQUE2QkEsR0FBNkIwVSxNQUFPLFNBQVVnRyxFQUFVL2EsRUFBYXBXLEVBQWNubUIsRUFBU3FTLEdBQ3hId29CLEdBQWMwQixFQUFhcFcsRUFBY25tQixFQUFTcVMsRUFBTXNiLG9CQUN6RG5XLE9BQVE4a0IsTUFFWGliLEdBQXlCLFNBQVV0a0MsRUFBV2pULEdBQzlDLE9BQU9rNEIsR0FBZWpsQixHQUNoQm1rQyxHQUFpQnAzQyxFQUFTLENBQUU4NEIsNEJBQTRCLElBQ3hEcWUsR0FBa0JuM0MsRUFBUyxDQUFFODRCLDRCQUE0QixLQUduRSxTQUFTMGUsR0FBZ0JDLEVBQVFwaEQsR0FDN0IsT0FBSUEsRUFBSzZELE1BQVE3RCxFQUFLNEQsSUFDWCxFQUNIdzlDLEdBQVVwaEQsRUFBSzZELElBQU03RCxFQUFLNEQsS0FBUSxJQVM5QyxJQUFJeTlDLEdBQXNCLENBQ3RCL2pCLFFBQVMsU0FBVTkyQixFQUFRc29CLEdBQ3ZCLElBQUtBLEVBQUt6akIsT0FDTixPQUFPN0UsRUFLWCxHQUFzQixpQkFBWEEsRUFBcUIsQ0FDNUIsSUFBSXFVLEVBQWdCcUssR0FBR3JCLEtBQUtyZCxHQUl4QixPQUFPQSxFQUhQQSxFQUFTeEMsV0FBV3dDLEdBVTVCLElBQUl4SCxFQUFJbWlELEdBQWdCMzZDLEVBQVFzb0IsRUFBS3pqQixPQUFPck0sR0FDeENDLEVBQUlraUQsR0FBZ0IzNkMsRUFBUXNvQixFQUFLempCLE9BQU9wTSxHQUM1QyxNQUFPLEdBQUd5a0IsT0FBTzFrQixFQUFHLE1BQU0wa0IsT0FBT3prQixFQUFHLE9BSXhDcWlELEdBQVcsUUFDWEMsR0FBbUIsQ0FDbkJqa0IsUUFBUyxTQUFVOTJCLEVBQVFMLEdBQ3ZCLElBQUk2cUIsRUFBWTdxQixFQUFHNnFCLFVBQVc2SCxFQUFrQjF5QixFQUFHMHlCLGdCQUMvQzJvQixFQUFXaDdDLEVBSVhpN0MsRUFBdUJqN0MsRUFBT2lNLFNBQVMsUUFDdkNpdkMsRUFBZSxHQUNmRCxJQUNBajdDLEVBQVNBLEVBQU82VCxRQUFRdWpDLElBQWtCLFNBQVVFLEdBRWhELE9BREE0RCxFQUFhampELEtBQUtxL0MsR0FDWHdELE9BR2YsSUFBSUssRUFBUzltQyxFQUFnQitJLFFBQVE2cUIsTUFBTWpvQyxHQUUzQyxHQUFJbTdDLEVBQU92OUMsT0FBUyxFQUNoQixPQUFPbzlDLEVBQ1gsSUFBSTVnRCxFQUFXaWEsRUFBZ0IrSSxRQUFRZytCLGtCQUFrQnA3QyxHQUNyRGpDLEVBQThCLGlCQUFkbzlDLEVBQU8sR0FBa0IsRUFBSSxFQUU3Q0UsRUFBU2hwQixFQUFnQjc1QixFQUFFVSxNQUFRc3hCLEVBQVVoeUIsRUFDN0M4aUQsRUFBU2pwQixFQUFnQjU1QixFQUFFUyxNQUFRc3hCLEVBQVUveEIsRUFDakQwaUQsRUFBTyxFQUFJcDlDLElBQVdzOUMsRUFDdEJGLEVBQU8sRUFBSXA5QyxJQUFXdTlDLEVBT3RCLElBQUlDLEVBQWVubkMsRUFBVXZXLElBQUl3OUMsRUFBUUMsRUFBUSxJQUVmLGlCQUF2QkgsRUFBTyxFQUFJcDlDLEtBQ2xCbzlDLEVBQU8sRUFBSXA5QyxJQUFXdzlDLEdBRVEsaUJBQXZCSixFQUFPLEVBQUlwOUMsS0FDbEJvOUMsRUFBTyxFQUFJcDlDLElBQVd3OUMsR0FDMUIsSUFBSWw5QyxFQUFTakUsRUFBUytnRCxHQUN0QixHQUFJRixFQUFzQixDQUN0QixJQUFJTyxFQUFNLEVBQ1ZuOUMsRUFBU0EsRUFBT3dWLFFBQVFpbkMsSUFBVSxXQUM5QixJQUFJVyxFQUFjUCxFQUFhTSxHQUUvQixPQURBQSxJQUNPQyxLQUdmLE9BQU9wOUMsSUFJWHE5QyxHQUEwQyxTQUFVcmpCLEdBRXBELFNBQVNxakIsSUFDTCxPQUFrQixPQUFYcmpCLEdBQW1CQSxFQUFPakssTUFBTTMzQixLQUFNeTNCLFlBQWN6M0IsS0ErRi9ELE9BakdBdWQsRUFBTXNrQixVQUFVb2pCLEVBQTBCcmpCLEdBUzFDcWpCLEVBQXlCeDVDLFVBQVV5NUMsa0JBQW9CLFdBQ25ELElBQUk3aEMsRUFBUXJqQixLQUNSa0osRUFBS2xKLEtBQUsrZSxNQUFPeUIsRUFBZ0J0WCxFQUFHc1gsY0FBZTJrQyxFQUFjajhDLEVBQUdpOEMsWUFBYUMsRUFBb0JsOEMsRUFBR2s4QyxrQkFBbUJydEIsRUFBVzd1QixFQUFHNnVCLFNBQ3pJK0wsRUFBYXRqQixFQUFjc2pCLFdBQy9CbFEsR0FBa0J5eEIsSUFDZHZoQixLQUNJcWhCLE1BQUFBLE9BQWlELEVBQVNBLEVBQVlHLFFBQ3RFSCxFQUFZRyxNQUFNNTNDLElBQUlvMkIsSUFDckJzaEIsTUFBQUEsT0FBNkQsRUFBU0EsRUFBa0JqVSxXQUFhcFosR0FDdEdxdEIsRUFBa0JqVSxTQUFTck4sR0FFL0JBLEVBQVdodEIsS0FBSzBqQixZQUNoQnNKLEVBQVd4cEIsaUJBQWlCLHFCQUFxQixXQUM3QytJLEVBQU13ekIsa0JBRVYvUyxFQUFXL0csV0FBV3hmLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSWtjLEVBQVdwM0IsU0FBVSxDQUFFOG1CLGVBQWdCLFdBQWMsT0FBT25RLEVBQU13ekIsb0JBRTlIdGhCLEdBQXNCRSxnQkFBaUIsR0FFM0N3dkIsRUFBeUJ4NUMsVUFBVXEyQix3QkFBMEIsU0FBVXlqQixHQUNuRSxJQUFJbGlDLEVBQVFyakIsS0FDUmtKLEVBQUtsSixLQUFLK2UsTUFBT3ltQyxFQUFtQnQ4QyxFQUFHczhDLGlCQUFrQmhsQyxFQUFnQnRYLEVBQUdzWCxjQUFlcEIsRUFBT2xXLEVBQUdrVyxLQUFNa1QsRUFBWXBwQixFQUFHb3BCLFVBQzFId1IsRUFBYXRqQixFQUFjc2pCLFdBQy9CLE9BQUtBLEdBU0xBLEVBQVd4UixVQUFZQSxFQUNuQmxULEdBQ0FtbUMsRUFBVUMsbUJBQXFCQSxRQUNWbGxELElBQXJCa2xELEVBQ0ExaEIsRUFBV3BLLGFBR1gxNUIsS0FBSzYyQyxlQUVMME8sRUFBVWp6QixZQUFjQSxJQUNwQkEsRUFDQXdSLEVBQVc3UixVQUVMNlIsRUFBVzVSLFlBTWpCelQsRUFBdUIsUUFBRTJGLFlBQVcsV0FDaEMsSUFBSWxiLEdBQ21DLFFBQWhDQSxFQUFLNDZCLEVBQVduSyxrQkFBK0IsSUFBUHp3QixPQUFnQixFQUFTQSxFQUFHMG9CLFFBQVF6cUIsU0FDL0VrYyxFQUFNd3pCLG1CQUtmLE1BbkNJLE1BcUNmb08sRUFBeUJ4NUMsVUFBVXUyQixtQkFBcUIsV0FDcEQsSUFBSThCLEVBQWE5akMsS0FBSytlLE1BQU15QixjQUFjc2pCLFdBQ3RDQSxJQUNBQSxFQUFXaHRCLEtBQUswakIsYUFDWHNKLEVBQVcxSyxrQkFBb0IwSyxFQUFXdEssVUFDM0N4NUIsS0FBSzYyQyxpQkFJakJvTyxFQUF5Qng1QyxVQUFVZzZDLHFCQUF1QixXQUN0RCxJQUFJdjhDLEVBQUtsSixLQUFLK2UsTUFBT3lCLEVBQWdCdFgsRUFBR3NYLGNBQWUya0MsRUFBY2o4QyxFQUFHaThDLFlBQWFPLEVBQWlCeDhDLEVBQUdrOEMsa0JBQ3JHdGhCLEVBQWF0akIsRUFBY3NqQixXQUMzQkEsSUFDQUEsRUFBVzVJLDZCQUNQaXFCLE1BQUFBLE9BQWlELEVBQVNBLEVBQVlHLFFBQ3RFSCxFQUFZRyxNQUFNM3BDLE9BQU9tb0IsSUFDekI0aEIsTUFBQUEsT0FBdUQsRUFBU0EsRUFBZUMsYUFDL0VELEVBQWVDLFdBQVc3aEIsS0FHdENtaEIsRUFBeUJ4NUMsVUFBVW9yQyxhQUFlLFdBQzlDLElBQUlBLEVBQWU3MkMsS0FBSytlLE1BQU04M0IsYUFDOUJBLE1BQUFBLEdBQTREQSxLQUVoRW9PLEVBQXlCeDVDLFVBQVV5WSxPQUFTLFdBQ3hDLE9BQU8sTUFFSitnQyxFQWxHa0MsQ0FtRzNDem1DLEVBQXdCLFFBQUVtQixXQU14QjBsQyxHQUF5QixDQUN6Qi84QixhQUFjL0ssRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJdzhCLElBQXNCLENBQUU5akIsUUFBUyxDQUN6RSxzQkFDQSx1QkFDQSx5QkFDQSw2QkFFUjlYLG9CQUFxQjQ3QixHQUNyQjM3QixxQkFBc0IyN0IsR0FDdEJ6N0IsdUJBQXdCeTdCLEdBQ3hCMTdCLHdCQUF5QjA3QixHQUN6QndCLFVBQVd0QixJQUdYdUIsR0FBaUIsQ0FDakIzbUMsY0FwQkosU0FBdUJILEdBQ25CLElBQUk3VixFQUFLcVUsRUFBTWdFLE9BQU8ydkIsS0FBZSxHQUFJNWUsRUFBWXBwQixFQUFHLEdBQUkydEMsRUFBZTN0QyxFQUFHLEdBQzFFaThDLEVBQWMzbkMsRUFBTStDLFdBQVdraEIsSUFDbkMsT0FBUWpqQixFQUF3QixRQUFFeFQsY0FBY2k2QyxHQUEwQjFuQyxFQUFNcUssU0FBUyxHQUFJN0ksRUFBTyxDQUFFb21DLFlBQWFBLEVBQWFDLGtCQUFtQjVuQyxFQUFNK0MsV0FBV21oQixJQUEyQnBQLFVBQVdBLEVBQVd1a0IsYUFBY0EsT0FvQm5PaVAsR0FBeUJwd0IsR0FBcUIsQ0FDOUNDLHFCQUFzQixTQUFVL1QsRUFBSzBCLEdBQVUsT0FBT3VuQixHQUFZanBCLEVBQUssU0FBVTBCLElBQ2pGdVMsY0FBZSxXQUFjLE1BQU8sQ0FDaEM5ekIsRUFBR2dKLFNBQVNnN0MsZ0JBQWdCQyxZQUFjajdDLFNBQVNrN0MsS0FBS0QsV0FDeERoa0QsRUFBRytJLFNBQVNnN0MsZ0JBQWdCRyxXQUFhbjdDLFNBQVNrN0MsS0FBS0MsWUFFM0Rwd0Isa0JBQW1CLFdBQWMsT0FBTyxLQUd4QytsQixHQUFxQixDQUNyQnhyQyxhQUFTL1AsR0FFVDZsRCxHQUFxQnp3QixHQUFxQixDQUMxQ0csY0FBZSxTQUFVcEQsR0FBWSxNQUFPLENBQ3hDMXdCLEVBQUcwd0IsRUFBU3V6QixXQUNaaGtELEVBQUd5d0IsRUFBU3l6QixZQUVoQnR3QixjQUFlLFdBQ1gsSUFBS2ltQixHQUFtQnhyQyxRQUFTLENBQzdCLElBQUkrMUMsRUFBZSxJQUFJTixHQUF1QixFQUFHLElBQ2pETSxFQUFhN3BDLE1BQU0zUCxRQUNuQnc1QyxFQUFhcnBCLFdBQVcsQ0FBRWpCLGNBQWMsSUFDeEMrZixHQUFtQnhyQyxRQUFVKzFDLEVBRWpDLE9BQU92SyxHQUFtQnhyQyxTQUU5QjBsQixlQUFnQixTQUFVdEQsRUFBVW51QixHQUNoQ211QixFQUFTdm1CLE1BQU1nQixVQUFZNUksTUFBQUEsRUFBcUNBLEVBQVEsUUFFNUV3eEIsa0JBQW1CLFNBQVVyRCxHQUN6QixPQUFPanVCLFFBQXVELFVBQS9Db0ksT0FBT1IsaUJBQWlCcW1CLEdBQVU0ekIsYUFJckRDLEdBQWdCL29DLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUk1WSxJQUFhNmdDLElBQW9CendCLElBQU95bUMsSUFPeEhVLEdBQXVCamlCLElBQWtCLFNBQVUza0IsRUFBV2dqQixHQUM5RCxPQUFPZ0ksR0FBc0JockIsRUFBV2dqQixFQUFRMmpCLEdBQWVyQyxHQUF3QmtDLE9Bd0J2RkssR0FBSWxpQixHQUFrQnFHLElBRTFCLFNBQVM4YixLQUNMLElBQUkvcEMsRUFBWWMsRUFBTXlGLFFBQU8sR0FPN0IsT0FOQXRDLEdBQTBCLFdBRXRCLE9BREFqRSxFQUFVck0sU0FBVSxFQUNiLFdBQ0hxTSxFQUFVck0sU0FBVSxLQUV6QixJQUNJcU0sRUFHWCxTQUFTZ3FDLEtBQ0wsSUFBSWhxQyxFQUFZK3BDLEtBQ1p2OUMsRUFBS3FVLEVBQU1nRSxPQUFPL0QsRUFBTWdFLFNBQVMsR0FBSSxHQUFJbWxDLEVBQW9CejlDLEVBQUcsR0FBSTA5QyxFQUF1QjE5QyxFQUFHLEdBQzlGMjlDLEVBQWNycEMsRUFBTTRtQixhQUFZLFdBQ2hDMW5CLEVBQVVyTSxTQUFXdTJDLEVBQXFCRCxFQUFvQixLQUMvRCxDQUFDQSxJQU1KLE1BQU8sQ0FEbUJucEMsRUFBTTRtQixhQUFZLFdBQWMsT0FBTzNsQixFQUF1QixRQUFFMkYsV0FBV3lpQyxLQUFpQixDQUFDQSxJQUMxRkYsR0FHakMsSUFBSUcsR0FBZ0IsU0FBVTU5QyxHQUMxQixJQUFJK3JCLEVBQVcvckIsRUFBRytyQixTQUFVL1osRUFBVWhTLEVBQUdnUyxRQUFTb1gsRUFBWXBwQixFQUFHb3BCLFVBQVdrQixFQUFpQnRxQixFQUFHc3FCLGVBQWdCbnJCLEVBQVNhLEVBQUdiLE9BQVEwK0MsRUFBd0I3OUMsRUFBRzY5QyxzQkFDM0pDLEVBQW1CamtDLEVBQVlra0MsSUFDL0JoeEIsRUFBS2diLEtBQ0w3MUIsRUFBVW9DLEVBQU1zbEIsU0FBUSxXQUFjLE1BQU8sQ0FDN0M3TSxHQUFJQSxFQUNKL2EsUUFBU0EsRUFDVG9YLFVBQVdBLEVBQ1hqcUIsT0FBUUEsRUFDUm1yQixlQUFnQixTQUFVMHpCLEdBQ3RCLElBQUlDLEVBQUtqK0MsRUFDVDg5QyxFQUFpQnBtRCxJQUFJc21ELEdBQVMsR0FDOUIsSUFDSSxJQUFLLElBQUkxNUMsRUFBSytQLEVBQU02cEMsU0FBU0osRUFBaUJsbUQsVUFBV3V5QixFQUFLN2xCLEVBQUc4QyxRQUFTK2lCLEVBQUdoZ0IsS0FBTWdnQixFQUFLN2xCLEVBQUc4QyxPQUV2RixJQURpQitpQixFQUFHL3VCLE1BRWhCLE9BR1osTUFBTytpRCxHQUFTRixFQUFNLENBQUVHLE1BQU9ELEdBQy9CLFFBQ0ksSUFDUWgwQixJQUFPQSxFQUFHaGdCLE9BQVNuSyxFQUFLc0UsRUFBRys1QyxTQUFTcitDLEVBQUdNLEtBQUtnRSxHQUVwRCxRQUFVLEdBQUkyNUMsRUFBSyxNQUFNQSxFQUFJRyxPQUVqQzl6QixNQUFBQSxHQUFnRUEsS0FFcEUyZCxTQUFVLFNBQVUrVixHQUVoQixPQURBRixFQUFpQnBtRCxJQUFJc21ELEdBQVMsR0FDdkIsV0FBYyxPQUFPRixFQUFpQnB2QyxPQUFPc3ZDLFFBUTVESCxPQUF3QnptRCxFQUFZLENBQUNneUIsSUFXckMsT0FWQTlVLEVBQU1zbEIsU0FBUSxXQUNWa2tCLEVBQWlCbGtELFNBQVEsU0FBVTBrRCxFQUFHejdDLEdBQU8sT0FBT2k3QyxFQUFpQnBtRCxJQUFJbUwsR0FBSyxRQUMvRSxDQUFDdW1CLElBS0ovVCxFQUFpQnNDLFdBQVUsWUFDdEJ5UixJQUFjMDBCLEVBQWlCaCtCLE9BQVN3SyxNQUFBQSxHQUFnRUEsT0FDMUcsQ0FBQ2xCLElBQ0kvVCxFQUFpQnZULGNBQWN5VixFQUFnQjBqQixTQUFVLENBQUU3L0IsTUFBTzhXLEdBQVc2WixJQUV6RixTQUFTZ3lCLEtBQ0wsT0FBTyxJQUFJbG1ELElBR2YsSUFBSTBtRCxHQUFjLFNBQVV0eUIsR0FBUyxPQUFPQSxFQUFNcHBCLEtBQU8sSUFvSnJEMjdDLEdBQStCbHFDLEVBQU1xQyxjQUFjLE1BRW5EeUQsR0FBUyxTQUFVdU8sR0FDbkIsT0FBUUEsRUFBS29CLGVBQWlCcEIsRUFBSzZILFlBQVcsSUFzQmxELElBQUlpdUIsR0FBcUIsU0FBVS9rQixHQUFXLE9BQW1CLElBQVpBLEdBSWpEZ2xCLEdBQWMsU0FBVTErQyxHQUN4QixJQUFJc0UsRUFBSTZsQixFQUNKNEIsRUFBVy9yQixFQUFHK3JCLFNBQVVnQixFQUFLL3NCLEVBQUcrc0IsR0FBSTR4QixFQUFZMytDLEVBQUcyK0MsVUFBV3YwQixFQUFLcHFCLEVBQUcwNUIsUUFBU0EsT0FBaUIsSUFBUHRQLEdBQXVCQSxPQUVsR2h6QixJQUFkdW5ELElBQ0FqbEIsRUFBVWlsQixHQUNkLElBN0JJL3dCLEVBQ0EzVCxFQUNBMmtDLEVBMkJBQyxFQUFxQnZxQyxFQUFNK0MsV0FBV2toQixJQUN0Q3VtQixFQUErQnhxQyxFQUFNK0MsV0FBV21uQyxJQUNoRG4wQixFQUFLaFcsRUFBTWdFLE9BQU9tbEMsS0FBa0IsR0FBSUcsRUFBY3R6QixFQUFHLEdBQUl4bkIsRUFBTXduQixFQUFHLEdBQ3RFblksRUFBVW9DLEVBQU15RixPQUFPLE1BQ3ZCZ2xDLEVBQThDLFFBQWhDejZDLEVBQUt1NkMsRUFBbUI5eEIsVUFBdUIsSUFBUHpvQixFQUFnQkEsRUFBS3c2QyxFQUN2RCxPQUFwQjVzQyxFQUFRL0ssVUFkTSxTQUFVdXlCLEdBQzVCLE9BQU8ra0IsSUFBK0IsSUFBWi9rQixJQUFpQyxPQUFaQSxFQWN2Q3NsQixDQUFnQnRsQixJQUFZcWxCLElBQzVCaHlCLEVBQUtBLEVBQUtneUIsRUFBYSxJQUFNaHlCLEVBQUtneUIsR0FFdEM3c0MsRUFBUS9LLFFBQVUsQ0FDZDRsQixHQUFJQSxFQUNKcXZCLE1BQU9xQyxHQUFtQi9rQixJQUN3RixRQUEzR3ZQLEVBQUswMEIsTUFBQUEsT0FBK0QsRUFBU0EsRUFBbUJ6QyxhQUEwQixJQUFQanlCLEVBQWdCQSxHQXpDOUl5RCxFQUFRLElBQUkxekIsSUFDWitmLEVBQWdCLElBQUkzaUIsUUFDcEJzbkQsRUFBVyxXQUFjLE9BQU9oeEIsRUFBTWgwQixRQUFRd2dCLEtBQzNDLENBQ0g1VixJQUFLLFNBQVVta0IsR0FDWGlGLEVBQU1wcEIsSUFBSW1rQixHQUNWMU8sRUFBY3ZpQixJQUFJaXhCLEVBQU1BLEVBQUt2WCxpQkFBaUIsYUFBY3d0QyxLQUVoRW5zQyxPQUFRLFNBQVVrVyxHQUNkLElBQUkzb0IsRUFDSjR0QixFQUFNbGYsT0FBT2lhLEdBQ3NCLFFBQWxDM29CLEVBQUtpYSxFQUFjbmlCLElBQUk2d0IsVUFBMEIsSUFBUDNvQixHQUF5QkEsSUFDcEVpYSxFQUFjdkwsT0FBT2lhLEdBQ3JCaTJCLEtBRUpLLE1BQU9MLE1BOEJYLElBQUlNLEVBQWtCNXFDLEVBQU1zbEIsU0FBUSxXQUFjLE9BQVF2bEIsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJeE0sRUFBUS9LLFNBQVUsQ0FBRXcyQyxZQUFhQSxNQUFvQixDQUFDOTZDLElBQ2xKLE9BQVF3UyxFQUFpQnZULGNBQWN5MkIsR0FBbUIwQyxTQUFVLENBQUU3L0IsTUFBTzhqRCxHQUFtQm56QixJQUdoR2dCLEdBQUssRUF5R1QsU0FBU295QixHQUFhNW9DLEdBQ2xCLE1BQTJCLG1CQUFiQSxFQUdsQixJQUFJNm9DLEdBQWlCOXFDLEVBQU1xQyxjQUFjLE1BMER6QyxJQUFJMG9DLEdBQVEvcUMsRUFBTStrQixZQXBDbEIsU0FBc0JyNUIsRUFBSXM1QixHQUN0QixJQUFJdk4sRUFBVy9yQixFQUFHK3JCLFNBQVV6bkIsRUFBS3RFLEVBQUdzL0MsR0FBSUEsT0FBWSxJQUFQaDdDLEVBQWdCLEtBQU9BLEVBQUk2bEIsRUFBS25xQixFQUFHbkcsS0FBTUEsT0FBYyxJQUFQc3dCLEVBQWdCLElBQU1BLEVBQUlvMUIsRUFBWXYvQyxFQUFHdS9DLFVBQVczbkQsRUFBU29JLEVBQUdwSSxPQUFRaWUsRUFBUXhCLEVBQU1uTSxPQUFPbEksRUFBSSxDQUFDLFdBQVksS0FBTSxPQUFRLFlBQWEsV0FDbE95VyxFQUFZb0QsR0FBWSxXQUFjLE9BQU93akMsR0FBT2lDLE1BQ3BERSxFQUFRLEdBQ1JDLEVBQWVuckMsRUFBTXlGLFFBQU8sR0FDaEN4RixFQUFVdkwsVUFBVTFOLFFBQVExRCxHQUFTLGdEQUNyQyxJQUFJc2EsRUFBVSxDQUNWclksS0FBTUEsRUFDTjZsRCxhQUFjLFNBQVV0a0QsRUFBT3NzQixHQUl2QkEsSUFDeUUsSUFBekU4M0IsRUFBTXQyQixXQUFVLFNBQVU3YSxHQUFTLE9BQU9qVCxJQUFVaVQsRUFBTWpULFdBQzFEb2tELEVBQU1sbkQsS0FBSyxDQUFFOEMsTUFBT0EsRUFBT3NzQixPQUFRQSxFQUFPN3RCLEtBQzFDMmxELEVBQU1ubEQsS0FBS3NsRCxNQUduQkMsWUFBYSxTQUFVN3lCLEVBQUkzdUIsRUFBUXFMLEdBQy9CLElBQUlnMkMsRUFBYXQ0QyxRQUFqQixDQUVBLElBQUkwNEMsRUF6Q2hCLFNBQXNCTCxFQUFPcGtELEVBQU9nRCxFQUFRcUwsR0FDeEMsSUFBS0EsRUFDRCxPQUFPKzFDLEVBQ1gsSUFBSS9tRCxFQUFRK21ELEVBQU10MkIsV0FBVSxTQUFVOXdCLEdBQVEsT0FBT0EsRUFBS2dELFFBQVVBLEtBQ3BFLElBQWUsSUFBWDNDLEVBQ0EsT0FBTyttRCxFQUNYLElBQUlNLEVBQWFyMkMsRUFBVyxFQUFJLEdBQUssRUFDakNzMkMsRUFBV1AsRUFBTS9tRCxFQUFRcW5ELEdBQzdCLElBQUtDLEVBQ0QsT0FBT1AsRUFDWCxJQUFJcG5ELEVBQU9vbkQsRUFBTS9tRCxHQUNidW5ELEVBQWFELEVBQVNyNEIsT0FDdEJ1NEIsRUFBaUJ4ckMsRUFBVXZXLElBQUk4aEQsRUFBV3ZpRCxJQUFLdWlELEVBQVd0aUQsSUFBSyxJQUNuRSxPQUFvQixJQUFmb2lELEdBQW9CMW5ELEVBQUtzdkIsT0FBT2hxQixJQUFNVSxFQUFTNmhELElBQy9CLElBQWhCSCxHQUFxQjFuRCxFQUFLc3ZCLE9BQU9qcUIsSUFBTVcsRUFBUzZoRCxFQWhnT3pELFNBQWtCamdELEVBQUl1RyxFQUFXMjVDLEdBQzdCLElBQTJCMW5ELEVBQWxCNmIsRUFBTWdFLE9BQU9yWSxHQUFjbWdELE1BQU0sR0FDdENDLEVBQWE3NUMsRUFBWSxFQUFJL04sRUFBSXlGLE9BQVNzSSxFQUFZQSxFQUMxRCxHQUFJNjVDLEdBQWMsR0FBS0EsRUFBYTVuRCxFQUFJeUYsT0FBUSxDQUM1QyxJQUFJb2lELEVBQVdILEVBQVUsRUFBSTFuRCxFQUFJeUYsT0FBU2lpRCxFQUFVQSxFQUNBOW5ELEVBQTNDaWMsRUFBTWdFLE9BQU83ZixFQUFJRSxPQUFPNk4sRUFBVyxHQUFJLEdBQWMsR0FDOUQvTixFQUFJRSxPQUFPMm5ELEVBQVUsRUFBR2pvRCxHQUU1QixPQUFPSSxFQXkvTkk4bkQsQ0FBU2QsRUFBTy9tRCxFQUFPQSxFQUFRcW5ELEdBRW5DTixFQXdCZ0JlLENBQWFmLEVBQU96eUIsRUFBSTN1QixFQUFRcUwsR0FDM0MrMUMsSUFBVUssSUFDVkosRUFBYXQ0QyxTQUFVLEVBQ3ZCbzRDLEVBQVVNLEVBQ0xoZ0QsSUFBSWdwQyxJQUNKOWlDLFFBQU8sU0FBVTNLLEdBQVMsT0FBa0MsSUFBM0J4RCxFQUFPUyxRQUFRK0MsV0FPakUsT0FIQWtaLEVBQU1xRCxXQUFVLFdBQ1o4bkMsRUFBYXQ0QyxTQUFVLEtBRW5Ca08sRUFBaUJ2VCxjQUFjMlUsRUFBV3BDLEVBQU1xSyxTQUFTLEdBQUk3SSxFQUFPLENBQUU2QyxJQUFLNGdCLElBQy9FamtCLEVBQWlCdlQsY0FBY3M5QyxHQUFlbmtCLFNBQVUsQ0FBRTcvQixNQUFPOFcsR0FBVzZaLE9BR3BGLFNBQVM4YyxHQUFTendDLEdBQ2QsT0FBT0EsRUFBS2dELE1BRWhCLFNBQVN1a0QsR0FBVzVsRCxFQUFHQyxHQUNuQixPQUFPRCxFQUFFMnRCLE9BQU9qcUIsSUFBTXpELEVBQUUwdEIsT0FBT2pxQixJQW9CbkMsU0FBUytpRCxHQUFleHVDLEdBQ3BCLElBQUk1VyxFQUFReWUsR0FBWSxXQUFjLE9BQU8zVixFQUFZOE4sTUFPekQsR0FEZXNDLEVBQU0rQyxXQUFXTixHQUFxQkUsU0FDdkMsQ0FDVixJQUFtRHdwQyxFQUExQ3BzQyxFQUFNZ0UsT0FBTy9ELEVBQU1nRSxTQUFTdEcsR0FBVSxHQUFxQixHQUNwRXNDLEVBQU1xRCxXQUFVLFdBQWMsT0FBT3ZjLEVBQU1tZ0IsU0FBU2tsQyxLQUFpQixJQUV6RSxPQUFPcmxELEVBR1gsSUFHSXNsRCxHQUFXLFNBQVV6b0QsR0FBSyxPQUhOLFNBQVVBLEdBQzlCLE1BQW9CLGlCQUFOQSxHQUFrQkEsRUFBRWlHLElBRUF5aUQsQ0FBa0Ixb0QsR0FBS0EsRUFBRWlHLFNBQU05RyxHQUNyRSxTQUFTNE0sS0FFTCxJQURBLElBQUkvRyxFQUFPLEdBQ0ZxeEIsRUFBSyxFQUFHQSxFQUFLQyxVQUFVdHdCLE9BQVFxd0IsSUFDcENyeEIsRUFBS3F4QixHQUFNQyxVQUFVRCxHQUV6QixJQUFJc3lCLEdBQWdCbmxELE1BQU1DLFFBQVF1QixFQUFLLElBQ25DNGpELEVBQVlELEVBQWUsR0FBSyxFQUNoQ0UsRUFBYTdqRCxFQUFLLEVBQUk0akQsR0FDdEJFLEVBQWE5akQsRUFBSyxFQUFJNGpELEdBQ3RCRyxFQUFjL2pELEVBQUssRUFBSTRqRCxHQUN2QnI5QyxFQUFVdkcsRUFBSyxFQUFJNGpELEdBQ25CSSxFQUFleHNDLEVBQVU3VSxZQUFZbWhELEVBQVlDLEVBQWEzc0MsRUFBTXFLLFNBQVMsQ0FBRXdpQyxNQUFPUixHQUFTTSxFQUFZLEtBQU94OUMsSUFDdEgsT0FBT285QyxFQUFlSyxFQUFhSCxHQUFjRyxFQWdCckQsU0FBU0UsR0FBdUJ2cEQsRUFBUXdwRCxHQUlwQyxJQUFJaG1ELEVBQVFvbEQsR0FBZVksS0FPdkJDLEVBQWMsV0FBYyxPQUFPam1ELEVBQU0xRCxJQUFJMHBELE1BV2pELE9BTkFDLElBdkJKLFNBQTBCenBELEVBQVFzaUIsR0FDOUI1RixFQUFNcUQsV0FBVSxXQUNaLElBQUlzQyxFQUFnQnJpQixFQUFPaUksS0FBSSxTQUFVekUsR0FBUyxPQUFPQSxFQUFNbWdCLFNBQVNyQixNQUN4RSxPQUFPLFdBQWMsT0FBT0QsRUFBY3JnQixTQUFRLFNBQVUwbkQsR0FBZSxPQUFPQSxXQXlCdEZDLENBQWlCM3BELEdBQVEsV0FBYyxPQUFPMmQsRUFBdUIsUUFBRTdDLE9BQU8ydUMsR0FBYSxHQUFPLE1BQzNGam1ELEVBR1gsU0FBU29tRCxHQUFhamlELEVBQU9raUQsRUFBeUJULEVBQWF4OUMsR0FDL0QsSUFBSWsrQyxFQUFpRCxtQkFBNUJELEVBQ25CQSxFQUNBejlDLEdBQVV5OUMsRUFBeUJULEVBQWF4OUMsR0FDdEQsT0FBTy9ILE1BQU1DLFFBQVE2RCxHQUNmb2lELEdBQWlCcGlELEVBQU9taUQsR0FDeEJDLEdBQWlCLENBQUNwaUQsSUFBUSxTQUFVUyxHQUNsQyxJQUE4QkssRUFBckJnVSxFQUFNZ0UsT0FBT3JZLEVBQUksR0FBZ0IsR0FDMUMsT0FBTzBoRCxFQUFZcmhELE1BRy9CLFNBQVNzaEQsR0FBaUIvcEQsRUFBUThwRCxHQUM5QixJQUFJcmhELEVBQVN3WixHQUFZLFdBQWMsTUFBTyxNQUM5QyxPQUFPc25DLEdBQXVCdnBELEdBQVEsV0FDbEN5SSxFQUFPcEMsT0FBUyxFQUVoQixJQURBLElBQUkyakQsRUFBWWhxRCxFQUFPcUcsT0FDZHpCLEVBQUksRUFBR0EsRUFBSW9sRCxFQUFXcGxELElBQzNCNkQsRUFBTzdELEdBQUs1RSxFQUFPNEUsR0FBRzFFLE1BRTFCLE9BQU80cEQsRUFBWXJoRCxNQUkzQixTQUFTd2hELEdBQXNCem1ELEVBQU8wN0MsR0FFbEMsWUFEcUIsSUFBakJBLElBQTJCQSxFQUFlLEdBQ3ZDNzZCLEVBQWM3Z0IsR0FBU0EsRUFBUW9sRCxHQUFlMUosR0E2QnpELElBeU1JZ0wsR0F2TUFDLEdBQVUsQ0FDVjFDLE1BQU9BLEdBQ1AyQyxLQUpPMXRDLEVBQU0ra0IsWUEzQmpCLFNBQXFCcjVCLEVBQUlzNUIsR0FDckIsSUFBSXZOLEVBQVcvckIsRUFBRytyQixTQUFVL29CLEVBQVFoRCxFQUFHZ0QsTUFBTzVILEVBQVE0RSxFQUFHNUUsTUFBT2tKLEVBQUt0RSxFQUFHcy9DLEdBQUlBLE9BQVksSUFBUGg3QyxFQUFnQixLQUFPQSxFQUFJa3RDLEVBQVN4eEMsRUFBR3d4QyxPQUFRcm5CLEVBQUtucUIsRUFBRzBuQixPQUFRQSxPQUFnQixJQUFQeUMsR0FBdUJBLEVBQUl0VSxFQUFReEIsRUFBTW5NLE9BQU9sSSxFQUFJLENBQUMsV0FBWSxRQUFTLFFBQVMsS0FBTSxTQUFVLFdBQ3hQeVcsRUFBWW9ELEdBQVksV0FBYyxPQUFPd2pDLEdBQU9pQyxNQUNwRHB0QyxFQUFVb0MsRUFBTStDLFdBQVcrbkMsSUFDM0JqNUIsRUFBUSxDQUNSdHRCLEVBQUdncEQsR0FBc0I3K0MsTUFBQUEsT0FBcUMsRUFBU0EsRUFBTW5LLEdBQzdFQyxFQUFHK29ELEdBQXNCNytDLE1BQUFBLE9BQXFDLEVBQVNBLEVBQU1sSyxJQUU3RTRvQixFQUFTOC9CLEdBQWEsQ0FBQ3I3QixFQUFNdHRCLEVBQUdzdEIsRUFBTXJ0QixJQUFJLFNBQVVrSCxHQUNwRCxJQUFJc0UsRUFBSytQLEVBQU1nRSxPQUFPclksRUFBSSxHQUFJaWlELEVBQVUzOUMsRUFBRyxHQUFJNDlDLEVBQVU1OUMsRUFBRyxHQUM1RCxPQUFPMjlDLEdBQVdDLEVBQVUsRUFBSSxXQUVoQ3pxQixFQUFpQm5qQixFQUFNeUYsT0FBTyxNQUNsQ3hGLEVBQVV2TCxVQUFVMU4sUUFBUTRXLEdBQVUsaURBQ3RDLElBQUlrWSxFQUFLbFksRUFBU3JZLEVBQU91d0IsRUFBR3Z3QixLQUFNNmxELEVBQWV0MUIsRUFBR3MxQixhQUFjRSxFQUFjeDFCLEVBQUd3MUIsWUFJbkYsT0FIQXRyQyxFQUFNcUQsV0FBVSxXQUNaK25DLEVBQWF0a0QsRUFBT3E4QixFQUFldHdCLFdBQ3BDLENBQUMrSyxJQUNJbUQsRUFBaUJ2VCxjQUFjMlUsRUFBV3BDLEVBQU1xSyxTQUFTLENBQUV4SSxLQUFNcmMsR0FBUWdjLEVBQU8sQ0FBRXU5QixrQkFBa0IsRUFBTXB3QyxNQUFPcVIsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBUyxHQUFJMWIsR0FBUSxDQUFFbkssRUFBR3N0QixFQUFNdHRCLEVBQUdDLEVBQUdxdEIsRUFBTXJ0QixFQUFHNG9CLE9BQVFBLElBQVdnRyxPQUFRQSxFQUFROHBCLE9BQVEsU0FBVXpoQyxFQUFPb3lDLEdBQ2pQLElBQUkxNEMsRUFBVzA0QyxFQUFhMTRDLFNBQzVCQSxFQUFTNVAsSUFDTCtsRCxFQUFZeGtELEVBQU8rcUIsRUFBTXRzQixHQUFNL0IsTUFBTzJSLEVBQVM1UCxJQUNuRDIzQyxNQUFBQSxHQUFnREEsRUFBT3poQyxFQUFPb3lDLElBQy9EQyxnQkFBaUIsU0FBVW53QixHQUMxQndGLEVBQWV0d0IsUUFBVThxQixHQUMxQnZaLElBQUs0Z0IsSUFBZ0J2TixPQVk1QnMyQixHQUFlaHVDLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsQ0FBRXliLFNBQVU0Z0IsSUFBMEJqMUMsSUFBYTZnQyxJQUtoRzJiLEdBQVNqdUMsRUFBTXFLLFNBQVNySyxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTckssRUFBTXFLLFNBQVMsR0FBSTJqQyxJQUFlbnNDLElBQU95bUMsSUFBaUIsQ0FBRW5tQywwQkFBMkJ5bUMsS0E4R2pKLFNBQVNzRixLQUNMLE1BQU8sQ0FDSEMsUUFBU3QrQyxFQUFZLEdBQ3JCdStDLFFBQVN2K0MsRUFBWSxHQUNyQncrQyxnQkFBaUJ4K0MsRUFBWSxHQUM3QnkrQyxnQkFBaUJ6K0MsRUFBWSxJQUdyQyxTQUFTMCtDLEdBQVl4a0QsRUFBUXlrRCxFQUFXem5ELEdBQ3BDQSxFQUFNMUQsSUFBSzBHLEdBQVd5a0QsRUFBZ0J6a0QsRUFBU3lrRCxFQUFiLEdBRXRDLFNBQVNDLEdBQW9CbHJELEVBQVFtckQsR0FDakMsSUFBSXJ3QyxFQUFTLFdBQ1QsSUFBSTFTLEVBQUsraUQsSUFBY0MsRUFBVWhqRCxFQUFHZ2pELFFBQVNDLEVBQVVqakQsRUFBR2lqRCxRQUFTQyxFQUFhbGpELEVBQUdrakQsV0FBWUMsRUFBYW5qRCxFQUFHbWpELFdBRS9HdnJELEVBQU80cUQsUUFBUTlxRCxJQUFJc3JELEdBQ25CcHJELEVBQU82cUQsUUFBUS9xRCxJQUFJdXJELEdBRW5CTCxHQUFZSSxFQUFTRSxFQUFZdHJELEVBQU84cUQsaUJBQ3hDRSxHQUFZSyxFQUFTRSxFQUFZdnJELEVBQU8rcUQsa0JBRzVDLE9BREFqd0MsSUFDT0EsRUF1RFgsU0FBUzB3QyxLQUNMLE1BQU8sQ0FDSEosUUFBU3QvQyxPQUFPMi9DLFlBQ2hCSixRQUFTdi9DLE9BQU84MUMsWUFDaEIwSixXQUFZcmhELFNBQVNrN0MsS0FBS3VHLFlBQWM1L0MsT0FBTzYvQyxXQUMvQ0osV0FBWXRoRCxTQUFTazdDLEtBQUt5RyxhQUFlOS9DLE9BQU8rL0MsYUFHeEQsSUFBSS8wQixJQUFlLEVBd0NmZzFCLEdBQXdDLG9CQUFoQi9pRCxZQUN0QixXQUFjLE9BQU9BLFlBQVlELE9BQ2pDLFdBQWMsT0FBT2lqRCxLQUFLampELE9BQ2hDLFNBQVNrakQsR0FBa0J4NEIsR0FDdkIsSUFBSXk0QixFQUFtQmhxQyxFQUFZNnBDLElBQy9CenNDLEVBQVczQyxFQUFNK0MsV0FBV04sR0FBcUJFLFNBQ3JEM0MsRUFBTXFELFdBQVUsV0FDWixJQUFJVixFQUFKLENBRUEsSUFBSTZzQyxFQUF3QixTQUFVOWpELEdBQ2xDLElBQUlELEVBQVlDLEVBQUdELFVBQ25CcXJCLEVBQVNyckIsRUFBWThqRCxJQUd6QixPQURBdHVDLEVBQXVCLFFBQUU3QyxPQUFPb3hDLEdBQXVCLEdBQ2hELFdBQWMsT0FBT3R2QyxFQUFLa2MsV0FBV2hlLE9BQU9veEMsT0FDcEQsQ0FBQzE0QixJQVlSLFNBQVMyNEIsS0FJTCxJQUFJQyxHQUFhLEVBS2JDLEVBQW9CLEdBSXBCQyxFQUFjLElBQUlocUQsSUFDbEI4TCxFQUFXLENBQ1h5SyxVQUFXLFNBQVU2RyxHQUVqQixPQURBNHNDLEVBQVkxL0MsSUFBSThTLEdBQ1QsV0FBMEI0c0MsRUFBWXgxQyxPQUFPNEksS0FFeERqUixNQUFPLFNBQVVySixFQUFZa3RDLEdBT3pCLEdBQUk4WixFQUFZLENBQ1osSUFBSUcsRUFBZSxHQU1uQixPQUxBRCxFQUFZdHFELFNBQVEsU0FBVTBkLEdBQzFCNnNDLEVBQWE3ckQsS0FBS3N4QyxHQUFxQnR5QixFQUFldGEsRUFBWSxDQUM5RGt0QyxtQkFBb0JBLFFBR3JCbHJDLFFBQVFrSCxJQUFJaStDLEdBR25CLE9BQU8sSUFBSW5sRCxTQUFRLFNBQVVDLEdBQ3pCZ2xELEVBQWtCM3JELEtBQUssQ0FDbkJ6QixVQUFXLENBQUNtRyxFQUFZa3RDLEdBQ3hCanJDLFFBQVNBLFFBS3pCdkgsSUFBSyxTQUFVc0YsR0FFWCxPQURBdVgsRUFBVXZMLFVBQVVnN0MsRUFBWSxpSEFDekJFLEVBQVl0cUQsU0FBUSxTQUFVMGQsSUFoOUdqRCxTQUFtQkEsRUFBZXRhLEdBQzFCdkIsTUFBTUMsUUFBUXNCLEdBQ1Bpc0MsR0FBWTN4QixFQUFldGEsR0FFUCxpQkFBZkEsRUFDTGlzQyxHQUFZM3hCLEVBQWUsQ0FBQ3RhLElBR25DK3JDLEdBQVV6eEIsRUFBZXRhLEdBeThHakJvbkQsQ0FBVTlzQyxFQUFldGEsT0FHakM4RCxLQUFNLFdBQ0ZvakQsRUFBWXRxRCxTQUFRLFNBQVUwZCxJQXJ4RzFDLFNBQXVCQSxHQUNuQkEsRUFBYzBCLGNBQWEsU0FBVTVkLEdBQVMsT0FBT0EsRUFBTTBGLFVBcXhHL0NzQyxDQUFja1UsT0FHdEJqRSxNQUFPLFdBTUgsT0FMQTJ3QyxHQUFhLEVBQ2JDLEVBQWtCcnFELFNBQVEsU0FBVW9HLEdBQ2hDLElBQUluSixFQUFZbUosRUFBR25KLFVBQVdvSSxFQUFVZSxFQUFHZixRQUMzQytHLEVBQVNLLE1BQU1vb0IsTUFBTXpvQixFQUFVcU8sRUFBTTJPLGNBQWMsR0FBSTNPLEVBQU1nRSxPQUFPeGhCLElBQVksSUFBUUcsS0FBS2lJLE1BRTFGLFdBQ0gra0QsR0FBYSxFQUNiaCtDLEVBQVNsRixVQUlyQixPQUFPa0YsRUFnQ1gsU0FBU3ErQyxLQUNMLElBQUlyK0MsRUFBVzZULEVBQVlrcUMsSUFFM0IsT0FEQXp2QyxFQUFNcUQsVUFBVTNSLEVBQVNxTixNQUFPLElBQ3pCck4sRUFFWCxJQUFJcytDLEdBQWVELEdBc0ZmRSxHQUE4QixXQUM5QixTQUFTQSxJQUNMenRELEtBQUswdEQsa0JBQW9CLElBQUl0cUQsSUFnQ2pDLE9BekJBcXFELEVBQWFoaUQsVUFBVWtPLFVBQVksU0FBVXpLLEdBQ3pDLElBQUltVSxFQUFRcmpCLEtBRVosT0FEQUEsS0FBSzB0RCxrQkFBa0JoZ0QsSUFBSXdCLEdBQ3BCLFdBQWMsT0FBT21VLEVBQU1xcUMsa0JBQWtCOTFDLE9BQU8xSSxLQWlCL0R1K0MsRUFBYWhpRCxVQUFVOEQsTUFBUSxTQUFVMEosRUFBT3ZNLEdBQzVDMU0sS0FBSzB0RCxrQkFBa0I1cUQsU0FBUSxTQUFVb00sR0FDckNBLEVBQVNLLE1BQU0wSixFQUFNMDBDLGFBQWUxMEMsRUFBT3ZNLE9BRzVDK2dELEVBbENzQixHQW9DN0JHLEdBQXFCLFdBQWMsT0FBTyxJQUFJSCxJQStCbEQsU0FBU0ksS0FDTCxPQUFPQyxHQUVYLFNBQVNBLEdBQWdCQyxHQUNoQmxTLEdBQW1CeHJDLFVBRXhCd3JDLEdBQW1CeHJDLFFBQVEyaUIsWUFBYSxFQUN4QzZvQixHQUFtQnhyQyxRQUFReXBCLGNBQzNCaTBCLE1BQUFBLEdBQXdDQSxLQWlDNUMsSUFBSUMsR0FBZSxXQUFjLE1BQU8sSUFDcENDLEdBQXFCenRDLEdBQWMsQ0FDbkN3OUIsTUFBTyxhQUNQM2hCLG1CQUFvQjlLLEdBQ3BCd0UsZUFBZ0IsYUFDaEJ5dEIsaUJBQWtCLGFBQ2xCckYsMkJBQTRCLGFBQzVCajZCLE9BQVEsYUFDUm9sQiw0QkFBNkIwa0IsR0FDN0I5UCxzQkFBdUIsU0FBVWdRLEVBQVFuaUQsRUFBS1csR0FDMUMsT0FBT0EsRUFBUXloRCxhQUFhcGlELElBQVEsR0FFeENtbUMscUJBQXNCLFNBQVV4eEMsRUFBU3dJLEdBQ3JDLElBQUkrUyxFQUFhL1MsRUFBRytTLFdBQVltdUIsRUFBZ0JsaEMsRUFBR2toQyxjQUFlaDhCLEVBQVNtUCxFQUFNbk0sT0FBT2xJLEVBQUksQ0FBQyxhQUFjLGtCQUczRyxPQURBcXBDLEdBQXdCN3hDLEVBQVMwTixFQURwQjBHLEdBQVUxRyxFQUFRNk4sR0FBYyxHQUFJdmIsSUFFMUM2YyxFQUFNcUssU0FBUyxDQUFFM0wsV0FBWUEsRUFBWW11QixjQUFlQSxHQUFpQmg4QixNQUdwRmswQixHQUFpQnVILEdBQW1CLENBQ3BDUCw0QkFBNkIwa0IsR0FDN0J0a0Isa0JBQW1Cc2tCLEtBaUNuQkksR0FBYyxTQUFVM3JELEdBQ3hCLE9BQU9BLEVBQVEsS0FBUSxFQUFJQSxFQUZoQixLQUlYNHJELElBQVksRUF3Q2hCL3dDLEVBQVFneEMsZ0JBeG5DYyxTQUFVcGxELEdBQzVCLElBQUkrckIsRUFBVy9yQixFQUFHK3JCLFNBQVU1c0IsRUFBU2EsRUFBR2IsT0FBUW1GLEVBQUt0RSxFQUFHZ1MsUUFBU0EsT0FBaUIsSUFBUDFOLEdBQXVCQSxFQUFJZ21CLEVBQWlCdHFCLEVBQUdzcUIsZUFBZ0IrNkIsRUFBa0JybEQsRUFBR3FsRCxnQkFBaUJsN0IsRUFBS25xQixFQUFHNjlDLHNCQUF1QkEsT0FBK0IsSUFBUDF6QixHQUF1QkEsRUFHbE53ekIsRUFBbkN0cEMsRUFBTWdFLE9BQU9tbEMsS0FBa0IsR0FBcUIsR0FDekQ4SCxFQUF5Qmh4QyxFQUFNK0MsV0FBV2toQixJQUFvQm9sQixZQUM5RDJILElBQ0EzSCxFQUFjMkgsR0FDbEIsSUFBSTl4QyxFQUFZK3BDLEtBRVpnSSxFQXBEUixTQUFzQng1QixHQUNsQixJQUFJeTVCLEVBQVcsR0FNZixPQUpBbHhDLEVBQU1teEMsU0FBUzdyRCxRQUFRbXlCLEdBQVUsU0FBVUUsR0FDbkMzWCxFQUFNb3hDLGVBQWV6NUIsSUFDckJ1NUIsRUFBU2x0RCxLQUFLMnpCLE1BRWZ1NUIsRUE2Q2dCRyxDQUFhNTVCLEdBQ2hDNjVCLEVBQW1CTCxFQUNuQk0sRUFBVSxJQUFJM3JELElBR2Q0ckQsRUFBa0J4eEMsRUFBTXlGLE9BQU82ckMsR0FFL0JHLEVBQWN6eEMsRUFBTXlGLE9BQU8sSUFBSWxpQixLQUFPc1AsUUFHdEN5a0MsRUFBa0J0M0IsRUFBTXlGLFFBQU8sR0FXbkMsR0FWQXRDLEdBQTBCLFdBQ3RCbTBCLEVBQWdCemtDLFNBQVUsRUF0RWxDLFNBQTJCNGtCLEVBQVVnNkIsR0FDakNoNkIsRUFBU255QixTQUFRLFNBQVVxeUIsR0FDdkIsSUFBSXBwQixFQUFNMDdDLEdBQVl0eUIsR0FDdEI4NUIsRUFBWXJ1RCxJQUFJbUwsRUFBS29wQixNQW9FckIrNUIsQ0FBa0JULEVBQWtCUSxHQUNwQ0QsRUFBZ0IzK0MsUUFBVXkrQyxLQUU5QjdnQixJQUFpQixXQUNiNkcsRUFBZ0J6a0MsU0FBVSxFQUMxQjQrQyxFQUFZeHJDLFFBQ1pzckMsRUFBUXRyQyxXQUVScXhCLEVBQWdCemtDLFFBQ2hCLE9BQVFrTyxFQUFpQnZULGNBQWN1VCxFQUFpQjR3QyxTQUFVLEtBQU1MLEVBQWlCL2xELEtBQUksU0FBVW9zQixHQUFTLE9BQVE1VyxFQUFpQnZULGNBQWM4N0MsR0FBZSxDQUFFLzZDLElBQUswN0MsR0FBWXR5QixHQUFRN0MsV0FBVyxFQUFNcFgsVUFBU0EsUUFBVTVhLEVBQW1CeW1ELHNCQUF1QkEsR0FBeUI1eEIsT0FHNVMyNUIsRUFBbUJ2eEMsRUFBTTJPLGNBQWMsR0FBSTNPLEVBQU1nRSxPQUFPdXRDLElBQW1CLEdBTzNFLElBSkEsSUFBSU0sRUFBY0osRUFBZ0IzK0MsUUFBUXRILElBQUkwK0MsSUFDMUM0SCxFQUFhWixFQUFpQjFsRCxJQUFJMCtDLElBRWxDNkgsRUFBYUYsRUFBWWpvRCxPQUNwQnpCLEVBQUksRUFBR0EsRUFBSTRwRCxFQUFZNXBELElBQUssQ0FDakMsSUFBSXFHLEVBQU1xakQsRUFBWTFwRCxJQUNXLElBQTdCMnBELEVBQVc5dEQsUUFBUXdLLElBQ25CZ2pELEVBQVFyaEQsSUFBSTNCLEdBOENwQixPQXpDSXdpRCxHQUFtQlEsRUFBUS9sQyxPQUMzQjhsQyxFQUFtQixJQUl2QkMsRUFBUWpzRCxTQUFRLFNBQVVpSixHQUV0QixJQUFpQyxJQUE3QnNqRCxFQUFXOXRELFFBQVF3SyxHQUF2QixDQUVBLElBQUlvcEIsRUFBUTg1QixFQUFZanVELElBQUkrSyxHQUM1QixHQUFLb3BCLEVBQUwsQ0FFQSxJQUFJbzZCLEVBQWlCSCxFQUFZN3RELFFBQVF3SyxHQWdCekMraUQsRUFBaUJsdEQsT0FBTzJ0RCxFQUFnQixFQUFHaHhDLEVBQWlCdlQsY0FBYzg3QyxHQUFlLENBQUUvNkMsSUFBSzA3QyxHQUFZdHlCLEdBQVE3QyxXQUFXLEVBQU9rQixlQWZ6SCxXQUNUeTdCLEVBQVlyM0MsT0FBTzdMLEdBQ25CZ2pELEVBQVFuM0MsT0FBTzdMLEdBRWYsSUFBSXlqRCxFQUFjUixFQUFnQjMrQyxRQUFRK2hCLFdBQVUsU0FBVXE5QixHQUFnQixPQUFPQSxFQUFhMWpELE1BQVFBLEtBRzFHLEdBRkFpakQsRUFBZ0IzK0MsUUFBUXpPLE9BQU80dEQsRUFBYSxJQUV2Q1QsRUFBUS9sQyxLQUFNLENBRWYsR0FEQWdtQyxFQUFnQjMrQyxRQUFVbytDLEdBQ0EsSUFBdEIveEMsRUFBVXJNLFFBQ1YsT0FDSncyQyxJQUNBcnpCLEdBQWtCQSxNQUdvSW5yQixPQUFRQSxFQUFRMCtDLHNCQUF1QkEsR0FBeUI1eEIsU0FJbE8yNUIsRUFBbUJBLEVBQWlCL2xELEtBQUksU0FBVW9zQixHQUM5QyxJQUFJcHBCLEVBQU1vcEIsRUFBTXBwQixJQUNoQixPQUFPZ2pELEVBQVFwdUQsSUFBSW9MLEdBQU8sRUFBV3dTLEVBQWlCdlQsY0FBYzg3QyxHQUFlLENBQUUvNkMsSUFBSzA3QyxHQUFZdHlCLEdBQVE3QyxXQUFXLEVBQU15MEIsc0JBQXVCQSxHQUF5QjV4QixNQUV2SyxlQUFSelcsR0FDQTZ2QyxHQUNBTyxFQUFpQjNuRCxPQUFTLEdBQzFCc29DLFFBQVFDLEtBQUssK0pBRVRueEIsRUFBaUJ2VCxjQUFjdVQsRUFBaUI0d0MsU0FBVSxLQUFNSixFQUFRL2xDLEtBQzFFOGxDLEVBQ0FBLEVBQWlCL2xELEtBQUksU0FBVW9zQixHQUFTLE9BQU8zWCxFQUFNa3lDLGFBQWF2NkIsUUE0aEM1RTdYLEVBQVFxeUMsb0JBOTlCa0IsU0FBVXptRCxHQUNoQyxJQUFJK3JCLEVBQVcvckIsRUFBRytyQixTQUlsQixPQUhBMVcsRUFBaUJzQyxXQUFVLFdBQ3ZCcEQsRUFBVXNQLFNBQVEsRUFBTyw2R0FDMUIsSUFDS3hPLEVBQWlCdlQsY0FBYzQ4QyxHQUFhLENBQUUzeEIsR0FBSWxULEdBQVksV0FBYyxNQUFPLE9BQU8wRCxPQUFPd1AsVUFBYWhCLElBMDlCMUgzWCxFQUFRb3FDLDZCQUErQkEsR0FDdkNwcUMsRUFBUW13QyxhQUFlQSxHQUN2Qm53QyxFQUFRMFgsU0FBV0EsR0FDbkIxWCxFQUFRc3FDLFlBQWNBLEdBQ3RCdHFDLEVBQVFta0IsbUJBQXFCQSxHQUM3Qm5rQixFQUFRc3lDLFdBcDVCUixTQUFvQjFtRCxHQUNoQixJQUFJK3JCLEVBQVcvckIsRUFBRytyQixTQUFVeFYsRUFBV3ZXLEVBQUd1VyxTQUFValMsRUFBS3RFLEVBQUc0VyxPQUFRQSxPQUFnQixJQUFQdFMsR0FBd0JBLEVBQ2xDcWlELEVBQTFEdHlDLEVBQU1nRSxPQUFPL0QsRUFBTWdFLFVBQVU2bUMsR0FBYTVvQyxJQUFZLEdBQXFCLEdBQ2hGcXdDLEVBQWlCdHlDLEVBQU15RixZQUFPM2lCLEdBSWxDLElBQUsrbkQsR0FBYTVvQyxHQUFXLENBQ3pCLElBQUk0akIsRUFBVzVqQixFQUFTNGpCLFNBQVUwc0IsRUFBaUJ4eUMsRUFBTW5NLE9BQU9xTyxFQUFVLENBQUMsYUFDM0Vxd0MsRUFBZXovQyxRQUFVZ3pCLEVBQ3pCN2pCLEVBQWF1d0MsR0FZakIsT0FWQXZ5QyxFQUFNcUQsV0FBVSxXQUNSd25DLEdBQWE1b0MsSUFDYkEsSUFBV3ZmLE1BQUssU0FBVWdKLEdBQ3RCLElBQUltNkIsRUFBV242QixFQUFHbTZCLFNBQ2xCN2pCLEVBRDZDakMsRUFBTW5NLE9BQU9sSSxFQUFJLENBQUMsY0FFL0Q0bUQsRUFBZXovQyxRQUFVZ3pCLEVBQ3pCd3NCLEdBQVksUUFHckIsSUFDS3R4QyxFQUFpQnZULGNBQWM0VSxFQUFZdWtCLFNBQVUsQ0FBRTcvQixNQUFPLENBQUUrK0IsU0FBVXlzQixFQUFlei9DLFFBQVN5UCxPQUFRQSxJQUFZbVYsSUErM0JsSTNYLEVBQVEweUMsYUE1OEJSLFNBQXNCOW1ELEdBQ2xCLElBQUkrckIsRUFBVy9yQixFQUFHK3JCLFNBQVU4UixFQUFjNzlCLEVBQUc2OUIsWUFBYXBFLEVBQVNwbEIsRUFBTW5NLE9BQU9sSSxFQUFJLENBQUMsV0FBWSxnQkFDakc2OUIsR0FBZUQsR0FBd0JDLElBSXZDcEUsRUFBU3BsQixFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLEdBQUlwSyxFQUFNK0MsV0FBV04sSUFBdUIwaUIsSUFLNUV4aUIsU0FBVzRDLEdBQVksV0FBYyxPQUFPNGYsRUFBT3hpQixZQUsxRCxJQUFJL0UsRUFBVW9DLEVBQU1zbEIsU0FBUSxXQUFjLE9BQU9ILElBQVcsQ0FBQ2tNLEtBQUtDLFVBQVVuTSxFQUFPMW1CLFlBQWEwbUIsRUFBT3ppQixtQkFBb0J5aUIsRUFBT3ZpQixnQkFDbEksT0FBUTdCLEVBQWlCdlQsY0FBY2lWLEVBQW9Ca2tCLFNBQVUsQ0FBRTcvQixNQUFPOFcsR0FBVzZaLElBNDdCN0YzWCxFQUFRMkMsb0JBQXNCQSxFQUM5QjNDLEVBQVErQyxjQUFnQkEsRUFDeEIvQyxFQUFRemQsWUFBY0EsRUFDdEJ5ZCxFQUFRbUQsZ0JBQWtCQSxFQUMxQm5ELEVBQVEydEMsUUFBVUEsR0FDbEIzdEMsRUFBUW9rQix5QkFBMkJBLEdBQ25DcGtCLEVBQVEydkIsZ0JBQWtCQSxHQUMxQjN2QixFQUFRc1csa0JBQW9CQSxHQUM1QnRXLEVBQVFyUyxRQUFVQSxHQUNsQnFTLEVBQVF3MUIscUJBQXVCQSxHQUMvQngxQixFQUFRMnZDLGtCQUFvQkEsR0FDNUIzdkMsRUFBUXRPLFdBQWFBLEdBQ3JCc08sRUFBUTZTLFdBQWFBLEdBQ3JCN1MsRUFBUWkxQix3QkFBMEJBLEdBQ2xDajFCLEVBQVFpVSxVQUFZQSxHQUNwQmpVLEVBQVEyeUMseUJBMXhDUixTQUFrQ2xrRCxHQUM5QixPQUFPbTJCLEdBQXNCeUksR0FBc0I1K0IsRUFBSyxDQUFFbTdCLG9CQUFvQixHQUFTb2YsR0FBZXJDLEdBQXdCa0MsTUEweENsSTdvQyxFQUFRNGtCLHNCQUF3QkEsR0FDaEM1a0IsRUFBUWl1QyxhQUFlQSxHQUN2Qmp1QyxFQUFRa3VDLE9BQVNBLEdBQ2pCbHVDLEVBQVEwcEIsWUFBY0EsR0FDdEIxcEIsRUFBUW9ELFVBQVlBLEVBQ3BCcEQsRUFBUW93QixhQUFlQSxHQUN2QnB3QixFQUFRNkgsY0FBZ0JBLEVBQ3hCN0gsRUFBUXNwQixrQkFBb0JBLEdBQzVCdHBCLEVBQVFrcEMsRUFBSUEsR0FDWmxwQyxFQUFRdXNCLG1CQUFxQkEsR0FDN0J2c0IsRUFBUWlwQyxPQUFTQSxHQUNqQmpwQyxFQUFRbFEsWUFBY0EsRUFDdEJrUSxFQUFROFgsbUJBQXFCQSxHQUM3QjlYLEVBQVFwUSxVQUFZQSxHQUNwQm9RLEVBQVFrd0MsYUFBZUEsR0FDdkJsd0MsRUFBUWl3QyxxQkFBdUJBLEdBQy9CandDLEVBQVF3dkMsa0JBQW9CQSxHQUM1Qnh2QyxFQUFRNHlDLFNBalRSLFdBRUksSUFEQSxJQUFJQyxFQUFRLEdBQ0gzNEIsRUFBSyxFQUFHQSxFQUFLQyxVQUFVdHdCLE9BQVFxd0IsSUFDcEMyNEIsRUFBTTM0QixHQUFNQyxVQUFVRCxHQUUxQixJQUFJNzFCLEVBQVE2YixFQUFNeUYsT0FBTyxHQUNyQi9aLEVBQUtxVSxFQUFNZ0UsT0FBTy9ELEVBQU1nRSxTQUFTMnVDLEVBQU14dUQsRUFBTTBPLFVBQVcsR0FBSS9PLEVBQU80SCxFQUFHLEdBQUlrbkQsRUFBVWxuRCxFQUFHLEdBQ3ZGbW5ELEVBQVc3eUMsRUFBTTRtQixhQUFZLFNBQVU5ekIsR0FDdkMzTyxFQUFNME8sUUFDYyxpQkFBVEMsRUFDRHFOLEVBQVV6VyxLQUFLLEVBQUdpcEQsRUFBTWhwRCxPQUFReEYsRUFBTTBPLFFBQVUsR0FDaERDLEVBQ1Y4L0MsRUFBUUQsRUFBTXh1RCxFQUFNME8sWUFDckJrTixFQUFNMk8sY0FBYyxDQUFDaWtDLEVBQU1ocEQsUUFBU29XLEVBQU1nRSxPQUFPNHVDLElBQVEsSUFDNUQsTUFBTyxDQUFDN3VELEVBQU0rdUQsSUFvU2xCL3lDLEVBQVFnekMsMkJBakhSLFNBQTBCbkMsR0FDdEIsSUFBSWpsRCxFQUFLcVUsRUFBTWdFLE9BQU8vRCxFQUFNZ0UsU0FBUzJzQyxHQUFlLEdBQUkzcUIsRUFBaUJ0NkIsRUFBRyxHQUFJcW5ELEVBQW9Ccm5ELEVBQUcsR0FDbkcrNUIsRUFBY1gsR0FBZSxJQUFJLEdBQ2pDNWhDLEVBQVVxaUIsR0FBWSxXQUN0QixPQUFPa3JDLEdBQW1CLENBQUVsdkMsTUFBTyxHQUFJa2tCLFlBQWFBLEdBQWUsQ0FBRWtyQixhQUFjQSxPQWdCdkYsT0FkQTN3QyxFQUFNcUQsV0FBVSxXQUVaLE9BREFuZ0IsRUFBUTZiLE1BQU0sSUFDUDdiLEVBQVErNEIsVUFDaEIsQ0FBQy80QixJQUNKOGMsRUFBTXFELFdBQVUsV0FDWm5nQixFQUFRdWhDLFNBQVMsQ0FDYnRVLFNBQVUsU0FBVXhzQixHQUNoQm92RCxFQUFrQmh6QyxFQUFNcUssU0FBUyxHQUFJem1CLFNBRzlDLENBQUNvdkQsRUFBbUI3dkQsSUFJaEIsQ0FBQzhpQyxFQUhhemdCLEdBQVksV0FBYyxPQUFPLFNBQVV5dEMsR0FDNUQsT0FBTzFkLEdBQXFCcHlDLEVBQVM4dkQsU0FnRzdDbHpDLEVBQVFtekMsMkJBaEVSLFNBQTBCaHVELEdBQ3RCLElBQUlpdUQsRUFBZWhILEdBQWUsR0FDOUJpSCxFQUFlakgsR0FBZSxHQUM5QmxwQyxFQUFnQkYsSUFjcEIsT0FiQTdDLEVBQVV2TCxhQUFhelAsSUFBUytkLEdBQWdCLDhHQUNoRC9DLEVBQVVzUCxRQUFRc2hDLEdBQVcsMkZBQzdCQSxJQUFZLEVBQ1I1ckQsR0FDQWl1RCxFQUFlanVELEVBQU02a0IsUUFBVW9wQyxFQUMvQkMsRUFBZWx1RCxFQUFNOGtCLFFBQVVvcEMsR0FFMUJud0MsSUFDTGt3QyxFQUFlbHdDLEVBQWN1eEIsU0FBUyxTQUFVLEdBQ2hENGUsRUFBZW53QyxFQUFjdXhCLFNBQVMsU0FBVSxJQUk3QyxDQUFFenFCLE9BRklvakMsR0FBYWdHLEVBQWN0QyxJQUVmN21DLE9BRFptakMsR0FBYWlHLEVBQWN2QyxNQWlENUM5d0MsRUFBUTB0QixZQUFjQSxHQUN0QjF0QixFQUFRc3pDLGdCQTVMUixXQUNJLE9BQU83dEMsRUFBWTZxQyxLQTRMdkJ0d0MsRUFBUXV6QyxpQkF4aEJSLFNBQTBCanZDLEdBQ3RCLElBQUk5Z0IsRUFBU2lpQixFQUFZMG9DLElBY3pCLE9BYkE5cUMsR0FBMEIsV0FDdEIsSUFBSWpnQixFQUFVa2hCLEVBQUl2UixRQUVsQixHQURBb04sRUFBVXZMLFlBQVl4UixFQUFTLGlFQUMxQkEsRUFBTCxDQUVBLElBQUlvd0QsRUFBcUI5RSxHQUFvQmxyRCxFQXhDdkIsU0FBVUosR0FBVyxPQUFPLFdBQ3RELE1BQU8sQ0FDSHdyRCxRQUFTeHJELEVBQVFzbEQsV0FDakJtRyxRQUFTenJELEVBQVF3bEQsVUFDakJrRyxXQUFZMXJELEVBQVFxd0QsWUFBY3J3RCxFQUFRc3dELFlBQzFDM0UsV0FBWTNyRCxFQUFRdXdELGFBQWV2d0QsRUFBUXd3RCxlQW1DVUMsQ0FBd0J6d0QsSUFDekUwd0QsRUFBaUJ2bUIsR0FBWW5xQyxFQUFTLFNBQVVvd0QsR0FDaERPLEVBQWlCeG1CLEdBQVlucUMsRUFBUyxTQUFVb3dELEdBQ3BELE9BQU8sV0FDSE0sR0FBa0JBLElBQ2xCQyxHQUFrQkEsUUFFdkIsSUFDSXZ3RCxHQTBnQlh3YyxFQUFRb3BDLGVBQWlCQSxHQUN6QnBwQyxFQUFRZzBDLFVBdlNSLFNBQW1CMXZDLEVBQUsxWSxHQUNwQixJQUFJc0UsT0FBWSxJQUFQdEUsRUFBZ0IsR0FBS0EsRUFBSTROLEVBQU90SixFQUFHc0osS0FBTUMsRUFBU3ZKLEVBQUd1SixPQUFRRSxFQUFTekosRUFBR3lKLE9BQVFvYyxFQUFLN2xCLEVBQUd1TSxLQUFNQSxPQUFjLElBQVBzWixHQUF3QkEsRUFDbklDLEVBQUsvVixFQUFNZ0UsT0FBTy9ELEVBQU1nRSxVQUFTLEdBQVEsR0FBSXl0QixFQUFXM2IsRUFBRyxHQUFJaStCLEVBQVlqK0IsRUFBRyxHQWdCbEYsT0FmQTlWLEVBQU1xRCxXQUFVLFdBQ1osSUFBSTNYLEVBQ0osTUFBSzBZLEVBQUl2UixTQUFZMEosR0FBUWsxQixHQUE3QixDQUVBLElBSUl2aUMsRUFBVSxDQUNWb0ssS0FBMEUsUUFBbkU1TixFQUFLNE4sTUFBQUEsT0FBbUMsRUFBU0EsRUFBS3pHLGVBQTRCLElBQVBuSCxFQUFnQkEsT0FBSzVJLEVBQ3ZHeVcsT0FBUUEsRUFDUkUsT0FBbUIsU0FBWEEsRUFBb0IsTUFBUUEsR0FFeEMsT0FBTzRHLEVBQUlqSCxPQUFPZ0wsRUFBSXZSLFNBVFIsV0FFVixPQURBa2hELEdBQVUsR0FDSHgzQyxPQUFPelosRUFBWSxXQUFjLE9BQU9peEQsR0FBVSxNQU9yQjdrRCxNQUN6QyxDQUFDb0ssRUFBTThLLEVBQUs3SyxFQUFRZ0QsSUFDaEJrMUIsR0FzUlgzeEIsRUFBUXV3QywyQkFBNkJBLEdBQ3JDdndDLEVBQVFrMEMscUJBbExSLFdBQ0ksSUFBSXRvRCxFQUFLcVUsRUFBTWdFLE9BQU9tbEMsS0FBa0IsR0FBSStLLEVBQWN2b0QsRUFBRyxHQUFJeTlDLEVBQW9CejlDLEVBQUcsR0FDcEZ3b0QsRUFBK0I3RCxLQVNuQyxPQVJBcndDLEVBQU1xRCxXQUFVLFdBSVpwQyxFQUF1QixRQUFFMkYsWUFBVyxXQUNoQyxPQUFPM0YsRUFBdUIsUUFBRTJGLFlBQVcsV0FBYyxPQUFRd0gsR0FBc0J2YixTQUFVLFVBRXRHLENBQUNzMkMsSUFDRyxTQUFVcnlCLEdBQ2JvOUIsR0FBNkIsV0FDekI5bEMsR0FBc0J2YixTQUFVLEVBQ2hDb2hELElBQ0FuOUIsU0FvS1poWCxFQUFRcTBDLGFBaDhIUixXQUNJLE9BR21CLFFBREp2MkMsRUFGRW9DLEVBQU0rQyxXQUFXRSxLQUdEckYsRUFBUWtYLFVBRDdDLElBQW1CbFgsR0E4N0huQmtDLEVBQVFxRCwwQkFBNEJBLEVBQ3BDckQsRUFBUXMwQyxrQkEvcUJSLFNBQTJCQyxHQUV2QixJQURBLElBQUkvd0QsRUFBUyxHQUNKMDJCLEVBQUssRUFBR0EsRUFBS0MsVUFBVXR3QixPQUFRcXdCLElBQ3BDMTJCLEVBQU8wMkIsRUFBSyxHQUFLQyxVQUFVRCxHQUsvQixJQUFJczZCLEVBQWVELEVBQVUxcUQsT0FDN0IsU0FBUzRxRCxJQUVMLElBREEsSUFBSW5xRCxFQUFTLEdBQ0psQyxFQUFJLEVBQUdBLEVBQUlvc0QsRUFBY3BzRCxJQUM5QmtDLEdBQVVpcUQsRUFBVW5zRCxHQUNSNUUsRUFBTzRFLEtBRWZrQyxHQUFVOUcsRUFBTzRFLEdBQUcxRSxPQUU1QixPQUFPNEcsRUFFWCxPQUFPeWlELEdBQXVCdnBELEVBQVFpeEQsSUE2cEIxQ3owQyxFQUFRb3NDLGVBQWlCQSxHQUN6QnBzQyxFQUFRNHpCLFlBQWNBLEdBQ3RCNXpCLEVBQVEwRCxpQkFBbUJBLEVBQzNCMUQsRUFBUW1FLHVCQUF5QkEsRUFDakNuRSxFQUFRMDBDLG1CQXRLUixXQU9JLE9BTll6ekMsRUFBaUI2bEIsYUFBWSxXQUNyQyxJQUFJdHRCLEVBQU8ra0MsR0FBbUJ4ckMsUUFDekJ5RyxHQUVMQSxFQUFLMnBCLGNBQ04sS0FpS1BuakIsRUFBUTIwQyxVQTVvQlIsU0FBbUIxaEMsRUFBUW9TLFFBQ1IsSUFBWEEsSUFBcUJBLEVBQVMsSUFDbEMsSUFBSXhpQixFQUFXM0MsRUFBTStDLFdBQVdOLEdBQXFCRSxTQUNqRCt4QyxFQUF3QjEwQyxFQUFNeUYsT0FBTyxNQUNyQzNlLEVBQVFvbEQsR0FBZXZrQyxFQUFjb0wsR0FBVUEsRUFBT3Z2QixNQUFRdXZCLEdBaUJsRSxPQWhCQS9TLEVBQU1zbEIsU0FBUSxXQUNWLE9BQU94K0IsRUFBTXVnQixRQUFPLFNBQVUxakIsRUFBR1AsR0FLN0IsT0FBSXVmLEVBQ092ZixFQUFJTyxJQUNYK3dELEVBQXNCN2hELFNBQ3RCNmhELEVBQXNCN2hELFFBQVFyRyxPQUVsQ2tvRCxFQUFzQjdoRCxRQUFVc04sRUFBVTFTLFFBQVFzUyxFQUFNcUssU0FBU3JLLEVBQU1xSyxTQUFTLENBQUVqWixLQUFNckssRUFBTXRELE1BQU9pUyxHQUFJOVIsRUFBR3dSLFNBQVVyTyxFQUFNOGQsZUFBaUJ1Z0IsR0FBUyxDQUFFaFYsU0FBVS9zQixLQUMzSjBELEVBQU10RCxZQUVsQixDQUFDNnRDLEtBQUtDLFVBQVVuTSxLQS9MdkIsU0FBcUJyK0IsRUFBT2d3QixHQUN4QjlXLEVBQU1xRCxXQUFVLFdBQ1osR0FBSXNFLEVBQWM3Z0IsR0FDZCxPQUFPQSxFQUFNbWdCLFNBQVM2UCxLQUMzQixDQUFDQSxJQTRMSjY5QixDQUFZNWhDLEdBQVEsU0FBVXB2QixHQUFLLE9BQU9tRCxFQUFNMUQsSUFBSW1HLFdBQVc1RixPQUN4RG1ELEdBd25CWGdaLEVBQVE4MEMsUUFqZFIsV0FDSSxJQUFJN25ELEVBQU9tL0MsR0FBZSxHQUUxQixPQURBb0QsSUFBa0IsU0FBVWhvRCxHQUFLLE9BQU95RixFQUFLM0osSUFBSWtFLE1BQzFDeUYsR0ErY1grUyxFQUFRb3RDLGFBQWVBLEdBQ3ZCcHRDLEVBQVEyd0IsaUJBQW1CQSxHQUMzQjN3QixFQUFRKzBDLFlBN21CUixTQUFxQi90RCxHQUNqQixJQUFJcU8sRUFBVysyQyxHQUFlcGxELEVBQU04ZCxlQU1wQyxPQUxBNUUsRUFBTXFELFdBQVUsV0FDWixPQUFPdmMsRUFBTXdmLDBCQUEwQnBXLEtBQUksU0FBVTRrRCxHQUNqRDMvQyxFQUFTL1IsSUFBSTB4RCxRQUVsQixDQUFDaHVELElBQ0dxTyxHQXVtQlgySyxFQUFRaTFDLGtCQXBmUixXQVVJLE9BTkt2SCxLQUNEQSxHQUF1QlMsTUFFM0I5cUMsR0FBMEIsWUFDckJpWCxJQWxDVCxXQUNJQSxJQUFlLEVBQ2YsSUFBSWs1QixFQUFxQjlFLEdBQW9CaEIsR0FBc0JzQixJQUNuRXpoQixHQUFZaitCLE9BQVEsU0FBVWtrRCxHQUM5QmptQixHQUFZaitCLE9BQVEsU0FBVWtrRCxHQThCVDBCLEtBQ2xCLElBQ0l4SCxJQTJlWDF0QyxFQUFRZ0Qsd0JBQTBCQSxFQUNsQ2hELEVBQVFrRCxjQUFnQkEsR0FDeEJsRCxFQUFRd3VCLFlBQWNBLGdEQ3J6UXRCLElBQUkybUIsRUFBa0IsNDVIQVl0QixTQ2JNQyxFQUFRLEdBQ0wsU0FBVUMsR0FFZixZQURtQnJ5RCxJQUFmb3lELEVBQU1DLEtBQW9CRCxFQUFNQyxJRENWOXZDLEVDRG9COHZDLEVERXpDRixFQUFnQjdyQyxLQUFLL0QsSUFBZ0MsTUFBdkJBLEVBQUsrdkMsV0FBVyxJQUUzQixNQUF2Qi92QyxFQUFLK3ZDLFdBQVcsSUFFaEIvdkMsRUFBSyt2QyxXQUFXLEdBQUssS0NMZkYsRUFBTUMsR0RBRyxJQUFVOXZDLElDSjlCLElBQ002dkMsNEJDQ05ybkQsT0FBT2dTLGVBQWVDLEVBQVMsYUFBL0IsQ0FBK0NoWixPQUFPLElBRXRELE1BQU11dUQsRUFBbUIsRUFBSSxHQUFNLElBQzdCakcsRUFBd0Msb0JBQWhCL2lELFlBQ3hCLElBQU1BLFlBQVlELE1BQ2xCLElBQU1pakQsS0FBS2pqRCxNQUNYa3BELEVBQWdDLG9CQUFYbG1ELE9BQ3BCMG5CLEdBQWExbkIsT0FBT2xELHNCQUFzQjRxQixHQUMxQ0EsR0FBYXRHLFlBQVcsSUFBTXNHLEVBQVNzNEIsTUFBbUJpRyxHQTBEakUsSUFBSUUsR0FBb0IsRUFDcEJDLEdBQWUsRUFDZkMsR0FBZSxFQUNuQixNQUFNQyxFQUFRLENBQ1Y3OEMsTUFBTyxFQUNQcE4sVUFBVyxHQUVUa3FELEVBQWEsQ0FDZixPQUNBLFNBQ0EsWUFDQSxTQUNBLGNBRUU1c0QsRUFBUTRzRCxFQUFXM3ZELFFBQU8sQ0FBQ3d4QyxFQUFLanBDLEtBQ2xDaXBDLEVBQUlqcEMsR0F2RVIsU0FBMEJpbkQsR0FDdEIsSUFBSUksRUFBUSxHQUNSQyxFQUFpQixHQUNqQkMsRUFBVyxFQUNYTCxHQUFlLEVBQ2ZNLEdBQWlCLEVBQ3JCLE1BQU1DLEVBQWMsSUFBSUMsUUFDbEJDLEVBQU8sQ0FDVEMsU0FBVSxDQUFDci9CLEVBQVVzL0IsR0FBWSxFQUFPQyxHQUFZLEtBQ2hELE1BQU1DLEVBQW9CRCxHQUFhWixFQUNqQ2MsRUFBU0QsRUFBb0JWLEVBQVFDLEVBUTNDLE9BUElPLEdBQ0FKLEVBQVk5bEQsSUFBSTRtQixJQUNjLElBQTlCeS9CLEVBQU94eUQsUUFBUSt5QixLQUNmeS9CLEVBQU92eUQsS0FBSzh5QixHQUNSdy9CLEdBQXFCYixJQUNyQkssRUFBV0YsRUFBTWpzRCxTQUVsQm10QixHQUVYcHFCLE9BQVNvcUIsSUFDTCxNQUFNM3lCLEVBQVEweEQsRUFBZTl4RCxRQUFRK3lCLElBQ3RCLElBQVgzeUIsR0FDQTB4RCxFQUFlenhELE9BQU9ELEVBQU8sR0FDakM2eEQsRUFBWTU3QyxPQUFPMGMsSUFFdkIzVixRQUFVcTFDLElBQ04sR0FBSWYsRUFDQU0sR0FBaUIsTUFEckIsQ0FRQSxHQUpBTixHQUFlLEdBQ2RHLEVBQU9DLEdBQWtCLENBQUNBLEVBQWdCRCxHQUMzQ0MsRUFBZWxzRCxPQUFTLEVBQ3hCbXNELEVBQVdGLEVBQU1qc0QsT0FDYm1zRCxFQUNBLElBQUssSUFBSTV0RCxFQUFJLEVBQUdBLEVBQUk0dEQsRUFBVTV0RCxJQUFLLENBQy9CLE1BQU00dUIsRUFBVzgrQixFQUFNMXRELEdBQ3ZCNHVCLEVBQVMwL0IsR0FDTFIsRUFBWTd5RCxJQUFJMnpCLEtBQ2hCby9CLEVBQUtDLFNBQVNyL0IsR0FDZDArQixLQUlaQyxHQUFlLEVBQ1hNLElBQ0FBLEdBQWlCLEVBQ2pCRyxFQUFLLzBDLFFBQVFxMUMsT0FJekIsT0FBT04sRUFtQklPLEVBQWlCLElBQU9qQixHQUFlLElBQzNDaGUsSUFDUixJQUNHdDNCLEVBQU95MUMsRUFBVzN2RCxRQUFPLENBQUN3eEMsRUFBS2pwQyxLQUNqQyxNQUFNMm5ELEVBQU9udEQsRUFBTXdGLEdBTW5CLE9BTEFpcEMsRUFBSWpwQyxHQUFPLENBQUM0UyxFQUFTaTFDLEdBQVksRUFBT0MsR0FBWSxLQUMzQ2IsR0FDRGtCLElBQ0dSLEVBQUtDLFNBQVNoMUMsRUFBU2kxQyxFQUFXQyxJQUV0QzdlLElBQ1IsSUFDR3BiLEVBQWF1NUIsRUFBVzN2RCxRQUFPLENBQUN3eEMsRUFBS2pwQyxLQUN2Q2lwQyxFQUFJanBDLEdBQU94RixFQUFNd0YsR0FBSzdCLE9BQ2Y4cUMsSUFDUixJQUNHbGEsRUFBWXE0QixFQUFXM3ZELFFBQU8sQ0FBQ3d4QyxFQUFLanBDLEtBQ3RDaXBDLEVBQUlqcEMsR0FBTyxJQUFNeEYsRUFBTXdGLEdBQUs0UyxRQUFRdTBDLEdBQzdCbGUsSUFDUixJQUNHbWYsRUFBZUMsR0FBVzd0RCxFQUFNNnRELEdBQVF6MUMsUUFBUXUwQyxHQUNoRG1CLEVBQWdCcHJELElBQ2xCK3BELEdBQWUsRUFDZkUsRUFBTTc4QyxNQUFRMDhDLEVBQ1JGLEVBQ0FsdEQsS0FBS2lCLElBQUlqQixLQUFLZ0IsSUFBSXNDLEVBQVlpcUQsRUFBTWpxRCxVQXpDM0IsSUF5Q21ELEdBQ2xFaXFELEVBQU1qcUQsVUFBWUEsRUFDbEJncUQsR0FBZSxFQUNmRSxFQUFXcndELFFBQVFxeEQsR0FDbkJsQixHQUFlLEVBQ1hELElBQ0FELEdBQW9CLEVBQ3BCRCxFQUFZdUIsS0FHZEgsRUFBWSxLQUNkbEIsR0FBZSxFQUNmRCxHQUFvQixFQUNmRSxHQUNESCxFQUFZdUIsSUFJcEIvMkMsRUFBUXNjLFdBQWFBLEVBQ3JCdGMsRUFBQSxRQUFrQkksRUFDbEJKLEVBQVF3ZCxVQUFZQSxFQUNwQnhkLEVBQVE2RyxhQUxhLElBQU0rdUMsNEVDNUgzQixJQUFJbm1DLEVBQVUsYUFDVjdhLEVBQVkseUNDQ2hCLElBQUlvaUQsRUFBVSxFQUFRLEtBTWxCQyxFQUFnQixDQUNsQkMsbUJBQW1CLEVBQ25CQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsY0FBYyxFQUNkQyxhQUFhLEVBQ2JDLGlCQUFpQixFQUNqQkMsMEJBQTBCLEVBQzFCQywwQkFBMEIsRUFDMUJDLFFBQVEsRUFDUkMsV0FBVyxFQUNYbHVDLE1BQU0sR0FFSm11QyxFQUFnQixDQUNsQnJ5RCxNQUFNLEVBQ05zRSxRQUFRLEVBQ1JzRSxXQUFXLEVBQ1gwcEQsUUFBUSxFQUNSQyxRQUFRLEVBQ1IzOUIsV0FBVyxFQUNYNDlCLE9BQU8sR0FTTEMsRUFBZSxDQUNqQixVQUFZLEVBQ1pDLFNBQVMsRUFDVFosY0FBYyxFQUNkQyxhQUFhLEVBQ2JLLFdBQVcsRUFDWGx1QyxNQUFNLEdBRUp5dUMsRUFBZSxHQUluQixTQUFTQyxFQUFXQyxHQUVsQixPQUFJcEIsRUFBUXFCLE9BQU9ELEdBQ1ZKLEVBSUZFLEVBQWFFLEVBQW9CLFdBQU1uQixFQVZoRGlCLEVBQWFsQixFQUFRc0IsWUFoQkssQ0FDeEIsVUFBWSxFQUNaMXhDLFFBQVEsRUFDUnl3QyxjQUFjLEVBQ2RDLGFBQWEsRUFDYkssV0FBVyxHQVliTyxFQUFhbEIsRUFBUXVCLE1BQVFQLEVBWTdCLElBQUlqNEMsRUFBaUJoUyxPQUFPZ1MsZUFDeEJ5NEMsRUFBc0J6cUQsT0FBT3lxRCxvQkFDN0JDLEVBQXdCMXFELE9BQU8wcUQsc0JBQy9CMzNDLEVBQTJCL1MsT0FBTytTLHlCQUNsQzQzQyxFQUFpQjNxRCxPQUFPMnFELGVBQ3hCQyxFQUFrQjVxRCxPQUFPSSxVQXNDN0J5cUQsRUFBTzU0QyxRQXJDUCxTQUFTNjRDLEVBQXFCQyxFQUFpQkMsRUFBaUJDLEdBQzlELEdBQStCLGlCQUFwQkQsRUFBOEIsQ0FFdkMsR0FBSUosRUFBaUIsQ0FDbkIsSUFBSU0sRUFBcUJQLEVBQWVLLEdBRXBDRSxHQUFzQkEsSUFBdUJOLEdBQy9DRSxFQUFxQkMsRUFBaUJHLEVBQW9CRCxHQUk5RCxJQUFJMTdDLEVBQU9rN0MsRUFBb0JPLEdBRTNCTixJQUNGbjdDLEVBQU9BLEVBQUs2TCxPQUFPc3ZDLEVBQXNCTSxLQU0zQyxJQUhBLElBQUlHLEVBQWdCZixFQUFXVyxHQUMzQkssRUFBZ0JoQixFQUFXWSxHQUV0QjN3RCxFQUFJLEVBQUdBLEVBQUlrVixFQUFLelQsU0FBVXpCLEVBQUcsQ0FDcEMsSUFBSXFHLEVBQU02TyxFQUFLbFYsR0FFZixLQUFLd3ZELEVBQWNucEQsSUFBVXVxRCxHQUFhQSxFQUFVdnFELElBQVcwcUQsR0FBaUJBLEVBQWMxcUQsSUFBV3lxRCxHQUFpQkEsRUFBY3pxRCxJQUFPLENBQzdJLElBQUkycUQsRUFBYXQ0QyxFQUF5Qmk0QyxFQUFpQnRxRCxHQUUzRCxJQUVFc1IsRUFBZSs0QyxFQUFpQnJxRCxFQUFLMnFELEdBQ3JDLE1BQU85cUQsT0FLZixPQUFPd3FELDZCQzFGSSxJQUFJbHpELEVBQUUsbUJBQW9CeXpELFFBQVFBLE9BQU9DLElBQUloc0QsRUFBRTFILEVBQUV5ekQsT0FBT0MsSUFBSSxpQkFBaUIsTUFBTS9yRCxFQUFFM0gsRUFBRXl6RCxPQUFPQyxJQUFJLGdCQUFnQixNQUFNaHJELEVBQUUxSSxFQUFFeXpELE9BQU9DLElBQUksa0JBQWtCLE1BQU1DLEVBQUUzekQsRUFBRXl6RCxPQUFPQyxJQUFJLHFCQUFxQixNQUFNRSxFQUFFNXpELEVBQUV5ekQsT0FBT0MsSUFBSSxrQkFBa0IsTUFBTUcsRUFBRTd6RCxFQUFFeXpELE9BQU9DLElBQUksa0JBQWtCLE1BQU16NEMsRUFBRWpiLEVBQUV5ekQsT0FBT0MsSUFBSSxpQkFBaUIsTUFBTUksRUFBRTl6RCxFQUFFeXpELE9BQU9DLElBQUksb0JBQW9CLE1BQU1wUSxFQUFFdGpELEVBQUV5ekQsT0FBT0MsSUFBSSx5QkFBeUIsTUFBTTM0QyxFQUFFL2EsRUFBRXl6RCxPQUFPQyxJQUFJLHFCQUFxQixNQUFNaHVELEVBQUUxRixFQUFFeXpELE9BQU9DLElBQUksa0JBQWtCLE1BQU1LLEVBQUUvekQsRUFDcGZ5ekQsT0FBT0MsSUFBSSx1QkFBdUIsTUFBTU0sRUFBRWgwRCxFQUFFeXpELE9BQU9DLElBQUksY0FBYyxNQUFNOXhELEVBQUU1QixFQUFFeXpELE9BQU9DLElBQUksY0FBYyxNQUFNejFELEVBQUUrQixFQUFFeXpELE9BQU9DLElBQUksZUFBZSxNQUFNTyxFQUFFajBELEVBQUV5ekQsT0FBT0MsSUFBSSxxQkFBcUIsTUFBTTcwRCxFQUFFbUIsRUFBRXl6RCxPQUFPQyxJQUFJLG1CQUFtQixNQUFNNTBELEVBQUVrQixFQUFFeXpELE9BQU9DLElBQUksZUFBZSxNQUNsUSxTQUFTMzBELEVBQUVnQixHQUFHLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJbTBELEVBQUVuMEQsRUFBRW8wRCxTQUFTLE9BQU9ELEdBQUcsS0FBS3hzRCxFQUFFLE9BQU8zSCxFQUFFQSxFQUFFOGpCLE1BQVEsS0FBS2l3QyxFQUFFLEtBQUt4USxFQUFFLEtBQUs1NkMsRUFBRSxLQUFLa3JELEVBQUUsS0FBS0QsRUFBRSxLQUFLanVELEVBQUUsT0FBTzNGLEVBQUUsUUFBUSxPQUFPQSxFQUFFQSxHQUFHQSxFQUFFbzBELFVBQVksS0FBS2w1QyxFQUFFLEtBQUtGLEVBQUUsS0FBS25aLEVBQUUsS0FBS295RCxFQUFFLEtBQUtILEVBQUUsT0FBTzl6RCxFQUFFLFFBQVEsT0FBT20wRCxHQUFHLEtBQUt2c0QsRUFBRSxPQUFPdXNELElBQUksU0FBU0UsRUFBRXIwRCxHQUFHLE9BQU9oQixFQUFFZ0IsS0FBS3VqRCxFQUFFbHBDLEVBQVFpNkMsVUFBVVAsRUFBRTE1QyxFQUFRazZDLGVBQWVoUixFQUFFbHBDLEVBQVFtNkMsZ0JBQWdCdDVDLEVBQUViLEVBQVFvNkMsZ0JBQWdCWCxFQUFFejVDLEVBQVE5UixRQUFRWixFQUFFMFMsRUFBUXM0QyxXQUFXMzNDLEVBQUVYLEVBQVE2eEMsU0FBU3ZqRCxFQUFFMFIsRUFBUXE2QyxLQUFLN3lELEVBQUV3WSxFQUFRdTRDLEtBQUtxQixFQUFFNTVDLEVBQVFzNkMsT0FBTy9zRCxFQUNoZnlTLEVBQVF1NkMsU0FBU2YsRUFBRXg1QyxFQUFRdzZDLFdBQVdqQixFQUFFdjVDLEVBQVF5NkMsU0FBU252RCxFQUFFMFUsRUFBUTA2QyxZQUFZLFNBQVMvMEQsR0FBRyxPQUFPcTBELEVBQUVyMEQsSUFBSWhCLEVBQUVnQixLQUFLK3pELEdBQUcxNUMsRUFBUTI2QyxpQkFBaUJYLEVBQUVoNkMsRUFBUTQ2QyxrQkFBa0IsU0FBU2oxRCxHQUFHLE9BQU9oQixFQUFFZ0IsS0FBS2tiLEdBQUdiLEVBQVE2NkMsa0JBQWtCLFNBQVNsMUQsR0FBRyxPQUFPaEIsRUFBRWdCLEtBQUs4ekQsR0FBR3o1QyxFQUFRODZDLFVBQVUsU0FBU24xRCxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVvMEQsV0FBV3pzRCxHQUFHMFMsRUFBUSs2QyxhQUFhLFNBQVNwMUQsR0FBRyxPQUFPaEIsRUFBRWdCLEtBQUtnYixHQUFHWCxFQUFRZzdDLFdBQVcsU0FBU3IxRCxHQUFHLE9BQU9oQixFQUFFZ0IsS0FBSzJJLEdBQUcwUixFQUFRaTdDLE9BQU8sU0FBU3QxRCxHQUFHLE9BQU9oQixFQUFFZ0IsS0FBSzZCLEdBQ3pkd1ksRUFBUXE0QyxPQUFPLFNBQVMxeUQsR0FBRyxPQUFPaEIsRUFBRWdCLEtBQUtpMEQsR0FBRzU1QyxFQUFRazdDLFNBQVMsU0FBU3YxRCxHQUFHLE9BQU9oQixFQUFFZ0IsS0FBSzRILEdBQUd5UyxFQUFRbTdDLFdBQVcsU0FBU3gxRCxHQUFHLE9BQU9oQixFQUFFZ0IsS0FBSzZ6RCxHQUFHeDVDLEVBQVFvN0MsYUFBYSxTQUFTejFELEdBQUcsT0FBT2hCLEVBQUVnQixLQUFLNHpELEdBQUd2NUMsRUFBUXE3QyxXQUFXLFNBQVMxMUQsR0FBRyxPQUFPaEIsRUFBRWdCLEtBQUsyRixHQUN6TzBVLEVBQVFzN0MsbUJBQW1CLFNBQVMzMUQsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxtQkFBb0JBLEdBQUdBLElBQUkySSxHQUFHM0ksSUFBSXVqRCxHQUFHdmpELElBQUk2ekQsR0FBRzd6RCxJQUFJNHpELEdBQUc1ekQsSUFBSTJGLEdBQUczRixJQUFJZzBELEdBQUcsaUJBQWtCaDBELEdBQUcsT0FBT0EsSUFBSUEsRUFBRW8wRCxXQUFXdnlELEdBQUc3QixFQUFFbzBELFdBQVdILEdBQUdqMEQsRUFBRW8wRCxXQUFXTixHQUFHOXpELEVBQUVvMEQsV0FBV2w1QyxHQUFHbGIsRUFBRW8wRCxXQUFXcDVDLEdBQUdoYixFQUFFbzBELFdBQVdGLEdBQUdsMEQsRUFBRW8wRCxXQUFXdDFELEdBQUdrQixFQUFFbzBELFdBQVdyMUQsR0FBR2lCLEVBQUVvMEQsV0FBV2wyRCxJQUFJbWMsRUFBUXU3QyxPQUFPNTJELDhCQ1hqVWkwRCxFQUFPNTRDLFFBQVUsRUFBakIsaUNDREZqUyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUEvQixDQUErQ2haLE9BQU8sSUFFdEQsSUFBSWlaLEVBQVEsRUFBUSxLQUNoQkUsRUFBWSxFQUFRLEtBQ3BCRyxFQUFrQixFQUFRLEtBQzFCRixFQUFPLEVBQVEsS0FFbkIsU0FBU0ksRUFBdUJsUyxHQUFLLE9BQU9BLEdBQWtCLGlCQUFOQSxHQUFrQixZQUFhQSxFQUFJQSxFQUFJLENBQUUsUUFBV0EsR0FFNUcsSUFBSTZTLEVBQTZCWCxFQUFzQkosR0FFdkQsTUFBTXUvQixFQUFRLENBQUN0MkMsRUFBS0MsRUFBS3pGLElBQU13RSxLQUFLZ0IsSUFBSWhCLEtBQUtpQixJQUFJekYsRUFBR3dGLEdBQU1DLEdBeUUxRCxTQUFTa3lELEVBQWdCQyxFQUFjcmxELEdBQ25DLE9BQU9xbEQsRUFBZXB6RCxLQUFLOE4sS0FBSyxFQUFJQyxFQUFlQSxHQUd2RCxNQUFNc2xELEVBQWUsQ0FBQyxXQUFZLFVBQzVCQyxFQUFjLENBQUMsWUFBYSxVQUFXLFFBQzdDLFNBQVNDLEVBQWF4c0QsRUFBU2tPLEdBQzNCLE9BQU9BLEVBQUtvRSxNQUFNalQsUUFBeUJ6TCxJQUFqQm9NLEVBQVFYLEtBWXRDLFNBQVM4RyxFQUFPM0osR0FDWixJQUFJLEtBQUV5RixFQUFPLEVBQUcsR0FBRXNFLEVBQUssRUFBRyxVQUFFQyxFQUFZLEVBQUMsVUFBRXdwQyxHQUFjeHpDLEVBQUl3RCxFQUFVNlEsRUFBTW5NLE9BQU9sSSxFQUFJLENBQUMsT0FBUSxLQUFNLFlBQWEsY0FDcEgsTUFBTWtLLEVBQVEsQ0FBRUMsTUFBTSxFQUFPL08sTUFBT3FLLEdBQ3BDLElBQUksVUFBRW1FLEVBQVMsUUFBRUMsRUFBTyxLQUFFQyxFQUFJLFNBQUVMLEVBQVEsU0FBRTNPLEVBQVEsdUJBQUVtMUQsR0FieEQsU0FBMEJ6c0QsR0FDdEIsSUFBSTBzRCxFQUFnQi90RCxPQUFPZ0QsT0FBTyxDQUFFc0UsU0FBVSxFQUFLRyxVQUFXLElBQUtDLFFBQVMsR0FBSUMsS0FBTSxFQUFLbW1ELHdCQUF3QixHQUFTenNELEdBQzVILElBQUt3c0QsRUFBYXhzRCxFQUFTdXNELElBQ3ZCQyxFQUFheHNELEVBQVNzc0QsR0FBZSxDQUNyQyxNQUFNSyxFQS9FZCxVQUFvQixTQUFFcjFELEVBQVcsSUFBRyxPQUFFczFELEVBQVMsSUFBSSxTQUFFM21ELEVBQVcsRUFBQyxLQUFFSyxFQUFPLElBQ3RFLElBQUl1bUQsRUFDQUMsRUFDSi83QyxFQUFVc1AsUUFBUS9vQixHQUFZMk4sSUFBb0IsOENBQ2xELElBQUkrQixFQUFlLEVBQUk0bEQsRUFDdkI1bEQsRUFBZXVwQyxFQVBBLElBQ0EsRUFNOEJ2cEMsR0FDN0MxUCxFQUFXaTVDLEVBVkssSUFDQSxHQVMyQmo1QyxFQUFXLEtBQ2xEMFAsRUFBZSxHQUNmNmxELEVBQVlSLElBQ1IsTUFBTVUsRUFBbUJWLEVBQWVybEQsRUFDbEMyQyxFQUFRb2pELEVBQW1CejFELEVBSWpDLE1BbkJJLE1BZ0JNeTFELEVBQW1COW1ELEdBQ25CbW1ELEVBQWdCQyxFQUFjcmxELEdBQzlCL04sS0FBS21PLEtBQUt1QyxJQUd4Qm1qRCxFQUFjVCxJQUNWLE1BQ00xaUQsRUFEbUIwaUQsRUFBZXJsRCxFQUNQMVAsRUFDM0I2RyxFQUFJd0wsRUFBUTFELEVBQVdBLEVBQ3ZCL0csRUFBSWpHLEtBQUsrekQsSUFBSWhtRCxFQUFjLEdBQUsvTixLQUFLK3pELElBQUlYLEVBQWMsR0FBSy8wRCxFQUM1RDZ5RCxFQUFJbHhELEtBQUttTyxLQUFLdUMsR0FDZHlnRCxFQUFJZ0MsRUFBZ0JuekQsS0FBSyt6RCxJQUFJWCxFQUFjLEdBQUlybEQsR0FFckQsT0E3QkksS0E0Qlk2bEQsRUFBU1IsR0FBMEIsR0FBSyxFQUFJLEtBQ3pDbHVELEVBQUllLEdBQUtpckQsR0FBTUMsS0FJdEN5QyxFQUFZUixHQUNFcHpELEtBQUttTyxLQUFLaWxELEVBQWUvMEQsS0FDeEIrMEQsRUFBZXBtRCxHQUFZM08sRUFBVyxHQUMxQyxLQUVYdzFELEVBQWNULEdBQ0FwekQsS0FBS21PLEtBQUtpbEQsRUFBZS8wRCxJQUNJQSxFQUFXQSxHQUF2QzJPLEVBQVdvbUQsS0FJOUIsTUFDTUEsRUFtQlYsU0FBeUJRLEVBQVVDLEVBQVlHLEdBQzNDLElBQUlDLEVBQVNELEVBQ2IsSUFBSyxJQUFJajBELEVBQUksRUFBR0EsRUFIRyxHQUdpQkEsSUFDaENrMEQsR0FBa0JMLEVBQVNLLEdBQVVKLEVBQVdJLEdBRXBELE9BQU9BLEVBeEJjQyxDQUFnQk4sRUFBVUMsRUFEMUIsRUFBSXgxRCxHQUd6QixHQURBQSxHQUFzQixJQUNsQndnQixNQUFNdTBDLEdBQ04sTUFBTyxDQUNIam1ELFVBQVcsSUFDWEMsUUFBUyxHQUNUL08sU0FBQUEsR0FHSCxDQUNELE1BQU04TyxFQUFZbk4sS0FBSyt6RCxJQUFJWCxFQUFjLEdBQUsvbEQsRUFDOUMsTUFBTyxDQUNIRixVQUFBQSxFQUNBQyxRQUF3QixFQUFmVyxFQUFtQi9OLEtBQUs4TixLQUFLVCxFQUFPRixHQUM3QzlPLFNBQUFBLElBeUJZODFELENBQVdwdEQsR0FDM0Iwc0QsRUFBZ0IvdEQsT0FBT2dELE9BQU9oRCxPQUFPZ0QsT0FBT2hELE9BQU9nRCxPQUFPLEdBQUkrcUQsR0FBZ0JDLEdBQVUsQ0FBRTFtRCxTQUFVLEVBQUtLLEtBQU0sSUFDL0dvbUQsRUFBY0Qsd0JBQXlCLEVBRTNDLE9BQU9DLEVBS3lFVyxDQUFpQnJ0RCxHQUM3RmtILEVBQWdCb21ELEVBQ2hCQyxFQUFrQkQsRUFDdEIsU0FBU0UsSUFDTCxNQUFNQyxFQUFrQnhuRCxHQUFhQSxFQUFXLElBQVEsRUFDbERZLEVBQWVOLEVBQUt0RSxFQUNwQitFLEVBQWVYLEdBQVcsRUFBSXBOLEtBQUs4TixLQUFLWCxFQUFZRSxJQUNwRFEsRUFBc0I3TixLQUFLOE4sS0FBS1gsRUFBWUUsR0FBUSxJQUkxRCxRQUhrQjFTLElBQWRvOEMsSUFDQUEsRUFBWS8yQyxLQUFLZ0IsSUFBSWhCLEtBQUtDLElBQUlxTixFQUFLdEUsR0FBUSxJQUFLLEtBRWhEK0UsRUFBZSxFQUFHLENBQ2xCLE1BQU1HLEVBQWNpbEQsRUFBZ0J0bEQsRUFBcUJFLEdBQ3pERSxFQUFpQjlPLElBQ2IsTUFBTXkwRCxFQUFXNXpELEtBQUttTyxLQUFLSixFQUFlRixFQUFzQjFPLEdBQ2hFLE9BQVFtTyxFQUNKc21ELElBQ09ZLEVBQ0N6bUQsRUFBZUYsRUFBc0JELEdBQ3JDTSxFQUNBbE8sS0FBS29PLElBQUlGLEVBQWMvTyxHQUN2QnlPLEVBQWU1TixLQUFLcU8sSUFBSUgsRUFBYy9PLEtBRXREbTFELEVBQW1CbjFELElBQ2YsTUFBTXkwRCxFQUFXNXpELEtBQUttTyxLQUFLSixFQUFlRixFQUFzQjFPLEdBQ2hFLE9BQVE0TyxFQUNKRixFQUNBK2xELEdBQ0U1ekQsS0FBS29PLElBQUlGLEVBQWMvTyxJQUNwQnExRCxFQUNHem1ELEVBQ0lGLEVBQ0FELEdBQ1JNLEVBQ0FOLEVBQWU1TixLQUFLcU8sSUFBSUgsRUFBYy9PLElBQzFDeTBELEdBQ0s1ekQsS0FBS3FPLElBQUlILEVBQWMvTyxJQUNuQnExRCxFQUNHem1ELEVBQ0lGLEVBQ0FELEdBQ1JNLEVBQ0lOLEVBQ0E1TixLQUFLb08sSUFBSUYsRUFBYy9PLFVBRzFDLEdBQXFCLElBQWpCNE8sRUFDTEUsRUFBaUI5TyxHQUFNbU8sRUFDbkJ0TixLQUFLbU8sS0FBS04sRUFBc0IxTyxJQUMzQnlPLEdBQ0k0bUQsRUFBa0IzbUQsRUFBc0JELEdBQ3JDek8sT0FFZixDQUNELE1BQU1zMUQsRUFBb0I1bUQsRUFBc0I3TixLQUFLOE4sS0FBS0MsRUFBZUEsRUFBZSxHQUN4RkUsRUFBaUI5TyxJQUNiLE1BQU15MEQsRUFBVzV6RCxLQUFLbU8sS0FBS0osRUFBZUYsRUFBc0IxTyxHQUMxRHUxRCxFQUFXMTBELEtBQUtnQixJQUFJeXpELEVBQW9CdDFELEVBQUcsS0FDakQsT0FBUW1PLEVBQ0hzbUQsSUFDS1ksRUFDRXptRCxFQUFlRixFQUFzQkQsR0FDckM1TixLQUFLMjBELEtBQUtELEdBQ1ZELEVBQ0k3bUQsRUFDQTVOLEtBQUs0MEQsS0FBS0YsSUFDbEJELElBS3BCLE9BREFGLElBQ08sQ0FDSDVwRCxLQUFPeEwsSUFDSCxNQUFNdUwsRUFBVXVELEVBQWM5TyxHQUM5QixHQUFLcTBELEVBUUQvbEQsRUFBTUMsS0FBT3ZPLEdBQUtkLE1BUk8sQ0FDekIsTUFBTWlRLEVBQXVDLElBQXJCZ21ELEVBQWdCbjFELEdBQ2xDb1AsRUFBMkJ2TyxLQUFLQyxJQUFJcU8sSUFBb0JmLEVBQ3hEaUIsRUFBK0J4TyxLQUFLQyxJQUFJcU4sRUFBSzVDLElBQVlxc0MsRUFDL0R0cEMsRUFBTUMsS0FDRmEsR0FBNEJDLEVBTXBDLE9BREFmLEVBQU05TyxNQUFROE8sRUFBTUMsS0FBT0osRUFBSzVDLEVBQ3pCK0MsR0FFWG9uRCxXQUFZLEtBQ1I3bkQsR0FBWUEsR0FDWGhFLEVBQU1zRSxHQUFNLENBQUNBLEVBQUl0RSxHQUNsQnVyRCxNQUlacm5ELEVBQU80bkQsbUJBQXFCLENBQUN4M0QsRUFBR0MsSUFBbUIsaUJBQU5ELEdBQStCLGlCQUFOQyxFQUN0RSxNQUFNODJELEVBQVFVLEdBQU8sRUFFZmowRCxFQUFXLENBQUNrSSxFQUFNc0UsRUFBSTNPLEtBQ3hCLE1BQU1xMkQsRUFBbUIxbkQsRUFBS3RFLEVBQzlCLE9BQTRCLElBQXJCZ3NELEVBQXlCLEdBQUtyMkQsRUFBUXFLLEdBQVFnc0QsR0FHbkR2ekQsRUFBTSxDQUFDdUgsRUFBTXNFLEVBQUl4TSxLQUFjQSxFQUFXa0ksRUFBT2xJLEVBQVd3TSxFQUFLdEUsRUFFdkUsU0FBU2lzRCxFQUFTaHlELEVBQUdxdUQsRUFBR255RCxHQUtwQixPQUpJQSxFQUFJLElBQ0pBLEdBQUssR0FDTEEsRUFBSSxJQUNKQSxHQUFLLEdBQ0xBLEVBQUksRUFBSSxFQUNEOEQsRUFBYyxHQUFUcXVELEVBQUlydUQsR0FBUzlELEVBQ3pCQSxFQUFJLEdBQ0dteUQsRUFDUG55RCxFQUFJLEVBQUksRUFDRDhELEdBQUtxdUQsRUFBSXJ1RCxJQUFNLEVBQUksRUFBSTlELEdBQUssRUFDaEM4RCxFQUVYLFNBQVNpeUQsR0FBVyxJQUFFQyxFQUFHLFdBQUVDLEVBQVUsVUFBRUMsRUFBUyxNQUFFendDLElBQzlDdXdDLEdBQU8sSUFFUEUsR0FBYSxJQUNiLElBQUlDLEVBQU0sRUFDTkMsRUFBUSxFQUNSQyxFQUFPLEVBQ1gsR0FMQUosR0FBYyxJQVFULENBQ0QsTUFBTTlELEVBQUkrRCxFQUFZLEdBQ2hCQSxHQUFhLEVBQUlELEdBQ2pCQyxFQUFZRCxFQUFhQyxFQUFZRCxFQUNyQ255RCxFQUFJLEVBQUlveUQsRUFBWS9ELEVBQzFCZ0UsRUFBTUwsRUFBU2h5RCxFQUFHcXVELEVBQUc2RCxFQUFNLEVBQUksR0FDL0JJLEVBQVFOLEVBQVNoeUQsRUFBR3F1RCxFQUFHNkQsR0FDdkJLLEVBQU9QLEVBQVNoeUQsRUFBR3F1RCxFQUFHNkQsRUFBTSxFQUFJLFFBVGhDRyxFQUFNQyxFQUFRQyxFQUFPSCxFQVd6QixNQUFPLENBQ0hDLElBQUt0MUQsS0FBS21pQixNQUFZLElBQU5tekMsR0FDaEJDLE1BQU92MUQsS0FBS21pQixNQUFjLElBQVJvekMsR0FDbEJDLEtBQU14MUQsS0FBS21pQixNQUFhLElBQVBxekMsR0FDakI1d0MsTUFBQUEsR0FJUixNQUFNNndDLEVBQWlCLENBQUN6c0QsRUFBTXNFLEVBQUk5UixLQUM5QixNQUFNazZELEVBQVcxc0QsRUFBT0EsRUFDbEIyc0QsRUFBU3JvRCxFQUFLQSxFQUNwQixPQUFPdE4sS0FBSzhOLEtBQUs5TixLQUFLaUIsSUFBSSxFQUFHekYsR0FBS202RCxFQUFTRCxHQUFZQSxLQUVyREUsRUFBYSxDQUFDMzlDLEVBQWdCNDlDLElBQUs1OUMsRUFBZ0I2OUMsS0FBTTc5QyxFQUFnQjg5QyxNQUN6RUMsRUFBZ0J4NkQsR0FBTW82RCxFQUFXN3BCLE1BQU0zcUIsR0FBU0EsRUFBS0gsS0FBS3psQixLQUMxRHk2RCxFQUFpQm4wQyxHQUFVLElBQUlBLHdFQUMvQm8wQyxFQUFXLENBQUNsdEQsRUFBTXNFLEtBQ3BCLElBQUk2b0QsRUFBZ0JILEVBQWFodEQsR0FDN0JvdEQsRUFBY0osRUFBYTFvRCxHQUMvQndLLEVBQVV2TCxZQUFZNHBELEVBQWVGLEVBQWNqdEQsSUFDbkQ4TyxFQUFVdkwsWUFBWTZwRCxFQUFhSCxFQUFjM29ELElBQ2pELElBQUkrb0QsRUFBWUYsRUFBY3RxQixNQUFNN2lDLEdBQ2hDc3RELEVBQVVGLEVBQVl2cUIsTUFBTXYrQixHQUM1QjZvRCxJQUFrQmwrQyxFQUFnQjg5QyxPQUNsQ00sRUFBWW5CLEVBQVdtQixHQUN2QkYsRUFBZ0JsK0MsRUFBZ0I2OUMsTUFFaENNLElBQWdCbitDLEVBQWdCODlDLE9BQ2hDTyxFQUFVcEIsRUFBV29CLEdBQ3JCRixFQUFjbitDLEVBQWdCNjlDLE1BRWxDLE1BQU1TLEVBQVU3d0QsT0FBT2dELE9BQU8sR0FBSTJ0RCxHQUNsQyxPQUFRNzZELElBQ0osSUFBSyxNQUFNNEssS0FBT213RCxFQUNGLFVBQVJud0QsSUFDQW13RCxFQUFRbndELEdBQU9xdkQsRUFBZVksRUFBVWp3RCxHQUFNa3dELEVBQVFsd0QsR0FBTTVLLElBSXBFLE9BREErNkQsRUFBUTN4QyxNQUFRbmpCLEVBQUk0MEQsRUFBVXp4QyxNQUFPMHhDLEVBQVExeEMsTUFBT3BwQixHQUM3QzI2RCxFQUFjNXVELFVBQVVndkQsS0FJakNDLEVBQVksQ0FDZHA2RCxFQUFHLEVBQ0hDLEVBQUcsRUFDSEMsRUFBRyxHQUVEbTZELEVBQVNqN0QsR0FBbUIsaUJBQU5BLEVBRXRCazdELEVBQW1CLENBQUNwNUQsRUFBR0MsSUFBTy9CLEdBQU0rQixFQUFFRCxFQUFFOUIsSUFDeEN3dkMsRUFBTyxJQUFJMnJCLElBQWlCQSxFQUFhOTRELE9BQU82NEQsR0FFdEQsU0FBU3pTLEVBQVN4MUMsRUFBUWhHLEdBQ3RCLE9BQUlndUQsRUFBTWhvRCxHQUNFalQsR0FBTWlHLEVBQUlnTixFQUFRaEcsRUFBUWpOLEdBRTdCeWMsRUFBZ0I2SixNQUFNYixLQUFLeFMsR0FDekJ5bkQsRUFBU3puRCxFQUFRaEcsR0FHakJtdUQsRUFBV25vRCxFQUFRaEcsR0FHbEMsTUFBTW91RCxFQUFXLENBQUM3dEQsRUFBTXNFLEtBQ3BCLE1BQU1yTCxFQUFTLElBQUkrRyxHQUNibThDLEVBQVlsakQsRUFBT1QsT0FDbkJzMUQsRUFBYTl0RCxFQUFLNUYsS0FBSSxDQUFDMnpELEVBQVVoM0QsSUFBTWtrRCxFQUFTOFMsRUFBVXpwRCxFQUFHdk4sTUFDbkUsT0FBUXZFLElBQ0osSUFBSyxJQUFJdUUsRUFBSSxFQUFHQSxFQUFJb2xELEVBQVdwbEQsSUFDM0JrQyxFQUFPbEMsR0FBSysyRCxFQUFXLzJELEdBQUd2RSxHQUU5QixPQUFPeUcsSUFHVCswRCxFQUFZLENBQUN2b0QsRUFBUWhHLEtBQ3ZCLE1BQU14RyxFQUFTeUQsT0FBT2dELE9BQU9oRCxPQUFPZ0QsT0FBTyxHQUFJK0YsR0FBU2hHLEdBQ2xEcXVELEVBQWEsR0FDbkIsSUFBSyxNQUFNMXdELEtBQU9uRSxPQUNNdEgsSUFBaEI4VCxFQUFPckksU0FBc0N6TCxJQUFoQjhOLEVBQU9yQyxLQUNwQzB3RCxFQUFXMXdELEdBQU82OUMsRUFBU3gxQyxFQUFPckksR0FBTXFDLEVBQU9yQyxLQUd2RCxPQUFRNUssSUFDSixJQUFLLE1BQU00SyxLQUFPMHdELEVBQ2Q3MEQsRUFBT21FLEdBQU8wd0QsRUFBVzF3RCxHQUFLNUssR0FFbEMsT0FBT3lHLElBR2YsU0FBU2cxRCxFQUFRdDRELEdBQ2IsTUFBTW8vQyxFQUFTOWxDLEVBQWdCK0ksUUFBUTZxQixNQUFNbHRDLEdBQ3ZDd21ELEVBQVlwSCxFQUFPdjhDLE9BQ3pCLElBQUkwMUQsRUFBYSxFQUNiQyxFQUFTLEVBQ1RDLEVBQVMsRUFDYixJQUFLLElBQUlyM0QsRUFBSSxFQUFHQSxFQUFJb2xELEVBQVdwbEQsSUFDdkJtM0QsR0FBbUMsaUJBQWRuWixFQUFPaCtDLEdBQzVCbTNELFNBR3NCdjhELElBQWxCb2pELEVBQU9oK0MsR0FBR28xRCxJQUNWaUMsSUFHQUQsSUFJWixNQUFPLENBQUVwWixPQUFBQSxFQUFRbVosV0FBQUEsRUFBWUMsT0FBQUEsRUFBUUMsT0FBQUEsR0FFekMsTUFBTVIsRUFBYSxDQUFDbm9ELEVBQVFoRyxLQUN4QixNQUFNekssRUFBV2lhLEVBQWdCK0ksUUFBUWcrQixrQkFBa0J2MkMsR0FDckQ0dUQsRUFBY0osRUFBUXhvRCxHQUN0QjZvRCxFQUFjTCxFQUFReHVELEdBSTVCLE9BSHVCNHVELEVBQVlELFNBQVdFLEVBQVlGLFFBQ3REQyxFQUFZRixTQUFXRyxFQUFZSCxRQUNuQ0UsRUFBWUgsWUFBY0ksRUFBWUosV0FFL0Jsc0IsRUFBSzZyQixFQUFTUSxFQUFZdFosT0FBUXVaLEVBQVl2WixRQUFTLy9DLElBRzlEOFosRUFBVXNQLFNBQVEsRUFBTSxtQkFBbUIzWSxXQUFnQmhHLDZLQUNuRHhGLEdBQU0sR0FBR0EsRUFBSSxFQUFJd0YsRUFBU2dHLE1BSXBDOG9ELEVBQVksQ0FBQ3Z1RCxFQUFNc0UsSUFBUXJLLEdBQU14QixFQUFJdUgsRUFBTXNFLEVBQUlySyxHQStEckQsU0FBU0UsRUFBWUwsRUFBT2IsR0FBVXExQyxNQUFPa2dCLEdBQVUsRUFBSSxLQUFFcDNELEVBQUksTUFBRXFrRCxHQUFVLElBQ3pFLE1BQU1nVCxFQUFjMzBELEVBQU10QixPQUMxQnNXLEVBQVV2TCxVQUFVa3JELElBQWdCeDFELEVBQU9ULE9BQVEsd0RBQ25Ec1csRUFBVXZMLFdBQVduTSxJQUFTcEIsTUFBTUMsUUFBUW1CLElBQVNBLEVBQUtvQixTQUFXaTJELEVBQWMsRUFBRyxvSUFDbEYzMEQsRUFBTSxHQUFLQSxFQUFNMjBELEVBQWMsS0FDL0IzMEQsRUFBUSxHQUFHZ2UsT0FBT2hlLEdBQ2xCYixFQUFTLEdBQUc2ZSxPQUFPN2UsR0FDbkJhLEVBQU0wQixVQUNOdkMsRUFBT3VDLFdBRVgsTUFBTWt6RCxFQXJEVixTQUFzQnoxRCxFQUFRN0IsRUFBTXUzRCxHQUNoQyxNQUFNRCxFQUFTLEdBQ1RFLEVBQWVELElBcEJKLGlCQURPbjhELEVBcUIrQnlHLEVBQU8sSUFuQm5EczFELEVBRVcsaUJBQU4vN0QsRUFDUnljLEVBQWdCNkosTUFBTWIsS0FBS3psQixHQUNwQjA2RCxFQUdBVSxFQUdONTNELE1BQU1DLFFBQVF6RCxHQUNacTdELEVBRVcsaUJBQU5yN0QsRUFDTHc3RCxPQUROLEdBZlQsSUFBNEJ4N0QsRUFzQnhCLE1BQU1xOEQsRUFBWTUxRCxFQUFPVCxPQUFTLEVBQ2xDLElBQUssSUFBSXpCLEVBQUksRUFBR0EsRUFBSTgzRCxFQUFXOTNELElBQUssQ0FDaEMsSUFBSTBrRCxFQUFRbVQsRUFBYTMxRCxFQUFPbEMsR0FBSWtDLEVBQU9sQyxFQUFJLElBQy9DLEdBQUlLLEVBQU0sQ0FDTixNQUFNK0osRUFBaUJuTCxNQUFNQyxRQUFRbUIsR0FBUUEsRUFBS0wsR0FBS0ssRUFDdkRxa0QsRUFBUXpaLEVBQUs3Z0MsRUFBZ0JzNkMsR0FFakNpVCxFQUFPNzdELEtBQUs0b0QsR0FFaEIsT0FBT2lULEVBeUNRSSxDQUFhNzFELEVBQVE3QixFQUFNcWtELEdBQ3BDRCxFQUErQixJQUFoQmlULEVBeEN6QixVQUEwQnp1RCxFQUFNc0UsSUFBTW0zQyxJQUNsQyxPQUFRanBELEdBQU1pcEQsRUFBTTNqRCxFQUFTa0ksRUFBTXNFLEVBQUk5UixJQXdDakN1OEQsQ0FBZ0JqMUQsRUFBTzQwRCxHQXRDakMsU0FBeUI1MEQsRUFBTzQwRCxHQUM1QixNQUFNRCxFQUFjMzBELEVBQU10QixPQUNwQncyRCxFQUFpQlAsRUFBYyxFQUNyQyxPQUFRajhELElBQ0osSUFBSXk4RCxFQUFhLEVBQ2JDLEdBQWtCLEVBUXRCLEdBUEkxOEQsR0FBS3NILEVBQU0sR0FDWG8xRCxHQUFrQixFQUViMThELEdBQUtzSCxFQUFNazFELEtBQ2hCQyxFQUFhRCxFQUFpQixFQUM5QkUsR0FBa0IsSUFFakJBLEVBQWlCLENBQ2xCLElBQUluNEQsRUFBSSxFQUNSLEtBQU9BLEVBQUkwM0QsS0FDSDMwRCxFQUFNL0MsR0FBS3ZFLEdBQUt1RSxJQUFNaTRELEdBRE5qNEQsS0FLeEJrNEQsRUFBYWw0RCxFQUFJLEVBRXJCLE1BQU1pRCxFQUFrQmxDLEVBQVNnQyxFQUFNbTFELEdBQWFuMUQsRUFBTW0xRCxFQUFhLEdBQUl6OEQsR0FDM0UsT0FBT2s4RCxFQUFPTyxHQUFZajFELElBZ0J4Qm0xRCxDQUFnQnIxRCxFQUFPNDBELEdBQzdCLE9BQU9GLEVBQ0FoOEQsR0FBTWdwRCxFQUFhbE4sRUFBTXgwQyxFQUFNLEdBQUlBLEVBQU0yMEQsRUFBYyxHQUFJajhELElBQzVEZ3BELEVBR1YsTUFBTTRULEVBQWdCMzVELEdBQVV3RSxHQUFLLEVBQUl4RSxFQUFPLEVBQUl3RSxHQUM5Q28xRCxFQUFlNTVELEdBQVV3RSxHQUFLQSxHQUFLLEdBQU14RSxFQUFPLEVBQUl3RSxHQUFLLEdBQUssRUFBSXhFLEVBQU8sR0FBSyxFQUFJd0UsS0FBTyxFQUN6RnExRCxFQUFnQnZvRCxHQUFVOU0sR0FBS2pELEtBQUsrekQsSUFBSTl3RCxFQUFHOE0sR0FDM0N3b0QsRUFBZ0J4b0QsR0FBVTlNLEdBQUtBLEVBQUlBLElBQU04TSxFQUFRLEdBQUs5TSxFQUFJOE0sR0FDMUR5b0QsRUFBb0J6b0QsSUFDdEIsTUFBTTBvRCxFQUFhRixFQUFheG9ELEdBQ2hDLE9BQU85TSxJQUFNQSxHQUFLLEdBQUssRUFDakIsR0FBTXcxRCxFQUFXeDFELEdBQ2pCLElBQU8sRUFBSWpELEtBQUsrekQsSUFBSSxHQUFJLElBQU05d0QsRUFBSSxNQU90QzBjLEVBQVMxYyxHQUFLQSxFQUNkMmMsRUFBUzA0QyxFQUFhLEdBQ3RCeDRDLEVBQVVzNEMsRUFBY3g0QyxHQUN4QkMsRUFBWXc0QyxFQUFhejRDLEdBQ3pCRyxFQUFTOWMsR0FBSyxFQUFJakQsS0FBS29PLElBQUlwTyxLQUFLMDRELEtBQUt6MUQsSUFDckNnZCxFQUFVbTRDLEVBQWNyNEMsR0FDeEJDLEVBQVlxNEMsRUFBYXA0QyxHQUN6QkMsRUFBU3E0QyxFQVhvQixPQVk3Qm40QyxFQUFVZzRDLEVBQWNsNEMsR0FDeEJDLEVBQVlrNEMsRUFBYW40QyxHQUN6QkcsRUFBYW00QyxFQWRnQixPQWtCN0JoNEMsRUFBYXZkLElBQ2YsR0FBVSxJQUFOQSxHQUFpQixJQUFOQSxFQUNYLE9BQU9BLEVBQ1gsTUFBTTAxRCxFQUFLMTFELEVBQUlBLEVBQ2YsT0FBT0EsRUFyQm9CLG1CQXNCckIsT0FBUzAxRCxFQUNUMTFELEVBdEJzQixrQkF1QmxCLE1BQVEwMUQsRUFBSyxJQUFNMTFELEVBQUksSUFDdkJBLEVBdkJpQixHQVlwQixtQkFZWTAxRCxFQVhaLGtCQVdzQjExRCxFQVZ0QixrQkFXTyxLQUFPQSxFQUFJQSxFQUFJLE1BQVFBLEVBQUksT0FFdkNxZCxFQUFXODNDLEVBQWM1M0MsR0FLL0IsU0FBU280QyxHQUFjejlELEVBQVFzRCxHQUMzQixPQUFPdEQsRUFBT2lJLEtBQUksSUFBTTNFLEdBQVVvaEIsSUFBVzVqQixPQUFPLEVBQUdkLEVBQU9xRyxPQUFTLEdBUzNFLFNBQVNVLElBQVUsS0FBRThHLEVBQU8sRUFBQyxHQUFFc0UsRUFBSyxFQUFDLEtBQUVsTixFQUFJLE9BQUV1QixFQUFNLFNBQUV0RCxFQUFXLE1BQzVELE1BQU1vUCxFQUFRLENBQUVDLE1BQU0sRUFBTy9PLE1BQU9xSyxHQUM5QjdOLEVBQVM2RCxNQUFNQyxRQUFRcU8sR0FBTUEsRUFBSyxDQUFDdEUsRUFBTXNFLEdBQ3pDeVosRUFOVixTQUE4QnBsQixFQUFRdEQsR0FDbEMsT0FBT3NELEVBQU95QixLQUFLeTFELEdBQU1BLEVBQUl4NkQsSUFLZnk2RCxDQUFxQm4zRCxHQUFVQSxFQUFPSCxTQUFXckcsRUFBT3FHLE9BQ2hFRyxFQVhWLFNBQXVCeEcsR0FDbkIsTUFBTWdxRCxFQUFZaHFELEVBQU9xRyxPQUN6QixPQUFPckcsRUFBT2lJLEtBQUksQ0FBQzIxRCxFQUFRaDVELElBQVksSUFBTkEsRUFBVUEsR0FBS29sRCxFQUFZLEdBQUssSUFVM0RyakQsQ0FBYzNHLEdBQVNrRCxHQUM3QixTQUFTMjZELElBQ0wsT0FBTzcxRCxFQUFZNGpCLEVBQU81ckIsRUFBUSxDQUM5QmlGLEtBQU1wQixNQUFNQyxRQUFRbUIsR0FBUUEsRUFBT3c0RCxHQUFjejlELEVBQVFpRixLQUdqRSxJQUFJb2tELEVBQWV3VSxJQUNuQixNQUFPLENBQ0hydUQsS0FBT3hMLElBQ0hzTyxFQUFNOU8sTUFBUTZsRCxFQUFhcmxELEdBQzNCc08sRUFBTUMsS0FBT3ZPLEdBQUtkLEVBQ1hvUCxHQUVYb25ELFdBQVksS0FDUjE1RCxFQUFPcUosVUFDUGdnRCxFQUFld1UsTUFLM0IsU0FBU2hwRCxJQUFNLFNBQUVoRCxFQUFXLEVBQUMsS0FBRWhFLEVBQU8sRUFBQyxNQUFFK0csRUFBUSxHQUFHLGFBQUUrbUMsRUFBZSxJQUFHLFVBQUVDLEVBQVksR0FBRyxhQUFFa2lCLElBQ3ZGLE1BQU14ckQsRUFBUSxDQUFFQyxNQUFNLEVBQU8vTyxNQUFPcUssR0FDcEMsSUFBSXFILEVBQVlOLEVBQVEvQyxFQUN4QixNQUFNc0QsRUFBUXRILEVBQU9xSCxFQUNmNUgsT0FBMEI5TixJQUFqQnMrRCxFQUE2QjNvRCxFQUFRMm9ELEVBQWEzb0QsR0FHakUsT0FGSTdILElBQVc2SCxJQUNYRCxFQUFZNUgsRUFBU08sR0FDbEIsQ0FDSDJCLEtBQU94TCxJQUNILE1BQU11UixHQUFTTCxFQUFZclEsS0FBS21PLEtBQUtoUCxFQUFJMjNDLEdBR3pDLE9BRkFycEMsRUFBTUMsT0FBU2dELEVBQVFxbUMsR0FBYXJtQyxHQUFTcW1DLEdBQzdDdHBDLEVBQU05TyxNQUFROE8sRUFBTUMsS0FBT2pGLEVBQVNBLEVBQVNpSSxFQUN0Q2pELEdBRVhvbkQsV0FBWSxRQUlwQixNQUFNcUUsR0FBUSxDQUFFaDNELFVBQUFBLEdBQVdnTCxPQUFBQSxFQUFROEMsTUFBQUEsSUF3Qm5DLFNBQVNtcEQsR0FBWUMsRUFBUy82RCxFQUFVQyxFQUFRLEdBQzVDLE9BQU84NkQsRUFBVS82RCxFQUFXQyxFQVdoQyxNQUFNKzZELEdBQWFwakQsSUFDZixNQUFNcWpELEVBQWdCLEVBQUc1b0QsTUFBQUEsS0FBWXVGLEVBQU92RixHQUM1QyxNQUFPLENBQ0g5RyxNQUFPLElBQU1rUCxFQUF1QixRQUFFN0MsT0FBT3FqRCxHQUFlLEdBQzVEajFELEtBQU0sSUFBTTBULEVBQUtrYyxXQUFXaGUsT0FBT3FqRCxLQUczQyxTQUFTaDBELEdBQVEvQixHQUNiLElBQUlzRSxFQUFJNmxCLEdBQ0osS0FBRTFrQixFQUFJLFNBQUV1d0QsR0FBVyxFQUFJLE9BQUVDLEVBQVNILEdBQVMsUUFBRUQsRUFBVSxFQUFHNTZELE9BQVFpN0QsRUFBWSxFQUFDLFdBQUU3eUMsRUFBYSxPQUFNLFlBQUVDLEVBQWMsRUFBQyxPQUFFOE0sRUFBTSxPQUFFK2xDLEVBQU0sV0FBRS94QyxFQUFVLFNBQUVneUMsRUFBUSxTQUFFM3hDLEdBQWF6a0IsRUFBSXdELEVBQVU2USxFQUFNbk0sT0FBT2xJLEVBQUksQ0FBQyxPQUFRLFdBQVksU0FBVSxVQUFXLFNBQVUsYUFBYyxjQUFlLFNBQVUsU0FBVSxhQUFjLFdBQVksYUFDNVUsSUFDSXEyRCxFQUdBaDJELEVBR0FpMkQsR0FQQSxHQUFFdnNELEdBQU92RyxFQUVUK3lELEVBQWMsRUFDZEMsRUFBbUJoekQsRUFBUTFJLFNBRTNCMjdELEdBQWEsRUFDYkMsR0FBb0IsRUFFeEIsTUFBTUMsRUFyRFYsU0FBb0NsOUIsR0FDaEMsR0FBSWgrQixNQUFNQyxRQUFRKzlCLEVBQU8xdkIsSUFDckIsT0FBT3BMLEdBRU4sR0FBSWczRCxHQUFNbDhCLEVBQU81YixNQUNsQixPQUFPODNDLEdBQU1sOEIsRUFBTzViLE1BRXhCLE1BQU1uTSxFQUFPLElBQUl4WCxJQUFJaUksT0FBT3VQLEtBQUsrbkIsSUFDakMsT0FBSS9uQixFQUFLamEsSUFBSSxTQUNSaWEsRUFBS2phLElBQUksY0FBZ0JpYSxFQUFLamEsSUFBSSxnQkFDNUJrSCxHQUVGK1MsRUFBS2phLElBQUksaUJBQ2RpYSxFQUFLamEsSUFBSSxjQUNUaWEsRUFBS2phLElBQUksU0FDVGlhLEVBQUtqYSxJQUFJLFlBQ1RpYSxFQUFLamEsSUFBSSxjQUNUaWEsRUFBS2phLElBQUksYUFDRmtTLEVBRUpoTCxHQWlDVWk0RCxDQUEyQnB6RCxJQUNNLFFBQTdDMm1CLEdBQU03bEIsRUFBS3F5RCxHQUFVcEYsMEJBQXVDLElBQVBwbkMsT0FBZ0IsRUFBU0EsRUFBRzdwQixLQUFLZ0UsRUFBSW1CLEVBQU1zRSxNQUNqR3VzRCxFQUF3QjEyRCxFQUFZLENBQUMsRUFBRyxLQUFNLENBQUM2RixFQUFNc0UsR0FBSyxDQUN0RGdxQyxPQUFPLElBRVh0dUMsRUFBTyxFQUNQc0UsRUFBSyxLQUVULE1BQU1sVCxFQUFZOC9ELEVBQVN4MEQsT0FBT2dELE9BQU9oRCxPQUFPZ0QsT0FBTyxHQUFJM0IsR0FBVSxDQUFFaUMsS0FBQUEsRUFBTXNFLEdBQUFBLEtBZ0Q3RSxPQURBaXNELElBSkk1bEMsTUFBQUEsR0FBZ0RBLElBQ2hEaW1DLEVBQWlCSixHQXpCckIsU0FBZ0I5b0QsR0FJWixHQUhLdXBELElBQ0R2cEQsR0FBU0EsR0FDYjBvRCxHQUFXMW9ELEdBQ05zcEQsRUFBWSxDQUNiLE1BQU12c0QsRUFBUXJULEVBQVV1USxLQUFLM0ssS0FBS2lCLElBQUksRUFBR200RCxJQUN6Q3gxRCxFQUFTNkosRUFBTTlPLE1BQ1hrN0QsSUFDQWoyRCxFQUFTaTJELEVBQXNCajJELElBQ25DbzJELEVBQWFDLEVBQW9CeHNELEVBQU1DLEtBQU8wckQsR0FBVyxFQUU3RHB4QyxNQUFBQSxHQUFvREEsRUFBU3BrQixHQUN6RG8yRCxJQUNvQixJQUFoQkYsSUFDQUMsTUFBQUEsSUFBK0VBLEVBQW1CWCxJQUNsR1UsRUFBY0wsRUFoRTlCLFNBQStCTCxFQUFTLzZELEVBQVVDLEVBQU8yN0QsR0FDckQsT0FBT0EsRUFBb0JiLEdBQVcvNkQsRUFBV0MsRUFBUTg2RCxJQUFZOTZELEVBZ0V6RDg3RCxDQUFzQmhCLEVBQVNXLEVBQWtCbHpDLEVBQWFvekMsS0FqQ3RFSCxJQUNtQixZQUFmbHpDLEdBQ0FxekMsRUFBb0JILEVBQWMsR0FBTSxFQUN4Q1YsRUF4Q1osU0FBd0JBLEVBQVMvNkQsRUFBVUMsRUFBUSxFQUFHMjdELEdBQW9CLEdBQ3RFLE9BQU9BLEVBQ0RkLEdBQVk5NkQsR0FBWSs2RCxFQUFTLzZELEVBQVVDLEdBQzNDRCxHQUFZKzZELEVBQVUvNkQsR0FBWUMsRUFxQ3RCKzdELENBQWVqQixFQUFTVyxFQUFrQmx6QyxFQUFhb3pDLEtBR2pFYixFQUFVRCxHQUFZQyxFQUFTVyxFQUFrQmx6QyxHQUM5QixXQUFmRCxHQUNBeHNCLEVBQVV5NkQsY0FFbEJtRixHQUFhLEVBQ2JMLEdBQVlBLE1BR1pDLEVBQWV2MUQsT0FDZnNqQixHQUFjQSxTQTRCZGl5QyxFQUFlaHdELFNBR1osQ0FDSHZGLEtBQU0sS0FDRnExRCxNQUFBQSxHQUFnREEsSUFDaERFLEVBQWV2MUQsU0FLM0IsU0FBU2diLEdBQWtCclMsRUFBVUMsR0FDakMsT0FBT0EsRUFBZ0JELEdBQVksSUFBT0MsR0FBaUIsRUErRC9ELE1BQU1xdEQsR0FBb0JDLEdBQXVCLElBQVZBLEVBQWlCdjZELEtBQUt3NkQsR0FzQnZEQyxHQUFZai9ELEdBQU1BLEVBQ2xCay9ELEdBQWtCLENBQUNDLEVBQW9CRixLQUFhLENBQUNHLEVBQVVuc0QsRUFBUWpULEtBQ3pFLE1BQU1xL0QsRUFBZXBzRCxFQUFTalQsRUFDeEJzL0QsSUFBK0IsRUFBSUYsRUFBVyxJQUFNLEVBQUlELEVBQWtCMzZELEtBQUtDLElBQUk0NkQsS0FDekYsT0FBT0EsR0FBZ0IsRUFDakJwc0QsRUFBU3FzRCxFQUNUcnNELEVBQVNxc0QsR0FFYkMsR0FBVUwsS0FDVk0sR0FBY04sR0FBZ0IxNkQsS0FBSzhOLE1BRW5DbXRELEdBQW9COTJDLEdBQWFBLEVBQVVua0IsS0FBS3c2RCxHQUFNLElBRXREVSxHQUFXeHhDLEdBQVVBLEVBQU0vakIsZUFBZSxNQUFRK2pCLEVBQU0vakIsZUFBZSxLQUV2RXcxRCxHQUFhenhDLEdBQVV3eEMsR0FBUXh4QyxJQUFVQSxFQUFNL2pCLGVBQWUsS0FFOUR5MUQsR0FBYSxDQUFDOTlELEVBQUdDLElBQU15QyxLQUFLQyxJQUFJM0MsRUFBSUMsR0FxQnBDODlELEdBQVksQ0FBQ3hnQyxFQUFLeWdDLEVBQVksS0FDaENBLEVBQVl0N0QsS0FBSyt6RCxJQUFJLEdBQUl1SCxHQUNsQnQ3RCxLQUFLbWlCLE1BQU0wWSxFQUFNeWdDLEdBQWFBLEdBR25DQyxHQUFjLENBQUMvZ0IsRUFBV0QsRUFBV2w4QyxFQUFVbTlELEVBQVksSUFBTUgsR0FBVTdnQixFQUM1RW44QyxHQUFZazhDLEVBQVlDLEdBQWN4NkMsS0FBS2lCLElBQUl1NkQsRUFBV245RCxJQWtEekRmLEdBQUksQ0FBQzhCLEVBQUlDLElBQU8sRUFBTSxFQUFNQSxFQUFLLEVBQU1ELEVBQ3ZDN0IsR0FBSSxDQUFDNkIsRUFBSUMsSUFBTyxFQUFNQSxFQUFLLEVBQU1ELEVBQ2pDNkYsR0FBSzdGLEdBQU8sRUFBTUEsRUFDbEJGLEdBQWEsQ0FBQ0MsRUFBR0MsRUFBSUMsTUFBUy9CLEdBQUU4QixFQUFJQyxHQUFNRixFQUFJNUIsR0FBRTZCLEVBQUlDLElBQU9GLEVBQUk4RixHQUFFN0YsSUFBT0QsRUFDeEVzOEQsR0FBVyxDQUFDdDhELEVBQUdDLEVBQUlDLElBQU8sRUFBTS9CLEdBQUU4QixFQUFJQyxHQUFNRixFQUFJQSxFQUFJLEVBQU01QixHQUFFNkIsRUFBSUMsR0FBTUYsRUFBSThGLEdBQUU3RixHQWtDNUVzOEQsR0FBa0IsR0F5Q3hCL2pELEVBQVFna0QsTUFqTU0sQ0FBQ3IrRCxFQUFHQyxFQUFJaTVELElBQWM4RCxHQUFpQnQ2RCxLQUFLNDdELE1BQU1yK0QsRUFBRWxCLEVBQUlpQixFQUFFakIsRUFBR2tCLEVBQUVuQixFQUFJa0IsRUFBRWxCLElBa01uRnViLEVBQVFyUyxRQUFVQSxHQUNsQnFTLEVBQVEwSSxXQUFhQSxFQUNyQjFJLEVBQVFra0QsWUFsTVksQ0FBQzd5RCxFQUFNc0UsS0FDdkIsSUFBSXd1RCxHQUFrQixFQUt0QixZQUpXbmhFLElBQVAyUyxJQUNBQSxFQUFLdEUsRUFDTDh5RCxHQUFrQixHQUVkdGdFLEdBQ0FzZ0UsRUFDT3RnRSxFQUFJd04sRUFBT3NFLEdBR2xCdEUsRUFBT3hOLEVBQ1BzZ0UsR0FBa0IsRUFDWHh1RCxJQXNMbkJxSyxFQUFRb2pELFFBQVVBLEdBQ2xCcGpELEVBQVFxakQsWUFBY0EsR0FDdEJyakQsRUFBUXVJLE9BQVNBLEVBQ2pCdkksRUFBUXdJLFVBQVlBLEVBQ3BCeEksRUFBUXlJLFFBQVVBLEVBQ2xCekksRUFBUTJJLFNBQVdBLEVBQ25CM0ksRUFBUTRJLFlBNWJhdGQsR0FBTUEsRUFBSSxHQUN6QixJQUFPLEVBQU11ZCxFQUFVLEVBQVUsRUFBSnZkLElBQzdCLEdBQU11ZCxFQUFjLEVBQUp2ZCxFQUFVLEdBQU8sR0EyYnZDMFUsRUFBUTZJLFVBQVlBLEVBQ3BCN0ksRUFBUW9JLE9BQVNBLEVBQ2pCcEksRUFBUXFJLFVBQVlBLEVBQ3BCckksRUFBUXNJLFFBQVVBLEVBQ2xCdEksRUFBUTIvQixNQUFRQSxFQUNoQjMvQixFQUFRNmdELGlCQUFtQkEsRUFDM0I3Z0QsRUFBUStpRCxnQkFBa0JBLEdBQzFCL2lELEVBQVE0Z0QsYUFBZUEsRUFDdkI1Z0QsRUFBUTJnRCxhQUFlQSxFQUN2QjNnRCxFQUFRclksWUE1RFIsU0FBcUJDLEVBQUtDLEVBQUtDLEVBQUtDLEdBQ2hDLEdBQUlILElBQVFDLEdBQU9DLElBQVFDLEVBQ3ZCLE9BQU9pZ0IsRUFDWCxNQUFNbzhDLEVBQWUsSUFBSUMsYUFMSixJQU1yQixJQUFLLElBQUlqOEQsRUFBSSxFQUFHQSxFQU5LLEtBTW1CQSxFQUNwQ2c4RCxFQUFhaDhELEdBQUtiLEdBQVdhLEVBQUkyN0QsR0FBaUJuOEQsRUFBS0UsR0F3QjNELE9BQVFOLEdBQVksSUFBTkEsR0FBaUIsSUFBTkEsRUFBVUEsRUFBSUQsR0F0QnZDLFNBQWtCKzhELEdBQ2QsSUFBSUMsRUFBZ0IsRUFDaEJDLEVBQWdCLEVBRXBCLEtBRG1CQyxLQUNaRCxHQUFnQ0osRUFBYUksSUFBa0JGLElBQU1FLEVBQ3hFRCxHQUFpQlIsS0FFbkJTLEVBQ0YsTUFFTUUsRUFBWUgsR0FGSkQsRUFBS0YsRUFBYUksS0FDM0JKLEVBQWFJLEVBQWdCLEdBQUtKLEVBQWFJLElBQ1hULEdBQ25DWSxFQUFlYixHQUFTWSxFQUFXOThELEVBQUtFLEdBQzlDLE9BQUk2OEQsR0FqQ1csS0FDdkIsU0FBOEJMLEVBQUlNLEVBQVNoOUQsRUFBS0UsR0FDNUMsSUFBSyxJQUFJTSxFQUFJLEVBQUdBLEVBSEssSUFHbUJBLEVBQUcsQ0FDdkMsTUFBTXk4RCxFQUFlZixHQUFTYyxFQUFTaDlELEVBQUtFLEdBQzVDLEdBQXFCLElBQWpCKzhELEVBQ0EsT0FBT0QsRUFHWEEsSUFEaUJyOUQsR0FBV3E5RCxFQUFTaDlELEVBQUtFLEdBQU93OEQsR0FDM0JPLEVBRTFCLE9BQU9ELEVBd0JRRSxDQUFxQlIsRUFBSUksRUFBVzk4RCxFQUFLRSxHQUUxQixJQUFqQjY4RCxFQUNFRCxFQXZEbkIsU0FBeUJKLEVBQUlTLEVBQUlDLEVBQUlwOUQsRUFBS0UsR0FDdEMsSUFBSUksRUFDQUMsRUFDQUMsRUFBSSxFQUNSLEdBQ0lELEVBQVc0OEQsR0FBTUMsRUFBS0QsR0FBTSxFQUM1Qjc4RCxFQUFXWCxHQUFXWSxFQUFVUCxFQUFLRSxHQUFPdzhELEVBQ3hDcDhELEVBQVcsRUFDWDg4RCxFQUFLNzhELEVBR0w0OEQsRUFBSzU4RCxRQUVKRSxLQUFLQyxJQUFJSixHQWZPLFFBZ0JuQkUsRUFmdUIsSUFnQjdCLE9BQU9ELEVBMkNRSSxDQUFnQis3RCxFQUFJQyxFQUFlQSxFQUFnQlIsR0FBaUJuOEQsRUFBS0UsR0FHdENtOUQsQ0FBU3o5RCxHQUFJSyxFQUFLRSxJQWdDeEVpWSxFQUFRM0gsTUFBUUEsR0FDaEIySCxFQUFRc2pELGlCQUFtQkEsR0FDM0J0akQsRUFBUTFOLFNBbExSLFNBQWtCM00sRUFBR0MsR0FDakIsR0FBSWs1RCxFQUFNbjVELElBQU1tNUQsRUFBTWw1RCxHQUNsQixPQUFPNjlELEdBQVc5OUQsRUFBR0MsR0FFcEIsR0FBSTI5RCxHQUFRNTlELElBQU00OUQsR0FBUTM5RCxHQUFJLENBQy9CLE1BQU1zL0QsRUFBU3pCLEdBQVc5OUQsRUFBRWxCLEVBQUdtQixFQUFFbkIsR0FDM0IwZ0UsRUFBUzFCLEdBQVc5OUQsRUFBRWpCLEVBQUdrQixFQUFFbEIsR0FDM0IwZ0UsRUFBUzVCLEdBQVU3OUQsSUFBTTY5RCxHQUFVNTlELEdBQUs2OUQsR0FBVzk5RCxFQUFFaEIsRUFBR2lCLEVBQUVqQixHQUFLLEVBQ3JFLE9BQU8wRCxLQUFLOE4sS0FBSzlOLEtBQUsrekQsSUFBSThJLEVBQVEsR0FBSzc4RCxLQUFLK3pELElBQUkrSSxFQUFRLEdBQUs5OEQsS0FBSyt6RCxJQUFJZ0osRUFBUSxNQTJLdEZwbEQsRUFBUWlJLE9BQVNBLEVBQ2pCakksRUFBUWtJLFVBQVlBLEVBQ3BCbEksRUFBUW1JLFFBQVVBLEVBQ2xCbkksRUFBUXNRLFFBMVJSLFVBQWlCLEtBQUVqZixFQUFPLEVBQUMsU0FBRWdFLEVBQVcsRUFBQyxJQUFFaE0sRUFBRyxJQUFFQyxFQUFHLE1BQUU4TyxFQUFRLEdBQUcsYUFBRSttQyxFQUFlLElBQUcsZ0JBQUU1bUMsRUFBa0IsSUFBRyxjQUFFRCxFQUFnQixHQUFFLFVBQUU4bUMsRUFBWSxFQUFDLGFBQUVraUIsRUFBWSxPQUFFTyxFQUFNLFNBQUV4eEMsRUFBUSxXQUFFTCxFQUFVLE9BQUUreEMsSUFDeEwsSUFBSWptQyxFQUNKLFNBQVN1cEMsRUFBY3hoRSxHQUNuQixZQUFnQmIsSUFBUnFHLEdBQXFCeEYsRUFBSXdGLFFBQWlCckcsSUFBUnNHLEdBQXFCekYsRUFBSXlGLEVBRXZFLFNBQVNnOEQsRUFBZ0J6aEUsR0FDckIsWUFBWWIsSUFBUnFHLEVBQ09DLE9BQ0N0RyxJQUFSc0csR0FFR2pCLEtBQUtDLElBQUllLEVBQU14RixHQUFLd0UsS0FBS0MsSUFBSWdCLEVBQU16RixHQUQvQndGLEVBQzBDQyxFQUV6RCxTQUFTeW1CLEVBQWUzZ0IsR0FDcEIwc0IsTUFBQUEsR0FBb0VBLEVBQWlCcHZCLE9BQ3JGb3ZCLEVBQW1CbnVCLEdBQVFJLE9BQU9nRCxPQUFPaEQsT0FBT2dELE9BQU8sR0FBSTNCLEdBQVUsQ0FBRXl5RCxPQUFBQSxFQUFReHhDLFNBQVd4c0IsSUFDbEYsSUFBSStILEVBQ0p5a0IsTUFBQUEsR0FBb0RBLEVBQVN4c0IsR0FDakMsUUFBM0IrSCxFQUFLd0QsRUFBUWloQixnQkFBNkIsSUFBUHprQixHQUF5QkEsRUFBR00sS0FBS2tELEVBQVN2TCxJQUMvRW1zQixXQUFBQSxFQUNIK3hDLE9BQUFBLEtBRVIsU0FBU3dELEVBQVluMkQsR0FDakIyZ0IsRUFBZWhpQixPQUFPZ0QsT0FBTyxDQUFFMFksS0FBTSxTQUFValUsVUFBVytDLEVBQWlCOUMsUUFBUzZDLEVBQWU4bUMsVUFBQUEsR0FBYWh3QyxJQUVwSCxHQUFJaTJELEVBQWNoMEQsR0FDZGswRCxFQUFZLENBQUVsMEQsS0FBQUEsRUFBTWdFLFNBQUFBLEVBQVVNLEdBQUkydkQsRUFBZ0JqMEQsU0FFakQsQ0FDRCxJQUFJUCxFQUFTc0gsRUFBUS9DLEVBQVdoRSxPQUNKLElBQWpCaXdELElBQ1B4d0QsRUFBU3d3RCxFQUFheHdELElBQzFCLE1BQU0wMEQsRUFBV0YsRUFBZ0J4MEQsR0FDM0IyMEQsRUFBVUQsSUFBYW44RCxHQUFPLEVBQUksRUFDeEMsSUFBSTRKLEVBQ0FGLEVBQ0osTUFBTTJ5RCxFQUFpQjdoRSxJQUNuQm9QLEVBQU9GLEVBQ1BBLEVBQVVsUCxFQUNWd1IsRUFBV3FTLEdBQWtCN2pCLEVBQUlvUCxFQUFNbU4sRUFBS3lHLGVBQWU5TixRQUMxQyxJQUFaMHNELEdBQWlCNWhFLEVBQUkyaEUsSUFDUixJQUFiQyxHQUFrQjVoRSxFQUFJMmhFLElBQ3ZCRCxFQUFZLENBQUVsMEQsS0FBTXhOLEVBQUc4UixHQUFJNnZELEVBQVVud0QsU0FBQUEsS0FHN0MwYSxFQUFlLENBQ1h0RyxLQUFNLFFBQ05wWSxLQUFBQSxFQUNBZ0UsU0FBQUEsRUFDQThwQyxhQUFBQSxFQUNBL21DLE1BQUFBLEVBQ0FnbkMsVUFBQUEsRUFDQWtpQixhQUFBQSxFQUNBanhDLFNBQVVnMUMsRUFBY3YwRCxHQUFVNDBELE9BQWdCMWlFLElBRzFELE1BQU8sQ0FDSDBKLEtBQU0sSUFBTW92QixNQUFBQSxPQUEyRCxFQUFTQSxFQUFpQnB2QixTQW1PekdzVCxFQUFReFUsWUFBY0EsRUFDdEJ3VSxFQUFRdWpELFFBQVVBLEdBQ2xCdmpELEVBQVF3akQsVUFBWUEsR0FDcEJ4akQsRUFBUXpWLFVBQVlBLEdBQ3BCeVYsRUFBUWdJLE9BQVNBLEVBQ2pCaEksRUFBUTBnRCxhQUFlQSxFQUN2QjFnRCxFQUFRbFcsSUFBTUEsRUFDZGtXLEVBQVF1K0MsU0FBV0EsRUFDbkJ2K0MsRUFBUWkvQyxXQUFhQSxFQUNyQmovQyxFQUFRcXpCLEtBQU9BLEVBQ2ZyekIsRUFBUTJsRCxnQkFyTGdCLENBQUM3dUQsRUFBUWt0RCxFQUFPMXhELEtBQ3BDMHhELEVBQVFWLEdBQWlCVSxHQUNsQixDQUNIdi9ELEVBQUc2TixFQUFXakssS0FBS3FPLElBQUlzdEQsR0FBU2x0RCxFQUFPclMsRUFDdkNDLEVBQUc0TixFQUFXakssS0FBS29PLElBQUl1dEQsR0FBU2x0RCxFQUFPcFMsSUFrTC9Dc2IsRUFBUTdXLFNBQVdBLEVBQ25CNlcsRUFBUTJpRCxpQkFBbUJBLEdBQzNCM2lELEVBQVF5Z0QsY0FBZ0JBLEVBQ3hCemdELEVBQVE0bEQsT0F6S08sQ0FBQ0MsRUFBVyxNQUN2QixJQUFJQyxFQUFnQixFQUNoQngvQyxFQUFjLEVBQ2xCLE9BQVF6aUIsSUFDSixNQUFNa2lFLEVBQW9CM2xELEVBQUt5RyxlQUFlbGIsVUFDeEMwYSxFQUFZMC9DLElBQXNCei9DLEVBQWN5L0MsRUFBb0J6L0MsRUFBYyxFQUNsRjAvQyxFQUFXMy9DLEVBQ1h1OUMsR0FBWWtDLEVBQWVqaUUsRUFBR3dpQixFQUFXdy9DLEdBQ3pDQyxFQUdOLE9BRkF4L0MsRUFBY3kvQyxFQUNkRCxFQUFnQkUsRUFDVEEsSUErSmZobUQsRUFBUTRqRCxZQUFjQSxHQUN0QjVqRCxFQUFRaW1ELEtBNUpNQyxJQUNWLEdBQXNCLGlCQUFYQSxFQUNQLE9BQVFyaUUsR0FBTXdFLEtBQUttaUIsTUFBTTNtQixFQUFJcWlFLEdBQVVBLEVBRXRDLENBQ0QsSUFBSTk5RCxFQUFJLEVBQ1IsTUFBTSs5RCxFQUFZRCxFQUFPcjhELE9BQ3pCLE9BQVFoRyxJQUNKLElBQUl1aUUsRUFBZS85RCxLQUFLQyxJQUFJNDlELEVBQU8sR0FBS3JpRSxHQUN4QyxJQUFLdUUsRUFBSSxFQUFHQSxFQUFJKzlELEVBQVcvOUQsSUFBSyxDQUM1QixNQUFNMnBCLEVBQVFtMEMsRUFBTzk5RCxHQUNma0ssRUFBV2pLLEtBQUtDLElBQUl5cEIsRUFBUWx1QixHQUNsQyxHQUFpQixJQUFieU8sRUFDQSxPQUFPeWYsRUFDWCxHQUFJemYsRUFBVzh6RCxFQUNYLE9BQU9GLEVBQU85OUQsRUFBSSxHQUN0QixHQUFJQSxJQUFNKzlELEVBQVksRUFDbEIsT0FBT3AwQyxFQUNYcTBDLEVBQWU5ekQsTUEySS9CME4sRUFBUXpLLE9BQVNBLEVBQ2pCeUssRUFBUS9XLE1BdERNLENBQUNBLEVBQU9DLEVBQVksUUFBV0MsSUFHekMsTUFBTUMsR0FGTkQsRUFDa0IsUUFBZEQsRUFBc0JiLEtBQUtnQixJQUFJRixFQUFVLE1BQVNkLEtBQUtpQixJQUFJSCxFQUFVLE9BQzdDRixFQUN0Qm85RCxFQUF3QixRQUFkbjlELEVBQXNCYixLQUFLa0IsTUFBTUgsR0FBWWYsS0FBS21CLEtBQUtKLEdBQ3ZFLE9BQU91MkMsRUFBTSxFQUFHLEVBQUcwbUIsRUFBVXA5RCxJQWtEakMrVyxFQUFRMGpELFVBQVlBLEdBQ3BCMWpELEVBQVFzbUQsaUJBeElSLFNBQTBCQyxFQUFLanhELEdBQzNCLE9BQU9peEQsR0FBTyxJQUFPanhELElBd0l6QjBLLEVBQVEwSCxrQkFBb0JBLEdBQzVCMUgsRUFBUXBXLEtBdElLLENBQUNQLEVBQUtDLEVBQUt6RixLQUNwQixNQUFNOEYsRUFBWUwsRUFBTUQsRUFDeEIsUUFBV3hGLEVBQUl3RixHQUFPTSxFQUFhQSxHQUFhQSxFQUFhTiwrQkNuMEJwRCxJQUFJbTlELEVBQUcsRUFBUSxLQUFTQyxFQUFHLEVBQVEsS0FBYSxTQUFTbjdELEVBQUUzRixHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUUySCxFQUFFLEVBQUVBLEVBQUU2c0IsVUFBVXR3QixPQUFPeUQsSUFBSTFILEdBQUcsV0FBVzhnRSxtQkFBbUJ2c0MsVUFBVTdzQixJQUFJLE1BQU0seUJBQXlCM0gsRUFBRSxXQUFXQyxFQUFFLGlIQUFpSCxJQUFJK2dFLEVBQUcsSUFBSTdnRSxJQUFJOGdFLEVBQUcsR0FBRyxTQUFTQyxFQUFHbGhFLEVBQUVDLEdBQUdraEUsRUFBR25oRSxFQUFFQyxHQUFHa2hFLEVBQUduaEUsRUFBRSxVQUFVQyxHQUN0YixTQUFTa2hFLEVBQUduaEUsRUFBRUMsR0FBVyxJQUFSZ2hFLEVBQUdqaEUsR0FBR0MsRUFBTUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFaUUsT0FBT2xFLElBQUlnaEUsRUFBR3YyRCxJQUFJeEssRUFBRUQsSUFDekQsSUFBSW9oRSxJQUFLLG9CQUFxQnozRCxhQUFRLElBQXFCQSxPQUFPN0IsZUFBVSxJQUFxQjZCLE9BQU83QixTQUFTQyxlQUFlczVELEVBQUdqNUQsT0FBT0ksVUFBVUgsZUFBZWk1RCxFQUFHLDhWQUE4VkMsRUFDcGdCLEdBQUdDLEVBQUcsR0FDa04sU0FBUzMvRCxFQUFFN0IsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLEVBQUVpckQsRUFBRUMsR0FBRzkyRCxLQUFLMGtFLGdCQUFnQixJQUFJeGhFLEdBQUcsSUFBSUEsR0FBRyxJQUFJQSxFQUFFbEQsS0FBSzJrRSxjQUFjOTVELEVBQUU3SyxLQUFLNGtFLG1CQUFtQmg1RCxFQUFFNUwsS0FBSzZrRSxnQkFBZ0JqNkQsRUFBRTVLLEtBQUs4a0UsYUFBYTdoRSxFQUFFakQsS0FBSyttQixLQUFLN2pCLEVBQUVsRCxLQUFLK2tFLFlBQVlsTyxFQUFFNzJELEtBQUtnbEUsa0JBQWtCbE8sRUFBRSxJQUFJNzBELEVBQUUsR0FDbmIsdUlBQXVJcUUsTUFBTSxLQUFLeEQsU0FBUSxTQUFTRyxHQUFHaEIsRUFBRWdCLEdBQUcsSUFBSTZCLEVBQUU3QixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLGtCQUFrQixDQUFDLFlBQVksU0FBUyxDQUFDLFVBQVUsT0FBTyxDQUFDLFlBQVksZUFBZUgsU0FBUSxTQUFTRyxHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBR2hCLEVBQUVpQixHQUFHLElBQUk0QixFQUFFNUIsRUFBRSxHQUFFLEVBQUdELEVBQUUsR0FBRyxNQUFLLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixZQUFZLGFBQWEsU0FBU0gsU0FBUSxTQUFTRyxHQUFHaEIsRUFBRWdCLEdBQUcsSUFBSTZCLEVBQUU3QixFQUFFLEdBQUUsRUFBR0EsRUFBRWdhLGNBQWMsTUFBSyxHQUFHLE1BQ3ZlLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUJuYSxTQUFRLFNBQVNHLEdBQUdoQixFQUFFZ0IsR0FBRyxJQUFJNkIsRUFBRTdCLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLDhPQUE4T3FELE1BQU0sS0FBS3hELFNBQVEsU0FBU0csR0FBR2hCLEVBQUVnQixHQUFHLElBQUk2QixFQUFFN0IsRUFBRSxHQUFFLEVBQUdBLEVBQUVnYSxjQUFjLE1BQUssR0FBRyxNQUNyYixDQUFDLFVBQVUsV0FBVyxRQUFRLFlBQVluYSxTQUFRLFNBQVNHLEdBQUdoQixFQUFFZ0IsR0FBRyxJQUFJNkIsRUFBRTdCLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsVUFBVSxZQUFZSCxTQUFRLFNBQVNHLEdBQUdoQixFQUFFZ0IsR0FBRyxJQUFJNkIsRUFBRTdCLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsT0FBTyxPQUFPLE9BQU8sUUFBUUgsU0FBUSxTQUFTRyxHQUFHaEIsRUFBRWdCLEdBQUcsSUFBSTZCLEVBQUU3QixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsU0FBU0gsU0FBUSxTQUFTRyxHQUFHaEIsRUFBRWdCLEdBQUcsSUFBSTZCLEVBQUU3QixFQUFFLEdBQUUsRUFBR0EsRUFBRWdhLGNBQWMsTUFBSyxHQUFHLE1BQU0sSUFBSWdvRCxFQUFHLGdCQUFnQixTQUFTQyxFQUFHamlFLEdBQUcsT0FBT0EsRUFBRSxHQUFHc21DLGNBSTNZLFNBQVM0N0IsRUFBR2xpRSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxJQUFJZSxFQUFFM0osRUFBRXFKLGVBQWVwSSxHQUFHakIsRUFBRWlCLEdBQUcsTUFBUSxPQUFPMEksRUFBRSxJQUFJQSxFQUFFbWIsS0FBS2xjLEtBQUssRUFBRTNILEVBQUVpRSxTQUFTLE1BQU1qRSxFQUFFLElBQUksTUFBTUEsRUFBRSxJQUFJLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLE1BUDlJLFNBQVlELEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLEdBQUcsTUFBTzNILEdBRDZGLFNBQVlELEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLEdBQUcsT0FBT0QsR0FBRyxJQUFJQSxFQUFFbWMsS0FBSyxPQUFNLEVBQUcsY0FBYzdqQixHQUFHLElBQUssV0FBVyxJQUFLLFNBQVMsT0FBTSxFQUFHLElBQUssVUFBVSxPQUFHMkgsSUFBYyxPQUFPRCxHQUFTQSxFQUFFODVELGdCQUFtRCxXQUFuQ3poRSxFQUFFQSxFQUFFZ2EsY0FBY29zQyxNQUFNLEVBQUUsS0FBc0IsVUFBVXBtRCxHQUFFLFFBQVEsT0FBTSxHQUM1VG1pRSxDQUFHbmlFLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLE9BQU0sRUFBRyxHQUFHQSxFQUFFLE9BQU0sRUFBRyxHQUFHLE9BQU9ELEVBQUUsT0FBT0EsRUFBRW1jLE1BQU0sS0FBSyxFQUFFLE9BQU83akIsRUFBRSxLQUFLLEVBQUUsT0FBTSxJQUFLQSxFQUFFLEtBQUssRUFBRSxPQUFPc2hCLE1BQU10aEIsR0FBRyxLQUFLLEVBQUUsT0FBT3NoQixNQUFNdGhCLElBQUksRUFBRUEsRUFBRSxPQUFNLEVBT3BFbWlFLENBQUduaUUsRUFBRTBILEVBQUVnQixFQUFFZixLQUFLRCxFQUFFLE1BQU1DLEdBQUcsT0FBT2UsRUFSeEssU0FBWTNJLEdBQUcsUUFBR3FoRSxFQUFHOTZELEtBQUtpN0QsRUFBR3hoRSxLQUFlcWhFLEVBQUc5NkQsS0FBS2c3RCxFQUFHdmhFLEtBQWVzaEUsRUFBRzM5QyxLQUFLM2pCLEdBQVV3aEUsRUFBR3hoRSxJQUFHLEdBQUd1aEUsRUFBR3ZoRSxJQUFHLEdBQVMsSUFRMERxaUUsQ0FBR3BpRSxLQUFLLE9BQU8wSCxFQUFFM0gsRUFBRXNpRSxnQkFBZ0JyaUUsR0FBR0QsRUFBRWttQyxhQUFham1DLEVBQUUsR0FBRzBILElBQUlnQixFQUFFaTVELGdCQUFnQjVoRSxFQUFFMkksRUFBRWs1RCxjQUFjLE9BQU9sNkQsRUFBRSxJQUFJZ0IsRUFBRW1iLE1BQVEsR0FBR25jLEdBQUcxSCxFQUFFMEksRUFBRSs0RCxjQUFjOTVELEVBQUVlLEVBQUVnNUQsbUJBQW1CLE9BQU9oNkQsRUFBRTNILEVBQUVzaUUsZ0JBQWdCcmlFLElBQWEwSCxFQUFFLEtBQVhnQixFQUFFQSxFQUFFbWIsT0FBYyxJQUFJbmIsSUFBRyxJQUFLaEIsRUFBRSxHQUFHLEdBQUdBLEVBQUVDLEVBQUU1SCxFQUFFdWlFLGVBQWUzNkQsRUFBRTNILEVBQUUwSCxHQUFHM0gsRUFBRWttQyxhQUFham1DLEVBQUUwSCxNQUg3YywwakNBQTBqQ3RFLE1BQU0sS0FBS3hELFNBQVEsU0FBU0csR0FBRyxJQUFJQyxFQUFFRCxFQUFFbWEsUUFBUTZuRCxFQUN6bUNDLEdBQUlqakUsRUFBRWlCLEdBQUcsSUFBSTRCLEVBQUU1QixFQUFFLEdBQUUsRUFBR0QsRUFBRSxNQUFLLEdBQUcsTUFBTSwyRUFBMkVxRCxNQUFNLEtBQUt4RCxTQUFRLFNBQVNHLEdBQUcsSUFBSUMsRUFBRUQsRUFBRW1hLFFBQVE2bkQsRUFBR0MsR0FBSWpqRSxFQUFFaUIsR0FBRyxJQUFJNEIsRUFBRTVCLEVBQUUsR0FBRSxFQUFHRCxFQUFFLGdDQUErQixHQUFHLE1BQU0sQ0FBQyxXQUFXLFdBQVcsYUFBYUgsU0FBUSxTQUFTRyxHQUFHLElBQUlDLEVBQUVELEVBQUVtYSxRQUFRNm5ELEVBQUdDLEdBQUlqakUsRUFBRWlCLEdBQUcsSUFBSTRCLEVBQUU1QixFQUFFLEdBQUUsRUFBR0QsRUFBRSx3Q0FBdUMsR0FBRyxNQUFNLENBQUMsV0FBVyxlQUFlSCxTQUFRLFNBQVNHLEdBQUdoQixFQUFFZ0IsR0FBRyxJQUFJNkIsRUFBRTdCLEVBQUUsR0FBRSxFQUFHQSxFQUFFZ2EsY0FBYyxNQUFLLEdBQUcsTUFDL2NoYixFQUFFd2pFLFVBQVUsSUFBSTNnRSxFQUFFLFlBQVksR0FBRSxFQUFHLGFBQWEsZ0NBQStCLEdBQUcsR0FBSSxDQUFDLE1BQU0sT0FBTyxTQUFTLGNBQWNoQyxTQUFRLFNBQVNHLEdBQUdoQixFQUFFZ0IsR0FBRyxJQUFJNkIsRUFBRTdCLEVBQUUsR0FBRSxFQUFHQSxFQUFFZ2EsY0FBYyxNQUFLLEdBQUcsTUFFekwsSUFBSXlvRCxFQUFHNUIsRUFBRzZCLG1EQUFtREMsRUFBR2pQLE9BQU9DLElBQUksaUJBQWlCaVAsRUFBR2xQLE9BQU9DLElBQUksZ0JBQWdCa1AsRUFBR25QLE9BQU9DLElBQUksa0JBQWtCbVAsRUFBR3BQLE9BQU9DLElBQUkscUJBQXFCb1AsRUFBR3JQLE9BQU9DLElBQUksa0JBQWtCcVAsRUFBR3RQLE9BQU9DLElBQUksa0JBQWtCc1AsRUFBR3ZQLE9BQU9DLElBQUksaUJBQWlCdVAsRUFBR3hQLE9BQU9DLElBQUkscUJBQXFCd1AsRUFBR3pQLE9BQU9DLElBQUksa0JBQWtCeVAsRUFBRzFQLE9BQU9DLElBQUksdUJBQXVCMFAsRUFBRzNQLE9BQU9DLElBQUksY0FBYzJQLEVBQUc1UCxPQUFPQyxJQUFJLGNBQWNELE9BQU9DLElBQUksZUFBZUQsT0FBT0MsSUFBSSwwQkFDamUsSUFBSTRQLEVBQUc3UCxPQUFPQyxJQUFJLG1CQUFtQkQsT0FBT0MsSUFBSSx1QkFBdUJELE9BQU9DLElBQUksZUFBZUQsT0FBT0MsSUFBSSx3QkFBd0IsSUFBSTZQLEVBQUc5UCxPQUFPLzlDLFNBQVMsU0FBUzh0RCxFQUFHempFLEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUF3QyxtQkFBbkNBLEVBQUV3akUsR0FBSXhqRSxFQUFFd2pFLElBQUt4akUsRUFBRSxlQUEwQ0EsRUFBRSxLQUFLLElBQW9CMGpFLEVBQWhCclAsRUFBRWpzRCxPQUFPZ0QsT0FBVSxTQUFTdTRELEVBQUczakUsR0FBRyxRQUFHLElBQVMwakUsRUFBRyxJQUFJLE1BQU1FLFFBQVMsTUFBTWo4RCxHQUFHLElBQUkxSCxFQUFFMEgsRUFBRTAwQixNQUFNNTdCLE9BQU9tOUMsTUFBTSxnQkFBZ0I4bEIsRUFBR3pqRSxHQUFHQSxFQUFFLElBQUksR0FBRyxNQUFNLEtBQUt5akUsRUFBRzFqRSxFQUFFLElBQUk2akUsR0FBRyxFQUN6YixTQUFTQyxFQUFHOWpFLEVBQUVDLEdBQUcsSUFBSUQsR0FBRzZqRSxFQUFHLE1BQU0sR0FBR0EsR0FBRyxFQUFHLElBQUlsOEQsRUFBRWk4RCxNQUFNRyxrQkFBa0JILE1BQU1HLHVCQUFrQixFQUFPLElBQUksR0FBRzlqRSxFQUFFLEdBQUdBLEVBQUUsV0FBVyxNQUFNMmpFLFNBQVV4N0QsT0FBT2dTLGVBQWVuYSxFQUFFdUksVUFBVSxRQUFRLENBQUM3SyxJQUFJLFdBQVcsTUFBTWltRSxXQUFZLGlCQUFrQkksU0FBU0EsUUFBUUMsVUFBVSxDQUFDLElBQUlELFFBQVFDLFVBQVVoa0UsRUFBRSxJQUFJLE1BQU04ekQsR0FBRyxJQUFJbnNELEVBQUVtc0QsRUFBRWlRLFFBQVFDLFVBQVVqa0UsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBSUEsRUFBRXNHLE9BQU8sTUFBTXd0RCxHQUFHbnNELEVBQUVtc0QsRUFBRS96RCxFQUFFdUcsS0FBS3RHLEVBQUV1SSxlQUFlLENBQUMsSUFBSSxNQUFNbzdELFFBQVMsTUFBTTdQLEdBQUduc0QsRUFBRW1zRCxFQUFFL3pELEtBQUssTUFBTSt6RCxHQUFHLEdBQUdBLEdBQUduc0QsR0FBRyxpQkFBa0Jtc0QsRUFBRTEzQixNQUFNLENBQUMsSUFBSSxJQUFJMXpCLEVBQUVvckQsRUFBRTEzQixNQUFNaDVCLE1BQU0sTUFDbmZ1d0QsRUFBRWhzRCxFQUFFeTBCLE1BQU1oNUIsTUFBTSxNQUFNd3dELEVBQUVsckQsRUFBRXpFLE9BQU8sRUFBRTR2RCxFQUFFRixFQUFFMXZELE9BQU8sRUFBRSxHQUFHMnZELEdBQUcsR0FBR0MsR0FBR25yRCxFQUFFa3JELEtBQUtELEVBQUVFLElBQUlBLElBQUksS0FBSyxHQUFHRCxHQUFHLEdBQUdDLEVBQUVELElBQUlDLElBQUksR0FBR25yRCxFQUFFa3JELEtBQUtELEVBQUVFLEdBQUcsQ0FBQyxHQUFHLElBQUlELEdBQUcsSUFBSUMsRUFBRyxNQUFNRCxJQUFRLElBQUpDLEdBQVNuckQsRUFBRWtyRCxLQUFLRCxFQUFFRSxHQUFHLENBQUMsSUFBSTU0QyxFQUFFLEtBQUt2UyxFQUFFa3JELEdBQUcxNUMsUUFBUSxXQUFXLFFBQTZGLE9BQXJGbmEsRUFBRTJ4RCxhQUFhejJDLEVBQUUzSSxTQUFTLGlCQUFpQjJJLEVBQUVBLEVBQUVmLFFBQVEsY0FBY25hLEVBQUUyeEQsY0FBcUJ6MkMsU0FBUSxHQUFHMjRDLEdBQUcsR0FBR0MsR0FBRyxRQUFRLFFBQVErUCxHQUFHLEVBQUdELE1BQU1HLGtCQUFrQnA4RCxFQUFFLE9BQU8zSCxFQUFFQSxFQUFFQSxFQUFFMnhELGFBQWEzeEQsRUFBRUosS0FBSyxJQUFJK2pFLEVBQUczakUsR0FBRyxHQUM1WixTQUFTa2tFLEVBQUdsa0UsR0FBRyxPQUFPQSxFQUFFbWtFLEtBQUssS0FBSyxFQUFFLE9BQU9SLEVBQUczakUsRUFBRThqQixNQUFNLEtBQUssR0FBRyxPQUFPNi9DLEVBQUcsUUFBUSxLQUFLLEdBQUcsT0FBT0EsRUFBRyxZQUFZLEtBQUssR0FBRyxPQUFPQSxFQUFHLGdCQUFnQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFTRyxFQUFHOWpFLEVBQUU4akIsTUFBSyxHQUFNLEtBQUssR0FBRyxPQUFTZ2dELEVBQUc5akUsRUFBRThqQixLQUFLN0MsUUFBTyxHQUFNLEtBQUssRUFBRSxPQUFTNmlELEVBQUc5akUsRUFBRThqQixNQUFLLEdBQU0sUUFBUSxNQUFNLElBQ3JSLFNBQVNzZ0QsRUFBR3BrRSxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxtQkFBb0JBLEVBQUUsT0FBT0EsRUFBRTJ4RCxhQUFhM3hELEVBQUVKLE1BQU0sS0FBSyxHQUFHLGlCQUFrQkksRUFBRSxPQUFPQSxFQUFFLE9BQU9BLEdBQUcsS0FBSzZpRSxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sU0FBUyxLQUFLRyxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sYUFBYSxLQUFLSyxFQUFHLE1BQU0sV0FBVyxLQUFLQyxFQUFHLE1BQU0sZUFBZSxHQUFHLGlCQUFrQnBqRSxFQUFFLE9BQU9BLEVBQUVvMEQsVUFBVSxLQUFLNk8sRUFBRyxPQUFPampFLEVBQUUyeEQsYUFBYSxXQUFXLFlBQVksS0FBS3FSLEVBQUcsT0FBT2hqRSxFQUFFcWtFLFNBQVMxUyxhQUFhLFdBQVcsWUFBWSxLQUFLdVIsRUFBRyxJQUFJampFLEVBQUVELEVBQUVpaEIsT0FDN1osT0FEb2FqaEIsRUFBRUEsRUFBRTJ4RCxlQUNuZDN4RCxFQUFFLE1BRGllQSxFQUFFQyxFQUFFMHhELGFBQ2xmMXhELEVBQUVMLE1BQU0sSUFBWSxjQUFjSSxFQUFFLElBQUksY0FBcUJBLEVBQUUsS0FBS3FqRSxFQUFHLE9BQTZCLFFBQXRCcGpFLEVBQUVELEVBQUUyeEQsYUFBYSxNQUFjMXhELEVBQUVta0UsRUFBR3BrRSxFQUFFOGpCLE9BQU8sT0FBTyxLQUFLdy9DLEVBQUdyakUsRUFBRUQsRUFBRXNrRSxTQUFTdGtFLEVBQUVBLEVBQUV1a0UsTUFBTSxJQUFJLE9BQU9ILEVBQUdwa0UsRUFBRUMsSUFBSSxNQUFNMEgsS0FBSyxPQUFPLEtBQ3ZNLFNBQVM2OEQsRUFBR3hrRSxHQUFHLElBQUlDLEVBQUVELEVBQUU4akIsS0FBSyxPQUFPOWpCLEVBQUVta0UsS0FBSyxLQUFLLEdBQUcsTUFBTSxRQUFRLEtBQUssRUFBRSxPQUFPbGtFLEVBQUUweEQsYUFBYSxXQUFXLFlBQVksS0FBSyxHQUFHLE9BQU8xeEQsRUFBRW9rRSxTQUFTMVMsYUFBYSxXQUFXLFlBQVksS0FBSyxHQUFHLE1BQU0scUJBQXFCLEtBQUssR0FBRyxPQUFrQjN4RCxHQUFYQSxFQUFFQyxFQUFFZ2hCLFFBQVcwd0MsYUFBYTN4RCxFQUFFSixNQUFNLEdBQUdLLEVBQUUweEQsY0FBYyxLQUFLM3hELEVBQUUsY0FBY0EsRUFBRSxJQUFJLGNBQWMsS0FBSyxFQUFFLE1BQU0sV0FBVyxLQUFLLEVBQUUsT0FBT0MsRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLEtBQUssRUFBRSxNQUFNLE9BQU8sS0FBSyxFQUFFLE1BQU0sT0FBTyxLQUFLLEdBQUcsT0FBT21rRSxFQUFHbmtFLEdBQUcsS0FBSyxFQUFFLE9BQU9BLElBQUk2aUUsRUFBRyxhQUFhLE9BQU8sS0FBSyxHQUFHLE1BQU0sWUFDdGYsS0FBSyxHQUFHLE1BQU0sV0FBVyxLQUFLLEdBQUcsTUFBTSxRQUFRLEtBQUssR0FBRyxNQUFNLFdBQVcsS0FBSyxHQUFHLE1BQU0sZUFBZSxLQUFLLEdBQUcsTUFBTSxnQkFBZ0IsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsR0FBRyxtQkFBb0I3aUUsRUFBRSxPQUFPQSxFQUFFMHhELGFBQWExeEQsRUFBRUwsTUFBTSxLQUFLLEdBQUcsaUJBQWtCSyxFQUFFLE9BQU9BLEVBQUUsT0FBTyxLQUFLLFNBQVN3a0UsRUFBR3prRSxHQUFHLGNBQWNBLEdBQUcsSUFBSyxVQUFVLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxZQUFxQixJQUFLLFNBQVMsT0FBT0EsRUFBRSxRQUFRLE1BQU0sSUFDbGEsU0FBUzBrRSxFQUFHMWtFLEdBQUcsSUFBSUMsRUFBRUQsRUFBRThqQixLQUFLLE9BQU85akIsRUFBRUEsRUFBRTJrRSxXQUFXLFVBQVUza0UsRUFBRWdhLGdCQUFnQixhQUFhL1osR0FBRyxVQUFVQSxHQUVwRixTQUFTMmtFLEVBQUc1a0UsR0FBR0EsRUFBRTZrRSxnQkFBZ0I3a0UsRUFBRTZrRSxjQUR2RCxTQUFZN2tFLEdBQUcsSUFBSUMsRUFBRXlrRSxFQUFHMWtFLEdBQUcsVUFBVSxRQUFRMkgsRUFBRVMsT0FBTytTLHlCQUF5Qm5iLEVBQUUwRSxZQUFZOEQsVUFBVXZJLEdBQUcySCxFQUFFLEdBQUc1SCxFQUFFQyxHQUFHLElBQUlELEVBQUVxSSxlQUFlcEksU0FBSSxJQUFxQjBILEdBQUcsbUJBQW9CQSxFQUFFNUosS0FBSyxtQkFBb0I0SixFQUFFaEssSUFBSSxDQUFDLElBQUlnTCxFQUFFaEIsRUFBRTVKLElBQUk2MUQsRUFBRWpzRCxFQUFFaEssSUFBaUwsT0FBN0t5SyxPQUFPZ1MsZUFBZXBhLEVBQUVDLEVBQUUsQ0FBQzZrRSxjQUFhLEVBQUcvbUUsSUFBSSxXQUFXLE9BQU80SyxFQUFFcEMsS0FBS3hKLE9BQU9ZLElBQUksU0FBU3FDLEdBQUc0SCxFQUFFLEdBQUc1SCxFQUFFNHpELEVBQUVydEQsS0FBS3hKLEtBQUtpRCxNQUFNb0ksT0FBT2dTLGVBQWVwYSxFQUFFQyxFQUFFLENBQUNtYixXQUFXelQsRUFBRXlULGFBQW1CLENBQUMwekIsU0FBUyxXQUFXLE9BQU9sbkMsR0FBR205RCxTQUFTLFNBQVMva0UsR0FBRzRILEVBQUUsR0FBRzVILEdBQUdnbEUsYUFBYSxXQUFXaGxFLEVBQUU2a0UsY0FDeGYsWUFBWTdrRSxFQUFFQyxNQUF1RGdsRSxDQUFHamxFLElBQUksU0FBU2tsRSxFQUFHbGxFLEdBQUcsSUFBSUEsRUFBRSxPQUFNLEVBQUcsSUFBSUMsRUFBRUQsRUFBRTZrRSxjQUFjLElBQUk1a0UsRUFBRSxPQUFNLEVBQUcsSUFBSTBILEVBQUUxSCxFQUFFNnVDLFdBQWVsbkMsRUFBRSxHQUFxRCxPQUFsRDVILElBQUk0SCxFQUFFODhELEVBQUcxa0UsR0FBR0EsRUFBRW1sRSxRQUFRLE9BQU8sUUFBUW5sRSxFQUFFcUIsUUFBT3JCLEVBQUU0SCxLQUFhRCxJQUFHMUgsRUFBRThrRSxTQUFTL2tFLElBQUcsR0FBTyxTQUFTb2xFLEVBQUdwbEUsR0FBd0QsUUFBRyxLQUF4REEsRUFBRUEsSUFBSSxvQkFBcUI4SCxTQUFTQSxjQUFTLElBQWtDLE9BQU8sS0FBSyxJQUFJLE9BQU85SCxFQUFFcWxFLGVBQWVybEUsRUFBRWdqRCxLQUFLLE1BQU0vaUQsR0FBRyxPQUFPRCxFQUFFZ2pELE1BQy9aLFNBQVNzaUIsRUFBR3RsRSxFQUFFQyxHQUFHLElBQUkwSCxFQUFFMUgsRUFBRWtsRSxRQUFRLE9BQU85USxFQUFFLEdBQUdwMEQsRUFBRSxDQUFDc2xFLG9CQUFlLEVBQU94b0Isa0JBQWEsRUFBTzE3QyxXQUFNLEVBQU84akUsUUFBUSxNQUFNeDlELEVBQUVBLEVBQUUzSCxFQUFFd2xFLGNBQWNDLGlCQUFpQixTQUFTQyxFQUFHMWxFLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUsTUFBTTFILEVBQUU4OEMsYUFBYSxHQUFHOThDLEVBQUU4OEMsYUFBYW4xQyxFQUFFLE1BQU0zSCxFQUFFa2xFLFFBQVFsbEUsRUFBRWtsRSxRQUFRbGxFLEVBQUVzbEUsZUFBZTU5RCxFQUFFODhELEVBQUcsTUFBTXhrRSxFQUFFb0IsTUFBTXBCLEVBQUVvQixNQUFNc0csR0FBRzNILEVBQUV3bEUsY0FBYyxDQUFDQyxlQUFlNzlELEVBQUV6SSxhQUFhd0ksRUFBRWcrRCxXQUFXLGFBQWExbEUsRUFBRTZqQixNQUFNLFVBQVU3akIsRUFBRTZqQixLQUFLLE1BQU03akIsRUFBRWtsRSxRQUFRLE1BQU1sbEUsRUFBRW9CLE9BQU8sU0FBU3VrRSxFQUFHNWxFLEVBQUVDLEdBQWUsT0FBWkEsRUFBRUEsRUFBRWtsRSxVQUFpQmpELEVBQUdsaUUsRUFBRSxVQUFVQyxHQUFFLEdBQzNkLFNBQVM0bEUsRUFBRzdsRSxFQUFFQyxHQUFHMmxFLEVBQUc1bEUsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRTg4RCxFQUFHeGtFLEVBQUVvQixPQUFPdUcsRUFBRTNILEVBQUU2akIsS0FBSyxHQUFHLE1BQU1uYyxFQUFLLFdBQVdDLEdBQU0sSUFBSUQsR0FBRyxLQUFLM0gsRUFBRXFCLE9BQU9yQixFQUFFcUIsT0FBT3NHLEtBQUUzSCxFQUFFcUIsTUFBTSxHQUFHc0csR0FBTzNILEVBQUVxQixRQUFRLEdBQUdzRyxJQUFJM0gsRUFBRXFCLE1BQU0sR0FBR3NHLFFBQVEsR0FBRyxXQUFXQyxHQUFHLFVBQVVBLEVBQThCLFlBQTNCNUgsRUFBRXNpRSxnQkFBZ0IsU0FBZ0JyaUUsRUFBRW9JLGVBQWUsU0FBU3k5RCxHQUFHOWxFLEVBQUVDLEVBQUU2akIsS0FBS25jLEdBQUcxSCxFQUFFb0ksZUFBZSxpQkFBaUJ5OUQsR0FBRzlsRSxFQUFFQyxFQUFFNmpCLEtBQUsyZ0QsRUFBR3hrRSxFQUFFODhDLGVBQWUsTUFBTTk4QyxFQUFFa2xFLFNBQVMsTUFBTWxsRSxFQUFFc2xFLGlCQUFpQnZsRSxFQUFFdWxFLGlCQUFpQnRsRSxFQUFFc2xFLGdCQUNuWixTQUFTemEsRUFBRzlxRCxFQUFFQyxFQUFFMEgsR0FBRyxHQUFHMUgsRUFBRW9JLGVBQWUsVUFBVXBJLEVBQUVvSSxlQUFlLGdCQUFnQixDQUFDLElBQUlULEVBQUUzSCxFQUFFNmpCLEtBQUssS0FBSyxXQUFXbGMsR0FBRyxVQUFVQSxRQUFHLElBQVMzSCxFQUFFb0IsT0FBTyxPQUFPcEIsRUFBRW9CLE9BQU8sT0FBT3BCLEVBQUUsR0FBR0QsRUFBRXdsRSxjQUFjcm1FLGFBQWF3SSxHQUFHMUgsSUFBSUQsRUFBRXFCLFFBQVFyQixFQUFFcUIsTUFBTXBCLEdBQUdELEVBQUUrOEMsYUFBYTk4QyxFQUFXLE1BQVQwSCxFQUFFM0gsRUFBRUosUUFBY0ksRUFBRUosS0FBSyxJQUFJSSxFQUFFdWxFLGlCQUFpQnZsRSxFQUFFd2xFLGNBQWNDLGVBQWUsS0FBSzk5RCxJQUFJM0gsRUFBRUosS0FBSytILEdBQ3ZWLFNBQVNtK0QsR0FBRzlsRSxFQUFFQyxFQUFFMEgsR0FBTSxXQUFXMUgsR0FBR21sRSxFQUFHcGxFLEVBQUUrbEUsaUJBQWlCL2xFLElBQUUsTUFBTTJILEVBQUUzSCxFQUFFKzhDLGFBQWEsR0FBRy84QyxFQUFFd2xFLGNBQWNybUUsYUFBYWEsRUFBRSs4QyxlQUFlLEdBQUdwMUMsSUFBSTNILEVBQUUrOEMsYUFBYSxHQUFHcDFDLElBQUcsSUFBSXErRCxHQUFHdGtFLE1BQU1DLFFBQzdLLFNBQVNza0UsR0FBR2ptRSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBZSxHQUFaNUgsRUFBRUEsRUFBRXlKLFFBQVd4SixFQUFFLENBQUNBLEVBQUUsR0FBRyxJQUFJLElBQUkwSSxFQUFFLEVBQUVBLEVBQUVoQixFQUFFekQsT0FBT3lFLElBQUkxSSxFQUFFLElBQUkwSCxFQUFFZ0IsS0FBSSxFQUFHLElBQUloQixFQUFFLEVBQUVBLEVBQUUzSCxFQUFFa0UsT0FBT3lELElBQUlnQixFQUFFMUksRUFBRW9JLGVBQWUsSUFBSXJJLEVBQUUySCxHQUFHdEcsT0FBT3JCLEVBQUUySCxHQUFHdStELFdBQVd2OUQsSUFBSTNJLEVBQUUySCxHQUFHdStELFNBQVN2OUQsR0FBR0EsR0FBR2YsSUFBSTVILEVBQUUySCxHQUFHdytELGlCQUFnQixPQUFRLENBQW1CLElBQWxCeCtELEVBQUUsR0FBRzg4RCxFQUFHOThELEdBQUcxSCxFQUFFLEtBQVMwSSxFQUFFLEVBQUVBLEVBQUUzSSxFQUFFa0UsT0FBT3lFLElBQUksQ0FBQyxHQUFHM0ksRUFBRTJJLEdBQUd0SCxRQUFRc0csRUFBaUQsT0FBOUMzSCxFQUFFMkksR0FBR3U5RCxVQUFTLE9BQUd0K0QsSUFBSTVILEVBQUUySSxHQUFHdzlELGlCQUFnQixJQUFXLE9BQU9sbUUsR0FBR0QsRUFBRTJJLEdBQUd5OUQsV0FBV25tRSxFQUFFRCxFQUFFMkksSUFBSSxPQUFPMUksSUFBSUEsRUFBRWltRSxVQUFTLElBQ3BZLFNBQVNHLEdBQUdybUUsRUFBRUMsR0FBRyxHQUFHLE1BQU1BLEVBQUVxbUUsd0JBQXdCLE1BQU0xQyxNQUFNaitELEVBQUUsS0FBSyxPQUFPMHVELEVBQUUsR0FBR3AwRCxFQUFFLENBQUNvQixXQUFNLEVBQU8wN0Msa0JBQWEsRUFBTy9xQixTQUFTLEdBQUdoeUIsRUFBRXdsRSxjQUFjcm1FLGVBQWUsU0FBU29uRSxHQUFHdm1FLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUxSCxFQUFFb0IsTUFBTSxHQUFHLE1BQU1zRyxFQUFFLENBQStCLEdBQTlCQSxFQUFFMUgsRUFBRSt4QixTQUFTL3hCLEVBQUVBLEVBQUU4OEMsYUFBZ0IsTUFBTXAxQyxFQUFFLENBQUMsR0FBRyxNQUFNMUgsRUFBRSxNQUFNMmpFLE1BQU1qK0QsRUFBRSxLQUFLLEdBQUdxZ0UsR0FBR3IrRCxHQUFHLENBQUMsR0FBRyxFQUFFQSxFQUFFekQsT0FBTyxNQUFNMC9ELE1BQU1qK0QsRUFBRSxLQUFLZ0MsRUFBRUEsRUFBRSxHQUFHMUgsRUFBRTBILEVBQUUsTUFBTTFILElBQUlBLEVBQUUsSUFBSTBILEVBQUUxSCxFQUFFRCxFQUFFd2xFLGNBQWMsQ0FBQ3JtRSxhQUFhc2xFLEVBQUc5OEQsSUFDaFksU0FBUzYrRCxHQUFHeG1FLEVBQUVDLEdBQUcsSUFBSTBILEVBQUU4OEQsRUFBR3hrRSxFQUFFb0IsT0FBT3VHLEVBQUU2OEQsRUFBR3hrRSxFQUFFODhDLGNBQWMsTUFBTXAxQyxLQUFJQSxFQUFFLEdBQUdBLEtBQU0zSCxFQUFFcUIsUUFBUXJCLEVBQUVxQixNQUFNc0csR0FBRyxNQUFNMUgsRUFBRTg4QyxjQUFjLzhDLEVBQUUrOEMsZUFBZXAxQyxJQUFJM0gsRUFBRSs4QyxhQUFhcDFDLElBQUksTUFBTUMsSUFBSTVILEVBQUUrOEMsYUFBYSxHQUFHbjFDLEdBQUcsU0FBUzYrRCxHQUFHem1FLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTBtRSxZQUFZem1FLElBQUlELEVBQUV3bEUsY0FBY3JtRSxjQUFjLEtBQUtjLEdBQUcsT0FBT0EsSUFBSUQsRUFBRXFCLE1BQU1wQixHQUFHLFNBQVMwbUUsR0FBRzNtRSxHQUFHLE9BQU9BLEdBQUcsSUFBSyxNQUFNLE1BQU0sNkJBQTZCLElBQUssT0FBTyxNQUFNLHFDQUFxQyxRQUFRLE1BQU0sZ0NBQzlhLFNBQVM0bUUsR0FBRzVtRSxFQUFFQyxHQUFHLE9BQU8sTUFBTUQsR0FBRyxpQ0FBaUNBLEVBQUUybUUsR0FBRzFtRSxHQUFHLCtCQUErQkQsR0FBRyxrQkFBa0JDLEVBQUUsK0JBQStCRCxFQUMvSixJQUFJNm1FLEdBQWU3bUUsR0FBWjhtRSxJQUFZOW1FLEdBQXNKLFNBQVNBLEVBQUVDLEdBQUcsR0FBRywrQkFBK0JELEVBQUUrbUUsY0FBYyxjQUFjL21FLEVBQUVBLEVBQUVnbkUsVUFBVS9tRSxNQUFNLENBQTJGLEtBQTFGNG1FLEdBQUdBLElBQUkvK0QsU0FBU0MsY0FBYyxRQUFVaS9ELFVBQVUsUUFBUS9tRSxFQUFFZ25FLFVBQVVDLFdBQVcsU0FBYWpuRSxFQUFFNG1FLEdBQUdNLFdBQVdubkUsRUFBRW1uRSxZQUFZbm5FLEVBQUVvbkUsWUFBWXBuRSxFQUFFbW5FLFlBQVksS0FBS2xuRSxFQUFFa25FLFlBQVlubkUsRUFBRXFuRSxZQUFZcG5FLEVBQUVrbkUsY0FBM2Esb0JBQXFCRyxPQUFPQSxNQUFNQyx3QkFBd0IsU0FBU3RuRSxFQUFFMEgsRUFBRUMsRUFBRWUsR0FBRzIrRCxNQUFNQyx5QkFBd0IsV0FBVyxPQUFPdm5FLEdBQUVDLEVBQUUwSCxPQUFVM0gsSUFDdEssU0FBU3duRSxHQUFHeG5FLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLElBQUkwSCxFQUFFM0gsRUFBRW1uRSxXQUFXLEdBQUd4L0QsR0FBR0EsSUFBSTNILEVBQUV5bkUsV0FBVyxJQUFJOS9ELEVBQUUrL0QsU0FBd0IsWUFBZC8vRCxFQUFFZ2dFLFVBQVUxbkUsR0FBVUQsRUFBRTBtRSxZQUFZem1FLEVBQ3JILElBQUkybkUsR0FBRyxDQUFDQyx5QkFBd0IsRUFBR0MsYUFBWSxFQUFHQyxtQkFBa0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxTQUFRLEVBQUdDLGNBQWEsRUFBR0MsaUJBQWdCLEVBQUdDLGFBQVksRUFBR0MsU0FBUSxFQUFHQyxNQUFLLEVBQUdDLFVBQVMsRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGNBQWEsRUFBR0MsV0FBVSxFQUFHQyxVQUFTLEVBQUdDLFNBQVEsRUFBR0MsWUFBVyxFQUFHQyxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxlQUFjLEVBQUdDLGdCQUFlLEVBQUdDLGlCQUFnQixFQUFHQyxZQUFXLEVBQUdDLFdBQVUsRUFBR0MsWUFBVyxFQUFHOWdFLFNBQVEsRUFBRys4QyxPQUFNLEVBQUdna0IsU0FBUSxFQUFHQyxTQUFRLEVBQUdDLFFBQU8sRUFBR2hpRCxRQUFPLEVBQ2xmaWlELE1BQUssRUFBR2hpRCxhQUFZLEVBQUdpaUQsY0FBYSxFQUFHQyxhQUFZLEVBQUdDLGlCQUFnQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdwaUQsZUFBYyxFQUFHcWlELGFBQVksR0FBSUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNLEtBQTZILFNBQVNDLEdBQUdwcUUsRUFBRUMsRUFBRTBILEdBQUcsT0FBTyxNQUFNMUgsR0FBRyxrQkFBbUJBLEdBQUcsS0FBS0EsRUFBRSxHQUFHMEgsR0FBRyxpQkFBa0IxSCxHQUFHLElBQUlBLEdBQUcybkUsR0FBR3YvRCxlQUFlckksSUFBSTRuRSxHQUFHNW5FLElBQUksR0FBR0MsR0FBR1EsT0FBT1IsRUFBRSxLQUNyYixTQUFTb3FFLEdBQUdycUUsRUFBRUMsR0FBYSxJQUFJLElBQUkwSCxLQUFsQjNILEVBQUVBLEVBQUVpSixNQUFtQmhKLEVBQUUsR0FBR0EsRUFBRW9JLGVBQWVWLEdBQUcsQ0FBQyxJQUFJQyxFQUFFLElBQUlELEVBQUVySixRQUFRLE1BQU1xSyxFQUFFeWhFLEdBQUd6aUUsRUFBRTFILEVBQUUwSCxHQUFHQyxHQUFHLFVBQVVELElBQUlBLEVBQUUsWUFBWUMsRUFBRTVILEVBQUVvSixZQUFZekIsRUFBRWdCLEdBQUczSSxFQUFFMkgsR0FBR2dCLEdBRGNQLE9BQU91UCxLQUFLaXdELElBQUkvbkUsU0FBUSxTQUFTRyxHQUFHbXFFLEdBQUd0cUUsU0FBUSxTQUFTSSxHQUFHQSxFQUFFQSxFQUFFRCxFQUFFc3FFLE9BQU8sR0FBR2hrQyxjQUFjdG1DLEVBQUV1cUUsVUFBVSxHQUFHM0MsR0FBRzNuRSxHQUFHMm5FLEdBQUc1bkUsU0FDNUgsSUFBSXdxRSxHQUFHblcsRUFBRSxDQUFDb1csVUFBUyxHQUFJLENBQUNDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR3hsRSxPQUFNLEVBQUd5bEUsUUFBTyxFQUFHQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsT0FBTSxFQUFHOTlDLFFBQU8sRUFBRys5QyxPQUFNLEVBQUdDLEtBQUksSUFDbFQsU0FBU0MsR0FBR3ZyRSxFQUFFQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxHQUFHdXFFLEdBQUd4cUUsS0FBSyxNQUFNQyxFQUFFK3hCLFVBQVUsTUFBTS94QixFQUFFcW1FLHlCQUF5QixNQUFNMUMsTUFBTWorRCxFQUFFLElBQUkzRixJQUFJLEdBQUcsTUFBTUMsRUFBRXFtRSx3QkFBd0IsQ0FBQyxHQUFHLE1BQU1ybUUsRUFBRSt4QixTQUFTLE1BQU00eEMsTUFBTWorRCxFQUFFLEtBQUssR0FBRyxpQkFBa0IxRixFQUFFcW1FLDJCQUEyQixXQUFXcm1FLEVBQUVxbUUseUJBQXlCLE1BQU0xQyxNQUFNaitELEVBQUUsS0FBTSxHQUFHLE1BQU0xRixFQUFFZ0osT0FBTyxpQkFBa0JoSixFQUFFZ0osTUFBTSxNQUFNMjZELE1BQU1qK0QsRUFBRSxNQUM1VixTQUFTNmxFLEdBQUd4ckUsRUFBRUMsR0FBRyxJQUFJLElBQUlELEVBQUUxQixRQUFRLEtBQUssTUFBTSxpQkFBa0IyQixFQUFFd3JFLEdBQUcsT0FBT3pyRSxHQUFHLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssWUFBWSxJQUFLLGdCQUFnQixJQUFLLGdCQUFnQixJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixPQUFNLEVBQUcsUUFBUSxPQUFNLEdBQUksSUFBSTByRSxHQUFHLEtBQUssU0FBU0MsR0FBRzNyRSxHQUE2RixPQUExRkEsRUFBRUEsRUFBRW1MLFFBQVFuTCxFQUFFNHJFLFlBQVlqaUUsUUFBU2tpRSwwQkFBMEI3ckUsRUFBRUEsRUFBRTZyRSx5QkFBZ0MsSUFBSTdyRSxFQUFFMG5FLFNBQVMxbkUsRUFBRThyRSxXQUFXOXJFLEVBQUUsSUFBSStyRSxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUNwYyxTQUFTQyxHQUFHbHNFLEdBQUcsR0FBR0EsRUFBRW1zRSxHQUFHbnNFLEdBQUcsQ0FBQyxHQUFHLG1CQUFvQityRSxHQUFHLE1BQU1uSSxNQUFNaitELEVBQUUsTUFBTSxJQUFJMUYsRUFBRUQsRUFBRW9zRSxVQUFVbnNFLElBQUlBLEVBQUVvc0UsR0FBR3BzRSxHQUFHOHJFLEdBQUcvckUsRUFBRW9zRSxVQUFVcHNFLEVBQUU4akIsS0FBSzdqQixLQUFLLFNBQVNxc0UsR0FBR3RzRSxHQUFHZ3NFLEdBQUdDLEdBQUdBLEdBQUcxdEUsS0FBS3lCLEdBQUdpc0UsR0FBRyxDQUFDanNFLEdBQUdnc0UsR0FBR2hzRSxFQUFFLFNBQVN1c0UsS0FBSyxHQUFHUCxHQUFHLENBQUMsSUFBSWhzRSxFQUFFZ3NFLEdBQUcvckUsRUFBRWdzRSxHQUFvQixHQUFqQkEsR0FBR0QsR0FBRyxLQUFLRSxHQUFHbHNFLEdBQU1DLEVBQUUsSUFBSUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFaUUsT0FBT2xFLElBQUlrc0UsR0FBR2pzRSxFQUFFRCxLQUFLLFNBQVN3c0UsR0FBR3hzRSxFQUFFQyxHQUFHLE9BQU9ELEVBQUVDLEdBQUcsU0FBU3dzRSxNQUFNLElBQUlDLElBQUcsRUFBRyxTQUFTQyxHQUFHM3NFLEVBQUVDLEVBQUUwSCxHQUFHLEdBQUcra0UsR0FBRyxPQUFPMXNFLEVBQUVDLEVBQUUwSCxHQUFHK2tFLElBQUcsRUFBRyxJQUFJLE9BQU9GLEdBQUd4c0UsRUFBRUMsRUFBRTBILEdBQUcsUUFBVytrRSxJQUFHLEdBQUcsT0FBT1YsSUFBSSxPQUFPQyxNQUFHUSxLQUFLRixPQUMzYSxTQUFTSyxHQUFHNXNFLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUzSCxFQUFFb3NFLFVBQVUsR0FBRyxPQUFPemtFLEVBQUUsT0FBTyxLQUFLLElBQUlDLEVBQUV5a0UsR0FBRzFrRSxHQUFHLEdBQUcsT0FBT0MsRUFBRSxPQUFPLEtBQUtELEVBQUVDLEVBQUUzSCxHQUFHRCxFQUFFLE9BQU9DLEdBQUcsSUFBSyxVQUFVLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssdUJBQXVCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLGNBQWMsSUFBSyxxQkFBcUIsSUFBSyxZQUFZLElBQUssbUJBQW1CLElBQUssZ0JBQWdCMkgsR0FBR0EsRUFBRXcrRCxZQUFxQngrRCxJQUFJLFlBQWI1SCxFQUFFQSxFQUFFOGpCLE9BQXVCLFVBQVU5akIsR0FBRyxXQUFXQSxHQUFHLGFBQWFBLElBQUlBLEdBQUc0SCxFQUFFLE1BQU01SCxFQUFFLFFBQVFBLEdBQUUsRUFBRyxHQUFHQSxFQUFFLE9BQU8sS0FBSyxHQUFHMkgsR0FBRyxtQkFDbGVBLEVBQUUsTUFBTWk4RCxNQUFNaitELEVBQUUsSUFBSTFGLFNBQVMwSCxJQUFJLE9BQU9BLEVBQUUsSUFBSWtsRSxJQUFHLEVBQUcsR0FBR3pMLEVBQUcsSUFBSSxJQUFJMEwsR0FBRyxHQUFHMWtFLE9BQU9nUyxlQUFlMHlELEdBQUcsVUFBVSxDQUFDL3VFLElBQUksV0FBVzh1RSxJQUFHLEtBQU1sakUsT0FBTzBOLGlCQUFpQixPQUFPeTFELEdBQUdBLElBQUluakUsT0FBTzJOLG9CQUFvQixPQUFPdzFELEdBQUdBLElBQUksTUFBTTlzRSxJQUFHNnNFLElBQUcsRUFBRyxTQUFTRSxHQUFHL3NFLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxFQUFFaXJELEVBQUVDLEVBQUVDLEVBQUU1NEMsR0FBRyxJQUFJNjRDLEVBQUVyeUQsTUFBTThHLFVBQVU0OUMsTUFBTTcvQyxLQUFLaXVCLFVBQVUsR0FBRyxJQUFJdjBCLEVBQUV5MEIsTUFBTS9zQixFQUFFb3NELEdBQUcsTUFBTS80QyxHQUFHamUsS0FBS2l3RSxRQUFRaHlELElBQUksSUFBSWl5RCxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsQ0FBQ0wsUUFBUSxTQUFTaHRFLEdBQUdpdEUsSUFBRyxFQUFHQyxHQUFHbHRFLElBQUksU0FBU3N0RSxHQUFHdHRFLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxFQUFFaXJELEVBQUVDLEVBQUVDLEVBQUU1NEMsR0FBRyt4RCxJQUFHLEVBQUdDLEdBQUcsS0FBS0gsR0FBR3I0QyxNQUFNMjRDLEdBQUc3NEMsV0FDdlYsU0FBUys0QyxHQUFHdnRFLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTJILEVBQUUzSCxFQUFFLEdBQUdBLEVBQUV3dEUsVUFBVSxLQUFLdnRFLEVBQUVxa0QsUUFBUXJrRCxFQUFFQSxFQUFFcWtELFdBQVcsQ0FBQ3RrRCxFQUFFQyxFQUFFLEdBQU8sSUFBYSxNQUFqQkEsRUFBRUQsR0FBU3l0RSxTQUFjOWxFLEVBQUUxSCxFQUFFcWtELFFBQVF0a0QsRUFBRUMsRUFBRXFrRCxhQUFhdGtELEdBQUcsT0FBTyxJQUFJQyxFQUFFa2tFLElBQUl4OEQsRUFBRSxLQUFLLFNBQVMrbEUsR0FBRzF0RSxHQUFHLEdBQUcsS0FBS0EsRUFBRW1rRSxJQUFJLENBQUMsSUFBSWxrRSxFQUFFRCxFQUFFMnRFLGNBQXNFLEdBQXhELE9BQU8xdEUsR0FBa0IsUUFBZEQsRUFBRUEsRUFBRXd0RSxhQUFxQnZ0RSxFQUFFRCxFQUFFMnRFLGVBQW1CLE9BQU8xdEUsRUFBRSxPQUFPQSxFQUFFMnRFLFdBQVcsT0FBTyxLQUFLLFNBQVNDLEdBQUc3dEUsR0FBRyxHQUFHdXRFLEdBQUd2dEUsS0FBS0EsRUFBRSxNQUFNNGpFLE1BQU1qK0QsRUFBRSxNQUVwUyxTQUFTbW9FLEdBQUc5dEUsR0FBVyxPQUFPLFFBQWZBLEVBRHROLFNBQVlBLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXd0RSxVQUFVLElBQUl2dEUsRUFBRSxDQUFTLEdBQUcsUUFBWEEsRUFBRXN0RSxHQUFHdnRFLElBQWUsTUFBTTRqRSxNQUFNaitELEVBQUUsTUFBTSxPQUFPMUYsSUFBSUQsRUFBRSxLQUFLQSxFQUFFLElBQUksSUFBSTJILEVBQUUzSCxFQUFFNEgsRUFBRTNILElBQUksQ0FBQyxJQUFJMEksRUFBRWhCLEVBQUUyOEMsT0FBTyxHQUFHLE9BQU8zN0MsRUFBRSxNQUFNLElBQUlpckQsRUFBRWpyRCxFQUFFNmtFLFVBQVUsR0FBRyxPQUFPNVosRUFBRSxDQUFZLEdBQUcsUUFBZGhzRCxFQUFFZSxFQUFFMjdDLFFBQW1CLENBQUMzOEMsRUFBRUMsRUFBRSxTQUFTLE1BQU0sR0FBR2UsRUFBRXVwQixRQUFRMGhDLEVBQUUxaEMsTUFBTSxDQUFDLElBQUkwaEMsRUFBRWpyRCxFQUFFdXBCLE1BQU0waEMsR0FBRyxDQUFDLEdBQUdBLElBQUlqc0QsRUFBRSxPQUFPa21FLEdBQUdsbEUsR0FBRzNJLEVBQUUsR0FBRzR6RCxJQUFJaHNELEVBQUUsT0FBT2ltRSxHQUFHbGxFLEdBQUcxSSxFQUFFMnpELEVBQUVBLEVBQUVtYSxRQUFRLE1BQU1uSyxNQUFNaitELEVBQUUsTUFBTyxHQUFHZ0MsRUFBRTI4QyxTQUFTMThDLEVBQUUwOEMsT0FBTzM4QyxFQUFFZ0IsRUFBRWYsRUFBRWdzRCxNQUFNLENBQUMsSUFBSSxJQUFJQyxHQUFFLEVBQUdDLEVBQUVuckQsRUFBRXVwQixNQUFNNGhDLEdBQUcsQ0FBQyxHQUFHQSxJQUFJbnNELEVBQUUsQ0FBQ2tzRCxHQUFFLEVBQUdsc0QsRUFBRWdCLEVBQUVmLEVBQUVnc0QsRUFBRSxNQUFNLEdBQUdFLElBQUlsc0QsRUFBRSxDQUFDaXNELEdBQUUsRUFBR2pzRCxFQUFFZSxFQUFFaEIsRUFBRWlzRCxFQUFFLE1BQU1FLEVBQUVBLEVBQUVpYSxRQUFRLElBQUlsYSxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRTFoQyxNQUFNNGhDLEdBQUcsQ0FBQyxHQUFHQSxJQUM1Zm5zRCxFQUFFLENBQUNrc0QsR0FBRSxFQUFHbHNELEVBQUVpc0QsRUFBRWhzRCxFQUFFZSxFQUFFLE1BQU0sR0FBR21yRCxJQUFJbHNELEVBQUUsQ0FBQ2lzRCxHQUFFLEVBQUdqc0QsRUFBRWdzRCxFQUFFanNELEVBQUVnQixFQUFFLE1BQU1tckQsRUFBRUEsRUFBRWlhLFFBQVEsSUFBSWxhLEVBQUUsTUFBTStQLE1BQU1qK0QsRUFBRSxPQUFRLEdBQUdnQyxFQUFFNmxFLFlBQVk1bEUsRUFBRSxNQUFNZzhELE1BQU1qK0QsRUFBRSxNQUFPLEdBQUcsSUFBSWdDLEVBQUV3OEQsSUFBSSxNQUFNUCxNQUFNaitELEVBQUUsTUFBTSxPQUFPZ0MsRUFBRXlrRSxVQUFVaC9ELFVBQVV6RixFQUFFM0gsRUFBRUMsRUFBbUIrdEUsQ0FBR2h1RSxJQUFtQml1RSxHQUFHanVFLEdBQUcsS0FBSyxTQUFTaXVFLEdBQUdqdUUsR0FBRyxHQUFHLElBQUlBLEVBQUVta0UsS0FBSyxJQUFJbmtFLEVBQUVta0UsSUFBSSxPQUFPbmtFLEVBQUUsSUFBSUEsRUFBRUEsRUFBRWt5QixNQUFNLE9BQU9seUIsR0FBRyxDQUFDLElBQUlDLEVBQUVndUUsR0FBR2p1RSxHQUFHLEdBQUcsT0FBT0MsRUFBRSxPQUFPQSxFQUFFRCxFQUFFQSxFQUFFK3RFLFFBQVEsT0FBTyxLQUN0WCxJQUFJRyxHQUFHcE4sRUFBR3FOLDBCQUEwQkMsR0FBR3ROLEVBQUd1Tix3QkFBd0JDLEdBQUd4TixFQUFHeU4scUJBQXFCQyxHQUFHMU4sRUFBRzJOLHNCQUFzQkMsR0FBRTVOLEVBQUc2TixhQUFhQyxHQUFHOU4sRUFBRytOLGlDQUFpQ0MsR0FBR2hPLEVBQUdpTywyQkFBMkJDLEdBQUdsTyxFQUFHbU8sOEJBQThCQyxHQUFHcE8sRUFBR3FPLHdCQUF3QkMsR0FBR3RPLEVBQUd1TyxxQkFBcUJDLEdBQUd4TyxFQUFHeU8sc0JBQXNCQyxHQUFHLEtBQUtDLEdBQUcsS0FDblZDLEdBQUdodEUsS0FBS2l0RSxNQUFNanRFLEtBQUtpdEUsTUFBaUMsU0FBWTN2RSxHQUFVLE9BQU8sSUFBZEEsS0FBSyxHQUFlLEdBQUcsSUFBSTR2RSxHQUFHNXZFLEdBQUc2dkUsR0FBRyxHQUFHLEdBQTlFRCxHQUFHbHRFLEtBQUtvdEUsSUFBSUQsR0FBR250RSxLQUFLcXRFLElBQWdFQyxHQUFHLEdBQUdDLEdBQUcsUUFDN0gsU0FBU0MsR0FBR2x3RSxHQUFHLE9BQU9BLEdBQUdBLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLE9BQVMsUUFBRkEsRUFBVSxLQUFLLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLE9BQVMsVUFBRkEsRUFBWSxLQUFLLFVBQVUsT0FBTyxVQUFVLEtBQUssVUFBVSxPQUFPLFVBQVUsS0FBSyxVQUFVLE9BQU8sVUFBVSxLQUFLLFdBQVcsT0FBTyxXQUN6Z0IsUUFBUSxPQUFPQSxHQUFHLFNBQVNtd0UsR0FBR253RSxFQUFFQyxHQUFHLElBQUkwSCxFQUFFM0gsRUFBRW93RSxhQUFhLEdBQUcsSUFBSXpvRSxFQUFFLE9BQU8sRUFBRSxJQUFJQyxFQUFFLEVBQUVlLEVBQUUzSSxFQUFFcXdFLGVBQWV6YyxFQUFFNXpELEVBQUVzd0UsWUFBWXpjLEVBQUksVUFBRmxzRCxFQUFZLEdBQUcsSUFBSWtzRCxFQUFFLENBQUMsSUFBSUMsRUFBRUQsR0FBR2xyRCxFQUFFLElBQUltckQsRUFBRWxzRCxFQUFFc29FLEdBQUdwYyxHQUFTLElBQUxGLEdBQUdDLEtBQVVqc0QsRUFBRXNvRSxHQUFHdGMsU0FBaUIsSUFBUEMsRUFBRWxzRCxHQUFHZ0IsR0FBUWYsRUFBRXNvRSxHQUFHcmMsR0FBRyxJQUFJRCxJQUFJaHNELEVBQUVzb0UsR0FBR3RjLElBQUksR0FBRyxJQUFJaHNELEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSTNILEdBQUdBLElBQUkySCxHQUFHLElBQUszSCxFQUFFMEksTUFBS0EsRUFBRWYsR0FBR0EsS0FBRWdzRCxFQUFFM3pELEdBQUdBLElBQVEsS0FBSzBJLEdBQUcsSUFBTyxRQUFGaXJELElBQVksT0FBTzN6RCxFQUEwQyxHQUF4QyxJQUFPLEVBQUYySCxLQUFPQSxHQUFLLEdBQUZELEdBQTRCLEtBQXRCMUgsRUFBRUQsRUFBRXV3RSxnQkFBd0IsSUFBSXZ3RSxFQUFFQSxFQUFFd3dFLGNBQWN2d0UsR0FBRzJILEVBQUUsRUFBRTNILEdBQWMwSSxFQUFFLElBQWJoQixFQUFFLEdBQUcrbkUsR0FBR3p2RSxJQUFVMkgsR0FBRzVILEVBQUUySCxHQUFHMUgsSUFBSTBJLEVBQUUsT0FBT2YsRUFDdGMsU0FBUzZvRSxHQUFHendFLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPQyxFQUFFLElBQUksS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLE9BQU9BLEVBQUUsSUFBdUosUUFBUSxPQUFPLEdBQ25OLFNBQVN5d0UsR0FBRzF3RSxHQUFnQyxPQUFPLElBQXBDQSxHQUFrQixXQUFoQkEsRUFBRW93RSxjQUFzQ3B3RSxFQUFJLFdBQUZBLEVBQWEsV0FBVyxFQUFFLFNBQVMyd0UsS0FBSyxJQUFJM3dFLEVBQUVnd0UsR0FBb0MsT0FBMUIsSUFBUSxTQUFmQSxLQUFLLE1BQXFCQSxHQUFHLElBQVdod0UsRUFBRSxTQUFTNHdFLEdBQUc1d0UsR0FBRyxJQUFJLElBQUlDLEVBQUUsR0FBRzBILEVBQUUsRUFBRSxHQUFHQSxFQUFFQSxJQUFJMUgsRUFBRTFCLEtBQUt5QixHQUFHLE9BQU9DLEVBQzFhLFNBQVM0d0UsR0FBRzd3RSxFQUFFQyxFQUFFMEgsR0FBRzNILEVBQUVvd0UsY0FBY253RSxFQUFFLFlBQVlBLElBQUlELEVBQUVxd0UsZUFBZSxFQUFFcndFLEVBQUVzd0UsWUFBWSxJQUFHdHdFLEVBQUVBLEVBQUU4d0UsWUFBVzd3RSxFQUFFLEdBQUd5dkUsR0FBR3p2RSxJQUFRMEgsRUFDeEgsU0FBU29wRSxHQUFHL3dFLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUzSCxFQUFFdXdFLGdCQUFnQnR3RSxFQUFFLElBQUlELEVBQUVBLEVBQUV3d0UsY0FBYzdvRSxHQUFHLENBQUMsSUFBSUMsRUFBRSxHQUFHOG5FLEdBQUcvbkUsR0FBR2dCLEVBQUUsR0FBR2YsRUFBRWUsRUFBRTFJLEVBQUVELEVBQUU0SCxHQUFHM0gsSUFBSUQsRUFBRTRILElBQUkzSCxHQUFHMEgsSUFBSWdCLEdBQUcsSUFBSXFvRSxHQUFFLEVBQUUsU0FBU0MsR0FBR2p4RSxHQUFTLE9BQU8sR0FBYkEsSUFBSUEsR0FBYSxFQUFFQSxFQUFFLElBQU8sVUFBRkEsR0FBYSxHQUFHLFVBQVUsRUFBRSxFQUFFLElBQUlreEUsR0FBR0MsR0FBR0MsR0FBR0MsR0FBR0MsR0FBR0MsSUFBRyxFQUFHQyxHQUFHLEdBQUdDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsSUFBSTl6RSxJQUFJK3pFLEdBQUcsSUFBSS96RSxJQUFJZzBFLEdBQUcsR0FBR0MsR0FBRyw2UEFBNlAxdUUsTUFBTSxLQUNoaUIsU0FBUzJ1RSxHQUFHaHlFLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFVBQVUsSUFBSyxXQUFXeXhFLEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFlBQVlDLEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFdBQVdDLEdBQUcsS0FBSyxNQUFNLElBQUssY0FBYyxJQUFLLGFBQWFDLEdBQUdqOUQsT0FBTzFVLEVBQUVneUUsV0FBVyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCSixHQUFHbDlELE9BQU8xVSxFQUFFZ3lFLFlBQ3hTLFNBQVNDLEdBQUdseUUsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLEVBQUVpckQsR0FBRyxPQUFHLE9BQU81ekQsR0FBR0EsRUFBRTBxRCxjQUFja0osR0FBUzV6RCxFQUFFLENBQUNteUUsVUFBVWx5RSxFQUFFbXlFLGFBQWF6cUUsRUFBRTBxRSxpQkFBaUJ6cUUsRUFBRThpRCxZQUFZa0osRUFBRTBlLGlCQUFpQixDQUFDM3BFLElBQUksT0FBTzFJLEdBQVksUUFBUkEsRUFBRWtzRSxHQUFHbHNFLEtBQWFreEUsR0FBR2x4RSxHQUFJRCxJQUFFQSxFQUFFcXlFLGtCQUFrQnpxRSxFQUFFM0gsRUFBRUQsRUFBRXN5RSxpQkFBaUIsT0FBTzNwRSxJQUFJLElBQUkxSSxFQUFFM0IsUUFBUXFLLElBQUkxSSxFQUFFMUIsS0FBS29LLEdBQVUzSSxHQUVuUixTQUFTdXlFLEdBQUd2eUUsR0FBRyxJQUFJQyxFQUFFdXlFLEdBQUd4eUUsRUFBRW1MLFFBQVEsR0FBRyxPQUFPbEwsRUFBRSxDQUFDLElBQUkwSCxFQUFFNGxFLEdBQUd0dEUsR0FBRyxHQUFHLE9BQU8wSCxFQUFFLEdBQVcsTUFBUjFILEVBQUUwSCxFQUFFdzhELE1BQVksR0FBVyxRQUFSbGtFLEVBQUV5dEUsR0FBRy9sRSxJQUE0RCxPQUEvQzNILEVBQUVteUUsVUFBVWx5RSxPQUFFcXhFLEdBQUd0eEUsRUFBRXl5RSxVQUFTLFdBQVdyQixHQUFHenBFLFdBQWtCLEdBQUcsSUFBSTFILEdBQUcwSCxFQUFFeWtFLFVBQVVoL0QsUUFBUXVnRSxjQUFjK0UsYUFBbUUsWUFBckQxeUUsRUFBRW15RSxVQUFVLElBQUl4cUUsRUFBRXc4RCxJQUFJeDhELEVBQUV5a0UsVUFBVXVHLGNBQWMsTUFBYTN5RSxFQUFFbXlFLFVBQVUsS0FDOVMsU0FBU1MsR0FBRzV5RSxHQUFHLEdBQUcsT0FBT0EsRUFBRW15RSxVQUFVLE9BQU0sRUFBRyxJQUFJLElBQUlseUUsRUFBRUQsRUFBRXN5RSxpQkFBaUIsRUFBRXJ5RSxFQUFFaUUsUUFBUSxDQUFDLElBQUl5RCxFQUFFa3JFLEdBQUc3eUUsRUFBRW95RSxhQUFhcHlFLEVBQUVxeUUsaUJBQWlCcHlFLEVBQUUsR0FBR0QsRUFBRTBxRCxhQUFhLEdBQUcsT0FBTy9pRCxFQUFpRyxPQUFlLFFBQVIxSCxFQUFFa3NFLEdBQUd4a0UsS0FBYXdwRSxHQUFHbHhFLEdBQUdELEVBQUVteUUsVUFBVXhxRSxHQUFFLEVBQTNILElBQUlDLEVBQUUsSUFBdEJELEVBQUUzSCxFQUFFMHFELGFBQXdCaG1ELFlBQVlpRCxFQUFFbWMsS0FBS25jLEdBQUcrakUsR0FBRzlqRSxFQUFFRCxFQUFFd0QsT0FBTzhLLGNBQWNyTyxHQUFHOGpFLEdBQUcsS0FBMER6ckUsRUFBRTZ5RSxRQUFRLE9BQU0sRUFBRyxTQUFTQyxHQUFHL3lFLEVBQUVDLEVBQUUwSCxHQUFHaXJFLEdBQUc1eUUsSUFBSTJILEVBQUVnTixPQUFPMVUsR0FBRyxTQUFTK3lFLEtBQUt6QixJQUFHLEVBQUcsT0FBT0UsSUFBSW1CLEdBQUduQixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSWtCLEdBQUdsQixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSWlCLEdBQUdqQixNQUFNQSxHQUFHLE1BQU1DLEdBQUcveEUsUUFBUWt6RSxJQUFJbEIsR0FBR2h5RSxRQUFRa3pFLElBQ2hmLFNBQVNFLEdBQUdqekUsRUFBRUMsR0FBR0QsRUFBRW15RSxZQUFZbHlFLElBQUlELEVBQUVteUUsVUFBVSxLQUFLWixLQUFLQSxJQUFHLEVBQUd6USxFQUFHcU4sMEJBQTBCck4sRUFBR3FPLHdCQUF3QjZELE1BQ3ZILFNBQVNFLEdBQUdsekUsR0FBRyxTQUFTQyxFQUFFQSxHQUFHLE9BQU9nekUsR0FBR2h6RSxFQUFFRCxHQUFHLEdBQUcsRUFBRXd4RSxHQUFHdHRFLE9BQU8sQ0FBQyt1RSxHQUFHekIsR0FBRyxHQUFHeHhFLEdBQUcsSUFBSSxJQUFJMkgsRUFBRSxFQUFFQSxFQUFFNnBFLEdBQUd0dEUsT0FBT3lELElBQUksQ0FBQyxJQUFJQyxFQUFFNHBFLEdBQUc3cEUsR0FBR0MsRUFBRXVxRSxZQUFZbnlFLElBQUk0SCxFQUFFdXFFLFVBQVUsT0FBK0YsSUFBeEYsT0FBT1YsSUFBSXdCLEdBQUd4QixHQUFHenhFLEdBQUcsT0FBTzB4RSxJQUFJdUIsR0FBR3ZCLEdBQUcxeEUsR0FBRyxPQUFPMnhFLElBQUlzQixHQUFHdEIsR0FBRzN4RSxHQUFHNHhFLEdBQUcveEUsUUFBUUksR0FBRzR4RSxHQUFHaHlFLFFBQVFJLEdBQU8wSCxFQUFFLEVBQUVBLEVBQUVtcUUsR0FBRzV0RSxPQUFPeUQsS0FBSUMsRUFBRWtxRSxHQUFHbnFFLElBQUt3cUUsWUFBWW55RSxJQUFJNEgsRUFBRXVxRSxVQUFVLE1BQU0sS0FBSyxFQUFFTCxHQUFHNXRFLFFBQWlCLFFBQVJ5RCxFQUFFbXFFLEdBQUcsSUFBWUssV0FBWUksR0FBRzVxRSxHQUFHLE9BQU9BLEVBQUV3cUUsV0FBV0wsR0FBR2dCLFFBQVEsSUFBSUssR0FBRzFRLEVBQUcyUSx3QkFBd0JDLElBQUcsRUFDNWEsU0FBU0MsR0FBR3R6RSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxJQUFJZSxFQUFFcW9FLEdBQUVwZCxFQUFFdWYsR0FBR242RCxXQUFXbTZELEdBQUduNkQsV0FBVyxLQUFLLElBQUlnNEQsR0FBRSxFQUFFdUMsR0FBR3Z6RSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxRQUFRb3BFLEdBQUVyb0UsRUFBRXdxRSxHQUFHbjZELFdBQVc0NkMsR0FBRyxTQUFTNGYsR0FBR3h6RSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxJQUFJZSxFQUFFcW9FLEdBQUVwZCxFQUFFdWYsR0FBR242RCxXQUFXbTZELEdBQUduNkQsV0FBVyxLQUFLLElBQUlnNEQsR0FBRSxFQUFFdUMsR0FBR3Z6RSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxRQUFRb3BFLEdBQUVyb0UsRUFBRXdxRSxHQUFHbjZELFdBQVc0NkMsR0FDL04sU0FBUzJmLEdBQUd2ekUsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUcsR0FBR3lyRSxHQUFHLENBQUMsSUFBSTFxRSxFQUFFa3FFLEdBQUc3eUUsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUcsR0FBRyxPQUFPZSxFQUFFOHFFLEdBQUd6ekUsRUFBRUMsRUFBRTJILEVBQUU4ckUsR0FBRy9yRSxHQUFHcXFFLEdBQUdoeUUsRUFBRTRILFFBQVEsR0FOdEYsU0FBWTVILEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHLE9BQU8xSSxHQUFHLElBQUssVUFBVSxPQUFPd3hFLEdBQUdTLEdBQUdULEdBQUd6eEUsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLElBQUcsRUFBRyxJQUFLLFlBQVksT0FBTytvRSxHQUFHUSxHQUFHUixHQUFHMXhFLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU9ncEUsR0FBR08sR0FBR1AsR0FBRzN4RSxFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsSUFBRyxFQUFHLElBQUssY0FBYyxJQUFJaXJELEVBQUVqckQsRUFBRXNwRSxVQUFrRCxPQUF4Q0wsR0FBR2owRSxJQUFJaTJELEVBQUVzZSxHQUFHTixHQUFHN3pFLElBQUk2MUQsSUFBSSxLQUFLNXpELEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxLQUFVLEVBQUcsSUFBSyxvQkFBb0IsT0FBT2lyRCxFQUFFanJELEVBQUVzcEUsVUFBVUosR0FBR2wwRSxJQUFJaTJELEVBQUVzZSxHQUFHTCxHQUFHOXpFLElBQUk2MUQsSUFBSSxLQUFLNXpELEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxLQUFJLEVBQUcsT0FBTSxFQU14UWdyRSxDQUFHaHJFLEVBQUUzSSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBR0EsRUFBRWdzRSx1QkFBdUIsR0FBRzVCLEdBQUdoeUUsRUFBRTRILEdBQUssRUFBRjNILElBQU0sRUFBRTh4RSxHQUFHenpFLFFBQVEwQixHQUFHLENBQUMsS0FBSyxPQUFPMkksR0FBRyxDQUFDLElBQUlpckQsRUFBRXVZLEdBQUd4akUsR0FBMEQsR0FBdkQsT0FBT2lyRCxHQUFHc2QsR0FBR3RkLEdBQWlCLFFBQWRBLEVBQUVpZixHQUFHN3lFLEVBQUVDLEVBQUUwSCxFQUFFQyxLQUFhNnJFLEdBQUd6ekUsRUFBRUMsRUFBRTJILEVBQUU4ckUsR0FBRy9yRSxHQUFNaXNELElBQUlqckQsRUFBRSxNQUFNQSxFQUFFaXJELEVBQUUsT0FBT2pyRCxHQUFHZixFQUFFZ3NFLHVCQUF1QkgsR0FBR3p6RSxFQUFFQyxFQUFFMkgsRUFBRSxLQUFLRCxJQUFJLElBQUkrckUsR0FBRyxLQUNwVSxTQUFTYixHQUFHN3lFLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUEyQixHQUF4QjhyRSxHQUFHLEtBQXdCLFFBQVgxekUsRUFBRXd5RSxHQUFWeHlFLEVBQUUyckUsR0FBRy9qRSxLQUF1QixHQUFXLFFBQVIzSCxFQUFFc3RFLEdBQUd2dEUsSUFBWUEsRUFBRSxVQUFVLEdBQVcsTUFBUjJILEVBQUUxSCxFQUFFa2tFLEtBQVcsQ0FBUyxHQUFHLFFBQVhua0UsRUFBRTB0RSxHQUFHenRFLElBQWUsT0FBT0QsRUFBRUEsRUFBRSxVQUFVLEdBQUcsSUFBSTJILEVBQUUsQ0FBQyxHQUFHMUgsRUFBRW1zRSxVQUFVaC9ELFFBQVF1Z0UsY0FBYytFLGFBQWEsT0FBTyxJQUFJenlFLEVBQUVra0UsSUFBSWxrRSxFQUFFbXNFLFVBQVV1RyxjQUFjLEtBQUszeUUsRUFBRSxVQUFVQyxJQUFJRCxJQUFJQSxFQUFFLE1BQVcsT0FBTDB6RSxHQUFHMXpFLEVBQVMsS0FDelMsU0FBU2d6QixHQUFHaHpCLEdBQUcsT0FBT0EsR0FBRyxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssUUFBUSxJQUFLLGNBQWMsSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFdBQVcsSUFBSyxXQUFXLElBQUssVUFBVSxJQUFLLFlBQVksSUFBSyxPQUFPLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxRQUFRLElBQUssVUFBVSxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssUUFBUSxJQUFLLFlBQVksSUFBSyxVQUFVLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSyxPQUFPLElBQUssZ0JBQWdCLElBQUssY0FBYyxJQUFLLFlBQVksSUFBSyxhQUFhLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLGNBQWMsSUFBSyxXQUFXLElBQUssYUFBYSxJQUFLLGVBQWUsSUFBSyxTQUFTLElBQUssa0JBQWtCLElBQUssWUFBWSxJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLG9CQUFvQixJQUFLLGFBQWEsSUFBSyxZQUFZLElBQUssY0FBYyxJQUFLLE9BQU8sSUFBSyxtQkFBbUIsSUFBSyxRQUFRLElBQUssYUFBYSxJQUFLLFdBQVcsSUFBSyxTQUFTLElBQUssY0FBYyxPQUFPLEVBQUUsSUFBSyxPQUFPLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGNBQWMsSUFBSyxhQUFhLElBQUssY0FBYyxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssWUFBWSxJQUFLLFFBQVEsSUFBSyxhQUFhLElBQUssYUFBYSxJQUFLLGVBQWUsSUFBSyxlQUFlLE9BQU8sRUFDcHFDLElBQUssVUFBVSxPQUFPNHVFLE1BQU0sS0FBS0UsR0FBRyxPQUFPLEVBQUUsS0FBS0UsR0FBRyxPQUFPLEVBQUUsS0FBS0UsR0FBRyxLQUFLRSxHQUFHLE9BQU8sR0FBRyxLQUFLRSxHQUFHLE9BQU8sVUFBVSxRQUFRLE9BQU8sR0FBRyxRQUFRLE9BQU8sSUFBSSxJQUFJdUUsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxLQUFLLEdBQUdELEdBQUcsT0FBT0EsR0FBRyxJQUFJL3pFLEVBQWtCNEgsRUFBaEIzSCxFQUFFNnpFLEdBQUduc0UsRUFBRTFILEVBQUVpRSxPQUFTeUUsRUFBRSxVQUFVa3JFLEdBQUdBLEdBQUd4eUUsTUFBTXd5RSxHQUFHbk4sWUFBWTlTLEVBQUVqckQsRUFBRXpFLE9BQU8sSUFBSWxFLEVBQUUsRUFBRUEsRUFBRTJILEdBQUcxSCxFQUFFRCxLQUFLMkksRUFBRTNJLEdBQUdBLEtBQUssSUFBSTZ6RCxFQUFFbHNELEVBQUUzSCxFQUFFLElBQUk0SCxFQUFFLEVBQUVBLEdBQUdpc0QsR0FBRzV6RCxFQUFFMEgsRUFBRUMsS0FBS2UsRUFBRWlyRCxFQUFFaHNELEdBQUdBLEtBQUssT0FBT21zRSxHQUFHcHJFLEVBQUV5OUMsTUFBTXBtRCxFQUFFLEVBQUU0SCxFQUFFLEVBQUVBLE9BQUUsR0FDalksU0FBU3FzRSxHQUFHajBFLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWswRSxRQUErRSxNQUF2RSxhQUFhbDBFLEVBQWdCLEtBQWJBLEVBQUVBLEVBQUVtMEUsV0FBZ0IsS0FBS2wwRSxJQUFJRCxFQUFFLElBQUtBLEVBQUVDLEVBQUUsS0FBS0QsSUFBSUEsRUFBRSxJQUFXLElBQUlBLEdBQUcsS0FBS0EsRUFBRUEsRUFBRSxFQUFFLFNBQVNvMEUsS0FBSyxPQUFNLEVBQUcsU0FBU0MsS0FBSyxPQUFNLEVBQzFLLFNBQVNDLEdBQUd0MEUsR0FBRyxTQUFTQyxFQUFFQSxFQUFFMkgsRUFBRWUsRUFBRWlyRCxFQUFFQyxHQUE2RyxJQUFJLElBQUlsc0QsS0FBbEg1SyxLQUFLdzNFLFdBQVd0MEUsRUFBRWxELEtBQUt5M0UsWUFBWTdyRSxFQUFFNUwsS0FBSyttQixLQUFLbGMsRUFBRTdLLEtBQUsydEQsWUFBWWtKLEVBQUU3MkQsS0FBS29PLE9BQU8wb0QsRUFBRTkyRCxLQUFLMDNFLGNBQWMsS0FBa0J6MEUsRUFBRUEsRUFBRXFJLGVBQWVWLEtBQUsxSCxFQUFFRCxFQUFFMkgsR0FBRzVLLEtBQUs0SyxHQUFHMUgsRUFBRUEsRUFBRTJ6RCxHQUFHQSxFQUFFanNELElBQWdJLE9BQTVINUssS0FBSzIzRSxvQkFBb0IsTUFBTTlnQixFQUFFK2dCLGlCQUFpQi9nQixFQUFFK2dCLGtCQUFpQixJQUFLL2dCLEVBQUVnaEIsYUFBYVIsR0FBR0MsR0FBR3QzRSxLQUFLODNFLHFCQUFxQlIsR0FBVXQzRSxLQUMxRSxPQUQrRXMzRCxFQUFFcDBELEVBQUV1SSxVQUFVLENBQUNzc0UsZUFBZSxXQUFXLzNFLEtBQUs0M0Usa0JBQWlCLEVBQUcsSUFBSTMwRSxFQUFFakQsS0FBSzJ0RCxZQUFZMXFELElBQUlBLEVBQUU4MEUsZUFBZTkwRSxFQUFFODBFLGlCQUFpQixrQkFBbUI5MEUsRUFBRTQwRSxjQUM3ZTUwRSxFQUFFNDBFLGFBQVksR0FBSTczRSxLQUFLMjNFLG1CQUFtQk4sS0FBS1IsZ0JBQWdCLFdBQVcsSUFBSTV6RSxFQUFFakQsS0FBSzJ0RCxZQUFZMXFELElBQUlBLEVBQUU0ekUsZ0JBQWdCNXpFLEVBQUU0ekUsa0JBQWtCLGtCQUFtQjV6RSxFQUFFKzBFLGVBQWUvMEUsRUFBRSswRSxjQUFhLEdBQUloNEUsS0FBSzgzRSxxQkFBcUJULEtBQUtZLFFBQVEsYUFBYUMsYUFBYWIsS0FBWW4wRSxFQUNoUixJQUFvTGkxRSxHQUFHQyxHQUFHQyxHQUF0TEMsR0FBRyxDQUFDQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLFNBQVN6MUUsR0FBRyxPQUFPQSxFQUFFeTFFLFdBQVc3ckIsS0FBS2pqRCxPQUFPZ3VFLGlCQUFpQixFQUFFZSxVQUFVLEdBQUdDLEdBQUdyQixHQUFHZSxJQUFJTyxHQUFHdmhCLEVBQUUsR0FBR2doQixHQUFHLENBQUNRLEtBQUssRUFBRS8vRCxPQUFPLElBQUlnZ0UsR0FBR3hCLEdBQUdzQixJQUFhRyxHQUFHMWhCLEVBQUUsR0FBR3VoQixHQUFHLENBQUNJLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRTd0QyxNQUFNLEVBQUVDLE1BQU0sRUFBRTZ0QyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLGlCQUFpQkMsR0FBR3h0QyxPQUFPLEVBQUV5TCxRQUFRLEVBQUVnaUMsY0FBYyxTQUFTMTJFLEdBQUcsWUFBTyxJQUFTQSxFQUFFMDJFLGNBQWMxMkUsRUFBRTIyRSxjQUFjMzJFLEVBQUU0ckUsV0FBVzVyRSxFQUFFNDJFLFVBQVU1MkUsRUFBRTIyRSxZQUFZMzJFLEVBQUUwMkUsZUFBZUcsVUFBVSxTQUFTNzJFLEdBQUcsTUFBRyxjQUMzZUEsRUFBU0EsRUFBRTYyRSxXQUFVNzJFLElBQUlvMUUsS0FBS0EsSUFBSSxjQUFjcDFFLEVBQUU4akIsTUFBTW94RCxHQUFHbDFFLEVBQUVnMkUsUUFBUVosR0FBR1ksUUFBUWIsR0FBR24xRSxFQUFFaTJFLFFBQVFiLEdBQUdhLFNBQVNkLEdBQUdELEdBQUcsRUFBRUUsR0FBR3AxRSxHQUFVazFFLEtBQUk0QixVQUFVLFNBQVM5MkUsR0FBRyxNQUFNLGNBQWNBLEVBQUVBLEVBQUU4MkUsVUFBVTNCLE1BQU00QixHQUFHekMsR0FBR3lCLElBQWlDaUIsR0FBRzFDLEdBQTdCamdCLEVBQUUsR0FBRzBoQixHQUFHLENBQUNrQixhQUFhLEtBQTRDQyxHQUFHNUMsR0FBOUJqZ0IsRUFBRSxHQUFHdWhCLEdBQUcsQ0FBQ2MsY0FBYyxLQUEwRVMsR0FBRzdDLEdBQTVEamdCLEVBQUUsR0FBR2doQixHQUFHLENBQUMrQixjQUFjLEVBQUVDLFlBQVksRUFBRUMsY0FBYyxLQUFjQyxHQUFHbGpCLEVBQUUsR0FBR2doQixHQUFHLENBQUNtQyxjQUFjLFNBQVN4M0UsR0FBRyxNQUFNLGtCQUFrQkEsRUFBRUEsRUFBRXczRSxjQUFjN3RFLE9BQU82dEUsaUJBQWlCQyxHQUFHbkQsR0FBR2lELElBQXlCRyxHQUFHcEQsR0FBckJqZ0IsRUFBRSxHQUFHZ2hCLEdBQUcsQ0FBQy8zRSxLQUFLLEtBQWNxNkUsR0FBRyxDQUFDQyxJQUFJLFNBQ3hmQyxTQUFTLElBQUlDLEtBQUssWUFBWUMsR0FBRyxVQUFVQyxNQUFNLGFBQWFDLEtBQUssWUFBWUMsSUFBSSxTQUFTQyxJQUFJLEtBQUtDLEtBQUssY0FBY0MsS0FBSyxjQUFjQyxPQUFPLGFBQWFDLGdCQUFnQixnQkFBZ0JDLEdBQUcsQ0FBQyxFQUFFLFlBQVksRUFBRSxNQUFNLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFRLEdBQUcsVUFBVSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsV0FBVyxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsU0FBUyxHQUFHLFdBQVcsR0FBRyxNQUFNLEdBQUcsT0FBTyxHQUFHLFlBQVksR0FBRyxVQUFVLEdBQUcsYUFBYSxHQUFHLFlBQVksR0FBRyxTQUFTLEdBQUcsU0FBUyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQ3RmLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFFBQVFDLEdBQUcsQ0FBQ0MsSUFBSSxTQUFTQyxRQUFRLFVBQVVDLEtBQUssVUFBVUMsTUFBTSxZQUFZLFNBQVNDLEdBQUc5NEUsR0FBRyxJQUFJQyxFQUFFbEQsS0FBSzJ0RCxZQUFZLE9BQU96cUQsRUFBRXUyRSxpQkFBaUJ2MkUsRUFBRXUyRSxpQkFBaUJ4MkUsTUFBSUEsRUFBRXk0RSxHQUFHejRFLE9BQU1DLEVBQUVELEdBQU0sU0FBU3kyRSxLQUFLLE9BQU9xQyxHQUM5UixJQUFJQyxHQUFHMWtCLEVBQUUsR0FBR3VoQixHQUFHLENBQUM5c0UsSUFBSSxTQUFTOUksR0FBRyxHQUFHQSxFQUFFOEksSUFBSSxDQUFDLElBQUk3SSxFQUFFMDNFLEdBQUczM0UsRUFBRThJLE1BQU05SSxFQUFFOEksSUFBSSxHQUFHLGlCQUFpQjdJLEVBQUUsT0FBT0EsRUFBRSxNQUFNLGFBQWFELEVBQUU4akIsS0FBYyxNQUFSOWpCLEVBQUVpMEUsR0FBR2owRSxJQUFVLFFBQVFnNUUsT0FBT0MsYUFBYWo1RSxHQUFJLFlBQVlBLEVBQUU4akIsTUFBTSxVQUFVOWpCLEVBQUU4akIsS0FBSzAwRCxHQUFHeDRFLEVBQUVrMEUsVUFBVSxlQUFlLElBQUlnRixLQUFLLEVBQUVDLFNBQVMsRUFBRS9DLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRXIxRSxPQUFPLEVBQUVrNEUsT0FBTyxFQUFFNUMsaUJBQWlCQyxHQUFHdEMsU0FBUyxTQUFTbjBFLEdBQUcsTUFBTSxhQUFhQSxFQUFFOGpCLEtBQUttd0QsR0FBR2owRSxHQUFHLEdBQUdrMEUsUUFBUSxTQUFTbDBFLEdBQUcsTUFBTSxZQUFZQSxFQUFFOGpCLE1BQU0sVUFBVTlqQixFQUFFOGpCLEtBQUs5akIsRUFBRWswRSxRQUFRLEdBQUdtRixNQUFNLFNBQVNyNUUsR0FBRyxNQUFNLGFBQzdlQSxFQUFFOGpCLEtBQUttd0QsR0FBR2owRSxHQUFHLFlBQVlBLEVBQUU4akIsTUFBTSxVQUFVOWpCLEVBQUU4akIsS0FBSzlqQixFQUFFazBFLFFBQVEsS0FBS29GLEdBQUdoRixHQUFHeUUsSUFBaUlRLEdBQUdqRixHQUE3SGpnQixFQUFFLEdBQUcwaEIsR0FBRyxDQUFDOUQsVUFBVSxFQUFFdHNELE1BQU0sRUFBRUUsT0FBTyxFQUFFMnpELFNBQVMsRUFBRUMsbUJBQW1CLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVyakUsWUFBWSxFQUFFc2pFLFVBQVUsS0FBbUlDLEdBQUd4RixHQUFySGpnQixFQUFFLEdBQUd1aEIsR0FBRyxDQUFDeHRDLFFBQVEsRUFBRTJ4QyxjQUFjLEVBQUVyeEMsZUFBZSxFQUFFNHRDLE9BQU8sRUFBRUMsUUFBUSxFQUFFSCxRQUFRLEVBQUVDLFNBQVMsRUFBRUcsaUJBQWlCQyxNQUEwRXVELEdBQUcxRixHQUEzRGpnQixFQUFFLEdBQUdnaEIsR0FBRyxDQUFDeFQsYUFBYSxFQUFFd1YsWUFBWSxFQUFFQyxjQUFjLEtBQWMyQyxHQUFHNWxCLEVBQUUsR0FBRzBoQixHQUFHLENBQUNtRSxPQUFPLFNBQVNsNkUsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUVrNkUsT0FBTyxnQkFBZ0JsNkUsR0FBR0EsRUFBRW02RSxZQUFZLEdBQ2xmQyxPQUFPLFNBQVNwNkUsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUVvNkUsT0FBTyxnQkFBZ0JwNkUsR0FBR0EsRUFBRXE2RSxZQUFZLGVBQWVyNkUsR0FBR0EsRUFBRXM2RSxXQUFXLEdBQUdDLE9BQU8sRUFBRUMsVUFBVSxJQUFJQyxHQUFHbkcsR0FBRzJGLElBQUlTLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJQyxHQUFHdlosR0FBSSxxQkFBcUJ6M0QsT0FBT2l4RSxHQUFHLEtBQUt4WixHQUFJLGlCQUFpQnQ1RCxXQUFXOHlFLEdBQUc5eUUsU0FBUyt5RSxjQUFjLElBQUlDLEdBQUcxWixHQUFJLGNBQWN6M0QsU0FBU2l4RSxHQUFHRyxHQUFHM1osS0FBTXVaLElBQUlDLElBQUksRUFBRUEsSUFBSSxJQUFJQSxJQUFJSSxHQUFHaEMsT0FBT0MsYUFBYSxJQUFJZ0MsSUFBRyxFQUMxVyxTQUFTQyxHQUFHbDdFLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVEsT0FBTyxJQUFJMDZFLEdBQUdwOEUsUUFBUTJCLEVBQUVpMEUsU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNajBFLEVBQUVpMEUsUUFBUSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxPQUFNLEVBQUcsUUFBUSxPQUFNLEdBQUksU0FBU2lILEdBQUduN0UsR0FBYyxNQUFNLGlCQUFqQkEsRUFBRUEsRUFBRThWLFNBQWtDLFNBQVM5VixFQUFFQSxFQUFFMUMsS0FBSyxLQUFLLElBQUk4OUUsSUFBRyxFQUUxUUMsR0FBRyxDQUFDNzJELE9BQU0sRUFBRzgyRCxNQUFLLEVBQUdDLFVBQVMsRUFBRyxrQkFBaUIsRUFBR0MsT0FBTSxFQUFHQyxPQUFNLEVBQUc3MkQsUUFBTyxFQUFHODJELFVBQVMsRUFBR0MsT0FBTSxFQUFHQyxRQUFPLEVBQUdDLEtBQUksRUFBR0MsTUFBSyxFQUFHeDBFLE1BQUssRUFBR3kwRSxLQUFJLEVBQUdDLE1BQUssR0FBSSxTQUFTQyxHQUFHajhFLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRTJrRSxVQUFVM2tFLEVBQUUya0UsU0FBUzNxRCxjQUFjLE1BQU0sVUFBVS9aLElBQUlvN0UsR0FBR3I3RSxFQUFFOGpCLE1BQU0sYUFBYTdqQixFQUFRLFNBQVNpOEUsR0FBR2w4RSxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRzBrRSxHQUFHMWtFLEdBQXNCLEdBQW5CM0gsRUFBRWs4RSxHQUFHbDhFLEVBQUUsYUFBZ0JpRSxTQUFTeUQsRUFBRSxJQUFJZ3VFLEdBQUcsV0FBVyxTQUFTLEtBQUtodUUsRUFBRUMsR0FBRzVILEVBQUV6QixLQUFLLENBQUN5WCxNQUFNck8sRUFBRXkwRSxVQUFVbjhFLEtBQUssSUFBSW84RSxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHdjhFLEdBQUd3OEUsR0FBR3g4RSxFQUFFLEdBQUcsU0FBU3k4RSxHQUFHejhFLEdBQWUsR0FBR2tsRSxFQUFUd1gsR0FBRzE4RSxJQUFZLE9BQU9BLEVBQ25lLFNBQVMyOEUsR0FBRzM4RSxFQUFFQyxHQUFHLEdBQUcsV0FBV0QsRUFBRSxPQUFPQyxFQUFFLElBQUkyOEUsSUFBRyxFQUFHLEdBQUd4YixFQUFHLENBQUMsSUFBSXliLEdBQUcsR0FBR3piLEVBQUcsQ0FBQyxJQUFJMGIsR0FBRyxZQUFZaDFFLFNBQVMsSUFBSWcxRSxHQUFHLENBQUMsSUFBSUMsR0FBR2oxRSxTQUFTQyxjQUFjLE9BQU9nMUUsR0FBRzcyQyxhQUFhLFVBQVUsV0FBVzQyQyxHQUFHLG1CQUFvQkMsR0FBR0MsUUFBUUgsR0FBR0MsUUFBUUQsSUFBRyxFQUFHRCxHQUFHQyxNQUFNLzBFLFNBQVMreUUsY0FBYyxFQUFFL3lFLFNBQVMreUUsY0FBYyxTQUFTb0MsS0FBS1osS0FBS0EsR0FBR2EsWUFBWSxtQkFBbUJDLElBQUliLEdBQUdELEdBQUcsTUFBTSxTQUFTYyxHQUFHbjlFLEdBQUcsR0FBRyxVQUFVQSxFQUFFNmhFLGNBQWM0YSxHQUFHSCxJQUFJLENBQUMsSUFBSXI4RSxFQUFFLEdBQUdpOEUsR0FBR2o4RSxFQUFFcThFLEdBQUd0OEUsRUFBRTJyRSxHQUFHM3JFLElBQUkyc0UsR0FBRzRQLEdBQUd0OEUsSUFDNWIsU0FBU205RSxHQUFHcDlFLEVBQUVDLEVBQUUwSCxHQUFHLFlBQVkzSCxHQUFHaTlFLEtBQVVYLEdBQUczMEUsR0FBUjAwRSxHQUFHcDhFLEdBQVVvOUUsWUFBWSxtQkFBbUJGLEtBQUssYUFBYW45RSxHQUFHaTlFLEtBQUssU0FBU0ssR0FBR3Q5RSxHQUFHLEdBQUcsb0JBQW9CQSxHQUFHLFVBQVVBLEdBQUcsWUFBWUEsRUFBRSxPQUFPeThFLEdBQUdILElBQUksU0FBU2lCLEdBQUd2OUUsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEVBQUUsT0FBT3k4RSxHQUFHeDhFLEdBQUcsU0FBU3U5RSxHQUFHeDlFLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxHQUFHLFdBQVdBLEVBQUUsT0FBT3k4RSxHQUFHeDhFLEdBQW1FLElBQUl3OUUsR0FBRyxtQkFBb0JyMUUsT0FBT3FqRSxHQUFHcmpFLE9BQU9xakUsR0FBNUcsU0FBWXpyRSxFQUFFQyxHQUFHLE9BQU9ELElBQUlDLElBQUksSUFBSUQsR0FBRyxFQUFFQSxHQUFJLEVBQUVDLElBQUlELEdBQUlBLEdBQUdDLEdBQUlBLEdBQ3JXLFNBQVN5OUUsR0FBRzE5RSxFQUFFQyxHQUFHLEdBQUd3OUUsR0FBR3o5RSxFQUFFQyxHQUFHLE9BQU0sRUFBRyxHQUFHLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLGlCQUFrQkMsR0FBRyxPQUFPQSxFQUFFLE9BQU0sRUFBRyxJQUFJMEgsRUFBRVMsT0FBT3VQLEtBQUszWCxHQUFHNEgsRUFBRVEsT0FBT3VQLEtBQUsxWCxHQUFHLEdBQUcwSCxFQUFFekQsU0FBUzBELEVBQUUxRCxPQUFPLE9BQU0sRUFBRyxJQUFJMEQsRUFBRSxFQUFFQSxFQUFFRCxFQUFFekQsT0FBTzBELElBQUksQ0FBQyxJQUFJZSxFQUFFaEIsRUFBRUMsR0FBRyxJQUFJeTVELEVBQUc5NkQsS0FBS3RHLEVBQUUwSSxLQUFLODBFLEdBQUd6OUUsRUFBRTJJLEdBQUcxSSxFQUFFMEksSUFBSSxPQUFNLEVBQUcsT0FBTSxFQUFHLFNBQVNnMUUsR0FBRzM5RSxHQUFHLEtBQUtBLEdBQUdBLEVBQUVtbkUsWUFBWW5uRSxFQUFFQSxFQUFFbW5FLFdBQVcsT0FBT25uRSxFQUNyVSxTQUFTNDlFLEdBQUc1OUUsRUFBRUMsR0FBRyxJQUF3QjJILEVBQXBCRCxFQUFFZzJFLEdBQUczOUUsR0FBTyxJQUFKQSxFQUFFLEVBQVkySCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFKy9ELFNBQVMsQ0FBMEIsR0FBekI5L0QsRUFBRTVILEVBQUUySCxFQUFFKytELFlBQVl4aUUsT0FBVWxFLEdBQUdDLEdBQUcySCxHQUFHM0gsRUFBRSxNQUFNLENBQUMydUIsS0FBS2puQixFQUFFdEQsT0FBT3BFLEVBQUVELEdBQUdBLEVBQUU0SCxFQUFFNUgsRUFBRSxDQUFDLEtBQUsySCxHQUFHLENBQUMsR0FBR0EsRUFBRWsyRSxZQUFZLENBQUNsMkUsRUFBRUEsRUFBRWsyRSxZQUFZLE1BQU03OUUsRUFBRTJILEVBQUVBLEVBQUVta0UsV0FBV25rRSxPQUFFLEVBQU9BLEVBQUVnMkUsR0FBR2gyRSxJQUFJLFNBQVNtMkUsR0FBRzk5RSxFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRTBuRSxZQUFZem5FLEdBQUcsSUFBSUEsRUFBRXluRSxTQUFTb1csR0FBRzk5RSxFQUFFQyxFQUFFNnJFLFlBQVksYUFBYTlyRSxFQUFFQSxFQUFFKzlFLFNBQVM5OUUsS0FBR0QsRUFBRXNnRCw0QkFBd0QsR0FBN0J0Z0QsRUFBRXNnRCx3QkFBd0JyZ0QsTUFDbFosU0FBUys5RSxLQUFLLElBQUksSUFBSWgrRSxFQUFFMkosT0FBTzFKLEVBQUVtbEUsSUFBS25sRSxhQUFhRCxFQUFFaStFLG1CQUFtQixDQUFDLElBQUksSUFBSXQyRSxFQUFFLGlCQUFrQjFILEVBQUVpK0UsY0FBYy9FLFNBQVNnRixLQUFLLE1BQU12MkUsR0FBR0QsR0FBRSxFQUFHLElBQUdBLEVBQXlCLE1BQU0xSCxFQUFFbWxFLEdBQS9CcGxFLEVBQUVDLEVBQUVpK0UsZUFBZ0NwMkUsVUFBVSxPQUFPN0gsRUFBRSxTQUFTbStFLEdBQUdwK0UsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFMmtFLFVBQVUza0UsRUFBRTJrRSxTQUFTM3FELGNBQWMsT0FBTy9aLElBQUksVUFBVUEsSUFBSSxTQUFTRCxFQUFFOGpCLE1BQU0sV0FBVzlqQixFQUFFOGpCLE1BQU0sUUFBUTlqQixFQUFFOGpCLE1BQU0sUUFBUTlqQixFQUFFOGpCLE1BQU0sYUFBYTlqQixFQUFFOGpCLE9BQU8sYUFBYTdqQixHQUFHLFNBQVNELEVBQUVxK0UsaUJBQ3haLFNBQVNDLEdBQUd0K0UsR0FBRyxJQUFJQyxFQUFFKzlFLEtBQUtyMkUsRUFBRTNILEVBQUV1K0UsWUFBWTMyRSxFQUFFNUgsRUFBRXcrRSxlQUFlLEdBQUd2K0UsSUFBSTBILEdBQUdBLEdBQUdBLEVBQUVvK0QsZUFBZStYLEdBQUduMkUsRUFBRW8rRCxjQUFjampCLGdCQUFnQm43QyxHQUFHLENBQUMsR0FBRyxPQUFPQyxHQUFHdzJFLEdBQUd6MkUsR0FBRyxHQUFHMUgsRUFBRTJILEVBQUUwRSxXQUFjLEtBQVJ0TSxFQUFFNEgsRUFBRWd0QyxPQUFpQjUwQyxFQUFFQyxHQUFHLG1CQUFtQjBILEVBQUVBLEVBQUU4MkUsZUFBZXgrRSxFQUFFMEgsRUFBRSsyRSxhQUFhaDhFLEtBQUtnQixJQUFJMUQsRUFBRTJILEVBQUV0RyxNQUFNNkMsYUFBYSxJQUFHbEUsR0FBR0MsRUFBRTBILEVBQUVvK0QsZUFBZWorRCxXQUFXN0gsRUFBRTArRSxhQUFhaDFFLFFBQVNpMUUsYUFBYSxDQUFDNStFLEVBQUVBLEVBQUU0K0UsZUFBZSxJQUFJajJFLEVBQUVoQixFQUFFKytELFlBQVl4aUUsT0FBTzB2RCxFQUFFbHhELEtBQUtnQixJQUFJa0UsRUFBRTBFLE1BQU0zRCxHQUFHZixPQUFFLElBQVNBLEVBQUVndEMsSUFBSWdmLEVBQUVseEQsS0FBS2dCLElBQUlrRSxFQUFFZ3RDLElBQUlqc0MsSUFBSTNJLEVBQUU2K0UsUUFBUWpyQixFQUFFaHNELElBQUllLEVBQUVmLEVBQUVBLEVBQUVnc0QsRUFBRUEsRUFBRWpyRCxHQUFHQSxFQUFFaTFFLEdBQUdqMkUsRUFBRWlzRCxHQUFHLElBQUlDLEVBQUUrcEIsR0FBR2oyRSxFQUN2ZkMsR0FBR2UsR0FBR2tyRCxJQUFJLElBQUk3ekQsRUFBRTgrRSxZQUFZOStFLEVBQUUrK0UsYUFBYXAyRSxFQUFFaW1CLE1BQU01dUIsRUFBRWcvRSxlQUFlcjJFLEVBQUV0RSxRQUFRckUsRUFBRWkvRSxZQUFZcHJCLEVBQUVqbEMsTUFBTTV1QixFQUFFay9FLGNBQWNyckIsRUFBRXh2RCxXQUFVcEUsRUFBRUEsRUFBRWsvRSxlQUFnQkMsU0FBU3oyRSxFQUFFaW1CLEtBQUtqbUIsRUFBRXRFLFFBQVFyRSxFQUFFcS9FLGtCQUFrQnpyQixFQUFFaHNELEdBQUc1SCxFQUFFcy9FLFNBQVNyL0UsR0FBR0QsRUFBRTYrRSxPQUFPaHJCLEVBQUVqbEMsS0FBS2lsQyxFQUFFeHZELFVBQVVwRSxFQUFFcy9FLE9BQU8xckIsRUFBRWpsQyxLQUFLaWxDLEVBQUV4dkQsUUFBUXJFLEVBQUVzL0UsU0FBU3IvRSxLQUFVLElBQUxBLEVBQUUsR0FBT0QsRUFBRTJILEVBQUUzSCxFQUFFQSxFQUFFOHJFLFlBQVksSUFBSTlyRSxFQUFFMG5FLFVBQVV6bkUsRUFBRTFCLEtBQUssQ0FBQ2QsUUFBUXVDLEVBQUVtbUIsS0FBS25tQixFQUFFK2lELFdBQVcvOEIsSUFBSWhtQixFQUFFaWpELFlBQW1ELElBQXZDLG1CQUFvQnQ3QyxFQUFFeVUsT0FBT3pVLEVBQUV5VSxRQUFZelUsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRWlFLE9BQU95RCxLQUFJM0gsRUFBRUMsRUFBRTBILElBQUtsSyxRQUFRc2xELFdBQVcvaUQsRUFBRW1tQixLQUFLbm1CLEVBQUV2QyxRQUFRd2xELFVBQVVqakQsRUFBRWdtQixLQUNyZixJQUFJdzVELEdBQUdwZSxHQUFJLGlCQUFpQnQ1RCxVQUFVLElBQUlBLFNBQVMreUUsYUFBYTRFLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLElBQUcsRUFDM0YsU0FBU0MsR0FBRzcvRSxFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFRCxFQUFFZ0MsU0FBU2hDLEVBQUVBLEVBQUVHLFNBQVMsSUFBSUgsRUFBRSsvRCxTQUFTLy9ELEVBQUVBLEVBQUVvK0QsY0FBYzZaLElBQUksTUFBTUgsSUFBSUEsS0FBS3JhLEVBQUd4OUQsS0FBc0NBLEVBQTVCLG1CQUFMQSxFQUFFNjNFLEtBQXlCckIsR0FBR3gyRSxHQUFLLENBQUMwRSxNQUFNMUUsRUFBRTYyRSxlQUFlN3BDLElBQUlodEMsRUFBRTgyRSxjQUF5RixDQUFDSyxZQUEzRW4zRSxHQUFHQSxFQUFFbStELGVBQWVuK0QsRUFBRW0rRCxjQUFjNFksYUFBYWgxRSxRQUFRaTFFLGdCQUErQkcsV0FBV0MsYUFBYXAzRSxFQUFFbzNFLGFBQWFDLFVBQVVyM0UsRUFBRXEzRSxVQUFVQyxZQUFZdDNFLEVBQUVzM0UsYUFBY1MsSUFBSWpDLEdBQUdpQyxHQUFHLzNFLEtBQUsrM0UsR0FBRy8zRSxFQUFzQixHQUFwQkEsRUFBRXUwRSxHQUFHdUQsR0FBRyxhQUFnQng3RSxTQUFTakUsRUFBRSxJQUFJMDFFLEdBQUcsV0FBVyxTQUFTLEtBQUsxMUUsRUFBRTBILEdBQUczSCxFQUFFekIsS0FBSyxDQUFDeVgsTUFBTS9WLEVBQUVtOEUsVUFBVXgwRSxJQUFJM0gsRUFBRWtMLE9BQU9zMEUsTUFDamYsU0FBU0ssR0FBRzkvRSxFQUFFQyxHQUFHLElBQUkwSCxFQUFFLEdBQWtGLE9BQS9FQSxFQUFFM0gsRUFBRWdhLGVBQWUvWixFQUFFK1osY0FBY3JTLEVBQUUsU0FBUzNILEdBQUcsU0FBU0MsRUFBRTBILEVBQUUsTUFBTTNILEdBQUcsTUFBTUMsRUFBUzBILEVBQUUsSUFBSW80RSxHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxHQUFHQyxHQUFHLEdBQ25GLFNBQVNDLEdBQUd0Z0YsR0FBRyxHQUFHb2dGLEdBQUdwZ0YsR0FBRyxPQUFPb2dGLEdBQUdwZ0YsR0FBRyxJQUFJKy9FLEdBQUcvL0UsR0FBRyxPQUFPQSxFQUFFLElBQVkySCxFQUFSMUgsRUFBRTgvRSxHQUFHLy9FLEdBQUssSUFBSTJILEtBQUsxSCxFQUFFLEdBQUdBLEVBQUVvSSxlQUFlVixJQUFJQSxLQUFLMDRFLEdBQUcsT0FBT0QsR0FBR3BnRixHQUFHQyxFQUFFMEgsR0FBRyxPQUFPM0gsRUFBOVhvaEUsSUFBS2lmLEdBQUd2NEUsU0FBU0MsY0FBYyxPQUFPa0IsTUFBTSxtQkFBbUJVLGdCQUFnQm8yRSxHQUFHQyxhQUFhbGpGLGlCQUFpQmlqRixHQUFHRSxtQkFBbUJuakYsaUJBQWlCaWpGLEdBQUdHLGVBQWVwakYsV0FBVyxvQkFBb0I2TSxlQUFlbzJFLEdBQUdJLGNBQWNubkUsWUFBd0osSUFBSXVuRSxHQUFHRCxHQUFHLGdCQUFnQkUsR0FBR0YsR0FBRyxzQkFBc0JHLEdBQUdILEdBQUcsa0JBQWtCSSxHQUFHSixHQUFHLGlCQUFpQkssR0FBRyxJQUFJN2lGLElBQUk4aUYsR0FBRyxzbUJBQXNtQnY5RSxNQUFNLEtBQy9sQyxTQUFTdzlFLEdBQUc3Z0YsRUFBRUMsR0FBRzBnRixHQUFHaGpGLElBQUlxQyxFQUFFQyxHQUFHaWhFLEVBQUdqaEUsRUFBRSxDQUFDRCxJQUFJLElBQUksSUFBSThnRixHQUFHLEVBQUVBLEdBQUdGLEdBQUcxOEUsT0FBTzQ4RSxLQUFLLENBQUMsSUFBSUMsR0FBR0gsR0FBR0UsSUFBMkRELEdBQXBERSxHQUFHL21FLGNBQXVELE1BQXRDK21FLEdBQUcsR0FBR3o2QyxjQUFjeTZDLEdBQUczNkIsTUFBTSxLQUFrQnk2QixHQUFHTixHQUFHLGtCQUFrQk0sR0FBR0wsR0FBRyx3QkFBd0JLLEdBQUdKLEdBQUcsb0JBQW9CSSxHQUFHLFdBQVcsaUJBQWlCQSxHQUFHLFVBQVUsV0FBV0EsR0FBRyxXQUFXLFVBQVVBLEdBQUdILEdBQUcsbUJBQW1CdmYsRUFBRyxlQUFlLENBQUMsV0FBVyxjQUFjQSxFQUFHLGVBQWUsQ0FBQyxXQUFXLGNBQWNBLEVBQUcsaUJBQWlCLENBQUMsYUFBYSxnQkFDN2NBLEVBQUcsaUJBQWlCLENBQUMsYUFBYSxnQkFBZ0JELEVBQUcsV0FBVyxvRUFBb0U3OUQsTUFBTSxNQUFNNjlELEVBQUcsV0FBVyx1RkFBdUY3OUQsTUFBTSxNQUFNNjlELEVBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLFdBQVcsWUFBWSxVQUFVQSxFQUFHLG1CQUFtQiwyREFBMkQ3OUQsTUFBTSxNQUFNNjlELEVBQUcscUJBQXFCLDZEQUE2RDc5RCxNQUFNLE1BQy9mNjlELEVBQUcsc0JBQXNCLDhEQUE4RDc5RCxNQUFNLE1BQU0sSUFBSTI5RSxHQUFHLDZOQUE2TjM5RSxNQUFNLEtBQUs0OUUsR0FBRyxJQUFJOWdGLElBQUksMENBQTBDa0QsTUFBTSxLQUFLbWdCLE9BQU93OUQsS0FDelosU0FBU0UsR0FBR2xoRixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFNUgsRUFBRThqQixNQUFNLGdCQUFnQjlqQixFQUFFeTBFLGNBQWM5c0UsRUFsRGpFLFNBQVkzSCxFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsRUFBRWlyRCxFQUFFQyxFQUFFQyxFQUFFNTRDLEdBQTRCLEdBQXpCb3lELEdBQUc1NEMsTUFBTTMzQixLQUFLeTNCLFdBQWN5NEMsR0FBRyxDQUFDLElBQUdBLEdBQWdDLE1BQU1ySixNQUFNaitELEVBQUUsTUFBMUMsSUFBSW91RCxFQUFFbVosR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQThCQyxLQUFLQSxJQUFHLEVBQUdDLEdBQUdyWixJQWtEakVvdEIsQ0FBR3Y1RSxFQUFFM0gsT0FBRSxFQUFPRCxHQUFHQSxFQUFFeTBFLGNBQWMsS0FDcEcsU0FBUytILEdBQUd4OEUsRUFBRUMsR0FBR0EsRUFBRSxJQUFPLEVBQUZBLEdBQUssSUFBSSxJQUFJMEgsRUFBRSxFQUFFQSxFQUFFM0gsRUFBRWtFLE9BQU95RCxJQUFJLENBQUMsSUFBSUMsRUFBRTVILEVBQUUySCxHQUFHZ0IsRUFBRWYsRUFBRW9PLE1BQU1wTyxFQUFFQSxFQUFFdzBFLFVBQVVwOEUsRUFBRSxDQUFDLElBQUk0ekQsT0FBRSxFQUFPLEdBQUczekQsRUFBRSxJQUFJLElBQUk0ekQsRUFBRWpzRCxFQUFFMUQsT0FBTyxFQUFFLEdBQUcydkQsRUFBRUEsSUFBSSxDQUFDLElBQUlDLEVBQUVsc0QsRUFBRWlzRCxHQUFHMzRDLEVBQUU0NEMsRUFBRXRrQyxTQUFTdWtDLEVBQUVELEVBQUUyZ0IsY0FBMkIsR0FBYjNnQixFQUFFQSxFQUFFOXFCLFNBQVk5dEIsSUFBSTA0QyxHQUFHanJELEVBQUVrc0UsdUJBQXVCLE1BQU03MEUsRUFBRWtoRixHQUFHdjRFLEVBQUVtckQsRUFBRUMsR0FBR0gsRUFBRTE0QyxPQUFPLElBQUkyNEMsRUFBRSxFQUFFQSxFQUFFanNELEVBQUUxRCxPQUFPMnZELElBQUksQ0FBb0QsR0FBNUMzNEMsR0FBUDQ0QyxFQUFFbHNELEVBQUVpc0QsSUFBT3JrQyxTQUFTdWtDLEVBQUVELEVBQUUyZ0IsY0FBYzNnQixFQUFFQSxFQUFFOXFCLFNBQVk5dEIsSUFBSTA0QyxHQUFHanJELEVBQUVrc0UsdUJBQXVCLE1BQU03MEUsRUFBRWtoRixHQUFHdjRFLEVBQUVtckQsRUFBRUMsR0FBR0gsRUFBRTE0QyxJQUFJLEdBQUdpeUQsR0FBRyxNQUFNbnRFLEVBQUVvdEUsR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQUtwdEUsRUFDMWEsU0FBU29oRixHQUFFcGhGLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUxSCxFQUFFb2hGLFNBQUksSUFBUzE1RSxJQUFJQSxFQUFFMUgsRUFBRW9oRixJQUFJLElBQUlsaEYsS0FBSyxJQUFJeUgsRUFBRTVILEVBQUUsV0FBVzJILEVBQUVqSyxJQUFJa0ssS0FBSzA1RSxHQUFHcmhGLEVBQUVELEVBQUUsR0FBRSxHQUFJMkgsRUFBRThDLElBQUk3QyxJQUFJLFNBQVMyNUUsR0FBR3ZoRixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFLEVBQUUzSCxJQUFJMkgsR0FBRyxHQUFHMDVFLEdBQUczNUUsRUFBRTNILEVBQUU0SCxFQUFFM0gsR0FBRyxJQUFJdWhGLEdBQUcsa0JBQWtCOStFLEtBQUsrK0UsU0FBU3ZhLFNBQVMsSUFBSTlnQixNQUFNLEdBQUcsU0FBU3M3QixHQUFHMWhGLEdBQUcsSUFBSUEsRUFBRXdoRixJQUFJLENBQUN4aEYsRUFBRXdoRixLQUFJLEVBQUd4Z0IsRUFBR25oRSxTQUFRLFNBQVNJLEdBQUcsb0JBQW9CQSxJQUFJZ2hGLEdBQUd2akYsSUFBSXVDLElBQUlzaEYsR0FBR3RoRixHQUFFLEVBQUdELEdBQUd1aEYsR0FBR3RoRixHQUFFLEVBQUdELE9BQU0sSUFBSUMsRUFBRSxJQUFJRCxFQUFFMG5FLFNBQVMxbkUsRUFBRUEsRUFBRStsRSxjQUFjLE9BQU85bEUsR0FBR0EsRUFBRXVoRixNQUFNdmhGLEVBQUV1aEYsS0FBSSxFQUFHRCxHQUFHLG1CQUFrQixFQUFHdGhGLEtBQzdhLFNBQVNxaEYsR0FBR3RoRixFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxPQUFPb3JCLEdBQUcveUIsSUFBSSxLQUFLLEVBQUUsSUFBSTBJLEVBQUUycUUsR0FBRyxNQUFNLEtBQUssRUFBRTNxRSxFQUFFNnFFLEdBQUcsTUFBTSxRQUFRN3FFLEVBQUU0cUUsR0FBRzVyRSxFQUFFZ0IsRUFBRWc1RSxLQUFLLEtBQUsxaEYsRUFBRTBILEVBQUUzSCxHQUFHMkksT0FBRSxHQUFRa2tFLElBQUksZUFBZTVzRSxHQUFHLGNBQWNBLEdBQUcsVUFBVUEsSUFBSTBJLEdBQUUsR0FBSWYsT0FBRSxJQUFTZSxFQUFFM0ksRUFBRXFYLGlCQUFpQnBYLEVBQUUwSCxFQUFFLENBQUNpNkUsU0FBUSxFQUFHOTVDLFFBQVFuL0IsSUFBSTNJLEVBQUVxWCxpQkFBaUJwWCxFQUFFMEgsR0FBRSxRQUFJLElBQVNnQixFQUFFM0ksRUFBRXFYLGlCQUFpQnBYLEVBQUUwSCxFQUFFLENBQUNtZ0MsUUFBUW4vQixJQUFJM0ksRUFBRXFYLGlCQUFpQnBYLEVBQUUwSCxHQUFFLEdBQy9VLFNBQVM4ckUsR0FBR3p6RSxFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsR0FBRyxJQUFJaXJELEVBQUVoc0QsRUFBRSxHQUFHLElBQU8sRUFBRjNILElBQU0sSUFBTyxFQUFGQSxJQUFNLE9BQU8ySCxFQUFFNUgsRUFBRSxPQUFPLENBQUMsR0FBRyxPQUFPNEgsRUFBRSxPQUFPLElBQUlpc0QsRUFBRWpzRCxFQUFFdThELElBQUksR0FBRyxJQUFJdFEsR0FBRyxJQUFJQSxFQUFFLENBQUMsSUFBSUMsRUFBRWxzRCxFQUFFd2tFLFVBQVV1RyxjQUFjLEdBQUc3ZSxJQUFJbnJELEdBQUcsSUFBSW1yRCxFQUFFNFQsVUFBVTVULEVBQUVnWSxhQUFhbmpFLEVBQUUsTUFBTSxHQUFHLElBQUlrckQsRUFBRSxJQUFJQSxFQUFFanNELEVBQUUwOEMsT0FBTyxPQUFPdVAsR0FBRyxDQUFDLElBQUkzNEMsRUFBRTI0QyxFQUFFc1EsSUFBSSxJQUFHLElBQUlqcEQsR0FBRyxJQUFJQSxNQUFLQSxFQUFFMjRDLEVBQUV1WSxVQUFVdUcsaUJBQWtCaHFFLEdBQUcsSUFBSXVTLEVBQUV3c0QsVUFBVXhzRCxFQUFFNHdELGFBQWFuakUsR0FBRSxPQUFPa3JELEVBQUVBLEVBQUV2UCxPQUFPLEtBQUssT0FBT3dQLEdBQUcsQ0FBUyxHQUFHLFFBQVhELEVBQUUyZSxHQUFHMWUsSUFBZSxPQUFlLEdBQUcsS0FBWDU0QyxFQUFFMjRDLEVBQUVzUSxNQUFjLElBQUlqcEQsRUFBRSxDQUFDdFQsRUFBRWdzRCxFQUFFQyxFQUFFLFNBQVM3ekQsRUFBRTh6RCxFQUFFQSxFQUFFZ1ksWUFBWWxrRSxFQUFFQSxFQUFFMDhDLE9BQU9xb0IsSUFBRyxXQUFXLElBQUkva0UsRUFBRWdzRCxFQUFFanJELEVBQUVnakUsR0FBR2hrRSxHQUFHa3NELEVBQUUsR0FDcGY3ekQsRUFBRSxDQUFDLElBQUk4ekQsRUFBRTZzQixHQUFHNWlGLElBQUlpQyxHQUFHLFFBQUcsSUFBUzh6RCxFQUFFLENBQUMsSUFBSTU0QyxFQUFFeTZELEdBQUdweUIsRUFBRXZqRCxFQUFFLE9BQU9BLEdBQUcsSUFBSyxXQUFXLEdBQUcsSUFBSWkwRSxHQUFHdHNFLEdBQUcsTUFBTTNILEVBQUUsSUFBSyxVQUFVLElBQUssUUFBUWtiLEVBQUVvK0QsR0FBRyxNQUFNLElBQUssVUFBVS8xQixFQUFFLFFBQVFyb0MsRUFBRWc4RCxHQUFHLE1BQU0sSUFBSyxXQUFXM3pCLEVBQUUsT0FBT3JvQyxFQUFFZzhELEdBQUcsTUFBTSxJQUFLLGFBQWEsSUFBSyxZQUFZaDhELEVBQUVnOEQsR0FBRyxNQUFNLElBQUssUUFBUSxHQUFHLElBQUl2dkUsRUFBRXNoQyxPQUFPLE1BQU1qcEMsRUFBRSxJQUFLLFdBQVcsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFlBQVksSUFBSyxVQUFVLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxjQUFja2IsRUFBRTY3RCxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssVUFBVSxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssT0FBTzc3RCxFQUMxaUI4N0QsR0FBRyxNQUFNLElBQUssY0FBYyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssYUFBYTk3RCxFQUFFNCtELEdBQUcsTUFBTSxLQUFLeUcsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUd2bEUsRUFBRWk4RCxHQUFHLE1BQU0sS0FBS3VKLEdBQUd4bEUsRUFBRTgrRCxHQUFHLE1BQU0sSUFBSyxTQUFTOStELEVBQUU0NkQsR0FBRyxNQUFNLElBQUssUUFBUTU2RCxFQUFFdS9ELEdBQUcsTUFBTSxJQUFLLE9BQU8sSUFBSyxNQUFNLElBQUssUUFBUXYvRCxFQUFFdThELEdBQUcsTUFBTSxJQUFLLG9CQUFvQixJQUFLLHFCQUFxQixJQUFLLGdCQUFnQixJQUFLLGNBQWMsSUFBSyxjQUFjLElBQUssYUFBYSxJQUFLLGNBQWMsSUFBSyxZQUFZdjhELEVBQUVxK0QsR0FBRyxJQUFJcmxCLEVBQUUsSUFBTyxFQUFGajBELEdBQUs0aEYsR0FBRzN0QixHQUFHLFdBQVdsMEQsRUFBRTlCLEVBQUVnMkQsRUFBRSxPQUFPSixFQUFFQSxFQUFFLFVBQVUsS0FBS0EsRUFBRUksRUFBRSxHQUFHLElBQUksSUFBUUQsRUFBSm4xRCxFQUFFOEksRUFBSSxPQUMvZTlJLEdBQUcsQ0FBSyxJQUFJZ2pGLEdBQVI3dEIsRUFBRW4xRCxHQUFVc3RFLFVBQXNGLEdBQTVFLElBQUluWSxFQUFFa1EsS0FBSyxPQUFPMmQsSUFBSTd0QixFQUFFNnRCLEVBQUUsT0FBTzVqRixHQUFjLE9BQVY0akYsRUFBRWxWLEdBQUc5dEUsRUFBRVosS0FBWWcyRCxFQUFFMzFELEtBQUt3akYsR0FBR2pqRixFQUFFZ2pGLEVBQUU3dEIsS0FBUzR0QixFQUFFLE1BQU0vaUYsRUFBRUEsRUFBRXdsRCxPQUFPLEVBQUU0UCxFQUFFaHdELFNBQVM0dkQsRUFBRSxJQUFJNTRDLEVBQUU0NEMsRUFBRXZRLEVBQUUsS0FBSzU3QyxFQUFFZ0IsR0FBR2tyRCxFQUFFdDFELEtBQUssQ0FBQ3lYLE1BQU04OUMsRUFBRXNvQixVQUFVbG9CLE1BQU0sR0FBRyxJQUFPLEVBQUZqMEQsR0FBSyxDQUE0RSxHQUFuQ2liLEVBQUUsYUFBYWxiLEdBQUcsZUFBZUEsS0FBdEU4ekQsRUFBRSxjQUFjOXpELEdBQUcsZ0JBQWdCQSxJQUEyQzJILElBQUkrakUsTUFBS25vQixFQUFFNTdDLEVBQUUrdUUsZUFBZS91RSxFQUFFZ3ZFLGVBQWVuRSxHQUFHanZCLEtBQUlBLEVBQUV5K0IsT0FBZ0I5bUUsR0FBRzQ0QyxLQUFHQSxFQUFFbnJELEVBQUVnQixTQUFTaEIsRUFBRUEsR0FBR21yRCxFQUFFbnJELEVBQUVvOUQsZUFBZWpTLEVBQUU2cUIsYUFBYTdxQixFQUFFbXVCLGFBQWF0NEUsT0FBVXVSLEdBQXFDQSxFQUFFdFQsRUFBaUIsUUFBZjI3QyxHQUFuQ0EsRUFBRTU3QyxFQUFFK3VFLGVBQWUvdUUsRUFBRWl2RSxXQUFrQnBFLEdBQUdqdkIsR0FBRyxRQUM5ZEEsS0FBUnMrQixFQUFFdFUsR0FBR2hxQixLQUFVLElBQUlBLEVBQUU0Z0IsS0FBSyxJQUFJNWdCLEVBQUU0Z0IsT0FBSzVnQixFQUFFLFFBQVVyb0MsRUFBRSxLQUFLcW9DLEVBQUUzN0MsR0FBS3NULElBQUlxb0MsR0FBRSxDQUFnVSxHQUEvVDJRLEVBQUU2aUIsR0FBRytLLEVBQUUsZUFBZTVqRixFQUFFLGVBQWVZLEVBQUUsUUFBVyxlQUFla0IsR0FBRyxnQkFBZ0JBLElBQUVrMEQsRUFBRXFsQixHQUFHdUksRUFBRSxpQkFBaUI1akYsRUFBRSxpQkFBaUJZLEVBQUUsV0FBVStpRixFQUFFLE1BQU0zbUUsRUFBRTQ0QyxFQUFFNG9CLEdBQUd4aEUsR0FBRys0QyxFQUFFLE1BQU0xUSxFQUFFdVEsRUFBRTRvQixHQUFHbjVCLElBQUd1USxFQUFFLElBQUlJLEVBQUU0dEIsRUFBRWhqRixFQUFFLFFBQVFvYyxFQUFFdlQsRUFBRWdCLElBQUt3QyxPQUFPMDJFLEVBQUUvdEIsRUFBRTRpQixjQUFjemlCLEVBQUU2dEIsRUFBRSxLQUFLdFAsR0FBRzdwRSxLQUFLZixLQUFJc3NELEVBQUUsSUFBSUEsRUFBRWgyRCxFQUFFWSxFQUFFLFFBQVF5a0QsRUFBRTU3QyxFQUFFZ0IsSUFBS3dDLE9BQU84b0QsRUFBRUMsRUFBRXdpQixjQUFjbUwsRUFBRUMsRUFBRTV0QixHQUFHMnRCLEVBQUVDLEVBQUs1bUUsR0FBR3FvQyxFQUFFdGpELEVBQUUsQ0FBYSxJQUFSL0IsRUFBRXFsRCxFQUFFemtELEVBQUUsRUFBTW0xRCxFQUFoQkMsRUFBRWg1QyxFQUFrQis0QyxFQUFFQSxFQUFFaXVCLEdBQUdqdUIsR0FBR24xRCxJQUFRLElBQUptMUQsRUFBRSxFQUFNNnRCLEVBQUU1akYsRUFBRTRqRixFQUFFQSxFQUFFSSxHQUFHSixHQUFHN3RCLElBQUksS0FBSyxFQUFFbjFELEVBQUVtMUQsR0FBR0MsRUFBRWd1QixHQUFHaHVCLEdBQUdwMUQsSUFBSSxLQUFLLEVBQUVtMUQsRUFBRW4xRCxHQUFHWixFQUNwZmdrRixHQUFHaGtGLEdBQUcrMUQsSUFBSSxLQUFLbjFELEtBQUssQ0FBQyxHQUFHbzFELElBQUloMkQsR0FBRyxPQUFPQSxHQUFHZzJELElBQUloMkQsRUFBRXN2RSxVQUFVLE1BQU12dEUsRUFBRWkwRCxFQUFFZ3VCLEdBQUdodUIsR0FBR2gyRCxFQUFFZ2tGLEdBQUdoa0YsR0FBR2cyRCxFQUFFLFVBQVVBLEVBQUUsS0FBSyxPQUFPaDVDLEdBQUdpbkUsR0FBR3R1QixFQUFFQyxFQUFFNTRDLEVBQUVnNUMsR0FBRSxHQUFJLE9BQU8zUSxHQUFHLE9BQU9zK0IsR0FBR00sR0FBR3R1QixFQUFFZ3VCLEVBQUV0K0IsRUFBRTJRLEdBQUUsR0FBaUUsR0FBRyxZQUExQ2g1QyxHQUFqQjQ0QyxFQUFFbHNELEVBQUU4MEUsR0FBRzkwRSxHQUFHK0IsUUFBV2c3RCxVQUFVN1EsRUFBRTZRLFNBQVMzcUQsZ0JBQStCLFVBQVVrQixHQUFHLFNBQVM0NEMsRUFBRWh3QyxLQUFLLElBQUlzK0QsRUFBRXpGLFFBQVEsR0FBR1YsR0FBR25vQixHQUFHLEdBQUc4b0IsR0FBR3dGLEVBQUU1RSxPQUFPLENBQUM0RSxFQUFFOUUsR0FBRyxJQUFJK0UsRUFBR2pGLFFBQVFsaUUsRUFBRTQ0QyxFQUFFNlEsV0FBVyxVQUFVenBELEVBQUVsQixnQkFBZ0IsYUFBYTg1QyxFQUFFaHdDLE1BQU0sVUFBVWd3QyxFQUFFaHdDLFFBQVFzK0QsRUFBRTdFLElBQ2pWLE9BRHdWNkUsSUFBSUEsRUFBRUEsRUFBRXBpRixFQUFFNEgsSUFBS3MwRSxHQUFHcm9CLEVBQUV1dUIsRUFBRXo2RSxFQUFFZ0IsSUFBVzA1RSxHQUFJQSxFQUFHcmlGLEVBQUU4ekQsRUFBRWxzRCxHQUFHLGFBQWE1SCxJQUFJcWlGLEVBQUd2dUIsRUFBRTBSLGdCQUMxZTZjLEVBQUcxYyxZQUFZLFdBQVc3UixFQUFFaHdDLE1BQU1naUQsR0FBR2hTLEVBQUUsU0FBU0EsRUFBRXp5RCxRQUFPZ2hGLEVBQUd6NkUsRUFBRTgwRSxHQUFHOTBFLEdBQUcrQixPQUFjM0osR0FBRyxJQUFLLFdBQWFpOEUsR0FBR29HLElBQUssU0FBU0EsRUFBR2hFLG1CQUFnQm9CLEdBQUc0QyxFQUFHM0MsR0FBRzkzRSxFQUFFKzNFLEdBQUcsTUFBSyxNQUFNLElBQUssV0FBV0EsR0FBR0QsR0FBR0QsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZRyxJQUFHLEVBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxVQUFVLElBQUssVUFBVUEsSUFBRyxFQUFHQyxHQUFHaHNCLEVBQUVsc0QsRUFBRWdCLEdBQUcsTUFBTSxJQUFLLGtCQUFrQixHQUFHNjJFLEdBQUcsTUFBTSxJQUFLLFVBQVUsSUFBSyxRQUFRSyxHQUFHaHNCLEVBQUVsc0QsRUFBRWdCLEdBQUcsSUFBSTI1RSxFQUFHLEdBQUczSCxHQUFHMTZFLEVBQUUsQ0FBQyxPQUFPRCxHQUFHLElBQUssbUJBQW1CLElBQUl1aUYsRUFBRyxxQkFBcUIsTUFBTXRpRixFQUFFLElBQUssaUJBQWlCc2lGLEVBQUcsbUJBQ3BlLE1BQU10aUYsRUFBRSxJQUFLLG9CQUFvQnNpRixFQUFHLHNCQUFzQixNQUFNdGlGLEVBQUVzaUYsT0FBRyxPQUFZbkgsR0FBR0YsR0FBR2w3RSxFQUFFMkgsS0FBSzQ2RSxFQUFHLG9CQUFvQixZQUFZdmlGLEdBQUcsTUFBTTJILEVBQUV1c0UsVUFBVXFPLEVBQUcsc0JBQXNCQSxJQUFLeEgsSUFBSSxPQUFPcHpFLEVBQUV5eEUsU0FBU2dDLElBQUksdUJBQXVCbUgsRUFBRyxxQkFBcUJBLEdBQUluSCxLQUFLa0gsRUFBR3RPLE9BQVlGLEdBQUcsVUFBUkQsR0FBR2xyRSxHQUFrQmtyRSxHQUFHeHlFLE1BQU13eUUsR0FBR25OLFlBQVkwVSxJQUFHLElBQWlCLEdBQVppSCxFQUFHbEcsR0FBR3YwRSxFQUFFMjZFLElBQVNyK0UsU0FBU3ErRSxFQUFHLElBQUk3SyxHQUFHNkssRUFBR3ZpRixFQUFFLEtBQUsySCxFQUFFZ0IsR0FBR2tyRCxFQUFFdDFELEtBQUssQ0FBQ3lYLE1BQU11c0UsRUFBR25HLFVBQVVpRyxLQUFLQyxHQUF3QixRQUFUQSxFQUFHbkgsR0FBR3h6RSxPQUFsQjQ2RSxFQUFHamxGLEtBQUtnbEYsTUFBMkNBLEVBQUd4SCxHQTVCaE0sU0FBWTk2RSxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxpQkFBaUIsT0FBT203RSxHQUFHbDdFLEdBQUcsSUFBSyxXQUFXLE9BQUcsS0FBS0EsRUFBRW81RSxNQUFhLE1BQUs0QixJQUFHLEVBQVVELElBQUcsSUFBSyxZQUFZLE9BQU9oN0UsRUFBRUMsRUFBRTNDLFFBQVMwOUUsSUFBSUMsR0FBRyxLQUFLajdFLEVBQUUsUUFBUSxPQUFPLE1BNEJPd2lGLENBQUd4aUYsRUFBRTJILEdBM0J6ZCxTQUFZM0gsRUFBRUMsR0FBRyxHQUFHbTdFLEdBQUcsTUFBTSxtQkFBbUJwN0UsSUFBSTI2RSxJQUFJTyxHQUFHbDdFLEVBQUVDLElBQUlELEVBQUVnMEUsS0FBS0QsR0FBR0QsR0FBR0QsR0FBRyxLQUFLdUgsSUFBRyxFQUFHcDdFLEdBQUcsS0FBSyxPQUFPQSxHQUFHLElBQUssUUFBZ1EsUUFBUSxPQUFPLEtBQTNQLElBQUssV0FBVyxLQUFLQyxFQUFFbTJFLFNBQVNuMkUsRUFBRXEyRSxRQUFRcjJFLEVBQUVzMkUsVUFBVXQyRSxFQUFFbTJFLFNBQVNuMkUsRUFBRXEyRSxPQUFPLENBQUMsR0FBR3IyRSxFQUFFd2lGLE1BQU0sRUFBRXhpRixFQUFFd2lGLEtBQUt2K0UsT0FBTyxPQUFPakUsRUFBRXdpRixLQUFLLEdBQUd4aUYsRUFBRW81RSxNQUFNLE9BQU9MLE9BQU9DLGFBQWFoNUUsRUFBRW81RSxPQUFPLE9BQU8sS0FBSyxJQUFLLGlCQUFpQixPQUFPMEIsSUFBSSxPQUFPOTZFLEVBQUVtNUUsT0FBTyxLQUFLbjVFLEVBQUUzQyxNQTJCOEdvbEYsQ0FBRzFpRixFQUFFMkgsS0FDamUsR0FEb2VDLEVBQUV1MEUsR0FBR3YwRSxFQUFFLGtCQUN2ZTFELFNBQVN5RSxFQUFFLElBQUkrdUUsR0FBRyxnQkFBZ0IsY0FBYyxLQUFLL3ZFLEVBQUVnQixHQUFHa3JELEVBQUV0MUQsS0FBSyxDQUFDeVgsTUFBTXJOLEVBQUV5ekUsVUFBVXgwRSxJQUFJZSxFQUFFckwsS0FBS2dsRixHQUFJOUYsR0FBRzNvQixFQUFFNXpELE1BQUssU0FBUzhoRixHQUFHL2hGLEVBQUVDLEVBQUUwSCxHQUFHLE1BQU0sQ0FBQzZuQixTQUFTeHZCLEVBQUVncEMsU0FBUy9vQyxFQUFFdzBFLGNBQWM5c0UsR0FBRyxTQUFTdzBFLEdBQUduOEUsRUFBRUMsR0FBRyxJQUFJLElBQUkwSCxFQUFFMUgsRUFBRSxVQUFVMkgsRUFBRSxHQUFHLE9BQU81SCxHQUFHLENBQUMsSUFBSTJJLEVBQUUzSSxFQUFFNHpELEVBQUVqckQsRUFBRXlqRSxVQUFVLElBQUl6akUsRUFBRXc3RCxLQUFLLE9BQU92USxJQUFJanJELEVBQUVpckQsRUFBWSxPQUFWQSxFQUFFZ1osR0FBRzVzRSxFQUFFMkgsS0FBWUMsRUFBRWlELFFBQVFrM0UsR0FBRy9oRixFQUFFNHpELEVBQUVqckQsSUFBYyxPQUFWaXJELEVBQUVnWixHQUFHNXNFLEVBQUVDLEtBQVkySCxFQUFFckosS0FBS3dqRixHQUFHL2hGLEVBQUU0ekQsRUFBRWpyRCxLQUFLM0ksRUFBRUEsRUFBRXNrRCxPQUFPLE9BQU8xOEMsRUFBRSxTQUFTczZFLEdBQUdsaUYsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTyxLQUFLLEdBQUdBLEVBQUVBLEVBQUVza0QsYUFBYXRrRCxHQUFHLElBQUlBLEVBQUVta0UsS0FBSyxPQUFPbmtFLEdBQUksS0FDL2MsU0FBU21pRixHQUFHbmlGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHLElBQUksSUFBSWlyRCxFQUFFM3pELEVBQUVzMEUsV0FBVzFnQixFQUFFLEdBQUcsT0FBT2xzRCxHQUFHQSxJQUFJQyxHQUFHLENBQUMsSUFBSWtzRCxFQUFFbnNELEVBQUV1VCxFQUFFNDRDLEVBQUUwWixVQUFVelosRUFBRUQsRUFBRXNZLFVBQVUsR0FBRyxPQUFPbHhELEdBQUdBLElBQUl0VCxFQUFFLE1BQU0sSUFBSWtzRCxFQUFFcVEsS0FBSyxPQUFPcFEsSUFBSUQsRUFBRUMsRUFBRXByRCxFQUFhLE9BQVZ1UyxFQUFFMHhELEdBQUdqbEUsRUFBRWlzRCxLQUFZQyxFQUFFaHBELFFBQVFrM0UsR0FBR3A2RSxFQUFFdVQsRUFBRTQ0QyxJQUFLbnJELEdBQWMsT0FBVnVTLEVBQUUweEQsR0FBR2psRSxFQUFFaXNELEtBQVlDLEVBQUV0MUQsS0FBS3dqRixHQUFHcDZFLEVBQUV1VCxFQUFFNDRDLEtBQU1uc0QsRUFBRUEsRUFBRTI4QyxPQUFPLElBQUl1UCxFQUFFM3ZELFFBQVFsRSxFQUFFekIsS0FBSyxDQUFDeVgsTUFBTS9WLEVBQUVtOEUsVUFBVXZvQixJQUFJLElBQUk4dUIsR0FBRyxTQUFTQyxHQUFHLGlCQUFpQixTQUFTQyxHQUFHN2lGLEdBQUcsT0FBTyxpQkFBa0JBLEVBQUVBLEVBQUUsR0FBR0EsR0FBR21hLFFBQVF3b0UsR0FBRyxNQUFNeG9FLFFBQVF5b0UsR0FBRyxJQUFJLFNBQVNFLEdBQUc5aUYsRUFBRUMsRUFBRTBILEdBQVcsR0FBUjFILEVBQUU0aUYsR0FBRzVpRixHQUFNNGlGLEdBQUc3aUYsS0FBS0MsR0FBRzBILEVBQUUsTUFBTWk4RCxNQUFNaitELEVBQUUsTUFBTyxTQUFTbzlFLE1BQ3plLElBQUlDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEdBQUdsakYsRUFBRUMsR0FBRyxNQUFNLGFBQWFELEdBQUcsYUFBYUEsR0FBRyxpQkFBa0JDLEVBQUUreEIsVUFBVSxpQkFBa0IveEIsRUFBRSt4QixVQUFVLGlCQUFrQi94QixFQUFFcW1FLHlCQUF5QixPQUFPcm1FLEVBQUVxbUUseUJBQXlCLE1BQU1ybUUsRUFBRXFtRSx3QkFBd0I2YyxPQUN0UCxJQUFJQyxHQUFHLG1CQUFvQnI0RCxXQUFXQSxnQkFBVyxFQUFPczRELEdBQUcsbUJBQW9CcjRELGFBQWFBLGtCQUFhLEVBQU9zNEQsR0FBRyxtQkFBb0JyK0UsUUFBUUEsYUFBUSxFQUFPcytFLEdBQUcsbUJBQW9CQyxlQUFlQSxvQkFBZSxJQUFxQkYsR0FBRyxTQUFTdGpGLEdBQUcsT0FBT3NqRixHQUFHcCtFLFFBQVEsTUFBTWpJLEtBQUsrQyxHQUFHN0MsTUFBTXNtRixLQUFLTCxHQUFHLFNBQVNLLEdBQUd6akYsR0FBRytxQixZQUFXLFdBQVcsTUFBTS9xQixLQUNoVixTQUFTMGpGLEdBQUcxakYsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRTFILEVBQUUySCxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUllLEVBQUVoQixFQUFFazJFLFlBQTZCLEdBQWpCNzlFLEVBQUVvbkUsWUFBWXovRCxHQUFNZ0IsR0FBRyxJQUFJQSxFQUFFKytELFNBQVMsR0FBWSxRQUFULy9ELEVBQUVnQixFQUFFckwsTUFBYyxDQUFDLEdBQUcsSUFBSXNLLEVBQTBCLE9BQXZCNUgsRUFBRW9uRSxZQUFZeitELFFBQUd1cUUsR0FBR2p6RSxHQUFVMkgsUUFBUSxNQUFNRCxHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBR0MsSUFBSUQsRUFBRWdCLFFBQVFoQixHQUFHdXJFLEdBQUdqekUsR0FBRyxTQUFTMGpGLEdBQUczakYsR0FBRyxLQUFLLE1BQU1BLEVBQUVBLEVBQUVBLEVBQUU2OUUsWUFBWSxDQUFDLElBQUk1OUUsRUFBRUQsRUFBRTBuRSxTQUFTLEdBQUcsSUFBSXpuRSxHQUFHLElBQUlBLEVBQUUsTUFBTSxHQUFHLElBQUlBLEVBQUUsQ0FBVSxHQUFHLE9BQVpBLEVBQUVELEVBQUUxQyxPQUFpQixPQUFPMkMsR0FBRyxPQUFPQSxFQUFFLE1BQU0sR0FBRyxPQUFPQSxFQUFFLE9BQU8sTUFBTSxPQUFPRCxFQUNoWSxTQUFTNGpGLEdBQUc1akYsR0FBR0EsRUFBRUEsRUFBRTZqRixnQkFBZ0IsSUFBSSxJQUFJNWpGLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRTBuRSxTQUFTLENBQUMsSUFBSS8vRCxFQUFFM0gsRUFBRTFDLEtBQUssR0FBRyxNQUFNcUssR0FBRyxPQUFPQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxHQUFHLElBQUkxSCxFQUFFLE9BQU9ELEVBQUVDLFFBQVEsT0FBTzBILEdBQUcxSCxJQUFJRCxFQUFFQSxFQUFFNmpGLGdCQUFnQixPQUFPLEtBQUssSUFBSUMsR0FBR3BoRixLQUFLKytFLFNBQVN2YSxTQUFTLElBQUk5Z0IsTUFBTSxHQUFHMjlCLEdBQUcsZ0JBQWdCRCxHQUFHRSxHQUFHLGdCQUFnQkYsR0FBRzlCLEdBQUcsb0JBQW9COEIsR0FBR3pDLEdBQUcsaUJBQWlCeUMsR0FBR0csR0FBRyxvQkFBb0JILEdBQUdJLEdBQUcsa0JBQWtCSixHQUNsWCxTQUFTdFIsR0FBR3h5RSxHQUFHLElBQUlDLEVBQUVELEVBQUUrakYsSUFBSSxHQUFHOWpGLEVBQUUsT0FBT0EsRUFBRSxJQUFJLElBQUkwSCxFQUFFM0gsRUFBRThyRSxXQUFXbmtFLEdBQUcsQ0FBQyxHQUFHMUgsRUFBRTBILEVBQUVxNkUsS0FBS3I2RSxFQUFFbzhFLElBQUksQ0FBZSxHQUFkcDhFLEVBQUUxSCxFQUFFdXRFLFVBQWEsT0FBT3Z0RSxFQUFFaXlCLE9BQU8sT0FBT3ZxQixHQUFHLE9BQU9BLEVBQUV1cUIsTUFBTSxJQUFJbHlCLEVBQUU0akYsR0FBRzVqRixHQUFHLE9BQU9BLEdBQUcsQ0FBQyxHQUFHMkgsRUFBRTNILEVBQUUrakYsSUFBSSxPQUFPcDhFLEVBQUUzSCxFQUFFNGpGLEdBQUc1akYsR0FBRyxPQUFPQyxFQUFNMEgsR0FBSjNILEVBQUUySCxHQUFNbWtFLFdBQVcsT0FBTyxLQUFLLFNBQVNLLEdBQUduc0UsR0FBa0IsUUFBZkEsRUFBRUEsRUFBRStqRixLQUFLL2pGLEVBQUVnaUYsTUFBYyxJQUFJaGlGLEVBQUVta0UsS0FBSyxJQUFJbmtFLEVBQUVta0UsS0FBSyxLQUFLbmtFLEVBQUVta0UsS0FBSyxJQUFJbmtFLEVBQUVta0UsSUFBSSxLQUFLbmtFLEVBQUUsU0FBUzA4RSxHQUFHMThFLEdBQUcsR0FBRyxJQUFJQSxFQUFFbWtFLEtBQUssSUFBSW5rRSxFQUFFbWtFLElBQUksT0FBT25rRSxFQUFFb3NFLFVBQVUsTUFBTXhJLE1BQU1qK0QsRUFBRSxLQUFNLFNBQVMwbUUsR0FBR3JzRSxHQUFHLE9BQU9BLEVBQUVna0YsS0FBSyxLQUFLLElBQUlHLEdBQUcsR0FBR0MsSUFBSSxFQUFFLFNBQVNDLEdBQUdya0YsR0FBRyxNQUFNLENBQUNvTixRQUFRcE4sR0FDcmUsU0FBU3NrRixHQUFFdGtGLEdBQUcsRUFBRW9rRixLQUFLcGtGLEVBQUVvTixRQUFRKzJFLEdBQUdDLElBQUlELEdBQUdDLElBQUksS0FBS0EsTUFBTSxTQUFTRyxHQUFFdmtGLEVBQUVDLEdBQUdta0YsS0FBS0QsR0FBR0MsSUFBSXBrRixFQUFFb04sUUFBUXBOLEVBQUVvTixRQUFRbk4sRUFBRSxJQUFJdWtGLEdBQUcsR0FBR0MsR0FBRUosR0FBR0csSUFBSUUsR0FBR0wsSUFBRyxHQUFJTSxHQUFHSCxHQUFHLFNBQVNJLEdBQUc1a0YsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRTNILEVBQUU4akIsS0FBSzJ0QyxhQUFhLElBQUk5cEQsRUFBRSxPQUFPNjhFLEdBQUcsSUFBSTU4RSxFQUFFNUgsRUFBRW9zRSxVQUFVLEdBQUd4a0UsR0FBR0EsRUFBRWk5RSw4Q0FBOEM1a0YsRUFBRSxPQUFPMkgsRUFBRWs5RSwwQ0FBMEMsSUFBU2x4QixFQUFManJELEVBQUUsR0FBSyxJQUFJaXJELEtBQUtqc0QsRUFBRWdCLEVBQUVpckQsR0FBRzN6RCxFQUFFMnpELEdBQW9ILE9BQWpIaHNELEtBQUk1SCxFQUFFQSxFQUFFb3NFLFdBQVl5WSw0Q0FBNEM1a0YsRUFBRUQsRUFBRThrRiwwQ0FBMENuOEUsR0FBVUEsRUFDN2QsU0FBU284RSxHQUFHL2tGLEdBQXlCLE9BQU8sTUFBM0JBLEVBQUV1eEQsa0JBQThDLFNBQVN5ekIsS0FBS1YsR0FBRUksSUFBSUosR0FBRUcsSUFBRyxTQUFTUSxHQUFHamxGLEVBQUVDLEVBQUUwSCxHQUFHLEdBQUc4OEUsR0FBRXIzRSxVQUFVbzNFLEdBQUcsTUFBTTVnQixNQUFNaitELEVBQUUsTUFBTTQrRSxHQUFFRSxHQUFFeGtGLEdBQUdza0YsR0FBRUcsR0FBRy84RSxHQUFHLFNBQVN1OUUsR0FBR2xsRixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFNUgsRUFBRW9zRSxVQUFnQyxHQUF0Qm5zRSxFQUFFQSxFQUFFc3hELGtCQUFxQixtQkFBb0IzcEQsRUFBRXU5RSxnQkFBZ0IsT0FBT3g5RSxFQUF3QixJQUFJLElBQUlnQixLQUE5QmYsRUFBRUEsRUFBRXU5RSxrQkFBaUMsS0FBS3g4RSxLQUFLMUksR0FBRyxNQUFNMmpFLE1BQU1qK0QsRUFBRSxJQUFJNitELEVBQUd4a0UsSUFBSSxVQUFVMkksSUFBSSxPQUFPMHJELEVBQUUsR0FBRzFzRCxFQUFFQyxHQUN0WCxTQUFTdzlFLEdBQUdwbEYsR0FBMkcsT0FBeEdBLEdBQUdBLEVBQUVBLEVBQUVvc0UsWUFBWXBzRSxFQUFFcWxGLDJDQUEyQ2IsR0FBR0csR0FBR0YsR0FBRXIzRSxRQUFRbTNFLEdBQUVFLEdBQUV6a0YsR0FBR3VrRixHQUFFRyxHQUFHQSxHQUFHdDNFLFVBQWUsRUFBRyxTQUFTazRFLEdBQUd0bEYsRUFBRUMsRUFBRTBILEdBQUcsSUFBSUMsRUFBRTVILEVBQUVvc0UsVUFBVSxJQUFJeGtFLEVBQUUsTUFBTWc4RCxNQUFNaitELEVBQUUsTUFBTWdDLEdBQUczSCxFQUFFa2xGLEdBQUdsbEYsRUFBRUMsRUFBRTBrRixJQUFJLzhFLEVBQUV5OUUsMENBQTBDcmxGLEVBQUVza0YsR0FBRUksSUFBSUosR0FBRUcsSUFBR0YsR0FBRUUsR0FBRXprRixJQUFJc2tGLEdBQUVJLElBQUlILEdBQUVHLEdBQUcvOEUsR0FBRyxJQUFJNDlFLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsR0FBRzFsRixHQUFHLE9BQU91bEYsR0FBR0EsR0FBRyxDQUFDdmxGLEdBQUd1bEYsR0FBR2huRixLQUFLeUIsR0FDOVYsU0FBUzJsRixLQUFLLElBQUlGLElBQUksT0FBT0YsR0FBRyxDQUFDRSxJQUFHLEVBQUcsSUFBSXpsRixFQUFFLEVBQUVDLEVBQUUrd0UsR0FBRSxJQUFJLElBQUlycEUsRUFBRTQ5RSxHQUFHLElBQUl2VSxHQUFFLEVBQUVoeEUsRUFBRTJILEVBQUV6RCxPQUFPbEUsSUFBSSxDQUFDLElBQUk0SCxFQUFFRCxFQUFFM0gsR0FBRyxHQUFHNEgsRUFBRUEsR0FBRSxTQUFVLE9BQU9BLEdBQUcyOUUsR0FBRyxLQUFLQyxJQUFHLEVBQUcsTUFBTTc4RSxHQUFHLE1BQU0sT0FBTzQ4RSxLQUFLQSxHQUFHQSxHQUFHbi9CLE1BQU1wbUQsRUFBRSxJQUFJa3VFLEdBQUdZLEdBQUc2VyxJQUFJaDlFLEVBQUcsUUFBUXFvRSxHQUFFL3dFLEVBQUV3bEYsSUFBRyxHQUFJLE9BQU8sS0FBSyxJQUFJRyxHQUFHbmpCLEVBQUcyUSx3QkFBd0IsU0FBU3lTLEdBQUc3bEYsRUFBRUMsR0FBRyxHQUFHRCxHQUFHQSxFQUFFMHhELGFBQWEsQ0FBNEIsSUFBSSxJQUFJL3BELEtBQW5DMUgsRUFBRW8wRCxFQUFFLEdBQUdwMEQsR0FBR0QsRUFBRUEsRUFBRTB4RCxrQkFBNEIsSUFBU3p4RCxFQUFFMEgsS0FBSzFILEVBQUUwSCxHQUFHM0gsRUFBRTJILElBQUksT0FBTzFILEVBQUUsT0FBT0EsRUFBRSxJQUFJNmxGLEdBQUd6QixHQUFHLE1BQU0wQixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEtBQUtELEdBQUdELEdBQUdELEdBQUcsS0FDcGMsU0FBU0ksR0FBR25tRixHQUFHLElBQUlDLEVBQUU2bEYsR0FBRzE0RSxRQUFRazNFLEdBQUV3QixJQUFJOWxGLEVBQUVvbUYsY0FBY25tRixFQUFFLFNBQVNvbUYsR0FBR3JtRixFQUFFQyxFQUFFMEgsR0FBRyxLQUFLLE9BQU8zSCxHQUFHLENBQUMsSUFBSTRILEVBQUU1SCxFQUFFd3RFLFVBQStILElBQXBIeHRFLEVBQUVzbUYsV0FBV3JtRixLQUFLQSxHQUFHRCxFQUFFc21GLFlBQVlybUYsRUFBRSxPQUFPMkgsSUFBSUEsRUFBRTArRSxZQUFZcm1GLElBQUksT0FBTzJILElBQUlBLEVBQUUwK0UsV0FBV3JtRixLQUFLQSxJQUFJMkgsRUFBRTArRSxZQUFZcm1GLEdBQU1ELElBQUkySCxFQUFFLE1BQU0zSCxFQUFFQSxFQUFFc2tELFFBQVEsU0FBU2lpQyxHQUFHdm1GLEVBQUVDLEdBQUc4bEYsR0FBRy9sRixFQUFFaW1GLEdBQUdELEdBQUcsS0FBc0IsUUFBakJobUYsRUFBRUEsRUFBRXdtRixlQUF1QixPQUFPeG1GLEVBQUV5bUYsZUFBZSxJQUFLem1GLEVBQUUwbUYsTUFBTXptRixLQUFLMG1GLElBQUcsR0FBSTNtRixFQUFFeW1GLGFBQWEsTUFDelgsU0FBU0csR0FBRzVtRixHQUFHLElBQUlDLEVBQUVELEVBQUVvbUYsY0FBYyxHQUFHSCxLQUFLam1GLEVBQUUsR0FBR0EsRUFBRSxDQUFDbVksUUFBUW5ZLEVBQUU2bUYsY0FBYzVtRixFQUFFb04sS0FBSyxNQUFNLE9BQU8yNEUsR0FBRyxDQUFDLEdBQUcsT0FBT0QsR0FBRyxNQUFNbmlCLE1BQU1qK0QsRUFBRSxNQUFNcWdGLEdBQUdobUYsRUFBRStsRixHQUFHUyxhQUFhLENBQUNFLE1BQU0sRUFBRUQsYUFBYXptRixRQUFRZ21GLEdBQUdBLEdBQUczNEUsS0FBS3JOLEVBQUUsT0FBT0MsRUFBRSxJQUFJNm1GLEdBQUcsS0FBS0MsSUFBRyxFQUFHLFNBQVNDLEdBQUdobkYsR0FBR0EsRUFBRWluRixZQUFZLENBQUNDLFVBQVVsbkYsRUFBRTJ0RSxjQUFjd1osZ0JBQWdCLEtBQUtDLGVBQWUsS0FBS0MsT0FBTyxDQUFDQyxRQUFRLEtBQUtDLFlBQVksS0FBS2IsTUFBTSxHQUFHYyxRQUFRLE1BQ3pYLFNBQVNDLEdBQUd6bkYsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRWluRixZQUFZaG5GLEVBQUVnbkYsY0FBY2puRixJQUFJQyxFQUFFZ25GLFlBQVksQ0FBQ0MsVUFBVWxuRixFQUFFa25GLFVBQVVDLGdCQUFnQm5uRixFQUFFbW5GLGdCQUFnQkMsZUFBZXBuRixFQUFFb25GLGVBQWVDLE9BQU9ybkYsRUFBRXFuRixPQUFPRyxRQUFReG5GLEVBQUV3bkYsVUFBVSxTQUFTRSxHQUFHMW5GLEVBQUVDLEdBQUcsTUFBTSxDQUFDMG5GLFVBQVUzbkYsRUFBRTRuRixLQUFLM25GLEVBQUVra0UsSUFBSSxFQUFFMGpCLFFBQVEsS0FBS3gyRCxTQUFTLEtBQUtoa0IsS0FBSyxNQUNqUixTQUFTeTZFLEdBQUc5bkYsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRTNILEVBQUVpbkYsWUFBWSxPQUFPdC9FLElBQUlBLEVBQUVBLEVBQUUwL0UsT0FBT1UsR0FBRy9uRixJQUFvQixRQUFoQkEsRUFBRTJILEVBQUU0L0UsY0FBc0J0bkYsRUFBRW9OLEtBQUtwTixFQUFFLE9BQU82bUYsR0FBR0EsR0FBRyxDQUFDbi9FLEdBQUdtL0UsR0FBR3ZvRixLQUFLb0osS0FBSzFILEVBQUVvTixLQUFLck4sRUFBRXFOLEtBQUtyTixFQUFFcU4sS0FBS3BOLEdBQUcwSCxFQUFFNC9FLFlBQVl0bkYsSUFBZ0IsUUFBWkQsRUFBRTJILEVBQUUyL0UsU0FBaUJybkYsRUFBRW9OLEtBQUtwTixHQUFHQSxFQUFFb04sS0FBS3JOLEVBQUVxTixLQUFLck4sRUFBRXFOLEtBQUtwTixHQUFHMEgsRUFBRTIvRSxRQUFRcm5GLElBQUksU0FBUytuRixHQUFHaG9GLEVBQUVDLEVBQUUwSCxHQUFtQixHQUFHLFFBQW5CMUgsRUFBRUEsRUFBRWduRixlQUEwQmhuRixFQUFFQSxFQUFFb25GLE9BQU8sSUFBTyxRQUFGMS9FLElBQVksQ0FBQyxJQUFJQyxFQUFFM0gsRUFBRXltRixNQUF3Qi8rRSxHQUFsQkMsR0FBRzVILEVBQUVvd0UsYUFBa0Jud0UsRUFBRXltRixNQUFNLytFLEVBQUVvcEUsR0FBRy93RSxFQUFFMkgsSUFDcFgsU0FBU3NnRixHQUFHam9GLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUzSCxFQUFFaW5GLFlBQVlyL0UsRUFBRTVILEVBQUV3dEUsVUFBVSxHQUFHLE9BQU81bEUsR0FBb0JELEtBQWhCQyxFQUFFQSxFQUFFcS9FLGFBQW1CLENBQUMsSUFBSXQrRSxFQUFFLEtBQUtpckQsRUFBRSxLQUF5QixHQUFHLFFBQXZCanNELEVBQUVBLEVBQUV3L0UsaUJBQTRCLENBQUMsRUFBRSxDQUFDLElBQUl0ekIsRUFBRSxDQUFDOHpCLFVBQVVoZ0YsRUFBRWdnRixVQUFVQyxLQUFLamdGLEVBQUVpZ0YsS0FBS3pqQixJQUFJeDhELEVBQUV3OEQsSUFBSTBqQixRQUFRbGdGLEVBQUVrZ0YsUUFBUXgyRCxTQUFTMXBCLEVBQUUwcEIsU0FBU2hrQixLQUFLLE1BQU0sT0FBT3VtRCxFQUFFanJELEVBQUVpckQsRUFBRUMsRUFBRUQsRUFBRUEsRUFBRXZtRCxLQUFLd21ELEVBQUVsc0QsRUFBRUEsRUFBRTBGLFdBQVcsT0FBTzFGLEdBQUcsT0FBT2lzRCxFQUFFanJELEVBQUVpckQsRUFBRTN6RCxFQUFFMnpELEVBQUVBLEVBQUV2bUQsS0FBS3BOLE9BQU8wSSxFQUFFaXJELEVBQUUzekQsRUFBaUgsT0FBL0cwSCxFQUFFLENBQUN1L0UsVUFBVXQvRSxFQUFFcy9FLFVBQVVDLGdCQUFnQngrRSxFQUFFeStFLGVBQWV4ekIsRUFBRXl6QixPQUFPei9FLEVBQUV5L0UsT0FBT0csUUFBUTUvRSxFQUFFNC9FLGNBQVN4bkYsRUFBRWluRixZQUFZdC9FLEdBQTRCLFFBQW5CM0gsRUFBRTJILEVBQUV5L0UsZ0JBQXdCei9FLEVBQUV3L0UsZ0JBQWdCbG5GLEVBQUVELEVBQUVxTixLQUNuZnBOLEVBQUUwSCxFQUFFeS9FLGVBQWVubkYsRUFDbkIsU0FBU2lvRixHQUFHbG9GLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLElBQUllLEVBQUUzSSxFQUFFaW5GLFlBQVlGLElBQUcsRUFBRyxJQUFJbnpCLEVBQUVqckQsRUFBRXcrRSxnQkFBZ0J0ekIsRUFBRWxyRCxFQUFFeStFLGVBQWV0ekIsRUFBRW5yRCxFQUFFMCtFLE9BQU9DLFFBQVEsR0FBRyxPQUFPeHpCLEVBQUUsQ0FBQ25yRCxFQUFFMCtFLE9BQU9DLFFBQVEsS0FBSyxJQUFJcHNFLEVBQUU0NEMsRUFBRUMsRUFBRTc0QyxFQUFFN04sS0FBSzZOLEVBQUU3TixLQUFLLEtBQUssT0FBT3dtRCxFQUFFRCxFQUFFRyxFQUFFRixFQUFFeG1ELEtBQUswbUQsRUFBRUYsRUFBRTM0QyxFQUFFLElBQUlGLEVBQUVoYixFQUFFd3RFLFVBQVUsT0FBT3h5RCxJQUFvQjg0QyxHQUFoQjk0QyxFQUFFQSxFQUFFaXNFLGFBQWdCRyxrQkFBbUJ2ekIsSUFBSSxPQUFPQyxFQUFFOTRDLEVBQUVtc0UsZ0JBQWdCcHpCLEVBQUVELEVBQUV6bUQsS0FBSzBtRCxFQUFFLzRDLEVBQUVvc0UsZUFBZWxzRSxHQUFJLEdBQUcsT0FBTzA0QyxFQUFFLENBQUMsSUFBSU8sRUFBRXhyRCxFQUFFdStFLFVBQTZCLElBQW5CcnpCLEVBQUUsRUFBRTc0QyxFQUFFKzRDLEVBQUU3NEMsRUFBRSxLQUFLNDRDLEVBQUVGLElBQUksQ0FBQyxJQUFJSSxFQUFFRixFQUFFOHpCLEtBQUs3b0YsRUFBRSswRCxFQUFFNnpCLFVBQVUsSUFBSS8vRSxFQUFFb3NELEtBQUtBLEVBQUUsQ0FBQyxPQUFPaDVDLElBQUlBLEVBQUVBLEVBQUUzTixLQUFLLENBQUNzNkUsVUFBVTVvRixFQUFFNm9GLEtBQUssRUFBRXpqQixJQUFJclEsRUFBRXFRLElBQUkwakIsUUFBUS96QixFQUFFK3pCLFFBQVF4MkQsU0FBU3lpQyxFQUFFemlDLFNBQ3ZmaGtCLEtBQUssT0FBT3JOLEVBQUUsQ0FBQyxJQUFJdWpELEVBQUV2akQsRUFBRWswRCxFQUFFSixFQUFVLE9BQVJFLEVBQUUvekQsRUFBRWxCLEVBQUU0SSxFQUFTdXNELEVBQUVpUSxLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmNWdCLEVBQUUyUSxFQUFFMnpCLFNBQWlDLENBQUMxekIsRUFBRTVRLEVBQUVoOUMsS0FBS3hILEVBQUVvMUQsRUFBRUgsR0FBRyxNQUFNaDBELEVBQUVtMEQsRUFBRTVRLEVBQUUsTUFBTXZqRCxFQUFFLEtBQUssRUFBRXVqRCxFQUFFa3FCLE9BQWUsTUFBVGxxQixFQUFFa3FCLE1BQWEsSUFBSSxLQUFLLEVBQXNELEdBQUcsT0FBM0N6WixFQUFFLG1CQUFkelEsRUFBRTJRLEVBQUUyekIsU0FBZ0N0a0MsRUFBRWg5QyxLQUFLeEgsRUFBRW8xRCxFQUFFSCxHQUFHelEsR0FBMEIsTUFBTXZqRCxFQUFFbTBELEVBQUVFLEVBQUUsR0FBR0YsRUFBRUgsR0FBRyxNQUFNaDBELEVBQUUsS0FBSyxFQUFFK21GLElBQUcsR0FBSSxPQUFPanpCLEVBQUV6aUMsVUFBVSxJQUFJeWlDLEVBQUU4ekIsT0FBTzVuRixFQUFFeXRFLE9BQU8sR0FBZSxRQUFaelosRUFBRXJyRCxFQUFFNitFLFNBQWlCNytFLEVBQUU2K0UsUUFBUSxDQUFDMXpCLEdBQUdFLEVBQUV6MUQsS0FBS3UxRCxTQUFTLzBELEVBQUUsQ0FBQzRvRixVQUFVNW9GLEVBQUU2b0YsS0FBSzV6QixFQUFFbVEsSUFBSXJRLEVBQUVxUSxJQUFJMGpCLFFBQVEvekIsRUFBRSt6QixRQUFReDJELFNBQVN5aUMsRUFBRXppQyxTQUFTaGtCLEtBQUssTUFBTSxPQUFPMk4sR0FBRys0QyxFQUFFLzRDLEVBQUVqYyxFQUFFbWMsRUFBRWk1QyxHQUFHbjVDLEVBQUVBLEVBQUUzTixLQUFLdE8sRUFBRTgwRCxHQUFHRyxFQUMzZSxHQUFHLFFBQVpGLEVBQUVBLEVBQUV6bUQsTUFBaUIsSUFBc0IsUUFBbkJ5bUQsRUFBRW5yRCxFQUFFMCtFLE9BQU9DLFNBQWlCLE1BQWV4ekIsR0FBSkUsRUFBRUYsR0FBTXptRCxLQUFLMm1ELEVBQUUzbUQsS0FBSyxLQUFLMUUsRUFBRXkrRSxlQUFlcHpCLEVBQUVyckQsRUFBRTArRSxPQUFPQyxRQUFRLE1BQTBHLEdBQTVGLE9BQU90c0UsSUFBSUUsRUFBRWk1QyxHQUFHeHJELEVBQUV1K0UsVUFBVWhzRSxFQUFFdlMsRUFBRXcrRSxnQkFBZ0JwekIsRUFBRXByRCxFQUFFeStFLGVBQWVwc0UsRUFBNEIsUUFBMUIvYSxFQUFFMEksRUFBRTArRSxPQUFPRSxhQUF3QixDQUFDNStFLEVBQUUxSSxFQUFFLEdBQUc0ekQsR0FBR2xyRCxFQUFFaS9FLEtBQUtqL0UsRUFBRUEsRUFBRTBFLFdBQVcxRSxJQUFJMUksUUFBUSxPQUFPMnpELElBQUlqckQsRUFBRTArRSxPQUFPWCxNQUFNLEdBQUd5QixJQUFJdDBCLEVBQUU3ekQsRUFBRTBtRixNQUFNN3lCLEVBQUU3ekQsRUFBRTJ0RSxjQUFjeFosR0FDNVYsU0FBU2kwQixHQUFHcG9GLEVBQUVDLEVBQUUwSCxHQUE4QixHQUEzQjNILEVBQUVDLEVBQUV1bkYsUUFBUXZuRixFQUFFdW5GLFFBQVEsS0FBUSxPQUFPeG5GLEVBQUUsSUFBSUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFa0UsT0FBT2pFLElBQUksQ0FBQyxJQUFJMkgsRUFBRTVILEVBQUVDLEdBQUcwSSxFQUFFZixFQUFFeXBCLFNBQVMsR0FBRyxPQUFPMW9CLEVBQUUsQ0FBcUIsR0FBcEJmLEVBQUV5cEIsU0FBUyxLQUFLenBCLEVBQUVELEVBQUssbUJBQW9CZ0IsRUFBRSxNQUFNaTdELE1BQU1qK0QsRUFBRSxJQUFJZ0QsSUFBSUEsRUFBRXBDLEtBQUtxQixLQUFLLElBQUl5Z0YsSUFBRyxJQUFLeG5CLEVBQUdua0QsV0FBVzRyRSxLQUFLLFNBQVNDLEdBQUd2b0YsRUFBRUMsRUFBRTBILEVBQUVDLEdBQThCRCxFQUFFLE9BQVhBLEVBQUVBLEVBQUVDLEVBQXRCM0gsRUFBRUQsRUFBRTJ0RSxnQkFBOEMxdEUsRUFBRW8wRCxFQUFFLEdBQUdwMEQsRUFBRTBILEdBQUczSCxFQUFFMnRFLGNBQWNobUUsRUFBRSxJQUFJM0gsRUFBRTBtRixRQUFRMW1GLEVBQUVpbkYsWUFBWUMsVUFBVXYvRSxHQUNoWCxJQUFJNmdGLEdBQUcsQ0FBQy91RSxVQUFVLFNBQVN6WixHQUFHLFNBQU9BLEVBQUVBLEVBQUV5b0Ysa0JBQWlCbGIsR0FBR3Z0RSxLQUFLQSxHQUFNMG9GLGdCQUFnQixTQUFTMW9GLEVBQUVDLEVBQUUwSCxHQUFHM0gsRUFBRUEsRUFBRXlvRixnQkFBZ0IsSUFBSTdnRixFQUFFK2dGLEtBQUtoZ0YsRUFBRWlnRixHQUFHNW9GLEdBQUc0ekQsRUFBRTh6QixHQUFHOS9FLEVBQUVlLEdBQUdpckQsRUFBRWkwQixRQUFRNW5GLEVBQUUsTUFBUzBILElBQWNpc0QsRUFBRXZpQyxTQUFTMXBCLEdBQUdtZ0YsR0FBRzluRixFQUFFNHpELEdBQWUsUUFBWjN6RCxFQUFFNG9GLEdBQUc3b0YsRUFBRTJJLEVBQUVmLEtBQWFvZ0YsR0FBRy9uRixFQUFFRCxFQUFFMkksSUFBSW1nRixvQkFBb0IsU0FBUzlvRixFQUFFQyxFQUFFMEgsR0FBRzNILEVBQUVBLEVBQUV5b0YsZ0JBQWdCLElBQUk3Z0YsRUFBRStnRixLQUFLaGdGLEVBQUVpZ0YsR0FBRzVvRixHQUFHNHpELEVBQUU4ekIsR0FBRzkvRSxFQUFFZSxHQUFHaXJELEVBQUV1USxJQUFJLEVBQUV2USxFQUFFaTBCLFFBQVE1bkYsRUFBRSxNQUFTMEgsSUFBY2lzRCxFQUFFdmlDLFNBQVMxcEIsR0FBR21nRixHQUFHOW5GLEVBQUU0ekQsR0FBZSxRQUFaM3pELEVBQUU0b0YsR0FBRzdvRixFQUFFMkksRUFBRWYsS0FBYW9nRixHQUFHL25GLEVBQUVELEVBQUUySSxJQUFJb2dGLG1CQUFtQixTQUFTL29GLEVBQUVDLEdBQUdELEVBQUVBLEVBQUV5b0YsZ0JBQWdCLElBQUk5Z0YsRUFBRWdoRixLQUFLL2dGLEVBQUVnaEYsR0FBRzVvRixHQUFHMkksRUFBRSsrRSxHQUFHLy9FLEVBQ3ZmQyxHQUFHZSxFQUFFdzdELElBQUksRUFBRSxNQUFTbGtFLElBQWMwSSxFQUFFMG9CLFNBQVNweEIsR0FBRzZuRixHQUFHOW5GLEVBQUUySSxHQUFlLFFBQVoxSSxFQUFFNG9GLEdBQUc3b0YsRUFBRTRILEVBQUVELEtBQWFxZ0YsR0FBRy9uRixFQUFFRCxFQUFFNEgsS0FBSyxTQUFTb2hGLEdBQUdocEYsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLEVBQUVpckQsRUFBRUMsR0FBaUIsTUFBTSxtQkFBcEI3ekQsRUFBRUEsRUFBRW9zRSxXQUFzQzZjLHNCQUFzQmpwRixFQUFFaXBGLHNCQUFzQnJoRixFQUFFZ3NELEVBQUVDLEtBQUc1ekQsRUFBRXVJLFdBQVd2SSxFQUFFdUksVUFBVTBnRixzQkFBc0J4TCxHQUFHLzFFLEVBQUVDLElBQUs4MUUsR0FBRy8wRSxFQUFFaXJELElBQ2xSLFNBQVN1MUIsR0FBR25wRixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxHQUFFLEVBQUdlLEVBQUU2N0UsR0FBTzV3QixFQUFFM3pELEVBQUV1eEQsWUFBMlcsTUFBL1YsaUJBQWtCb0MsR0FBRyxPQUFPQSxFQUFFQSxFQUFFZ3pCLEdBQUdoekIsSUFBSWpyRCxFQUFFbzhFLEdBQUc5a0YsR0FBRzBrRixHQUFHRixHQUFFcjNFLFFBQXlCd21ELEdBQUdoc0QsRUFBRSxPQUF0QkEsRUFBRTNILEVBQUV3eEQsZUFBd0NtekIsR0FBRzVrRixFQUFFMkksR0FBRzY3RSxJQUFJdmtGLEVBQUUsSUFBSUEsRUFBRTBILEVBQUVpc0QsR0FBRzV6RCxFQUFFMnRFLGNBQWMsT0FBTzF0RSxFQUFFa1EsWUFBTyxJQUFTbFEsRUFBRWtRLE1BQU1sUSxFQUFFa1EsTUFBTSxLQUFLbFEsRUFBRW1wRixRQUFRWixHQUFHeG9GLEVBQUVvc0UsVUFBVW5zRSxFQUFFQSxFQUFFd29GLGdCQUFnQnpvRixFQUFFNEgsS0FBSTVILEVBQUVBLEVBQUVvc0UsV0FBWXlZLDRDQUE0Q2w4RSxFQUFFM0ksRUFBRThrRiwwQ0FBMENseEIsR0FBVTN6RCxFQUMzWixTQUFTb3BGLEdBQUdycEYsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUc1SCxFQUFFQyxFQUFFa1EsTUFBTSxtQkFBb0JsUSxFQUFFcXBGLDJCQUEyQnJwRixFQUFFcXBGLDBCQUEwQjNoRixFQUFFQyxHQUFHLG1CQUFvQjNILEVBQUVzcEYsa0NBQWtDdHBGLEVBQUVzcEYsaUNBQWlDNWhGLEVBQUVDLEdBQUczSCxFQUFFa1EsUUFBUW5RLEdBQUd3b0YsR0FBR00sb0JBQW9CN29GLEVBQUVBLEVBQUVrUSxNQUFNLE1BQy9QLFNBQVNxNUUsR0FBR3hwRixFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxJQUFJZSxFQUFFM0ksRUFBRW9zRSxVQUFVempFLEVBQUVtVCxNQUFNblUsRUFBRWdCLEVBQUV3SCxNQUFNblEsRUFBRTJ0RSxjQUFjaGxFLEVBQUUyL0UsS0FBS0QsR0FBR3JCLEdBQUdobkYsR0FBRyxJQUFJNHpELEVBQUUzekQsRUFBRXV4RCxZQUFZLGlCQUFrQm9DLEdBQUcsT0FBT0EsRUFBRWpyRCxFQUFFd1AsUUFBUXl1RSxHQUFHaHpCLElBQUlBLEVBQUVteEIsR0FBRzlrRixHQUFHMGtGLEdBQUdGLEdBQUVyM0UsUUFBUXpFLEVBQUV3UCxRQUFReXNFLEdBQUc1a0YsRUFBRTR6RCxJQUFJanJELEVBQUV3SCxNQUFNblEsRUFBRTJ0RSxjQUEyQyxtQkFBN0IvWixFQUFFM3pELEVBQUU2eEQsNEJBQWlEeTJCLEdBQUd2b0YsRUFBRUMsRUFBRTJ6RCxFQUFFanNELEdBQUdnQixFQUFFd0gsTUFBTW5RLEVBQUUydEUsZUFBZSxtQkFBb0IxdEUsRUFBRTZ4RCwwQkFBMEIsbUJBQW9CbnBELEVBQUVrMkIseUJBQXlCLG1CQUFvQmwyQixFQUFFOGdGLDJCQUEyQixtQkFBb0I5Z0YsRUFBRStnRixxQkFBcUJ6cEYsRUFBRTBJLEVBQUV3SCxNQUNyZixtQkFBb0J4SCxFQUFFK2dGLG9CQUFvQi9nRixFQUFFK2dGLHFCQUFxQixtQkFBb0IvZ0YsRUFBRThnRiwyQkFBMkI5Z0YsRUFBRThnRiw0QkFBNEJ4cEYsSUFBSTBJLEVBQUV3SCxPQUFPcTRFLEdBQUdNLG9CQUFvQm5nRixFQUFFQSxFQUFFd0gsTUFBTSxNQUFNKzNFLEdBQUdsb0YsRUFBRTJILEVBQUVnQixFQUFFZixHQUFHZSxFQUFFd0gsTUFBTW5RLEVBQUUydEUsZUFBZSxtQkFBb0JobEUsRUFBRXM1QyxvQkFBb0JqaUQsRUFBRXl0RSxPQUFPLFNBQVMsSUFBSWtjLEdBQUcsR0FBR0MsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxHQUFHQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsR0FBRyxFQUFFQyxHQUFHLEdBQUcsU0FBU0MsR0FBR3BxRixFQUFFQyxHQUFHMHBGLEdBQUdDLE1BQU1FLEdBQUdILEdBQUdDLE1BQU1DLEdBQUdBLEdBQUc3cEYsRUFBRThwRixHQUFHN3BGLEVBQ2haLFNBQVNvcUYsR0FBR3JxRixFQUFFQyxFQUFFMEgsR0FBR29pRixHQUFHQyxNQUFNRSxHQUFHSCxHQUFHQyxNQUFNRyxHQUFHSixHQUFHQyxNQUFNQyxHQUFHQSxHQUFHanFGLEVBQUUsSUFBSTRILEVBQUVzaUYsR0FBR2xxRixFQUFFbXFGLEdBQUcsSUFBSXhoRixFQUFFLEdBQUcrbUUsR0FBRzluRSxHQUFHLEVBQUVBLEtBQUssR0FBR2UsR0FBR2hCLEdBQUcsRUFBRSxJQUFJaXNELEVBQUUsR0FBRzhiLEdBQUd6dkUsR0FBRzBJLEVBQUUsR0FBRyxHQUFHaXJELEVBQUUsQ0FBQyxJQUFJQyxFQUFFbHJELEVBQUVBLEVBQUUsRUFBRWlyRCxHQUFHaHNELEdBQUcsR0FBR2lzRCxHQUFHLEdBQUdxVCxTQUFTLElBQUl0L0QsSUFBSWlzRCxFQUFFbHJELEdBQUdrckQsRUFBRXEyQixHQUFHLEdBQUcsR0FBR3hhLEdBQUd6dkUsR0FBRzBJLEVBQUVoQixHQUFHZ0IsRUFBRWYsRUFBRXVpRixHQUFHdjJCLEVBQUU1ekQsT0FBT2txRixHQUFHLEdBQUd0MkIsRUFBRWpzRCxHQUFHZ0IsRUFBRWYsRUFBRXVpRixHQUFHbnFGLEVBQUUsU0FBU3NxRixHQUFHdHFGLEdBQUcsT0FBT0EsRUFBRXNrRCxTQUFTOGxDLEdBQUdwcUYsRUFBRSxHQUFHcXFGLEdBQUdycUYsRUFBRSxFQUFFLElBQUksU0FBU3VxRixHQUFHdnFGLEdBQUcsS0FBS0EsSUFBSTZwRixJQUFJQSxHQUFHRixLQUFLQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtFLEdBQUdILEtBQUtDLElBQUlELEdBQUdDLElBQUksS0FBSyxLQUFLNXBGLElBQUlpcUYsSUFBSUEsR0FBR0YsS0FBS0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLRyxHQUFHSixLQUFLQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtFLEdBQUdILEtBQUtDLElBQUlELEdBQUdDLElBQUksS0FBSyxJQUFJUSxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRSxFQUFHQyxHQUFHLEtBQ2plLFNBQVNDLEdBQUc1cUYsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRWtqRixHQUFHLEVBQUUsS0FBSyxLQUFLLEdBQUdsakYsRUFBRW1qRixZQUFZLFVBQVVuakYsRUFBRXlrRSxVQUFVbnNFLEVBQUUwSCxFQUFFMjhDLE9BQU90a0QsRUFBZ0IsUUFBZEMsRUFBRUQsRUFBRStxRixZQUFvQi9xRixFQUFFK3FGLFVBQVUsQ0FBQ3BqRixHQUFHM0gsRUFBRXl0RSxPQUFPLElBQUl4dEUsRUFBRTFCLEtBQUtvSixHQUN0SixTQUFTcWpGLEdBQUdockYsRUFBRUMsR0FBRyxPQUFPRCxFQUFFbWtFLEtBQUssS0FBSyxFQUFFLElBQUl4OEQsRUFBRTNILEVBQUU4akIsS0FBeUUsT0FBTyxRQUEzRTdqQixFQUFFLElBQUlBLEVBQUV5bkUsVUFBVS8vRCxFQUFFcVMsZ0JBQWdCL1osRUFBRTBrRSxTQUFTM3FELGNBQWMsS0FBSy9aLEtBQW1CRCxFQUFFb3NFLFVBQVVuc0UsRUFBRXVxRixHQUFHeHFGLEVBQUV5cUYsR0FBRzlHLEdBQUcxakYsRUFBRWtuRSxhQUFZLEdBQU8sS0FBSyxFQUFFLE9BQW9ELFFBQTdDbG5FLEVBQUUsS0FBS0QsRUFBRWlyRixjQUFjLElBQUlockYsRUFBRXluRSxTQUFTLEtBQUt6bkUsS0FBWUQsRUFBRW9zRSxVQUFVbnNFLEVBQUV1cUYsR0FBR3hxRixFQUFFeXFGLEdBQUcsTUFBSyxHQUFPLEtBQUssR0FBRyxPQUErQixRQUF4QnhxRixFQUFFLElBQUlBLEVBQUV5bkUsU0FBUyxLQUFLem5FLEtBQVkwSCxFQUFFLE9BQU9zaUYsR0FBRyxDQUFDajNELEdBQUdrM0QsR0FBR2dCLFNBQVNmLElBQUksS0FBS25xRixFQUFFMnRFLGNBQWMsQ0FBQ0MsV0FBVzN0RSxFQUFFa3JGLFlBQVl4akYsRUFBRXlqRixVQUFVLGFBQVl6akYsRUFBRWtqRixHQUFHLEdBQUcsS0FBSyxLQUFLLElBQUt6ZSxVQUFVbnNFLEVBQUUwSCxFQUFFMjhDLE9BQU90a0QsRUFBRUEsRUFBRWt5QixNQUFNdnFCLEVBQUU2aUYsR0FBR3hxRixFQUFFeXFGLEdBQ2xmLE1BQUssR0FBTyxRQUFRLE9BQU0sR0FBSSxTQUFTWSxHQUFHcnJGLEdBQUcsT0FBTyxJQUFZLEVBQVBBLEVBQUVzckYsT0FBUyxJQUFhLElBQVJ0ckYsRUFBRXl0RSxPQUFXLFNBQVM4ZCxHQUFHdnJGLEdBQUcsR0FBRzBxRixHQUFFLENBQUMsSUFBSXpxRixFQUFFd3FGLEdBQUcsR0FBR3hxRixFQUFFLENBQUMsSUFBSTBILEVBQUUxSCxFQUFFLElBQUkrcUYsR0FBR2hyRixFQUFFQyxHQUFHLENBQUMsR0FBR29yRixHQUFHcnJGLEdBQUcsTUFBTTRqRSxNQUFNaitELEVBQUUsTUFBTTFGLEVBQUUwakYsR0FBR2g4RSxFQUFFazJFLGFBQWEsSUFBSWoyRSxFQUFFNGlGLEdBQUd2cUYsR0FBRytxRixHQUFHaHJGLEVBQUVDLEdBQUcycUYsR0FBR2hqRixFQUFFRCxJQUFJM0gsRUFBRXl0RSxPQUFlLEtBQVR6dEUsRUFBRXl0RSxNQUFZLEVBQUVpZCxJQUFFLEVBQUdGLEdBQUd4cUYsUUFBUSxDQUFDLEdBQUdxckYsR0FBR3JyRixHQUFHLE1BQU00akUsTUFBTWorRCxFQUFFLE1BQU0zRixFQUFFeXRFLE9BQWUsS0FBVHp0RSxFQUFFeXRFLE1BQVksRUFBRWlkLElBQUUsRUFBR0YsR0FBR3hxRixJQUFJLFNBQVN3ckYsR0FBR3hyRixHQUFHLElBQUlBLEVBQUVBLEVBQUVza0QsT0FBTyxPQUFPdGtELEdBQUcsSUFBSUEsRUFBRW1rRSxLQUFLLElBQUlua0UsRUFBRW1rRSxLQUFLLEtBQUtua0UsRUFBRW1rRSxLQUFLbmtFLEVBQUVBLEVBQUVza0QsT0FBT2ttQyxHQUFHeHFGLEVBQy9aLFNBQVN5ckYsR0FBR3pyRixHQUFHLEdBQUdBLElBQUl3cUYsR0FBRyxPQUFNLEVBQUcsSUFBSUUsR0FBRSxPQUFPYyxHQUFHeHJGLEdBQUcwcUYsSUFBRSxHQUFHLEVBQUcsSUFBSXpxRixFQUFrRyxJQUEvRkEsRUFBRSxJQUFJRCxFQUFFbWtFLFFBQVFsa0UsRUFBRSxJQUFJRCxFQUFFbWtFLE9BQWdCbGtFLEVBQUUsVUFBWEEsRUFBRUQsRUFBRThqQixPQUFtQixTQUFTN2pCLElBQUlpakYsR0FBR2xqRixFQUFFOGpCLEtBQUs5akIsRUFBRTByRixnQkFBbUJ6ckYsSUFBSUEsRUFBRXdxRixJQUFJLENBQUMsR0FBR1ksR0FBR3JyRixHQUFHLENBQUMsSUFBSUEsRUFBRXlxRixHQUFHenFGLEdBQUdBLEVBQUUyakYsR0FBRzNqRixFQUFFNjlFLGFBQWEsTUFBTWphLE1BQU1qK0QsRUFBRSxNQUFPLEtBQUsxRixHQUFHMnFGLEdBQUc1cUYsRUFBRUMsR0FBR0EsRUFBRTBqRixHQUFHMWpGLEVBQUU0OUUsYUFBbUIsR0FBTjJOLEdBQUd4ckYsR0FBTSxLQUFLQSxFQUFFbWtFLElBQUksQ0FBZ0QsS0FBN0Jua0UsRUFBRSxRQUFwQkEsRUFBRUEsRUFBRTJ0RSxlQUF5QjN0RSxFQUFFNHRFLFdBQVcsTUFBVyxNQUFNaEssTUFBTWorRCxFQUFFLE1BQU0zRixFQUFFLENBQWlCLElBQWhCQSxFQUFFQSxFQUFFNjlFLFlBQWdCNTlFLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRTBuRSxTQUFTLENBQUMsSUFBSS8vRCxFQUFFM0gsRUFBRTFDLEtBQUssR0FBRyxPQUFPcUssRUFBRSxDQUFDLEdBQUcsSUFBSTFILEVBQUUsQ0FBQ3dxRixHQUFHOUcsR0FBRzNqRixFQUFFNjlFLGFBQWEsTUFBTTc5RSxFQUFFQyxRQUFRLE1BQU0wSCxHQUNuZixPQUFPQSxHQUFHLE9BQU9BLEdBQUcxSCxJQUFJRCxFQUFFQSxFQUFFNjlFLFlBQVk0TSxHQUFHLFdBQVdBLEdBQUdELEdBQUc3RyxHQUFHM2pGLEVBQUVvc0UsVUFBVXlSLGFBQWEsS0FBSyxPQUFNLEVBQUcsU0FBUzhOLEtBQUtsQixHQUFHRCxHQUFHLEtBQUtFLElBQUUsRUFBRyxTQUFTa0IsR0FBRzVyRixHQUFHLE9BQU8ycUYsR0FBR0EsR0FBRyxDQUFDM3FGLEdBQUcycUYsR0FBR3BzRixLQUFLeUIsR0FDNUssU0FBUzZyRixHQUFHN3JGLEVBQUVDLEVBQUUwSCxHQUFXLEdBQUcsUUFBWDNILEVBQUUySCxFQUFFZ1gsTUFBaUIsbUJBQW9CM2UsR0FBRyxpQkFBa0JBLEVBQUUsQ0FBQyxHQUFHMkgsRUFBRW1rRixPQUFPLENBQVksR0FBWG5rRixFQUFFQSxFQUFFbWtGLE9BQVksQ0FBQyxHQUFHLElBQUlua0YsRUFBRXc4RCxJQUFJLE1BQU1QLE1BQU1qK0QsRUFBRSxNQUFNLElBQUlpQyxFQUFFRCxFQUFFeWtFLFVBQVUsSUFBSXhrRSxFQUFFLE1BQU1nOEQsTUFBTWorRCxFQUFFLElBQUkzRixJQUFJLElBQUkySSxFQUFFZixFQUFFZ3NELEVBQUUsR0FBRzV6RCxFQUFFLE9BQUcsT0FBT0MsR0FBRyxPQUFPQSxFQUFFMGUsS0FBSyxtQkFBb0IxZSxFQUFFMGUsS0FBSzFlLEVBQUUwZSxJQUFJb3RFLGFBQWFuNEIsRUFBUzN6RCxFQUFFMGUsS0FBSTFlLEVBQUUsU0FBU0QsR0FBRyxJQUFJQyxFQUFFMEksRUFBRTIvRSxLQUFLcm9GLElBQUlvb0YsS0FBS3BvRixFQUFFMEksRUFBRTIvRSxLQUFLLElBQUksT0FBT3RvRixTQUFTQyxFQUFFMnpELEdBQUczekQsRUFBRTJ6RCxHQUFHNXpELEdBQUdDLEVBQUU4ckYsV0FBV240QixFQUFTM3pELEdBQUUsR0FBRyxpQkFBa0JELEVBQUUsTUFBTTRqRSxNQUFNaitELEVBQUUsTUFBTSxJQUFJZ0MsRUFBRW1rRixPQUFPLE1BQU1sb0IsTUFBTWorRCxFQUFFLElBQUkzRixJQUFLLE9BQU9BLEVBQ3BlLFNBQVNnc0YsR0FBR2hzRixFQUFFQyxHQUF1QyxNQUFwQ0QsRUFBRW9JLE9BQU9JLFVBQVUwK0QsU0FBUzNnRSxLQUFLdEcsR0FBUzJqRSxNQUFNaitELEVBQUUsR0FBRyxvQkFBb0IzRixFQUFFLHFCQUFxQm9JLE9BQU91UCxLQUFLMVgsR0FBRzRmLEtBQUssTUFBTSxJQUFJN2YsSUFBSyxTQUFTaXNGLEdBQUdqc0YsR0FBaUIsT0FBT0MsRUFBZkQsRUFBRXVrRSxPQUFldmtFLEVBQUVza0UsVUFDNUwsU0FBUzRuQixHQUFHbHNGLEdBQUcsU0FBU0MsRUFBRUEsRUFBRTBILEdBQUcsR0FBRzNILEVBQUUsQ0FBQyxJQUFJNEgsRUFBRTNILEVBQUU4cUYsVUFBVSxPQUFPbmpGLEdBQUczSCxFQUFFOHFGLFVBQVUsQ0FBQ3BqRixHQUFHMUgsRUFBRXd0RSxPQUFPLElBQUk3bEUsRUFBRXJKLEtBQUtvSixJQUFJLFNBQVNBLEVBQUVBLEVBQUVDLEdBQUcsSUFBSTVILEVBQUUsT0FBTyxLQUFLLEtBQUssT0FBTzRILEdBQUczSCxFQUFFMEgsRUFBRUMsR0FBR0EsRUFBRUEsRUFBRW1tRSxRQUFRLE9BQU8sS0FBSyxTQUFTbm1FLEVBQUU1SCxFQUFFQyxHQUFHLElBQUlELEVBQUUsSUFBSWxDLElBQUksT0FBT21DLEdBQUcsT0FBT0EsRUFBRTZJLElBQUk5SSxFQUFFckMsSUFBSXNDLEVBQUU2SSxJQUFJN0ksR0FBR0QsRUFBRXJDLElBQUlzQyxFQUFFdkIsTUFBTXVCLEdBQUdBLEVBQUVBLEVBQUU4dEUsUUFBUSxPQUFPL3RFLEVBQUUsU0FBUzJJLEVBQUUzSSxFQUFFQyxHQUFzQyxPQUFuQ0QsRUFBRW1zRixHQUFHbnNGLEVBQUVDLElBQUt2QixNQUFNLEVBQUVzQixFQUFFK3RFLFFBQVEsS0FBWS90RSxFQUFFLFNBQVM0ekQsRUFBRTN6RCxFQUFFMEgsRUFBRUMsR0FBYSxPQUFWM0gsRUFBRXZCLE1BQU1rSixFQUFNNUgsRUFBNkMsUUFBakI0SCxFQUFFM0gsRUFBRXV0RSxZQUE2QjVsRSxFQUFFQSxFQUFFbEosT0FBUWlKLEdBQUcxSCxFQUFFd3RFLE9BQU8sRUFBRTlsRSxHQUFHQyxHQUFFM0gsRUFBRXd0RSxPQUFPLEVBQVM5bEUsSUFBckcxSCxFQUFFd3RFLE9BQU8sUUFBUTlsRSxHQUFzRixTQUFTa3NELEVBQUU1ekQsR0FDemQsT0FENGRELEdBQzdmLE9BQU9DLEVBQUV1dEUsWUFBWXZ0RSxFQUFFd3RFLE9BQU8sR0FBVXh0RSxFQUFFLFNBQVM2ekQsRUFBRTl6RCxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxPQUFHLE9BQU8zSCxHQUFHLElBQUlBLEVBQUVra0UsTUFBV2xrRSxFQUFFbXNGLEdBQUd6a0YsRUFBRTNILEVBQUVzckYsS0FBSzFqRixJQUFLMDhDLE9BQU90a0QsRUFBRUMsS0FBRUEsRUFBRTBJLEVBQUUxSSxFQUFFMEgsSUFBSzI4QyxPQUFPdGtELEVBQVNDLEdBQUUsU0FBU2liLEVBQUVsYixFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxJQUFJZ3NELEVBQUVqc0QsRUFBRW1jLEtBQUssT0FBRzh2QyxJQUFJaVAsRUFBVTduRCxFQUFFaGIsRUFBRUMsRUFBRTBILEVBQUVtVSxNQUFNa1csU0FBU3BxQixFQUFFRCxFQUFFbUIsS0FBUSxPQUFPN0ksSUFBSUEsRUFBRTZxRixjQUFjbDNCLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVRLFdBQVdrUCxHQUFJMm9CLEdBQUdyNEIsS0FBSzN6RCxFQUFFNmpCLFFBQWFsYyxFQUFFZSxFQUFFMUksRUFBRTBILEVBQUVtVSxRQUFTNkMsSUFBSWt0RSxHQUFHN3JGLEVBQUVDLEVBQUUwSCxHQUFHQyxFQUFFMDhDLE9BQU90a0QsRUFBRTRILEtBQUVBLEVBQUUwbUMsR0FBRzNtQyxFQUFFbWMsS0FBS25jLEVBQUVtQixJQUFJbkIsRUFBRW1VLE1BQU0sS0FBSzliLEVBQUVzckYsS0FBSzFqRixJQUFLK1csSUFBSWt0RSxHQUFHN3JGLEVBQUVDLEVBQUUwSCxHQUFHQyxFQUFFMDhDLE9BQU90a0QsRUFBUzRILEdBQUUsU0FBU21zRCxFQUFFL3pELEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLE9BQUcsT0FBTzNILEdBQUcsSUFBSUEsRUFBRWtrRSxLQUNqZmxrRSxFQUFFbXNFLFVBQVV1RyxnQkFBZ0JockUsRUFBRWdyRSxlQUFlMXlFLEVBQUVtc0UsVUFBVWlnQixpQkFBaUIxa0YsRUFBRTBrRixpQkFBc0Jwc0YsRUFBRXFzRixHQUFHM2tGLEVBQUUzSCxFQUFFc3JGLEtBQUsxakYsSUFBSzA4QyxPQUFPdGtELEVBQUVDLEtBQUVBLEVBQUUwSSxFQUFFMUksRUFBRTBILEVBQUVxcUIsVUFBVSxLQUFNc3lCLE9BQU90a0QsRUFBU0MsR0FBRSxTQUFTK2EsRUFBRWhiLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZ3NELEdBQUcsT0FBRyxPQUFPM3pELEdBQUcsSUFBSUEsRUFBRWtrRSxNQUFXbGtFLEVBQUVzc0YsR0FBRzVrRixFQUFFM0gsRUFBRXNyRixLQUFLMWpGLEVBQUVnc0QsSUFBS3RQLE9BQU90a0QsRUFBRUMsS0FBRUEsRUFBRTBJLEVBQUUxSSxFQUFFMEgsSUFBSzI4QyxPQUFPdGtELEVBQVNDLEdBQUUsU0FBU2swRCxFQUFFbjBELEVBQUVDLEVBQUUwSCxHQUFHLEdBQUcsaUJBQWtCMUgsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsRUFBRSxPQUFPQSxFQUFFbXNGLEdBQUcsR0FBR25zRixFQUFFRCxFQUFFc3JGLEtBQUszakYsSUFBSzI4QyxPQUFPdGtELEVBQUVDLEVBQUUsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUVtMEQsVUFBVSxLQUFLdU8sRUFBRyxPQUFPaDdELEVBQUUybUMsR0FBR3J1QyxFQUFFNmpCLEtBQUs3akIsRUFBRTZJLElBQUk3SSxFQUFFNmIsTUFBTSxLQUFLOWIsRUFBRXNyRixLQUFLM2pGLElBQ2pmZ1gsSUFBSWt0RSxHQUFHN3JGLEVBQUUsS0FBS0MsR0FBRzBILEVBQUUyOEMsT0FBT3RrRCxFQUFFMkgsRUFBRSxLQUFLaTdELEVBQUcsT0FBTzNpRSxFQUFFcXNGLEdBQUdyc0YsRUFBRUQsRUFBRXNyRixLQUFLM2pGLElBQUsyOEMsT0FBT3RrRCxFQUFFQyxFQUFFLEtBQUtxakUsRUFBaUIsT0FBT25QLEVBQUVuMEQsR0FBRTRILEVBQW5CM0gsRUFBRXNrRSxPQUFtQnRrRSxFQUFFcWtFLFVBQVUzOEQsR0FBRyxHQUFHcStELEdBQUcvbEUsSUFBSXdqRSxFQUFHeGpFLEdBQUcsT0FBT0EsRUFBRXNzRixHQUFHdHNGLEVBQUVELEVBQUVzckYsS0FBSzNqRixFQUFFLE9BQVEyOEMsT0FBT3RrRCxFQUFFQyxFQUFFK3JGLEdBQUdoc0YsRUFBRUMsR0FBRyxPQUFPLEtBQUssU0FBUyt6RCxFQUFFaDBELEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLElBQUllLEVBQUUsT0FBTzFJLEVBQUVBLEVBQUU2SSxJQUFJLEtBQUssR0FBRyxpQkFBa0JuQixHQUFHLEtBQUtBLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU8sT0FBT2dCLEVBQUUsS0FBS21yRCxFQUFFOXpELEVBQUVDLEVBQUUsR0FBRzBILEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUV5c0QsVUFBVSxLQUFLdU8sRUFBRyxPQUFPaDdELEVBQUVtQixNQUFNSCxFQUFFdVMsRUFBRWxiLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLEtBQUssS0FBS2c3RCxFQUFHLE9BQU9qN0QsRUFBRW1CLE1BQU1ILEVBQUVvckQsRUFBRS96RCxFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxLQUFLLEtBQUswN0QsRUFBRyxPQUFpQnRQLEVBQUVoMEQsRUFDcGZDLEdBRHdlMEksRUFBRWhCLEVBQUU0OEQsT0FDeGU1OEQsRUFBRTI4RCxVQUFVMThELEdBQUcsR0FBR28rRCxHQUFHcitELElBQUk4N0QsRUFBRzk3RCxHQUFHLE9BQU8sT0FBT2dCLEVBQUUsS0FBS3FTLEVBQUVoYixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRSxNQUFNb2tGLEdBQUdoc0YsRUFBRTJILEdBQUcsT0FBTyxLQUFLLFNBQVM1SSxFQUFFaUIsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLEdBQUcsR0FBRyxpQkFBa0JmLEdBQUcsS0FBS0EsR0FBRyxpQkFBa0JBLEVBQUUsT0FBd0Jrc0QsRUFBRTd6RCxFQUFuQkQsRUFBRUEsRUFBRWpDLElBQUk0SixJQUFJLEtBQVcsR0FBR0MsRUFBRWUsR0FBRyxHQUFHLGlCQUFrQmYsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRXdzRCxVQUFVLEtBQUt1TyxFQUFHLE9BQTJDem5ELEVBQUVqYixFQUF0Q0QsRUFBRUEsRUFBRWpDLElBQUksT0FBTzZKLEVBQUVrQixJQUFJbkIsRUFBRUMsRUFBRWtCLE1BQU0sS0FBV2xCLEVBQUVlLEdBQUcsS0FBS2k2RCxFQUFHLE9BQTJDN08sRUFBRTl6RCxFQUF0Q0QsRUFBRUEsRUFBRWpDLElBQUksT0FBTzZKLEVBQUVrQixJQUFJbkIsRUFBRUMsRUFBRWtCLE1BQU0sS0FBV2xCLEVBQUVlLEdBQUcsS0FBSzI2RCxFQUFpQixPQUFPdmtFLEVBQUVpQixFQUFFQyxFQUFFMEgsR0FBRWlzRCxFQUF2QmhzRCxFQUFFMjhELE9BQXVCMzhELEVBQUUwOEQsVUFBVTM3RCxHQUFHLEdBQUdxOUQsR0FBR3ArRCxJQUFJNjdELEVBQUc3N0QsR0FBRyxPQUF3Qm9ULEVBQUUvYSxFQUFuQkQsRUFBRUEsRUFBRWpDLElBQUk0SixJQUFJLEtBQVdDLEVBQUVlLEVBQUUsTUFBTXFqRixHQUFHL3JGLEVBQUUySCxHQUFHLE9BQU8sS0FDMWYsU0FBUzI3QyxFQUFFNTZDLEVBQUVrckQsRUFBRUMsRUFBRTU0QyxHQUFHLElBQUksSUFBSTY0QyxFQUFFLEtBQUsvNEMsRUFBRSxLQUFLaTVDLEVBQUVKLEVBQUV0USxFQUFFc1EsRUFBRSxFQUFFLzBELEVBQUUsS0FBSyxPQUFPbTFELEdBQUcxUSxFQUFFdVEsRUFBRTV2RCxPQUFPcS9DLElBQUksQ0FBQzBRLEVBQUV2MUQsTUFBTTZrRCxHQUFHemtELEVBQUVtMUQsRUFBRUEsRUFBRSxNQUFNbjFELEVBQUVtMUQsRUFBRThaLFFBQVEsSUFBSTd2RSxFQUFFODFELEVBQUVyckQsRUFBRXNyRCxFQUFFSCxFQUFFdlEsR0FBR3JvQyxHQUFHLEdBQUcsT0FBT2hkLEVBQUUsQ0FBQyxPQUFPKzFELElBQUlBLEVBQUVuMUQsR0FBRyxNQUFNa0IsR0FBR2kwRCxHQUFHLE9BQU8vMUQsRUFBRXN2RSxXQUFXdnRFLEVBQUUwSSxFQUFFc3JELEdBQUdKLEVBQUVELEVBQUUxMUQsRUFBRTIxRCxFQUFFdFEsR0FBRyxPQUFPdm9DLEVBQUUrNEMsRUFBRTcxRCxFQUFFOGMsRUFBRSt5RCxRQUFRN3ZFLEVBQUU4YyxFQUFFOWMsRUFBRSsxRCxFQUFFbjFELEVBQUUsR0FBR3lrRCxJQUFJdVEsRUFBRTV2RCxPQUFPLE9BQU95RCxFQUFFZ0IsRUFBRXNyRCxHQUFHeTJCLElBQUdOLEdBQUd6aEYsRUFBRTQ2QyxHQUFHd1EsRUFBRSxHQUFHLE9BQU9FLEVBQUUsQ0FBQyxLQUFLMVEsRUFBRXVRLEVBQUU1dkQsT0FBT3EvQyxJQUFrQixRQUFkMFEsRUFBRUUsRUFBRXhyRCxFQUFFbXJELEVBQUV2USxHQUFHcm9DLE1BQWMyNEMsRUFBRUQsRUFBRUssRUFBRUosRUFBRXRRLEdBQUcsT0FBT3ZvQyxFQUFFKzRDLEVBQUVFLEVBQUVqNUMsRUFBRSt5RCxRQUFROVosRUFBRWo1QyxFQUFFaTVDLEdBQWMsT0FBWHkyQixJQUFHTixHQUFHemhGLEVBQUU0NkMsR0FBVXdRLEVBQUUsSUFBSUUsRUFBRXJzRCxFQUFFZSxFQUFFc3JELEdBQUcxUSxFQUFFdVEsRUFBRTV2RCxPQUFPcS9DLElBQXNCLFFBQWxCemtELEVBQUVDLEVBQUVrMUQsRUFBRXRyRCxFQUFFNDZDLEVBQUV1USxFQUFFdlEsR0FBR3JvQyxNQUFjbGIsR0FBRyxPQUFPbEIsRUFBRTB1RSxXQUFXdlosRUFBRXQvQyxPQUFPLE9BQ3ZmN1YsRUFBRWdLLElBQUl5NkMsRUFBRXprRCxFQUFFZ0ssS0FBSytxRCxFQUFFRCxFQUFFOTBELEVBQUUrMEQsRUFBRXRRLEdBQUcsT0FBT3ZvQyxFQUFFKzRDLEVBQUVqMUQsRUFBRWtjLEVBQUUreUQsUUFBUWp2RSxFQUFFa2MsRUFBRWxjLEdBQXVELE9BQXBEa0IsR0FBR2kwRCxFQUFFcDBELFNBQVEsU0FBU0csR0FBRyxPQUFPQyxFQUFFMEksRUFBRTNJLE1BQUswcUYsSUFBR04sR0FBR3poRixFQUFFNDZDLEdBQVV3USxFQUFFLFNBQVNHLEVBQUV2ckQsRUFBRWtyRCxFQUFFQyxFQUFFNTRDLEdBQUcsSUFBSTY0QyxFQUFFMFAsRUFBRzNQLEdBQUcsR0FBRyxtQkFBb0JDLEVBQUUsTUFBTTZQLE1BQU1qK0QsRUFBRSxNQUFrQixHQUFHLE9BQWZtdUQsRUFBRUMsRUFBRXh0RCxLQUFLdXRELElBQWMsTUFBTThQLE1BQU1qK0QsRUFBRSxNQUFNLElBQUksSUFBSXFWLEVBQUUrNEMsRUFBRSxLQUFLeFEsRUFBRXNRLEVBQUVJLEVBQUVKLEVBQUUsRUFBRS8wRCxFQUFFLEtBQUtaLEVBQUU0MUQsRUFBRXptRCxPQUFPLE9BQU9rMkMsSUFBSXJsRCxFQUFFa1MsS0FBSzZqRCxJQUFJLzFELEVBQUU0MUQsRUFBRXptRCxPQUFPLENBQUNrMkMsRUFBRTdrRCxNQUFNdTFELEdBQUduMUQsRUFBRXlrRCxFQUFFQSxFQUFFLE1BQU16a0QsRUFBRXlrRCxFQUFFd3FCLFFBQVEsSUFBSTdaLEVBQUVGLEVBQUVyckQsRUFBRTQ2QyxFQUFFcmxELEVBQUVtRCxNQUFNNlosR0FBRyxHQUFHLE9BQU9nNUMsRUFBRSxDQUFDLE9BQU8zUSxJQUFJQSxFQUFFemtELEdBQUcsTUFBTWtCLEdBQUd1akQsR0FBRyxPQUFPMlEsRUFBRXNaLFdBQVd2dEUsRUFBRTBJLEVBQUU0NkMsR0FBR3NRLEVBQUVELEVBQUVNLEVBQUVMLEVBQUVJLEdBQUcsT0FBT2o1QyxFQUFFKzRDLEVBQUVHLEVBQUVsNUMsRUFBRSt5RCxRQUFRN1osRUFBRWw1QyxFQUFFazVDLEVBQUUzUSxFQUFFemtELEVBQUUsR0FBR1osRUFBRWtTLEtBQUssT0FBT3pJLEVBQUVnQixFQUN6ZjQ2QyxHQUFHbW5DLElBQUdOLEdBQUd6aEYsRUFBRXNyRCxHQUFHRixFQUFFLEdBQUcsT0FBT3hRLEVBQUUsQ0FBQyxNQUFNcmxELEVBQUVrUyxLQUFLNmpELElBQUkvMUQsRUFBRTQxRCxFQUFFem1ELE9BQXdCLFFBQWpCblAsRUFBRWkyRCxFQUFFeHJELEVBQUV6SyxFQUFFbUQsTUFBTTZaLE1BQWMyNEMsRUFBRUQsRUFBRTExRCxFQUFFMjFELEVBQUVJLEdBQUcsT0FBT2o1QyxFQUFFKzRDLEVBQUU3MUQsRUFBRThjLEVBQUUreUQsUUFBUTd2RSxFQUFFOGMsRUFBRTljLEdBQWMsT0FBWHdzRixJQUFHTixHQUFHemhGLEVBQUVzckQsR0FBVUYsRUFBRSxJQUFJeFEsRUFBRTM3QyxFQUFFZSxFQUFFNDZDLElBQUlybEQsRUFBRWtTLEtBQUs2akQsSUFBSS8xRCxFQUFFNDFELEVBQUV6bUQsT0FBNEIsUUFBckJuUCxFQUFFYSxFQUFFd2tELEVBQUU1NkMsRUFBRXNyRCxFQUFFLzFELEVBQUVtRCxNQUFNNlosTUFBY2xiLEdBQUcsT0FBTzlCLEVBQUVzdkUsV0FBV2pxQixFQUFFNXVDLE9BQU8sT0FBT3pXLEVBQUU0SyxJQUFJbXJELEVBQUUvMUQsRUFBRTRLLEtBQUsrcUQsRUFBRUQsRUFBRTExRCxFQUFFMjFELEVBQUVJLEdBQUcsT0FBT2o1QyxFQUFFKzRDLEVBQUU3MUQsRUFBRThjLEVBQUUreUQsUUFBUTd2RSxFQUFFOGMsRUFBRTljLEdBQXVELE9BQXBEOEIsR0FBR3VqRCxFQUFFMWpELFNBQVEsU0FBU0csR0FBRyxPQUFPQyxFQUFFMEksRUFBRTNJLE1BQUswcUYsSUFBR04sR0FBR3poRixFQUFFc3JELEdBQVVGLEVBRzFULE9BSDRULFNBQVM4dEIsRUFBRTdoRixFQUFFNEgsRUFBRWdzRCxFQUFFRSxHQUFrRixHQUEvRSxpQkFBa0JGLEdBQUcsT0FBT0EsR0FBR0EsRUFBRTl2QyxPQUFPKytDLEdBQUksT0FBT2pQLEVBQUU5cUQsTUFBTThxRCxFQUFFQSxFQUFFOTNDLE1BQU1rVyxVQUFhLGlCQUFrQjRoQyxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFUSxVQUFVLEtBQUt1TyxFQUFHM2lFLEVBQUUsQ0FBQyxJQUFJLElBQUlrYixFQUM3aEIwNEMsRUFBRTlxRCxJQUFJaXJELEVBQUVuc0QsRUFBRSxPQUFPbXNELEdBQUcsQ0FBQyxHQUFHQSxFQUFFanJELE1BQU1vUyxFQUFFLENBQVUsSUFBVEEsRUFBRTA0QyxFQUFFOXZDLFFBQVkrK0MsR0FBSSxHQUFHLElBQUk5TyxFQUFFb1EsSUFBSSxDQUFDeDhELEVBQUUzSCxFQUFFK3pELEVBQUVnYSxVQUFTbm1FLEVBQUVlLEVBQUVvckQsRUFBRUgsRUFBRTkzQyxNQUFNa1csV0FBWXN5QixPQUFPdGtELEVBQUVBLEVBQUU0SCxFQUFFLE1BQU01SCxRQUFRLEdBQUcrekQsRUFBRSsyQixjQUFjNXZFLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVrNUMsV0FBV2tQLEdBQUkyb0IsR0FBRy93RSxLQUFLNjRDLEVBQUVqd0MsS0FBSyxDQUFDbmMsRUFBRTNILEVBQUUrekQsRUFBRWdhLFVBQVNubUUsRUFBRWUsRUFBRW9yRCxFQUFFSCxFQUFFOTNDLFFBQVM2QyxJQUFJa3RFLEdBQUc3ckYsRUFBRSt6RCxFQUFFSCxHQUFHaHNELEVBQUUwOEMsT0FBT3RrRCxFQUFFQSxFQUFFNEgsRUFBRSxNQUFNNUgsRUFBRTJILEVBQUUzSCxFQUFFK3pELEdBQUcsTUFBVzl6RCxFQUFFRCxFQUFFK3pELEdBQUdBLEVBQUVBLEVBQUVnYSxRQUFRbmEsRUFBRTl2QyxPQUFPKytDLElBQUlqN0QsRUFBRTJrRixHQUFHMzRCLEVBQUU5M0MsTUFBTWtXLFNBQVNoeUIsRUFBRXNyRixLQUFLeDNCLEVBQUVGLEVBQUU5cUQsTUFBT3c3QyxPQUFPdGtELEVBQUVBLEVBQUU0SCxLQUFJa3NELEVBQUV4bEIsR0FBR3NsQixFQUFFOXZDLEtBQUs4dkMsRUFBRTlxRCxJQUFJOHFELEVBQUU5M0MsTUFBTSxLQUFLOWIsRUFBRXNyRixLQUFLeDNCLElBQUtuMUMsSUFBSWt0RSxHQUFHN3JGLEVBQUU0SCxFQUFFZ3NELEdBQUdFLEVBQUV4UCxPQUFPdGtELEVBQUVBLEVBQUU4ekQsR0FBRyxPQUFPRCxFQUFFN3pELEdBQUcsS0FBSzRpRSxFQUFHNWlFLEVBQUUsQ0FBQyxJQUFJK3pELEVBQUVILEVBQUU5cUQsSUFBSSxPQUN6ZmxCLEdBQUcsQ0FBQyxHQUFHQSxFQUFFa0IsTUFBTWlyRCxFQUFFLElBQUcsSUFBSW5zRCxFQUFFdThELEtBQUt2OEQsRUFBRXdrRSxVQUFVdUcsZ0JBQWdCL2UsRUFBRStlLGVBQWUvcUUsRUFBRXdrRSxVQUFVaWdCLGlCQUFpQno0QixFQUFFeTRCLGVBQWUsQ0FBQzFrRixFQUFFM0gsRUFBRTRILEVBQUVtbUUsVUFBU25tRSxFQUFFZSxFQUFFZixFQUFFZ3NELEVBQUU1aEMsVUFBVSxLQUFNc3lCLE9BQU90a0QsRUFBRUEsRUFBRTRILEVBQUUsTUFBTTVILEVBQU8ySCxFQUFFM0gsRUFBRTRILEdBQUcsTUFBVzNILEVBQUVELEVBQUU0SCxHQUFHQSxFQUFFQSxFQUFFbW1FLFNBQVFubUUsRUFBRTBrRixHQUFHMTRCLEVBQUU1ekQsRUFBRXNyRixLQUFLeDNCLElBQUt4UCxPQUFPdGtELEVBQUVBLEVBQUU0SCxFQUFFLE9BQU9pc0QsRUFBRTd6RCxHQUFHLEtBQUtzakUsRUFBRyxPQUFpQnVlLEVBQUU3aEYsRUFBRTRILEdBQWRtc0QsRUFBRUgsRUFBRTJRLE9BQWMzUSxFQUFFMFEsVUFBVXhRLEdBQUcsR0FBR2tTLEdBQUdwUyxHQUFHLE9BQU9yUSxFQUFFdmpELEVBQUU0SCxFQUFFZ3NELEVBQUVFLEdBQUcsR0FBRzJQLEVBQUc3UCxHQUFHLE9BQU9NLEVBQUVsMEQsRUFBRTRILEVBQUVnc0QsRUFBRUUsR0FBR2s0QixHQUFHaHNGLEVBQUU0ekQsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLE9BQU9oc0QsR0FBRyxJQUFJQSxFQUFFdThELEtBQUt4OEQsRUFBRTNILEVBQUU0SCxFQUFFbW1FLFVBQVNubUUsRUFBRWUsRUFBRWYsRUFBRWdzRCxJQUFLdFAsT0FBT3RrRCxFQUFFQSxFQUFFNEgsSUFDbmZELEVBQUUzSCxFQUFFNEgsSUFBR0EsRUFBRXdrRixHQUFHeDRCLEVBQUU1ekQsRUFBRXNyRixLQUFLeDNCLElBQUt4UCxPQUFPdGtELEVBQUVBLEVBQUU0SCxHQUFHaXNELEVBQUU3ekQsSUFBSTJILEVBQUUzSCxFQUFFNEgsSUFBWSxJQUFJNGtGLEdBQUdOLElBQUcsR0FBSU8sR0FBR1AsSUFBRyxHQUFJUSxHQUFHLEdBQUdDLEdBQUd0SSxHQUFHcUksSUFBSUUsR0FBR3ZJLEdBQUdxSSxJQUFJRyxHQUFHeEksR0FBR3FJLElBQUksU0FBU0ksR0FBRzlzRixHQUFHLEdBQUdBLElBQUkwc0YsR0FBRyxNQUFNOW9CLE1BQU1qK0QsRUFBRSxNQUFNLE9BQU8zRixFQUFFLFNBQVMrc0YsR0FBRy9zRixFQUFFQyxHQUF5QyxPQUF0Q3NrRixHQUFFc0ksR0FBRzVzRixHQUFHc2tGLEdBQUVxSSxHQUFHNXNGLEdBQUd1a0YsR0FBRW9JLEdBQUdELElBQUkxc0YsRUFBRUMsRUFBRXluRSxVQUFtQixLQUFLLEVBQUUsS0FBSyxHQUFHem5FLEdBQUdBLEVBQUVBLEVBQUU2aUQsaUJBQWlCN2lELEVBQUU4bUUsYUFBYUgsR0FBRyxLQUFLLElBQUksTUFBTSxRQUFrRTNtRSxFQUFFMm1FLEdBQXJDM21FLEdBQXZCRCxFQUFFLElBQUlBLEVBQUVDLEVBQUU2ckUsV0FBVzdyRSxHQUFNOG1FLGNBQWMsS0FBSy9tRSxFQUFFQSxFQUFFNjBCLFNBQWtCeXZELEdBQUVxSSxJQUFJcEksR0FBRW9JLEdBQUcxc0YsR0FBRyxTQUFTK3NGLEtBQUsxSSxHQUFFcUksSUFBSXJJLEdBQUVzSSxJQUFJdEksR0FBRXVJLElBQ2hiLFNBQVNJLEdBQUdqdEYsR0FBRzhzRixHQUFHRCxHQUFHei9FLFNBQVMsSUFBSW5OLEVBQUU2c0YsR0FBR0gsR0FBR3YvRSxTQUFhekYsRUFBRWkvRCxHQUFHM21FLEVBQUVELEVBQUU4akIsTUFBTTdqQixJQUFJMEgsSUFBSTQ4RSxHQUFFcUksR0FBRzVzRixHQUFHdWtGLEdBQUVvSSxHQUFHaGxGLElBQUksU0FBU3VsRixHQUFHbHRGLEdBQUc0c0YsR0FBR3gvRSxVQUFVcE4sSUFBSXNrRixHQUFFcUksSUFBSXJJLEdBQUVzSSxLQUFLLElBQUlPLEdBQUU5SSxHQUFHLEdBQ3JKLFNBQVMrSSxHQUFHcHRGLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFLE9BQU9DLEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUVra0UsSUFBSSxDQUFDLElBQUl4OEQsRUFBRTFILEVBQUUwdEUsY0FBYyxHQUFHLE9BQU9obUUsSUFBbUIsUUFBZkEsRUFBRUEsRUFBRWltRSxhQUFxQixPQUFPam1FLEVBQUVySyxNQUFNLE9BQU9xSyxFQUFFckssTUFBTSxPQUFPMkMsT0FBTyxHQUFHLEtBQUtBLEVBQUVra0UsVUFBSyxJQUFTbGtFLEVBQUV5ckYsY0FBYzJCLGFBQWEsR0FBRyxJQUFhLElBQVJwdEYsRUFBRXd0RSxPQUFXLE9BQU94dEUsT0FBTyxHQUFHLE9BQU9BLEVBQUVpeUIsTUFBTSxDQUFDanlCLEVBQUVpeUIsTUFBTW95QixPQUFPcmtELEVBQUVBLEVBQUVBLEVBQUVpeUIsTUFBTSxTQUFTLEdBQUdqeUIsSUFBSUQsRUFBRSxNQUFNLEtBQUssT0FBT0MsRUFBRTh0RSxTQUFTLENBQUMsR0FBRyxPQUFPOXRFLEVBQUVxa0QsUUFBUXJrRCxFQUFFcWtELFNBQVN0a0QsRUFBRSxPQUFPLEtBQUtDLEVBQUVBLEVBQUVxa0QsT0FBT3JrRCxFQUFFOHRFLFFBQVF6cEIsT0FBT3JrRCxFQUFFcWtELE9BQU9ya0QsRUFBRUEsRUFBRTh0RSxRQUFRLE9BQU8sS0FBSyxJQUFJdWYsR0FBRyxHQUNyYyxTQUFTQyxLQUFLLElBQUksSUFBSXZ0RixFQUFFLEVBQUVBLEVBQUVzdEYsR0FBR3BwRixPQUFPbEUsSUFBSXN0RixHQUFHdHRGLEdBQUd3dEYsOEJBQThCLEtBQUtGLEdBQUdwcEYsT0FBTyxFQUFFLElBQUl1cEYsR0FBR2hyQixFQUFHaXJCLHVCQUF1QkMsR0FBR2xyQixFQUFHMlEsd0JBQXdCd2EsR0FBRyxFQUFFQyxHQUFFLEtBQUtDLEdBQUUsS0FBS0MsR0FBRSxLQUFLQyxJQUFHLEVBQUdDLElBQUcsRUFBR0MsR0FBRyxFQUFFQyxHQUFHLEVBQUUsU0FBU0MsS0FBSSxNQUFNeHFCLE1BQU1qK0QsRUFBRSxNQUFPLFNBQVMwb0YsR0FBR3J1RixFQUFFQyxHQUFHLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJMEgsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRWlFLFFBQVF5RCxFQUFFM0gsRUFBRWtFLE9BQU95RCxJQUFJLElBQUk4MUUsR0FBR3o5RSxFQUFFMkgsR0FBRzFILEVBQUUwSCxJQUFJLE9BQU0sRUFBRyxPQUFNLEVBQzlWLFNBQVMybUYsR0FBR3R1RixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsRUFBRWlyRCxHQUF5SCxHQUF0SGc2QixHQUFHaDZCLEVBQUVpNkIsR0FBRTV0RixFQUFFQSxFQUFFMHRFLGNBQWMsS0FBSzF0RSxFQUFFZ25GLFlBQVksS0FBS2huRixFQUFFeW1GLE1BQU0sRUFBRStHLEdBQUdyZ0YsUUFBUSxPQUFPcE4sR0FBRyxPQUFPQSxFQUFFMnRFLGNBQWM0Z0IsR0FBR0MsR0FBR3h1RixFQUFFMkgsRUFBRUMsRUFBRWUsR0FBTXNsRixHQUFHLENBQUNyNkIsRUFBRSxFQUFFLEVBQUUsQ0FBWSxHQUFYcTZCLElBQUcsRUFBR0MsR0FBRyxFQUFLLElBQUl0NkIsRUFBRSxNQUFNZ1EsTUFBTWorRCxFQUFFLE1BQU1pdUQsR0FBRyxFQUFFbTZCLEdBQUVELEdBQUUsS0FBSzd0RixFQUFFZ25GLFlBQVksS0FBS3dHLEdBQUdyZ0YsUUFBUXFoRixHQUFHenVGLEVBQUUySCxFQUFFQyxFQUFFZSxTQUFTc2xGLElBQWtFLEdBQTlEUixHQUFHcmdGLFFBQVFzaEYsR0FBR3p1RixFQUFFLE9BQU82dEYsSUFBRyxPQUFPQSxHQUFFemdGLEtBQUt1Z0YsR0FBRyxFQUFFRyxHQUFFRCxHQUFFRCxHQUFFLEtBQUtHLElBQUcsRUFBTS90RixFQUFFLE1BQU0yakUsTUFBTWorRCxFQUFFLE1BQU0sT0FBTzNGLEVBQUUsU0FBUzJ1RixLQUFLLElBQUkzdUYsRUFBRSxJQUFJa3VGLEdBQVEsT0FBTEEsR0FBRyxFQUFTbHVGLEVBQzlZLFNBQVM0dUYsS0FBSyxJQUFJNXVGLEVBQUUsQ0FBQzJ0RSxjQUFjLEtBQUt1WixVQUFVLEtBQUsySCxVQUFVLEtBQUtDLE1BQU0sS0FBS3poRixLQUFLLE1BQThDLE9BQXhDLE9BQU8wZ0YsR0FBRUYsR0FBRWxnQixjQUFjb2dCLEdBQUUvdEYsRUFBRSt0RixHQUFFQSxHQUFFMWdGLEtBQUtyTixFQUFTK3RGLEdBQUUsU0FBU2dCLEtBQUssR0FBRyxPQUFPakIsR0FBRSxDQUFDLElBQUk5dEYsRUFBRTZ0RixHQUFFcmdCLFVBQVV4dEUsRUFBRSxPQUFPQSxFQUFFQSxFQUFFMnRFLGNBQWMsVUFBVTN0RSxFQUFFOHRGLEdBQUV6Z0YsS0FBSyxJQUFJcE4sRUFBRSxPQUFPOHRGLEdBQUVGLEdBQUVsZ0IsY0FBY29nQixHQUFFMWdGLEtBQUssR0FBRyxPQUFPcE4sRUFBRTh0RixHQUFFOXRGLEVBQUU2dEYsR0FBRTl0RixNQUFNLENBQUMsR0FBRyxPQUFPQSxFQUFFLE1BQU00akUsTUFBTWorRCxFQUFFLE1BQVUzRixFQUFFLENBQUMydEUsZUFBUG1nQixHQUFFOXRGLEdBQXFCMnRFLGNBQWN1WixVQUFVNEcsR0FBRTVHLFVBQVUySCxVQUFVZixHQUFFZSxVQUFVQyxNQUFNaEIsR0FBRWdCLE1BQU16aEYsS0FBSyxNQUFNLE9BQU8wZ0YsR0FBRUYsR0FBRWxnQixjQUFjb2dCLEdBQUUvdEYsRUFBRSt0RixHQUFFQSxHQUFFMWdGLEtBQUtyTixFQUFFLE9BQU8rdEYsR0FDaGUsU0FBU2lCLEdBQUdodkYsRUFBRUMsR0FBRyxNQUFNLG1CQUFvQkEsRUFBRUEsRUFBRUQsR0FBR0MsRUFDbEQsU0FBU2d2RixHQUFHanZGLEdBQUcsSUFBSUMsRUFBRTh1RixLQUFLcG5GLEVBQUUxSCxFQUFFNnVGLE1BQU0sR0FBRyxPQUFPbm5GLEVBQUUsTUFBTWk4RCxNQUFNaitELEVBQUUsTUFBTWdDLEVBQUV1bkYsb0JBQW9CbHZGLEVBQUUsSUFBSTRILEVBQUVrbUYsR0FBRW5sRixFQUFFZixFQUFFaW5GLFVBQVVqN0IsRUFBRWpzRCxFQUFFMi9FLFFBQVEsR0FBRyxPQUFPMXpCLEVBQUUsQ0FBQyxHQUFHLE9BQU9qckQsRUFBRSxDQUFDLElBQUlrckQsRUFBRWxyRCxFQUFFMEUsS0FBSzFFLEVBQUUwRSxLQUFLdW1ELEVBQUV2bUQsS0FBS3VtRCxFQUFFdm1ELEtBQUt3bUQsRUFBRWpzRCxFQUFFaW5GLFVBQVVsbUYsRUFBRWlyRCxFQUFFanNELEVBQUUyL0UsUUFBUSxLQUFLLEdBQUcsT0FBTzMrRSxFQUFFLENBQUNpckQsRUFBRWpyRCxFQUFFMEUsS0FBS3pGLEVBQUVBLEVBQUVzL0UsVUFBVSxJQUFJcHpCLEVBQUVELEVBQUUsS0FBSzM0QyxFQUFFLEtBQUs2NEMsRUFBRUgsRUFBRSxFQUFFLENBQUMsSUFBSTU0QyxFQUFFKzRDLEVBQUU2ekIsS0FBSyxJQUFJZ0csR0FBRzV5RSxLQUFLQSxFQUFFLE9BQU9FLElBQUlBLEVBQUVBLEVBQUU3TixLQUFLLENBQUN1NkUsS0FBSyxFQUFFdHhFLE9BQU95OUMsRUFBRXo5QyxPQUFPNjRFLGNBQWNwN0IsRUFBRW83QixjQUFjQyxXQUFXcjdCLEVBQUVxN0IsV0FBVy9oRixLQUFLLE9BQU96RixFQUFFbXNELEVBQUVvN0IsY0FBY3A3QixFQUFFcTdCLFdBQVdwdkYsRUFBRTRILEVBQUVtc0QsRUFBRXo5QyxZQUFZLENBQUMsSUFBSTY5QyxFQUFFLENBQUN5ekIsS0FBSzVzRSxFQUFFMUUsT0FBT3k5QyxFQUFFejlDLE9BQU82NEUsY0FBY3A3QixFQUFFbzdCLGNBQ25nQkMsV0FBV3I3QixFQUFFcTdCLFdBQVcvaEYsS0FBSyxNQUFNLE9BQU82TixHQUFHNDRDLEVBQUU1NEMsRUFBRWk1QyxFQUFFTixFQUFFanNELEdBQUdzVCxFQUFFQSxFQUFFN04sS0FBSzhtRCxFQUFFMDVCLEdBQUVuSCxPQUFPMXJFLEVBQUVtdEUsSUFBSW50RSxFQUFFKzRDLEVBQUVBLEVBQUUxbUQsV0FBVyxPQUFPMG1ELEdBQUdBLElBQUlILEdBQUcsT0FBTzE0QyxFQUFFMjRDLEVBQUVqc0QsRUFBRXNULEVBQUU3TixLQUFLeW1ELEVBQUUycEIsR0FBRzcxRSxFQUFFM0gsRUFBRTB0RSxpQkFBaUJnWixJQUFHLEdBQUkxbUYsRUFBRTB0RSxjQUFjL2xFLEVBQUUzSCxFQUFFaW5GLFVBQVVyekIsRUFBRTV6RCxFQUFFNHVGLFVBQVUzekUsRUFBRXZULEVBQUUwbkYsa0JBQWtCem5GLEVBQWtCLEdBQUcsUUFBbkI1SCxFQUFFMkgsRUFBRTQvRSxhQUF3QixDQUFDNStFLEVBQUUzSSxFQUFFLEdBQUc0ekQsRUFBRWpyRCxFQUFFaS9FLEtBQUtpRyxHQUFFbkgsT0FBTzl5QixFQUFFdTBCLElBQUl2MEIsRUFBRWpyRCxFQUFFQSxFQUFFMEUsV0FBVzFFLElBQUkzSSxRQUFRLE9BQU8ySSxJQUFJaEIsRUFBRSsrRSxNQUFNLEdBQUcsTUFBTSxDQUFDem1GLEVBQUUwdEUsY0FBY2htRSxFQUFFMm5GLFVBQ3JYLFNBQVNDLEdBQUd2dkYsR0FBRyxJQUFJQyxFQUFFOHVGLEtBQUtwbkYsRUFBRTFILEVBQUU2dUYsTUFBTSxHQUFHLE9BQU9ubkYsRUFBRSxNQUFNaThELE1BQU1qK0QsRUFBRSxNQUFNZ0MsRUFBRXVuRixvQkFBb0JsdkYsRUFBRSxJQUFJNEgsRUFBRUQsRUFBRTJuRixTQUFTM21GLEVBQUVoQixFQUFFMi9FLFFBQVExekIsRUFBRTN6RCxFQUFFMHRFLGNBQWMsR0FBRyxPQUFPaGxFLEVBQUUsQ0FBQ2hCLEVBQUUyL0UsUUFBUSxLQUFLLElBQUl6ekIsRUFBRWxyRCxFQUFFQSxFQUFFMEUsS0FBSyxHQUFHdW1ELEVBQUU1ekQsRUFBRTR6RCxFQUFFQyxFQUFFdjlDLFFBQVF1OUMsRUFBRUEsRUFBRXhtRCxXQUFXd21ELElBQUlsckQsR0FBRzgwRSxHQUFHN3BCLEVBQUUzekQsRUFBRTB0RSxpQkFBaUJnWixJQUFHLEdBQUkxbUYsRUFBRTB0RSxjQUFjL1osRUFBRSxPQUFPM3pELEVBQUU0dUYsWUFBWTV1RixFQUFFaW5GLFVBQVV0ekIsR0FBR2pzRCxFQUFFMG5GLGtCQUFrQno3QixFQUFFLE1BQU0sQ0FBQ0EsRUFBRWhzRCxHQUFHLFNBQVM0bkYsTUFDL1YsU0FBU0MsR0FBR3p2RixFQUFFQyxHQUFHLElBQUkwSCxFQUFFa21GLEdBQUVqbUYsRUFBRW1uRixLQUFLcG1GLEVBQUUxSSxJQUFJMnpELEdBQUc2cEIsR0FBRzcxRSxFQUFFK2xFLGNBQWNobEUsR0FBc0UsR0FBbkVpckQsSUFBSWhzRCxFQUFFK2xFLGNBQWNobEUsRUFBRWcrRSxJQUFHLEdBQUkvK0UsRUFBRUEsRUFBRWtuRixNQUFNWSxHQUFHQyxHQUFHaE8sS0FBSyxLQUFLaDZFLEVBQUVDLEVBQUU1SCxHQUFHLENBQUNBLElBQU80SCxFQUFFZ29GLGNBQWMzdkYsR0FBRzJ6RCxHQUFHLE9BQU9tNkIsSUFBdUIsRUFBcEJBLEdBQUVwZ0IsY0FBY3hKLElBQU0sQ0FBdUQsR0FBdER4OEQsRUFBRThsRSxPQUFPLEtBQUtvaUIsR0FBRyxFQUFFQyxHQUFHbk8sS0FBSyxLQUFLaDZFLEVBQUVDLEVBQUVlLEVBQUUxSSxRQUFHLEVBQU8sTUFBUyxPQUFPOHZGLEdBQUUsTUFBTW5zQixNQUFNaitELEVBQUUsTUFBTSxJQUFRLEdBQUhpb0YsS0FBUW9DLEdBQUdyb0YsRUFBRTFILEVBQUUwSSxHQUFHLE9BQU9BLEVBQUUsU0FBU3FuRixHQUFHaHdGLEVBQUVDLEVBQUUwSCxHQUFHM0gsRUFBRXl0RSxPQUFPLE1BQU16dEUsRUFBRSxDQUFDNHZGLFlBQVkzdkYsRUFBRW9CLE1BQU1zRyxHQUFtQixRQUFoQjFILEVBQUU0dEYsR0FBRTVHLGNBQXNCaG5GLEVBQUUsQ0FBQ2d3RixXQUFXLEtBQUtDLE9BQU8sTUFBTXJDLEdBQUU1RyxZQUFZaG5GLEVBQUVBLEVBQUVpd0YsT0FBTyxDQUFDbHdGLElBQWdCLFFBQVgySCxFQUFFMUgsRUFBRWl3RixRQUFnQmp3RixFQUFFaXdGLE9BQU8sQ0FBQ2x3RixHQUFHMkgsRUFBRXBKLEtBQUt5QixHQUMvZSxTQUFTOHZGLEdBQUc5dkYsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUczSCxFQUFFb0IsTUFBTXNHLEVBQUUxSCxFQUFFMnZGLFlBQVlob0YsRUFBRXVvRixHQUFHbHdGLElBQUk0b0YsR0FBRzdvRixFQUFFLEdBQUcsR0FBRyxTQUFTMnZGLEdBQUczdkYsRUFBRUMsRUFBRTBILEdBQUcsT0FBT0EsR0FBRSxXQUFXd29GLEdBQUdsd0YsSUFBSTRvRixHQUFHN29GLEVBQUUsR0FBRyxNQUFLLFNBQVNtd0YsR0FBR253RixHQUFHLElBQUlDLEVBQUVELEVBQUU0dkYsWUFBWTV2RixFQUFFQSxFQUFFcUIsTUFBTSxJQUFJLElBQUlzRyxFQUFFMUgsSUFBSSxPQUFPdzlFLEdBQUd6OUUsRUFBRTJILEdBQUcsTUFBTUMsR0FBRyxPQUFNLEdBQUksU0FBU3dvRixHQUFHcHdGLEdBQUcsSUFBSUMsRUFBRTJ1RixLQUE4TSxNQUF6TSxtQkFBb0I1dUYsSUFBSUEsRUFBRUEsS0FBS0MsRUFBRTB0RSxjQUFjMXRFLEVBQUVpbkYsVUFBVWxuRixFQUFFQSxFQUFFLENBQUNzbkYsUUFBUSxLQUFLQyxZQUFZLEtBQUtiLE1BQU0sRUFBRTRJLFNBQVMsS0FBS0osb0JBQW9CRixHQUFHSyxrQkFBa0JydkYsR0FBR0MsRUFBRTZ1RixNQUFNOXVGLEVBQUVBLEVBQUVBLEVBQUVzdkYsU0FBU2UsR0FBRzFPLEtBQUssS0FBS2tNLEdBQUU3dEYsR0FBUyxDQUFDQyxFQUFFMHRFLGNBQWMzdEUsR0FDbmQsU0FBUzZ2RixHQUFHN3ZGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUE4TyxPQUEzTzVILEVBQUUsQ0FBQ21rRSxJQUFJbmtFLEVBQUVpYixPQUFPaGIsRUFBRWdpQixRQUFRdGEsRUFBRTJvRixLQUFLMW9GLEVBQUV5RixLQUFLLE1BQXNCLFFBQWhCcE4sRUFBRTR0RixHQUFFNUcsY0FBc0JobkYsRUFBRSxDQUFDZ3dGLFdBQVcsS0FBS0MsT0FBTyxNQUFNckMsR0FBRTVHLFlBQVlobkYsRUFBRUEsRUFBRWd3RixXQUFXandGLEVBQUVxTixLQUFLck4sR0FBbUIsUUFBZjJILEVBQUUxSCxFQUFFZ3dGLFlBQW9CaHdGLEVBQUVnd0YsV0FBV2p3RixFQUFFcU4sS0FBS3JOLEdBQUc0SCxFQUFFRCxFQUFFMEYsS0FBSzFGLEVBQUUwRixLQUFLck4sRUFBRUEsRUFBRXFOLEtBQUt6RixFQUFFM0gsRUFBRWd3RixXQUFXandGLEdBQVdBLEVBQUUsU0FBU3V3RixLQUFLLE9BQU94QixLQUFLcGhCLGNBQWMsU0FBUzZpQixHQUFHeHdGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLElBQUllLEVBQUVpbUYsS0FBS2YsR0FBRXBnQixPQUFPenRFLEVBQUUySSxFQUFFZ2xFLGNBQWNraUIsR0FBRyxFQUFFNXZGLEVBQUUwSCxPQUFFLE9BQU8sSUFBU0MsRUFBRSxLQUFLQSxHQUM1WSxTQUFTNm9GLEdBQUd6d0YsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUcsSUFBSWUsRUFBRW9tRixLQUFLbm5GLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFLElBQUlnc0QsT0FBRSxFQUFPLEdBQUcsT0FBT2s2QixHQUFFLENBQUMsSUFBSWo2QixFQUFFaTZCLEdBQUVuZ0IsY0FBMEIsR0FBWi9aLEVBQUVDLEVBQUU1eEMsUUFBVyxPQUFPcmEsR0FBR3ltRixHQUFHem1GLEVBQUVpc0QsRUFBRXk4QixNQUFtQyxZQUE1QjNuRixFQUFFZ2xFLGNBQWNraUIsR0FBRzV2RixFQUFFMEgsRUFBRWlzRCxFQUFFaHNELElBQVdpbUYsR0FBRXBnQixPQUFPenRFLEVBQUUySSxFQUFFZ2xFLGNBQWNraUIsR0FBRyxFQUFFNXZGLEVBQUUwSCxFQUFFaXNELEVBQUVoc0QsR0FBRyxTQUFTOG9GLEdBQUcxd0YsRUFBRUMsR0FBRyxPQUFPdXdGLEdBQUcsUUFBUSxFQUFFeHdGLEVBQUVDLEdBQUcsU0FBU3l2RixHQUFHMXZGLEVBQUVDLEdBQUcsT0FBT3d3RixHQUFHLEtBQUssRUFBRXp3RixFQUFFQyxHQUFHLFNBQVMwd0YsR0FBRzN3RixFQUFFQyxHQUFHLE9BQU93d0YsR0FBRyxFQUFFLEVBQUV6d0YsRUFBRUMsR0FBRyxTQUFTMndGLEdBQUc1d0YsRUFBRUMsR0FBRyxPQUFPd3dGLEdBQUcsRUFBRSxFQUFFendGLEVBQUVDLEdBQzlXLFNBQVM0d0YsR0FBRzd3RixFQUFFQyxHQUFHLE1BQUcsbUJBQW9CQSxHQUFTRCxFQUFFQSxJQUFJQyxFQUFFRCxHQUFHLFdBQVdDLEVBQUUsUUFBVSxNQUFPQSxHQUFxQkQsRUFBRUEsSUFBSUMsRUFBRW1OLFFBQVFwTixFQUFFLFdBQVdDLEVBQUVtTixRQUFRLFlBQXRFLEVBQTRFLFNBQVMwakYsR0FBRzl3RixFQUFFQyxFQUFFMEgsR0FBNkMsT0FBMUNBLEVBQUUsTUFBT0EsRUFBY0EsRUFBRTZiLE9BQU8sQ0FBQ3hqQixJQUFJLEtBQVl5d0YsR0FBRyxFQUFFLEVBQUVJLEdBQUdsUCxLQUFLLEtBQUsxaEYsRUFBRUQsR0FBRzJILEdBQUcsU0FBU29wRixNQUFNLFNBQVNDLEdBQUdoeEYsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRW9uRixLQUFLOXVGLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFLElBQUkySCxFQUFFRCxFQUFFZ21FLGNBQWMsT0FBRyxPQUFPL2xFLEdBQUcsT0FBTzNILEdBQUdvdUYsR0FBR3B1RixFQUFFMkgsRUFBRSxJQUFXQSxFQUFFLElBQUdELEVBQUVnbUUsY0FBYyxDQUFDM3RFLEVBQUVDLEdBQVVELEdBQzVaLFNBQVNpeEYsR0FBR2p4RixFQUFFQyxHQUFHLElBQUkwSCxFQUFFb25GLEtBQUs5dUYsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSTJILEVBQUVELEVBQUVnbUUsY0FBYyxPQUFHLE9BQU8vbEUsR0FBRyxPQUFPM0gsR0FBR291RixHQUFHcHVGLEVBQUUySCxFQUFFLElBQVdBLEVBQUUsSUFBRzVILEVBQUVBLElBQUkySCxFQUFFZ21FLGNBQWMsQ0FBQzN0RSxFQUFFQyxHQUFVRCxHQUFFLFNBQVNreEYsR0FBR2x4RixFQUFFQyxFQUFFMEgsR0FBRyxPQUFHLElBQVEsR0FBSGltRixLQUFjNXRGLEVBQUVrbkYsWUFBWWxuRixFQUFFa25GLFdBQVUsRUFBR1AsSUFBRyxHQUFJM21GLEVBQUUydEUsY0FBY2htRSxJQUFFODFFLEdBQUc5MUUsRUFBRTFILEtBQUswSCxFQUFFZ3BFLEtBQUtrZCxHQUFFbkgsT0FBTy8rRSxFQUFFd2dGLElBQUl4Z0YsRUFBRTNILEVBQUVrbkYsV0FBVSxHQUFXam5GLEdBQUUsU0FBU2t4RixHQUFHbnhGLEVBQUVDLEdBQUcsSUFBSTBILEVBQUVxcEUsR0FBRUEsR0FBRSxJQUFJcnBFLEdBQUcsRUFBRUEsRUFBRUEsRUFBRSxFQUFFM0gsR0FBRSxHQUFJLElBQUk0SCxFQUFFK2xGLEdBQUczMEUsV0FBVzIwRSxHQUFHMzBFLFdBQVcsR0FBRyxJQUFJaFosR0FBRSxHQUFJQyxJQUFJLFFBQVErd0UsR0FBRXJwRSxFQUFFZ21GLEdBQUczMEUsV0FBV3BSLEdBQUcsU0FBU3dwRixLQUFLLE9BQU9yQyxLQUFLcGhCLGNBQzdjLFNBQVMwakIsR0FBR3J4RixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFZ2hGLEdBQUc1b0YsR0FBRzJILEVBQUUsQ0FBQ2lnRixLQUFLaGdGLEVBQUUwTyxPQUFPM08sRUFBRXduRixlQUFjLEVBQUdDLFdBQVcsS0FBSy9oRixLQUFLLE1BQU1pa0YsR0FBR3R4RixHQUFHdXhGLEdBQUd0eEYsRUFBRTBILElBQUk2cEYsR0FBR3h4RixFQUFFQyxFQUFFMEgsR0FBc0IsUUFBWjNILEVBQUU2b0YsR0FBRzdvRixFQUFFNEgsRUFBZEQsRUFBRWdoRixRQUEyQjhJLEdBQUd6eEYsRUFBRUMsRUFBRTJILElBQzNKLFNBQVN5b0YsR0FBR3J3RixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFZ2hGLEdBQUc1b0YsR0FBRzJJLEVBQUUsQ0FBQ2kvRSxLQUFLaGdGLEVBQUUwTyxPQUFPM08sRUFBRXduRixlQUFjLEVBQUdDLFdBQVcsS0FBSy9oRixLQUFLLE1BQU0sR0FBR2lrRixHQUFHdHhGLEdBQUd1eEYsR0FBR3R4RixFQUFFMEksT0FBTyxDQUFDNm9GLEdBQUd4eEYsRUFBRUMsRUFBRTBJLEdBQUcsSUFBSWlyRCxFQUFFNXpELEVBQUV3dEUsVUFBVSxHQUFHLElBQUl4dEUsRUFBRTBtRixRQUFRLE9BQU85eUIsR0FBRyxJQUFJQSxFQUFFOHlCLFFBQWlDLFFBQXhCOXlCLEVBQUUzekQsRUFBRWl2RixxQkFBOEIsSUFBSSxJQUFJcjdCLEVBQUU1ekQsRUFBRW92RixrQkFBa0J2N0IsRUFBRUYsRUFBRUMsRUFBRWxzRCxHQUFxQyxHQUFsQ2dCLEVBQUV3bUYsZUFBYyxFQUFHeG1GLEVBQUV5bUYsV0FBV3Q3QixFQUFLMnBCLEdBQUczcEIsRUFBRUQsR0FBRyxPQUFPLE1BQU0zNEMsSUFBZ0MsUUFBWmxiLEVBQUU2b0YsR0FBRzdvRixFQUFFNEgsRUFBZEQsRUFBRWdoRixRQUEyQjhJLEdBQUd6eEYsRUFBRUMsRUFBRTJILElBQUksU0FBUzBwRixHQUFHdHhGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXd0RSxVQUFVLE9BQU94dEUsSUFBSTZ0RixJQUFHLE9BQU81dEYsR0FBR0EsSUFBSTR0RixHQUMvYSxTQUFTMEQsR0FBR3Z4RixFQUFFQyxHQUFHZ3VGLEdBQUdELElBQUcsRUFBRyxJQUFJcm1GLEVBQUUzSCxFQUFFc25GLFFBQVEsT0FBTzMvRSxFQUFFMUgsRUFBRW9OLEtBQUtwTixHQUFHQSxFQUFFb04sS0FBSzFGLEVBQUUwRixLQUFLMUYsRUFBRTBGLEtBQUtwTixHQUFHRCxFQUFFc25GLFFBQVFybkYsRUFBRSxTQUFTdXhGLEdBQUd4eEYsRUFBRUMsRUFBRTBILEdBQUdvZ0YsR0FBRy9uRixJQUFvQixRQUFoQkEsRUFBRUMsRUFBRXNuRixjQUFzQjUvRSxFQUFFMEYsS0FBSzFGLEVBQUUsT0FBT20vRSxHQUFHQSxHQUFHLENBQUM3bUYsR0FBRzZtRixHQUFHdm9GLEtBQUswQixLQUFLMEgsRUFBRTBGLEtBQUtyTixFQUFFcU4sS0FBS3JOLEVBQUVxTixLQUFLMUYsR0FBRzFILEVBQUVzbkYsWUFBWTUvRSxJQUFnQixRQUFaM0gsRUFBRUMsRUFBRXFuRixTQUFpQjMvRSxFQUFFMEYsS0FBSzFGLEdBQUdBLEVBQUUwRixLQUFLck4sRUFBRXFOLEtBQUtyTixFQUFFcU4sS0FBSzFGLEdBQUcxSCxFQUFFcW5GLFFBQVEzL0UsR0FBRyxTQUFTOHBGLEdBQUd6eEYsRUFBRUMsRUFBRTBILEdBQUcsR0FBRyxJQUFPLFFBQUZBLEdBQVcsQ0FBQyxJQUFJQyxFQUFFM0gsRUFBRXltRixNQUF3Qi8rRSxHQUFsQkMsR0FBRzVILEVBQUVvd0UsYUFBa0Jud0UsRUFBRXltRixNQUFNLytFLEVBQUVvcEUsR0FBRy93RSxFQUFFMkgsSUFDclksSUFBSSttRixHQUFHLENBQUNnRCxZQUFZOUssR0FBR3psRCxZQUFZaXRELEdBQUU5d0UsV0FBVzh3RSxHQUFFeHdFLFVBQVV3d0UsR0FBRXVELG9CQUFvQnZELEdBQUV3RCxtQkFBbUJ4RCxHQUFFendFLGdCQUFnQnl3RSxHQUFFdnVELFFBQVF1dUQsR0FBRXlELFdBQVd6RCxHQUFFcHVFLE9BQU9vdUUsR0FBRTd2RSxTQUFTNnZFLEdBQUUwRCxjQUFjMUQsR0FBRTJELGlCQUFpQjNELEdBQUU0RCxjQUFjNUQsR0FBRTZELGlCQUFpQjdELEdBQUU4RCxxQkFBcUI5RCxHQUFFcGdELE1BQU1vZ0QsR0FBRStELDBCQUF5QixHQUFJNUQsR0FBRyxDQUFDbUQsWUFBWTlLLEdBQUd6bEQsWUFBWSxTQUFTbmhDLEVBQUVDLEdBQTRDLE9BQXpDMnVGLEtBQUtqaEIsY0FBYyxDQUFDM3RFLE9BQUUsSUFBU0MsRUFBRSxLQUFLQSxHQUFVRCxHQUFHc2QsV0FBV3NwRSxHQUFHaHBFLFVBQVU4eUUsR0FBR2lCLG9CQUFvQixTQUFTM3hGLEVBQUVDLEVBQUUwSCxHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFNmIsT0FBTyxDQUFDeGpCLElBQUksS0FBWXd3RixHQUFHLFFBQzNmLEVBQUVLLEdBQUdsUCxLQUFLLEtBQUsxaEYsRUFBRUQsR0FBRzJILElBQUlnVyxnQkFBZ0IsU0FBUzNkLEVBQUVDLEdBQUcsT0FBT3V3RixHQUFHLFFBQVEsRUFBRXh3RixFQUFFQyxJQUFJMnhGLG1CQUFtQixTQUFTNXhGLEVBQUVDLEdBQUcsT0FBT3V3RixHQUFHLEVBQUUsRUFBRXh3RixFQUFFQyxJQUFJNC9CLFFBQVEsU0FBUzcvQixFQUFFQyxHQUFHLElBQUkwSCxFQUFFaW5GLEtBQXFELE9BQWhEM3VGLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFRCxFQUFFQSxJQUFJMkgsRUFBRWdtRSxjQUFjLENBQUMzdEUsRUFBRUMsR0FBVUQsR0FBRzZ4RixXQUFXLFNBQVM3eEYsRUFBRUMsRUFBRTBILEdBQUcsSUFBSUMsRUFBRWduRixLQUFrTSxPQUE3TDN1RixPQUFFLElBQVMwSCxFQUFFQSxFQUFFMUgsR0FBR0EsRUFBRTJILEVBQUUrbEUsY0FBYy9sRSxFQUFFcy9FLFVBQVVqbkYsRUFBRUQsRUFBRSxDQUFDc25GLFFBQVEsS0FBS0MsWUFBWSxLQUFLYixNQUFNLEVBQUU0SSxTQUFTLEtBQUtKLG9CQUFvQmx2RixFQUFFcXZGLGtCQUFrQnB2RixHQUFHMkgsRUFBRWtuRixNQUFNOXVGLEVBQUVBLEVBQUVBLEVBQUVzdkYsU0FBUytCLEdBQUcxUCxLQUFLLEtBQUtrTSxHQUFFN3RGLEdBQVMsQ0FBQzRILEVBQUUrbEUsY0FBYzN0RSxJQUFJZ2dCLE9BQU8sU0FBU2hnQixHQUMzZCxPQUFkQSxFQUFFLENBQUNvTixRQUFRcE4sR0FBaEI0dUYsS0FBNEJqaEIsY0FBYzN0RSxHQUFHdWUsU0FBUzZ4RSxHQUFHMEIsY0FBY2YsR0FBR2dCLGlCQUFpQixTQUFTL3hGLEdBQUcsT0FBTzR1RixLQUFLamhCLGNBQWMzdEUsR0FBR2d5RixjQUFjLFdBQVcsSUFBSWh5RixFQUFFb3dGLElBQUcsR0FBSW53RixFQUFFRCxFQUFFLEdBQTZDLE9BQTFDQSxFQUFFbXhGLEdBQUd4UCxLQUFLLEtBQUszaEYsRUFBRSxJQUFJNHVGLEtBQUtqaEIsY0FBYzN0RSxFQUFRLENBQUNDLEVBQUVELElBQUlpeUYsaUJBQWlCLGFBQWFDLHFCQUFxQixTQUFTbHlGLEVBQUVDLEVBQUUwSCxHQUFHLElBQUlDLEVBQUVpbUYsR0FBRWxsRixFQUFFaW1GLEtBQUssR0FBR2xFLEdBQUUsQ0FBQyxRQUFHLElBQVMvaUYsRUFBRSxNQUFNaThELE1BQU1qK0QsRUFBRSxNQUFNZ0MsRUFBRUEsUUFBUSxDQUFPLEdBQU5BLEVBQUUxSCxJQUFPLE9BQU84dkYsR0FBRSxNQUFNbnNCLE1BQU1qK0QsRUFBRSxNQUFNLElBQVEsR0FBSGlvRixLQUFRb0MsR0FBR3BvRixFQUFFM0gsRUFBRTBILEdBQUdnQixFQUFFZ2xFLGNBQWNobUUsRUFBRSxJQUFJaXNELEVBQUUsQ0FBQ3Z5RCxNQUFNc0csRUFBRWlvRixZQUFZM3ZGLEdBQ3ZaLE9BRDBaMEksRUFBRW1tRixNQUFNbDdCLEVBQUU4OEIsR0FBR2YsR0FBR2hPLEtBQUssS0FBSy81RSxFQUNwZmdzRCxFQUFFNXpELEdBQUcsQ0FBQ0EsSUFBSTRILEVBQUU2bEUsT0FBTyxLQUFLb2lCLEdBQUcsRUFBRUMsR0FBR25PLEtBQUssS0FBSy81RSxFQUFFZ3NELEVBQUVqc0QsRUFBRTFILFFBQUcsRUFBTyxNQUFhMEgsR0FBR3FtQyxNQUFNLFdBQVcsSUFBSWh1QyxFQUFFNHVGLEtBQUszdUYsRUFBRTh2RixHQUFFcUMsaUJBQWlCLEdBQUcxSCxHQUFFLENBQUMsSUFBSS9pRixFQUFFd2lGLEdBQWtEbHFGLEVBQUUsSUFBSUEsRUFBRSxLQUE5QzBILEdBQUh1aUYsS0FBVSxHQUFHLEdBQUd4YSxHQUFoQndhLElBQXNCLElBQUloakIsU0FBUyxJQUFJdi9ELEdBQXVCLEdBQVBBLEVBQUV1bUYsUUFBV2p1RixHQUFHLElBQUkwSCxFQUFFdS9ELFNBQVMsS0FBS2puRSxHQUFHLFNBQWdCQSxFQUFFLElBQUlBLEVBQUUsS0FBZjBILEVBQUV3bUYsTUFBbUJqbkIsU0FBUyxJQUFJLElBQUksT0FBT2xuRSxFQUFFMnRFLGNBQWMxdEUsR0FBR2t5RiwwQkFBeUIsR0FBSTNELEdBQUcsQ0FBQ2tELFlBQVk5SyxHQUFHemxELFlBQVk2dkQsR0FBRzF6RSxXQUFXc3BFLEdBQUdocEUsVUFBVTh4RSxHQUFHaUMsb0JBQW9CYixHQUFHYyxtQkFBbUJqQixHQUFHaHpFLGdCQUFnQml6RSxHQUFHL3dELFFBQVFveEQsR0FBR1ksV0FBVzVDLEdBQUdqdkUsT0FBT3V3RSxHQUFHaHlFLFNBQVMsV0FBVyxPQUFPMHdFLEdBQUdELEtBQ2xoQjhDLGNBQWNmLEdBQUdnQixpQkFBaUIsU0FBUy94RixHQUFjLE9BQU9reEYsR0FBWm5DLEtBQWlCakIsR0FBRW5nQixjQUFjM3RFLElBQUlneUYsY0FBYyxXQUFnRCxNQUFNLENBQXJDL0MsR0FBR0QsSUFBSSxHQUFLRCxLQUFLcGhCLGdCQUEyQnNrQixpQkFBaUJ6QyxHQUFHMEMscUJBQXFCekMsR0FBR3poRCxNQUFNb2pELEdBQUdlLDBCQUF5QixHQUFJMUQsR0FBRyxDQUFDaUQsWUFBWTlLLEdBQUd6bEQsWUFBWTZ2RCxHQUFHMXpFLFdBQVdzcEUsR0FBR2hwRSxVQUFVOHhFLEdBQUdpQyxvQkFBb0JiLEdBQUdjLG1CQUFtQmpCLEdBQUdoekUsZ0JBQWdCaXpFLEdBQUcvd0QsUUFBUW94RCxHQUFHWSxXQUFXdEMsR0FBR3Z2RSxPQUFPdXdFLEdBQUdoeUUsU0FBUyxXQUFXLE9BQU9neEUsR0FBR1AsS0FBSzhDLGNBQWNmLEdBQUdnQixpQkFBaUIsU0FBUy94RixHQUFHLElBQUlDLEVBQUU4dUYsS0FBSyxPQUFPLE9BQ3pmakIsR0FBRTd0RixFQUFFMHRFLGNBQWMzdEUsRUFBRWt4RixHQUFHanhGLEVBQUU2dEYsR0FBRW5nQixjQUFjM3RFLElBQUlneUYsY0FBYyxXQUFnRCxNQUFNLENBQXJDekMsR0FBR1AsSUFBSSxHQUFLRCxLQUFLcGhCLGdCQUEyQnNrQixpQkFBaUJ6QyxHQUFHMEMscUJBQXFCekMsR0FBR3poRCxNQUFNb2pELEdBQUdlLDBCQUF5QixHQUFJLFNBQVNFLEdBQUdyeUYsRUFBRUMsR0FBRyxJQUFJLElBQUkwSCxFQUFFLEdBQUdDLEVBQUUzSCxFQUFFLEdBQUcwSCxHQUFHdThELEVBQUd0OEQsR0FBR0EsRUFBRUEsRUFBRTA4QyxhQUFhMThDLEdBQUcsSUFBSWUsRUFBRWhCLEVBQUUsTUFBTWlzRCxHQUFHanJELEVBQUUsNkJBQTZCaXJELEVBQUVybkIsUUFBUSxLQUFLcW5CLEVBQUV2M0IsTUFBTSxNQUFNLENBQUNoN0IsTUFBTXJCLEVBQUVzdEIsT0FBT3J0QixFQUFFbzhCLE1BQU0xekIsR0FBRyxTQUFTMnBGLEdBQUd0eUYsRUFBRUMsR0FBRyxJQUFJdXNDLFFBQVE2WCxNQUFNcGtELEVBQUVvQixPQUFPLE1BQU1zRyxHQUFHb2pCLFlBQVcsV0FBVyxNQUFNcGpCLE1BQ3JjLElBRzZPNHFGLEdBQU1DLEdBQUdDLEdBSGxQQyxHQUFHLG1CQUFvQm4xRixRQUFRQSxRQUFRTyxJQUFJLFNBQVM2MEYsR0FBRzN5RixFQUFFQyxFQUFFMEgsSUFBR0EsRUFBRSsvRSxJQUFJLEVBQUUvL0UsSUFBS3c4RCxJQUFJLEVBQUV4OEQsRUFBRWtnRixRQUFRLENBQUNwcUYsUUFBUSxNQUFNLElBQUltSyxFQUFFM0gsRUFBRW9CLE1BQXNELE9BQWhEc0csRUFBRTBwQixTQUFTLFdBQVd1aEUsS0FBS0EsSUFBRyxFQUFHQyxHQUFHanJGLEdBQUcwcUYsR0FBR3R5RixFQUFFQyxJQUFXMEgsRUFDbkwsU0FBU21yRixHQUFHOXlGLEVBQUVDLEVBQUUwSCxJQUFHQSxFQUFFKy9FLElBQUksRUFBRS8vRSxJQUFLdzhELElBQUksRUFBRSxJQUFJdjhELEVBQUU1SCxFQUFFOGpCLEtBQUsrdEMseUJBQXlCLEdBQUcsbUJBQW9CanFELEVBQUUsQ0FBQyxJQUFJZSxFQUFFMUksRUFBRW9CLE1BQU1zRyxFQUFFa2dGLFFBQVEsV0FBVyxPQUFPamdGLEVBQUVlLElBQUloQixFQUFFMHBCLFNBQVMsV0FBV2loRSxHQUFHdHlGLEVBQUVDLElBQUksSUFBSTJ6RCxFQUFFNXpELEVBQUVvc0UsVUFBOE8sT0FBcE8sT0FBT3hZLEdBQUcsbUJBQW9CQSxFQUFFbS9CLG9CQUFvQnByRixFQUFFMHBCLFNBQVMsV0FBV2loRSxHQUFHdHlGLEVBQUVDLEdBQUcsbUJBQW9CMkgsSUFBSSxPQUFPb3JGLEdBQUdBLEdBQUcsSUFBSTd5RixJQUFJLENBQUNwRCxPQUFPaTJGLEdBQUd2b0YsSUFBSTFOLE9BQU8sSUFBSTRLLEVBQUUxSCxFQUFFbzhCLE1BQU10L0IsS0FBS2cyRixrQkFBa0I5eUYsRUFBRW9CLE1BQU0sQ0FBQzR4RixlQUFlLE9BQU90ckYsRUFBRUEsRUFBRSxPQUFjQSxFQUNsYixTQUFTdXJGLEdBQUdsekYsRUFBRUMsRUFBRTBILEdBQUcsSUFBSUMsRUFBRTVILEVBQUVtekYsVUFBVSxHQUFHLE9BQU92ckYsRUFBRSxDQUFDQSxFQUFFNUgsRUFBRW16RixVQUFVLElBQUlULEdBQUcsSUFBSS9wRixFQUFFLElBQUl4SSxJQUFJeUgsRUFBRWpLLElBQUlzQyxFQUFFMEksYUFBbUIsS0FBWEEsRUFBRWYsRUFBRTdKLElBQUlrQyxNQUFnQjBJLEVBQUUsSUFBSXhJLElBQUl5SCxFQUFFakssSUFBSXNDLEVBQUUwSSxJQUFJQSxFQUFFakwsSUFBSWlLLEtBQUtnQixFQUFFOEIsSUFBSTlDLEdBQUczSCxFQUFFb3pGLEdBQUd6UixLQUFLLEtBQUszaEYsRUFBRUMsRUFBRTBILEdBQUcxSCxFQUFFaEQsS0FBSytDLEVBQUVBLElBQUksU0FBU3F6RixHQUFHcnpGLEdBQUcsRUFBRSxDQUFDLElBQUlDLEVBQTRFLElBQXZFQSxFQUFFLEtBQUtELEVBQUVta0UsT0FBc0Jsa0UsRUFBRSxRQUFwQkEsRUFBRUQsRUFBRTJ0RSxnQkFBeUIsT0FBTzF0RSxFQUFFMnRFLFlBQXVCM3RFLEVBQUUsT0FBT0QsRUFBRUEsRUFBRUEsRUFBRXNrRCxhQUFhLE9BQU90a0QsR0FBRyxPQUFPLEtBQzVWLFNBQVNzekYsR0FBR3R6RixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsR0FBRyxPQUFHLElBQVksRUFBUDNJLEVBQUVzckYsT0FBZXRyRixJQUFJQyxFQUFFRCxFQUFFeXRFLE9BQU8sT0FBT3p0RSxFQUFFeXRFLE9BQU8sSUFBSTlsRSxFQUFFOGxFLE9BQU8sT0FBTzlsRSxFQUFFOGxFLFFBQVEsTUFBTSxJQUFJOWxFLEVBQUV3OEQsTUFBTSxPQUFPeDhELEVBQUU2bEUsVUFBVTdsRSxFQUFFdzhELElBQUksS0FBSWxrRSxFQUFFeW5GLElBQUksRUFBRSxJQUFLdmpCLElBQUksRUFBRTJqQixHQUFHbmdGLEVBQUUxSCxLQUFLMEgsRUFBRSsrRSxPQUFPLEdBQUcxbUYsSUFBRUEsRUFBRXl0RSxPQUFPLE1BQU16dEUsRUFBRTBtRixNQUFNLzlFLEVBQVMzSSxHQUt2TyxTQUFTdXpGLEdBQUd2ekYsRUFBRUMsR0FBRyxJQUFJeXFGLEdBQUUsT0FBTzFxRixFQUFFd3pGLFVBQVUsSUFBSyxTQUFTdnpGLEVBQUVELEVBQUV5ekYsS0FBSyxJQUFJLElBQUk5ckYsRUFBRSxLQUFLLE9BQU8xSCxHQUFHLE9BQU9BLEVBQUV1dEUsWUFBWTdsRSxFQUFFMUgsR0FBR0EsRUFBRUEsRUFBRTh0RSxRQUFRLE9BQU9wbUUsRUFBRTNILEVBQUV5ekYsS0FBSyxLQUFLOXJGLEVBQUVvbUUsUUFBUSxLQUFLLE1BQU0sSUFBSyxZQUFZcG1FLEVBQUUzSCxFQUFFeXpGLEtBQUssSUFBSSxJQUFJN3JGLEVBQUUsS0FBSyxPQUFPRCxHQUFHLE9BQU9BLEVBQUU2bEUsWUFBWTVsRSxFQUFFRCxHQUFHQSxFQUFFQSxFQUFFb21FLFFBQVEsT0FBT25tRSxFQUFFM0gsR0FBRyxPQUFPRCxFQUFFeXpGLEtBQUt6ekYsRUFBRXl6RixLQUFLLEtBQUt6ekYsRUFBRXl6RixLQUFLMWxCLFFBQVEsS0FBS25tRSxFQUFFbW1FLFFBQVEsTUFDdlUsU0FBUzJsQixHQUFFMXpGLEdBQUcsSUFBSUMsRUFBRSxPQUFPRCxFQUFFd3RFLFdBQVd4dEUsRUFBRXd0RSxVQUFVdDdDLFFBQVFseUIsRUFBRWt5QixNQUFNdnFCLEVBQUUsRUFBRUMsRUFBRSxFQUFFLEdBQUczSCxFQUFFLElBQUksSUFBSTBJLEVBQUUzSSxFQUFFa3lCLE1BQU0sT0FBT3ZwQixHQUFHaEIsR0FBR2dCLEVBQUUrOUUsTUFBTS85RSxFQUFFMjlFLFdBQVcxK0UsR0FBa0IsU0FBZmUsRUFBRWdyRixhQUFzQi9yRixHQUFXLFNBQVJlLEVBQUU4a0UsTUFBZTlrRSxFQUFFMjdDLE9BQU90a0QsRUFBRTJJLEVBQUVBLEVBQUVvbEUsYUFBYSxJQUFJcGxFLEVBQUUzSSxFQUFFa3lCLE1BQU0sT0FBT3ZwQixHQUFHaEIsR0FBR2dCLEVBQUUrOUUsTUFBTS85RSxFQUFFMjlFLFdBQVcxK0UsR0FBR2UsRUFBRWdyRixhQUFhL3JGLEdBQUdlLEVBQUU4a0UsTUFBTTlrRSxFQUFFMjdDLE9BQU90a0QsRUFBRTJJLEVBQUVBLEVBQUVvbEUsUUFBeUMsT0FBakMvdEUsRUFBRTJ6RixjQUFjL3JGLEVBQUU1SCxFQUFFc21GLFdBQVczK0UsRUFBUzFILEVBQzVWLFNBQVMyekYsR0FBRzV6RixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFM0gsRUFBRWdyRixhQUFtQixPQUFOVixHQUFHdHFGLEdBQVVBLEVBQUVra0UsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBT3V2QixHQUFFenpGLEdBQUcsS0FBSyxLQUFLLEVBVTNHLEtBQUssR0FBRyxPQUFPOGtGLEdBQUc5a0YsRUFBRTZqQixPQUFPa2hFLEtBQUswTyxHQUFFenpGLEdBQUcsS0FWMEcsS0FBSyxFQUEyUSxPQUF6UTJILEVBQUUzSCxFQUFFbXNFLFVBQVU0Z0IsS0FBSzFJLEdBQUVJLElBQUlKLEdBQUVHLElBQUc4SSxLQUFLM2xGLEVBQUVpc0YsaUJBQWlCanNGLEVBQUV1USxRQUFRdlEsRUFBRWlzRixlQUFlanNGLEVBQUVpc0YsZUFBZSxNQUFTLE9BQU83ekYsR0FBRyxPQUFPQSxFQUFFa3lCLFFBQU11NUQsR0FBR3hyRixHQUFHQSxFQUFFd3RFLE9BQU8sRUFBRSxPQUFPenRFLEdBQUdBLEVBQUUydEUsY0FBYytFLGNBQWMsSUFBYSxJQUFSenlFLEVBQUV3dEUsU0FBYXh0RSxFQUFFd3RFLE9BQU8sS0FBSyxPQUFPa2QsS0FBS21KLEdBQUduSixJQUFJQSxHQUFHLFFBQWUrSSxHQUFFenpGLEdBQVUsS0FBSyxLQUFLLEVBQUVpdEYsR0FBR2p0RixHQUFHLElBQUkwSSxFQUFFbWtGLEdBQUdELEdBQUd6L0UsU0FDN2UsR0FBVHpGLEVBQUUxSCxFQUFFNmpCLEtBQVEsT0FBTzlqQixHQUFHLE1BQU1DLEVBQUVtc0UsVUFBVW9tQixHQUFHeHlGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFLNUgsRUFBRTJlLE1BQU0xZSxFQUFFMGUsTUFBTTFlLEVBQUV3dEUsT0FBTyxJQUFJeHRFLEVBQUV3dEUsT0FBTyxhQUFhLENBQUMsSUFBSTdsRSxFQUFFLENBQUMsR0FBRyxPQUFPM0gsRUFBRW1zRSxVQUFVLE1BQU14SSxNQUFNaitELEVBQUUsTUFBVyxPQUFMK3RGLEdBQUV6ekYsR0FBVSxLQUFzQixHQUFqQkQsRUFBRThzRixHQUFHSCxHQUFHdi9FLFNBQVlxK0UsR0FBR3hyRixHQUFHLENBQUMySCxFQUFFM0gsRUFBRW1zRSxVQUFVemtFLEVBQUUxSCxFQUFFNmpCLEtBQUssSUFBSTh2QyxFQUFFM3pELEVBQUV5ckYsY0FBK0MsT0FBakM5akYsRUFBRW04RSxJQUFJOWpGLEVBQUUySCxFQUFFbzhFLElBQUlwd0IsRUFBRTV6RCxFQUFFLElBQVksRUFBUEMsRUFBRXFyRixNQUFlM2pGLEdBQUcsSUFBSyxTQUFTeTVFLEdBQUUsU0FBU3g1RSxHQUFHdzVFLEdBQUUsUUFBUXg1RSxHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVF3NUUsR0FBRSxPQUFPeDVFLEdBQUcsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUllLEVBQUUsRUFBRUEsRUFBRXE0RSxHQUFHOThFLE9BQU95RSxJQUFJeTRFLEdBQUVKLEdBQUdyNEUsR0FBR2YsR0FBRyxNQUFNLElBQUssU0FBU3c1RSxHQUFFLFFBQVF4NUUsR0FBRyxNQUFNLElBQUssTUFBTSxJQUFLLFFBQVEsSUFBSyxPQUFPdzVFLEdBQUUsUUFDbmhCeDVFLEdBQUd3NUUsR0FBRSxPQUFPeDVFLEdBQUcsTUFBTSxJQUFLLFVBQVV3NUUsR0FBRSxTQUFTeDVFLEdBQUcsTUFBTSxJQUFLLFFBQVE4OUQsRUFBRzk5RCxFQUFFZ3NELEdBQUd3dEIsR0FBRSxVQUFVeDVFLEdBQUcsTUFBTSxJQUFLLFNBQVNBLEVBQUU0OUQsY0FBYyxDQUFDdXVCLGNBQWNuZ0MsRUFBRW9nQyxVQUFVNVMsR0FBRSxVQUFVeDVFLEdBQUcsTUFBTSxJQUFLLFdBQVcyK0QsR0FBRzMrRCxFQUFFZ3NELEdBQUd3dEIsR0FBRSxVQUFVeDVFLEdBQWtCLElBQUksSUFBSWlzRCxLQUF2QjBYLEdBQUc1akUsRUFBRWlzRCxHQUFHanJELEVBQUUsS0FBa0JpckQsRUFBRSxHQUFHQSxFQUFFdnJELGVBQWV3ckQsR0FBRyxDQUFDLElBQUlDLEVBQUVGLEVBQUVDLEdBQUcsYUFBYUEsRUFBRSxpQkFBa0JDLEVBQUVsc0QsRUFBRTgrRCxjQUFjNVMsS0FBSSxJQUFLRixFQUFFcWdDLDBCQUEwQm5SLEdBQUdsN0UsRUFBRTgrRCxZQUFZNVMsRUFBRTl6RCxHQUFHMkksRUFBRSxDQUFDLFdBQVdtckQsSUFBSSxpQkFBa0JBLEdBQUdsc0QsRUFBRTgrRCxjQUFjLEdBQUc1UyxLQUFJLElBQUtGLEVBQUVxZ0MsMEJBQTBCblIsR0FBR2w3RSxFQUFFOCtELFlBQzFlNVMsRUFBRTl6RCxHQUFHMkksRUFBRSxDQUFDLFdBQVcsR0FBR21yRCxJQUFJbU4sRUFBRzU0RCxlQUFld3JELElBQUksTUFBTUMsR0FBRyxhQUFhRCxHQUFHdXRCLEdBQUUsU0FBU3g1RSxHQUFHLE9BQU9ELEdBQUcsSUFBSyxRQUFRaTlELEVBQUdoOUQsR0FBR2tqRCxFQUFHbGpELEVBQUVnc0QsR0FBRSxHQUFJLE1BQU0sSUFBSyxXQUFXZ1IsRUFBR2g5RCxHQUFHNitELEdBQUc3K0QsR0FBRyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsTUFBTSxRQUFRLG1CQUFvQmdzRCxFQUFFc2dDLFVBQVV0c0YsRUFBRXVzRixRQUFRcFIsSUFBSW43RSxFQUFFZSxFQUFFMUksRUFBRWduRixZQUFZci9FLEVBQUUsT0FBT0EsSUFBSTNILEVBQUV3dEUsT0FBTyxPQUFPLENBQUM1WixFQUFFLElBQUlsckQsRUFBRSsrRCxTQUFTLytELEVBQUVBLEVBQUVvOUQsY0FBYyxpQ0FBaUMvbEUsSUFBSUEsRUFBRTJtRSxHQUFHaC9ELElBQUksaUNBQWlDM0gsRUFBRSxXQUFXMkgsSUFBRzNILEVBQUU2ekQsRUFBRTlyRCxjQUFjLFFBQVNpL0QsVUFBVSxxQkFBdUJobkUsRUFBRUEsRUFBRW9uRSxZQUFZcG5FLEVBQUVtbkUsYUFDL2YsaUJBQWtCdi9ELEVBQUU2akUsR0FBR3pyRSxFQUFFNnpELEVBQUU5ckQsY0FBY0osRUFBRSxDQUFDOGpFLEdBQUc3akUsRUFBRTZqRSxNQUFNenJFLEVBQUU2ekQsRUFBRTlyRCxjQUFjSixHQUFHLFdBQVdBLElBQUlrc0QsRUFBRTd6RCxFQUFFNEgsRUFBRW9zRixTQUFTbmdDLEVBQUVtZ0MsVUFBUyxFQUFHcHNGLEVBQUVtZSxPQUFPOHRDLEVBQUU5dEMsS0FBS25lLEVBQUVtZSxRQUFRL2xCLEVBQUU2ekQsRUFBRXVnQyxnQkFBZ0JwMEYsRUFBRTJILEdBQUczSCxFQUFFK2pGLElBQUk5akYsRUFBRUQsRUFBRWdrRixJQUFJcDhFLEVBQUUycUYsR0FBR3Z5RixFQUFFQyxHQUFTQSxFQUFFbXNFLFVBQVVwc0UsRUFBRUEsRUFBRSxDQUFXLE9BQVY2ekQsRUFBRTJYLEdBQUc3akUsRUFBRUMsR0FBVUQsR0FBRyxJQUFLLFNBQVN5NUUsR0FBRSxTQUFTcGhGLEdBQUdvaEYsR0FBRSxRQUFRcGhGLEdBQUcySSxFQUFFZixFQUFFLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVF3NUUsR0FBRSxPQUFPcGhGLEdBQUcySSxFQUFFZixFQUFFLE1BQU0sSUFBSyxRQUFRLElBQUssUUFBUSxJQUFJZSxFQUFFLEVBQUVBLEVBQUVxNEUsR0FBRzk4RSxPQUFPeUUsSUFBSXk0RSxHQUFFSixHQUFHcjRFLEdBQUczSSxHQUFHMkksRUFBRWYsRUFBRSxNQUFNLElBQUssU0FBU3c1RSxHQUFFLFFBQVFwaEYsR0FBRzJJLEVBQUVmLEVBQUUsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBT3c1RSxHQUFFLFFBQ2xmcGhGLEdBQUdvaEYsR0FBRSxPQUFPcGhGLEdBQUcySSxFQUFFZixFQUFFLE1BQU0sSUFBSyxVQUFVdzVFLEdBQUUsU0FBU3BoRixHQUFHMkksRUFBRWYsRUFBRSxNQUFNLElBQUssUUFBUTg5RCxFQUFHMWxFLEVBQUU0SCxHQUFHZSxFQUFFMjhELEVBQUd0bEUsRUFBRTRILEdBQUd3NUUsR0FBRSxVQUFVcGhGLEdBQUcsTUFBTSxJQUFLLFNBQWlMLFFBQVEySSxFQUFFZixRQUF4SyxJQUFLLFNBQVM1SCxFQUFFd2xFLGNBQWMsQ0FBQ3V1QixjQUFjbnNGLEVBQUVvc0YsVUFBVXJyRixFQUFFMHJELEVBQUUsR0FBR3pzRCxFQUFFLENBQUN2RyxXQUFNLElBQVMrL0UsR0FBRSxVQUFVcGhGLEdBQUcsTUFBTSxJQUFLLFdBQVd1bUUsR0FBR3ZtRSxFQUFFNEgsR0FBR2UsRUFBRTA5RCxHQUFHcm1FLEVBQUU0SCxHQUFHdzVFLEdBQUUsVUFBVXBoRixHQUFpQyxJQUFJNHpELEtBQWhCMlgsR0FBRzVqRSxFQUFFZ0IsR0FBR21yRCxFQUFFbnJELEVBQWEsR0FBR21yRCxFQUFFenJELGVBQWV1ckQsR0FBRyxDQUFDLElBQUkxNEMsRUFBRTQ0QyxFQUFFRixHQUFHLFVBQVVBLEVBQUV5VyxHQUFHcnFFLEVBQUVrYixHQUFHLDRCQUE0QjA0QyxFQUF1QixPQUFwQjE0QyxFQUFFQSxFQUFFQSxFQUFFaW9FLFlBQU8sSUFBZ0JyYyxHQUFHOW1FLEVBQUVrYixHQUFJLGFBQWEwNEMsRUFBRSxpQkFBa0IxNEMsR0FBRyxhQUM3ZXZULEdBQUcsS0FBS3VULElBQUlzc0QsR0FBR3huRSxFQUFFa2IsR0FBRyxpQkFBa0JBLEdBQUdzc0QsR0FBR3huRSxFQUFFLEdBQUdrYixHQUFHLG1DQUFtQzA0QyxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJcU4sRUFBRzU0RCxlQUFldXJELEdBQUcsTUFBTTE0QyxHQUFHLGFBQWEwNEMsR0FBR3d0QixHQUFFLFNBQVNwaEYsR0FBRyxNQUFNa2IsR0FBR2duRCxFQUFHbGlFLEVBQUU0ekQsRUFBRTE0QyxFQUFFMjRDLElBQUksT0FBT2xzRCxHQUFHLElBQUssUUFBUWk5RCxFQUFHNWtFLEdBQUc4cUQsRUFBRzlxRCxFQUFFNEgsR0FBRSxHQUFJLE1BQU0sSUFBSyxXQUFXZzlELEVBQUc1a0UsR0FBR3ltRSxHQUFHem1FLEdBQUcsTUFBTSxJQUFLLFNBQVMsTUFBTTRILEVBQUV2RyxPQUFPckIsRUFBRWttQyxhQUFhLFFBQVEsR0FBR3UrQixFQUFHNzhELEVBQUV2RyxRQUFRLE1BQU0sSUFBSyxTQUFTckIsRUFBRWcwRixXQUFXcHNGLEVBQUVvc0YsU0FBbUIsT0FBVnBnQyxFQUFFaHNELEVBQUV2RyxPQUFjNGtFLEdBQUdqbUUsSUFBSTRILEVBQUVvc0YsU0FBU3BnQyxHQUFFLEdBQUksTUFBTWhzRCxFQUFFbTFDLGNBQWNrcEIsR0FBR2ptRSxJQUFJNEgsRUFBRW9zRixTQUFTcHNGLEVBQUVtMUMsY0FDbGYsR0FBSSxNQUFNLFFBQVEsbUJBQW9CcDBDLEVBQUV1ckYsVUFBVWwwRixFQUFFbTBGLFFBQVFwUixJQUFJLE9BQU9wN0UsR0FBRyxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFdBQVdDLElBQUlBLEVBQUV5c0YsVUFBVSxNQUFNcjBGLEVBQUUsSUFBSyxNQUFNNEgsR0FBRSxFQUFHLE1BQU01SCxFQUFFLFFBQVE0SCxHQUFFLEdBQUlBLElBQUkzSCxFQUFFd3RFLE9BQU8sR0FBRyxPQUFPeHRFLEVBQUUwZSxNQUFNMWUsRUFBRXd0RSxPQUFPLElBQUl4dEUsRUFBRXd0RSxPQUFPLFNBQWMsT0FBTGltQixHQUFFenpGLEdBQVUsS0FBSyxLQUFLLEVBQUUsR0FBR0QsR0FBRyxNQUFNQyxFQUFFbXNFLFVBQVVxbUIsR0FBR3p5RixFQUFFQyxFQUFFRCxFQUFFMHJGLGNBQWM5akYsT0FBTyxDQUFDLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU8zSCxFQUFFbXNFLFVBQVUsTUFBTXhJLE1BQU1qK0QsRUFBRSxNQUFzQyxHQUFoQ2dDLEVBQUVtbEYsR0FBR0QsR0FBR3ovRSxTQUFTMC9FLEdBQUdILEdBQUd2L0UsU0FBWXErRSxHQUFHeHJGLEdBQUcsQ0FBeUMsR0FBeEMySCxFQUFFM0gsRUFBRW1zRSxVQUFVemtFLEVBQUUxSCxFQUFFeXJGLGNBQWM5akYsRUFBRW04RSxJQUFJOWpGLEdBQUsyekQsRUFBRWhzRCxFQUFFKy9ELFlBQVloZ0UsSUFDL2UsUUFEb2YzSCxFQUN2ZndxRixJQUFZLE9BQU94cUYsRUFBRW1rRSxLQUFLLEtBQUssRUFBRTJlLEdBQUdsN0UsRUFBRSsvRCxVQUFVaGdFLEVBQUUsSUFBWSxFQUFQM0gsRUFBRXNyRixPQUFTLE1BQU0sS0FBSyxHQUFFLElBQUt0ckYsRUFBRTByRixjQUFjdUksMEJBQTBCblIsR0FBR2w3RSxFQUFFKy9ELFVBQVVoZ0UsRUFBRSxJQUFZLEVBQVAzSCxFQUFFc3JGLE9BQVMxM0IsSUFBSTN6RCxFQUFFd3RFLE9BQU8sUUFBUTdsRSxHQUFHLElBQUlELEVBQUUrL0QsU0FBUy8vRCxFQUFFQSxFQUFFbytELGVBQWV1dUIsZUFBZTFzRixJQUFLbThFLElBQUk5akYsRUFBRUEsRUFBRW1zRSxVQUFVeGtFLEVBQU8sT0FBTDhyRixHQUFFenpGLEdBQVUsS0FBSyxLQUFLLEdBQTBCLEdBQXZCcWtGLEdBQUU2SSxJQUFHdmxGLEVBQUUzSCxFQUFFMHRFLGNBQWlCK2MsSUFBRyxPQUFPRCxJQUFJLElBQVksRUFBUHhxRixFQUFFcXJGLE9BQVMsSUFBYSxJQUFScnJGLEVBQUV3dEUsT0FBVyxDQUFDLElBQUk3bEUsRUFBRTZpRixHQUFHN2lGLEdBQUdBLEVBQUUrN0UsR0FBRy83RSxFQUFFaTJFLGFBQWlDLE9BQXBCOE4sS0FBSzFyRixFQUFFd3RFLE9BQU8sTUFBYXh0RSxFQUFFLEdBQUcsT0FBTzJILEdBQUcsT0FBT0EsRUFBRWdtRSxXQUFXLENBQVMsR0FBUmhtRSxFQUFFNmpGLEdBQUd4ckYsR0FBTSxPQUFPRCxFQUFFLENBQUMsSUFBSTRILEVBQUUsTUFBTWc4RCxNQUFNaitELEVBQUUsTUFDaGMsS0FBN0JpQyxFQUFFLFFBRGllQSxFQUNuZjNILEVBQUUwdEUsZUFBeUIvbEUsRUFBRWdtRSxXQUFXLE1BQVcsTUFBTWhLLE1BQU1qK0QsRUFBRSxNQUFNaUMsRUFBRW04RSxJQUFJOWpGLE9BQU8wckYsS0FBSyxJQUFhLElBQVIxckYsRUFBRXd0RSxTQUFheHRFLEVBQUUwdEUsY0FBYyxNQUFNMXRFLEVBQUV3dEUsT0FBTyxFQUFPLE9BQUxpbUIsR0FBRXp6RixHQUFVLEtBQWlDLE9BQTVCLE9BQU8wcUYsS0FBS21KLEdBQUduSixJQUFJQSxHQUFHLE1BQVMsSUFBYSxJQUFSMXFGLEVBQUV3dEUsUUFBa0J4dEUsRUFBRXltRixNQUFNLytFLEVBQUUxSCxJQUFFMkgsRUFBRSxPQUFPQSxFQUFFRCxHQUFFLEVBQUcsT0FBTzNILEVBQUV5ckYsR0FBR3hyRixHQUFHMEgsRUFBRSxPQUFPM0gsRUFBRTJ0RSxjQUFjL2xFLElBQUlELEdBQUdDLElBQUkzSCxFQUFFaXlCLE1BQU11N0MsT0FBTyxLQUFLLElBQVksRUFBUHh0RSxFQUFFcXJGLFFBQVUsT0FBT3RyRixHQUFHLElBQWUsRUFBVm10RixHQUFFLy9FLFNBQVcsSUFBSW1uRixLQUFJQSxHQUFFLEdBQUdDLE9BQU8sT0FBT3YwRixFQUFFZ25GLGNBQWNobkYsRUFBRXd0RSxPQUFPLEdBQUdpbUIsR0FBRXp6RixHQUFVLE1BQUssS0FBSyxFQUFFLE9BQU8rc0YsS0FBYSxPQUFPaHRGLEdBQUcwaEYsR0FBR3poRixFQUFFbXNFLFVBQVV1RyxlQUFlK2dCLEdBQUV6ekYsR0FDcGYsS0FBSyxLQUFLLEdBQUcsT0FBT2ttRixHQUFHbG1GLEVBQUU2akIsS0FBS3VnRCxVQUFVcXZCLEdBQUV6ekYsR0FBRyxLQUErQyxLQUFLLEdBQTBCLEdBQXZCcWtGLEdBQUU2SSxJQUF3QixRQUFyQnY1QixFQUFFM3pELEVBQUUwdEUsZUFBMEIsT0FBTytsQixHQUFFenpGLEdBQUcsS0FBdUMsR0FBbEMySCxFQUFFLElBQWEsSUFBUjNILEVBQUV3dEUsT0FBNEIsUUFBakI1WixFQUFFRCxFQUFFNmdDLFdBQXNCLEdBQUc3c0YsRUFBRTJyRixHQUFHMy9CLEdBQUUsT0FBUSxDQUFDLEdBQUcsSUFBSTJnQyxJQUFHLE9BQU92MEYsR0FBRyxJQUFhLElBQVJBLEVBQUV5dEUsT0FBVyxJQUFJenRFLEVBQUVDLEVBQUVpeUIsTUFBTSxPQUFPbHlCLEdBQUcsQ0FBUyxHQUFHLFFBQVg2ekQsRUFBRXU1QixHQUFHcHRGLElBQWUsQ0FBbUcsSUFBbEdDLEVBQUV3dEUsT0FBTyxJQUFJOGxCLEdBQUczL0IsR0FBRSxHQUFvQixRQUFoQmhzRCxFQUFFaXNELEVBQUVvekIsZUFBdUJobkYsRUFBRWduRixZQUFZci9FLEVBQUUzSCxFQUFFd3RFLE9BQU8sR0FBR3h0RSxFQUFFMHpGLGFBQWEsRUFBRS9yRixFQUFFRCxFQUFNQSxFQUFFMUgsRUFBRWl5QixNQUFNLE9BQU92cUIsR0FBTzNILEVBQUU0SCxHQUFOZ3NELEVBQUVqc0QsR0FBUThsRSxPQUFPLFNBQXVCLFFBQWQ1WixFQUFFRCxFQUFFNFosWUFBb0I1WixFQUFFMHlCLFdBQVcsRUFBRTF5QixFQUFFOHlCLE1BQU0xbUYsRUFBRTR6RCxFQUFFMWhDLE1BQ3BmLEtBQUswaEMsRUFBRSsvQixhQUFhLEVBQUUvL0IsRUFBRTgzQixjQUFjLEtBQUs5M0IsRUFBRStaLGNBQWMsS0FBSy9aLEVBQUVxekIsWUFBWSxLQUFLcnpCLEVBQUU0eUIsYUFBYSxLQUFLNXlCLEVBQUV3WSxVQUFVLE9BQU94WSxFQUFFMHlCLFdBQVd6eUIsRUFBRXl5QixXQUFXMXlCLEVBQUU4eUIsTUFBTTd5QixFQUFFNnlCLE1BQU05eUIsRUFBRTFoQyxNQUFNMmhDLEVBQUUzaEMsTUFBTTBoQyxFQUFFKy9CLGFBQWEsRUFBRS8vQixFQUFFbTNCLFVBQVUsS0FBS24zQixFQUFFODNCLGNBQWM3M0IsRUFBRTYzQixjQUFjOTNCLEVBQUUrWixjQUFjOVosRUFBRThaLGNBQWMvWixFQUFFcXpCLFlBQVlwekIsRUFBRW96QixZQUFZcnpCLEVBQUU5dkMsS0FBSyt2QyxFQUFFL3ZDLEtBQUs5akIsRUFBRTZ6RCxFQUFFMnlCLGFBQWE1eUIsRUFBRTR5QixhQUFhLE9BQU94bUYsRUFBRSxLQUFLLENBQUMwbUYsTUFBTTFtRixFQUFFMG1GLE1BQU1ELGFBQWF6bUYsRUFBRXltRixlQUFlOStFLEVBQUVBLEVBQUVvbUUsUUFBMkIsT0FBbkJ3VyxHQUFFNEksR0FBWSxFQUFWQSxHQUFFLy9FLFFBQVUsR0FBVW5OLEVBQUVpeUIsTUFBTWx5QixFQUFFQSxFQUFFK3RFLFFBQVEsT0FBT25hLEVBQUU2L0IsTUFBTS9rQixLQUFJZ21CLEtBQUt6MEYsRUFBRXd0RSxPQUMvZSxJQUFJN2xFLEdBQUUsRUFBRzJyRixHQUFHMy9CLEdBQUUsR0FBSTN6RCxFQUFFeW1GLE1BQU0sYUFBYSxDQUFDLElBQUk5K0UsRUFBRSxHQUFXLFFBQVI1SCxFQUFFb3RGLEdBQUd2NUIsS0FBYSxHQUFHNXpELEVBQUV3dEUsT0FBTyxJQUFJN2xFLEdBQUUsRUFBbUIsUUFBaEJELEVBQUUzSCxFQUFFaW5GLGVBQXVCaG5GLEVBQUVnbkYsWUFBWXQvRSxFQUFFMUgsRUFBRXd0RSxPQUFPLEdBQUc4bEIsR0FBRzMvQixHQUFFLEdBQUksT0FBT0EsRUFBRTYvQixNQUFNLFdBQVc3L0IsRUFBRTQvQixXQUFXMy9CLEVBQUUyWixZQUFZa2QsR0FBRSxPQUFPZ0osR0FBRXp6RixHQUFHLFVBQVUsRUFBRXl1RSxLQUFJOWEsRUFBRStnQyxtQkFBbUJELElBQUksYUFBYS9zRixJQUFJMUgsRUFBRXd0RSxPQUFPLElBQUk3bEUsR0FBRSxFQUFHMnJGLEdBQUczL0IsR0FBRSxHQUFJM3pELEVBQUV5bUYsTUFBTSxTQUFTOXlCLEVBQUVnaEMsYUFBYS9nQyxFQUFFa2EsUUFBUTl0RSxFQUFFaXlCLE1BQU1qeUIsRUFBRWl5QixNQUFNMmhDLElBQWEsUUFBVGxzRCxFQUFFaXNELEVBQUVqakIsTUFBY2hwQyxFQUFFb21FLFFBQVFsYSxFQUFFNXpELEVBQUVpeUIsTUFBTTJoQyxFQUFFRCxFQUFFampCLEtBQUtrakIsR0FBRyxPQUFHLE9BQU9ELEVBQUU2L0IsTUFBWXh6RixFQUFFMnpELEVBQUU2L0IsS0FBSzcvQixFQUFFNmdDLFVBQVV4MEYsRUFBRTJ6RCxFQUFFNi9CLEtBQUt4ekYsRUFBRTh0RSxRQUFRbmEsRUFBRStnQyxtQkFDbGVqbUIsS0FBSXp1RSxFQUFFOHRFLFFBQVEsS0FBS3BtRSxFQUFFd2xGLEdBQUUvL0UsUUFBUW0zRSxHQUFFNEksR0FBRXZsRixFQUFJLEVBQUZELEVBQUksRUFBSSxFQUFGQSxHQUFLMUgsSUFBRXl6RixHQUFFenpGLEdBQVUsTUFBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU80MEYsS0FBS2p0RixFQUFFLE9BQU8zSCxFQUFFMHRFLGNBQWMsT0FBTzN0RSxHQUFHLE9BQU9BLEVBQUUydEUsZ0JBQWdCL2xFLElBQUkzSCxFQUFFd3RFLE9BQU8sTUFBTTdsRSxHQUFHLElBQVksRUFBUDNILEVBQUVxckYsTUFBUSxJQUFRLFdBQUh3SixNQUFpQnBCLEdBQUV6ekYsR0FBa0IsRUFBZkEsRUFBRTB6RixlQUFpQjF6RixFQUFFd3RFLE9BQU8sT0FBT2ltQixHQUFFenpGLEdBQUcsS0FBSyxLQUFLLEdBQWUsS0FBSyxHQUFHLE9BQU8sS0FBSyxNQUFNMmpFLE1BQU1qK0QsRUFBRSxJQUFJMUYsRUFBRWtrRSxNQW5CcFVvdUIsR0FBRyxTQUFTdnlGLEVBQUVDLEdBQUcsSUFBSSxJQUFJMEgsRUFBRTFILEVBQUVpeUIsTUFBTSxPQUFPdnFCLEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUV3OEQsS0FBSyxJQUFJeDhELEVBQUV3OEQsSUFBSW5rRSxFQUFFcW5FLFlBQVkxL0QsRUFBRXlrRSxnQkFBZ0IsR0FBRyxJQUFJemtFLEVBQUV3OEQsS0FBSyxPQUFPeDhELEVBQUV1cUIsTUFBTSxDQUFDdnFCLEVBQUV1cUIsTUFBTW95QixPQUFPMzhDLEVBQUVBLEVBQUVBLEVBQUV1cUIsTUFBTSxTQUFTLEdBQUd2cUIsSUFBSTFILEVBQUUsTUFBTSxLQUFLLE9BQU8wSCxFQUFFb21FLFNBQVMsQ0FBQyxHQUFHLE9BQU9wbUUsRUFBRTI4QyxRQUFRMzhDLEVBQUUyOEMsU0FBU3JrRCxFQUFFLE9BQU8wSCxFQUFFQSxFQUFFMjhDLE9BQU8zOEMsRUFBRW9tRSxRQUFRenBCLE9BQU8zOEMsRUFBRTI4QyxPQUFPMzhDLEVBQUVBLEVBQUVvbUUsVUFDaFN5a0IsR0FBRyxTQUFTeHlGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLElBQUllLEVBQUUzSSxFQUFFMHJGLGNBQWMsR0FBRy9pRixJQUFJZixFQUFFLENBQUM1SCxFQUFFQyxFQUFFbXNFLFVBQVUwZ0IsR0FBR0gsR0FBR3YvRSxTQUFTLElBQTRSeW1ELEVBQXhSRCxFQUFFLEtBQUssT0FBT2pzRCxHQUFHLElBQUssUUFBUWdCLEVBQUUyOEQsRUFBR3RsRSxFQUFFMkksR0FBR2YsRUFBRTA5RCxFQUFHdGxFLEVBQUU0SCxHQUFHZ3NELEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU2pyRCxFQUFFMHJELEVBQUUsR0FBRzFyRCxFQUFFLENBQUN0SCxXQUFNLElBQVN1RyxFQUFFeXNELEVBQUUsR0FBR3pzRCxFQUFFLENBQUN2RyxXQUFNLElBQVN1eUQsRUFBRSxHQUFHLE1BQU0sSUFBSyxXQUFXanJELEVBQUUwOUQsR0FBR3JtRSxFQUFFMkksR0FBR2YsRUFBRXkrRCxHQUFHcm1FLEVBQUU0SCxHQUFHZ3NELEVBQUUsR0FBRyxNQUFNLFFBQVEsbUJBQW9CanJELEVBQUV1ckYsU0FBUyxtQkFBb0J0c0YsRUFBRXNzRixVQUFVbDBGLEVBQUVtMEYsUUFBUXBSLElBQXlCLElBQUlodkIsS0FBekJ3WCxHQUFHNWpFLEVBQUVDLEdBQVNELEVBQUUsS0FBY2dCLEVBQUUsSUFBSWYsRUFBRVMsZUFBZTByRCxJQUFJcHJELEVBQUVOLGVBQWUwckQsSUFBSSxNQUFNcHJELEVBQUVvckQsR0FBRyxHQUFHLFVBQVVBLEVBQUUsQ0FBQyxJQUFJRCxFQUFFbnJELEVBQUVvckQsR0FBRyxJQUFJRixLQUFLQyxFQUFFQSxFQUFFenJELGVBQWV3ckQsS0FDamZsc0QsSUFBSUEsRUFBRSxJQUFJQSxFQUFFa3NELEdBQUcsUUFBUSw0QkFBNEJFLEdBQUcsYUFBYUEsR0FBRyxtQ0FBbUNBLEdBQUcsNkJBQTZCQSxHQUFHLGNBQWNBLElBQUlrTixFQUFHNTRELGVBQWUwckQsR0FBR0gsSUFBSUEsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLElBQUlyMUQsS0FBS3cxRCxFQUFFLE9BQU8sSUFBSUEsS0FBS25zRCxFQUFFLENBQUMsSUFBSXNULEVBQUV0VCxFQUFFbXNELEdBQXlCLEdBQXRCRCxFQUFFLE1BQU1uckQsRUFBRUEsRUFBRW9yRCxRQUFHLEVBQVVuc0QsRUFBRVMsZUFBZTByRCxJQUFJNzRDLElBQUk0NEMsSUFBSSxNQUFNNTRDLEdBQUcsTUFBTTQ0QyxHQUFHLEdBQUcsVUFBVUMsRUFBRSxHQUFHRCxFQUFFLENBQUMsSUFBSUQsS0FBS0MsR0FBR0EsRUFBRXpyRCxlQUFld3JELElBQUkzNEMsR0FBR0EsRUFBRTdTLGVBQWV3ckQsS0FBS2xzRCxJQUFJQSxFQUFFLElBQUlBLEVBQUVrc0QsR0FBRyxJQUFJLElBQUlBLEtBQUszNEMsRUFBRUEsRUFBRTdTLGVBQWV3ckQsSUFBSUMsRUFBRUQsS0FBSzM0QyxFQUFFMjRDLEtBQUtsc0QsSUFBSUEsRUFBRSxJQUFJQSxFQUFFa3NELEdBQUczNEMsRUFBRTI0QyxTQUFTbHNELElBQUlpc0QsSUFBSUEsRUFBRSxJQUFJQSxFQUFFcjFELEtBQUt3MUQsRUFDcGZwc0QsSUFBSUEsRUFBRXVULE1BQU0sNEJBQTRCNjRDLEdBQUc3NEMsRUFBRUEsRUFBRUEsRUFBRWlvRSxZQUFPLEVBQU9ydkIsRUFBRUEsRUFBRUEsRUFBRXF2QixZQUFPLEVBQU8sTUFBTWpvRSxHQUFHNDRDLElBQUk1NEMsSUFBSTA0QyxFQUFFQSxHQUFHLElBQUlyMUQsS0FBS3cxRCxFQUFFNzRDLElBQUksYUFBYTY0QyxFQUFFLGlCQUFrQjc0QyxHQUFHLGlCQUFrQkEsSUFBSTA0QyxFQUFFQSxHQUFHLElBQUlyMUQsS0FBS3cxRCxFQUFFLEdBQUc3NEMsR0FBRyxtQ0FBbUM2NEMsR0FBRyw2QkFBNkJBLElBQUlrTixFQUFHNTRELGVBQWUwckQsSUFBSSxNQUFNNzRDLEdBQUcsYUFBYTY0QyxHQUFHcXRCLEdBQUUsU0FBU3BoRixHQUFHNHpELEdBQUdFLElBQUk1NEMsSUFBSTA0QyxFQUFFLE1BQU1BLEVBQUVBLEdBQUcsSUFBSXIxRCxLQUFLdzFELEVBQUU3NEMsSUFBSXZULElBQUlpc0QsRUFBRUEsR0FBRyxJQUFJcjFELEtBQUssUUFBUW9KLEdBQUcsSUFBSW9zRCxFQUFFSCxHQUFLM3pELEVBQUVnbkYsWUFBWWx6QixLQUFFOXpELEVBQUV3dEUsT0FBTyxLQUFJZ2xCLEdBQUcsU0FBU3p5RixFQUFFQyxFQUFFMEgsRUFBRUMsR0FBR0QsSUFBSUMsSUFBSTNILEVBQUV3dEUsT0FBTyxJQWdCbkosSUFBSXNuQixHQUFHdHlCLEVBQUd1eUIsa0JBQWtCck8sSUFBRyxFQUFHLFNBQVNzTyxHQUFHajFGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHM0gsRUFBRWl5QixNQUFNLE9BQU9seUIsRUFBRXlzRixHQUFHeHNGLEVBQUUsS0FBSzBILEVBQUVDLEdBQUc0a0YsR0FBR3ZzRixFQUFFRCxFQUFFa3lCLE1BQU12cUIsRUFBRUMsR0FDamIsU0FBU3N0RixHQUFHbDFGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHaEIsRUFBRUEsRUFBRXNaLE9BQU8sSUFBSTJ5QyxFQUFFM3pELEVBQUUwZSxJQUFxQyxPQUFqQzRuRSxHQUFHdG1GLEVBQUUwSSxHQUFHZixFQUFFMG1GLEdBQUd0dUYsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVnc0QsRUFBRWpyRCxHQUFHaEIsRUFBRWduRixLQUFRLE9BQU8zdUYsR0FBSTJtRixJQUEyRStELElBQUcvaUYsR0FBRzJpRixHQUFHcnFGLEdBQUdBLEVBQUV3dEUsT0FBTyxFQUFFd25CLEdBQUdqMUYsRUFBRUMsRUFBRTJILEVBQUVlLEdBQVUxSSxFQUFFaXlCLFFBQTdHanlCLEVBQUVnbkYsWUFBWWpuRixFQUFFaW5GLFlBQVlobkYsRUFBRXd0RSxRQUFRLEtBQUt6dEUsRUFBRTBtRixRQUFRLzlFLEVBQUV3c0YsR0FBR24xRixFQUFFQyxFQUFFMEksSUFDckssU0FBU3lzRixHQUFHcDFGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHLEdBQUcsT0FBTzNJLEVBQUUsQ0FBQyxJQUFJNHpELEVBQUVqc0QsRUFBRW1jLEtBQUssTUFBRyxtQkFBb0I4dkMsR0FBSXloQyxHQUFHemhDLFNBQUksSUFBU0EsRUFBRWxDLGNBQWMsT0FBTy9wRCxFQUFFMnFELGNBQVMsSUFBUzNxRCxFQUFFK3BELGVBQW9EMXhELEVBQUVzdUMsR0FBRzNtQyxFQUFFbWMsS0FBSyxLQUFLbGMsRUFBRTNILEVBQUVBLEVBQUVxckYsS0FBSzNpRixJQUFLZ1csSUFBSTFlLEVBQUUwZSxJQUFJM2UsRUFBRXNrRCxPQUFPcmtELEVBQVNBLEVBQUVpeUIsTUFBTWx5QixJQUFyR0MsRUFBRWtrRSxJQUFJLEdBQUdsa0UsRUFBRTZqQixLQUFLOHZDLEVBQUUwaEMsR0FBR3QxRixFQUFFQyxFQUFFMnpELEVBQUVoc0QsRUFBRWUsSUFBb0YsR0FBVmlyRCxFQUFFNXpELEVBQUVreUIsTUFBUyxJQUFLbHlCLEVBQUUwbUYsTUFBTS85RSxHQUFHLENBQUMsSUFBSWtyRCxFQUFFRCxFQUFFODNCLGNBQTBDLElBQWhCL2pGLEVBQUUsUUFBZEEsRUFBRUEsRUFBRTJxRCxTQUFtQjNxRCxFQUFFKzFFLElBQVE3cEIsRUFBRWpzRCxJQUFJNUgsRUFBRTJlLE1BQU0xZSxFQUFFMGUsSUFBSSxPQUFPdzJFLEdBQUduMUYsRUFBRUMsRUFBRTBJLEdBQStDLE9BQTVDMUksRUFBRXd0RSxPQUFPLEdBQUV6dEUsRUFBRW1zRixHQUFHdjRCLEVBQUVoc0QsSUFBSytXLElBQUkxZSxFQUFFMGUsSUFBSTNlLEVBQUVza0QsT0FBT3JrRCxFQUFTQSxFQUFFaXlCLE1BQU1seUIsRUFDemIsU0FBU3MxRixHQUFHdDFGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHLEdBQUcsT0FBTzNJLEVBQUUsQ0FBQyxJQUFJNHpELEVBQUU1ekQsRUFBRTByRixjQUFjLEdBQUdoTyxHQUFHOXBCLEVBQUVoc0QsSUFBSTVILEVBQUUyZSxNQUFNMWUsRUFBRTBlLElBQUksSUFBR2dvRSxJQUFHLEVBQUcxbUYsRUFBRWdyRixhQUFhcmpGLEVBQUVnc0QsRUFBRSxJQUFLNXpELEVBQUUwbUYsTUFBTS85RSxHQUFzQyxPQUFPMUksRUFBRXltRixNQUFNMW1GLEVBQUUwbUYsTUFBTXlPLEdBQUduMUYsRUFBRUMsRUFBRTBJLEdBQWpFLElBQWEsT0FBUjNJLEVBQUV5dEUsU0FBZ0JrWixJQUFHLElBQTBDLE9BQU80TyxHQUFHdjFGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUN0TixTQUFTNnNGLEdBQUd4MUYsRUFBRUMsRUFBRTBILEdBQUcsSUFBSUMsRUFBRTNILEVBQUVnckYsYUFBYXRpRixFQUFFZixFQUFFb3FCLFNBQVM0aEMsRUFBRSxPQUFPNXpELEVBQUVBLEVBQUUydEUsY0FBYyxLQUFLLEdBQUcsV0FBVy9sRSxFQUFFMGpGLEtBQUssR0FBRyxJQUFZLEVBQVByckYsRUFBRXFyRixNQUFRcnJGLEVBQUUwdEUsY0FBYyxDQUFDOG5CLFVBQVUsRUFBRUMsVUFBVSxLQUFLQyxZQUFZLE1BQU1wUixHQUFFcVIsR0FBR2QsSUFBSUEsSUFBSW50RixNQUFPLElBQUcsSUFBTyxXQUFGQSxHQUF5SCxPQUFPM0gsRUFBRSxPQUFPNHpELEVBQUVBLEVBQUU2aEMsVUFBVTl0RixFQUFFQSxFQUFFMUgsRUFBRXltRixNQUFNem1GLEVBQUVxbUYsV0FBVyxXQUFXcm1GLEVBQUUwdEUsY0FBYyxDQUFDOG5CLFVBQVV6MUYsRUFBRTAxRixVQUFVLEtBQUtDLFlBQVksTUFBTTExRixFQUFFZ25GLFlBQVksS0FBSzFDLEdBQUVxUixHQUFHZCxJQUFJQSxJQUFJOTBGLEVBQUUsS0FBN1FDLEVBQUUwdEUsY0FBYyxDQUFDOG5CLFVBQVUsRUFBRUMsVUFBVSxLQUFLQyxZQUFZLE1BQU0vdEYsRUFBRSxPQUFPZ3NELEVBQUVBLEVBQUU2aEMsVUFBVTl0RixFQUFFNDhFLEdBQUVxUixHQUFHZCxJQUFJQSxJQUFJbHRGLE9BQ25VLE9BQU9nc0QsR0FBR2hzRCxFQUFFZ3NELEVBQUU2aEMsVUFBVTl0RixFQUFFMUgsRUFBRTB0RSxjQUFjLE1BQU0vbEUsRUFBRUQsRUFBRTQ4RSxHQUFFcVIsR0FBR2QsSUFBSUEsSUFBSWx0RixFQUFjLE9BQVpxdEYsR0FBR2oxRixFQUFFQyxFQUFFMEksRUFBRWhCLEdBQVUxSCxFQUFFaXlCLE1BQU0sU0FBUzJqRSxHQUFHNzFGLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUxSCxFQUFFMGUsS0FBTyxPQUFPM2UsR0FBRyxPQUFPMkgsR0FBRyxPQUFPM0gsR0FBR0EsRUFBRTJlLE1BQU1oWCxLQUFFMUgsRUFBRXd0RSxPQUFPLElBQUl4dEUsRUFBRXd0RSxPQUFPLFNBQVEsU0FBUzhuQixHQUFHdjFGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHLElBQUlpckQsRUFBRW14QixHQUFHcDlFLEdBQUdnOUUsR0FBR0YsR0FBRXIzRSxRQUFtRCxPQUEzQ3dtRCxFQUFFZ3hCLEdBQUcza0YsRUFBRTJ6RCxHQUFHMnlCLEdBQUd0bUYsRUFBRTBJLEdBQUdoQixFQUFFMm1GLEdBQUd0dUYsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVnc0QsRUFBRWpyRCxHQUFHZixFQUFFK21GLEtBQVEsT0FBTzN1RixHQUFJMm1GLElBQTJFK0QsSUFBRzlpRixHQUFHMGlGLEdBQUdycUYsR0FBR0EsRUFBRXd0RSxPQUFPLEVBQUV3bkIsR0FBR2oxRixFQUFFQyxFQUFFMEgsRUFBRWdCLEdBQVUxSSxFQUFFaXlCLFFBQTdHanlCLEVBQUVnbkYsWUFBWWpuRixFQUFFaW5GLFlBQVlobkYsRUFBRXd0RSxRQUFRLEtBQUt6dEUsRUFBRTBtRixRQUFRLzlFLEVBQUV3c0YsR0FBR24xRixFQUFFQyxFQUFFMEksSUFDMVgsU0FBU210RixHQUFHOTFGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHLEdBQUdvOEUsR0FBR3A5RSxHQUFHLENBQUMsSUFBSWlzRCxHQUFFLEVBQUd3eEIsR0FBR25sRixRQUFRMnpELEdBQUUsRUFBVyxHQUFSMnlCLEdBQUd0bUYsRUFBRTBJLEdBQU0sT0FBTzFJLEVBQUVtc0UsVUFBVSxPQUFPcHNFLElBQUlBLEVBQUV3dEUsVUFBVSxLQUFLdnRFLEVBQUV1dEUsVUFBVSxLQUFLdnRFLEVBQUV3dEUsT0FBTyxHQUFHMGIsR0FBR2xwRixFQUFFMEgsRUFBRUMsR0FBRzRoRixHQUFHdnBGLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHZixHQUFFLE9BQVEsR0FBRyxPQUFPNUgsRUFBRSxDQUFDLElBQUk2ekQsRUFBRTV6RCxFQUFFbXNFLFVBQVV0WSxFQUFFN3pELEVBQUV5ckYsY0FBYzczQixFQUFFLzNDLE1BQU1nNEMsRUFBRSxJQUFJNTRDLEVBQUUyNEMsRUFBRTE3QyxRQUFRNDdDLEVBQUVwc0QsRUFBRTZwRCxZQUEwQ3VDLEVBQTlCLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFJNnlCLEdBQUc3eUIsR0FBMkI2d0IsR0FBRzNrRixFQUExQjh6RCxFQUFFZ3hCLEdBQUdwOUUsR0FBR2c5RSxHQUFHRixHQUFFcjNFLFNBQW1CLElBQUk0TixFQUFFclQsRUFBRW1xRCx5QkFBeUJxQyxFQUFFLG1CQUFvQm41QyxHQUFHLG1CQUFvQjY0QyxFQUFFaDFCLHdCQUF3QnMxQixHQUFHLG1CQUFvQk4sRUFBRTAxQixrQ0FDcGQsbUJBQW9CMTFCLEVBQUV5MUIsNEJBQTRCeDFCLElBQUlsc0QsR0FBR3NULElBQUk2NEMsSUFBSXMxQixHQUFHcHBGLEVBQUU0ekQsRUFBRWpzRCxFQUFFbXNELEdBQUdnekIsSUFBRyxFQUFHLElBQUkveUIsRUFBRS96RCxFQUFFMHRFLGNBQWM5WixFQUFFMWpELE1BQU02akQsRUFBRWswQixHQUFHam9GLEVBQUUySCxFQUFFaXNELEVBQUVsckQsR0FBR3VTLEVBQUVqYixFQUFFMHRFLGNBQWM3WixJQUFJbHNELEdBQUdvc0QsSUFBSTk0QyxHQUFHd3BFLEdBQUd0M0UsU0FBUzI1RSxJQUFJLG1CQUFvQi9yRSxJQUFJdXRFLEdBQUd0b0YsRUFBRTBILEVBQUVxVCxFQUFFcFQsR0FBR3NULEVBQUVqYixFQUFFMHRFLGdCQUFnQjdaLEVBQUVpekIsSUFBSWlDLEdBQUcvb0YsRUFBRTBILEVBQUVtc0QsRUFBRWxzRCxFQUFFb3NELEVBQUU5NEMsRUFBRTY0QyxLQUFLSSxHQUFHLG1CQUFvQk4sRUFBRTQxQiwyQkFBMkIsbUJBQW9CNTFCLEVBQUU2MUIscUJBQXFCLG1CQUFvQjcxQixFQUFFNjFCLG9CQUFvQjcxQixFQUFFNjFCLHFCQUFxQixtQkFBb0I3MUIsRUFBRTQxQiwyQkFBMkI1MUIsRUFBRTQxQiw2QkFBNkIsbUJBQzFlNTFCLEVBQUU1UixvQkFBb0JoaUQsRUFBRXd0RSxPQUFPLFdBQVcsbUJBQW9CNVosRUFBRTVSLG9CQUFvQmhpRCxFQUFFd3RFLE9BQU8sU0FBU3h0RSxFQUFFeXJGLGNBQWM5akYsRUFBRTNILEVBQUUwdEUsY0FBY3p5RCxHQUFHMjRDLEVBQUUvM0MsTUFBTWxVLEVBQUVpc0QsRUFBRTFqRCxNQUFNK0ssRUFBRTI0QyxFQUFFMTdDLFFBQVE0N0MsRUFBRW5zRCxFQUFFa3NELElBQUksbUJBQW9CRCxFQUFFNVIsb0JBQW9CaGlELEVBQUV3dEUsT0FBTyxTQUFTN2xFLEdBQUUsT0FBUSxDQUFDaXNELEVBQUU1ekQsRUFBRW1zRSxVQUFVcWIsR0FBR3puRixFQUFFQyxHQUFHNnpELEVBQUU3ekQsRUFBRXlyRixjQUFjMzNCLEVBQUU5ekQsRUFBRTZqQixPQUFPN2pCLEVBQUU2cUYsWUFBWWgzQixFQUFFK3hCLEdBQUc1bEYsRUFBRTZqQixLQUFLZ3dDLEdBQUdELEVBQUUvM0MsTUFBTWk0QyxFQUFFSSxFQUFFbDBELEVBQUVnckYsYUFBYWozQixFQUFFSCxFQUFFMTdDLFFBQXNEK0MsRUFBOUIsaUJBQWhCQSxFQUFFdlQsRUFBRTZwRCxjQUFpQyxPQUFPdDJDLEVBQUkwckUsR0FBRzFyRSxHQUEyQjBwRSxHQUFHM2tGLEVBQTFCaWIsRUFBRTZwRSxHQUFHcDlFLEdBQUdnOUUsR0FBR0YsR0FBRXIzRSxTQUFtQixJQUFJck8sRUFBRTRJLEVBQUVtcUQsMEJBQTBCOTJDLEVBQUUsbUJBQzFlamMsR0FBRyxtQkFBb0I4MEQsRUFBRWgxQiwwQkFBMEIsbUJBQW9CZzFCLEVBQUUwMUIsa0NBQWtDLG1CQUFvQjExQixFQUFFeTFCLDRCQUE0QngxQixJQUFJSyxHQUFHSCxJQUFJOTRDLElBQUltdUUsR0FBR3BwRixFQUFFNHpELEVBQUVqc0QsRUFBRXNULEdBQUc2ckUsSUFBRyxFQUFHL3lCLEVBQUUvekQsRUFBRTB0RSxjQUFjOVosRUFBRTFqRCxNQUFNNmpELEVBQUVrMEIsR0FBR2pvRixFQUFFMkgsRUFBRWlzRCxFQUFFbHJELEdBQUcsSUFBSTQ2QyxFQUFFdGpELEVBQUUwdEUsY0FBYzdaLElBQUlLLEdBQUdILElBQUl6USxHQUFHbWhDLEdBQUd0M0UsU0FBUzI1RSxJQUFJLG1CQUFvQmhvRixJQUFJd3BGLEdBQUd0b0YsRUFBRTBILEVBQUU1SSxFQUFFNkksR0FBRzI3QyxFQUFFdGpELEVBQUUwdEUsZ0JBQWdCNVosRUFBRWd6QixJQUFJaUMsR0FBRy9vRixFQUFFMEgsRUFBRW9zRCxFQUFFbnNELEVBQUVvc0QsRUFBRXpRLEVBQUVyb0MsS0FBSSxJQUFLRixHQUFHLG1CQUFvQjY0QyxFQUFFa2lDLDRCQUE0QixtQkFBb0JsaUMsRUFBRW1pQyxzQkFBc0IsbUJBQW9CbmlDLEVBQUVtaUMscUJBQzllbmlDLEVBQUVtaUMsb0JBQW9CcHVGLEVBQUUyN0MsRUFBRXJvQyxHQUFHLG1CQUFvQjI0QyxFQUFFa2lDLDRCQUE0QmxpQyxFQUFFa2lDLDJCQUEyQm51RixFQUFFMjdDLEVBQUVyb0MsSUFBSSxtQkFBb0IyNEMsRUFBRTkwQixxQkFBcUI5K0IsRUFBRXd0RSxPQUFPLEdBQUcsbUJBQW9CNVosRUFBRWgxQiwwQkFBMEI1K0IsRUFBRXd0RSxPQUFPLFFBQVEsbUJBQW9CNVosRUFBRTkwQixvQkFBb0IrMEIsSUFBSTl6RCxFQUFFMHJGLGVBQWUxM0IsSUFBSWgwRCxFQUFFMnRFLGdCQUFnQjF0RSxFQUFFd3RFLE9BQU8sR0FBRyxtQkFBb0I1WixFQUFFaDFCLHlCQUF5QmkxQixJQUFJOXpELEVBQUUwckYsZUFBZTEzQixJQUFJaDBELEVBQUUydEUsZ0JBQWdCMXRFLEVBQUV3dEUsT0FBTyxNQUFNeHRFLEVBQUV5ckYsY0FBYzlqRixFQUFFM0gsRUFBRTB0RSxjQUFjcHFCLEdBQUdzUSxFQUFFLzNDLE1BQU1sVSxFQUFFaXNELEVBQUUxakQsTUFBTW96QyxFQUFFc1EsRUFBRTE3QyxRQUNqZitDLEVBQUV0VCxFQUFFbXNELElBQUksbUJBQW9CRixFQUFFOTBCLG9CQUFvQiswQixJQUFJOXpELEVBQUUwckYsZUFBZTEzQixJQUFJaDBELEVBQUUydEUsZ0JBQWdCMXRFLEVBQUV3dEUsT0FBTyxHQUFHLG1CQUFvQjVaLEVBQUVoMUIseUJBQXlCaTFCLElBQUk5ekQsRUFBRTByRixlQUFlMTNCLElBQUloMEQsRUFBRTJ0RSxnQkFBZ0IxdEUsRUFBRXd0RSxPQUFPLE1BQU03bEUsR0FBRSxHQUFJLE9BQU9xdUYsR0FBR2oyRixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWdzRCxFQUFFanJELEdBQzVPLFNBQVNzdEYsR0FBR2oyRixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsRUFBRWlyRCxHQUFHaWlDLEdBQUc3MUYsRUFBRUMsR0FBRyxJQUFJNHpELEVBQUUsSUFBYSxJQUFSNXpELEVBQUV3dEUsT0FBVyxJQUFJN2xFLElBQUlpc0QsRUFBRSxPQUFPbHJELEdBQUcyOEUsR0FBR3JsRixFQUFFMEgsR0FBRSxHQUFJd3RGLEdBQUduMUYsRUFBRUMsRUFBRTJ6RCxHQUFHaHNELEVBQUUzSCxFQUFFbXNFLFVBQVUyb0IsR0FBRzNuRixRQUFRbk4sRUFBRSxJQUFJNnpELEVBQUVELEdBQUcsbUJBQW9CbHNELEVBQUVrcUQseUJBQXlCLEtBQUtqcUQsRUFBRXFaLFNBQXdJLE9BQS9IaGhCLEVBQUV3dEUsT0FBTyxFQUFFLE9BQU96dEUsR0FBRzZ6RCxHQUFHNXpELEVBQUVpeUIsTUFBTXM2RCxHQUFHdnNGLEVBQUVELEVBQUVreUIsTUFBTSxLQUFLMGhDLEdBQUczekQsRUFBRWl5QixNQUFNczZELEdBQUd2c0YsRUFBRSxLQUFLNnpELEVBQUVGLElBQUlxaEMsR0FBR2oxRixFQUFFQyxFQUFFNnpELEVBQUVGLEdBQUczekQsRUFBRTB0RSxjQUFjL2xFLEVBQUV1SSxNQUFNeEgsR0FBRzI4RSxHQUFHcmxGLEVBQUUwSCxHQUFFLEdBQVcxSCxFQUFFaXlCLE1BQU0sU0FBU2drRSxHQUFHbDJGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRW9zRSxVQUFVbnNFLEVBQUU0ekYsZUFBZTVPLEdBQUdqbEYsRUFBRUMsRUFBRTR6RixlQUFlNXpGLEVBQUU0ekYsaUJBQWlCNXpGLEVBQUVrWSxTQUFTbFksRUFBRWtZLFNBQVM4c0UsR0FBR2psRixFQUFFQyxFQUFFa1ksU0FBUSxHQUFJNDBFLEdBQUcvc0YsRUFBRUMsRUFBRTB5RSxlQUM5ZCxTQUFTd2pCLEdBQUduMkYsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLEdBQXVDLE9BQXBDZ2pGLEtBQUtDLEdBQUdqakYsR0FBRzFJLEVBQUV3dEUsT0FBTyxJQUFJd25CLEdBQUdqMUYsRUFBRUMsRUFBRTBILEVBQUVDLEdBQVUzSCxFQUFFaXlCLE1BQU0sSUFBSWtrRSxHQUFHLENBQUN4b0IsV0FBVyxLQUFLdWQsWUFBWSxLQUFLQyxVQUFVLEdBQUcsU0FBU2lMLEdBQUdyMkYsR0FBRyxNQUFNLENBQUN5MUYsVUFBVXoxRixFQUFFMDFGLFVBQVUsS0FBS0MsWUFBWSxNQUFNLFNBQVNXLEdBQUd0MkYsRUFBRUMsR0FBRyxNQUFNLENBQUN3MUYsVUFBVXoxRixFQUFFeTFGLFVBQVV4MUYsRUFBRXkxRixVQUFVLEtBQUtDLFlBQVkzMUYsRUFBRTIxRixhQUNoUixTQUFTWSxHQUFHdjJGLEVBQUVDLEVBQUUwSCxHQUFHLElBQTBEbXNELEVBQXREbHNELEVBQUUzSCxFQUFFZ3JGLGFBQWF0aUYsRUFBRXdrRixHQUFFLy9FLFFBQVF3bUQsR0FBRSxFQUFHQyxFQUFFLElBQWEsSUFBUjV6RCxFQUFFd3RFLE9BQXFKLElBQXZJM1osRUFBRUQsS0FBS0MsR0FBRSxPQUFPOXpELEdBQUcsT0FBT0EsRUFBRTJ0RSxnQkFBaUIsSUFBTyxFQUFGaGxFLElBQVNtckQsR0FBRUYsR0FBRSxFQUFHM3pELEVBQUV3dEUsUUFBUSxLQUFZLE9BQU96dEUsR0FBRyxPQUFPQSxFQUFFMnRFLGdCQUFjaGxFLEdBQUcsR0FBRTQ3RSxHQUFFNEksR0FBSSxFQUFGeGtGLEdBQVEsT0FBTzNJLEVBQTJCLE9BQXhCdXJGLEdBQUd0ckYsR0FBd0IsUUFBckJELEVBQUVDLEVBQUUwdEUsZ0JBQTJDLFFBQWYzdEUsRUFBRUEsRUFBRTR0RSxhQUE0QixJQUFZLEVBQVAzdEUsRUFBRXFyRixNQUFRcnJGLEVBQUV5bUYsTUFBTSxFQUFFLE9BQU8xbUYsRUFBRTFDLEtBQUsyQyxFQUFFeW1GLE1BQU0sRUFBRXptRixFQUFFeW1GLE1BQU0sV0FBVyxPQUFLLzlFLEVBQUVmLEVBQUVvcUIsU0FBU2h5QixFQUFFNEgsRUFBRTBrQyxTQUFnQnNuQixHQUFHaHNELEVBQUUzSCxFQUFFcXJGLEtBQUsxM0IsRUFBRTN6RCxFQUFFaXlCLE1BQU12cEIsRUFBRSxDQUFDMmlGLEtBQUssU0FBU3Q1RCxTQUFTcnBCLEdBQUcsSUFBTyxFQUFGZixJQUFNLE9BQU9nc0QsR0FBR0EsRUFBRTB5QixXQUFXLEVBQUUxeUIsRUFBRXEzQixhQUM3ZXRpRixHQUFHaXJELEVBQUU0aUMsR0FBRzd0RixFQUFFZixFQUFFLEVBQUUsTUFBTTVILEVBQUV1c0YsR0FBR3ZzRixFQUFFNEgsRUFBRUQsRUFBRSxNQUFNaXNELEVBQUV0UCxPQUFPcmtELEVBQUVELEVBQUVza0QsT0FBT3JrRCxFQUFFMnpELEVBQUVtYSxRQUFRL3RFLEVBQUVDLEVBQUVpeUIsTUFBTTBoQyxFQUFFM3pELEVBQUVpeUIsTUFBTXk3QyxjQUFjMG9CLEdBQUcxdUYsR0FBRzFILEVBQUUwdEUsY0FBY3lvQixHQUFHcDJGLEdBQUd5MkYsR0FBR3gyRixFQUFFMEksSUFBcUIsR0FBRyxRQUFyQkEsRUFBRTNJLEVBQUUydEUsZUFBMEIsQ0FBZ0IsR0FBRyxRQUFsQjdaLEVBQUVuckQsRUFBRWlsRSxZQUF1QixDQUFDLEdBQUcvWixFQUFHLE9BQVcsSUFBUjV6RCxFQUFFd3RFLE9BQWlCeHRFLEVBQUV3dEUsUUFBUSxJQUFJaXBCLEdBQUcxMkYsRUFBRUMsRUFBRTBILEVBQUVpOEQsTUFBTWorRCxFQUFFLFFBQVUsT0FBTzFGLEVBQUUwdEUsZUFBcUIxdEUsRUFBRWl5QixNQUFNbHlCLEVBQUVreUIsTUFBTWp5QixFQUFFd3RFLE9BQU8sSUFBSSxPQUFLN1osRUFBRWhzRCxFQUFFMGtDLFNBQVMzakMsRUFBRTFJLEVBQUVxckYsS0FBSzFqRixFQUFFNHVGLEdBQUcsQ0FBQ2xMLEtBQUssVUFBVXQ1RCxTQUFTcHFCLEVBQUVvcUIsVUFBVXJwQixFQUFFLEVBQUUsT0FBTWlyRCxFQUFFMjRCLEdBQUczNEIsRUFBRWpyRCxFQUFFaEIsRUFBRSxPQUFROGxFLE9BQU8sRUFBRTdsRSxFQUFFMDhDLE9BQU9ya0QsRUFBRTJ6RCxFQUFFdFAsT0FBT3JrRCxFQUFFMkgsRUFBRW1tRSxRQUFRbmEsRUFBRTN6RCxFQUFFaXlCLE1BQU10cUIsRUFBRSxJQUFZLEVBQVAzSCxFQUFFcXJGLE9BQVNrQixHQUFHdnNGLEVBQUVELEVBQUVreUIsTUFDcGYsS0FBS3ZxQixHQUFHMUgsRUFBRWl5QixNQUFNeTdDLGNBQWMwb0IsR0FBRzF1RixHQUFHMUgsRUFBRTB0RSxjQUFjeW9CLEdBQVV4aUMsR0FBRSxHQUFHLElBQVksRUFBUDN6RCxFQUFFcXJGLE1BQVFyckYsRUFBRXkyRixHQUFHMTJGLEVBQUVDLEVBQUUwSCxFQUFFLFdBQVcsR0FBRyxPQUFPbXNELEVBQUV4MkQsS0FBSzJDLEVBQUV5MkYsR0FBRzEyRixFQUFFQyxFQUFFMEgsRUFBRWk4RCxNQUFNaitELEVBQUUsWUFBWSxHQUFHaUMsRUFBRSxJQUFLRCxFQUFFM0gsRUFBRXNtRixZQUFZSyxJQUFJLytFLEVBQUUsQ0FBSyxHQUFHLFFBQVBBLEVBQUVtb0YsSUFBYyxDQUFDLE9BQU9wb0YsR0FBR0EsR0FBRyxLQUFLLEVBQUVpc0QsRUFBRSxFQUFFLE1BQU0sS0FBSyxHQUFHQSxFQUFFLEVBQUUsTUFBTSxLQUFLLEdBQUcsS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssUUFBUSxLQUFLLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssU0FBU0EsRUFBRSxHQUFHLE1BQU0sS0FBSyxVQUFVQSxFQUNsZ0IsVUFBVSxNQUFNLFFBQVFBLEVBQUUsRUFBcUMsS0FBbkNoc0QsRUFBRSxJQUFLZ3NELEdBQUdoc0QsRUFBRXlvRSxlQUFlMW9FLElBQUksRUFBRWlzRCxJQUFTaHNELElBQUllLEVBQUV5aUYsWUFBWXppRixFQUFFeWlGLFVBQVV4akYsRUFBRWloRixHQUFHN29GLEVBQUU0SCxHQUFHLElBQUk0c0YsS0FBS3YwRixFQUFFeTJGLEdBQUcxMkYsRUFBRUMsRUFBRTBILEVBQUVpOEQsTUFBTWorRCxFQUFFLFdBQVcsT0FBT211RCxFQUFFeDJELE1BQU0yQyxFQUFFd3RFLE9BQU8sSUFBSXh0RSxFQUFFaXlCLE1BQU1seUIsRUFBRWt5QixNQUFNanlCLEVBQUUwMkYsR0FBR2hWLEtBQUssS0FBSzNoRixHQUFHOHpELEVBQUU4aUMsWUFBWTMyRixFQUFFQSxFQUFFLE9BQU8wSCxFQUFFZ0IsRUFBRXdpRixZQUFZVixHQUFHOUcsR0FBRzd2QixFQUFFK3BCLGFBQWEyTSxHQUFHdnFGLEVBQUV5cUYsSUFBRSxFQUFHQyxHQUFHLEtBQUssT0FBT2hqRixJQUFJb2lGLEdBQUdDLE1BQU1FLEdBQUdILEdBQUdDLE1BQU1HLEdBQUdKLEdBQUdDLE1BQU1DLEdBQUdDLEdBQUd2aUYsRUFBRXFyQixHQUFHbTNELEdBQUd4aUYsRUFBRXVqRixTQUFTakIsR0FBR2hxRixJQUFHQSxFQUFFdzJGLEdBQUd4MkYsRUFBRUEsRUFBRWdyRixhQUFhajVELFdBQVl5N0MsT0FBTyxNQUFNLE9BQU94dEUsRUFBRSxPQUFHMnpELEdBQVNoc0QsRUFBRWl2RixHQUFHNzJGLEVBQUVDLEVBQUUySCxFQUFFb3FCLFNBQVNwcUIsRUFBRTBrQyxTQUFTM2tDLEdBQUdpc0QsRUFBRTN6RCxFQUFFaXlCLE1BQU12cEIsRUFBRTNJLEVBQUVreUIsTUFBTXk3QyxjQUN4ZS9aLEVBQUUrWixjQUFjLE9BQU9obEUsRUFBRTB0RixHQUFHMXVGLEdBQUcydUYsR0FBRzN0RixFQUFFaEIsR0FBR2lzRCxFQUFFMHlCLFdBQVd0bUYsRUFBRXNtRixZQUFZMytFLEVBQUUxSCxFQUFFMHRFLGNBQWN5b0IsR0FBR3h1RixJQUFFRCxFQUFFbXZGLEdBQUc5MkYsRUFBRUMsRUFBRTJILEVBQUVvcUIsU0FBU3JxQixHQUFHMUgsRUFBRTB0RSxjQUFjLEtBQVlobUUsR0FBRSxPQUFHaXNELEdBQVNoc0QsRUFBRWl2RixHQUFHNzJGLEVBQUVDLEVBQUUySCxFQUFFb3FCLFNBQVNwcUIsRUFBRTBrQyxTQUFTM2tDLEdBQUdpc0QsRUFBRTN6RCxFQUFFaXlCLE1BQU12cEIsRUFBRTNJLEVBQUVreUIsTUFBTXk3QyxjQUFjL1osRUFBRStaLGNBQWMsT0FBT2hsRSxFQUFFMHRGLEdBQUcxdUYsR0FBRzJ1RixHQUFHM3RGLEVBQUVoQixHQUFHaXNELEVBQUUweUIsV0FBV3RtRixFQUFFc21GLFlBQVkzK0UsRUFBRTFILEVBQUUwdEUsY0FBY3lvQixHQUFHeHVGLElBQUVELEVBQUVtdkYsR0FBRzkyRixFQUFFQyxFQUFFMkgsRUFBRW9xQixTQUFTcnFCLEdBQUcxSCxFQUFFMHRFLGNBQWMsS0FBWWhtRSxHQUFFLFNBQVM4dUYsR0FBR3oyRixFQUFFQyxHQUE4RCxPQUEzREEsRUFBRXUyRixHQUFHLENBQUNsTCxLQUFLLFVBQVV0NUQsU0FBUy94QixHQUFHRCxFQUFFc3JGLEtBQUssRUFBRSxPQUFRaG5DLE9BQU90a0QsRUFBU0EsRUFBRWt5QixNQUFNanlCLEVBQ3ZjLFNBQVM2MkYsR0FBRzkyRixFQUFFQyxFQUFFMEgsRUFBRUMsR0FBRyxJQUFJZSxFQUFFM0ksRUFBRWt5QixNQUF1TCxPQUFqTGx5QixFQUFFMkksRUFBRW9sRSxRQUFRcG1FLEVBQUV3a0YsR0FBR3hqRixFQUFFLENBQUMyaUYsS0FBSyxVQUFVdDVELFNBQVNycUIsSUFBSSxJQUFZLEVBQVAxSCxFQUFFcXJGLFFBQVUzakYsRUFBRSsrRSxNQUFNOStFLEdBQUdELEVBQUUyOEMsT0FBT3JrRCxFQUFFMEgsRUFBRW9tRSxRQUFRLEtBQUssT0FBTy90RSxJQUFrQixRQUFkNEgsRUFBRTNILEVBQUU4cUYsWUFBb0I5cUYsRUFBRThxRixVQUFVLENBQUMvcUYsR0FBR0MsRUFBRXd0RSxPQUFPLElBQUk3bEUsRUFBRXJKLEtBQUt5QixJQUFXQyxFQUFFaXlCLE1BQU12cUIsRUFDbk8sU0FBU2t2RixHQUFHNzJGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxHQUFHLElBQUlpckQsRUFBRTN6RCxFQUFFcXJGLEtBQW1CejNCLEdBQWQ3ekQsRUFBRUEsRUFBRWt5QixPQUFjNjdDLFFBQVFqYSxFQUFFLENBQUN3M0IsS0FBSyxTQUFTdDVELFNBQVNycUIsR0FBdU8sT0FBcE8sSUFBTyxFQUFGaXNELElBQU0zekQsRUFBRWl5QixRQUFRbHlCLElBQUcySCxFQUFFMUgsRUFBRWl5QixPQUFRbzBELFdBQVcsRUFBRTMrRSxFQUFFc2pGLGFBQWFuM0IsRUFBRTd6RCxFQUFFOHFGLFVBQVUsT0FBT3BqRixFQUFFd2tGLEdBQUduc0YsRUFBRTh6RCxJQUFLNi9CLGFBQTRCLFNBQWYzekYsRUFBRTJ6RixhQUF1QixPQUFPOS9CLEVBQUVqc0QsRUFBRXVrRixHQUFHdDRCLEVBQUVqc0QsSUFBSUEsRUFBRTJrRixHQUFHM2tGLEVBQUVnc0QsRUFBRWpyRCxFQUFFLE9BQVE4a0UsT0FBTyxFQUFHN2xFLEVBQUUwOEMsT0FBT3JrRCxFQUFFMEgsRUFBRTI4QyxPQUFPcmtELEVBQUUwSCxFQUFFb21FLFFBQVFubUUsRUFBRTNILEVBQUVpeUIsTUFBTXZxQixFQUFTQyxFQUFFLFNBQVM4dUYsR0FBRzEyRixFQUFFQyxFQUFFMEgsRUFBRUMsR0FBd0csT0FBckcsT0FBT0EsR0FBR2drRixHQUFHaGtGLEdBQUc0a0YsR0FBR3ZzRixFQUFFRCxFQUFFa3lCLE1BQU0sS0FBS3ZxQixJQUFHM0gsRUFBRXkyRixHQUFHeDJGLEVBQUVBLEVBQUVnckYsYUFBYWo1RCxXQUFZeTdDLE9BQU8sRUFBRXh0RSxFQUFFMHRFLGNBQWMsS0FBWTN0RSxFQUN6YyxTQUFTKzJGLEdBQUcvMkYsRUFBRUMsRUFBRTBILEdBQUczSCxFQUFFMG1GLE9BQU96bUYsRUFBRSxJQUFJMkgsRUFBRTVILEVBQUV3dEUsVUFBVSxPQUFPNWxFLElBQUlBLEVBQUU4K0UsT0FBT3ptRixHQUFHb21GLEdBQUdybUYsRUFBRXNrRCxPQUFPcmtELEVBQUUwSCxHQUFHLFNBQVNxdkYsR0FBR2gzRixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsR0FBRyxJQUFJaXJELEVBQUU1ekQsRUFBRTJ0RSxjQUFjLE9BQU8vWixFQUFFNXpELEVBQUUydEUsY0FBYyxDQUFDaW5CLFlBQVkzMEYsRUFBRXcwRixVQUFVLEtBQUtFLG1CQUFtQixFQUFFaGtELEtBQUsvb0MsRUFBRTZyRixLQUFLOXJGLEVBQUU2ckYsU0FBUzdxRixJQUFJaXJELEVBQUVnaEMsWUFBWTMwRixFQUFFMnpELEVBQUU2Z0MsVUFBVSxLQUFLN2dDLEVBQUUrZ0MsbUJBQW1CLEVBQUUvZ0MsRUFBRWpqQixLQUFLL29DLEVBQUVnc0QsRUFBRTYvQixLQUFLOXJGLEVBQUVpc0QsRUFBRTQvQixTQUFTN3FGLEdBQ2pVLFNBQVNzdUYsR0FBR2ozRixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFM0gsRUFBRWdyRixhQUFhdGlGLEVBQUVmLEVBQUV5bEYsWUFBWXo1QixFQUFFaHNELEVBQUU2ckYsS0FBc0MsR0FBakN3QixHQUFHajFGLEVBQUVDLEVBQUUySCxFQUFFb3FCLFNBQVNycUIsR0FBa0IsSUFBTyxHQUF0QkMsRUFBRXVsRixHQUFFLy9FLFVBQXFCeEYsRUFBSSxFQUFGQSxFQUFJLEVBQUUzSCxFQUFFd3RFLE9BQU8sUUFBUSxDQUFDLEdBQUcsT0FBT3p0RSxHQUFHLElBQWEsSUFBUkEsRUFBRXl0RSxPQUFXenRFLEVBQUUsSUFBSUEsRUFBRUMsRUFBRWl5QixNQUFNLE9BQU9seUIsR0FBRyxDQUFDLEdBQUcsS0FBS0EsRUFBRW1rRSxJQUFJLE9BQU9ua0UsRUFBRTJ0RSxlQUFlb3BCLEdBQUcvMkYsRUFBRTJILEVBQUUxSCxRQUFRLEdBQUcsS0FBS0QsRUFBRW1rRSxJQUFJNHlCLEdBQUcvMkYsRUFBRTJILEVBQUUxSCxRQUFRLEdBQUcsT0FBT0QsRUFBRWt5QixNQUFNLENBQUNseUIsRUFBRWt5QixNQUFNb3lCLE9BQU90a0QsRUFBRUEsRUFBRUEsRUFBRWt5QixNQUFNLFNBQVMsR0FBR2x5QixJQUFJQyxFQUFFLE1BQU1ELEVBQUUsS0FBSyxPQUFPQSxFQUFFK3RFLFNBQVMsQ0FBQyxHQUFHLE9BQU8vdEUsRUFBRXNrRCxRQUFRdGtELEVBQUVza0QsU0FBU3JrRCxFQUFFLE1BQU1ELEVBQUVBLEVBQUVBLEVBQUVza0QsT0FBT3RrRCxFQUFFK3RFLFFBQVF6cEIsT0FBT3RrRCxFQUFFc2tELE9BQU90a0QsRUFBRUEsRUFBRSt0RSxRQUFRbm1FLEdBQUcsRUFBUyxHQUFQMjhFLEdBQUU0SSxHQUFFdmxGLEdBQU0sSUFBWSxFQUFQM0gsRUFBRXFyRixNQUFRcnJGLEVBQUUwdEUsY0FDL2UsVUFBVSxPQUFPaGxFLEdBQUcsSUFBSyxXQUFxQixJQUFWaEIsRUFBRTFILEVBQUVpeUIsTUFBVXZwQixFQUFFLEtBQUssT0FBT2hCLEdBQWlCLFFBQWQzSCxFQUFFMkgsRUFBRTZsRSxZQUFvQixPQUFPNGYsR0FBR3B0RixLQUFLMkksRUFBRWhCLEdBQUdBLEVBQUVBLEVBQUVvbUUsUUFBWSxRQUFKcG1FLEVBQUVnQixJQUFZQSxFQUFFMUksRUFBRWl5QixNQUFNanlCLEVBQUVpeUIsTUFBTSxPQUFPdnBCLEVBQUVoQixFQUFFb21FLFFBQVFwbUUsRUFBRW9tRSxRQUFRLE1BQU1pcEIsR0FBRy8yRixHQUFFLEVBQUcwSSxFQUFFaEIsRUFBRWlzRCxHQUFHLE1BQU0sSUFBSyxZQUE2QixJQUFqQmpzRCxFQUFFLEtBQUtnQixFQUFFMUksRUFBRWl5QixNQUFVanlCLEVBQUVpeUIsTUFBTSxLQUFLLE9BQU92cEIsR0FBRyxDQUFlLEdBQUcsUUFBakIzSSxFQUFFMkksRUFBRTZrRSxZQUF1QixPQUFPNGYsR0FBR3B0RixHQUFHLENBQUNDLEVBQUVpeUIsTUFBTXZwQixFQUFFLE1BQU0zSSxFQUFFMkksRUFBRW9sRSxRQUFRcGxFLEVBQUVvbEUsUUFBUXBtRSxFQUFFQSxFQUFFZ0IsRUFBRUEsRUFBRTNJLEVBQUVnM0YsR0FBRy8yRixHQUFFLEVBQUcwSCxFQUFFLEtBQUtpc0QsR0FBRyxNQUFNLElBQUssV0FBV29qQyxHQUFHLzJGLEdBQUUsRUFBRyxLQUFLLFVBQUssR0FBUSxNQUFNLFFBQVFBLEVBQUUwdEUsY0FBYyxLQUFLLE9BQU8xdEUsRUFBRWl5QixNQUN4ZCxTQUFTaWpFLEdBQUduMUYsRUFBRUMsRUFBRTBILEdBQXlELEdBQXRELE9BQU8zSCxJQUFJQyxFQUFFdW1GLGFBQWF4bUYsRUFBRXdtRixjQUFjMkIsSUFBSWxvRixFQUFFeW1GLE1BQVMsSUFBSy8rRSxFQUFFMUgsRUFBRXFtRixZQUFZLE9BQU8sS0FBSyxHQUFHLE9BQU90bUYsR0FBR0MsRUFBRWl5QixRQUFRbHlCLEVBQUVreUIsTUFBTSxNQUFNMHhDLE1BQU1qK0QsRUFBRSxNQUFNLEdBQUcsT0FBTzFGLEVBQUVpeUIsTUFBTSxDQUE0QyxJQUFqQ3ZxQixFQUFFd2tGLEdBQVpuc0YsRUFBRUMsRUFBRWl5QixNQUFhbHlCLEVBQUVpckYsY0FBY2hyRixFQUFFaXlCLE1BQU12cUIsRUFBTUEsRUFBRTI4QyxPQUFPcmtELEVBQUUsT0FBT0QsRUFBRSt0RSxTQUFTL3RFLEVBQUVBLEVBQUUrdEUsU0FBUXBtRSxFQUFFQSxFQUFFb21FLFFBQVFvZSxHQUFHbnNGLEVBQUVBLEVBQUVpckYsZUFBZ0IzbUMsT0FBT3JrRCxFQUFFMEgsRUFBRW9tRSxRQUFRLEtBQUssT0FBTzl0RSxFQUFFaXlCLE1BRy9VLFNBQVNnbEUsR0FBR2wzRixFQUFFQyxHQUFTLE9BQU5zcUYsR0FBR3RxRixHQUFVQSxFQUFFa2tFLEtBQUssS0FBSyxFQUFFLE9BQU80Z0IsR0FBRzlrRixFQUFFNmpCLE9BQU9raEUsS0FBaUIsT0FBWmhsRixFQUFFQyxFQUFFd3RFLFFBQWV4dEUsRUFBRXd0RSxPQUFTLE1BQUh6dEUsRUFBUyxJQUFJQyxHQUFHLEtBQUssS0FBSyxFQUFFLE9BQU8rc0YsS0FBSzFJLEdBQUVJLElBQUlKLEdBQUVHLElBQUc4SSxLQUFlLElBQU8sT0FBakJ2dEYsRUFBRUMsRUFBRXd0RSxTQUFxQixJQUFPLElBQUZ6dEUsSUFBUUMsRUFBRXd0RSxPQUFTLE1BQUh6dEUsRUFBUyxJQUFJQyxHQUFHLEtBQUssS0FBSyxFQUFFLE9BQU9pdEYsR0FBR2p0RixHQUFHLEtBQUssS0FBSyxHQUEwQixHQUF2QnFrRixHQUFFNkksSUFBd0IsUUFBckJudEYsRUFBRUMsRUFBRTB0RSxnQkFBMkIsT0FBTzN0RSxFQUFFNHRFLFdBQVcsQ0FBQyxHQUFHLE9BQU8zdEUsRUFBRXV0RSxVQUFVLE1BQU01SixNQUFNaitELEVBQUUsTUFBTWdtRixLQUFlLE9BQVMsT0FBbkIzckYsRUFBRUMsRUFBRXd0RSxRQUFzQnh0RSxFQUFFd3RFLE9BQVMsTUFBSHp0RSxFQUFTLElBQUlDLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT3FrRixHQUFFNkksSUFBRyxLQUFLLEtBQUssRUFBRSxPQUFPSCxLQUFLLEtBQUssS0FBSyxHQUFHLE9BQU83RyxHQUFHbG1GLEVBQUU2akIsS0FBS3VnRCxVQUFVLEtBQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPd3dCLEtBQzFnQixLQUF5QixRQUFRLE9BQU8sTUFBTSxJQUFJc0MsSUFBRyxFQUFHQyxJQUFFLEVBQUdDLEdBQUcsbUJBQW9CN21DLFFBQVFBLFFBQVFyd0QsSUFBSW0zRixHQUFFLEtBQUssU0FBU0MsR0FBR3YzRixFQUFFQyxHQUFHLElBQUkwSCxFQUFFM0gsRUFBRTJlLElBQUksR0FBRyxPQUFPaFgsRUFBRSxHQUFHLG1CQUFvQkEsRUFBRSxJQUFJQSxFQUFFLE1BQU0sTUFBTUMsR0FBRzR2RixHQUFFeDNGLEVBQUVDLEVBQUUySCxRQUFRRCxFQUFFeUYsUUFBUSxLQUFLLFNBQVNxcUYsR0FBR3ozRixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQSxJQUFJLE1BQU1DLEdBQUc0dkYsR0FBRXgzRixFQUFFQyxFQUFFMkgsSUFBSSxJQUFJOHZGLElBQUcsRUFJeFIsU0FBU0MsR0FBRzMzRixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFM0gsRUFBRWduRixZQUF5QyxHQUFHLFFBQWhDci9FLEVBQUUsT0FBT0EsRUFBRUEsRUFBRXFvRixXQUFXLE1BQWlCLENBQUMsSUFBSXRuRixFQUFFZixFQUFFQSxFQUFFeUYsS0FBSyxFQUFFLENBQUMsSUFBSTFFLEVBQUV3N0QsSUFBSW5rRSxLQUFLQSxFQUFFLENBQUMsSUFBSTR6RCxFQUFFanJELEVBQUVzWixRQUFRdFosRUFBRXNaLGFBQVEsT0FBTyxJQUFTMnhDLEdBQUc2akMsR0FBR3gzRixFQUFFMEgsRUFBRWlzRCxHQUFHanJELEVBQUVBLEVBQUUwRSxXQUFXMUUsSUFBSWYsSUFBSSxTQUFTZ3dGLEdBQUc1M0YsRUFBRUMsR0FBZ0QsR0FBRyxRQUFoQ0EsRUFBRSxRQUFsQkEsRUFBRUEsRUFBRWduRixhQUF1QmhuRixFQUFFZ3dGLFdBQVcsTUFBaUIsQ0FBQyxJQUFJdG9GLEVBQUUxSCxFQUFFQSxFQUFFb04sS0FBSyxFQUFFLENBQUMsSUFBSTFGLEVBQUV3OEQsSUFBSW5rRSxLQUFLQSxFQUFFLENBQUMsSUFBSTRILEVBQUVELEVBQUVzVCxPQUFPdFQsRUFBRXNhLFFBQVFyYSxJQUFJRCxFQUFFQSxFQUFFMEYsV0FBVzFGLElBQUkxSCxJQUFJLFNBQVM0M0YsR0FBRzczRixHQUFHLElBQUlDLEVBQUVELEVBQUUyZSxJQUFJLEdBQUcsT0FBTzFlLEVBQUUsQ0FBQyxJQUFJMEgsRUFBRTNILEVBQUVvc0UsVUFBaUJwc0UsRUFBRW1rRSxJQUE4Qm5rRSxFQUFFMkgsRUFBRSxtQkFBb0IxSCxFQUFFQSxFQUFFRCxHQUFHQyxFQUFFbU4sUUFBUXBOLEdBQ2hmLFNBQVM4M0YsR0FBRzkzRixHQUFHLElBQUlDLEVBQUVELEVBQUV3dEUsVUFBVSxPQUFPdnRFLElBQUlELEVBQUV3dEUsVUFBVSxLQUFLc3FCLEdBQUc3M0YsSUFBSUQsRUFBRWt5QixNQUFNLEtBQUtseUIsRUFBRStxRixVQUFVLEtBQUsvcUYsRUFBRSt0RSxRQUFRLEtBQUssSUFBSS90RSxFQUFFbWtFLEtBQW9CLFFBQWRsa0UsRUFBRUQsRUFBRW9zRSxvQkFBNEJuc0UsRUFBRThqRixXQUFXOWpGLEVBQUUrakYsV0FBVy9qRixFQUFFb2hGLFdBQVdwaEYsRUFBRWdrRixXQUFXaGtGLEVBQUVpa0YsS0FBTWxrRixFQUFFb3NFLFVBQVUsS0FBS3BzRSxFQUFFc2tELE9BQU8sS0FBS3RrRCxFQUFFd21GLGFBQWEsS0FBS3htRixFQUFFMHJGLGNBQWMsS0FBSzFyRixFQUFFMnRFLGNBQWMsS0FBSzN0RSxFQUFFaXJGLGFBQWEsS0FBS2pyRixFQUFFb3NFLFVBQVUsS0FBS3BzRSxFQUFFaW5GLFlBQVksS0FBSyxTQUFTOFEsR0FBRy8zRixHQUFHLE9BQU8sSUFBSUEsRUFBRW1rRSxLQUFLLElBQUlua0UsRUFBRW1rRSxLQUFLLElBQUlua0UsRUFBRW1rRSxJQUNoYSxTQUFTNnpCLEdBQUdoNEYsR0FBR0EsRUFBRSxPQUFPLENBQUMsS0FBSyxPQUFPQSxFQUFFK3RFLFNBQVMsQ0FBQyxHQUFHLE9BQU8vdEUsRUFBRXNrRCxRQUFReXpDLEdBQUcvM0YsRUFBRXNrRCxRQUFRLE9BQU8sS0FBS3RrRCxFQUFFQSxFQUFFc2tELE9BQWlDLElBQTFCdGtELEVBQUUrdEUsUUFBUXpwQixPQUFPdGtELEVBQUVza0QsT0FBV3RrRCxFQUFFQSxFQUFFK3RFLFFBQVEsSUFBSS90RSxFQUFFbWtFLEtBQUssSUFBSW5rRSxFQUFFbWtFLEtBQUssS0FBS25rRSxFQUFFbWtFLEtBQUssQ0FBQyxHQUFXLEVBQVJua0UsRUFBRXl0RSxNQUFRLFNBQVN6dEUsRUFBRSxHQUFHLE9BQU9BLEVBQUVreUIsT0FBTyxJQUFJbHlCLEVBQUVta0UsSUFBSSxTQUFTbmtFLEVBQU9BLEVBQUVreUIsTUFBTW95QixPQUFPdGtELEVBQUVBLEVBQUVBLEVBQUVreUIsTUFBTSxLQUFhLEVBQVJseUIsRUFBRXl0RSxPQUFTLE9BQU96dEUsRUFBRW9zRSxXQUMvUyxTQUFTNnJCLEdBQUdqNEYsRUFBRUMsRUFBRTBILEdBQUcsSUFBSUMsRUFBRTVILEVBQUVta0UsSUFBSSxHQUFHLElBQUl2OEQsR0FBRyxJQUFJQSxFQUFFNUgsRUFBRUEsRUFBRW9zRSxVQUFVbnNFLEVBQUUsSUFBSTBILEVBQUUrL0QsU0FBUy8vRCxFQUFFbWtFLFdBQVdvc0IsYUFBYWw0RixFQUFFQyxHQUFHMEgsRUFBRXV3RixhQUFhbDRGLEVBQUVDLElBQUksSUFBSTBILEVBQUUrL0QsVUFBVXpuRSxFQUFFMEgsRUFBRW1rRSxZQUFhb3NCLGFBQWFsNEYsRUFBRTJILElBQUsxSCxFQUFFMEgsR0FBSTAvRCxZQUFZcm5FLEdBQTRCLE9BQXhCMkgsRUFBRUEsRUFBRXd3RixzQkFBMEMsT0FBT2w0RixFQUFFazBGLFVBQVVsMEYsRUFBRWswRixRQUFRcFIsVUFBVSxHQUFHLElBQUluN0UsR0FBYyxRQUFWNUgsRUFBRUEsRUFBRWt5QixPQUFnQixJQUFJK2xFLEdBQUdqNEYsRUFBRUMsRUFBRTBILEdBQUczSCxFQUFFQSxFQUFFK3RFLFFBQVEsT0FBTy90RSxHQUFHaTRGLEdBQUdqNEYsRUFBRUMsRUFBRTBILEdBQUczSCxFQUFFQSxFQUFFK3RFLFFBQ25YLFNBQVNxcUIsR0FBR3A0RixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFNUgsRUFBRW1rRSxJQUFJLEdBQUcsSUFBSXY4RCxHQUFHLElBQUlBLEVBQUU1SCxFQUFFQSxFQUFFb3NFLFVBQVVuc0UsRUFBRTBILEVBQUV1d0YsYUFBYWw0RixFQUFFQyxHQUFHMEgsRUFBRTAvRCxZQUFZcm5FLFFBQVEsR0FBRyxJQUFJNEgsR0FBYyxRQUFWNUgsRUFBRUEsRUFBRWt5QixPQUFnQixJQUFJa21FLEdBQUdwNEYsRUFBRUMsRUFBRTBILEdBQUczSCxFQUFFQSxFQUFFK3RFLFFBQVEsT0FBTy90RSxHQUFHbzRGLEdBQUdwNEYsRUFBRUMsRUFBRTBILEdBQUczSCxFQUFFQSxFQUFFK3RFLFFBQVEsSUFBSXNxQixHQUFFLEtBQUtDLElBQUcsRUFBRyxTQUFTQyxHQUFHdjRGLEVBQUVDLEVBQUUwSCxHQUFHLElBQUlBLEVBQUVBLEVBQUV1cUIsTUFBTSxPQUFPdnFCLEdBQUc2d0YsR0FBR3g0RixFQUFFQyxFQUFFMEgsR0FBR0EsRUFBRUEsRUFBRW9tRSxRQUM1USxTQUFTeXFCLEdBQUd4NEYsRUFBRUMsRUFBRTBILEdBQUcsR0FBRzhuRSxJQUFJLG1CQUFvQkEsR0FBR2dwQixxQkFBcUIsSUFBSWhwQixHQUFHZ3BCLHFCQUFxQmpwQixHQUFHN25FLEdBQUcsTUFBTW1zRCxJQUFJLE9BQU9uc0QsRUFBRXc4RCxLQUFLLEtBQUssRUFBRWl6QixJQUFHRyxHQUFHNXZGLEVBQUUxSCxHQUFHLEtBQUssRUFBRSxJQUFJMkgsRUFBRXl3RixHQUFFMXZGLEVBQUUydkYsR0FBR0QsR0FBRSxLQUFLRSxHQUFHdjRGLEVBQUVDLEVBQUUwSCxHQUFPMndGLEdBQUczdkYsRUFBRSxRQUFUMHZGLEdBQUV6d0YsS0FBa0Iwd0YsSUFBSXQ0RixFQUFFcTRGLEdBQUUxd0YsRUFBRUEsRUFBRXlrRSxVQUFVLElBQUlwc0UsRUFBRTBuRSxTQUFTMW5FLEVBQUU4ckUsV0FBVzFFLFlBQVl6L0QsR0FBRzNILEVBQUVvbkUsWUFBWXovRCxJQUFJMHdGLEdBQUVqeEIsWUFBWXovRCxFQUFFeWtFLFlBQVksTUFBTSxLQUFLLEdBQUcsT0FBT2lzQixLQUFJQyxJQUFJdDRGLEVBQUVxNEYsR0FBRTF3RixFQUFFQSxFQUFFeWtFLFVBQVUsSUFBSXBzRSxFQUFFMG5FLFNBQVNnYyxHQUFHMWpGLEVBQUU4ckUsV0FBV25rRSxHQUFHLElBQUkzSCxFQUFFMG5FLFVBQVVnYyxHQUFHMWpGLEVBQUUySCxHQUFHdXJFLEdBQUdsekUsSUFBSTBqRixHQUFHMlUsR0FBRTF3RixFQUFFeWtFLFlBQVksTUFBTSxLQUFLLEVBQUV4a0UsRUFBRXl3RixHQUFFMXZGLEVBQUUydkYsR0FBR0QsR0FBRTF3RixFQUFFeWtFLFVBQVV1RyxjQUFjMmxCLElBQUcsRUFDbGZDLEdBQUd2NEYsRUFBRUMsRUFBRTBILEdBQUcwd0YsR0FBRXp3RixFQUFFMHdGLEdBQUczdkYsRUFBRSxNQUFNLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJeXVGLElBQW9CLFFBQWhCeHZGLEVBQUVELEVBQUVzL0UsY0FBc0MsUUFBZnIvRSxFQUFFQSxFQUFFcW9GLFlBQXNCLENBQUN0bkYsRUFBRWYsRUFBRUEsRUFBRXlGLEtBQUssRUFBRSxDQUFDLElBQUl1bUQsRUFBRWpyRCxFQUFFa3JELEVBQUVELEVBQUUzeEMsUUFBUTJ4QyxFQUFFQSxFQUFFdVEsU0FBSSxJQUFTdFEsSUFBSSxJQUFPLEVBQUZELElBQWUsSUFBTyxFQUFGQSxLQUFmNmpDLEdBQUc5dkYsRUFBRTFILEVBQUU0ekQsR0FBeUJsckQsRUFBRUEsRUFBRTBFLFdBQVcxRSxJQUFJZixHQUFHMndGLEdBQUd2NEYsRUFBRUMsRUFBRTBILEdBQUcsTUFBTSxLQUFLLEVBQUUsSUFBSXl2RixLQUFJRyxHQUFHNXZGLEVBQUUxSCxHQUFpQixtQkFBZDJILEVBQUVELEVBQUV5a0UsV0FBZ0M1cEIsc0JBQXNCLElBQUk1NkMsRUFBRWtVLE1BQU1uVSxFQUFFK2pGLGNBQWM5akYsRUFBRXVJLE1BQU14SSxFQUFFZ21FLGNBQWMvbEUsRUFBRTQ2Qyx1QkFBdUIsTUFBTXNSLEdBQUcwakMsR0FBRTd2RixFQUFFMUgsRUFBRTZ6RCxHQUFHeWtDLEdBQUd2NEYsRUFBRUMsRUFBRTBILEdBQUcsTUFBTSxLQUFLLEdBQUc0d0YsR0FBR3Y0RixFQUFFQyxFQUFFMEgsR0FBRyxNQUFNLEtBQUssR0FBVSxFQUFQQSxFQUFFMmpGLE1BQVE4TCxJQUFHeHZGLEVBQUV3dkYsS0FBSSxPQUNoZnp2RixFQUFFZ21FLGNBQWM0cUIsR0FBR3Y0RixFQUFFQyxFQUFFMEgsR0FBR3l2RixHQUFFeHZGLEdBQUcyd0YsR0FBR3Y0RixFQUFFQyxFQUFFMEgsR0FBRyxNQUFNLFFBQVE0d0YsR0FBR3Y0RixFQUFFQyxFQUFFMEgsSUFBSSxTQUFTK3dGLEdBQUcxNEYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFaW5GLFlBQVksR0FBRyxPQUFPaG5GLEVBQUUsQ0FBQ0QsRUFBRWluRixZQUFZLEtBQUssSUFBSXQvRSxFQUFFM0gsRUFBRW9zRSxVQUFVLE9BQU96a0UsSUFBSUEsRUFBRTNILEVBQUVvc0UsVUFBVSxJQUFJaXJCLElBQUlwM0YsRUFBRUosU0FBUSxTQUFTSSxHQUFHLElBQUkySCxFQUFFK3dGLEdBQUdoWCxLQUFLLEtBQUszaEYsRUFBRUMsR0FBRzBILEVBQUVqSyxJQUFJdUMsS0FBSzBILEVBQUU4QyxJQUFJeEssR0FBR0EsRUFBRWhELEtBQUsySyxFQUFFQSxRQUNuUSxTQUFTZ3hGLEdBQUc1NEYsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRTFILEVBQUU4cUYsVUFBVSxHQUFHLE9BQU9wakYsRUFBRSxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRUQsRUFBRXpELE9BQU8wRCxJQUFJLENBQUMsSUFBSWUsRUFBRWhCLEVBQUVDLEdBQUcsSUFBSSxJQUFJZ3NELEVBQUU1ekQsRUFBRTZ6RCxFQUFFNXpELEVBQUU2ekQsRUFBRUQsRUFBRTd6RCxFQUFFLEtBQUssT0FBTzh6RCxHQUFHLENBQUMsT0FBT0EsRUFBRXFRLEtBQUssS0FBSyxFQUFFazBCLEdBQUV2a0MsRUFBRXNZLFVBQVVrc0IsSUFBRyxFQUFHLE1BQU10NEYsRUFBRSxLQUFLLEVBQTRDLEtBQUssRUFBRXE0RixHQUFFdmtDLEVBQUVzWSxVQUFVdUcsY0FBYzJsQixJQUFHLEVBQUcsTUFBTXQ0RixFQUFFOHpELEVBQUVBLEVBQUV4UCxPQUFPLEdBQUcsT0FBTyt6QyxHQUFFLE1BQU16MEIsTUFBTWorRCxFQUFFLE1BQU02eUYsR0FBRzVrQyxFQUFFQyxFQUFFbHJELEdBQUcwdkYsR0FBRSxLQUFLQyxJQUFHLEVBQUcsSUFBSXA5RSxFQUFFdlMsRUFBRTZrRSxVQUFVLE9BQU90eUQsSUFBSUEsRUFBRW9wQyxPQUFPLE1BQU0zN0MsRUFBRTI3QyxPQUFPLEtBQUssTUFBTXlQLEdBQUd5akMsR0FBRTd1RixFQUFFMUksRUFBRTh6RCxJQUFJLEdBQWtCLE1BQWY5ekQsRUFBRTB6RixhQUFtQixJQUFJMXpGLEVBQUVBLEVBQUVpeUIsTUFBTSxPQUFPanlCLEdBQUc0NEYsR0FBRzU0RixFQUFFRCxHQUFHQyxFQUFFQSxFQUFFOHRFLFFBQzFkLFNBQVM4cUIsR0FBRzc0RixFQUFFQyxHQUFHLElBQUkwSCxFQUFFM0gsRUFBRXd0RSxVQUFVNWxFLEVBQUU1SCxFQUFFeXRFLE1BQU0sT0FBT3p0RSxFQUFFbWtFLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFpQixHQUFkeTBCLEdBQUczNEYsRUFBRUQsR0FBRzg0RixHQUFHOTRGLEdBQVEsRUFBRjRILEVBQUksQ0FBQyxJQUFJK3ZGLEdBQUcsRUFBRTMzRixFQUFFQSxFQUFFc2tELFFBQVFzekMsR0FBRyxFQUFFNTNGLEdBQUcsTUFBTXVqRCxHQUFHaTBDLEdBQUV4M0YsRUFBRUEsRUFBRXNrRCxPQUFPZixHQUFHLElBQUlvMEMsR0FBRyxFQUFFMzNGLEVBQUVBLEVBQUVza0QsUUFBUSxNQUFNZixHQUFHaTBDLEdBQUV4M0YsRUFBRUEsRUFBRXNrRCxPQUFPZixJQUFJLE1BQU0sS0FBSyxFQUFFcTFDLEdBQUczNEYsRUFBRUQsR0FBRzg0RixHQUFHOTRGLEdBQUssSUFBRjRILEdBQU8sT0FBT0QsR0FBRzR2RixHQUFHNXZGLEVBQUVBLEVBQUUyOEMsUUFBUSxNQUFNLEtBQUssRUFBZ0QsR0FBOUNzMEMsR0FBRzM0RixFQUFFRCxHQUFHODRGLEdBQUc5NEYsR0FBSyxJQUFGNEgsR0FBTyxPQUFPRCxHQUFHNHZGLEdBQUc1dkYsRUFBRUEsRUFBRTI4QyxRQUFtQixHQUFSdGtELEVBQUV5dEUsTUFBUyxDQUFDLElBQUk5a0UsRUFBRTNJLEVBQUVvc0UsVUFBVSxJQUFJNUUsR0FBRzcrRCxFQUFFLElBQUksTUFBTTQ2QyxHQUFHaTBDLEdBQUV4M0YsRUFBRUEsRUFBRXNrRCxPQUFPZixJQUFJLEdBQUssRUFBRjM3QyxHQUFvQixPQUFkZSxFQUFFM0ksRUFBRW9zRSxXQUFtQixDQUFDLElBQUl4WSxFQUFFNXpELEVBQUUwckYsY0FBYzczQixFQUFFLE9BQU9sc0QsRUFBRUEsRUFBRStqRixjQUFjOTNCLEVBQUVFLEVBQUU5ekQsRUFBRThqQixLQUFLNUksRUFBRWxiLEVBQUVpbkYsWUFDamUsR0FBbkJqbkYsRUFBRWluRixZQUFZLEtBQVEsT0FBTy9yRSxFQUFFLElBQUksVUFBVTQ0QyxHQUFHLFVBQVVGLEVBQUU5dkMsTUFBTSxNQUFNOHZDLEVBQUVoMEQsTUFBTWdtRSxFQUFHajlELEVBQUVpckQsR0FBRzRYLEdBQUcxWCxFQUFFRCxHQUFHLElBQUlFLEVBQUV5WCxHQUFHMVgsRUFBRUYsR0FBRyxJQUFJQyxFQUFFLEVBQUVBLEVBQUUzNEMsRUFBRWhYLE9BQU8ydkQsR0FBRyxFQUFFLENBQUMsSUFBSTc0QyxFQUFFRSxFQUFFMjRDLEdBQUdNLEVBQUVqNUMsRUFBRTI0QyxFQUFFLEdBQUcsVUFBVTc0QyxFQUFFcXZELEdBQUcxaEUsRUFBRXdyRCxHQUFHLDRCQUE0Qm41QyxFQUFFOHJELEdBQUduK0QsRUFBRXdyRCxHQUFHLGFBQWFuNUMsRUFBRXdzRCxHQUFHNytELEVBQUV3ckQsR0FBRytOLEVBQUd2NUQsRUFBRXFTLEVBQUVtNUMsRUFBRUosR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUStSLEVBQUdsOUQsRUFBRWlyRCxHQUFHLE1BQU0sSUFBSyxXQUFXNFMsR0FBRzc5RCxFQUFFaXJELEdBQUcsTUFBTSxJQUFLLFNBQVMsSUFBSUksRUFBRXJyRCxFQUFFNjhELGNBQWN1dUIsWUFBWXByRixFQUFFNjhELGNBQWN1dUIsY0FBY25nQyxFQUFFb2dDLFNBQVMsSUFBSWoxRixFQUFFNjBELEVBQUV2eUQsTUFBTSxNQUFNdEMsRUFBRWtuRSxHQUFHdDlELElBQUlpckQsRUFBRW9nQyxTQUFTajFGLEdBQUUsR0FBSWkxRCxNQUFNSixFQUFFb2dDLFdBQVcsTUFBTXBnQyxFQUFFN1csYUFBYWtwQixHQUFHdDlELElBQUlpckQsRUFBRW9nQyxTQUNuZnBnQyxFQUFFN1csY0FBYSxHQUFJa3BCLEdBQUd0OUQsSUFBSWlyRCxFQUFFb2dDLFNBQVNwZ0MsRUFBRW9nQyxTQUFTLEdBQUcsSUFBRyxJQUFLcnJGLEVBQUVxN0UsSUFBSXB3QixFQUFFLE1BQU1yUSxHQUFHaTBDLEdBQUV4M0YsRUFBRUEsRUFBRXNrRCxPQUFPZixJQUFJLE1BQU0sS0FBSyxFQUFnQixHQUFkcTFDLEdBQUczNEYsRUFBRUQsR0FBRzg0RixHQUFHOTRGLEdBQVEsRUFBRjRILEVBQUksQ0FBQyxHQUFHLE9BQU81SCxFQUFFb3NFLFVBQVUsTUFBTXhJLE1BQU1qK0QsRUFBRSxNQUFNb3VELEVBQUUvekQsRUFBRW9zRSxVQUFVcHhELEVBQUVoYixFQUFFMHJGLGNBQWMsSUFBSTMzQixFQUFFNFQsVUFBVTNzRCxFQUFFLE1BQU11b0MsR0FBR2kwQyxHQUFFeDNGLEVBQUVBLEVBQUVza0QsT0FBT2YsSUFBSSxNQUFNLEtBQUssRUFBZ0IsR0FBZHExQyxHQUFHMzRGLEVBQUVELEdBQUc4NEYsR0FBRzk0RixHQUFRLEVBQUY0SCxHQUFLLE9BQU9ELEdBQUdBLEVBQUVnbUUsY0FBYytFLGFBQWEsSUFBSVEsR0FBR2p6RSxFQUFFMHlFLGVBQWUsTUFBTXB2QixHQUFHaTBDLEdBQUV4M0YsRUFBRUEsRUFBRXNrRCxPQUFPZixHQUFHLE1BQU0sS0FBSyxFQUd5QixRQUFRcTFDLEdBQUczNEYsRUFBRUQsR0FBRzg0RixHQUFHOTRGLFNBSHRCLEtBQUssR0FBRzQ0RixHQUFHMzRGLEVBQUVELEdBQUc4NEYsR0FBRzk0RixHQUFxQixNQUFsQit6RCxFQUFFL3pELEVBQUVreUIsT0FBUXU3QyxPQUFZLE9BQU8xWixFQUFFNFosZ0JBQWdCLE9BQU81WixFQUFFeVosV0FBVyxPQUFPelosRUFBRXlaLFVBQVVHLGlCQUMvZm9yQixHQUFHcnFCLE1BQU8sRUFBRjltRSxHQUFLOHdGLEdBQUcxNEYsR0FBRyxNQUFNLEtBQUssR0FBc0YsR0FBbkYrekQsRUFBRSxPQUFPcHNELEdBQUcsT0FBT0EsRUFBRWdtRSxjQUFxQixFQUFQM3RFLEVBQUVzckYsTUFBUThMLElBQUdwOEUsRUFBRW84RSxLQUFJcmpDLEVBQUU2a0MsR0FBRzM0RixFQUFFRCxHQUFHbzNGLEdBQUVwOEUsR0FBRzQ5RSxHQUFHMzRGLEVBQUVELEdBQUc4NEYsR0FBRzk0RixHQUFRLEtBQUY0SCxFQUFPLENBQUNvVCxFQUFFLE9BQU9oYixFQUFFMnRFLGNBQWMzdEUsRUFBRSxJQUFJbTBELEVBQUUsS0FBS0gsRUFBRWgwRCxJQUFJLENBQUMsR0FBRyxJQUFJZzBELEVBQUVtUSxLQUFLLEdBQUcsT0FBT2hRLEVBQUUsQ0FBQ0EsRUFBRUgsRUFBRSxJQUFJcnJELEVBQUVxckQsRUFBRW9ZLFVBQVVweEQsRUFBYSxtQkFBVjQ0QyxFQUFFanJELEVBQUVNLE9BQTRCRyxZQUFZd3FELEVBQUV4cUQsWUFBWSxVQUFVLE9BQU8sYUFBYXdxRCxFQUFFbjVCLFFBQVEsUUFBU3E1QixFQUFFRSxFQUFFb1ksVUFBa0N2WSxFQUFFLE9BQTFCMzRDLEVBQUU4NEMsRUFBRTAzQixjQUFjemlGLFFBQThCaVMsRUFBRTdTLGVBQWUsV0FBVzZTLEVBQUV1ZixRQUFRLEtBQUtxNUIsRUFBRTdxRCxNQUFNd3hCLFFBQVEydkMsR0FBRyxVQUFVdlcsSUFBSSxNQUFNdFEsR0FBR2kwQyxHQUFFeDNGLEVBQUVBLEVBQUVza0QsT0FBT2YsVUFBVSxHQUFHLElBQ3pmeVEsRUFBRW1RLEtBQUssR0FBRyxPQUFPaFEsRUFBRSxJQUFJSCxFQUFFb1ksVUFBVXpFLFVBQVUzc0QsRUFBRSxHQUFHZzVDLEVBQUUwM0IsY0FBYyxNQUFNbm9DLEdBQUdpMEMsR0FBRXgzRixFQUFFQSxFQUFFc2tELE9BQU9mLFNBQVMsSUFBSSxLQUFLeVEsRUFBRW1RLEtBQUssS0FBS25RLEVBQUVtUSxLQUFLLE9BQU9uUSxFQUFFMlosZUFBZTNaLElBQUloMEQsSUFBSSxPQUFPZzBELEVBQUU5aEMsTUFBTSxDQUFDOGhDLEVBQUU5aEMsTUFBTW95QixPQUFPMFAsRUFBRUEsRUFBRUEsRUFBRTloQyxNQUFNLFNBQVMsR0FBRzhoQyxJQUFJaDBELEVBQUUsTUFBTUEsRUFBRSxLQUFLLE9BQU9nMEQsRUFBRStaLFNBQVMsQ0FBQyxHQUFHLE9BQU8vWixFQUFFMVAsUUFBUTBQLEVBQUUxUCxTQUFTdGtELEVBQUUsTUFBTUEsRUFBRW0wRCxJQUFJSCxJQUFJRyxFQUFFLE1BQU1ILEVBQUVBLEVBQUUxUCxPQUFPNlAsSUFBSUgsSUFBSUcsRUFBRSxNQUFNSCxFQUFFK1osUUFBUXpwQixPQUFPMFAsRUFBRTFQLE9BQU8wUCxFQUFFQSxFQUFFK1osUUFBUSxHQUFHL3lELElBQUkrNEMsR0FBRyxJQUFZLEVBQVAvekQsRUFBRXNyRixNQUFRLElBQUlnTSxHQUFFdDNGLEVBQUVBLEVBQUVBLEVBQUVreUIsTUFBTSxPQUFPbHlCLEdBQUcsQ0FBQyxJQUFJK3pELEVBQUV1akMsR0FBRXQzRixFQUFFLE9BQU9zM0YsSUFBRyxDQUFlLE9BQVZuakMsR0FBSm41QyxFQUFFczhFLElBQU1wbEUsTUFBYWxYLEVBQUVtcEQsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUd3ekIsR0FBRyxFQUM3ZjM4RSxFQUFFQSxFQUFFc3BDLFFBQVEsTUFBTSxLQUFLLEVBQStCLEdBQTdCaXpDLEdBQUd2OEUsRUFBRUEsRUFBRXNwQyxRQUF5QixtQkFBakJzUCxFQUFFNTRDLEVBQUVveEQsV0FBbUM1cEIscUJBQXFCLENBQUN3UixFQUFFaDVDLEVBQUVqYyxFQUFFaWMsRUFBRXNwQyxPQUFPLElBQUkzN0MsRUFBRXFyRCxFQUFFSixFQUFFOTNDLE1BQU1uVCxFQUFFK2lGLGNBQWM5M0IsRUFBRXpqRCxNQUFNeEgsRUFBRWdsRSxjQUFjL1osRUFBRXBSLHVCQUF1QixNQUFNZSxHQUFHaTBDLEdBQUV4akMsRUFBRWoxRCxFQUFFd2tELElBQUksTUFBTSxLQUFLLEVBQUVnMEMsR0FBR3Y4RSxFQUFFQSxFQUFFc3BDLFFBQVEsTUFBTSxLQUFLLEdBQUcsR0FBRyxPQUFPdHBDLEVBQUUyeUQsY0FBYyxDQUFDcXJCLEdBQUdqbEMsR0FBRyxVQUFVLE9BQU9JLEdBQUdBLEVBQUU3UCxPQUFPdHBDLEVBQUVzOEUsR0FBRW5qQyxHQUFHNmtDLEdBQUdqbEMsR0FBRy96RCxFQUFFQSxFQUFFK3RFLFNBQVMsTUFBTSxLQUFLLEdBQUc2cUIsR0FBRzM0RixFQUFFRCxHQUFHODRGLEdBQUc5NEYsR0FBSyxFQUFGNEgsR0FBSzh3RixHQUFHMTRGLEdBQVMsS0FBSyxLQUM1WSxTQUFTODRGLEdBQUc5NEYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeXRFLE1BQU0sR0FBSyxFQUFGeHRFLEVBQUksQ0FBQyxJQUFJRCxFQUFFLENBQUMsSUFBSSxJQUFJMkgsRUFBRTNILEVBQUVza0QsT0FBTyxPQUFPMzhDLEdBQUcsQ0FBQyxHQUFHb3dGLEdBQUdwd0YsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUUsTUFBTTNILEVBQUUySCxFQUFFQSxFQUFFMjhDLE9BQU8sTUFBTXNmLE1BQU1qK0QsRUFBRSxNQUFPLE9BQU9pQyxFQUFFdThELEtBQUssS0FBSyxFQUFFLElBQUl4N0QsRUFBRWYsRUFBRXdrRSxVQUFrQixHQUFSeGtFLEVBQUU2bEUsUUFBV2pHLEdBQUc3K0QsRUFBRSxJQUFJZixFQUFFNmxFLFFBQVEsSUFBZ0IycUIsR0FBR3A0RixFQUFUZzRGLEdBQUdoNEYsR0FBVTJJLEdBQUcsTUFBTSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUlrckQsRUFBRWpzRCxFQUFFd2tFLFVBQVV1RyxjQUFzQnNsQixHQUFHajRGLEVBQVRnNEYsR0FBR2g0RixHQUFVNnpELEdBQUcsTUFBTSxRQUFRLE1BQU0rUCxNQUFNaitELEVBQUUsT0FBUSxNQUFNdVYsR0FBR3M4RSxHQUFFeDNGLEVBQUVBLEVBQUVza0QsT0FBT3BwQyxHQUFHbGIsRUFBRXl0RSxRQUFRLEVBQUksS0FBRnh0RSxJQUFTRCxFQUFFeXRFLFFBQVEsTUFBTSxTQUFTd3JCLEdBQUdqNUYsRUFBRUMsRUFBRTBILEdBQUcydkYsR0FBRXQzRixFQUFFazVGLEdBQUdsNUYsRUFBRUMsRUFBRTBILEdBQzNhLFNBQVN1eEYsR0FBR2w1RixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJLElBQUlDLEVBQUUsSUFBWSxFQUFQNUgsRUFBRXNyRixNQUFRLE9BQU9nTSxJQUFHLENBQUMsSUFBSTN1RixFQUFFMnVGLEdBQUUxakMsRUFBRWpyRCxFQUFFdXBCLE1BQU0sR0FBRyxLQUFLdnBCLEVBQUV3N0QsS0FBS3Y4RCxFQUFFLENBQUMsSUFBSWlzRCxFQUFFLE9BQU9sckQsRUFBRWdsRSxlQUFld3BCLEdBQUcsSUFBSXRqQyxFQUFFLENBQUMsSUFBSUMsRUFBRW5yRCxFQUFFNmtFLFVBQVV0eUQsRUFBRSxPQUFPNDRDLEdBQUcsT0FBT0EsRUFBRTZaLGVBQWV5cEIsR0FBRXRqQyxFQUFFcWpDLEdBQUcsSUFBSXBqQyxFQUFFcWpDLEdBQU8sR0FBTEQsR0FBR3RqQyxHQUFNdWpDLEdBQUVsOEUsS0FBSzY0QyxFQUFFLElBQUl1akMsR0FBRTN1RixFQUFFLE9BQU8ydUYsSUFBT3A4RSxHQUFKMjRDLEVBQUV5akMsSUFBTXBsRSxNQUFNLEtBQUsyaEMsRUFBRXNRLEtBQUssT0FBT3RRLEVBQUU4WixjQUFjd3JCLEdBQUd4d0YsR0FBRyxPQUFPdVMsR0FBR0EsRUFBRW9wQyxPQUFPdVAsRUFBRXlqQyxHQUFFcDhFLEdBQUdpK0UsR0FBR3h3RixHQUFHLEtBQUssT0FBT2lyRCxHQUFHMGpDLEdBQUUxakMsRUFBRXNsQyxHQUFHdGxDLEVBQUUzekQsRUFBRTBILEdBQUdpc0QsRUFBRUEsRUFBRW1hLFFBQVF1cEIsR0FBRTN1RixFQUFFd3VGLEdBQUdyakMsRUFBRXNqQyxHQUFFcmpDLEVBQUVxbEMsR0FBR3A1RixRQUFZLElBQW9CLEtBQWYySSxFQUFFZ3JGLGVBQW9CLE9BQU8vL0IsR0FBR0EsRUFBRXRQLE9BQU8zN0MsRUFBRTJ1RixHQUFFMWpDLEdBQUd3bEMsR0FBR3A1RixJQUNoYyxTQUFTbzVGLEdBQUdwNUYsR0FBRyxLQUFLLE9BQU9zM0YsSUFBRyxDQUFDLElBQUlyM0YsRUFBRXEzRixHQUFFLEdBQUcsSUFBYSxLQUFScjNGLEVBQUV3dEUsT0FBWSxDQUFDLElBQUk5bEUsRUFBRTFILEVBQUV1dEUsVUFBVSxJQUFJLEdBQUcsSUFBYSxLQUFSdnRFLEVBQUV3dEUsT0FBWSxPQUFPeHRFLEVBQUVra0UsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR2l6QixJQUFHUSxHQUFHLEVBQUUzM0YsR0FBRyxNQUFNLEtBQUssRUFBRSxJQUFJMkgsRUFBRTNILEVBQUVtc0UsVUFBVSxHQUFXLEVBQVJuc0UsRUFBRXd0RSxRQUFVMnBCLEdBQUUsR0FBRyxPQUFPenZGLEVBQUVDLEVBQUVxNkMsd0JBQXdCLENBQUMsSUFBSXQ1QyxFQUFFMUksRUFBRTZxRixjQUFjN3FGLEVBQUU2akIsS0FBS25jLEVBQUUrakYsY0FBYzdGLEdBQUc1bEYsRUFBRTZqQixLQUFLbmMsRUFBRStqRixlQUFlOWpGLEVBQUVtM0IsbUJBQW1CcDJCLEVBQUVoQixFQUFFZ21FLGNBQWMvbEUsRUFBRXl4RixxQ0FBcUMsSUFBSXpsQyxFQUFFM3pELEVBQUVnbkYsWUFBWSxPQUFPcnpCLEdBQUd3MEIsR0FBR25vRixFQUFFMnpELEVBQUVoc0QsR0FBRyxNQUFNLEtBQUssRUFBRSxJQUFJaXNELEVBQUU1ekQsRUFBRWduRixZQUFZLEdBQUcsT0FBT3B6QixFQUFFLENBQVEsR0FBUGxzRCxFQUFFLEtBQVEsT0FBTzFILEVBQUVpeUIsTUFBTSxPQUFPanlCLEVBQUVpeUIsTUFBTWl5QyxLQUFLLEtBQUssRUFDdmYsS0FBSyxFQUFFeDhELEVBQUUxSCxFQUFFaXlCLE1BQU1rNkMsVUFBVWdjLEdBQUdub0YsRUFBRTR6RCxFQUFFbHNELEdBQUcsTUFBTSxLQUFLLEVBQUUsSUFBSW1zRCxFQUFFN3pELEVBQUVtc0UsVUFBVSxHQUFHLE9BQU96a0UsR0FBVyxFQUFSMUgsRUFBRXd0RSxNQUFRLENBQUM5bEUsRUFBRW1zRCxFQUFFLElBQUk1NEMsRUFBRWpiLEVBQUV5ckYsY0FBYyxPQUFPenJGLEVBQUU2akIsTUFBTSxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFdBQVc1SSxFQUFFbTVFLFdBQVcxc0YsRUFBRXlVLFFBQVEsTUFBTSxJQUFLLE1BQU1sQixFQUFFbytFLE1BQU0zeEYsRUFBRTJ4RixJQUFJcCtFLEVBQUVvK0UsTUFBTSxNQUFNLEtBQUssRUFBUSxLQUFLLEVBQVEsS0FBSyxHQUF5SixLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE1BQXhMLEtBQUssR0FBRyxHQUFHLE9BQU9yNUYsRUFBRTB0RSxjQUFjLENBQUMsSUFBSTVaLEVBQUU5ekQsRUFBRXV0RSxVQUFVLEdBQUcsT0FBT3paLEVBQUUsQ0FBQyxJQUFJLzRDLEVBQUUrNEMsRUFBRTRaLGNBQWMsR0FBRyxPQUFPM3lELEVBQUUsQ0FBQyxJQUFJbTVDLEVBQUVuNUMsRUFBRTR5RCxXQUFXLE9BQU96WixHQUFHK2UsR0FBRy9lLEtBQUssTUFDNWMsUUFBUSxNQUFNeVAsTUFBTWorRCxFQUFFLE1BQU95eEYsSUFBVyxJQUFSbjNGLEVBQUV3dEUsT0FBV29xQixHQUFHNTNGLEdBQUcsTUFBTSt6RCxHQUFHd2pDLEdBQUV2M0YsRUFBRUEsRUFBRXFrRCxPQUFPMFAsSUFBSSxHQUFHL3pELElBQUlELEVBQUUsQ0FBQ3MzRixHQUFFLEtBQUssTUFBa0IsR0FBRyxRQUFmM3ZGLEVBQUUxSCxFQUFFOHRFLFNBQW9CLENBQUNwbUUsRUFBRTI4QyxPQUFPcmtELEVBQUVxa0QsT0FBT2d6QyxHQUFFM3ZGLEVBQUUsTUFBTTJ2RixHQUFFcjNGLEVBQUVxa0QsUUFBUSxTQUFTMDBDLEdBQUdoNUYsR0FBRyxLQUFLLE9BQU9zM0YsSUFBRyxDQUFDLElBQUlyM0YsRUFBRXEzRixHQUFFLEdBQUdyM0YsSUFBSUQsRUFBRSxDQUFDczNGLEdBQUUsS0FBSyxNQUFNLElBQUkzdkYsRUFBRTFILEVBQUU4dEUsUUFBUSxHQUFHLE9BQU9wbUUsRUFBRSxDQUFDQSxFQUFFMjhDLE9BQU9ya0QsRUFBRXFrRCxPQUFPZ3pDLEdBQUUzdkYsRUFBRSxNQUFNMnZGLEdBQUVyM0YsRUFBRXFrRCxRQUNoUyxTQUFTNjBDLEdBQUduNUYsR0FBRyxLQUFLLE9BQU9zM0YsSUFBRyxDQUFDLElBQUlyM0YsRUFBRXEzRixHQUFFLElBQUksT0FBT3IzRixFQUFFa2tFLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSXg4RCxFQUFFMUgsRUFBRXFrRCxPQUFPLElBQUlzekMsR0FBRyxFQUFFMzNGLEdBQUcsTUFBTWliLEdBQUdzOEUsR0FBRXYzRixFQUFFMEgsRUFBRXVULEdBQUcsTUFBTSxLQUFLLEVBQUUsSUFBSXRULEVBQUUzSCxFQUFFbXNFLFVBQVUsR0FBRyxtQkFBb0J4a0UsRUFBRXE2QyxrQkFBa0IsQ0FBQyxJQUFJdDVDLEVBQUUxSSxFQUFFcWtELE9BQU8sSUFBSTE4QyxFQUFFcTZDLG9CQUFvQixNQUFNL21DLEdBQUdzOEUsR0FBRXYzRixFQUFFMEksRUFBRXVTLElBQUksSUFBSTA0QyxFQUFFM3pELEVBQUVxa0QsT0FBTyxJQUFJdXpDLEdBQUc1M0YsR0FBRyxNQUFNaWIsR0FBR3M4RSxHQUFFdjNGLEVBQUUyekQsRUFBRTE0QyxHQUFHLE1BQU0sS0FBSyxFQUFFLElBQUkyNEMsRUFBRTV6RCxFQUFFcWtELE9BQU8sSUFBSXV6QyxHQUFHNTNGLEdBQUcsTUFBTWliLEdBQUdzOEUsR0FBRXYzRixFQUFFNHpELEVBQUUzNEMsS0FBSyxNQUFNQSxHQUFHczhFLEdBQUV2M0YsRUFBRUEsRUFBRXFrRCxPQUFPcHBDLEdBQUcsR0FBR2piLElBQUlELEVBQUUsQ0FBQ3MzRixHQUFFLEtBQUssTUFBTSxJQUFJeGpDLEVBQUU3ekQsRUFBRTh0RSxRQUFRLEdBQUcsT0FBT2phLEVBQUUsQ0FBQ0EsRUFBRXhQLE9BQU9ya0QsRUFBRXFrRCxPQUFPZ3pDLEdBQUV4akMsRUFBRSxNQUFNd2pDLEdBQUVyM0YsRUFBRXFrRCxRQUN0ZCxJQXlCa05pMUMsR0F6QjlNQyxHQUFHOTJGLEtBQUttQixLQUFLNDFGLEdBQUdoM0IsRUFBR2lyQix1QkFBdUJnTSxHQUFHajNCLEVBQUd1eUIsa0JBQWtCMkUsR0FBR2wzQixFQUFHMlEsd0JBQXdCd21CLEdBQUUsRUFBRTdKLEdBQUUsS0FBSzhKLEdBQUUsS0FBS0MsR0FBRSxFQUFFaEYsR0FBRyxFQUFFYyxHQUFHdlIsR0FBRyxHQUFHa1EsR0FBRSxFQUFFd0YsR0FBRyxLQUFLNVIsR0FBRyxFQUFFNlIsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsR0FBRyxLQUFLcEIsR0FBRyxFQUFFckUsR0FBR3JpRCxFQUFBQSxFQUFTK25ELEdBQUcsS0FBS3hILElBQUcsRUFBR0MsR0FBRyxLQUFLRyxHQUFHLEtBQUtxSCxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsSUFBSSxFQUFFQyxHQUFHLEVBQUUsU0FBU2hTLEtBQUssT0FBTyxJQUFPLEVBQUZpUixJQUFLbHJCLE1BQUssSUFBSWdzQixHQUFHQSxHQUFHQSxHQUFHaHNCLEtBQzlULFNBQVNrYSxHQUFHNW9GLEdBQUcsT0FBRyxJQUFZLEVBQVBBLEVBQUVzckYsTUFBZSxFQUFLLElBQU8sRUFBRnNPLEtBQU0sSUFBSUUsR0FBU0EsSUFBR0EsR0FBSyxPQUFPbFUsR0FBRzVzRSxZQUFrQixJQUFJMmhGLEtBQUtBLEdBQUdocUIsTUFBTWdxQixJQUFVLEtBQVAzNkYsRUFBRWd4RSxJQUFrQmh4RSxFQUFpQkEsT0FBRSxLQUFqQkEsRUFBRTJKLE9BQU9xTSxPQUFtQixHQUFHZ2QsR0FBR2h6QixFQUFFOGpCLE1BQWUsU0FBUytrRSxHQUFHN29GLEVBQUVDLEVBQUUwSCxHQUFHLEdBQUcsR0FBRzZ5RixHQUFHLE1BQU1BLEdBQUcsRUFBRUMsR0FBRyxLQUFLNzJCLE1BQU1qK0QsRUFBRSxNQUFNLElBQUlpQyxFQUFFZ3pGLEdBQUc1NkYsRUFBRUMsR0FBRyxPQUFHLE9BQU8ySCxFQUFTLE1BQUtpcEUsR0FBR2pwRSxFQUFFM0gsRUFBRTBILEdBQU0sSUFBTyxFQUFGaXlGLEtBQU1oeUYsSUFBSW1vRixLQUFFbm9GLElBQUltb0YsS0FBSSxJQUFPLEVBQUY2SixNQUFPSSxJQUFJLzVGLEdBQUcsSUFBSXMwRixJQUFHc0csR0FBR2p6RixFQUFFa3lGLEtBQUlnQixHQUFHbHpGLEVBQUVELEdBQUcsSUFBSTFILEdBQUcsSUFBSTI1RixJQUFHLElBQVksRUFBUDU1RixFQUFFc3JGLFFBQVVvSixHQUFHaG1CLEtBQUksSUFBSThXLElBQUlHLE9BQWEvOUUsR0FDdGIsU0FBU2d6RixHQUFHNTZGLEVBQUVDLEdBQUdELEVBQUUwbUYsT0FBT3ptRixFQUFFLElBQUkwSCxFQUFFM0gsRUFBRXd0RSxVQUFxQyxJQUEzQixPQUFPN2xFLElBQUlBLEVBQUUrK0UsT0FBT3ptRixHQUFHMEgsRUFBRTNILEVBQU1BLEVBQUVBLEVBQUVza0QsT0FBTyxPQUFPdGtELEdBQUdBLEVBQUVzbUYsWUFBWXJtRixFQUFnQixRQUFkMEgsRUFBRTNILEVBQUV3dEUsYUFBcUI3bEUsRUFBRTIrRSxZQUFZcm1GLEdBQUcwSCxFQUFFM0gsRUFBRUEsRUFBRUEsRUFBRXNrRCxPQUFPLE9BQU8sSUFBSTM4QyxFQUFFdzhELElBQUl4OEQsRUFBRXlrRSxVQUFVLEtBQUssU0FBUzJiLEdBQUcvbkYsR0FBRyxPQUFPLE9BQU8rdkYsSUFBRyxPQUFPakosS0FBSyxJQUFZLEVBQVA5bUYsRUFBRXNyRixPQUFTLElBQU8sRUFBRnNPLElBQzlRLFNBQVNrQixHQUFHOTZGLEVBQUVDLEdBQUcsSUFBSTBILEVBQUUzSCxFQUFFKzZGLGNBM016QixTQUFZLzZGLEVBQUVDLEdBQUcsSUFBSSxJQUFJMEgsRUFBRTNILEVBQUVxd0UsZUFBZXpvRSxFQUFFNUgsRUFBRXN3RSxZQUFZM25FLEVBQUUzSSxFQUFFZzdGLGdCQUFnQnBuQyxFQUFFNXpELEVBQUVvd0UsYUFBYSxFQUFFeGMsR0FBRyxDQUFDLElBQUlDLEVBQUUsR0FBRzZiLEdBQUc5YixHQUFHRSxFQUFFLEdBQUdELEVBQUUzNEMsRUFBRXZTLEVBQUVrckQsSUFBTyxJQUFJMzRDLEVBQU0sSUFBSzQ0QyxFQUFFbnNELElBQUksSUFBS21zRCxFQUFFbHNELEtBQUdlLEVBQUVrckQsR0FBRzRjLEdBQUczYyxFQUFFN3pELElBQVFpYixHQUFHamIsSUFBSUQsRUFBRWk3RixjQUFjbm5DLEdBQUdGLElBQUlFLEdBMk1qTG9uQyxDQUFHbDdGLEVBQUVDLEdBQUcsSUFBSTJILEVBQUV1b0UsR0FBR253RSxFQUFFQSxJQUFJK3ZGLEdBQUUrSixHQUFFLEdBQUcsR0FBRyxJQUFJbHlGLEVBQUUsT0FBT0QsR0FBR3ltRSxHQUFHem1FLEdBQUczSCxFQUFFKzZGLGFBQWEsS0FBSy82RixFQUFFbTdGLGlCQUFpQixPQUFPLEdBQUdsN0YsRUFBRTJILEdBQUdBLEVBQUU1SCxFQUFFbTdGLG1CQUFtQmw3RixFQUFFLENBQWdCLEdBQWYsTUFBTTBILEdBQUd5bUUsR0FBR3ptRSxHQUFNLElBQUkxSCxFQUFFLElBQUlELEVBQUVta0UsSUE1SXNKLFNBQVlua0UsR0FBR3dsRixJQUFHLEVBQUdFLEdBQUcxbEYsR0E0STFLbzdGLENBQUdDLEdBQUcxWixLQUFLLEtBQUszaEYsSUFBSTBsRixHQUFHMlYsR0FBRzFaLEtBQUssS0FBSzNoRixJQUFJdWpGLElBQUcsV0FBVyxJQUFJcVcsSUFBR2pVLFFBQU9oK0UsRUFBRSxTQUFTLENBQUMsT0FBT3NwRSxHQUFHcnBFLElBQUksS0FBSyxFQUFFRCxFQUFFbW5FLEdBQUcsTUFBTSxLQUFLLEVBQUVubkUsRUFBRXFuRSxHQUFHLE1BQU0sS0FBSyxHQUF3QyxRQUFRcm5FLEVBQUV1bkUsU0FBcEMsS0FBSyxVQUFVdm5FLEVBQUUybkUsR0FBc0IzbkUsRUFBRTJ6RixHQUFHM3pGLEVBQUU0ekYsR0FBRzVaLEtBQUssS0FBSzNoRixJQUFJQSxFQUFFbTdGLGlCQUFpQmw3RixFQUFFRCxFQUFFKzZGLGFBQWFwekYsR0FDdmMsU0FBUzR6RixHQUFHdjdGLEVBQUVDLEdBQWMsR0FBWHk2RixJQUFJLEVBQUVDLEdBQUcsRUFBSyxJQUFPLEVBQUZmLElBQUssTUFBTWgyQixNQUFNaitELEVBQUUsTUFBTSxJQUFJZ0MsRUFBRTNILEVBQUUrNkYsYUFBYSxHQUFHUyxNQUFNeDdGLEVBQUUrNkYsZUFBZXB6RixFQUFFLE9BQU8sS0FBSyxJQUFJQyxFQUFFdW9FLEdBQUdud0UsRUFBRUEsSUFBSSt2RixHQUFFK0osR0FBRSxHQUFHLEdBQUcsSUFBSWx5RixFQUFFLE9BQU8sS0FBSyxHQUFHLElBQU8sR0FBRkEsSUFBTyxJQUFLQSxFQUFFNUgsRUFBRWk3RixlQUFlaDdGLEVBQUVBLEVBQUV3N0YsR0FBR3o3RixFQUFFNEgsT0FBTyxDQUFDM0gsRUFBRTJILEVBQUUsSUFBSWUsRUFBRWl4RixHQUFFQSxJQUFHLEVBQUUsSUFBSWhtQyxFQUFFOG5DLEtBQWdELElBQXhDM0wsS0FBSS92RixHQUFHODVGLEtBQUk3NUYsSUFBRW02RixHQUFHLEtBQUsxRixHQUFHaG1CLEtBQUksSUFBSWl0QixHQUFHMzdGLEVBQUVDLFVBQVUyN0YsS0FBSyxNQUFNLE1BQU05bkMsR0FBRytuQyxHQUFHNzdGLEVBQUU4ekQsR0FBWW95QixLQUFLdVQsR0FBR3JzRixRQUFRd21ELEVBQUVnbUMsR0FBRWp4RixFQUFFLE9BQU9reEYsR0FBRTU1RixFQUFFLEdBQUc4dkYsR0FBRSxLQUFLK0osR0FBRSxFQUFFNzVGLEVBQUVzMEYsSUFBRyxHQUFHLElBQUl0MEYsRUFBRSxDQUF5QyxHQUF4QyxJQUFJQSxHQUFZLEtBQVIwSSxFQUFFK25FLEdBQUcxd0UsTUFBVzRILEVBQUVlLEVBQUUxSSxFQUFFNjdGLEdBQUc5N0YsRUFBRTJJLElBQVEsSUFBSTFJLEVBQUUsTUFBTTBILEVBQUVveUYsR0FBRzRCLEdBQUczN0YsRUFBRSxHQUFHNjZGLEdBQUc3NkYsRUFBRTRILEdBQUdrekYsR0FBRzk2RixFQUFFMHVFLE1BQUsvbUUsRUFBRSxHQUFHLElBQUkxSCxFQUFFNDZGLEdBQUc3NkYsRUFBRTRILE9BQ2hmLENBQXVCLEdBQXRCZSxFQUFFM0ksRUFBRW9OLFFBQVFvZ0UsVUFBYSxJQUFPLEdBQUY1bEUsS0FHbkMsU0FBWTVILEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxJQUFJLENBQUMsR0FBVyxNQUFSQyxFQUFFd3RFLE1BQVksQ0FBQyxJQUFJOWxFLEVBQUUxSCxFQUFFZ25GLFlBQVksR0FBRyxPQUFPdC9FLEdBQWUsUUFBWEEsRUFBRUEsRUFBRXVvRixRQUFpQixJQUFJLElBQUl0b0YsRUFBRSxFQUFFQSxFQUFFRCxFQUFFekQsT0FBTzBELElBQUksQ0FBQyxJQUFJZSxFQUFFaEIsRUFBRUMsR0FBR2dzRCxFQUFFanJELEVBQUVpbkYsWUFBWWpuRixFQUFFQSxFQUFFdEgsTUFBTSxJQUFJLElBQUlvOEUsR0FBRzdwQixJQUFJanJELEdBQUcsT0FBTSxFQUFHLE1BQU1rckQsR0FBRyxPQUFNLElBQWUsR0FBVmxzRCxFQUFFMUgsRUFBRWl5QixNQUF3QixNQUFmanlCLEVBQUUwekYsY0FBb0IsT0FBT2hzRixFQUFFQSxFQUFFMjhDLE9BQU9ya0QsRUFBRUEsRUFBRTBILE1BQU0sQ0FBQyxHQUFHMUgsSUFBSUQsRUFBRSxNQUFNLEtBQUssT0FBT0MsRUFBRTh0RSxTQUFTLENBQUMsR0FBRyxPQUFPOXRFLEVBQUVxa0QsUUFBUXJrRCxFQUFFcWtELFNBQVN0a0QsRUFBRSxPQUFNLEVBQUdDLEVBQUVBLEVBQUVxa0QsT0FBT3JrRCxFQUFFOHRFLFFBQVF6cEIsT0FBT3JrRCxFQUFFcWtELE9BQU9ya0QsRUFBRUEsRUFBRTh0RSxTQUFTLE9BQU0sRUFIclhndUIsQ0FBR3B6RixLQUFlLEtBQVYxSSxFQUFFdzdGLEdBQUd6N0YsRUFBRTRILEtBQW1CLEtBQVJnc0QsRUFBRThjLEdBQUcxd0UsTUFBVzRILEVBQUVnc0QsRUFBRTN6RCxFQUFFNjdGLEdBQUc5N0YsRUFBRTR6RCxJQUFLLElBQUkzekQsR0FBRyxNQUFNMEgsRUFBRW95RixHQUFHNEIsR0FBRzM3RixFQUFFLEdBQUc2NkYsR0FBRzc2RixFQUFFNEgsR0FBR2t6RixHQUFHOTZGLEVBQUUwdUUsTUFBSy9tRSxFQUFxQyxPQUFuQzNILEVBQUVnOEYsYUFBYXJ6RixFQUFFM0ksRUFBRWk4RixjQUFjcjBGLEVBQVMzSCxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTTJqRSxNQUFNaitELEVBQUUsTUFBTSxLQUFLLEVBQzhCLEtBQUssRUFBRXUyRixHQUFHbDhGLEVBQUVtNkYsR0FBR0MsSUFBSSxNQUQ3QixLQUFLLEVBQVUsR0FBUlMsR0FBRzc2RixFQUFFNEgsSUFBUyxVQUFGQSxLQUFlQSxHQUFpQixJQUFiM0gsRUFBRTg0RixHQUFHLElBQUlycUIsTUFBVSxDQUFDLEdBQUcsSUFBSXlCLEdBQUdud0UsRUFBRSxHQUFHLE1BQXlCLEtBQW5CMkksRUFBRTNJLEVBQUVxd0UsZ0JBQXFCem9FLEtBQUtBLEVBQUUsQ0FBQytnRixLQUFLM29GLEVBQUVzd0UsYUFBYXR3RSxFQUFFcXdFLGVBQWUxbkUsRUFBRSxNQUFNM0ksRUFBRW04RixjQUFjL1ksR0FBRzhZLEdBQUd2YSxLQUFLLEtBQUszaEYsRUFBRW02RixHQUFHQyxJQUFJbjZGLEdBQUcsTUFBTWk4RixHQUFHbDhGLEVBQUVtNkYsR0FBR0MsSUFBSSxNQUFNLEtBQUssRUFBVSxHQUFSUyxHQUFHNzZGLEVBQUU0SCxJQUFTLFFBQUZBLEtBQy9lQSxFQUFFLE1BQXFCLElBQWYzSCxFQUFFRCxFQUFFOHdFLFdBQWVub0UsR0FBRyxFQUFFLEVBQUVmLEdBQUcsQ0FBQyxJQUFJaXNELEVBQUUsR0FBRzZiLEdBQUc5bkUsR0FBR2dzRCxFQUFFLEdBQUdDLEdBQUVBLEVBQUU1ekQsRUFBRTR6RCxJQUFLbHJELElBQUlBLEVBQUVrckQsR0FBR2pzRCxJQUFJZ3NELEVBQXNHLEdBQXBHaHNELEVBQUVlLEVBQXFHLElBQTNGZixHQUFHLEtBQVhBLEVBQUU4bUUsS0FBSTltRSxHQUFXLElBQUksSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLQSxFQUFFLEtBQUssSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLNHhGLEdBQUc1eEYsRUFBRSxPQUFPQSxHQUFVLENBQUM1SCxFQUFFbThGLGNBQWMvWSxHQUFHOFksR0FBR3ZhLEtBQUssS0FBSzNoRixFQUFFbTZGLEdBQUdDLElBQUl4eUYsR0FBRyxNQUFNczBGLEdBQUdsOEYsRUFBRW02RixHQUFHQyxJQUFJLE1BQStCLFFBQVEsTUFBTXgyQixNQUFNaitELEVBQUUsUUFBbUIsT0FBVm0xRixHQUFHOTZGLEVBQUUwdUUsTUFBWTF1RSxFQUFFKzZGLGVBQWVwekYsRUFBRTR6RixHQUFHNVosS0FBSyxLQUFLM2hGLEdBQUcsS0FDalgsU0FBUzg3RixHQUFHOTdGLEVBQUVDLEdBQUcsSUFBSTBILEVBQUV1eUYsR0FBMkcsT0FBeEdsNkYsRUFBRW9OLFFBQVF1Z0UsY0FBYytFLGVBQWVpcEIsR0FBRzM3RixFQUFFQyxHQUFHd3RFLE9BQU8sS0FBZSxLQUFWenRFLEVBQUV5N0YsR0FBR3o3RixFQUFFQyxNQUFXQSxFQUFFazZGLEdBQUdBLEdBQUd4eUYsRUFBRSxPQUFPMUgsR0FBRzZ6RixHQUFHN3pGLElBQVdELEVBQUUsU0FBUzh6RixHQUFHOXpGLEdBQUcsT0FBT202RixHQUFHQSxHQUFHbjZGLEVBQUVtNkYsR0FBRzU3RixLQUFLbTJCLE1BQU15bEUsR0FBR242RixHQUUxTCxTQUFTNjZGLEdBQUc3NkYsRUFBRUMsR0FBdUQsSUFBcERBLElBQUlnNkYsR0FBR2g2RixJQUFJKzVGLEdBQUdoNkYsRUFBRXF3RSxnQkFBZ0Jwd0UsRUFBRUQsRUFBRXN3RSxjQUFjcndFLEVBQU1ELEVBQUVBLEVBQUVnN0YsZ0JBQWdCLEVBQUUvNkYsR0FBRyxDQUFDLElBQUkwSCxFQUFFLEdBQUcrbkUsR0FBR3p2RSxHQUFHMkgsRUFBRSxHQUFHRCxFQUFFM0gsRUFBRTJILElBQUksRUFBRTFILElBQUkySCxHQUFHLFNBQVN5ekYsR0FBR3I3RixHQUFHLEdBQUcsSUFBTyxFQUFGNDVGLElBQUssTUFBTWgyQixNQUFNaitELEVBQUUsTUFBTTYxRixLQUFLLElBQUl2N0YsRUFBRWt3RSxHQUFHbndFLEVBQUUsR0FBRyxHQUFHLElBQU8sRUFBRkMsR0FBSyxPQUFPNjZGLEdBQUc5NkYsRUFBRTB1RSxNQUFLLEtBQUssSUFBSS9tRSxFQUFFOHpGLEdBQUd6N0YsRUFBRUMsR0FBRyxHQUFHLElBQUlELEVBQUVta0UsS0FBSyxJQUFJeDhELEVBQUUsQ0FBQyxJQUFJQyxFQUFFOG9FLEdBQUcxd0UsR0FBRyxJQUFJNEgsSUFBSTNILEVBQUUySCxFQUFFRCxFQUFFbTBGLEdBQUc5N0YsRUFBRTRILElBQUksR0FBRyxJQUFJRCxFQUFFLE1BQU1BLEVBQUVveUYsR0FBRzRCLEdBQUczN0YsRUFBRSxHQUFHNjZGLEdBQUc3NkYsRUFBRUMsR0FBRzY2RixHQUFHOTZGLEVBQUUwdUUsTUFBSy9tRSxFQUFFLEdBQUcsSUFBSUEsRUFBRSxNQUFNaThELE1BQU1qK0QsRUFBRSxNQUFpRixPQUEzRTNGLEVBQUVnOEYsYUFBYWg4RixFQUFFb04sUUFBUW9nRSxVQUFVeHRFLEVBQUVpOEYsY0FBY2g4RixFQUFFaThGLEdBQUdsOEYsRUFBRW02RixHQUFHQyxJQUFJVSxHQUFHOTZGLEVBQUUwdUUsTUFBWSxLQUNuZCxTQUFTMHRCLEdBQUdwOEYsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRWl5RixHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPNTVGLEVBQUVDLEdBQUcsUUFBWSxLQUFKMjVGLEdBQUVqeUYsS0FBVStzRixHQUFHaG1CLEtBQUksSUFBSThXLElBQUlHLE9BQU8sU0FBUzBXLEdBQUdyOEYsR0FBRyxPQUFPczZGLElBQUksSUFBSUEsR0FBR24yQixLQUFLLElBQU8sRUFBRnkxQixLQUFNNEIsS0FBSyxJQUFJdjdGLEVBQUUyNUYsR0FBRUEsSUFBRyxFQUFFLElBQUlqeUYsRUFBRWd5RixHQUFHM2dGLFdBQVdwUixFQUFFb3BFLEdBQUUsSUFBSSxHQUFHMm9CLEdBQUczZ0YsV0FBVyxLQUFLZzRELEdBQUUsRUFBRWh4RSxFQUFFLE9BQU9BLElBQUksUUFBUWd4RSxHQUFFcHBFLEVBQUUreEYsR0FBRzNnRixXQUFXclIsRUFBTSxJQUFPLEdBQVhpeUYsR0FBRTM1RixLQUFhMGxGLE1BQU0sU0FBU2tQLEtBQUtDLEdBQUdjLEdBQUd4b0YsUUFBUWszRSxHQUFFc1IsSUFDN1MsU0FBUytGLEdBQUczN0YsRUFBRUMsR0FBR0QsRUFBRWc4RixhQUFhLEtBQUtoOEYsRUFBRWk4RixjQUFjLEVBQUUsSUFBSXQwRixFQUFFM0gsRUFBRW04RixjQUFpRCxJQUFsQyxJQUFJeDBGLElBQUkzSCxFQUFFbThGLGVBQWUsRUFBRTlZLEdBQUcxN0UsSUFBTyxPQUFPa3lGLEdBQUUsSUFBSWx5RixFQUFFa3lGLEdBQUV2MUMsT0FBTyxPQUFPMzhDLEdBQUcsQ0FBQyxJQUFJQyxFQUFFRCxFQUFRLE9BQU40aUYsR0FBRzNpRixHQUFVQSxFQUFFdThELEtBQUssS0FBSyxFQUE2QixPQUEzQnY4RCxFQUFFQSxFQUFFa2MsS0FBS3l0QyxvQkFBd0N5ekIsS0FBSyxNQUFNLEtBQUssRUFBRWdJLEtBQUsxSSxHQUFFSSxJQUFJSixHQUFFRyxJQUFHOEksS0FBSyxNQUFNLEtBQUssRUFBRUwsR0FBR3RsRixHQUFHLE1BQU0sS0FBSyxFQUFFb2xGLEtBQUssTUFBTSxLQUFLLEdBQWMsS0FBSyxHQUFHMUksR0FBRTZJLElBQUcsTUFBTSxLQUFLLEdBQUdoSCxHQUFHditFLEVBQUVrYyxLQUFLdWdELFVBQVUsTUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFHd3dCLEtBQUtsdEYsRUFBRUEsRUFBRTI4QyxPQUEyRSxHQUFwRXlyQyxHQUFFL3ZGLEVBQUU2NUYsR0FBRTc1RixFQUFFbXNGLEdBQUduc0YsRUFBRW9OLFFBQVEsTUFBTTBzRixHQUFFaEYsR0FBRzcwRixFQUFFczBGLEdBQUUsRUFBRXdGLEdBQUcsS0FBS0UsR0FBR0QsR0FBRzdSLEdBQUcsRUFBRWdTLEdBQUdELEdBQUcsS0FBUSxPQUFPcFQsR0FBRyxDQUFDLElBQUk3bUYsRUFDMWYsRUFBRUEsRUFBRTZtRixHQUFHNWlGLE9BQU9qRSxJQUFJLEdBQTJCLFFBQWhCMkgsR0FBUkQsRUFBRW0vRSxHQUFHN21GLElBQU9zbkYsYUFBcUIsQ0FBQzUvRSxFQUFFNC9FLFlBQVksS0FBSyxJQUFJNStFLEVBQUVmLEVBQUV5RixLQUFLdW1ELEVBQUVqc0QsRUFBRTIvRSxRQUFRLEdBQUcsT0FBTzF6QixFQUFFLENBQUMsSUFBSUMsRUFBRUQsRUFBRXZtRCxLQUFLdW1ELEVBQUV2bUQsS0FBSzFFLEVBQUVmLEVBQUV5RixLQUFLd21ELEVBQUVsc0QsRUFBRTIvRSxRQUFRMS9FLEVBQUVrL0UsR0FBRyxLQUFLLE9BQU85bUYsRUFDMUssU0FBUzY3RixHQUFHNzdGLEVBQUVDLEdBQUcsT0FBRSxDQUFDLElBQUkwSCxFQUFFa3lGLEdBQUUsSUFBdUIsR0FBbkIzVCxLQUFLdUgsR0FBR3JnRixRQUFRc2hGLEdBQU1WLEdBQUcsQ0FBQyxJQUFJLElBQUlwbUYsRUFBRWltRixHQUFFbGdCLGNBQWMsT0FBTy9sRSxHQUFHLENBQUMsSUFBSWUsRUFBRWYsRUFBRWtuRixNQUFNLE9BQU9ubUYsSUFBSUEsRUFBRTIrRSxRQUFRLE1BQU0xL0UsRUFBRUEsRUFBRXlGLEtBQUsyZ0YsSUFBRyxFQUE4QyxHQUEzQ0osR0FBRyxFQUFFRyxHQUFFRCxHQUFFRCxHQUFFLEtBQUtJLElBQUcsRUFBR0MsR0FBRyxFQUFFd0wsR0FBR3RzRixRQUFRLEtBQVEsT0FBT3pGLEdBQUcsT0FBT0EsRUFBRTI4QyxPQUFPLENBQUNpd0MsR0FBRSxFQUFFd0YsR0FBRzk1RixFQUFFNDVGLEdBQUUsS0FBSyxNQUFNNzVGLEVBQUUsQ0FBQyxJQUFJNHpELEVBQUU1ekQsRUFBRTZ6RCxFQUFFbHNELEVBQUUyOEMsT0FBT3dQLEVBQUVuc0QsRUFBRXVULEVBQUVqYixFQUFxQixHQUFuQkEsRUFBRTY1RixHQUFFaG1DLEVBQUUyWixPQUFPLE1BQVMsT0FBT3Z5RCxHQUFHLGlCQUFrQkEsR0FBRyxtQkFBb0JBLEVBQUVqZSxLQUFLLENBQUMsSUFBSTgyRCxFQUFFNzRDLEVBQUVGLEVBQUU4NEMsRUFBRUssRUFBRW41QyxFQUFFbXBELElBQUksR0FBRyxJQUFZLEVBQVBucEQsRUFBRXN3RSxRQUFVLElBQUluM0IsR0FBRyxLQUFLQSxHQUFHLEtBQUtBLEdBQUcsQ0FBQyxJQUFJSCxFQUFFaDVDLEVBQUV3eUQsVUFBVXhaLEdBQUdoNUMsRUFBRWlzRSxZQUFZanpCLEVBQUVpekIsWUFBWWpzRSxFQUFFMnlELGNBQWMzWixFQUFFMlosY0FDeGUzeUQsRUFBRTByRSxNQUFNMXlCLEVBQUUweUIsUUFBUTFyRSxFQUFFaXNFLFlBQVksS0FBS2pzRSxFQUFFMnlELGNBQWMsTUFBTSxJQUFJNXVFLEVBQUVzMEYsR0FBR3gvQixHQUFHLEdBQUcsT0FBTzkwRCxFQUFFLENBQUNBLEVBQUUwdUUsUUFBUSxJQUFJNmxCLEdBQUd2MEYsRUFBRTgwRCxFQUFFQyxFQUFFRixFQUFFM3pELEdBQVUsRUFBUGxCLEVBQUV1c0YsTUFBUTRILEdBQUd0L0IsRUFBRUcsRUFBRTl6RCxHQUFPaWIsRUFBRTY0QyxFQUFFLElBQUl4USxHQUFadGpELEVBQUVsQixHQUFja29GLFlBQVksR0FBRyxPQUFPMWpDLEVBQUUsQ0FBQyxJQUFJMlEsRUFBRSxJQUFJL3pELElBQUkrekQsRUFBRXpwRCxJQUFJeVEsR0FBR2piLEVBQUVnbkYsWUFBWS95QixPQUFPM1EsRUFBRTk0QyxJQUFJeVEsR0FBRyxNQUFNbGIsRUFBTyxHQUFHLElBQU8sRUFBRkMsR0FBSyxDQUFDaXpGLEdBQUd0L0IsRUFBRUcsRUFBRTl6RCxHQUFHdTBGLEtBQUssTUFBTXgwRixFQUFFa2IsRUFBRTBvRCxNQUFNaitELEVBQUUsV0FBWSxHQUFHK2tGLElBQVUsRUFBUDUyQixFQUFFdzNCLEtBQU8sQ0FBQyxJQUFJekosRUFBRXdSLEdBQUd4L0IsR0FBRyxHQUFHLE9BQU9ndUIsRUFBRSxDQUFDLElBQWEsTUFBUkEsRUFBRXBVLFNBQWVvVSxFQUFFcFUsT0FBTyxLQUFLNmxCLEdBQUd6UixFQUFFaHVCLEVBQUVDLEVBQUVGLEVBQUUzekQsR0FBRzJyRixHQUFHMXdFLEdBQUcsTUFBTWxiLEdBQUc0ekQsRUFBRTE0QyxFQUFFLElBQUlxNUUsS0FBSUEsR0FBRSxHQUFHLE9BQU8yRixHQUFHQSxHQUFHLENBQUN0bUMsR0FBR3NtQyxHQUFHMzdGLEtBQUtxMUQsR0FBRzE0QyxFQUFFbTNFLEdBQUduM0UsRUFBRTQ0QyxHQUFHQSxFQUFFRCxFQUFFLEVBQUUsQ0FBQyxPQUFPQyxFQUFFcVEsS0FBSyxLQUFLLEVBQUVyUSxFQUFFMlosT0FBTyxNQUNoZnh0RSxJQUFJQSxFQUFFNnpELEVBQUU0eUIsT0FBT3ptRixFQUFrQmdvRixHQUFHbjBCLEVBQWI2K0IsR0FBRzcrQixFQUFFNTRDLEVBQUVqYixJQUFXLE1BQU1ELEVBQUUsS0FBSyxFQUFFNHpELEVBQUUxNEMsRUFBRSxJQUFJcGMsRUFBRWcxRCxFQUFFaHdDLEtBQUttd0MsRUFBRUgsRUFBRXNZLFVBQVUsR0FBRyxJQUFhLElBQVJ0WSxFQUFFMlosU0FBYSxtQkFBb0IzdUUsRUFBRSt5RCwwQkFBMEIsT0FBT29DLEdBQUcsbUJBQW9CQSxFQUFFOCtCLG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHdDFGLElBQUl1MkQsS0FBSyxDQUFDSCxFQUFFMlosT0FBTyxNQUFNeHRFLElBQUlBLEVBQUU2ekQsRUFBRTR5QixPQUFPem1GLEVBQWtCZ29GLEdBQUduMEIsRUFBYmcvQixHQUFHaC9CLEVBQUVGLEVBQUUzekQsSUFBVyxNQUFNRCxHQUFHOHpELEVBQUVBLEVBQUV4UCxhQUFhLE9BQU93UCxHQUFHd29DLEdBQUczMEYsR0FBRyxNQUFNeTZFLEdBQUduaUYsRUFBRW1pRixFQUFFeVgsS0FBSWx5RixHQUFHLE9BQU9BLElBQUlreUYsR0FBRWx5RixFQUFFQSxFQUFFMjhDLFFBQVEsU0FBUyxPQUFlLFNBQVNvM0MsS0FBSyxJQUFJMTdGLEVBQUV5NUYsR0FBR3JzRixRQUFzQixPQUFkcXNGLEdBQUdyc0YsUUFBUXNoRixHQUFVLE9BQU8xdUYsRUFBRTB1RixHQUFHMXVGLEVBQ2xkLFNBQVN3MEYsS0FBUSxJQUFJRCxJQUFHLElBQUlBLElBQUcsSUFBSUEsS0FBRUEsR0FBRSxHQUFFLE9BQU94RSxJQUFHLElBQVEsVUFBSDVILEtBQWUsSUFBUSxVQUFINlIsS0FBZWEsR0FBRzlLLEdBQUUrSixJQUFHLFNBQVMyQixHQUFHejdGLEVBQUVDLEdBQUcsSUFBSTBILEVBQUVpeUYsR0FBRUEsSUFBRyxFQUFFLElBQUloeUYsRUFBRTh6RixLQUFxQyxJQUE3QjNMLEtBQUkvdkYsR0FBRzg1RixLQUFJNzVGLElBQUVtNkYsR0FBRyxLQUFLdUIsR0FBRzM3RixFQUFFQyxVQUFVczhGLEtBQUssTUFBTSxNQUFNNXpGLEdBQUdrekYsR0FBRzc3RixFQUFFMkksR0FBa0MsR0FBdEJ1OUUsS0FBSzBULEdBQUVqeUYsRUFBRTh4RixHQUFHcnNGLFFBQVF4RixFQUFLLE9BQU9peUYsR0FBRSxNQUFNajJCLE1BQU1qK0QsRUFBRSxNQUFpQixPQUFYb3FGLEdBQUUsS0FBSytKLEdBQUUsRUFBU3ZGLEdBQUUsU0FBU2dJLEtBQUssS0FBSyxPQUFPMUMsSUFBRzJDLEdBQUczQyxJQUFHLFNBQVMrQixLQUFLLEtBQUssT0FBTy9CLEtBQUl2ckIsTUFBTWt1QixHQUFHM0MsSUFBRyxTQUFTMkMsR0FBR3g4RixHQUFHLElBQUlDLEVBQUVzNUYsR0FBR3Y1RixFQUFFd3RFLFVBQVV4dEUsRUFBRTgwRixJQUFJOTBGLEVBQUUwckYsY0FBYzFyRixFQUFFaXJGLGFBQWEsT0FBT2hyRixFQUFFcThGLEdBQUd0OEYsR0FBRzY1RixHQUFFNTVGLEVBQUV5NUYsR0FBR3RzRixRQUFRLEtBQ3RkLFNBQVNrdkYsR0FBR3Q4RixHQUFHLElBQUlDLEVBQUVELEVBQUUsRUFBRSxDQUFDLElBQUkySCxFQUFFMUgsRUFBRXV0RSxVQUFxQixHQUFYeHRFLEVBQUVDLEVBQUVxa0QsT0FBVSxJQUFhLE1BQVJya0QsRUFBRXd0RSxRQUFjLEdBQWdCLFFBQWI5bEUsRUFBRWlzRixHQUFHanNGLEVBQUUxSCxFQUFFNjBGLEtBQWtCLFlBQUorRSxHQUFFbHlGLE9BQWMsQ0FBVyxHQUFHLFFBQWJBLEVBQUV1dkYsR0FBR3Z2RixFQUFFMUgsSUFBbUMsT0FBbkIwSCxFQUFFOGxFLE9BQU8sV0FBTW9zQixHQUFFbHlGLEdBQVMsR0FBRyxPQUFPM0gsRUFBbUUsT0FBWHUwRixHQUFFLE9BQUVzRixHQUFFLE1BQTVENzVGLEVBQUV5dEUsT0FBTyxNQUFNenRFLEVBQUUyekYsYUFBYSxFQUFFM3pGLEVBQUUrcUYsVUFBVSxLQUF5QyxHQUFHLFFBQWY5cUYsRUFBRUEsRUFBRTh0RSxTQUF5QixZQUFKOHJCLEdBQUU1NUYsR0FBUzQ1RixHQUFFNTVGLEVBQUVELFFBQVEsT0FBT0MsR0FBRyxJQUFJczBGLEtBQUlBLEdBQUUsR0FBRyxTQUFTMkgsR0FBR2w4RixFQUFFQyxFQUFFMEgsR0FBRyxJQUFJQyxFQUFFb3BFLEdBQUVyb0UsRUFBRWd4RixHQUFHM2dGLFdBQVcsSUFBSTJnRixHQUFHM2dGLFdBQVcsS0FBS2c0RCxHQUFFLEVBQzNZLFNBQVloeEUsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUcsR0FBRzR6RixXQUFXLE9BQU9sQixJQUFJLEdBQUcsSUFBTyxFQUFGVixJQUFLLE1BQU1oMkIsTUFBTWorRCxFQUFFLE1BQU1nQyxFQUFFM0gsRUFBRWc4RixhQUFhLElBQUlyekYsRUFBRTNJLEVBQUVpOEYsY0FBYyxHQUFHLE9BQU90MEYsRUFBRSxPQUFPLEtBQTJDLEdBQXRDM0gsRUFBRWc4RixhQUFhLEtBQUtoOEYsRUFBRWk4RixjQUFjLEVBQUt0MEYsSUFBSTNILEVBQUVvTixRQUFRLE1BQU13MkQsTUFBTWorRCxFQUFFLE1BQU0zRixFQUFFKzZGLGFBQWEsS0FBSy82RixFQUFFbTdGLGlCQUFpQixFQUFFLElBQUl2bkMsRUFBRWpzRCxFQUFFKytFLE1BQU0vK0UsRUFBRTIrRSxXQUE4SixHQXpOdFQsU0FBWXRtRixFQUFFQyxHQUFHLElBQUkwSCxFQUFFM0gsRUFBRW93RSxjQUFjbndFLEVBQUVELEVBQUVvd0UsYUFBYW53RSxFQUFFRCxFQUFFcXdFLGVBQWUsRUFBRXJ3RSxFQUFFc3dFLFlBQVksRUFBRXR3RSxFQUFFaTdGLGNBQWNoN0YsRUFBRUQsRUFBRXk4RixrQkFBa0J4OEYsRUFBRUQsRUFBRXV3RSxnQkFBZ0J0d0UsRUFBRUEsRUFBRUQsRUFBRXd3RSxjQUFjLElBQUk1b0UsRUFBRTVILEVBQUU4d0UsV0FBVyxJQUFJOXdFLEVBQUVBLEVBQUVnN0YsZ0JBQWdCLEVBQUVyekYsR0FBRyxDQUFDLElBQUlnQixFQUFFLEdBQUcrbUUsR0FBRy9uRSxHQUFHaXNELEVBQUUsR0FBR2pyRCxFQUFFMUksRUFBRTBJLEdBQUcsRUFBRWYsRUFBRWUsSUFBSSxFQUFFM0ksRUFBRTJJLElBQUksRUFBRWhCLElBQUlpc0QsR0F5TjFHOG9DLENBQUcxOEYsRUFBRTR6RCxHQUFHNXpELElBQUkrdkYsS0FBSThKLEdBQUU5SixHQUFFLEtBQUsrSixHQUFFLEdBQUcsSUFBb0IsS0FBZm55RixFQUFFZ3NGLGVBQW9CLElBQWEsS0FBUmhzRixFQUFFOGxFLFFBQWE0c0IsS0FBS0EsSUFBRyxFQUFHaUIsR0FBR3BzQixJQUFHLFdBQWdCLE9BQUxzc0IsS0FBWSxTQUFRNW5DLEVBQUUsSUFBYSxNQUFSanNELEVBQUU4bEUsT0FBZ0IsSUFBb0IsTUFBZjlsRSxFQUFFZ3NGLGVBQXFCLy9CLEVBQUUsQ0FBQ0EsRUFBRStsQyxHQUFHM2dGLFdBQVcyZ0YsR0FBRzNnRixXQUFXLEtBQ2hmLElBQUk2NkMsRUFBRW1kLEdBQUVBLEdBQUUsRUFBRSxJQUFJbGQsRUFBRThsQyxHQUFFQSxJQUFHLEVBQUVGLEdBQUd0c0YsUUFBUSxLQTNDcEMsU0FBWXBOLEVBQUVDLEdBQWdCLEdBQWIraUYsR0FBRzNQLEdBQWErSyxHQUFWcCtFLEVBQUVnK0UsTUFBYyxDQUFDLEdBQUcsbUJBQW1CaCtFLEVBQUUsSUFBSTJILEVBQUUsQ0FBQzJFLE1BQU10TSxFQUFFeStFLGVBQWU3cEMsSUFBSTUwQyxFQUFFMCtFLG1CQUFtQjErRSxFQUFFLENBQThDLElBQUk0SCxHQUFqREQsR0FBR0EsRUFBRTNILEVBQUUrbEUsZ0JBQWdCcCtELEVBQUVnM0UsYUFBYWgxRSxRQUFlaTFFLGNBQWNqM0UsRUFBRWkzRSxlQUFlLEdBQUdoM0UsR0FBRyxJQUFJQSxFQUFFazNFLFdBQVcsQ0FBQ24zRSxFQUFFQyxFQUFFbTNFLFdBQVcsSUFBSXAyRSxFQUFFZixFQUFFbzNFLGFBQWFwckIsRUFBRWhzRCxFQUFFcTNFLFVBQVVyM0UsRUFBRUEsRUFBRXMzRSxZQUFZLElBQUl2M0UsRUFBRSsvRCxTQUFTOVQsRUFBRThULFNBQVMsTUFBTTBhLEdBQUd6NkUsRUFBRSxLQUFLLE1BQU0zSCxFQUFFLElBQUk2ekQsRUFBRSxFQUFFQyxHQUFHLEVBQUU1NEMsR0FBRyxFQUFFNjRDLEVBQUUsRUFBRS80QyxFQUFFLEVBQUVtNUMsRUFBRW4wRCxFQUFFZzBELEVBQUUsS0FBSy96RCxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUlsQixFQUFLbzFELElBQUl4c0QsR0FBRyxJQUFJZ0IsR0FBRyxJQUFJd3JELEVBQUV1VCxXQUFXNVQsRUFBRUQsRUFBRWxyRCxHQUFHd3JELElBQUlQLEdBQUcsSUFBSWhzRCxHQUFHLElBQUl1c0QsRUFBRXVULFdBQVd4c0QsRUFBRTI0QyxFQUFFanNELEdBQUcsSUFBSXVzRCxFQUFFdVQsV0FBVzdULEdBQ25mTSxFQUFFd1QsVUFBVXpqRSxRQUFXLFFBQVFuRixFQUFFbzFELEVBQUVnVCxhQUFrQm5ULEVBQUVHLEVBQUVBLEVBQUVwMUQsRUFBRSxPQUFPLENBQUMsR0FBR28xRCxJQUFJbjBELEVBQUUsTUFBTUMsRUFBOEMsR0FBNUMrekQsSUFBSXJzRCxLQUFLb3NELElBQUlwckQsSUFBSW1yRCxFQUFFRCxHQUFHRyxJQUFJSixLQUFLNTRDLElBQUlwVCxJQUFJc1QsRUFBRTI0QyxHQUFNLFFBQVE5MEQsRUFBRW8xRCxFQUFFMHBCLGFBQWEsTUFBVTdwQixHQUFKRyxFQUFFSCxHQUFNOFgsV0FBVzNYLEVBQUVwMUQsRUFBRTRJLEdBQUcsSUFBSW1zRCxJQUFJLElBQUk1NEMsRUFBRSxLQUFLLENBQUM1TyxNQUFNd25ELEVBQUVsZixJQUFJMTVCLFFBQVF2VCxFQUFFLEtBQUtBLEVBQUVBLEdBQUcsQ0FBQzJFLE1BQU0sRUFBRXNvQyxJQUFJLFFBQVFqdEMsRUFBRSxLQUErQyxJQUExQ3M3RSxHQUFHLENBQUMxRSxZQUFZditFLEVBQUV3K0UsZUFBZTcyRSxHQUFHMHJFLElBQUcsRUFBT2lrQixHQUFFcjNGLEVBQUUsT0FBT3EzRixJQUFHLEdBQU90M0YsR0FBSkMsRUFBRXEzRixJQUFNcGxFLE1BQU0sSUFBb0IsS0FBZmp5QixFQUFFMHpGLGVBQW9CLE9BQU8zekYsRUFBRUEsRUFBRXNrRCxPQUFPcmtELEVBQUVxM0YsR0FBRXQzRixPQUFPLEtBQUssT0FBT3MzRixJQUFHLENBQUNyM0YsRUFBRXEzRixHQUFFLElBQUksSUFBSS96QyxFQUFFdGpELEVBQUV1dEUsVUFBVSxHQUFHLElBQWEsS0FBUnZ0RSxFQUFFd3RFLE9BQVksT0FBT3h0RSxFQUFFa2tFLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQ3ZLLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxNQUEzVyxLQUFLLEVBQUUsR0FBRyxPQUFPNWdCLEVBQUUsQ0FBQyxJQUFJMlEsRUFBRTNRLEVBQUVtb0MsY0FBYzdKLEVBQUV0K0IsRUFBRW9xQixjQUFjenZFLEVBQUUrQixFQUFFbXNFLFVBQVV0dEUsRUFBRVosRUFBRTJnQyx3QkFBd0I1K0IsRUFBRTZxRixjQUFjN3FGLEVBQUU2akIsS0FBS293QyxFQUFFMnhCLEdBQUc1bEYsRUFBRTZqQixLQUFLb3dDLEdBQUcydEIsR0FBRzNqRixFQUFFbTdGLG9DQUFvQ3Y2RixFQUFFLE1BQU0sS0FBSyxFQUFFLElBQUltMUQsRUFBRWgwRCxFQUFFbXNFLFVBQVV1RyxjQUFjLEdBQUcsSUFBSTFlLEVBQUV5VCxTQUFTelQsRUFBRXlTLFlBQVksUUFBUSxHQUFHLElBQUl6UyxFQUFFeVQsU0FBUyxDQUFDLElBQUlvYSxFQUFFN3RCLEVBQUVqUixLQUFLLE1BQU04K0IsSUFBSUEsRUFBRXBiLFlBQVksSUFBSSxNQUF5QyxRQUFRLE1BQU05QyxNQUFNaitELEVBQUUsT0FBUSxNQUFNeThFLEdBQUdvVixHQUFFdjNGLEVBQUVBLEVBQUVxa0QsT0FBTzg5QixHQUFlLEdBQUcsUUFBZnBpRixFQUFFQyxFQUFFOHRFLFNBQW9CLENBQUMvdEUsRUFBRXNrRCxPQUFPcmtELEVBQUVxa0QsT0FBT2d6QyxHQUFFdDNGLEVBQUUsTUFBTXMzRixHQUFFcjNGLEVBQUVxa0QsT0FBT2YsRUFBRW0wQyxHQUFHQSxJQUFHLEVBeUN2Y2lGLENBQUczOEYsRUFBRTJILEdBQUdreEYsR0FBR2x4RixFQUFFM0gsR0FBR3MrRSxHQUFHMkUsSUFBSTVQLEtBQUsyUCxHQUFHQyxHQUFHRCxHQUFHLEtBQUtoakYsRUFBRW9OLFFBQVF6RixFQUFFc3hGLEdBQUd0eEYsRUFBRTNILEVBQUUySSxHQUFHNmxFLEtBQUtvckIsR0FBRTlsQyxFQUFFa2QsR0FBRW5kLEVBQUU4bEMsR0FBRzNnRixXQUFXNDZDLE9BQU81ekQsRUFBRW9OLFFBQVF6RixFQUFzRixHQUFwRjB5RixLQUFLQSxJQUFHLEVBQUdDLEdBQUd0NkYsRUFBRXU2RixHQUFHNXhGLEdBQW9CLEtBQWpCaXJELEVBQUU1ekQsRUFBRW93RSxnQkFBcUI0aUIsR0FBRyxNQWhPbUosU0FBWWh6RixHQUFHLEdBQUd5dkUsSUFBSSxtQkFBb0JBLEdBQUdtdEIsa0JBQWtCLElBQUludEIsR0FBR210QixrQkFBa0JwdEIsR0FBR3h2RSxPQUFFLEVBQU8sTUFBdUIsSUFBaEJBLEVBQUVvTixRQUFRcWdFLFFBQVksTUFBTXh0RSxLQWdPcFI0OEYsQ0FBR2wxRixFQUFFeWtFLFdBQWEwdUIsR0FBRzk2RixFQUFFMHVFLE1BQVEsT0FBT3p1RSxFQUFFLElBQUkySCxFQUFFNUgsRUFBRTg4RixtQkFBbUJuMUYsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRWlFLE9BQU95RCxJQUFJQyxFQUFFM0gsRUFBRTBILElBQUksR0FBR2lyRixHQUFHLE1BQU1BLElBQUcsRUFBRzV5RixFQUFFNnlGLEdBQUdBLEdBQUcsS0FBSzd5RixFQUFFLElBQVEsRUFBSHU2RixLQUFPLElBQUl2NkYsRUFBRW1rRSxLQUFLcTNCLEtBQXNCLElBQU8sR0FBeEI1bkMsRUFBRTV6RCxFQUFFb3dFLGVBQXVCcHdFLElBQUl5NkYsR0FBR0QsTUFBTUEsR0FBRyxFQUFFQyxHQUFHejZGLEdBQUd3NkYsR0FBRyxFQUFFN1UsS0FGckJvWCxDQUFHLzhGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLFFBQVEreEYsR0FBRzNnRixXQUFXclEsRUFBRXFvRSxHQUFFcHBFLEVBQUUsT0FBTyxLQUc1YixTQUFTNHpGLEtBQUssR0FBRyxPQUFPbEIsR0FBRyxDQUFDLElBQUl0NkYsRUFBRWl4RSxHQUFHc3BCLElBQUl0NkYsRUFBRTA1RixHQUFHM2dGLFdBQVdyUixFQUFFcXBFLEdBQUUsSUFBbUMsR0FBL0Iyb0IsR0FBRzNnRixXQUFXLEtBQUtnNEQsR0FBRSxHQUFHaHhFLEVBQUUsR0FBR0EsRUFBSyxPQUFPczZGLEdBQUcsSUFBSTF5RixHQUFFLE1BQU8sQ0FBbUIsR0FBbEI1SCxFQUFFczZGLEdBQUdBLEdBQUcsS0FBS0MsR0FBRyxFQUFLLElBQU8sRUFBRlgsSUFBSyxNQUFNaDJCLE1BQU1qK0QsRUFBRSxNQUFNLElBQUlnRCxFQUFFaXhGLEdBQU8sSUFBTEEsSUFBRyxFQUFNdEMsR0FBRXQzRixFQUFFb04sUUFBUSxPQUFPa3FGLElBQUcsQ0FBQyxJQUFJMWpDLEVBQUUwakMsR0FBRXpqQyxFQUFFRCxFQUFFMWhDLE1BQU0sR0FBRyxJQUFhLEdBQVJvbEUsR0FBRTdwQixPQUFVLENBQUMsSUFBSTNaLEVBQUVGLEVBQUVtM0IsVUFBVSxHQUFHLE9BQU9qM0IsRUFBRSxDQUFDLElBQUksSUFBSTU0QyxFQUFFLEVBQUVBLEVBQUU0NEMsRUFBRTV2RCxPQUFPZ1gsSUFBSSxDQUFDLElBQUk2NEMsRUFBRUQsRUFBRTU0QyxHQUFHLElBQUlvOEUsR0FBRXZqQyxFQUFFLE9BQU91akMsSUFBRyxDQUFDLElBQUl0OEUsRUFBRXM4RSxHQUFFLE9BQU90OEUsRUFBRW1wRCxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHd3pCLEdBQUcsRUFBRTM4RSxFQUFFNDRDLEdBQUcsSUFBSU8sRUFBRW41QyxFQUFFa1gsTUFBTSxHQUFHLE9BQU9paUMsRUFBRUEsRUFBRTdQLE9BQU90cEMsRUFBRXM4RSxHQUFFbmpDLE9BQU8sS0FBSyxPQUFPbWpDLElBQUcsQ0FBSyxJQUFJdGpDLEdBQVJoNUMsRUFBRXM4RSxJQUFVdnBCLFFBQVFodkUsRUFBRWljLEVBQUVzcEMsT0FBYSxHQUFOd3pDLEdBQUc5OEUsR0FBTUEsSUFDbmYrNEMsRUFBRSxDQUFDdWpDLEdBQUUsS0FBSyxNQUFNLEdBQUcsT0FBT3RqQyxFQUFFLENBQUNBLEVBQUUxUCxPQUFPdmxELEVBQUV1NEYsR0FBRXRqQyxFQUFFLE1BQU1zakMsR0FBRXY0RixJQUFJLElBQUl3a0QsRUFBRXFRLEVBQUU0WixVQUFVLEdBQUcsT0FBT2pxQixFQUFFLENBQUMsSUFBSTJRLEVBQUUzUSxFQUFFcnhCLE1BQU0sR0FBRyxPQUFPZ2lDLEVBQUUsQ0FBQzNRLEVBQUVyeEIsTUFBTSxLQUFLLEVBQUUsQ0FBQyxJQUFJMnZELEVBQUUzdEIsRUFBRTZaLFFBQVE3WixFQUFFNlosUUFBUSxLQUFLN1osRUFBRTJ0QixRQUFRLE9BQU8zdEIsSUFBSW9qQyxHQUFFMWpDLEdBQUcsR0FBRyxJQUFvQixLQUFmQSxFQUFFKy9CLGVBQW9CLE9BQU85L0IsRUFBRUEsRUFBRXZQLE9BQU9zUCxFQUFFMGpDLEdBQUV6akMsT0FBTzV6RCxFQUFFLEtBQUssT0FBT3EzRixJQUFHLENBQUssR0FBRyxJQUFhLE1BQXBCMWpDLEVBQUUwakMsSUFBWTdwQixPQUFZLE9BQU83WixFQUFFdVEsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR3d6QixHQUFHLEVBQUUvakMsRUFBRUEsRUFBRXRQLFFBQVEsSUFBSXBtRCxFQUFFMDFELEVBQUVtYSxRQUFRLEdBQUcsT0FBTzd2RSxFQUFFLENBQUNBLEVBQUVvbUQsT0FBT3NQLEVBQUV0UCxPQUFPZ3pDLEdBQUVwNUYsRUFBRSxNQUFNK0IsRUFBRXEzRixHQUFFMWpDLEVBQUV0UCxRQUFRLElBQUl4bEQsRUFBRWtCLEVBQUVvTixRQUFRLElBQUlrcUYsR0FBRXg0RixFQUFFLE9BQU93NEYsSUFBRyxDQUFLLElBQUlyakMsR0FBUkosRUFBRXlqQyxJQUFVcGxFLE1BQU0sR0FBRyxJQUFvQixLQUFmMmhDLEVBQUU4L0IsZUFBb0IsT0FDbGYxL0IsRUFBRUEsRUFBRTNQLE9BQU91UCxFQUFFeWpDLEdBQUVyakMsT0FBT2gwRCxFQUFFLElBQUk0ekQsRUFBRS8wRCxFQUFFLE9BQU93NEYsSUFBRyxDQUFLLEdBQUcsSUFBYSxNQUFwQnhqQyxFQUFFd2pDLElBQVk3cEIsT0FBWSxJQUFJLE9BQU8zWixFQUFFcVEsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR3l6QixHQUFHLEVBQUU5akMsSUFBSSxNQUFNc3VCLEdBQUdvVixHQUFFMWpDLEVBQUVBLEVBQUV4UCxPQUFPODlCLEdBQUcsR0FBR3R1QixJQUFJRCxFQUFFLENBQUN5akMsR0FBRSxLQUFLLE1BQU1yM0YsRUFBRSxJQUFJNmhGLEVBQUVodUIsRUFBRWlhLFFBQVEsR0FBRyxPQUFPK1QsRUFBRSxDQUFDQSxFQUFFeDlCLE9BQU93UCxFQUFFeFAsT0FBT2d6QyxHQUFFeFYsRUFBRSxNQUFNN2hGLEVBQUVxM0YsR0FBRXhqQyxFQUFFeFAsUUFBaUIsR0FBVHMxQyxHQUFFanhGLEVBQUVnOUUsS0FBUWxXLElBQUksbUJBQW9CQSxHQUFHdXRCLHNCQUFzQixJQUFJdnRCLEdBQUd1dEIsc0JBQXNCeHRCLEdBQUd4dkUsR0FBRyxNQUFNb2lGLElBQUl4NkUsR0FBRSxFQUFHLE9BQU9BLEVBQUUsUUFBUW9wRSxHQUFFcnBFLEVBQUVneUYsR0FBRzNnRixXQUFXL1ksR0FBRyxPQUFNLEVBQUcsU0FBU2c5RixHQUFHajlGLEVBQUVDLEVBQUUwSCxHQUF5Qm1nRixHQUFHOW5GLEVBQWZDLEVBQUUweUYsR0FBRzN5RixFQUFmQyxFQUFFb3lGLEdBQUcxcUYsRUFBRTFILEdBQVksSUFBV0EsRUFBRTBvRixLQUFlLFFBQVYzb0YsRUFBRTQ2RixHQUFHNTZGLEVBQUUsTUFBYzZ3RSxHQUFHN3dFLEVBQUUsRUFBRUMsR0FBRzY2RixHQUFHOTZGLEVBQUVDLElBQzFlLFNBQVN1M0YsR0FBRXgzRixFQUFFQyxFQUFFMEgsR0FBRyxHQUFHLElBQUkzSCxFQUFFbWtFLElBQUk4NEIsR0FBR2o5RixFQUFFQSxFQUFFMkgsUUFBUSxLQUFLLE9BQU8xSCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFa2tFLElBQUksQ0FBQzg0QixHQUFHaDlGLEVBQUVELEVBQUUySCxHQUFHLE1BQVcsR0FBRyxJQUFJMUgsRUFBRWtrRSxJQUFJLENBQUMsSUFBSXY4RCxFQUFFM0gsRUFBRW1zRSxVQUFVLEdBQUcsbUJBQW9CbnNFLEVBQUU2akIsS0FBSyt0QywwQkFBMEIsbUJBQW9CanFELEVBQUVtckYsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUd0MUYsSUFBSWtLLElBQUksQ0FBdUJrZ0YsR0FBRzduRixFQUFmRCxFQUFFOHlGLEdBQUc3eUYsRUFBZkQsRUFBRXF5RixHQUFHMXFGLEVBQUUzSCxHQUFZLElBQVdBLEVBQUUyb0YsS0FBZSxRQUFWMW9GLEVBQUUyNkYsR0FBRzM2RixFQUFFLE1BQWM0d0UsR0FBRzV3RSxFQUFFLEVBQUVELEdBQUc4NkYsR0FBRzc2RixFQUFFRCxJQUFJLE9BQU9DLEVBQUVBLEVBQUVxa0QsUUFDblYsU0FBUzh1QyxHQUFHcHpGLEVBQUVDLEVBQUUwSCxHQUFHLElBQUlDLEVBQUU1SCxFQUFFbXpGLFVBQVUsT0FBT3ZyRixHQUFHQSxFQUFFK00sT0FBTzFVLEdBQUdBLEVBQUUwb0YsS0FBSzNvRixFQUFFc3dFLGFBQWF0d0UsRUFBRXF3RSxlQUFlMW9FLEVBQUVvb0YsS0FBSS92RixJQUFJODVGLEdBQUVueUYsS0FBS0EsSUFBSSxJQUFJNHNGLElBQUcsSUFBSUEsS0FBTSxVQUFGdUYsTUFBZUEsSUFBRyxJQUFJcHJCLEtBQUlxcUIsR0FBRzRDLEdBQUczN0YsRUFBRSxHQUFHaTZGLElBQUl0eUYsR0FBR216RixHQUFHOTZGLEVBQUVDLEdBQUcsU0FBU2k5RixHQUFHbDlGLEVBQUVDLEdBQUcsSUFBSUEsSUFBSSxJQUFZLEVBQVBELEVBQUVzckYsTUFBUXJyRixFQUFFLEdBQUdBLEVBQUVnd0UsR0FBVSxJQUFRLFdBQWZBLEtBQUssTUFBdUJBLEdBQUcsV0FBVyxJQUFJdG9FLEVBQUVnaEYsS0FBZSxRQUFWM29GLEVBQUU0NkYsR0FBRzU2RixFQUFFQyxNQUFjNHdFLEdBQUc3d0UsRUFBRUMsRUFBRTBILEdBQUdtekYsR0FBRzk2RixFQUFFMkgsSUFBSSxTQUFTZ3ZGLEdBQUczMkYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFMnRFLGNBQWNobUUsRUFBRSxFQUFFLE9BQU8xSCxJQUFJMEgsRUFBRTFILEVBQUVtckYsV0FBVzhSLEdBQUdsOUYsRUFBRTJILEdBQ2paLFNBQVNneEYsR0FBRzM0RixFQUFFQyxHQUFHLElBQUkwSCxFQUFFLEVBQUUsT0FBTzNILEVBQUVta0UsS0FBSyxLQUFLLEdBQUcsSUFBSXY4RCxFQUFFNUgsRUFBRW9zRSxVQUFjempFLEVBQUUzSSxFQUFFMnRFLGNBQWMsT0FBT2hsRSxJQUFJaEIsRUFBRWdCLEVBQUV5aUYsV0FBVyxNQUFNLEtBQUssR0FBR3hqRixFQUFFNUgsRUFBRW9zRSxVQUFVLE1BQU0sUUFBUSxNQUFNeEksTUFBTWorRCxFQUFFLE1BQU8sT0FBT2lDLEdBQUdBLEVBQUUrTSxPQUFPMVUsR0FBR2k5RixHQUFHbDlGLEVBQUUySCxHQVNqTSxTQUFTMnpGLEdBQUd0N0YsRUFBRUMsR0FBRyxPQUFPaXVFLEdBQUdsdUUsRUFBRUMsR0FBRyxTQUFTazlGLEdBQUduOUYsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUc3SyxLQUFLb25FLElBQUlua0UsRUFBRWpELEtBQUsrTCxJQUFJbkIsRUFBRTVLLEtBQUtneEUsUUFBUWh4RSxLQUFLbTFCLE1BQU1uMUIsS0FBS3VuRCxPQUFPdm5ELEtBQUtxdkUsVUFBVXJ2RSxLQUFLK21CLEtBQUsvbUIsS0FBSyt0RixZQUFZLEtBQUsvdEYsS0FBSzJCLE1BQU0sRUFBRTNCLEtBQUs0aEIsSUFBSSxLQUFLNWhCLEtBQUtrdUYsYUFBYWhyRixFQUFFbEQsS0FBS3lwRixhQUFhenBGLEtBQUs0d0UsY0FBYzV3RSxLQUFLa3FGLFlBQVlscUYsS0FBSzJ1RixjQUFjLEtBQUszdUYsS0FBS3V1RixLQUFLMWpGLEVBQUU3SyxLQUFLNDJGLGFBQWE1MkYsS0FBSzB3RSxNQUFNLEVBQUUxd0UsS0FBS2d1RixVQUFVLEtBQUtodUYsS0FBS3VwRixXQUFXdnBGLEtBQUsycEYsTUFBTSxFQUFFM3BGLEtBQUt5d0UsVUFBVSxLQUFLLFNBQVNxZCxHQUFHN3FGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLE9BQU8sSUFBSXUxRixHQUFHbjlGLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUM5YixTQUFTeXRGLEdBQUdyMUYsR0FBaUIsVUFBZEEsRUFBRUEsRUFBRXdJLGFBQXVCeEksRUFBRW85RixrQkFDNUMsU0FBU2pSLEdBQUduc0YsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRTNILEVBQUV3dEUsVUFDdUIsT0FEYixPQUFPN2xFLElBQUdBLEVBQUVrakYsR0FBRzdxRixFQUFFbWtFLElBQUlsa0UsRUFBRUQsRUFBRThJLElBQUk5SSxFQUFFc3JGLE9BQVFSLFlBQVk5cUYsRUFBRThxRixZQUFZbmpGLEVBQUVtYyxLQUFLOWpCLEVBQUU4akIsS0FBS25jLEVBQUV5a0UsVUFBVXBzRSxFQUFFb3NFLFVBQVV6a0UsRUFBRTZsRSxVQUFVeHRFLEVBQUVBLEVBQUV3dEUsVUFBVTdsRSxJQUFJQSxFQUFFc2pGLGFBQWFockYsRUFBRTBILEVBQUVtYyxLQUFLOWpCLEVBQUU4akIsS0FBS25jLEVBQUU4bEUsTUFBTSxFQUFFOWxFLEVBQUVnc0YsYUFBYSxFQUFFaHNGLEVBQUVvakYsVUFBVSxNQUFNcGpGLEVBQUU4bEUsTUFBYyxTQUFSenRFLEVBQUV5dEUsTUFBZTlsRSxFQUFFMitFLFdBQVd0bUYsRUFBRXNtRixXQUFXMytFLEVBQUUrK0UsTUFBTTFtRixFQUFFMG1GLE1BQU0vK0UsRUFBRXVxQixNQUFNbHlCLEVBQUVreUIsTUFBTXZxQixFQUFFK2pGLGNBQWMxckYsRUFBRTByRixjQUFjL2pGLEVBQUVnbUUsY0FBYzN0RSxFQUFFMnRFLGNBQWNobUUsRUFBRXMvRSxZQUFZam5GLEVBQUVpbkYsWUFBWWhuRixFQUFFRCxFQUFFd21GLGFBQWE3K0UsRUFBRTYrRSxhQUFhLE9BQU92bUYsRUFBRSxLQUFLLENBQUN5bUYsTUFBTXptRixFQUFFeW1GLE1BQU1ELGFBQWF4bUYsRUFBRXdtRixjQUMvZTkrRSxFQUFFb21FLFFBQVEvdEUsRUFBRSt0RSxRQUFRcG1FLEVBQUVqSixNQUFNc0IsRUFBRXRCLE1BQU1pSixFQUFFZ1gsSUFBSTNlLEVBQUUyZSxJQUFXaFgsRUFDdkQsU0FBUzJtQyxHQUFHdHVDLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxFQUFFaXJELEdBQUcsSUFBSUMsRUFBRSxFQUFNLEdBQUpqc0QsRUFBRTVILEVBQUssbUJBQW9CQSxFQUFFcTFGLEdBQUdyMUYsS0FBSzZ6RCxFQUFFLFFBQVEsR0FBRyxpQkFBa0I3ekQsRUFBRTZ6RCxFQUFFLE9BQU83ekQsRUFBRSxPQUFPQSxHQUFHLEtBQUs2aUUsRUFBRyxPQUFPMHBCLEdBQUc1a0YsRUFBRXFxQixTQUFTcnBCLEVBQUVpckQsRUFBRTN6RCxHQUFHLEtBQUs2aUUsRUFBR2pQLEVBQUUsRUFBRWxyRCxHQUFHLEVBQUUsTUFBTSxLQUFLbzZELEVBQUcsT0FBTy9pRSxFQUFFNnFGLEdBQUcsR0FBR2xqRixFQUFFMUgsRUFBSSxFQUFGMEksSUFBT21pRixZQUFZL25CLEVBQUcvaUUsRUFBRTBtRixNQUFNOXlCLEVBQUU1ekQsRUFBRSxLQUFLbWpFLEVBQUcsT0FBT25qRSxFQUFFNnFGLEdBQUcsR0FBR2xqRixFQUFFMUgsRUFBRTBJLElBQUttaUYsWUFBWTNuQixFQUFHbmpFLEVBQUUwbUYsTUFBTTl5QixFQUFFNXpELEVBQUUsS0FBS29qRSxFQUFHLE9BQU9wakUsRUFBRTZxRixHQUFHLEdBQUdsakYsRUFBRTFILEVBQUUwSSxJQUFLbWlGLFlBQVkxbkIsRUFBR3BqRSxFQUFFMG1GLE1BQU05eUIsRUFBRTV6RCxFQUFFLEtBQUt1akUsRUFBRyxPQUFPaXpCLEdBQUc3dUYsRUFBRWdCLEVBQUVpckQsRUFBRTN6RCxHQUFHLFFBQVEsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsRUFBRSxPQUFPQSxFQUFFbzBELFVBQVUsS0FBSzRPLEVBQUduUCxFQUFFLEdBQUcsTUFBTTd6RCxFQUFFLEtBQUtpakUsRUFBR3BQLEVBQUUsRUFBRSxNQUFNN3pELEVBQUUsS0FBS2tqRSxFQUFHclAsRUFBRSxHQUNwZixNQUFNN3pELEVBQUUsS0FBS3FqRSxFQUFHeFAsRUFBRSxHQUFHLE1BQU03ekQsRUFBRSxLQUFLc2pFLEVBQUd6UCxFQUFFLEdBQUdqc0QsRUFBRSxLQUFLLE1BQU01SCxFQUFFLE1BQU00akUsTUFBTWorRCxFQUFFLElBQUksTUFBTTNGLEVBQUVBLFNBQVNBLEVBQUUsS0FBdUQsT0FBakRDLEVBQUU0cUYsR0FBR2gzQixFQUFFbHNELEVBQUUxSCxFQUFFMEksSUFBS21pRixZQUFZOXFGLEVBQUVDLEVBQUU2akIsS0FBS2xjLEVBQUUzSCxFQUFFeW1GLE1BQU05eUIsRUFBUzN6RCxFQUFFLFNBQVNzc0YsR0FBR3ZzRixFQUFFQyxFQUFFMEgsRUFBRUMsR0FBMkIsT0FBeEI1SCxFQUFFNnFGLEdBQUcsRUFBRTdxRixFQUFFNEgsRUFBRTNILElBQUt5bUYsTUFBTS8rRSxFQUFTM0gsRUFBRSxTQUFTdzJGLEdBQUd4MkYsRUFBRUMsRUFBRTBILEVBQUVDLEdBQTRELE9BQXpENUgsRUFBRTZxRixHQUFHLEdBQUc3cUYsRUFBRTRILEVBQUUzSCxJQUFLNnFGLFlBQVl2bkIsRUFBR3ZqRSxFQUFFMG1GLE1BQU0vK0UsRUFBRTNILEVBQUVvc0UsVUFBVSxHQUFVcHNFLEVBQUUsU0FBU29zRixHQUFHcHNGLEVBQUVDLEVBQUUwSCxHQUE4QixPQUEzQjNILEVBQUU2cUYsR0FBRyxFQUFFN3FGLEVBQUUsS0FBS0MsSUFBS3ltRixNQUFNLytFLEVBQVMzSCxFQUNoVyxTQUFTc3NGLEdBQUd0c0YsRUFBRUMsRUFBRTBILEdBQThKLE9BQTNKMUgsRUFBRTRxRixHQUFHLEVBQUUsT0FBTzdxRixFQUFFZ3lCLFNBQVNoeUIsRUFBRWd5QixTQUFTLEdBQUdoeUIsRUFBRThJLElBQUk3SSxJQUFLeW1GLE1BQU0vK0UsRUFBRTFILEVBQUVtc0UsVUFBVSxDQUFDdUcsY0FBYzN5RSxFQUFFMnlFLGNBQWMwcUIsZ0JBQWdCLEtBQUtoUixlQUFlcnNGLEVBQUVxc0YsZ0JBQXVCcHNGLEVBQ3JMLFNBQVNxOUYsR0FBR3Q5RixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsR0FBRzVMLEtBQUtvbkUsSUFBSWxrRSxFQUFFbEQsS0FBSzQxRSxjQUFjM3lFLEVBQUVqRCxLQUFLaS9GLGFBQWFqL0YsS0FBS28yRixVQUFVcDJGLEtBQUtxUSxRQUFRclEsS0FBS3NnRyxnQkFBZ0IsS0FBS3RnRyxLQUFLby9GLGVBQWUsRUFBRXAvRixLQUFLZytGLGFBQWFoK0YsS0FBSzgyRixlQUFlOTJGLEtBQUtvYixRQUFRLEtBQUtwYixLQUFLbytGLGlCQUFpQixFQUFFcCtGLEtBQUsrekUsV0FBV0YsR0FBRyxHQUFHN3pFLEtBQUtpK0YsZ0JBQWdCcHFCLElBQUksR0FBRzd6RSxLQUFLd3pFLGVBQWV4ekUsS0FBS2svRixjQUFjbC9GLEtBQUswL0YsaUJBQWlCMS9GLEtBQUtrK0YsYUFBYWwrRixLQUFLdXpFLFlBQVl2ekUsS0FBS3N6RSxlQUFldHpFLEtBQUtxekUsYUFBYSxFQUFFcnpFLEtBQUt5ekUsY0FBY0ksR0FBRyxHQUFHN3pFLEtBQUtxMUYsaUJBQWlCeHFGLEVBQUU3SyxLQUFLKy9GLG1CQUFtQm4wRixFQUFFNUwsS0FBS3dnRyxnQ0FDL2UsS0FBSyxTQUFTQyxHQUFHeDlGLEVBQUVDLEVBQUUwSCxFQUFFQyxFQUFFZSxFQUFFaXJELEVBQUVDLEVBQUVDLEVBQUU1NEMsR0FBZ04sT0FBN01sYixFQUFFLElBQUlzOUYsR0FBR3Q5RixFQUFFQyxFQUFFMEgsRUFBRW1zRCxFQUFFNTRDLEdBQUcsSUFBSWpiLEdBQUdBLEVBQUUsR0FBRSxJQUFLMnpELElBQUkzekQsR0FBRyxJQUFJQSxFQUFFLEVBQUUyekQsRUFBRWkzQixHQUFHLEVBQUUsS0FBSyxLQUFLNXFGLEdBQUdELEVBQUVvTixRQUFRd21ELEVBQUVBLEVBQUV3WSxVQUFVcHNFLEVBQUU0ekQsRUFBRStaLGNBQWMsQ0FBQ2x3RSxRQUFRbUssRUFBRThxRSxhQUFhL3FFLEVBQUU4bkQsTUFBTSxLQUFLa21DLFlBQVksS0FBSzhILDBCQUEwQixNQUFNelcsR0FBR3B6QixHQUFVNXpELEVBQUUsU0FBUzA5RixHQUFHMTlGLEVBQUVDLEVBQUUwSCxHQUFHLElBQUlDLEVBQUUsRUFBRTRzQixVQUFVdHdCLGFBQVEsSUFBU3N3QixVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLE1BQU0sQ0FBQzQvQixTQUFTd08sRUFBRzk1RCxJQUFJLE1BQU1sQixFQUFFLEtBQUssR0FBR0EsRUFBRW9xQixTQUFTaHlCLEVBQUUyeUUsY0FBYzF5RSxFQUFFb3NGLGVBQWUxa0YsR0FDbGEsU0FBU2cyRixHQUFHMzlGLEdBQUcsSUFBSUEsRUFBRSxPQUFPd2tGLEdBQXVCeGtGLEVBQUUsQ0FBQyxHQUFHdXRFLEdBQTFCdnRFLEVBQUVBLEVBQUV5b0YsbUJBQThCem9GLEdBQUcsSUFBSUEsRUFBRW1rRSxJQUFJLE1BQU1QLE1BQU1qK0QsRUFBRSxNQUFNLElBQUkxRixFQUFFRCxFQUFFLEVBQUUsQ0FBQyxPQUFPQyxFQUFFa2tFLEtBQUssS0FBSyxFQUFFbGtFLEVBQUVBLEVBQUVtc0UsVUFBVWowRCxRQUFRLE1BQU1uWSxFQUFFLEtBQUssRUFBRSxHQUFHK2tGLEdBQUc5a0YsRUFBRTZqQixNQUFNLENBQUM3akIsRUFBRUEsRUFBRW1zRSxVQUFVaVosMENBQTBDLE1BQU1ybEYsR0FBR0MsRUFBRUEsRUFBRXFrRCxhQUFhLE9BQU9ya0QsR0FBRyxNQUFNMmpFLE1BQU1qK0QsRUFBRSxNQUFPLEdBQUcsSUFBSTNGLEVBQUVta0UsSUFBSSxDQUFDLElBQUl4OEQsRUFBRTNILEVBQUU4akIsS0FBSyxHQUFHaWhFLEdBQUdwOUUsR0FBRyxPQUFPdTlFLEdBQUdsbEYsRUFBRTJILEVBQUUxSCxHQUFHLE9BQU9BLEVBQ25XLFNBQVMyOUYsR0FBRzU5RixFQUFFQyxFQUFFMEgsRUFBRUMsRUFBRWUsRUFBRWlyRCxFQUFFQyxFQUFFQyxFQUFFNTRDLEdBQXVLLE9BQXBLbGIsRUFBRXc5RixHQUFHNzFGLEVBQUVDLEdBQUUsRUFBRzVILEVBQUUySSxFQUFFaXJELEVBQUVDLEVBQUVDLEVBQUU1NEMsSUFBSy9DLFFBQVF3bEYsR0FBRyxNQUFNaDJGLEVBQUUzSCxFQUFFb04sU0FBdUJ3bUQsRUFBRTh6QixHQUFqQjkvRSxFQUFFK2dGLEtBQUtoZ0YsRUFBRWlnRixHQUFHamhGLEtBQWUwcEIsU0FBUyxNQUFTcHhCLEVBQVlBLEVBQUUsS0FBSzZuRixHQUFHbmdGLEVBQUVpc0QsR0FBRzV6RCxFQUFFb04sUUFBUXM1RSxNQUFNLzlFLEVBQUVrb0UsR0FBRzd3RSxFQUFFMkksRUFBRWYsR0FBR2t6RixHQUFHOTZGLEVBQUU0SCxHQUFVNUgsRUFBRSxTQUFTNjlGLEdBQUc3OUYsRUFBRUMsRUFBRTBILEVBQUVDLEdBQUcsSUFBSWUsRUFBRTFJLEVBQUVtTixRQUFRd21ELEVBQUUrMEIsS0FBSzkwQixFQUFFKzBCLEdBQUdqZ0YsR0FBZ0wsT0FBN0toQixFQUFFZzJGLEdBQUdoMkYsR0FBRyxPQUFPMUgsRUFBRWtZLFFBQVFsWSxFQUFFa1ksUUFBUXhRLEVBQUUxSCxFQUFFNHpGLGVBQWVsc0YsR0FBRTFILEVBQUV5bkYsR0FBRzl6QixFQUFFQyxJQUFLZzBCLFFBQVEsQ0FBQ3BxRixRQUFRdUMsR0FBdUIsUUFBcEI0SCxPQUFFLElBQVNBLEVBQUUsS0FBS0EsS0FBYTNILEVBQUVveEIsU0FBU3pwQixHQUFHa2dGLEdBQUduL0UsRUFBRTFJLEdBQWUsUUFBWkQsRUFBRTZvRixHQUFHbGdGLEVBQUVrckQsRUFBRUQsS0FBYW8wQixHQUFHaG9GLEVBQUUySSxFQUFFa3JELEdBQVVBLEVBQ3BiLFNBQVNpcUMsR0FBRzk5RixHQUFlLE9BQVpBLEVBQUVBLEVBQUVvTixTQUFjOGtCLE9BQXlCbHlCLEVBQUVreUIsTUFBTWl5QyxJQUFvRG5rRSxFQUFFa3lCLE1BQU1rNkMsV0FBaEYsS0FBMkYsU0FBUzJ4QixHQUFHLzlGLEVBQUVDLEdBQXFCLEdBQUcsUUFBckJELEVBQUVBLEVBQUUydEUsZ0JBQTJCLE9BQU8zdEUsRUFBRTR0RSxXQUFXLENBQUMsSUFBSWptRSxFQUFFM0gsRUFBRW9yRixVQUFVcHJGLEVBQUVvckYsVUFBVSxJQUFJempGLEdBQUdBLEVBQUUxSCxFQUFFMEgsRUFBRTFILEdBQUcsU0FBUys5RixHQUFHaCtGLEVBQUVDLEdBQUc4OUYsR0FBRy85RixFQUFFQyxJQUFJRCxFQUFFQSxFQUFFd3RFLFlBQVl1d0IsR0FBRy85RixFQUFFQyxHQW5CM1NzNUYsR0FBRyxTQUFTdjVGLEVBQUVDLEVBQUUwSCxHQUFHLEdBQUcsT0FBTzNILEVBQUUsR0FBR0EsRUFBRTByRixnQkFBZ0J6ckYsRUFBRWdyRixjQUFjdkcsR0FBR3QzRSxRQUFRdTVFLElBQUcsTUFBTyxDQUFDLEdBQUcsSUFBSzNtRixFQUFFMG1GLE1BQU0vK0UsSUFBSSxJQUFhLElBQVIxSCxFQUFFd3RFLE9BQVcsT0FBT2taLElBQUcsRUF0RDFJLFNBQVkzbUYsRUFBRUMsRUFBRTBILEdBQUcsT0FBTzFILEVBQUVra0UsS0FBSyxLQUFLLEVBQUUreEIsR0FBR2oyRixHQUFHMHJGLEtBQUssTUFBTSxLQUFLLEVBQUVzQixHQUFHaHRGLEdBQUcsTUFBTSxLQUFLLEVBQUU4a0YsR0FBRzlrRixFQUFFNmpCLE9BQU9zaEUsR0FBR25sRixHQUFHLE1BQU0sS0FBSyxFQUFFOHNGLEdBQUc5c0YsRUFBRUEsRUFBRW1zRSxVQUFVdUcsZUFBZSxNQUFNLEtBQUssR0FBRyxJQUFJL3FFLEVBQUUzSCxFQUFFNmpCLEtBQUt1Z0QsU0FBUzE3RCxFQUFFMUksRUFBRXlyRixjQUFjcnFGLE1BQU1rakYsR0FBRXVCLEdBQUdsK0UsRUFBRXcrRSxlQUFleCtFLEVBQUV3K0UsY0FBY3o5RSxFQUFFLE1BQU0sS0FBSyxHQUFxQixHQUFHLFFBQXJCZixFQUFFM0gsRUFBRTB0RSxlQUEyQixPQUFHLE9BQU8vbEUsRUFBRWdtRSxZQUFrQjJXLEdBQUU0SSxHQUFZLEVBQVZBLEdBQUUvL0UsU0FBV25OLEVBQUV3dEUsT0FBTyxJQUFJLE1BQVEsSUFBSzlsRSxFQUFFMUgsRUFBRWl5QixNQUFNbzBELFlBQW1CaVEsR0FBR3YyRixFQUFFQyxFQUFFMEgsSUFBRzQ4RSxHQUFFNEksR0FBWSxFQUFWQSxHQUFFLy9FLFNBQThCLFFBQW5CcE4sRUFBRW0xRixHQUFHbjFGLEVBQUVDLEVBQUUwSCxJQUFtQjNILEVBQUUrdEUsUUFBUSxNQUFLd1csR0FBRTRJLEdBQVksRUFBVkEsR0FBRS8vRSxTQUFXLE1BQU0sS0FBSyxHQUM3ZCxHQURnZXhGLEVBQUUsSUFBS0QsRUFDcmYxSCxFQUFFcW1GLFlBQWUsSUFBYSxJQUFSdG1GLEVBQUV5dEUsT0FBVyxDQUFDLEdBQUc3bEUsRUFBRSxPQUFPcXZGLEdBQUdqM0YsRUFBRUMsRUFBRTBILEdBQUcxSCxFQUFFd3RFLE9BQU8sSUFBZ0csR0FBMUUsUUFBbEI5a0UsRUFBRTFJLEVBQUUwdEUsaUJBQXlCaGxFLEVBQUU4ckYsVUFBVSxLQUFLOXJGLEVBQUU4cUYsS0FBSyxLQUFLOXFGLEVBQUVzbkYsV0FBVyxNQUFNMUwsR0FBRTRJLEdBQUVBLEdBQUUvL0UsU0FBWXhGLEVBQUUsTUFBVyxPQUFPLEtBQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPM0gsRUFBRXltRixNQUFNLEVBQUU4TyxHQUFHeDFGLEVBQUVDLEVBQUUwSCxHQUFHLE9BQU93dEYsR0FBR24xRixFQUFFQyxFQUFFMEgsR0FxRDNHczJGLENBQUdqK0YsRUFBRUMsRUFBRTBILEdBQUdnL0UsR0FBRyxJQUFhLE9BQVIzbUYsRUFBRXl0RSxZQUF5QmtaLElBQUcsRUFBRytELElBQUcsSUFBYSxRQUFSenFGLEVBQUV3dEUsUUFBZ0I0YyxHQUFHcHFGLEVBQUU2cEYsR0FBRzdwRixFQUFFdkIsT0FBaUIsT0FBVnVCLEVBQUV5bUYsTUFBTSxFQUFTem1GLEVBQUVra0UsS0FBSyxLQUFLLEVBQUUsSUFBSXY4RCxFQUFFM0gsRUFBRTZqQixLQUFLLE9BQU85akIsSUFBSUEsRUFBRXd0RSxVQUFVLEtBQUt2dEUsRUFBRXV0RSxVQUFVLEtBQUt2dEUsRUFBRXd0RSxPQUFPLEdBQUd6dEUsRUFBRUMsRUFBRWdyRixhQUFhLElBQUl0aUYsRUFBRWk4RSxHQUFHM2tGLEVBQUV3a0YsR0FBRXIzRSxTQUFTbTVFLEdBQUd0bUYsRUFBRTBILEdBQUdnQixFQUFFMmxGLEdBQUcsS0FBS3J1RixFQUFFMkgsRUFBRTVILEVBQUUySSxFQUFFaEIsR0FBRyxJQUFJaXNELEVBQUUrNkIsS0FDNUksT0FEaUoxdUYsRUFBRXd0RSxPQUFPLEVBQUUsaUJBQWtCOWtFLEdBQUcsT0FBT0EsR0FBRyxtQkFBb0JBLEVBQUVzWSxhQUFRLElBQVN0WSxFQUFFeXJELFVBQ2pmbjBELEVBQUVra0UsSUFBSSxFQUFFbGtFLEVBQUUwdEUsY0FBYyxLQUFLMXRFLEVBQUVnbkYsWUFBWSxLQUFLbEMsR0FBR245RSxJQUFJZ3NELEdBQUUsRUFBR3d4QixHQUFHbmxGLElBQUkyekQsR0FBRSxFQUFHM3pELEVBQUUwdEUsY0FBYyxPQUFPaGxFLEVBQUV3SCxZQUFPLElBQVN4SCxFQUFFd0gsTUFBTXhILEVBQUV3SCxNQUFNLEtBQUs2MkUsR0FBRy9tRixHQUFHMEksRUFBRXlnRixRQUFRWixHQUFHdm9GLEVBQUVtc0UsVUFBVXpqRSxFQUFFQSxFQUFFOC9FLGdCQUFnQnhvRixFQUFFdXBGLEdBQUd2cEYsRUFBRTJILEVBQUU1SCxFQUFFMkgsR0FBRzFILEVBQUVnMkYsR0FBRyxLQUFLaDJGLEVBQUUySCxHQUFFLEVBQUdnc0QsRUFBRWpzRCxLQUFLMUgsRUFBRWtrRSxJQUFJLEVBQUV1bUIsSUFBRzkyQixHQUFHMDJCLEdBQUdycUYsR0FBR2cxRixHQUFHLEtBQUtoMUYsRUFBRTBJLEVBQUVoQixHQUFHMUgsRUFBRUEsRUFBRWl5QixPQUFjanlCLEVBQUUsS0FBSyxHQUFHMkgsRUFBRTNILEVBQUU2cUYsWUFBWTlxRixFQUFFLENBQXNJLE9BQXJJLE9BQU9BLElBQUlBLEVBQUV3dEUsVUFBVSxLQUFLdnRFLEVBQUV1dEUsVUFBVSxLQUFLdnRFLEVBQUV3dEUsT0FBTyxHQUFHenRFLEVBQUVDLEVBQUVnckYsYUFBdUJyakYsR0FBVmUsRUFBRWYsRUFBRTI4RCxPQUFVMzhELEVBQUUwOEQsVUFBVXJrRSxFQUFFNmpCLEtBQUtsYyxFQUFFZSxFQUFFMUksRUFBRWtrRSxJQVFyVyxTQUFZbmtFLEdBQUcsR0FBRyxtQkFBb0JBLEVBQUUsT0FBT3ExRixHQUFHcjFGLEdBQUcsRUFBRSxFQUFFLEdBQUcsTUFBU0EsRUFBWSxDQUFjLElBQWJBLEVBQUVBLEVBQUVvMEQsWUFBZ0I4TyxFQUFHLE9BQU8sR0FBRyxHQUFHbGpFLElBQUlxakUsRUFBRyxPQUFPLEdBQUcsT0FBTyxFQVIyTjY2QixDQUFHdDJGLEdBQUc1SCxFQUFFNmxGLEdBQUdqK0UsRUFBRTVILEdBQVUySSxHQUFHLEtBQUssRUFBRTFJLEVBQUVzMUYsR0FBRyxLQUFLdDFGLEVBQUUySCxFQUFFNUgsRUFBRTJILEdBQUcsTUFBTTNILEVBQUUsS0FBSyxFQUFFQyxFQUFFNjFGLEdBQUcsS0FBSzcxRixFQUNwZjJILEVBQUU1SCxFQUFFMkgsR0FBRyxNQUFNM0gsRUFBRSxLQUFLLEdBQUdDLEVBQUVpMUYsR0FBRyxLQUFLajFGLEVBQUUySCxFQUFFNUgsRUFBRTJILEdBQUcsTUFBTTNILEVBQUUsS0FBSyxHQUFHQyxFQUFFbTFGLEdBQUcsS0FBS24xRixFQUFFMkgsRUFBRWkrRSxHQUFHaitFLEVBQUVrYyxLQUFLOWpCLEdBQUcySCxHQUFHLE1BQU0zSCxFQUFFLE1BQU00akUsTUFBTWorRCxFQUFFLElBQUlpQyxFQUFFLEtBQU0sT0FBTzNILEVBQUUsS0FBSyxFQUFFLE9BQU8ySCxFQUFFM0gsRUFBRTZqQixLQUFLbmIsRUFBRTFJLEVBQUVnckYsYUFBMkNzSyxHQUFHdjFGLEVBQUVDLEVBQUUySCxFQUFyQ2UsRUFBRTFJLEVBQUU2cUYsY0FBY2xqRixFQUFFZSxFQUFFazlFLEdBQUdqK0UsRUFBRWUsR0FBY2hCLEdBQUcsS0FBSyxFQUFFLE9BQU9DLEVBQUUzSCxFQUFFNmpCLEtBQUtuYixFQUFFMUksRUFBRWdyRixhQUEyQzZLLEdBQUc5MUYsRUFBRUMsRUFBRTJILEVBQXJDZSxFQUFFMUksRUFBRTZxRixjQUFjbGpGLEVBQUVlLEVBQUVrOUUsR0FBR2orRSxFQUFFZSxHQUFjaEIsR0FBRyxLQUFLLEVBQUUzSCxFQUFFLENBQU8sR0FBTmsyRixHQUFHajJGLEdBQU0sT0FBT0QsRUFBRSxNQUFNNGpFLE1BQU1qK0QsRUFBRSxNQUFNaUMsRUFBRTNILEVBQUVnckYsYUFBK0J0aUYsR0FBbEJpckQsRUFBRTN6RCxFQUFFMHRFLGVBQWtCbHdFLFFBQVFncUYsR0FBR3puRixFQUFFQyxHQUFHaW9GLEdBQUdqb0YsRUFBRTJILEVBQUUsS0FBS0QsR0FBRyxJQUFJa3NELEVBQUU1ekQsRUFBRTB0RSxjQUEwQixHQUFaL2xFLEVBQUVpc0QsRUFBRXAyRCxRQUFXbTJELEVBQUU4ZSxhQUFhLElBQUc5ZSxFQUFFLENBQUNuMkQsUUFBUW1LLEVBQUU4cUUsY0FBYSxFQUNsZmpqQixNQUFNb0UsRUFBRXBFLE1BQU1ndUMsMEJBQTBCNXBDLEVBQUU0cEMsMEJBQTBCOUgsWUFBWTloQyxFQUFFOGhDLGFBQWExMUYsRUFBRWduRixZQUFZQyxVQUFVdHpCLEVBQUUzekQsRUFBRTB0RSxjQUFjL1osRUFBVSxJQUFSM3pELEVBQUV3dEUsTUFBVSxDQUFpQnh0RSxFQUFFazJGLEdBQUduMkYsRUFBRUMsRUFBRTJILEVBQUVELEVBQTNCZ0IsRUFBRWk3RCxNQUFNaitELEVBQUUsT0FBc0IsTUFBTTNGLEVBQU8sR0FBRzRILElBQUllLEVBQUUsQ0FBaUIxSSxFQUFFazJGLEdBQUduMkYsRUFBRUMsRUFBRTJILEVBQUVELEVBQTNCZ0IsRUFBRWk3RCxNQUFNaitELEVBQUUsT0FBc0IsTUFBTTNGLEVBQU8sSUFBSXlxRixHQUFHOUcsR0FBRzFqRixFQUFFbXNFLFVBQVV1RyxjQUFjeEwsWUFBWXFqQixHQUFHdnFGLEVBQUV5cUYsSUFBRSxFQUFHQyxHQUFHLEtBQUtoakYsRUFBRThrRixHQUFHeHNGLEVBQUUsS0FBSzJILEVBQUVELEdBQUcxSCxFQUFFaXlCLE1BQU12cUIsRUFBRUEsR0FBR0EsRUFBRThsRSxPQUFlLEVBQVQ5bEUsRUFBRThsRSxNQUFTLEtBQUs5bEUsRUFBRUEsRUFBRW9tRSxZQUFZLENBQU0sR0FBTDRkLEtBQVEvakYsSUFBSWUsRUFBRSxDQUFDMUksRUFBRWsxRixHQUFHbjFGLEVBQUVDLEVBQUUwSCxHQUFHLE1BQU0zSCxFQUFFaTFGLEdBQUdqMUYsRUFBRUMsRUFBRTJILEVBQUVELEdBQUcxSCxFQUFFQSxFQUFFaXlCLE1BQU0sT0FBT2p5QixFQUFFLEtBQUssRUFBRSxPQUFPZ3RGLEdBQUdodEYsR0FBRyxPQUFPRCxHQUFHdXJGLEdBQUd0ckYsR0FBRzJILEVBQUUzSCxFQUFFNmpCLEtBQUtuYixFQUNwZjFJLEVBQUVnckYsYUFBYXIzQixFQUFFLE9BQU81ekQsRUFBRUEsRUFBRTByRixjQUFjLEtBQUs3M0IsRUFBRWxyRCxFQUFFcXBCLFNBQVNreEQsR0FBR3Q3RSxFQUFFZSxHQUFHa3JELEVBQUUsS0FBSyxPQUFPRCxHQUFHc3ZCLEdBQUd0N0UsRUFBRWdzRCxLQUFLM3pELEVBQUV3dEUsT0FBTyxJQUFJb29CLEdBQUc3MUYsRUFBRUMsR0FBR2cxRixHQUFHajFGLEVBQUVDLEVBQUU0ekQsRUFBRWxzRCxHQUFHMUgsRUFBRWl5QixNQUFNLEtBQUssRUFBRSxPQUFPLE9BQU9seUIsR0FBR3VyRixHQUFHdHJGLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT3MyRixHQUFHdjJGLEVBQUVDLEVBQUUwSCxHQUFHLEtBQUssRUFBRSxPQUFPb2xGLEdBQUc5c0YsRUFBRUEsRUFBRW1zRSxVQUFVdUcsZUFBZS9xRSxFQUFFM0gsRUFBRWdyRixhQUFhLE9BQU9qckYsRUFBRUMsRUFBRWl5QixNQUFNczZELEdBQUd2c0YsRUFBRSxLQUFLMkgsRUFBRUQsR0FBR3N0RixHQUFHajFGLEVBQUVDLEVBQUUySCxFQUFFRCxHQUFHMUgsRUFBRWl5QixNQUFNLEtBQUssR0FBRyxPQUFPdHFCLEVBQUUzSCxFQUFFNmpCLEtBQUtuYixFQUFFMUksRUFBRWdyRixhQUEyQ2lLLEdBQUdsMUYsRUFBRUMsRUFBRTJILEVBQXJDZSxFQUFFMUksRUFBRTZxRixjQUFjbGpGLEVBQUVlLEVBQUVrOUUsR0FBR2orRSxFQUFFZSxHQUFjaEIsR0FBRyxLQUFLLEVBQUUsT0FBT3N0RixHQUFHajFGLEVBQUVDLEVBQUVBLEVBQUVnckYsYUFBYXRqRixHQUFHMUgsRUFBRWl5QixNQUFNLEtBQUssRUFBbUQsS0FBSyxHQUFHLE9BQU8raUUsR0FBR2oxRixFQUNyZ0JDLEVBQUVBLEVBQUVnckYsYUFBYWo1RCxTQUFTcnFCLEdBQUcxSCxFQUFFaXlCLE1BQU0sS0FBSyxHQUFHbHlCLEVBQUUsQ0FBd0csR0FBdkc0SCxFQUFFM0gsRUFBRTZqQixLQUFLdWdELFNBQVMxN0QsRUFBRTFJLEVBQUVnckYsYUFBYXIzQixFQUFFM3pELEVBQUV5ckYsY0FBYzczQixFQUFFbHJELEVBQUV0SCxNQUFNa2pGLEdBQUV1QixHQUFHbCtFLEVBQUV3K0UsZUFBZXgrRSxFQUFFdytFLGNBQWN2eUIsRUFBSyxPQUFPRCxFQUFFLEdBQUc2cEIsR0FBRzdwQixFQUFFdnlELE1BQU13eUQsSUFBSSxHQUFHRCxFQUFFNWhDLFdBQVdycEIsRUFBRXFwQixXQUFXMHlELEdBQUd0M0UsUUFBUSxDQUFDbk4sRUFBRWsxRixHQUFHbjFGLEVBQUVDLEVBQUUwSCxHQUFHLE1BQU0zSCxRQUFRLElBQWMsUUFBVjR6RCxFQUFFM3pELEVBQUVpeUIsU0FBaUIwaEMsRUFBRXRQLE9BQU9ya0QsR0FBRyxPQUFPMnpELEdBQUcsQ0FBQyxJQUFJRSxFQUFFRixFQUFFNHlCLGFBQWEsR0FBRyxPQUFPMXlCLEVBQUUsQ0FBQ0QsRUFBRUQsRUFBRTFoQyxNQUFNLElBQUksSUFBSWhYLEVBQUU0NEMsRUFBRTJ5QixhQUFhLE9BQU92ckUsR0FBRyxDQUFDLEdBQUdBLEVBQUUvQyxVQUFVdlEsRUFBRSxDQUFDLEdBQUcsSUFBSWdzRCxFQUFFdVEsSUFBSSxFQUFDanBELEVBQUV3c0UsSUFBSSxFQUFFLy9FLEdBQUdBLElBQUt3OEQsSUFBSSxFQUFFLElBQUlwUSxFQUFFSCxFQUFFcXpCLFlBQVksR0FBRyxPQUFPbHpCLEVBQUUsQ0FBWSxJQUFJLzRDLEdBQWYrNEMsRUFBRUEsRUFBRXN6QixRQUFlQyxRQUFRLE9BQU90c0UsRUFBRUUsRUFBRTdOLEtBQ3JmNk4sR0FBR0EsRUFBRTdOLEtBQUsyTixFQUFFM04sS0FBSzJOLEVBQUUzTixLQUFLNk4sR0FBRzY0QyxFQUFFdXpCLFFBQVFwc0UsR0FBRzA0QyxFQUFFOHlCLE9BQU8vK0UsRUFBZ0IsUUFBZHVULEVBQUUwNEMsRUFBRTRaLGFBQXFCdHlELEVBQUV3ckUsT0FBTy8rRSxHQUFHMCtFLEdBQUd6eUIsRUFBRXRQLE9BQU8zOEMsRUFBRTFILEdBQUc2ekQsRUFBRTR5QixPQUFPLytFLEVBQUUsTUFBTXVULEVBQUVBLEVBQUU3TixXQUFXLEdBQUcsS0FBS3VtRCxFQUFFdVEsSUFBSXRRLEVBQUVELEVBQUU5dkMsT0FBTzdqQixFQUFFNmpCLEtBQUssS0FBSzh2QyxFQUFFMWhDLFdBQVcsR0FBRyxLQUFLMGhDLEVBQUV1USxJQUFJLENBQVksR0FBRyxRQUFkdFEsRUFBRUQsRUFBRXRQLFFBQW1CLE1BQU1zZixNQUFNaitELEVBQUUsTUFBTWt1RCxFQUFFNnlCLE9BQU8vK0UsRUFBZ0IsUUFBZG1zRCxFQUFFRCxFQUFFMlosYUFBcUIxWixFQUFFNHlCLE9BQU8vK0UsR0FBRzArRSxHQUFHeHlCLEVBQUVsc0QsRUFBRTFILEdBQUc0ekQsRUFBRUQsRUFBRW1hLGFBQWFsYSxFQUFFRCxFQUFFMWhDLE1BQU0sR0FBRyxPQUFPMmhDLEVBQUVBLEVBQUV2UCxPQUFPc1AsT0FBTyxJQUFJQyxFQUFFRCxFQUFFLE9BQU9DLEdBQUcsQ0FBQyxHQUFHQSxJQUFJNXpELEVBQUUsQ0FBQzR6RCxFQUFFLEtBQUssTUFBa0IsR0FBRyxRQUFmRCxFQUFFQyxFQUFFa2EsU0FBb0IsQ0FBQ25hLEVBQUV0UCxPQUFPdVAsRUFBRXZQLE9BQU91UCxFQUFFRCxFQUFFLE1BQU1DLEVBQUVBLEVBQUV2UCxPQUFPc1AsRUFBRUMsRUFBRW9oQyxHQUFHajFGLEVBQUVDLEVBQUUwSSxFQUFFcXBCLFNBQVNycUIsR0FBRzFILEVBQUVBLEVBQUVpeUIsTUFBTSxPQUFPanlCLEVBQzFmLEtBQUssRUFBRSxPQUFPMEksRUFBRTFJLEVBQUU2akIsS0FBS2xjLEVBQUUzSCxFQUFFZ3JGLGFBQWFqNUQsU0FBU3UwRCxHQUFHdG1GLEVBQUUwSCxHQUFXQyxFQUFFQSxFQUFWZSxFQUFFaStFLEdBQUdqK0UsSUFBVTFJLEVBQUV3dEUsT0FBTyxFQUFFd25CLEdBQUdqMUYsRUFBRUMsRUFBRTJILEVBQUVELEdBQUcxSCxFQUFFaXlCLE1BQU0sS0FBSyxHQUFHLE9BQWdCdnBCLEVBQUVrOUUsR0FBWGorRSxFQUFFM0gsRUFBRTZqQixLQUFZN2pCLEVBQUVnckYsY0FBNkJtSyxHQUFHcDFGLEVBQUVDLEVBQUUySCxFQUF0QmUsRUFBRWs5RSxHQUFHaitFLEVBQUVrYyxLQUFLbmIsR0FBY2hCLEdBQUcsS0FBSyxHQUFHLE9BQU8ydEYsR0FBR3QxRixFQUFFQyxFQUFFQSxFQUFFNmpCLEtBQUs3akIsRUFBRWdyRixhQUFhdGpGLEdBQUcsS0FBSyxHQUFHLE9BQU9DLEVBQUUzSCxFQUFFNmpCLEtBQUtuYixFQUFFMUksRUFBRWdyRixhQUFhdGlGLEVBQUUxSSxFQUFFNnFGLGNBQWNsakYsRUFBRWUsRUFBRWs5RSxHQUFHaitFLEVBQUVlLEdBQUcsT0FBTzNJLElBQUlBLEVBQUV3dEUsVUFBVSxLQUFLdnRFLEVBQUV1dEUsVUFBVSxLQUFLdnRFLEVBQUV3dEUsT0FBTyxHQUFHeHRFLEVBQUVra0UsSUFBSSxFQUFFNGdCLEdBQUduOUUsSUFBSTVILEdBQUUsRUFBR29sRixHQUFHbmxGLElBQUlELEdBQUUsRUFBR3VtRixHQUFHdG1GLEVBQUUwSCxHQUFHd2hGLEdBQUdscEYsRUFBRTJILEVBQUVlLEdBQUc2Z0YsR0FBR3ZwRixFQUFFMkgsRUFBRWUsRUFBRWhCLEdBQUdzdUYsR0FBRyxLQUFLaDJGLEVBQUUySCxHQUFFLEVBQUc1SCxFQUFFMkgsR0FBRyxLQUFLLEdBQUcsT0FBT3N2RixHQUFHajNGLEVBQUVDLEVBQUUwSCxHQUFHLEtBQUssR0FBRyxPQUFPNnRGLEdBQUd4MUYsRUFBRUMsRUFBRTBILEdBQUcsTUFBTWk4RCxNQUFNaitELEVBQUUsSUFDcGYxRixFQUFFa2tFLE9BV3NVLElBQUlnNkIsR0FBRyxtQkFBb0JDLFlBQVlBLFlBQVksU0FBU3ArRixHQUFHd3NDLFFBQVE2WCxNQUFNcmtELElBQUksU0FBU3ErRixHQUFHcitGLEdBQUdqRCxLQUFLdWhHLGNBQWN0K0YsRUFDaEksU0FBU3UrRixHQUFHditGLEdBQUdqRCxLQUFLdWhHLGNBQWN0K0YsRUFDM0osU0FBU3crRixHQUFHeCtGLEdBQUcsU0FBU0EsR0FBRyxJQUFJQSxFQUFFMG5FLFVBQVUsSUFBSTFuRSxFQUFFMG5FLFVBQVUsS0FBSzFuRSxFQUFFMG5FLFVBQVUsU0FBUysyQixHQUFHeitGLEdBQUcsU0FBU0EsR0FBRyxJQUFJQSxFQUFFMG5FLFVBQVUsSUFBSTFuRSxFQUFFMG5FLFVBQVUsS0FBSzFuRSxFQUFFMG5FLFdBQVcsSUFBSTFuRSxFQUFFMG5FLFVBQVUsaUNBQWlDMW5FLEVBQUUybkUsWUFBWSxTQUFTKzJCLE1BRW5hLFNBQVNDLEdBQUczK0YsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLEdBQUcsSUFBSWlyRCxFQUFFanNELEVBQUV3d0Ysb0JBQW9CLEdBQUd2a0MsRUFBRSxDQUFDLElBQUlDLEVBQUVELEVBQUUsR0FBRyxtQkFBb0JqckQsRUFBRSxDQUFDLElBQUltckQsRUFBRW5yRCxFQUFFQSxFQUFFLFdBQVcsSUFBSTNJLEVBQUU4OUYsR0FBR2pxQyxHQUFHQyxFQUFFdnRELEtBQUt2RyxJQUFJNjlGLEdBQUc1OUYsRUFBRTR6RCxFQUFFN3pELEVBQUUySSxRQUFRa3JELEVBRHhKLFNBQVk3ekQsRUFBRUMsRUFBRTBILEVBQUVDLEVBQUVlLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUcsbUJBQW9CZixFQUFFLENBQUMsSUFBSWdzRCxFQUFFaHNELEVBQUVBLEVBQUUsV0FBVyxJQUFJNUgsRUFBRTg5RixHQUFHanFDLEdBQUdELEVBQUVydEQsS0FBS3ZHLElBQUksSUFBSTZ6RCxFQUFFK3BDLEdBQUczOUYsRUFBRTJILEVBQUU1SCxFQUFFLEVBQUUsTUFBSyxFQUFHLEVBQUcsR0FBRzArRixJQUFtRixPQUEvRTErRixFQUFFbTRGLG9CQUFvQnRrQyxFQUFFN3pELEVBQUVnaUYsSUFBSW51QixFQUFFem1ELFFBQVFzMEUsR0FBRyxJQUFJMWhGLEVBQUUwbkUsU0FBUzFuRSxFQUFFOHJFLFdBQVc5ckUsR0FBR3E4RixLQUFZeG9DLEVBQUUsS0FBS2xyRCxFQUFFM0ksRUFBRXluRSxXQUFXem5FLEVBQUVvbkUsWUFBWXorRCxHQUFHLEdBQUcsbUJBQW9CZixFQUFFLENBQUMsSUFBSWtzRCxFQUFFbHNELEVBQUVBLEVBQUUsV0FBVyxJQUFJNUgsRUFBRTg5RixHQUFHNWlGLEdBQUc0NEMsRUFBRXZ0RCxLQUFLdkcsSUFBSSxJQUFJa2IsRUFBRXNpRixHQUFHeDlGLEVBQUUsR0FBRSxFQUFHLEtBQUssR0FBSyxFQUFHLEVBQUcsR0FBRzArRixJQUEwRyxPQUF0RzErRixFQUFFbTRGLG9CQUFvQmo5RSxFQUFFbGIsRUFBRWdpRixJQUFJOW1FLEVBQUU5TixRQUFRczBFLEdBQUcsSUFBSTFoRixFQUFFMG5FLFNBQVMxbkUsRUFBRThyRSxXQUFXOXJFLEdBQUdxOEYsSUFBRyxXQUFXd0IsR0FBRzU5RixFQUFFaWIsRUFBRXZULEVBQUVDLE1BQVlzVCxFQUNuVTBqRixDQUFHajNGLEVBQUUxSCxFQUFFRCxFQUFFMkksRUFBRWYsR0FBRyxPQUFPazJGLEdBQUdqcUMsR0FIbEwwcUMsR0FBRy8xRixVQUFVeVksT0FBT285RSxHQUFHNzFGLFVBQVV5WSxPQUFPLFNBQVNqaEIsR0FBRyxJQUFJQyxFQUFFbEQsS0FBS3VoRyxjQUFjLEdBQUcsT0FBT3IrRixFQUFFLE1BQU0yakUsTUFBTWorRCxFQUFFLE1BQU1rNEYsR0FBRzc5RixFQUFFQyxFQUFFLEtBQUssT0FBT3MrRixHQUFHLzFGLFVBQVVndUIsUUFBUTZuRSxHQUFHNzFGLFVBQVVndUIsUUFBUSxXQUFXLElBQUl4MkIsRUFBRWpELEtBQUt1aEcsY0FBYyxHQUFHLE9BQU90K0YsRUFBRSxDQUFDakQsS0FBS3VoRyxjQUFjLEtBQUssSUFBSXIrRixFQUFFRCxFQUFFMnlFLGNBQWMwcEIsSUFBRyxXQUFXd0IsR0FBRyxLQUFLNzlGLEVBQUUsS0FBSyxTQUFRQyxFQUFFK2hGLElBQUksT0FDcFR1YyxHQUFHLzFGLFVBQVVxMkYsMkJBQTJCLFNBQVM3K0YsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSUMsRUFBRW94RSxLQUFLcnhFLEVBQUUsQ0FBQ215RSxVQUFVLEtBQUtobkUsT0FBT25MLEVBQUV5eUUsU0FBU3h5RSxHQUFHLElBQUksSUFBSTBILEVBQUUsRUFBRUEsRUFBRW1xRSxHQUFHNXRFLFFBQVEsSUFBSWpFLEdBQUdBLEVBQUU2eEUsR0FBR25xRSxHQUFHOHFFLFNBQVM5cUUsS0FBS21xRSxHQUFHbnpFLE9BQU9nSixFQUFFLEVBQUUzSCxHQUFHLElBQUkySCxHQUFHNHFFLEdBQUd2eUUsS0FFUmt4RSxHQUFHLFNBQVNseEUsR0FBRyxPQUFPQSxFQUFFbWtFLEtBQUssS0FBSyxFQUFFLElBQUlsa0UsRUFBRUQsRUFBRW9zRSxVQUFVLEdBQUduc0UsRUFBRW1OLFFBQVF1Z0UsY0FBYytFLGFBQWEsQ0FBQyxJQUFJL3FFLEVBQUV1b0UsR0FBR2p3RSxFQUFFbXdFLGNBQWMsSUFBSXpvRSxJQUFJb3BFLEdBQUc5d0UsRUFBSSxFQUFGMEgsR0FBS216RixHQUFHNzZGLEVBQUV5dUUsTUFBSyxJQUFPLEVBQUZrckIsTUFBT2xGLEdBQUdobUIsS0FBSSxJQUFJaVgsT0FBTyxNQUFNLEtBQUssR0FBRyxJQUFJLzlFLEVBQUUrZ0YsS0FBSzBULElBQUcsV0FBVyxPQUFPeFQsR0FBRzdvRixFQUFFLEVBQUU0SCxNQUFLbzJGLEdBQUdoK0YsRUFBRSxLQUFLbXhFLEdBQUcsU0FBU254RSxHQUFNLEtBQUtBLEVBQUVta0UsTUFBZ0Iwa0IsR0FBRzdvRixFQUFFLFVBQVYyb0YsTUFBdUJxVixHQUFHaCtGLEVBQUUsYUFDM2VveEUsR0FBRyxTQUFTcHhFLEdBQUcsR0FBRyxLQUFLQSxFQUFFbWtFLElBQUksQ0FBQyxJQUFJbGtFLEVBQUUwb0YsS0FBS2hoRixFQUFFaWhGLEdBQUc1b0YsR0FBRzZvRixHQUFHN29GLEVBQUUySCxFQUFFMUgsR0FBRys5RixHQUFHaCtGLEVBQUUySCxLQUFLMHBFLEdBQUcsV0FBVyxPQUFPTCxJQUFHTSxHQUFHLFNBQVN0eEUsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRXFwRSxHQUFFLElBQUksT0FBT0EsR0FBRWh4RSxFQUFFQyxJQUFJLFFBQVErd0UsR0FBRXJwRSxJQUNuSm9rRSxHQUFHLFNBQVMvckUsRUFBRUMsRUFBRTBILEdBQUcsT0FBTzFILEdBQUcsSUFBSyxRQUF5QixHQUFqQjRsRSxFQUFHN2xFLEVBQUUySCxHQUFHMUgsRUFBRTBILEVBQUUvSCxLQUFRLFVBQVUrSCxFQUFFbWMsTUFBTSxNQUFNN2pCLEVBQUUsQ0FBQyxJQUFJMEgsRUFBRTNILEVBQUUySCxFQUFFbWtFLFlBQVlua0UsRUFBRUEsRUFBRW1rRSxXQUFzRixJQUEzRW5rRSxFQUFFQSxFQUFFOEQsaUJBQWlCLGNBQWNtZ0MsS0FBS0MsVUFBVSxHQUFHNXJDLEdBQUcsbUJBQXVCQSxFQUFFLEVBQUVBLEVBQUUwSCxFQUFFekQsT0FBT2pFLElBQUksQ0FBQyxJQUFJMkgsRUFBRUQsRUFBRTFILEdBQUcsR0FBRzJILElBQUk1SCxHQUFHNEgsRUFBRWszRixPQUFPOStGLEVBQUU4K0YsS0FBSyxDQUFDLElBQUluMkYsRUFBRTBqRSxHQUFHemtFLEdBQUcsSUFBSWUsRUFBRSxNQUFNaTdELE1BQU1qK0QsRUFBRSxLQUFLdS9ELEVBQUd0OUQsR0FBR2krRCxFQUFHaitELEVBQUVlLEtBQUssTUFBTSxJQUFLLFdBQVc2OUQsR0FBR3htRSxFQUFFMkgsR0FBRyxNQUFNLElBQUssU0FBbUIsT0FBVjFILEVBQUUwSCxFQUFFdEcsUUFBZTRrRSxHQUFHam1FLElBQUkySCxFQUFFcXNGLFNBQVMvekYsR0FBRSxLQUFNdXNFLEdBQUc0dkIsR0FBRzN2QixHQUFHNHZCLEdBQ3BhLElBQUkwQyxHQUFHLENBQUNDLHVCQUFzQixFQUFHQyxPQUFPLENBQUM5eUIsR0FBR3VRLEdBQUdyUSxHQUFHQyxHQUFHQyxHQUFHNnZCLEtBQUs4QyxHQUFHLENBQUNDLHdCQUF3QjNzQixHQUFHNHNCLFdBQVcsRUFBRTMrRSxRQUFRLFNBQVM0K0Usb0JBQW9CLGFBQzFJQyxHQUFHLENBQUNGLFdBQVdGLEdBQUdFLFdBQVczK0UsUUFBUXkrRSxHQUFHeitFLFFBQVE0K0Usb0JBQW9CSCxHQUFHRyxvQkFBb0JFLGVBQWVMLEdBQUdLLGVBQWVDLGtCQUFrQixLQUFLQyw0QkFBNEIsS0FBS0MsNEJBQTRCLEtBQUtDLGNBQWMsS0FBS0Msd0JBQXdCLEtBQUtDLHdCQUF3QixLQUFLQyxnQkFBZ0IsS0FBS0MsbUJBQW1CLEtBQUtDLGVBQWUsS0FBS0MscUJBQXFCeDlCLEVBQUdpckIsdUJBQXVCd1Msd0JBQXdCLFNBQVNsZ0csR0FBVyxPQUFPLFFBQWZBLEVBQUU4dEUsR0FBRzl0RSxJQUFtQixLQUFLQSxFQUFFb3NFLFdBQVcreUIsd0JBQXdCRCxHQUFHQyx5QkFSak4sV0FBYyxPQUFPLE1BU2hVZ0IsNEJBQTRCLEtBQUtDLGdCQUFnQixLQUFLQyxhQUFhLEtBQUtDLGtCQUFrQixLQUFLQyxnQkFBZ0IsS0FBS0Msa0JBQWtCLGtDQUFrQyxHQUFHLG9CQUFxQkMsK0JBQStCLENBQUMsSUFBSUMsR0FBR0QsK0JBQStCLElBQUlDLEdBQUdDLFlBQVlELEdBQUdFLGNBQWMsSUFBSXB4QixHQUFHa3hCLEdBQUdHLE9BQU92QixJQUFJN3ZCLEdBQUdpeEIsR0FBRyxNQUFNMWdHLE1BQUtxYSxFQUFRcW9ELG1EQUFtRHE4QixHQUM5WTFrRixFQUFReW1GLGFBQWEsU0FBUzlnRyxFQUFFQyxHQUFHLElBQUkwSCxFQUFFLEVBQUU2c0IsVUFBVXR3QixhQUFRLElBQVNzd0IsVUFBVSxHQUFHQSxVQUFVLEdBQUcsS0FBSyxJQUFJZ3FFLEdBQUd2K0YsR0FBRyxNQUFNMmpFLE1BQU1qK0QsRUFBRSxNQUFNLE9BQU8rM0YsR0FBRzE5RixFQUFFQyxFQUFFLEtBQUswSCxJQUFJMFMsRUFBUTBtRixXQUFXLFNBQVMvZ0csRUFBRUMsR0FBRyxJQUFJdStGLEdBQUd4K0YsR0FBRyxNQUFNNGpFLE1BQU1qK0QsRUFBRSxNQUFNLElBQUlnQyxHQUFFLEVBQUdDLEVBQUUsR0FBR2UsRUFBRXcxRixHQUE0UCxPQUF6UCxNQUFPbCtGLEtBQWdCLElBQUtBLEVBQUUrZ0csc0JBQXNCcjVGLEdBQUUsUUFBSSxJQUFTMUgsRUFBRW15RixtQkFBbUJ4cUYsRUFBRTNILEVBQUVteUYsdUJBQWtCLElBQVNueUYsRUFBRTY4RixxQkFBcUJuMEYsRUFBRTFJLEVBQUU2OEYscUJBQXFCNzhGLEVBQUV1OUYsR0FBR3g5RixFQUFFLEdBQUUsRUFBRyxLQUFLLEVBQUsySCxFQUFFLEVBQUdDLEVBQUVlLEdBQUczSSxFQUFFZ2lGLElBQUkvaEYsRUFBRW1OLFFBQVFzMEUsR0FBRyxJQUFJMWhGLEVBQUUwbkUsU0FBUzFuRSxFQUFFOHJFLFdBQVc5ckUsR0FBVSxJQUFJcStGLEdBQUdwK0YsSUFDbmZvYSxFQUFRNG1GLFlBQVksU0FBU2poRyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxJQUFJQSxFQUFFMG5FLFNBQVMsT0FBTzFuRSxFQUFFLElBQUlDLEVBQUVELEVBQUV5b0YsZ0JBQWdCLFFBQUcsSUFBU3hvRixFQUFFLENBQUMsR0FBRyxtQkFBb0JELEVBQUVpaEIsT0FBTyxNQUFNMmlELE1BQU1qK0QsRUFBRSxNQUFpQyxNQUEzQjNGLEVBQUVvSSxPQUFPdVAsS0FBSzNYLEdBQUc2ZixLQUFLLEtBQVcrakQsTUFBTWorRCxFQUFFLElBQUkzRixJQUF5QyxPQUExQixRQUFWQSxFQUFFOHRFLEdBQUc3dEUsSUFBYyxLQUFLRCxFQUFFb3NFLFdBQW9CL3hELEVBQVF3ZCxVQUFVLFNBQVM3M0IsR0FBRyxPQUFPcThGLEdBQUdyOEYsSUFBSXFhLEVBQVE2bUYsUUFBUSxTQUFTbGhHLEVBQUVDLEVBQUUwSCxHQUFHLElBQUk4MkYsR0FBR3grRixHQUFHLE1BQU0yakUsTUFBTWorRCxFQUFFLE1BQU0sT0FBT2c1RixHQUFHLEtBQUszK0YsRUFBRUMsR0FBRSxFQUFHMEgsSUFDN1kwUyxFQUFROG1GLFlBQVksU0FBU25oRyxFQUFFQyxFQUFFMEgsR0FBRyxJQUFJNjJGLEdBQUd4K0YsR0FBRyxNQUFNNGpFLE1BQU1qK0QsRUFBRSxNQUFNLElBQUlpQyxFQUFFLE1BQU1ELEdBQUdBLEVBQUV5NUYsaUJBQWlCLEtBQUt6NEYsR0FBRSxFQUFHaXJELEVBQUUsR0FBR0MsRUFBRXNxQyxHQUF5TyxHQUF0TyxNQUFPeDJGLEtBQWdCLElBQUtBLEVBQUVxNUYsc0JBQXNCcjRGLEdBQUUsUUFBSSxJQUFTaEIsRUFBRXlxRixtQkFBbUJ4K0IsRUFBRWpzRCxFQUFFeXFGLHVCQUFrQixJQUFTenFGLEVBQUVtMUYscUJBQXFCanBDLEVBQUVsc0QsRUFBRW0xRixxQkFBcUI3OEYsRUFBRTI5RixHQUFHMzlGLEVBQUUsS0FBS0QsRUFBRSxFQUFFLE1BQU0ySCxFQUFFQSxFQUFFLEtBQUtnQixFQUFFLEVBQUdpckQsRUFBRUMsR0FBRzd6RCxFQUFFZ2lGLElBQUkvaEYsRUFBRW1OLFFBQVFzMEUsR0FBRzFoRixHQUFNNEgsRUFBRSxJQUFJNUgsRUFBRSxFQUFFQSxFQUFFNEgsRUFBRTFELE9BQU9sRSxJQUEyQjJJLEdBQWhCQSxHQUFQaEIsRUFBRUMsRUFBRTVILElBQU9xaEcsYUFBZ0IxNUYsRUFBRTI1RixTQUFTLE1BQU1yaEcsRUFBRXM5RixnQ0FBZ0N0OUYsRUFBRXM5RixnQ0FBZ0MsQ0FBQzUxRixFQUFFZ0IsR0FBRzFJLEVBQUVzOUYsZ0NBQWdDaC9GLEtBQUtvSixFQUN2aEJnQixHQUFHLE9BQU8sSUFBSTQxRixHQUFHdCtGLElBQUlvYSxFQUFRNEcsT0FBTyxTQUFTamhCLEVBQUVDLEVBQUUwSCxHQUFHLElBQUk4MkYsR0FBR3grRixHQUFHLE1BQU0yakUsTUFBTWorRCxFQUFFLE1BQU0sT0FBT2c1RixHQUFHLEtBQUszK0YsRUFBRUMsR0FBRSxFQUFHMEgsSUFBSTBTLEVBQVFrbkYsdUJBQXVCLFNBQVN2aEcsR0FBRyxJQUFJeStGLEdBQUd6K0YsR0FBRyxNQUFNNGpFLE1BQU1qK0QsRUFBRSxLQUFLLFFBQU8zRixFQUFFbTRGLHNCQUFxQmtFLElBQUcsV0FBV3NDLEdBQUcsS0FBSyxLQUFLMytGLEdBQUUsR0FBRyxXQUFXQSxFQUFFbTRGLG9CQUFvQixLQUFLbjRGLEVBQUVnaUYsSUFBSSxZQUFTLElBQVEzbkUsRUFBUW1uRix3QkFBd0JwRixHQUMvVS9oRixFQUFRb25GLG9DQUFvQyxTQUFTemhHLEVBQUVDLEVBQUUwSCxFQUFFQyxHQUFHLElBQUk2MkYsR0FBRzkyRixHQUFHLE1BQU1pOEQsTUFBTWorRCxFQUFFLE1BQU0sR0FBRyxNQUFNM0YsUUFBRyxJQUFTQSxFQUFFeW9GLGdCQUFnQixNQUFNN2tCLE1BQU1qK0QsRUFBRSxLQUFLLE9BQU9nNUYsR0FBRzMrRixFQUFFQyxFQUFFMEgsR0FBRSxFQUFHQyxJQUFJeVMsRUFBUW9HLFFBQVEsOERDL1Q3TCxTQUFTaWhGLElBRVAsR0FDNEMsb0JBQW5DakIsZ0NBQzRDLG1CQUE1Q0EsK0JBQStCaUIsU0FjeEMsSUFFRWpCLCtCQUErQmlCLFNBQVNBLEdBQ3hDLE1BQU9DLEdBR1BuMUQsUUFBUTZYLE1BQU1zOUMsSUFPaEJELEdBQ0F6dUMsRUFBTzU0QyxRQUFVLEVBQWpCLG1DQ3pCdWM4NUMsRUFBeGJsMEQsRUFBRXl6RCxPQUFPQyxJQUFJLGlCQUFpQmhzRCxFQUFFK3JELE9BQU9DLElBQUksZ0JBQWdCL3JELEVBQUU4ckQsT0FBT0MsSUFBSSxrQkFBa0JockQsRUFBRStxRCxPQUFPQyxJQUFJLHFCQUFxQkMsRUFBRUYsT0FBT0MsSUFBSSxrQkFBa0JFLEVBQUVILE9BQU9DLElBQUksa0JBQWtCRyxFQUFFSixPQUFPQyxJQUFJLGlCQUFpQno0QyxFQUFFdzRDLE9BQU9DLElBQUksd0JBQXdCSSxFQUFFTCxPQUFPQyxJQUFJLHFCQUFxQnBRLEVBQUVtUSxPQUFPQyxJQUFJLGtCQUFrQjM0QyxFQUFFMDRDLE9BQU9DLElBQUksdUJBQXVCaHVELEVBQUUrdEQsT0FBT0MsSUFBSSxjQUFjSyxFQUFFTixPQUFPQyxJQUFJLGNBQWM5eEQsRUFBRTZ4RCxPQUFPQyxJQUFJLG1CQUFxQlEsRUFBRVQsT0FBT0MsSUFBSSwwQkFJeGR0NUMsRUFBUXM3QyxtQkFBbUIsU0FBUzMxRCxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLG1CQUFvQkEsR0FBR0EsSUFBSTRILEdBQUc1SCxJQUFJNHpELEdBQUc1ekQsSUFBSTJJLEdBQUczSSxJQUFJdWpELEdBQUd2akQsSUFBSWdiLEdBQUdoYixJQUFJNkIsR0FBRyxpQkFBa0I3QixHQUFHLE9BQU9BLElBQUlBLEVBQUVvMEQsV0FBV0osR0FBR2gwRCxFQUFFbzBELFdBQVd6dUQsR0FBRzNGLEVBQUVvMEQsV0FBV1AsR0FBRzd6RCxFQUFFbzBELFdBQVdOLEdBQUc5ekQsRUFBRW8wRCxXQUFXTCxHQUFHL3pELEVBQUVvMEQsV0FBV0QsUUFBRyxJQUFTbjBELEVBQUU0aEcsY0FBb0J2bkYsRUFBUXU3QyxPQUgxUyxTQUFXNTFELEdBQUcsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLElBQUlpMEQsRUFBRWowRCxFQUFFbzBELFNBQVMsT0FBT0gsR0FBRyxLQUFLaDBELEVBQUUsT0FBT0QsRUFBRUEsRUFBRThqQixNQUFRLEtBQUtsYyxFQUFFLEtBQUtnc0QsRUFBRSxLQUFLanJELEVBQUUsS0FBSzQ2QyxFQUFFLEtBQUt2b0MsRUFBRSxPQUFPaGIsRUFBRSxRQUFRLE9BQU9BLEVBQUVBLEdBQUdBLEVBQUVvMEQsVUFBWSxLQUFLbDVDLEVBQUUsS0FBSzQ0QyxFQUFFLEtBQUtDLEVBQUUsS0FBS0MsRUFBRSxLQUFLcnVELEVBQUUsS0FBS2t1RCxFQUFFLE9BQU83ekQsRUFBRSxRQUFRLE9BQU9pMEQsR0FBRyxLQUFLdHNELEVBQUUsT0FBT3NzRCxpQ0NQcFFoQixFQUFPNTRDLFFBQVUsRUFBakIsMndCQ0lFd25GLFdDUFcsU0FBU0MsSUFldEIsT0FkQUEsRUFBVzE1RixPQUFPZ0QsUUFBVSxTQUFVRCxHQUNwQyxJQUFLLElBQUkxSSxFQUFJLEVBQUdBLEVBQUkreEIsVUFBVXR3QixPQUFRekIsSUFBSyxDQUN6QyxJQUFJNnFCLEVBQVNrSCxVQUFVL3hCLEdBRXZCLElBQUssSUFBSXFHLEtBQU93a0IsRUFDVmxsQixPQUFPSSxVQUFVSCxlQUFlOUIsS0FBSyttQixFQUFReGtCLEtBQy9DcUMsRUFBT3JDLEdBQU93a0IsRUFBT3hrQixJQUszQixPQUFPcUMsR0FHRjIyRixFQUFTcHRFLE1BQU0zM0IsS0FBTXkzQixZRE45QixTQUFXcXRFLEdBUVRBLEVBQVksSUFBSSxNQU9oQkEsRUFBYSxLQUFJLE9BTWpCQSxFQUFnQixRQUFJLFVBckJ0QixDQXNCR0EsSUFBV0EsRUFBUyxLQUV2QixJQXNCSUUsRUFBd0IsZUFFeEJDLEVBQW9CLFdBMm9CeEIsU0FBU2hvRCxFQUFNaC9CLEVBQUczWSxFQUFZQyxHQUM1QixPQUFPSSxLQUFLZ0IsSUFBSWhCLEtBQUtpQixJQUFJcVgsRUFBRzNZLEdBQWFDLEdBRzNDLFNBQVMyL0YsRUFBbUJqc0YsR0FFMUJBLEVBQU04K0QsaUJBRU45K0QsRUFBTTQrRCxZQUFjLEdBR3RCLFNBQVNzdEIsSUFDUCxJQUFJcHVELEVBQVcsR0FDZixNQUFPLENBQ0Q1dkMsYUFDRixPQUFPNHZDLEVBQVM1dkMsUUFHbEIzRixLQUFNLFNBQWM0akcsR0FFbEIsT0FEQXJ1RCxFQUFTdjFDLEtBQUs0akcsR0FDUCxXQUNMcnVELEVBQVdBLEVBQVM5bkMsUUFBTyxTQUFVbVUsR0FDbkMsT0FBT0EsSUFBWWdpRixPQUl6QjU3RixLQUFNLFNBQWNtcEQsR0FDbEI1YixFQUFTajBDLFNBQVEsU0FBVXNpRyxHQUN6QixPQUFPQSxHQUFNQSxFQUFHenlDLFFBTXhCLFNBQVMweUMsSUFDUCxPQUFPMS9GLEtBQUsrK0UsU0FBU3ZhLFNBQVMsSUFBSW03QixPQUFPLEVBQUcsR0FTOUMsU0FBU0MsRUFBV0MsR0FDbEIsSUFBSUMsRUFBZ0JELEVBQUtFLFNBQ3JCQSxPQUE2QixJQUFsQkQsRUFBMkIsSUFBTUEsRUFDNUNFLEVBQWNILEVBQUszbUIsT0FDbkJBLE9BQXlCLElBQWhCOG1CLEVBQXlCLEdBQUtBLEVBQ3ZDQyxFQUFZSixFQUFLSyxLQUNqQkEsT0FBcUIsSUFBZEQsRUFBdUIsR0FBS0EsRUFHdkMsT0FGSS9tQixHQUFxQixNQUFYQSxJQUFnQjZtQixHQUFpQyxNQUFyQjdtQixFQUFPdFIsT0FBTyxHQUFhc1IsRUFBUyxJQUFNQSxHQUNoRmduQixHQUFpQixNQUFUQSxJQUFjSCxHQUErQixNQUFuQkcsRUFBS3Q0QixPQUFPLEdBQWFzNEIsRUFBTyxJQUFNQSxHQUNyRUgsRUFRVCxTQUFTSSxFQUFVenVFLEdBQ2pCLElBQUkwdUUsRUFBYSxHQUVqQixHQUFJMXVFLEVBQU0sQ0FDUixJQUFJMnVFLEVBQVkzdUUsRUFBSzkxQixRQUFRLEtBRXpCeWtHLEdBQWEsSUFDZkQsRUFBV0YsS0FBT3h1RSxFQUFLaXVFLE9BQU9VLEdBQzlCM3VFLEVBQU9BLEVBQUtpdUUsT0FBTyxFQUFHVSxJQUd4QixJQUFJQyxFQUFjNXVFLEVBQUs5MUIsUUFBUSxLQUUzQjBrRyxHQUFlLElBQ2pCRixFQUFXbG5CLE9BQVN4bkQsRUFBS2l1RSxPQUFPVyxHQUNoQzV1RSxFQUFPQSxFQUFLaXVFLE9BQU8sRUFBR1csSUFHcEI1dUUsSUFDRjB1RSxFQUFXTCxTQUFXcnVFLEdBSTFCLE9BQU8wdUUsRUUxd0JULE1BQU1HLEdBQWlDLElBQUFybUYsZUFBYyxNQU0vQ3NtRixHQUErQixJQUFBdG1GLGVBQWMsTUFNN0N1bUYsR0FBNEIsSUFBQXZtRixlQUFjLENBQzlDd21GLE9BQVEsS0FDUmpsRixRQUFTLEtBT1gsU0FBU2xQLEVBQVVvMEYsRUFBTTkyRCxHQUN2QixJQUFLODJELEVBQU0sTUFBTSxJQUFJei9CLE1BQU1yM0IsR0E4QjdCLFNBQVMrMkQsRUFBYWx2RSxFQUFNbXZFLEdBSzFCLFlBSmUsSUFBWEEsSUFDRkEsRUFBUyxJQUdKbnZFLEVBQUtqYSxRQUFRLFdBQVcsQ0FBQ29xQyxFQUFHejdDLEtBQ2hCLE1BQWZ5NkYsRUFBT3o2RixJQUE2R21HLEdBQVUsR0FDekhzMEYsRUFBT3o2RixNQUNicVIsUUFBUSxVQUFVb3FDLEdBQW9CLE1BQWZnL0MsRUFBTyxLQUFlLEdBQUtBLEVBQU8sS0FBS3BwRixRQUFRLE9BQVEsT0FXbkYsU0FBU3FwRixFQUFZQyxFQUFRQyxFQUFhQyxRQUN2QixJQUFiQSxJQUNGQSxFQUFXLEtBR2IsSUFDSWxCLEVBQVdtQixHQUR1QixpQkFBaEJGLEVBQTJCYixFQUFVYSxHQUFlQSxHQUNwQ2pCLFVBQVksSUFBS2tCLEdBRXZELEdBQWdCLE1BQVpsQixFQUNGLE9BQU8sS0FHVCxJQUFJb0IsRUFBV0MsRUFBY0wsSUE4RC9CLFNBQTJCSSxHQUN6QkEsRUFBU3ZqRyxNQUFLLENBQUNOLEVBQUdDLElBQU1ELEVBQUUrakcsUUFBVTlqRyxFQUFFOGpHLE1BQVE5akcsRUFBRThqRyxNQUFRL2pHLEVBQUUrakcsTUE0QjVELFNBQXdCL2pHLEVBQUdDLEdBRXpCLE9BRGVELEVBQUVrRSxTQUFXakUsRUFBRWlFLFFBQVVsRSxFQUFFb21ELE1BQU0sR0FBSSxHQUFHbjBDLE9BQU0sQ0FBQytJLEVBQUd2WSxJQUFNdVksSUFBTS9hLEVBQUV3QyxLQUsvRXpDLEVBQUVBLEVBQUVrRSxPQUFTLEdBQUtqRSxFQUFFQSxFQUFFaUUsT0FBUyxHQUUvQixFQW5DRTgvRixDQUFlaGtHLEVBQUVpa0csV0FBV24rRixLQUFJcWxFLEdBQVFBLEVBQUsrNEIsZ0JBQWdCamtHLEVBQUVna0csV0FBV24rRixLQUFJcWxFLEdBQVFBLEVBQUsrNEIsbUJBL0Q3RkMsQ0FBa0JOLEdBQ2xCLElBQUkxbEYsRUFBVSxLQUVkLElBQUssSUFBSTFiLEVBQUksRUFBYyxNQUFYMGIsR0FBbUIxYixFQUFJb2hHLEVBQVMzL0YsU0FBVXpCLEVBQ3hEMGIsRUFBVWltRixFQUFpQlAsRUFBU3BoRyxHQUFJZ2dHLEdBRzFDLE9BQU90a0YsRUFHVCxTQUFTMmxGLEVBQWNMLEVBQVFJLEVBQVVRLEVBQWFDLEdBZ0RwRCxZQS9DaUIsSUFBYlQsSUFDRkEsRUFBVyxTQUdPLElBQWhCUSxJQUNGQSxFQUFjLFNBR0csSUFBZkMsSUFDRkEsRUFBYSxJQUdmYixFQUFPNWpHLFNBQVEsQ0FBQzBrRyxFQUFPN2xHLEtBQ3JCLElBQUl5c0UsRUFBTyxDQUNUcTVCLGFBQWNELEVBQU1ud0UsTUFBUSxHQUM1QnF3RSxlQUF1QyxJQUF4QkYsRUFBTUUsY0FDckJQLGNBQWV4bEcsRUFDZjZsRyxNQUFBQSxHQUdFcDVCLEVBQUtxNUIsYUFBYTVqRyxXQUFXLE9BQzlCdXFFLEVBQUtxNUIsYUFBYTVqRyxXQUFXMGpHLElBQTBScjFGLEdBQVUsR0FDbFVrOEQsRUFBS3E1QixhQUFlcjVCLEVBQUtxNUIsYUFBYXArQyxNQUFNaytDLEVBQVdwZ0csU0FHekQsSUFBSWt3QixFQUFPc3dFLEVBQVUsQ0FBQ0osRUFBWW41QixFQUFLcTVCLGVBQ25DUCxFQUFhSSxFQUFZN2dGLE9BQU8ybkQsR0FJaENvNUIsRUFBTXZ5RSxVQUFZdXlFLEVBQU12eUUsU0FBUzl0QixPQUFTLEtBQzFCLElBQWhCcWdHLEVBQU03bEcsT0FBaU11USxHQUFVLEdBQ25ONjBGLEVBQWNTLEVBQU12eUUsU0FBVTZ4RSxFQUFVSSxFQUFZN3ZFLEtBS3BDLE1BQWRtd0UsRUFBTW53RSxNQUFpQm13RSxFQUFNN2xHLFFBSWpDbWxHLEVBQVN0bEcsS0FBSyxDQUNaNjFCLEtBQUFBLEVBQ0EydkUsTUFBT1ksRUFBYXZ3RSxFQUFNbXdFLEVBQU03bEcsT0FDaEN1bEcsV0FBQUEsT0FHR0osRUFRVCxNQUFNZSxFQUFVLFNBT1ZDLEVBQVVDLEdBQVcsTUFBTkEsRUFFckIsU0FBU0gsRUFBYXZ3RSxFQUFNMTFCLEdBQzFCLElBQUlxbUcsRUFBVzN3RSxFQUFLL3dCLE1BQU0sS0FDdEIyaEcsRUFBZUQsRUFBUzdnRyxPQVU1QixPQVJJNmdHLEVBQVNocEYsS0FBSzhvRixLQUNoQkcsSUFUaUIsR0FZZnRtRyxJQUNGc21HLEdBaEJvQixHQW1CZkQsRUFBUy80RixRQUFPODRGLElBQU1ELEVBQVFDLEtBQUl2a0csUUFBTyxDQUFDd2pHLEVBQU92MUYsSUFBWXUxRixHQUFTYSxFQUFRamhGLEtBQUtuVixHQXBCaEUsRUFvQjZHLEtBQVpBLEVBbEJuRyxFQUNDLEtBaUI0SncyRixHQWN2TCxTQUFTWixFQUFpQmEsRUFBUXhDLEdBQ2hDLElBQUksV0FDRndCLEdBQ0VnQixFQUNBQyxFQUFnQixHQUNoQkMsRUFBa0IsSUFDbEJobkYsRUFBVSxHQUVkLElBQUssSUFBSTFiLEVBQUksRUFBR0EsRUFBSXdoRyxFQUFXLy9GLFNBQVV6QixFQUFHLENBQzFDLElBQUkwb0UsRUFBTzg0QixFQUFXeGhHLEdBQ2xCbXlDLEVBQU1ueUMsSUFBTXdoRyxFQUFXLy9GLE9BQVMsRUFDaENraEcsRUFBd0MsTUFBcEJELEVBQTBCMUMsRUFBV0EsRUFBU3I4QyxNQUFNKytDLEVBQWdCamhHLFNBQVcsSUFDbkcwNUMsRUFBUXluRCxFQUFVLENBQ3BCanhFLEtBQU0rMkMsRUFBS3E1QixhQUNYQyxjQUFldDVCLEVBQUtzNUIsY0FDcEI3dkQsSUFBQUEsR0FDQ3d3RCxHQUNILElBQUt4bkQsRUFBTyxPQUFPLEtBQ25CeDFDLE9BQU9nRCxPQUFPODVGLEVBQWV0bkQsRUFBTTJsRCxRQUNuQyxJQUFJZ0IsRUFBUXA1QixFQUFLbzVCLE1BQ2pCcG1GLEVBQVE1ZixLQUFLLENBQ1hnbEcsT0FBUTJCLEVBQ1J6QyxTQUFVaUMsRUFBVSxDQUFDUyxFQUFpQnZuRCxFQUFNNmtELFdBQzVDNkMsYUFBY0MsRUFBa0JiLEVBQVUsQ0FBQ1MsRUFBaUJ2bkQsRUFBTTBuRCxnQkFDbEVmLE1BQUFBLElBR3lCLE1BQXZCM21ELEVBQU0wbkQsZUFDUkgsRUFBa0JULEVBQVUsQ0FBQ1MsRUFBaUJ2bkQsRUFBTTBuRCxnQkFJeEQsT0FBT25uRixFQWFULFNBQVNrbkYsRUFBVUcsRUFBUy9DLEdBQ0gsaUJBQVorQyxJQUNUQSxFQUFVLENBQ1JweEUsS0FBTW94RSxFQUNOZixlQUFlLEVBQ2Y3dkQsS0FBSyxJQUlULElBQUs2d0QsRUFBU0MsR0F5QmhCLFNBQXFCdHhFLEVBQU1xd0UsRUFBZTd2RCxRQUNsQixJQUFsQjZ2RCxJQUNGQSxHQUFnQixRQUdOLElBQVI3dkQsSUFDRkEsR0FBTSxHQUlSLElBQUk4d0QsRUFBYSxHQUNiQyxFQUFlLElBQU12eEUsRUFBS2phLFFBQVEsVUFBVyxJQUNoREEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLHNCQUF1QixRQUMvQkEsUUFBUSxXQUFXLENBQUNvcUMsRUFBR3FoRCxLQUN0QkYsRUFBV25uRyxLQUFLcW5HLEdBQ1QsZUFtQlQsT0FoQkl4eEUsRUFBS3l4RSxTQUFTLE1BQ2hCSCxFQUFXbm5HLEtBQUssS0FDaEJvbkcsR0FBeUIsTUFBVHZ4RSxHQUF5QixPQUFUQSxFQUFnQixRQUM5QyxxQkFFRnV4RSxHQUFnQi93RCxFQUFNLFFBT3RCLHVDQUlLLENBRE8sSUFBSWt4RCxPQUFPSCxFQUFjbEIsT0FBZ0JwbkcsRUFBWSxLQUNsRHFvRyxHQTVEV0ssQ0FBWVAsRUFBUXB4RSxLQUFNb3hFLEVBQVFmLGNBQWVlLEVBQVE1d0QsS0FDakZnSixFQUFRNmtELEVBQVM3a0QsTUFBTTZuRCxHQUMzQixJQUFLN25ELEVBQU8sT0FBTyxLQUNuQixJQUFJdW5ELEVBQWtCdm5ELEVBQU0sR0FDeEIwbkQsRUFBZUgsRUFBZ0JockYsUUFBUSxVQUFXLE1BQ2xENnJGLEVBQWdCcG9ELEVBQU13SSxNQUFNLEdBWWhDLE1BQU8sQ0FDTG05QyxPQVpXbUMsRUFBV25sRyxRQUFPLENBQUMwbEcsRUFBTUwsRUFBV2xuRyxLQUcvQyxHQUFrQixNQUFka25HLEVBQW1CLENBQ3JCLElBQUlNLEVBQWFGLEVBQWN0bkcsSUFBVSxHQUN6QzRtRyxFQUFlSCxFQUFnQi8rQyxNQUFNLEVBQUcrK0MsRUFBZ0JqaEcsT0FBU2dpRyxFQUFXaGlHLFFBQVFpVyxRQUFRLFVBQVcsTUFJekcsT0FEQThyRixFQUFLTCxHQWlEVCxTQUFrQ3ZrRyxFQUFPdWtHLEdBQ3ZDLElBQ0UsT0FBT08sbUJBQW1COWtHLEdBQzFCLE1BQU9nakQsR0FFUCxPQUFPaGpELEdBdERXK2tHLENBQXlCSixFQUFjdG5HLElBQVUsSUFDNUR1bkcsSUFDTixJQUdEeEQsU0FBVTBDLEVBQ1ZHLGFBQUFBLEVBQ0FFLFFBQUFBLEdBeURKLFNBQVNhLEVBQVlyMkYsRUFBSXMyRixRQUNGLElBQWpCQSxJQUNGQSxFQUFlLEtBR2pCLElBQ0U3RCxTQUFVOEQsRUFBVSxPQUNwQjNxQixFQUFTLEdBQUUsS0FDWGduQixFQUFPLElBQ1MsaUJBQVA1eUYsRUFBa0I2eUYsRUFBVTd5RixHQUFNQSxFQUN6Q3l5RixFQUFXOEQsRUFBYUEsRUFBVzNsRyxXQUFXLEtBQU8ybEcsRUFRM0QsU0FBeUIvQixFQUFjOEIsR0FDckMsSUFBSXZCLEVBQVd1QixFQUFhbnNGLFFBQVEsT0FBUSxJQUFJOVcsTUFBTSxLQVV0RCxPQVR1Qm1oRyxFQUFhbmhHLE1BQU0sS0FDekJ4RCxTQUFRMk8sSUFDUCxPQUFaQSxFQUVFdTJGLEVBQVM3Z0csT0FBUyxHQUFHNmdHLEVBQVN5QixNQUNiLE1BQVpoNEYsR0FDVHUyRixFQUFTeG1HLEtBQUtpUSxNQUdYdTJGLEVBQVM3Z0csT0FBUyxFQUFJNmdHLEVBQVNsbEYsS0FBSyxLQUFPLElBbkJvQjRtRixDQUFnQkYsRUFBWUQsR0FBZ0JBLEVBQ2xILE1BQU8sQ0FDTDdELFNBQUFBLEVBQ0E3bUIsT0FBUThxQixFQUFnQjlxQixHQUN4QmduQixLQUFNK0QsRUFBYy9ELElBa0J4QixTQUFTZ0UsRUFBVUMsRUFBT0MsRUFBZ0JDLEdBQ3hDLElBU0lyN0YsRUFUQXNFLEVBQXNCLGlCQUFWNjJGLEVBQXFCaEUsRUFBVWdFLEdBQVNBLEVBQ3BETixFQUF1QixLQUFWTSxHQUFnQyxLQUFoQjcyRixFQUFHeXlGLFNBQWtCLElBQU16eUYsRUFBR3l5RixTQVUvRCxHQUFrQixNQUFkOEQsRUFDRjc2RixFQUFPcTdGLE1BQ0YsQ0FDTCxJQUFJQyxFQUFxQkYsRUFBZTVpRyxPQUFTLEVBRWpELEdBQUlxaUcsRUFBVzNsRyxXQUFXLE1BQU8sQ0FDL0IsSUFBSXFtRyxFQUFhVixFQUFXbGpHLE1BQU0sS0FJbEMsS0FBeUIsT0FBbEI0akcsRUFBVyxJQUNoQkEsRUFBV24wQixRQUNYazBCLEdBQXNCLEVBR3hCaDNGLEVBQUd5eUYsU0FBV3dFLEVBQVdwbkYsS0FBSyxLQUtoQ25VLEVBQU9zN0YsR0FBc0IsRUFBSUYsRUFBZUUsR0FBc0IsSUFHeEUsSUFBSTV5RSxFQUFPaXlFLEVBQVlyMkYsRUFBSXRFLEdBTTNCLE9BSkk2NkYsR0FBNkIsTUFBZkEsR0FBc0JBLEVBQVdWLFNBQVMsT0FBU3p4RSxFQUFLcXVFLFNBQVNvRCxTQUFTLE9BQzFGenhFLEVBQUtxdUUsVUFBWSxLQUdacnVFLEVBTVQsU0FBU3d2RSxFQUFjbkIsRUFBVWtCLEdBQy9CLEdBQWlCLE1BQWJBLEVBQWtCLE9BQU9sQixFQUU3QixJQUFLQSxFQUFTem9GLGNBQWNwWixXQUFXK2lHLEVBQVMzcEYsZUFDOUMsT0FBTyxLQUdULElBQUlrdEYsRUFBV3pFLEVBQVNuNEIsT0FBT3E1QixFQUFTei9GLFFBRXhDLE9BQUlnakcsR0FBeUIsTUFBYkEsRUFFUCxLQUdGekUsRUFBU3I4QyxNQUFNdTlDLEVBQVN6L0YsU0FBVyxJQUU1QyxNQUFNd2dHLEVBQVl5QyxHQUFTQSxFQUFNdG5GLEtBQUssS0FBSzFGLFFBQVEsU0FBVSxLQUN2RG9yRixFQUFvQjlDLEdBQVlBLEVBQVN0b0YsUUFBUSxPQUFRLElBQUlBLFFBQVEsT0FBUSxLQUU3RXVzRixFQUFrQjlxQixHQUFXQSxHQUFxQixNQUFYQSxFQUFzQkEsRUFBT2g3RSxXQUFXLEtBQU9nN0UsRUFBUyxJQUFNQSxFQUE3QyxHQUV4RCtxQixFQUFnQi9ELEdBQVNBLEdBQWlCLE1BQVRBLEVBQW9CQSxFQUFLaGlHLFdBQVcsS0FBT2dpRyxFQUFPLElBQU1BLEVBQXpDLEdBU3RELFNBQVN3RSxFQUFRcDNGLEdBQ2RxM0YsS0FFdUVwNEYsR0FBVSxHQUNsRixJQUFJLFNBQ0YwMEYsRUFBUSxVQUNSMkQsSUFDRSxJQUFBaHFGLFlBQVcybEYsSUFDWCxLQUNGTCxFQUFJLFNBQ0pILEVBQVEsT0FDUjdtQixHQUNFMnJCLEVBQWdCdjNGLEdBQ2hCdzNGLEVBQWlCL0UsRUFFckIsR0FBaUIsTUFBYmtCLEVBQWtCLENBQ3BCLElBQUk0QyxFQWxEUixTQUF1QnYyRixHQUVyQixNQUFjLEtBQVBBLEdBQTZCLEtBQWhCQSxFQUFHeXlGLFNBQWtCLElBQW9CLGlCQUFQenlGLEVBQWtCNnlGLEVBQVU3eUYsR0FBSXl5RixTQUFXenlGLEVBQUd5eUYsU0FnRGpGZ0YsQ0FBY3ozRixHQUMzQjAzRixFQUE4QixNQUFkbkIsR0FBc0JBLEVBQVdWLFNBQVMsS0FDOUQyQixFQUE4QixNQUFiL0UsRUFBbUJrQixHQUFZK0QsRUFBZ0IsSUFBTSxJQUFNaEQsRUFBVSxDQUFDZixFQUFVbEIsSUFHbkcsT0FBTzZFLEVBQVVLLFdBQVcsQ0FDMUJsRixTQUFVK0UsRUFDVjVyQixPQUFBQSxFQUNBZ25CLEtBQUFBLElBU0osU0FBU3lFLElBQ1AsT0FBc0MsT0FBL0IsSUFBQS9wRixZQUFXNGxGLEdBYXBCLFNBQVMwRSxJQUlQLE9BSENQLEtBRTJFcDRGLEdBQVUsSUFDL0UsSUFBQXFPLFlBQVc0bEYsR0FBaUIvcEIsU0FTckMsU0FBUzB1QixJQUNQLE9BQU8sSUFBQXZxRixZQUFXNGxGLEdBQWlCNEUsZUFVckMsU0FBU0MsRUFBU3ZDLEdBQ2Y2QixLQUV3RXA0RixHQUFVLEdBQ25GLElBQUksU0FDRnd6RixHQUNFbUYsSUFDSixPQUFPLElBQUEvbkUsVUFBUSxJQUFNd2xFLEVBQVVHLEVBQVMvQyxJQUFXLENBQUNBLEVBQVUrQyxJQVloRSxTQUFTd0MsSUFDTlgsS0FFMkVwNEYsR0FBVSxHQUN0RixJQUFJLFNBQ0YwMEYsRUFBUSxVQUNSMkQsSUFDRSxJQUFBaHFGLFlBQVcybEYsSUFDWCxRQUNGOWtGLElBQ0UsSUFBQWIsWUFBVzZsRixJQUViVixTQUFVc0UsR0FDUmEsSUFDQUssRUFBcUJyOEQsS0FBS0MsVUFBVTF0QixFQUFRclksS0FBSTgzQyxHQUFTQSxFQUFNMG5ELGdCQUMvRDRDLEdBQVksSUFBQWxvRixTQUFPLEdBeUJ2QixPQXhCQSxJQUFBcEMsWUFBVSxLQUNSc3FGLEVBQVU5NkYsU0FBVSxNQUVQLElBQUErekIsY0FBWSxTQUFVbnhCLEVBQUl2RyxHQU12QyxRQUxnQixJQUFaQSxJQUNGQSxFQUFVLEtBSVB5K0YsRUFBVTk2RixRQUFTLE9BRXhCLEdBQWtCLGlCQUFQNEMsRUFFVCxZQURBczNGLEVBQVVhLEdBQUduNEYsR0FJZixJQUFJb2tCLEVBQU93eUUsRUFBVTUyRixFQUFJNDdCLEtBQUsyQyxNQUFNMDVELEdBQXFCbEIsR0FFeEMsTUFBYnBELElBQ0Z2dkUsRUFBS3F1RSxTQUFXaUMsRUFBVSxDQUFDZixFQUFVdnZFLEVBQUtxdUUsYUFHekNoNUYsRUFBUTBRLFFBQVVtdEYsRUFBVW50RixRQUFVbXRGLEVBQVUvb0csTUFBTTYxQixFQUFNM3FCLEVBQVEwRyxTQUN0RSxDQUFDd3pGLEVBQVUyRCxFQUFXVyxFQUFvQmxCLElBRy9DLE1BQU1xQixHQUE2QixJQUFBeHJGLGVBQWMsTUFPakQsU0FBU3lyRixJQUNQLE9BQU8sSUFBQS9xRixZQUFXOHFGLEdBU3BCLFNBQVNFLEVBQVVud0YsR0FDakIsSUFBSWlyRixHQUFTLElBQUE5bEYsWUFBVzZsRixHQUFjQyxPQUV0QyxPQUFJQSxHQUNrQixJQUFBcjdGLGVBQWNxZ0csRUFBY2xuRSxTQUFVLENBQ3hENy9CLE1BQU84VyxHQUNOaXJGLEdBR0VBLEVBU1QsU0FBU21GLElBQ1AsSUFBSSxRQUNGcHFGLElBQ0UsSUFBQWIsWUFBVzZsRixHQUNYcUYsRUFBYXJxRixFQUFRQSxFQUFRamEsT0FBUyxHQUMxQyxPQUFPc2tHLEVBQWFBLEVBQVdqRixPQUFTLEdBUTFDLFNBQVNnRSxFQUFnQnYzRixHQUN2QixJQUFJLFFBQ0ZtTyxJQUNFLElBQUFiLFlBQVc2bEYsSUFFYlYsU0FBVXNFLEdBQ1JhLElBQ0FLLEVBQXFCcjhELEtBQUtDLFVBQVUxdEIsRUFBUXJZLEtBQUk4M0MsR0FBU0EsRUFBTTBuRCxnQkFDbkUsT0FBTyxJQUFBemxFLFVBQVEsSUFBTSttRSxFQUFVNTJGLEVBQUk0N0IsS0FBSzJDLE1BQU0wNUQsR0FBcUJsQixJQUFtQixDQUFDLzJGLEVBQUlpNEYsRUFBb0JsQixJQVdqSCxTQUFTMEIsRUFBVWhGLEVBQVFDLEdBQ3hCMkQsS0FFeUVwNEYsR0FBVSxHQUNwRixJQUNFa1AsUUFBU3VxRixJQUNQLElBQUFwckYsWUFBVzZsRixHQUNYcUYsRUFBYUUsRUFBY0EsRUFBY3hrRyxPQUFTLEdBQ2xEeWtHLEVBQWVILEVBQWFBLEVBQVdqRixPQUFTLEdBRWhEcUYsR0FEaUJKLEdBQWFBLEVBQVcvRixTQUNwQitGLEVBQWFBLEVBQVdsRCxhQUFlLEtBQzlDa0QsR0FBY0EsRUFBV2pFLE1BMkIzQyxJQUNJcHJCLEVBREEwdkIsRUFBc0JqQixJQUcxQixHQUFJbEUsRUFBYSxDQUNmLElBQUlvRixFQUVKLElBQUlDLEVBQTJDLGlCQUFoQnJGLEVBQTJCYixFQUFVYSxHQUFlQSxFQUMxRCxNQUF2QmtGLElBQXVGLE9BQXZERSxFQUF3QkMsRUFBa0J0RyxlQUFvQixFQUFTcUcsRUFBc0Jsb0csV0FBV2dvRyxLQUFpYzM1RixHQUFVLEdBQ3JsQmtxRSxFQUFXNHZCLE9BRVg1dkIsRUFBVzB2QixFQUdiLElBQUlwRyxFQUFXdHBCLEVBQVNzcEIsVUFBWSxJQUVoQ3RrRixFQUFVcWxGLEVBQVlDLEVBQVEsQ0FDaENoQixTQUY2QyxNQUF2Qm1HLEVBQTZCbkcsRUFBV0EsRUFBU3I4QyxNQUFNd2lELEVBQW1CMWtHLFNBQVcsTUFVN0csT0FBTzhrRyxFQUFlN3FGLEdBQVdBLEVBQVFyWSxLQUFJODNDLEdBQVN4MUMsT0FBT2dELE9BQU8sR0FBSXd5QyxFQUFPLENBQzdFMmxELE9BQVFuN0YsT0FBT2dELE9BQU8sR0FBSXU5RixFQUFjL3FELEVBQU0ybEQsUUFDOUNkLFNBQVVpQyxFQUFVLENBQUNrRSxFQUFvQmhyRCxFQUFNNmtELFdBQy9DNkMsYUFBcUMsTUFBdkIxbkQsRUFBTTBuRCxhQUF1QnNELEVBQXFCbEUsRUFBVSxDQUFDa0UsRUFBb0JockQsRUFBTTBuRCxtQkFDbEdvRCxHQUVQLFNBQVNNLEVBQWU3cUYsRUFBU3VxRixHQUsvQixZQUpzQixJQUFsQkEsSUFDRkEsRUFBZ0IsSUFHSCxNQUFYdnFGLEVBQXdCLEtBQ3JCQSxFQUFROHFGLGFBQVksQ0FBQzdGLEVBQVF4bEQsRUFBT2wvQyxLQUNyQixJQUFBcUosZUFBY283RixFQUFhamlFLFNBQVUsQ0FDdkRsUCxjQUFrQzMwQixJQUF4QnVnRCxFQUFNMm1ELE1BQU05bUcsUUFBd0JtZ0QsRUFBTTJtRCxNQUFNOW1HLFFBQVUybEcsRUFDcEUvaEcsTUFBTyxDQUNMK2hHLE9BQUFBLEVBQ0FqbEYsUUFBU3VxRixFQUFjbGxGLE9BQU9yRixFQUFRaW9DLE1BQU0sRUFBRzFuRCxFQUFRLFFBRzFELE1BUUwsU0FBU3dxRyxFQUFhM0csR0FDcEIsSUFBSSxTQUNGb0IsRUFBUSxTQUNSM3hFLEVBQVEsZUFDUm0zRSxFQUFjLGFBQ2RDLEdBQ0U3RyxFQUNBOEcsR0FBYSxJQUFBcnBGLFVBRVMsTUFBdEJxcEYsRUFBV2o4RixVQUNiaThGLEVBQVdqOEYsUUZoTGYsU0FBNkIzRCxRQUNYLElBQVpBLElBQ0ZBLEVBQVUsSUFHWixJQUFJNi9GLEVBQVk3L0YsRUFDWjgvRixFQUF3QkQsRUFBVUgsZUFDbENBLE9BQTJDLElBQTFCSSxFQUFtQyxDQUFDLEtBQU9BLEVBQzVESCxFQUFlRSxFQUFVRixhQUN6Qi8wRixFQUFVODBGLEVBQWVyakcsS0FBSSxTQUFVd08sR0FTekMsT0FSd0J3dEYsRUFBUyxDQUMvQlcsU0FBVSxJQUNWN21CLE9BQVEsR0FDUmduQixLQUFNLEdBQ056eUYsTUFBTyxLQUNQckgsSUFBS3M1RixLQUNhLGlCQUFWOXRGLEVBQXFCdXVGLEVBQVV2dUYsR0FBU0EsTUFJaEQ1VixFQUFRczdDLEVBQXNCLE1BQWhCb3ZELEVBQXVCLzBGLEVBQVFuUSxPQUFTLEVBQUlrbEcsRUFBYyxFQUFHLzBGLEVBQVFuUSxPQUFTLEdBQzVGb1MsRUFBU3VyRixFQUFPMkgsSUFDaEJyd0IsRUFBVzlrRSxFQUFRM1YsR0FDbkIwOUUsRUFBWThsQixJQUNadUgsRUFBV3ZILElBTWYsU0FBU3dILEVBQWdCMTVGLEVBQUlHLEdBSzNCLFlBSmMsSUFBVkEsSUFDRkEsRUFBUSxNQUdNMnhGLEVBQVMsQ0FDdkJXLFNBQVV0cEIsRUFBU3NwQixTQUNuQjdtQixPQUFRLEdBQ1JnbkIsS0FBTSxJQUNTLGlCQUFQNXlGLEVBQWtCNnlGLEVBQVU3eUYsR0FBTUEsRUFBSSxDQUM5Q0csTUFBT0EsRUFDUHJILElBQUtzNUYsTUFJVCxTQUFTdUgsRUFBUXJ6RixFQUFRNmlFLEVBQVV5d0IsR0FDakMsT0FBUUgsRUFBU3ZsRyxTQUFXdWxHLEVBQVNsakcsS0FBSyxDQUN4QytQLE9BQVFBLEVBQ1I2aUUsU0FBVUEsRUFDVnl3QixNQUFPQSxLQUNMLEdBR04sU0FBU0MsRUFBUUMsRUFBWUMsR0FDM0J6ekYsRUFBU3d6RixFQUNUM3dCLEVBQVc0d0IsRUFDWDN0QixFQUFVNzFFLEtBQUssQ0FDYitQLE9BQVFBLEVBQ1I2aUUsU0FBVUEsSUFxQ2QsU0FBU2d2QixFQUFHLzBGLEdBQ1YsSUFBSTQyRixFQUFZaHdELEVBQU10N0MsRUFBUTBVLEVBQU8sRUFBR2lCLEVBQVFuUSxPQUFTLEdBQ3JENGxHLEVBQWFqSSxFQUFPMkgsSUFDcEJPLEVBQWUxMUYsRUFBUTIxRixHQU12QkwsRUFBUUcsRUFBWUMsR0FKeEIsV0FDRTVCLEVBQUcvMEYsUUFJSDFVLEVBQVFzckcsRUFDUkgsRUFBUUMsRUFBWUMsSUFJeEIsSUFBSTMxRCxFQUFVLENBQ1IxMUMsWUFDRixPQUFPQSxHQUdMNFgsYUFDRixPQUFPQSxHQUdMNmlFLGVBQ0YsT0FBT0EsR0FHVHd1QixXQWpHRixTQUFvQjMzRixHQUNsQixNQUFxQixpQkFBUEEsRUFBa0JBLEVBQUtzeUYsRUFBV3R5RixJQWlHaER6UixLQTlERixTQUFTQSxFQUFLeVIsRUFBSUcsR0FDaEIsSUFBSTI1RixFQUFhakksRUFBT29JLEtBQ3BCRixFQUFlTCxFQUFnQjE1RixFQUFJRyxHQVFuQ3c1RixFQUFRRyxFQUFZQyxHQU54QixXQUNFeHJHLEVBQUt5UixFQUFJRyxRQU1UelIsR0FBUyxFQUNUMlYsRUFBUTFWLE9BQU9ELEVBQU8yVixFQUFRblEsT0FBUTZsRyxHQUN0Q0YsRUFBUUMsRUFBWUMsS0FrRHRCNXZGLFFBOUNGLFNBQVNBLEVBQVFuSyxFQUFJRyxHQUNuQixJQUFJMjVGLEVBQWFqSSxFQUFPcUksUUFDcEJILEVBQWVMLEVBQWdCMTVGLEVBQUlHLEdBUW5DdzVGLEVBQVFHLEVBQVlDLEdBTnhCLFdBQ0U1dkYsRUFBUW5LLEVBQUlHLFFBTVprRSxFQUFRM1YsR0FBU3FyRyxFQUNqQkYsRUFBUUMsRUFBWUMsS0FtQ3RCNUIsR0FBSUEsRUFDSmdDLEtBQU0sV0FDSmhDLEdBQUksSUFFTmlDLFFBQVMsV0FDUGpDLEVBQUcsSUFFTGtDLE9BQVEsU0FBZ0JyaEUsR0FDdEIsT0FBT296QyxFQUFVNzlFLEtBQUt5cUMsSUFFeEJzaEUsTUFBTyxTQUFlQyxHQUNwQixPQUFPZCxFQUFTbHJHLEtBQUtnc0csS0FHekIsT0FBT24yRCxFRW9DZ0JvMkQsQ0FBb0IsQ0FDdkNyQixlQUFBQSxFQUNBQyxhQUFBQSxLQUlKLElBQUloMUQsRUFBVWkxRCxFQUFXajhGLFNBQ3BCK0MsRUFBT3M2RixJQUFZLElBQUFsc0YsVUFBUyxDQUMvQmpJLE9BQVE4OUIsRUFBUTk5QixPQUNoQjZpRSxTQUFVL2tDLEVBQVEra0MsV0FHcEIsT0FEQSxJQUFBeDdELGtCQUFnQixJQUFNeTJCLEVBQVFpMkQsT0FBT0ksSUFBVyxDQUFDcjJELEtBQzdCLElBQUFyc0MsZUFBYzJpRyxFQUFRLENBQ3hDL0csU0FBVUEsRUFDVjN4RSxTQUFVQSxFQUNWbW5ELFNBQVVocEUsRUFBTWdwRSxTQUNoQjJ1QixlQUFnQjMzRixFQUFNbUcsT0FDdEJneEYsVUFBV2x6RCxJQWFmLFNBQVN1MkQsRUFBU0MsR0FDaEIsSUFBSSxHQUNGNTZGLEVBQUUsUUFDRm1LLEVBQU8sTUFDUGhLLEdBQ0V5NkYsRUFDSHZELEtBRXdFcDRGLEdBQVUsR0FFbkYsSUFBSTQ3RixFQUFXN0MsSUFPZixPQU5BLElBQUFwcUYsWUFBVSxLQUNSaXRGLEVBQVM3NkYsRUFBSSxDQUNYbUssUUFBQUEsRUFDQWhLLE1BQUFBLE9BR0csS0FRVCxTQUFTMjZGLEVBQU9odkYsR0FDZCxPQUFPd3NGLEVBQVV4c0YsRUFBTTNELFNBUXpCLFNBQVM0eUYsRUFBTUMsR0FDNEwvN0YsR0FBVSxHQVlyTixTQUFTeTdGLEVBQU9PLEdBQ2QsSUFDRXRILFNBQVV1SCxFQUFlLElBQUcsU0FDNUJsNUUsRUFBVyxLQUNYbW5ELFNBQVVneUIsRUFBWSxlQUN0QnJELEVBQWlCakcsRUFBTzJILElBQUcsVUFDM0JsQyxFQUNBOEQsT0FBUUMsR0FBYSxHQUNuQkosRUFDRjVELEtBQWlNcDRGLEdBQVUsR0FDN00sSUFBSTAwRixFQUFXNEIsRUFBa0IyRixHQUM3QkksR0FBb0IsSUFBQXpyRSxVQUFRLEtBQU0sQ0FDcEM4akUsU0FBQUEsRUFDQTJELFVBQUFBLEVBQ0E4RCxPQUFRQyxLQUNOLENBQUMxSCxFQUFVMkQsRUFBVytELElBRUUsaUJBQWpCRixJQUNUQSxFQUFldEksRUFBVXNJLElBRzNCLElBQUksU0FDRjFJLEVBQVcsSUFBRyxPQUNkN21CLEVBQVMsR0FBRSxLQUNYZ25CLEVBQU8sR0FBRSxNQUNUenlGLEVBQVEsS0FBSSxJQUNackgsRUFBTSxXQUNKcWlHLEVBQ0FoeUIsR0FBVyxJQUFBdDVDLFVBQVEsS0FDckIsSUFBSTByRSxFQUFtQjNILEVBQWNuQixFQUFVa0IsR0FFL0MsT0FBd0IsTUFBcEI0SCxFQUNLLEtBR0YsQ0FDTDlJLFNBQVU4SSxFQUNWM3ZCLE9BQUFBLEVBQ0FnbkIsS0FBQUEsRUFDQXp5RixNQUFBQSxFQUNBckgsSUFBQUEsS0FFRCxDQUFDNjZGLEVBQVVsQixFQUFVN21CLEVBQVFnbkIsRUFBTXp5RixFQUFPckgsSUFHN0MsT0FBZ0IsTUFBWnF3RSxFQUNLLE1BR1csSUFBQXB4RSxlQUFjazdGLEVBQWtCL2hFLFNBQVUsQ0FDNUQ3L0IsTUFBT2lxRyxJQUNPLElBQUF2akcsZUFBY203RixFQUFnQmhpRSxTQUFVLENBQ3REbFAsU0FBVUEsRUFDVjN3QixNQUFPLENBQ0w4M0UsU0FBQUEsRUFDQTJ1QixlQUFBQSxNQVdOLFNBQVMwRCxFQUFPQyxHQUNkLElBQUksU0FDRno1RSxFQUFRLFNBQ1JtbkQsR0FDRXN5QixFQUNKLE9BQU9oRCxFQUFVaUQsRUFBeUIxNUUsR0FBV21uRCxHQWF2RCxTQUFTdXlCLEVBQXlCMTVFLEdBQ2hDLElBQUl5eEUsRUFBUyxHQTRCYixPQTNCQSxFQUFBLzNDLFNBQUEsUUFBaUIxNUIsR0FBVXYwQixJQUN6QixLQUFtQixJQUFBa3VELGdCQUFlbHVELEdBR2hDLE9BR0YsR0FBSUEsRUFBUXFtQixPQUFTLEVBQUFvb0MsU0FHbkIsWUFEQXUzQyxFQUFPbGxHLEtBQUttMkIsTUFBTSt1RSxFQUFRaUksRUFBeUJqdUcsRUFBUXFlLE1BQU1rVyxXQUlqRXYwQixFQUFRcW1CLE9BQVNpbkYsR0FBNFA5N0YsR0FBVSxHQUN6UixJQUFJczFGLEVBQVEsQ0FDVkUsY0FBZWhuRyxFQUFRcWUsTUFBTTJvRixjQUM3QmhuRyxRQUFTQSxFQUFRcWUsTUFBTXJlLFFBQ3ZCaUIsTUFBT2pCLEVBQVFxZSxNQUFNcGQsTUFDckIwMUIsS0FBTTMyQixFQUFRcWUsTUFBTXNZLE1BR2xCMzJCLEVBQVFxZSxNQUFNa1csV0FDaEJ1eUUsRUFBTXZ5RSxTQUFXMDVFLEVBQXlCanVHLEVBQVFxZSxNQUFNa1csV0FHMUR5eEUsRUFBT2xsRyxLQUFLZ21HLE1BRVBkLEVBTVQsU0FBU2tJLEVBQWN4dEYsR0FDckIsT0FBTzZxRixFQUFlN3FGLEdDejVCeEIsU0FBUyxLQWVQLE9BZEEsR0FBVy9WLE9BQU9nRCxRQUFVLFNBQVVELEdBQ3BDLElBQUssSUFBSTFJLEVBQUksRUFBR0EsRUFBSSt4QixVQUFVdHdCLE9BQVF6QixJQUFLLENBQ3pDLElBQUk2cUIsRUFBU2tILFVBQVUveEIsR0FFdkIsSUFBSyxJQUFJcUcsS0FBT3drQixFQUNWbGxCLE9BQU9JLFVBQVVILGVBQWU5QixLQUFLK21CLEVBQVF4a0IsS0FDL0NxQyxFQUFPckMsR0FBT3drQixFQUFPeGtCLElBSzNCLE9BQU9xQyxHQUdGLEdBQVN1cEIsTUFBTTMzQixLQUFNeTNCLFdBRzlCLFNBQVNvM0UsR0FBOEJ0K0UsRUFBUXUrRSxHQUM3QyxHQUFjLE1BQVZ2K0UsRUFBZ0IsTUFBTyxHQUMzQixJQUVJeGtCLEVBQUtyRyxFQUZMMEksRUFBUyxHQUNUMmdHLEVBQWExakcsT0FBT3VQLEtBQUsyVixHQUc3QixJQUFLN3FCLEVBQUksRUFBR0EsRUFBSXFwRyxFQUFXNW5HLE9BQVF6QixJQUNqQ3FHLEVBQU1nakcsRUFBV3JwRyxHQUNib3BHLEVBQVN2dEcsUUFBUXdLLElBQVEsSUFDN0JxQyxFQUFPckMsR0FBT3drQixFQUFPeGtCLElBR3ZCLE9BQU9xQyxFQUdULE1BQU00Z0csR0FBWSxDQUFDLFVBQVcsaUJBQWtCLFVBQVcsUUFBUyxTQUFVLE1BQ3hFQyxHQUFhLENBQUMsZUFBZ0IsZ0JBQWlCLFlBQWEsTUFBTyxRQUFTLEtBQU0sWUF1QnhGLFNBQVNDLEdBQWMxSixHQUNyQixJQUFJLFNBQ0ZvQixFQUFRLFNBQ1IzeEUsRUFBUSxPQUNScm9CLEdBQ0U0NEYsRUFDQThHLEdBQWEsSUFBQXJwRixVQUVTLE1BQXRCcXBGLEVBQVdqOEYsVUFDYmk4RixFQUFXajhGLFFIZmYsU0FBOEIzRCxRQUNaLElBQVpBLElBQ0ZBLEVBQVUsSUFHWixJQUNJeWlHLEVBRFd6aUcsRUFDZ0JFLE9BQzNCQSxPQUE2QixJQUFwQnVpRyxFQUE2QnBrRyxTQUFTNjJFLFlBQWN1dEIsRUFDN0RDLEVBQWdCeGlHLEVBQU95cUMsUUFFM0IsU0FBU2c0RCxJQUNQLElBQUlDLEVBQW1CMWlHLEVBQU93dkUsU0FDMUJzcEIsRUFBVzRKLEVBQWlCNUosU0FDNUI3bUIsRUFBU3l3QixFQUFpQnp3QixPQUMxQmduQixFQUFPeUosRUFBaUJ6SixLQUN4Qnp5RixFQUFRZzhGLEVBQWNoOEYsT0FBUyxHQUNuQyxNQUFPLENBQUNBLEVBQU1tOEYsSUFBYyxDQUMxQjdKLFNBQVVBLEVBQ1Y3bUIsT0FBUUEsRUFDUmduQixLQUFNQSxFQUNOenlGLE1BQU9BLEVBQU1vOEYsS0FBTyxLQUNwQnpqRyxJQUFLcUgsRUFBTXJILEtBQU8sWUFJdEIsSUFBSTBqRyxFQUFlLEtBMENuQjdpRyxFQUFPME4saUJBQWlCMnFGLEdBeEN4QixXQUNFLEdBQUl3SyxFQUNGL0MsRUFBU2xqRyxLQUFLaW1HLEdBQ2RBLEVBQWUsU0FDVixDQUNMLElBQUkxQyxFQUFhakksRUFBTzJILElBRXBCaUQsRUFBdUJMLElBQ3ZCcEMsRUFBWXlDLEVBQXFCLEdBQ2pDMUMsRUFBZTBDLEVBQXFCLEdBRXhDLEdBQUloRCxFQUFTdmxHLFFBQ1gsR0FBaUIsTUFBYjhsRyxFQUFtQixDQUNyQixJQUFJNTJGLEVBQVExVSxFQUFRc3JHLEVBRWhCNTJGLElBRUZvNUYsRUFBZSxDQUNibDJGLE9BQVF3ekYsRUFDUjN3QixTQUFVNHdCLEVBQ1ZILE1BQU8sV0FDTHpCLEdBQVksRUFBVC8wRixLQUdQKzBGLEVBQUcvMEYsVUFXUHkyRixFQUFRQyxPQU1kLElBQUl4ekYsRUFBU3VyRixFQUFPMkgsSUFFaEJrRCxFQUF3Qk4sSUFDeEIxdEcsRUFBUWd1RyxFQUFzQixHQUM5QnZ6QixFQUFXdXpCLEVBQXNCLEdBRWpDdHdCLEVBQVk4bEIsSUFDWnVILEVBQVd2SCxJQVNmLFNBQVN5RixFQUFXMzNGLEdBQ2xCLE1BQXFCLGlCQUFQQSxFQUFrQkEsRUFBS3N5RixFQUFXdHlGLEdBSWxELFNBQVMwNUYsRUFBZ0IxNUYsRUFBSUcsR0FLM0IsWUFKYyxJQUFWQSxJQUNGQSxFQUFRLE1BR00yeEYsRUFBUyxDQUN2QlcsU0FBVXRwQixFQUFTc3BCLFNBQ25CRyxLQUFNLEdBQ05obkIsT0FBUSxJQUNPLGlCQUFQNXJFLEVBQWtCNnlGLEVBQVU3eUYsR0FBTUEsRUFBSSxDQUM5Q0csTUFBT0EsRUFDUHJILElBQUtzNUYsTUFJVCxTQUFTdUssRUFBc0I1QyxFQUFjcnJHLEdBQzNDLE1BQU8sQ0FBQyxDQUNONnRHLElBQUt4QyxFQUFhNTVGLE1BQ2xCckgsSUFBS2loRyxFQUFhamhHLElBQ2xCd2pHLElBQUs1dEcsR0FDSmlwRyxFQUFXb0MsSUFHaEIsU0FBU0osRUFBUXJ6RixFQUFRNmlFLEVBQVV5d0IsR0FDakMsT0FBUUgsRUFBU3ZsRyxTQUFXdWxHLEVBQVNsakcsS0FBSyxDQUN4QytQLE9BQVFBLEVBQ1I2aUUsU0FBVUEsRUFDVnl3QixNQUFPQSxLQUNMLEdBR04sU0FBU0MsRUFBUUMsR0FDZnh6RixFQUFTd3pGLEVBRVQsSUFBSThDLEVBQXdCUixJQUU1QjF0RyxFQUFRa3VHLEVBQXNCLEdBQzlCenpCLEVBQVd5ekIsRUFBc0IsR0FDakN4d0IsRUFBVTcxRSxLQUFLLENBQ2IrUCxPQUFRQSxFQUNSNmlFLFNBQVVBLElBa0RkLFNBQVNndkIsRUFBRy8wRixHQUNWKzRGLEVBQWNoRSxHQUFHLzBGLEdBdkdOLE1BQVQxVSxJQUNGQSxFQUFRLEVBQ1J5dEcsRUFBY1UsYUFBYS9LLEVBQVMsR0FBSXFLLEVBQWNoOEYsTUFBTyxDQUMzRG04RixJQUFLNXRHLElBQ0gsS0FzR04sSUFBSTAxQyxFQUFVLENBQ1I5OUIsYUFDRixPQUFPQSxHQUdMNmlFLGVBQ0YsT0FBT0EsR0FHVHd1QixXQUFZQSxFQUNacHBHLEtBNURGLFNBQVNBLEVBQUt5UixFQUFJRyxHQUNoQixJQUFJMjVGLEVBQWFqSSxFQUFPb0ksS0FDcEJGLEVBQWVMLEVBQWdCMTVGLEVBQUlHLEdBTXZDLEdBQUl3NUYsRUFBUUcsRUFBWUMsR0FKeEIsV0FDRXhyRyxFQUFLeVIsRUFBSUcsTUFHbUMsQ0FDNUMsSUFBSTI4RixFQUF3QkgsRUFBc0I1QyxFQUFjcnJHLEVBQVEsR0FDcEVxdUcsRUFBZUQsRUFBc0IsR0FDckMvd0IsRUFBTSt3QixFQUFzQixHQUloQyxJQUNFWCxFQUFjYSxVQUFVRCxFQUFjLEdBQUloeEIsR0FDMUMsTUFBTzEzQixHQUdQMTZDLEVBQU93dkUsU0FBUy90RSxPQUFPMndFLEdBR3pCOHRCLEVBQVFDLEtBc0NWM3ZGLFFBbENGLFNBQVNBLEVBQVFuSyxFQUFJRyxHQUNuQixJQUFJMjVGLEVBQWFqSSxFQUFPcUksUUFDcEJILEVBQWVMLEVBQWdCMTVGLEVBQUlHLEdBTXZDLEdBQUl3NUYsRUFBUUcsRUFBWUMsR0FKeEIsV0FDRTV2RixFQUFRbkssRUFBSUcsTUFHZ0MsQ0FDNUMsSUFBSTg4RixFQUF5Qk4sRUFBc0I1QyxFQUFjcnJHLEdBQzdEcXVHLEVBQWVFLEVBQXVCLEdBQ3RDbHhCLEVBQU1reEIsRUFBdUIsR0FHakNkLEVBQWNVLGFBQWFFLEVBQWMsR0FBSWh4QixHQUM3Qzh0QixFQUFRQyxLQW9CVjNCLEdBQUlBLEVBQ0pnQyxLQUFNLFdBQ0poQyxHQUFJLElBRU5pQyxRQUFTLFdBQ1BqQyxFQUFHLElBRUxrQyxPQUFRLFNBQWdCcmhFLEdBQ3RCLE9BQU9vekMsRUFBVTc5RSxLQUFLeXFDLElBRXhCc2hFLE1BQU8sU0FBZUMsR0FDcEIsSUFBSTJDLEVBQVV6RCxFQUFTbHJHLEtBQUtnc0csR0FNNUIsT0FKd0IsSUFBcEJkLEVBQVN2bEcsUUFDWHlGLEVBQU8wTixpQkFBaUIwcUYsRUFBdUJFLEdBRzFDLFdBQ0xpTCxJQUlLekQsRUFBU3ZsRyxRQUNaeUYsRUFBTzJOLG9CQUFvQnlxRixFQUF1QkUsTUFLMUQsT0FBTzd0RCxFR2hOZ0IrNEQsQ0FBcUIsQ0FDeEN4akcsT0FBQUEsS0FJSixJQUFJeXFDLEVBQVVpMUQsRUFBV2o4RixTQUNwQitDLEVBQU9zNkYsSUFBWSxJQUFBbHNGLFVBQVMsQ0FDL0JqSSxPQUFRODlCLEVBQVE5OUIsT0FDaEI2aUUsU0FBVS9rQyxFQUFRK2tDLFdBR3BCLE9BREEsSUFBQXg3RCxrQkFBZ0IsSUFBTXkyQixFQUFRaTJELE9BQU9JLElBQVcsQ0FBQ3IyRCxLQUM3QixJQUFBcnNDLGVBQWMyaUcsRUFBUSxDQUN4Qy9HLFNBQVVBLEVBQ1YzeEUsU0FBVUEsRUFDVm1uRCxTQUFVaHBFLEVBQU1ncEUsU0FDaEIydUIsZUFBZ0IzM0YsRUFBTW1HLE9BQ3RCZ3hGLFVBQVdsekQsSUFRZixTQUFTZzVELEdBQVd4QyxHQUNsQixJQUFJLFNBQ0ZqSCxFQUFRLFNBQ1IzeEUsRUFBUSxPQUNScm9CLEdBQ0VpaEcsRUFDQXZCLEdBQWEsSUFBQXJwRixVQUVTLE1BQXRCcXBGLEVBQVdqOEYsVUFDYmk4RixFQUFXajhGLFFIMExmLFNBQTJCM0QsUUFDVCxJQUFaQSxJQUNGQSxFQUFVLElBR1osSUFDSTRqRyxFQURZNWpHLEVBQ2lCRSxPQUM3QkEsT0FBOEIsSUFBckIwakcsRUFBOEJ2bEcsU0FBUzYyRSxZQUFjMHVCLEVBQzlEbEIsRUFBZ0J4aUcsRUFBT3lxQyxRQUUzQixTQUFTZzRELElBQ1AsSUFBSWtCLEVBQWF6SyxFQUFVbDVGLEVBQU93dkUsU0FBU3lwQixLQUFLUCxPQUFPLElBQ25Ea0wsRUFBc0JELEVBQVc3SyxTQUNqQ0EsT0FBbUMsSUFBeEI4SyxFQUFpQyxJQUFNQSxFQUNsREMsRUFBb0JGLEVBQVcxeEIsT0FDL0JBLE9BQStCLElBQXRCNHhCLEVBQStCLEdBQUtBLEVBQzdDQyxFQUFrQkgsRUFBVzFLLEtBQzdCQSxPQUEyQixJQUFwQjZLLEVBQTZCLEdBQUtBLEVBRXpDdDlGLEVBQVFnOEYsRUFBY2g4RixPQUFTLEdBQ25DLE1BQU8sQ0FBQ0EsRUFBTW04RixJQUFjLENBQzFCN0osU0FBVUEsRUFDVjdtQixPQUFRQSxFQUNSZ25CLEtBQU1BLEVBQ056eUYsTUFBT0EsRUFBTW84RixLQUFPLEtBQ3BCempHLElBQUtxSCxFQUFNckgsS0FBTyxZQUl0QixJQUFJMGpHLEVBQWUsS0FFbkIsU0FBU2tCLElBQ1AsR0FBSWxCLEVBQ0YvQyxFQUFTbGpHLEtBQUtpbUcsR0FDZEEsRUFBZSxTQUNWLENBQ0wsSUFBSTFDLEVBQWFqSSxFQUFPMkgsSUFFcEJtRSxFQUF3QnZCLElBQ3hCcEMsRUFBWTJELEVBQXNCLEdBQ2xDNUQsRUFBZTRELEVBQXNCLEdBRXpDLEdBQUlsRSxFQUFTdmxHLFFBQ1gsR0FBaUIsTUFBYjhsRyxFQUFtQixDQUNyQixJQUFJNTJGLEVBQVExVSxFQUFRc3JHLEVBRWhCNTJGLElBRUZvNUYsRUFBZSxDQUNibDJGLE9BQVF3ekYsRUFDUjN3QixTQUFVNHdCLEVBQ1ZILE1BQU8sV0FDTHpCLEdBQVksRUFBVC8wRixLQUdQKzBGLEVBQUcvMEYsVUFXUHkyRixFQUFRQyxJQUtkbmdHLEVBQU8wTixpQkFBaUIycUYsRUFBbUIwTCxHQUczQy9qRyxFQUFPME4saUJBOVRpQixjQThUcUIsV0FLdkNpckYsRUFKd0I4SixJQUNhLE1BR1I5SixFQUFXbnBCLElBQzFDdTBCLE9BR0osSUFBSXAzRixFQUFTdXJGLEVBQU8ySCxJQUVoQm9FLEVBQXdCeEIsSUFDeEIxdEcsRUFBUWt2RyxFQUFzQixHQUM5QnowQixFQUFXeTBCLEVBQXNCLEdBRWpDeHhCLEVBQVk4bEIsSUFDWnVILEVBQVd2SCxJQXNCZixTQUFTeUYsRUFBVzMzRixHQUNsQixPQWRGLFdBQ0UsSUFBSTI2RCxFQUFPN2lFLFNBQVN1MkIsY0FBYyxRQUM5QjgvQyxFQUFPLEdBRVgsR0FBSXhULEdBQVFBLEVBQUs3cEIsYUFBYSxRQUFTLENBQ3JDLElBQUlpN0IsRUFBTXB5RSxFQUFPd3ZFLFNBQVNnRixLQUN0QjRrQixFQUFZaG5CLEVBQUl6OUUsUUFBUSxLQUM1QjYvRSxHQUFzQixJQUFmNGtCLEVBQW1CaG5CLEVBQU1BLEVBQUkzMUIsTUFBTSxFQUFHMjhDLEdBRy9DLE9BQU81a0IsRUFJQTB2QixHQUFnQixLQUFxQixpQkFBUDc5RixFQUFrQkEsRUFBS3N5RixFQUFXdHlGLElBR3pFLFNBQVMwNUYsRUFBZ0IxNUYsRUFBSUcsR0FLM0IsWUFKYyxJQUFWQSxJQUNGQSxFQUFRLE1BR00yeEYsRUFBUyxDQUN2QlcsU0FBVXRwQixFQUFTc3BCLFNBQ25CRyxLQUFNLEdBQ05obkIsT0FBUSxJQUNPLGlCQUFQNXJFLEVBQWtCNnlGLEVBQVU3eUYsR0FBTUEsRUFBSSxDQUM5Q0csTUFBT0EsRUFDUHJILElBQUtzNUYsTUFJVCxTQUFTdUssRUFBc0I1QyxFQUFjcnJHLEdBQzNDLE1BQU8sQ0FBQyxDQUNONnRHLElBQUt4QyxFQUFhNTVGLE1BQ2xCckgsSUFBS2loRyxFQUFhamhHLElBQ2xCd2pHLElBQUs1dEcsR0FDSmlwRyxFQUFXb0MsSUFHaEIsU0FBU0osRUFBUXJ6RixFQUFRNmlFLEVBQVV5d0IsR0FDakMsT0FBUUgsRUFBU3ZsRyxTQUFXdWxHLEVBQVNsakcsS0FBSyxDQUN4QytQLE9BQVFBLEVBQ1I2aUUsU0FBVUEsRUFDVnl3QixNQUFPQSxLQUNMLEdBR04sU0FBU0MsRUFBUUMsR0FDZnh6RixFQUFTd3pGLEVBRVQsSUFBSWdFLEVBQXdCMUIsSUFFNUIxdEcsRUFBUW92RyxFQUFzQixHQUM5QjMwQixFQUFXMjBCLEVBQXNCLEdBQ2pDMXhCLEVBQVU3MUUsS0FBSyxDQUNiK1AsT0FBUUEsRUFDUjZpRSxTQUFVQSxJQXNEZCxTQUFTZ3ZCLEVBQUcvMEYsR0FDVis0RixFQUFjaEUsR0FBRy8wRixHQTJDbkIsT0FsS2EsTUFBVDFVLElBQ0ZBLEVBQVEsRUFDUnl0RyxFQUFjVSxhQUFhL0ssRUFBUyxHQUFJcUssRUFBY2g4RixNQUFPLENBQzNEbThGLElBQUs1dEcsSUFDSCxLQXNIUSxDQUNSNFgsYUFDRixPQUFPQSxHQUdMNmlFLGVBQ0YsT0FBT0EsR0FHVHd1QixXQUFZQSxFQUNacHBHLEtBaEVGLFNBQVNBLEVBQUt5UixFQUFJRyxHQUNoQixJQUFJMjVGLEVBQWFqSSxFQUFPb0ksS0FDcEJGLEVBQWVMLEVBQWdCMTVGLEVBQUlHLEdBUXZDLEdBQUl3NUYsRUFBUUcsRUFBWUMsR0FOeEIsV0FDRXhyRyxFQUFLeVIsRUFBSUcsTUFLbUMsQ0FDNUMsSUFBSTQ5RixFQUF5QnBCLEVBQXNCNUMsRUFBY3JyRyxFQUFRLEdBQ3JFcXVHLEVBQWVnQixFQUF1QixHQUN0Q2h5QixFQUFNZ3lCLEVBQXVCLEdBSWpDLElBQ0U1QixFQUFjYSxVQUFVRCxFQUFjLEdBQUloeEIsR0FDMUMsTUFBTzEzQixHQUdQMTZDLEVBQU93dkUsU0FBUy90RSxPQUFPMndFLEdBR3pCOHRCLEVBQVFDLEtBd0NWM3ZGLFFBcENGLFNBQVNBLEVBQVFuSyxFQUFJRyxHQUNuQixJQUFJMjVGLEVBQWFqSSxFQUFPcUksUUFDcEJILEVBQWVMLEVBQWdCMTVGLEVBQUlHLEdBUXZDLEdBQUl3NUYsRUFBUUcsRUFBWUMsR0FOeEIsV0FDRTV2RixFQUFRbkssRUFBSUcsTUFLZ0MsQ0FDNUMsSUFBSTY5RixFQUF5QnJCLEVBQXNCNUMsRUFBY3JyRyxHQUM3RHF1RyxFQUFlaUIsRUFBdUIsR0FDdENqeUIsRUFBTWl5QixFQUF1QixHQUdqQzdCLEVBQWNVLGFBQWFFLEVBQWMsR0FBSWh4QixHQUM3Qzh0QixFQUFRQyxLQW9CVjNCLEdBQUlBLEVBQ0pnQyxLQUFNLFdBQ0poQyxHQUFJLElBRU5pQyxRQUFTLFdBQ1BqQyxFQUFHLElBRUxrQyxPQUFRLFNBQWdCcmhFLEdBQ3RCLE9BQU9vekMsRUFBVTc5RSxLQUFLeXFDLElBRXhCc2hFLE1BQU8sU0FBZUMsR0FDcEIsSUFBSTJDLEVBQVV6RCxFQUFTbHJHLEtBQUtnc0csR0FNNUIsT0FKd0IsSUFBcEJkLEVBQVN2bEcsUUFDWHlGLEVBQU8wTixpQkFBaUIwcUYsRUFBdUJFLEdBRzFDLFdBQ0xpTCxJQUlLekQsRUFBU3ZsRyxRQUNaeUYsRUFBTzJOLG9CQUFvQnlxRixFQUF1QkUsTUduYm5DZ00sQ0FBa0IsQ0FDckN0a0csT0FBQUEsS0FJSixJQUFJeXFDLEVBQVVpMUQsRUFBV2o4RixTQUNwQitDLEVBQU9zNkYsSUFBWSxJQUFBbHNGLFVBQVMsQ0FDL0JqSSxPQUFRODlCLEVBQVE5OUIsT0FDaEI2aUUsU0FBVS9rQyxFQUFRK2tDLFdBR3BCLE9BREEsSUFBQXg3RCxrQkFBZ0IsSUFBTXkyQixFQUFRaTJELE9BQU9JLElBQVcsQ0FBQ3IyRCxLQUM3QixJQUFBcnNDLGVBQWMyaUcsRUFBUSxDQUN4Qy9HLFNBQVVBLEVBQ1YzeEUsU0FBVUEsRUFDVm1uRCxTQUFVaHBFLEVBQU1ncEUsU0FDaEIydUIsZUFBZ0IzM0YsRUFBTW1HLE9BQ3RCZ3hGLFVBQVdsekQsSUFVZixTQUFTODVELEdBQWNqRCxHQUNyQixJQUFJLFNBQ0Z0SCxFQUFRLFNBQ1IzeEUsRUFBUSxRQUNSb2lCLEdBQ0U2MkQsRUFDSixNQUFPOTZGLEVBQU9zNkYsSUFBWSxJQUFBbHNGLFVBQVMsQ0FDakNqSSxPQUFRODlCLEVBQVE5OUIsT0FDaEI2aUUsU0FBVS9rQyxFQUFRK2tDLFdBR3BCLE9BREEsSUFBQXg3RCxrQkFBZ0IsSUFBTXkyQixFQUFRaTJELE9BQU9JLElBQVcsQ0FBQ3IyRCxLQUM3QixJQUFBcnNDLGVBQWMyaUcsRUFBUSxDQUN4Qy9HLFNBQVVBLEVBQ1YzeEUsU0FBVUEsRUFDVm1uRCxTQUFVaHBFLEVBQU1ncEUsU0FDaEIydUIsZUFBZ0IzM0YsRUFBTW1HLE9BQ3RCZ3hGLFVBQVdsekQsSUFlZixNQUFNKzVELElBQW9CLElBQUE3dUUsYUFBVyxTQUFxQm1zRSxFQUFPOXNGLEdBQy9ELElBQUksUUFDRnUxRSxFQUFPLGVBQ1BrYSxFQUFjLFFBQ2RqMEYsR0FBVSxFQUFLLE1BQ2ZoSyxFQUFLLE9BQ0xoRixFQUFNLEdBQ042RSxHQUNFeTdGLEVBQ0E0QyxFQUFPekMsR0FBOEJILEVBQU9NLElBRTVDNXRCLEVBQU9pcEIsRUFBUXAzRixHQUNmcytGLEVBQWtCQyxHQUFvQnYrRixFQUFJLENBQzVDbUssUUFBQUEsRUFDQWhLLE1BQUFBLEVBQ0FoRixPQUFBQSxJQVdGLE9BR0UsSUFBQXBELGVBQWMsSUFBSyxHQUFTLEdBQUlzbUcsRUFBTSxDQUNwQ2x3QixLQUFNQSxFQUNOK1YsUUFiSixTQUFxQmwrRSxHQUNmaytFLEdBQVNBLEVBQVFsK0UsR0FFaEJBLEVBQU0yK0Qsa0JBQXFCeTVCLEdBQzlCRSxFQUFnQnQ0RixJQVVoQjJJLElBQUtBLEVBQ0x4VCxPQUFRQSxRQVlScWpHLElBQXVCLElBQUFsdkUsYUFBVyxTQUF3Qm12RSxFQUFPOXZGLEdBQ3JFLElBQ0UsZUFBZ0IrdkYsRUFBa0IsT0FBTSxjQUN4Q2pLLEdBQWdCLEVBQ2hCa0ssVUFBV0MsRUFBZ0IsR0FBRSxJQUM3Qmg2RCxHQUFNLEVBQ04zckMsTUFBTzR6QixFQUFTLEdBQ2hCN3NCLEVBQUUsU0FDRmdpQixHQUNFeThFLEVBQ0FKLEVBQU96QyxHQUE4QjZDLEVBQU96QyxJQUU1Qzd5QixFQUFXeXVCLElBQ1h4ekUsRUFBT216RSxFQUFnQnYzRixHQUN2QisyRixFQUFtQjV0QixFQUFTc3BCLFNBQzVCOEQsRUFBYW55RSxFQUFLcXVFLFNBRWpCZ0MsSUFDSHNDLEVBQW1CQSxFQUFpQi9zRixjQUNwQ3VzRixFQUFhQSxFQUFXdnNGLGVBRzFCLElBRUkyMEYsRUFGQWw0RixFQUFXc3dGLElBQXFCUixJQUFlM3hELEdBQU9teUQsRUFBaUJubUcsV0FBVzJsRyxJQUE4RCxNQUEvQ1EsRUFBaUJ6OEIsT0FBT2k4QixFQUFXcmlHLFFBQ3BJMnFHLEVBQWNwNEYsRUFBV2k0RixPQUFrQnJ4RyxFQUk3Q3N4RyxFQUQyQixtQkFBbEJDLEVBQ0dBLEVBQWMsQ0FDeEJuNEYsU0FBQUEsSUFRVSxDQUFDbTRGLEVBQWVuNEYsRUFBVyxTQUFXLE1BQU16SyxPQUFPekssU0FBU3NlLEtBQUssS0FHL0UsSUFBSTVXLEVBQTZCLG1CQUFkNHpCLEVBQTJCQSxFQUFVLENBQ3REcG1CLFNBQUFBLElBQ0dvbUIsRUFDTCxPQUFvQixJQUFBOTBCLGVBQWNvbUcsR0FBTSxHQUFTLEdBQUlFLEVBQU0sQ0FDekQsZUFBZ0JRLEVBQ2hCRixVQUFXQSxFQUNYaHdGLElBQUtBLEVBQ0wxVixNQUFPQSxFQUNQK0csR0FBSUEsSUFDa0IsbUJBQWJnaUIsRUFBMEJBLEVBQVMsQ0FDNUN2YixTQUFBQSxJQUNHdWIsTUFnQlAsU0FBU3U4RSxHQUFvQnYrRixFQUFJOCtGLEdBQy9CLElBQUksT0FDRjNqRyxFQUNBZ1AsUUFBUzQwRixFQUFXLE1BQ3BCNStGLFFBQ1ksSUFBVjIrRixFQUFtQixHQUFLQSxFQUN4QmpFLEVBQVc3QyxJQUNYN3VCLEVBQVd5dUIsSUFDWHh6RSxFQUFPbXpFLEVBQWdCdjNGLEdBQzNCLE9BQU8sSUFBQW14QixjQUFZbnJCLElBQ2pCLEtBQXFCLElBQWpCQSxFQUFNaXpCLFFBQ1Q5OUIsR0FBcUIsVUFBWEEsR0FqSWYsU0FBeUI2SyxHQUN2QixTQUFVQSxFQUFNdWdFLFNBQVd2Z0UsRUFBTXNnRSxRQUFVdGdFLEVBQU1vZ0UsU0FBV3BnRSxFQUFNcWdFLFVBaUkvRDI0QixDQUFnQmg1RixJQUNmLENBQ0FBLEVBQU04K0QsaUJBR04sSUFBSTM2RCxJQUFZNDBGLEdBQWV6TSxFQUFXbnBCLEtBQWNtcEIsRUFBV2x1RSxHQUNuRXkyRSxFQUFTNzZGLEVBQUksQ0FDWG1LLFFBQUFBLEVBQ0FoSyxNQUFBQSxPQUdILENBQUNncEUsRUFBVTB4QixFQUFVejJFLEVBQU0yNkUsRUFBYTUrRixFQUFPaEYsRUFBUTZFLElBTzVELFNBQVNpL0YsR0FBZ0JDLEdBRXZCLElBQUlDLEdBQXlCLElBQUFudkYsUUFBT292RixHQUFtQkYsSUFDbkQvMUIsRUFBV3l1QixJQUNYeUgsR0FBZSxJQUFBeHZFLFVBQVEsS0FDekIsSUFBSXd2RSxFQUFlRCxHQUFtQmoyQixFQUFTeUMsUUFFL0MsSUFBSyxJQUFJOXlFLEtBQU9xbUcsRUFBdUIvaEcsUUFBUXVLLE9BQ3hDMDNGLEVBQWEzeEcsSUFBSW9MLElBQ3BCcW1HLEVBQXVCL2hHLFFBQVFraUcsT0FBT3htRyxHQUFLakosU0FBUXdCLElBQ2pEZ3VHLEVBQWFFLE9BQU96bUcsRUFBS3pILE1BSy9CLE9BQU9ndUcsSUFDTixDQUFDbDJCLEVBQVN5QyxTQUNUaXZCLEVBQVc3QyxJQUlmLE1BQU8sQ0FBQ3FILEdBSGMsSUFBQWx1RSxjQUFZLENBQUNxdUUsRUFBVUMsS0FDM0M1RSxFQUFTLElBQU11RSxHQUFtQkksR0FBV0MsS0FDNUMsQ0FBQzVFLEtBeUJOLFNBQVN1RSxHQUFtQnJ2RixHQUsxQixZQUphLElBQVRBLElBQ0ZBLEVBQU8sSUFHRixJQUFJMnZGLGdCQUFnQyxpQkFBVDN2RixHQUFxQnJlLE1BQU1DLFFBQVFvZSxJQUFTQSxhQUFnQjJ2RixnQkFBa0IzdkYsRUFBTzNYLE9BQU91UCxLQUFLb0ksR0FBTXhmLFFBQU8sQ0FBQzBsRyxFQUFNbjlGLEtBQ3JKLElBQUl6SCxFQUFRMGUsRUFBS2pYLEdBQ2pCLE9BQU9tOUYsRUFBS3ppRixPQUFPOWhCLE1BQU1DLFFBQVFOLEdBQVNBLEVBQU15RSxLQUFJNUgsR0FBSyxDQUFDNEssRUFBSzVLLEtBQU0sQ0FBQyxDQUFDNEssRUFBS3pILE9BQzNFLGdDQ3BXUSxJQUFJMHlELEVBQUVMLE9BQU9DLElBQUksaUJBQWlCMzRDLEVBQUUwNEMsT0FBT0MsSUFBSSxnQkFBZ0JodUQsRUFBRSt0RCxPQUFPQyxJQUFJLGtCQUFrQkssRUFBRU4sT0FBT0MsSUFBSSxxQkFBcUJNLEVBQUVQLE9BQU9DLElBQUksa0JBQWtCOXhELEVBQUU2eEQsT0FBT0MsSUFBSSxrQkFBa0JRLEVBQUVULE9BQU9DLElBQUksaUJBQWlCejFELEVBQUV3MUQsT0FBT0MsSUFBSSxxQkFBcUJPLEVBQUVSLE9BQU9DLElBQUksa0JBQWtCNzBELEVBQUU0MEQsT0FBT0MsSUFBSSxjQUFjNTBELEVBQUUyMEQsT0FBT0MsSUFBSSxjQUFjMzBELEVBQUUwMEQsT0FBTy85QyxTQUNyVys0RCxFQUFFLENBQUNqMUQsVUFBVSxXQUFXLE9BQU0sR0FBSXN2RSxtQkFBbUIsYUFBYUQsb0JBQW9CLGFBQWFKLGdCQUFnQixjQUFjMVgsRUFBRTVvRSxPQUFPZ0QsT0FBT2cyRSxFQUFFLEdBQUcsU0FBU2tELEVBQUV0a0YsRUFBRUMsRUFBRTBJLEdBQUc1TCxLQUFLK2UsTUFBTTliLEVBQUVqRCxLQUFLb2IsUUFBUWxZLEVBQUVsRCxLQUFLdXJGLEtBQUtsSCxFQUFFcmtGLEtBQUtxc0YsUUFBUXpnRixHQUFHK2xFLEVBQ3lJLFNBQVNvVCxLQUE2QixTQUFTeUMsRUFBRXZrRixFQUFFQyxFQUFFMEksR0FBRzVMLEtBQUsrZSxNQUFNOWIsRUFBRWpELEtBQUtvYixRQUFRbFksRUFBRWxELEtBQUt1ckYsS0FBS2xILEVBQUVya0YsS0FBS3FzRixRQUFRemdGLEdBQUcrbEUsRUFEdlA0VixFQUFFOTdFLFVBQVU0MEYsaUJBQWlCLEdBQ25ROVksRUFBRTk3RSxVQUFVaWlHLFNBQVMsU0FBU3pxRyxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLG1CQUFvQkEsR0FBRyxNQUFNQSxFQUFFLE1BQU00akUsTUFBTSx5SEFBeUg3bUUsS0FBS3FzRixRQUFRVixnQkFBZ0IzckYsS0FBS2lELEVBQUVDLEVBQUUsYUFBYXFrRixFQUFFOTdFLFVBQVVnbUQsWUFBWSxTQUFTeHVELEdBQUdqRCxLQUFLcXNGLFFBQVFMLG1CQUFtQmhzRixLQUFLaUQsRUFBRSxnQkFBOEI4aEYsRUFBRXQ1RSxVQUFVODdFLEVBQUU5N0UsVUFBc0YsSUFBSWk4RSxFQUFFRixFQUFFLzdFLFVBQVUsSUFBSXM1RSxFQUNyZjJDLEVBQUUvL0UsWUFBWTYvRSxFQUFFdlQsRUFBRXlULEVBQUVILEVBQUU5N0UsV0FBV2k4RSxFQUFFeUUsc0JBQXFCLEVBQUcsSUFBSXdCLEVBQUVocEYsTUFBTUMsUUFBUWtnRixFQUFFejVFLE9BQU9JLFVBQVVILGVBQWU4a0YsRUFBRSxDQUFDLy9FLFFBQVEsTUFBTXlnRixFQUFFLENBQUMva0YsS0FBSSxFQUFHNlYsS0FBSSxFQUFHZ3hGLFFBQU8sRUFBR0MsVUFBUyxHQUN0SyxTQUFTOWhCLEVBQUU5dEYsRUFBRUMsRUFBRTBJLEdBQUcsSUFBSWYsRUFBRUQsRUFBRSxHQUFHdVQsRUFBRSxLQUFLNDRDLEVBQUUsS0FBSyxHQUFHLE1BQU03ekQsRUFBRSxJQUFJMkgsVUFBSyxJQUFTM0gsRUFBRTBlLE1BQU1tMUMsRUFBRTd6RCxFQUFFMGUsVUFBSyxJQUFTMWUsRUFBRTZJLE1BQU1vUyxFQUFFLEdBQUdqYixFQUFFNkksS0FBSzdJLEVBQUU0aEYsRUFBRXQ3RSxLQUFLdEcsRUFBRTJILEtBQUtpbUYsRUFBRXhsRixlQUFlVCxLQUFLRCxFQUFFQyxHQUFHM0gsRUFBRTJILElBQUksSUFBSWlzRCxFQUFFci9CLFVBQVV0d0IsT0FBTyxFQUFFLEdBQUcsSUFBSTJ2RCxFQUFFbHNELEVBQUVxcUIsU0FBU3JwQixPQUFPLEdBQUcsRUFBRWtyRCxFQUFFLENBQUMsSUFBSSxJQUFJRCxFQUFFbHlELE1BQU1teUQsR0FBR3RRLEVBQUUsRUFBRUEsRUFBRXNRLEVBQUV0USxJQUFJcVEsRUFBRXJRLEdBQUcvdUIsVUFBVSt1QixFQUFFLEdBQUc1N0MsRUFBRXFxQixTQUFTNGhDLEVBQUUsR0FBRzV6RCxHQUFHQSxFQUFFMHhELGFBQWEsSUFBSTlwRCxLQUFLaXNELEVBQUU3ekQsRUFBRTB4RCxrQkFBZSxJQUFTL3BELEVBQUVDLEtBQUtELEVBQUVDLEdBQUdpc0QsRUFBRWpzRCxJQUFJLE1BQU0sQ0FBQ3dzRCxTQUFTTCxFQUFFandDLEtBQUs5akIsRUFBRThJLElBQUlvUyxFQUFFeUQsSUFBSW0xQyxFQUFFaDRDLE1BQU1uVSxFQUFFbWtGLE9BQU9xQixFQUFFLy9FLFNBQ3hVLFNBQVNnaEYsRUFBRXB1RixHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVvMEQsV0FBV0wsRUFBcUcsSUFBSWc4QixFQUFFLE9BQU8sU0FBUzJELEVBQUUxekYsRUFBRUMsR0FBRyxNQUFNLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLE1BQU1BLEVBQUU4SSxJQUE3SyxTQUFnQjlJLEdBQUcsSUFBSUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJRCxFQUFFbWEsUUFBUSxTQUFRLFNBQVNuYSxHQUFHLE9BQU9DLEVBQUVELE1BQW1GNnZHLENBQU8sR0FBRzd2RyxFQUFFOEksS0FBSzdJLEVBQUVpbkUsU0FBUyxJQUM1VyxTQUFTcXRCLEVBQUV2MEYsRUFBRUMsRUFBRTBJLEVBQUVmLEVBQUVELEdBQUcsSUFBSXVULFNBQVNsYixFQUFLLGNBQWNrYixHQUFHLFlBQVlBLElBQUVsYixFQUFFLE1BQUssSUFBSTh6RCxHQUFFLEVBQUcsR0FBRyxPQUFPOXpELEVBQUU4ekQsR0FBRSxPQUFRLE9BQU81NEMsR0FBRyxJQUFLLFNBQVMsSUFBSyxTQUFTNDRDLEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPOXpELEVBQUVvMEQsVUFBVSxLQUFLTCxFQUFFLEtBQUsvNEMsRUFBRTg0QyxHQUFFLEdBQUksR0FBR0EsRUFBRSxPQUFXbnNELEVBQUVBLEVBQU5tc0QsRUFBRTl6RCxHQUFTQSxFQUFFLEtBQUs0SCxFQUFFLElBQUk4ckYsRUFBRTUvQixFQUFFLEdBQUdsc0QsRUFBRThpRixFQUFFL2lGLElBQUlnQixFQUFFLEdBQUcsTUFBTTNJLElBQUkySSxFQUFFM0ksRUFBRW1hLFFBQVE0MUUsRUFBRSxPQUFPLEtBQUt3RSxFQUFFNXNGLEVBQUUxSCxFQUFFMEksRUFBRSxJQUFHLFNBQVMzSSxHQUFHLE9BQU9BLE1BQUssTUFBTTJILElBQUl5bUYsRUFBRXptRixLQUFLQSxFQURuVyxTQUFXM0gsRUFBRUMsR0FBRyxNQUFNLENBQUNtMEQsU0FBU0wsRUFBRWp3QyxLQUFLOWpCLEVBQUU4akIsS0FBS2hiLElBQUk3SSxFQUFFMGUsSUFBSTNlLEVBQUUyZSxJQUFJN0MsTUFBTTliLEVBQUU4YixNQUFNZ3dFLE9BQU85ckYsRUFBRThyRixRQUNnUmlDLENBQUVwbUYsRUFBRWdCLElBQUloQixFQUFFbUIsS0FBS2dyRCxHQUFHQSxFQUFFaHJELE1BQU1uQixFQUFFbUIsSUFBSSxJQUFJLEdBQUduQixFQUFFbUIsS0FBS3FSLFFBQVE0MUUsRUFBRSxPQUFPLEtBQUsvdkYsSUFBSUMsRUFBRTFCLEtBQUtvSixJQUFJLEVBQXlCLEdBQXZCbXNELEVBQUUsRUFBRWxzRCxFQUFFLEtBQUtBLEVBQUUsSUFBSUEsRUFBRSxJQUFPOGlGLEVBQUUxcUYsR0FBRyxJQUFJLElBQUk2ekQsRUFBRSxFQUFFQSxFQUFFN3pELEVBQUVrRSxPQUFPMnZELElBQUksQ0FDL2UsSUFBSUQsRUFBRWhzRCxFQUFFOHJGLEVBRHdleDRFLEVBQ3JmbGIsRUFBRTZ6RCxHQUFlQSxHQUFHQyxHQUFHeWdDLEVBQUVyNUUsRUFBRWpiLEVBQUUwSSxFQUFFaXJELEVBQUVqc0QsUUFBUSxHQUFHaXNELEVBUHNVLFNBQVc1ekQsR0FBRyxPQUFHLE9BQU9BLEdBQUcsaUJBQWtCQSxFQUFTLEtBQXNDLG1CQUFqQ0EsRUFBRWhCLEdBQUdnQixFQUFFaEIsSUFBSWdCLEVBQUUsZUFBMENBLEVBQUUsS0FPeGJxMEQsQ0FBRXIwRCxHQUFHLG1CQUFvQjR6RCxFQUFFLElBQUk1ekQsRUFBRTR6RCxFQUFFcnRELEtBQUt2RyxHQUFHNnpELEVBQUUsSUFBSTM0QyxFQUFFbGIsRUFBRXFOLFFBQVErQyxNQUE2QjBqRCxHQUFHeWdDLEVBQTFCcjVFLEVBQUVBLEVBQUU3WixNQUEwQnBCLEVBQUUwSSxFQUF0QmlyRCxFQUFFaHNELEVBQUU4ckYsRUFBRXg0RSxFQUFFMjRDLEtBQWtCbHNELFFBQVEsR0FBRyxXQUFXdVQsRUFBRSxNQUFNamIsRUFBRSs0RSxPQUFPaDVFLEdBQUc0akUsTUFBTSxtREFBbUQsb0JBQW9CM2pFLEVBQUUscUJBQXFCbUksT0FBT3VQLEtBQUszWCxHQUFHNmYsS0FBSyxNQUFNLElBQUk1ZixHQUFHLDZFQUE2RSxPQUFPNnpELEVBQ3haLFNBQVNzakMsRUFBRXAzRixFQUFFQyxFQUFFMEksR0FBRyxHQUFHLE1BQU0zSSxFQUFFLE9BQU9BLEVBQUUsSUFBSTRILEVBQUUsR0FBR0QsRUFBRSxFQUFtRCxPQUFqRDRzRixFQUFFdjBGLEVBQUU0SCxFQUFFLEdBQUcsSUFBRyxTQUFTNUgsR0FBRyxPQUFPQyxFQUFFc0csS0FBS29DLEVBQUUzSSxFQUFFMkgsUUFBY0MsRUFBRSxTQUFTMHZGLEVBQUV0M0YsR0FBRyxJQUFJLElBQUlBLEVBQUU4dkcsUUFBUSxDQUFDLElBQUk3dkcsRUFBRUQsRUFBRSt2RyxTQUFROXZHLEVBQUVBLEtBQU1oRCxNQUFLLFNBQVNnRCxHQUFNLElBQUlELEVBQUU4dkcsVUFBVSxJQUFJOXZHLEVBQUU4dkcsVUFBUTl2RyxFQUFFOHZHLFFBQVEsRUFBRTl2RyxFQUFFK3ZHLFFBQVE5dkcsTUFBRyxTQUFTQSxHQUFNLElBQUlELEVBQUU4dkcsVUFBVSxJQUFJOXZHLEVBQUU4dkcsVUFBUTl2RyxFQUFFOHZHLFFBQVEsRUFBRTl2RyxFQUFFK3ZHLFFBQVE5dkcsT0FBSyxJQUFJRCxFQUFFOHZHLFVBQVU5dkcsRUFBRTh2RyxRQUFRLEVBQUU5dkcsRUFBRSt2RyxRQUFROXZHLEdBQUcsR0FBRyxJQUFJRCxFQUFFOHZHLFFBQVEsT0FBTzl2RyxFQUFFK3ZHLFFBQVF0ckYsUUFBUSxNQUFNemtCLEVBQUUrdkcsUUFDcFosSUFBSXZZLEVBQUUsQ0FBQ3BxRixRQUFRLE1BQU1pckYsRUFBRSxDQUFDci9FLFdBQVcsTUFBTTRnRixFQUFFLENBQUNsTSx1QkFBdUI4SixFQUFFcGtCLHdCQUF3QmlsQixFQUFFckQsa0JBQWtCN0gsR0FBRzl5RSxFQUFRcXhDLFNBQVMsQ0FBQzVsRCxJQUFJc3hGLEVBQUV2M0YsUUFBUSxTQUFTRyxFQUFFQyxFQUFFMEksR0FBR3l1RixFQUFFcDNGLEdBQUUsV0FBV0MsRUFBRXkwQixNQUFNMzNCLEtBQUt5M0IsYUFBWTdyQixJQUFJcW5HLE1BQU0sU0FBU2h3RyxHQUFHLElBQUlDLEVBQUUsRUFBdUIsT0FBckJtM0YsRUFBRXAzRixHQUFFLFdBQVdDLE9BQWFBLEdBQUdnd0csUUFBUSxTQUFTandHLEdBQUcsT0FBT28zRixFQUFFcDNGLEdBQUUsU0FBU0EsR0FBRyxPQUFPQSxNQUFLLElBQUlrd0csS0FBSyxTQUFTbHdHLEdBQUcsSUFBSW91RixFQUFFcHVGLEdBQUcsTUFBTTRqRSxNQUFNLHlFQUF5RSxPQUFPNWpFLElBQUlxYSxFQUFRcUMsVUFBVTRuRSxFQUFFanFFLEVBQVE2eEMsU0FBU3ZtRCxFQUNuZTBVLEVBQVF1NkMsU0FBU1gsRUFBRTU1QyxFQUFRODFGLGNBQWM1ckIsRUFBRWxxRSxFQUFRdzZDLFdBQVdiLEVBQUUzNUMsRUFBUXk2QyxTQUFTWixFQUFFNzVDLEVBQVFxb0QsbURBQW1EazNCLEVBQzlJdi9FLEVBQVFveUMsYUFBYSxTQUFTenNELEVBQUVDLEVBQUUwSSxHQUFHLEdBQUcsTUFBTzNJLEVBQWMsTUFBTTRqRSxNQUFNLGlGQUFpRjVqRSxFQUFFLEtBQUssSUFBSTRILEVBQUVvcEUsRUFBRSxHQUFHaHhFLEVBQUU4YixPQUFPblUsRUFBRTNILEVBQUU4SSxJQUFJb1MsRUFBRWxiLEVBQUUyZSxJQUFJbTFDLEVBQUU5ekQsRUFBRThyRixPQUFPLEdBQUcsTUFBTTdyRixFQUFFLENBQW9FLFFBQW5FLElBQVNBLEVBQUUwZSxNQUFNekQsRUFBRWpiLEVBQUUwZSxJQUFJbTFDLEVBQUVxNUIsRUFBRS8vRSxjQUFTLElBQVNuTixFQUFFNkksTUFBTW5CLEVBQUUsR0FBRzFILEVBQUU2SSxLQUFROUksRUFBRThqQixNQUFNOWpCLEVBQUU4akIsS0FBSzR0QyxhQUFhLElBQUltQyxFQUFFN3pELEVBQUU4akIsS0FBSzR0QyxhQUFhLElBQUlrQyxLQUFLM3pELEVBQUU0aEYsRUFBRXQ3RSxLQUFLdEcsRUFBRTJ6RCxLQUFLaTZCLEVBQUV4bEYsZUFBZXVyRCxLQUFLaHNELEVBQUVnc0QsUUFBRyxJQUFTM3pELEVBQUUyekQsU0FBSSxJQUFTQyxFQUFFQSxFQUFFRCxHQUFHM3pELEVBQUUyekQsSUFBSSxJQUFJQSxFQUFFcC9CLFVBQVV0d0IsT0FBTyxFQUFFLEdBQUcsSUFBSTB2RCxFQUFFaHNELEVBQUVvcUIsU0FBU3JwQixPQUFPLEdBQUcsRUFBRWlyRCxFQUFFLENBQUNDLEVBQUVueUQsTUFBTWt5RCxHQUNyZixJQUFJLElBQUlyUSxFQUFFLEVBQUVBLEVBQUVxUSxFQUFFclEsSUFBSXNRLEVBQUV0USxHQUFHL3VCLFVBQVUrdUIsRUFBRSxHQUFHMzdDLEVBQUVvcUIsU0FBUzZoQyxFQUFFLE1BQU0sQ0FBQ08sU0FBU0wsRUFBRWp3QyxLQUFLOWpCLEVBQUU4akIsS0FBS2hiLElBQUluQixFQUFFZ1gsSUFBSXpELEVBQUVZLE1BQU1sVSxFQUFFa2tGLE9BQU9oNEIsSUFBSXo1QyxFQUFRdUMsY0FBYyxTQUFTNWMsR0FBcUssT0FBbEtBLEVBQUUsQ0FBQ28wRCxTQUFTRCxFQUFFaXlCLGNBQWNwbUYsRUFBRW93RyxlQUFlcHdHLEVBQUVxd0csYUFBYSxFQUFFbnZFLFNBQVMsS0FBS292RSxTQUFTLEtBQUtDLGNBQWMsS0FBS0MsWUFBWSxPQUFRdHZFLFNBQVMsQ0FBQ2t6QixTQUFTdnlELEVBQUV3aUUsU0FBU3JrRSxHQUFVQSxFQUFFc3dHLFNBQVN0d0csR0FBR3FhLEVBQVF0UyxjQUFjK2xGLEVBQUV6ekUsRUFBUW8yRixjQUFjLFNBQVN6d0csR0FBRyxJQUFJQyxFQUFFNnRGLEVBQUVuTSxLQUFLLEtBQUszaEYsR0FBWSxPQUFUQyxFQUFFNmpCLEtBQUs5akIsRUFBU0MsR0FBR29hLEVBQVFxMkYsVUFBVSxXQUFXLE1BQU0sQ0FBQ3RqRyxRQUFRLE9BQ3pkaU4sRUFBUWlsQixXQUFXLFNBQVN0L0IsR0FBRyxNQUFNLENBQUNvMEQsU0FBU2wyRCxFQUFFK2lCLE9BQU9qaEIsSUFBSXFhLEVBQVFzeEMsZUFBZXlpQyxFQUFFL3pFLEVBQVFzMkYsS0FBSyxTQUFTM3dHLEdBQUcsTUFBTSxDQUFDbzBELFNBQVNyMUQsRUFBRXVsRSxTQUFTLENBQUN3ckMsU0FBUyxFQUFFQyxRQUFRL3ZHLEdBQUd1a0UsTUFBTSt5QixJQUFJajlFLEVBQVE0ckYsS0FBSyxTQUFTam1HLEVBQUVDLEdBQUcsTUFBTSxDQUFDbTBELFNBQVN0MUQsRUFBRWdsQixLQUFLOWpCLEVBQUVzeUQsYUFBUSxJQUFTcnlELEVBQUUsS0FBS0EsSUFBSW9hLEVBQVF3d0MsZ0JBQWdCLFNBQVM3cUQsR0FBRyxJQUFJQyxFQUFFbzRGLEVBQUVyL0UsV0FBV3EvRSxFQUFFci9FLFdBQVcsR0FBRyxJQUFJaFosSUFBSSxRQUFRcTRGLEVBQUVyL0UsV0FBVy9ZLElBQUlvYSxFQUFRdTJGLGFBQWEsV0FBVyxNQUFNaHRDLE1BQU0sNkRBQzlZdnBELEVBQVE4bUIsWUFBWSxTQUFTbmhDLEVBQUVDLEdBQUcsT0FBT3UzRixFQUFFcHFGLFFBQVErekIsWUFBWW5oQyxFQUFFQyxJQUFJb2EsRUFBUWlELFdBQVcsU0FBU3RkLEdBQUcsT0FBT3czRixFQUFFcHFGLFFBQVFrUSxXQUFXdGQsSUFBSXFhLEVBQVF5M0UsY0FBYyxhQUFhejNFLEVBQVEwM0UsaUJBQWlCLFNBQVMveEYsR0FBRyxPQUFPdzNGLEVBQUVwcUYsUUFBUTJrRixpQkFBaUIveEYsSUFBSXFhLEVBQVF1RCxVQUFVLFNBQVM1ZCxFQUFFQyxHQUFHLE9BQU91M0YsRUFBRXBxRixRQUFRd1EsVUFBVTVkLEVBQUVDLElBQUlvYSxFQUFRMnpCLE1BQU0sV0FBVyxPQUFPd3BELEVBQUVwcUYsUUFBUTRnQyxTQUFTM3pCLEVBQVFzM0Usb0JBQW9CLFNBQVMzeEYsRUFBRUMsRUFBRTBJLEdBQUcsT0FBTzZ1RixFQUFFcHFGLFFBQVF1a0Ysb0JBQW9CM3hGLEVBQUVDLEVBQUUwSSxJQUMzYjBSLEVBQVF1M0UsbUJBQW1CLFNBQVM1eEYsRUFBRUMsR0FBRyxPQUFPdTNGLEVBQUVwcUYsUUFBUXdrRixtQkFBbUI1eEYsRUFBRUMsSUFBSW9hLEVBQVFzRCxnQkFBZ0IsU0FBUzNkLEVBQUVDLEdBQUcsT0FBT3UzRixFQUFFcHFGLFFBQVF1USxnQkFBZ0IzZCxFQUFFQyxJQUFJb2EsRUFBUXdsQixRQUFRLFNBQVM3L0IsRUFBRUMsR0FBRyxPQUFPdTNGLEVBQUVwcUYsUUFBUXl5QixRQUFRNy9CLEVBQUVDLElBQUlvYSxFQUFRdzNFLFdBQVcsU0FBUzd4RixFQUFFQyxFQUFFMEksR0FBRyxPQUFPNnVGLEVBQUVwcUYsUUFBUXlrRixXQUFXN3hGLEVBQUVDLEVBQUUwSSxJQUFJMFIsRUFBUTJGLE9BQU8sU0FBU2hnQixHQUFHLE9BQU93M0YsRUFBRXBxRixRQUFRNFMsT0FBT2hnQixJQUFJcWEsRUFBUWtFLFNBQVMsU0FBU3ZlLEdBQUcsT0FBT3czRixFQUFFcHFGLFFBQVFtUixTQUFTdmUsSUFBSXFhLEVBQVE2M0UscUJBQXFCLFNBQVNseUYsRUFBRUMsRUFBRTBJLEdBQUcsT0FBTzZ1RixFQUFFcHFGLFFBQVE4a0YscUJBQXFCbHlGLEVBQUVDLEVBQUUwSSxJQUM3ZTBSLEVBQVEyM0UsY0FBYyxXQUFXLE9BQU93RixFQUFFcHFGLFFBQVE0a0YsaUJBQWlCMzNFLEVBQVFvRyxRQUFRLHFDQ3RCakZ3eUMsRUFBTzU0QyxRQUFVLEVBQWpCLDhCQ01XLFNBQVN1NUMsRUFBRTV6RCxFQUFFQyxHQUFHLElBQUkwSCxFQUFFM0gsRUFBRWtFLE9BQU9sRSxFQUFFekIsS0FBSzBCLEdBQUdELEVBQUUsS0FBSyxFQUFFMkgsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUUsSUFBSSxFQUFFZ0IsRUFBRTNJLEVBQUU0SCxHQUFHLEtBQUcsRUFBRWlzRCxFQUFFbHJELEVBQUUxSSxJQUEwQixNQUFNRCxFQUE3QkEsRUFBRTRILEdBQUczSCxFQUFFRCxFQUFFMkgsR0FBR2dCLEVBQUVoQixFQUFFQyxHQUFnQixTQUFTa3NELEVBQUU5ekQsR0FBRyxPQUFPLElBQUlBLEVBQUVrRSxPQUFPLEtBQUtsRSxFQUFFLEdBQUcsU0FBU2tiLEVBQUVsYixHQUFHLEdBQUcsSUFBSUEsRUFBRWtFLE9BQU8sT0FBTyxLQUFLLElBQUlqRSxFQUFFRCxFQUFFLEdBQUcySCxFQUFFM0gsRUFBRXdtRyxNQUFNLEdBQUc3K0YsSUFBSTFILEVBQUUsQ0FBQ0QsRUFBRSxHQUFHMkgsRUFBRTNILEVBQUUsSUFBSSxJQUFJNEgsRUFBRSxFQUFFZSxFQUFFM0ksRUFBRWtFLE9BQU9nd0QsRUFBRXZyRCxJQUFJLEVBQUVmLEVBQUVzc0QsR0FBRyxDQUFDLElBQUkzUSxFQUFFLEdBQUczN0MsRUFBRSxHQUFHLEVBQUVvcEUsRUFBRWh4RSxFQUFFdWpELEdBQUd2b0MsRUFBRXVvQyxFQUFFLEVBQUV6a0QsRUFBRWtCLEVBQUVnYixHQUFHLEdBQUcsRUFBRTY0QyxFQUFFbWQsRUFBRXJwRSxHQUFHcVQsRUFBRXJTLEdBQUcsRUFBRWtyRCxFQUFFLzBELEVBQUVreUUsSUFBSWh4RSxFQUFFNEgsR0FBRzlJLEVBQUVrQixFQUFFZ2IsR0FBR3JULEVBQUVDLEVBQUVvVCxJQUFJaGIsRUFBRTRILEdBQUdvcEUsRUFBRWh4RSxFQUFFdWpELEdBQUc1N0MsRUFBRUMsRUFBRTI3QyxPQUFRLE1BQUd2b0MsRUFBRXJTLEdBQUcsRUFBRWtyRCxFQUFFLzBELEVBQUU2SSxJQUEwQixNQUFNM0gsRUFBN0JBLEVBQUU0SCxHQUFHOUksRUFBRWtCLEVBQUVnYixHQUFHclQsRUFBRUMsRUFBRW9ULElBQWdCLE9BQU8vYSxFQUMxYyxTQUFTNHpELEVBQUU3ekQsRUFBRUMsR0FBRyxJQUFJMEgsRUFBRTNILEVBQUU2d0csVUFBVTV3RyxFQUFFNHdHLFVBQVUsT0FBTyxJQUFJbHBHLEVBQUVBLEVBQUUzSCxFQUFFZ3pCLEdBQUcveUIsRUFBRSt5QixHQUFHLEdBQUcsaUJBQWtCcHNCLGFBQWEsbUJBQW9CQSxZQUFZRCxJQUFJLENBQUMsSUFBSW90RCxFQUFFbnRELFlBQVl5VCxFQUFRczBELGFBQWEsV0FBVyxPQUFPNWEsRUFBRXB0RCxXQUFXLENBQUMsSUFBSWhCLEVBQUVpa0QsS0FBS29LLEVBQUVydUQsRUFBRWdCLE1BQU0wVCxFQUFRczBELGFBQWEsV0FBVyxPQUFPaHBFLEVBQUVnQixNQUFNcXRELEdBQUcsSUFBSUMsRUFBRSxHQUFHcHlELEVBQUUsR0FBR3N5RCxFQUFFLEVBQUVqMkQsRUFBRSxLQUFLYSxFQUFFLEVBQUVDLEdBQUUsRUFBR3ExRCxHQUFFLEVBQUdxYSxHQUFFLEVBQUcwUyxFQUFFLG1CQUFvQnIyRCxXQUFXQSxXQUFXLEtBQUt1NUQsRUFBRSxtQkFBb0J0NUQsYUFBYUEsYUFBYSxLQUFLODJELEVBQUUsb0JBQXFCZ3ZCLGFBQWFBLGFBQWEsS0FDblQsU0FBU3ZzQixFQUFFdmtGLEdBQUcsSUFBSSxJQUFJQyxFQUFFNnpELEVBQUVqeUQsR0FBRyxPQUFPNUIsR0FBRyxDQUFDLEdBQUcsT0FBT0EsRUFBRW94QixTQUFTblcsRUFBRXJaLE9BQVEsTUFBRzVCLEVBQUU0RSxXQUFXN0UsR0FBZ0QsTUFBOUNrYixFQUFFclosR0FBRzVCLEVBQUU0d0csVUFBVTV3RyxFQUFFOHdHLGVBQWVuOUMsRUFBRUssRUFBRWgwRCxHQUFjQSxFQUFFNnpELEVBQUVqeUQsSUFBSSxTQUFTNGlGLEVBQUV6a0YsR0FBYSxHQUFWMHVFLEdBQUUsRUFBRzZWLEVBQUV2a0YsSUFBT3EwRCxFQUFFLEdBQUcsT0FBT1AsRUFBRUcsR0FBR0ksR0FBRSxFQUFHcTJCLEVBQUU3SSxPQUFPLENBQUMsSUFBSTVoRixFQUFFNnpELEVBQUVqeUQsR0FBRyxPQUFPNUIsR0FBR2t0RixFQUFFMUksRUFBRXhrRixFQUFFNEUsVUFBVTdFLElBQ2xhLFNBQVM2aEYsRUFBRTdoRixFQUFFQyxHQUFHbzBELEdBQUUsRUFBR3FhLElBQUlBLEdBQUUsRUFBRzRWLEVBQUV1SixHQUFHQSxHQUFHLEdBQUc3dUYsR0FBRSxFQUFHLElBQUkySSxFQUFFNUksRUFBRSxJQUFTLElBQUx3bEYsRUFBRXRrRixHQUFPL0IsRUFBRTQxRCxFQUFFRyxHQUFHLE9BQU8vMUQsTUFBTUEsRUFBRTZ5RyxlQUFlOXdHLElBQUlELElBQUk4dEYsTUFBTSxDQUFDLElBQUlsbUYsRUFBRTFKLEVBQUVtekIsU0FBUyxHQUFHLG1CQUFvQnpwQixFQUFFLENBQUMxSixFQUFFbXpCLFNBQVMsS0FBS3R5QixFQUFFYixFQUFFOHlHLGNBQWMsSUFBSXJvRyxFQUFFZixFQUFFMUosRUFBRTZ5RyxnQkFBZ0I5d0csR0FBR0EsRUFBRW9hLEVBQVFzMEQsZUFBZSxtQkFBb0JobUUsRUFBRXpLLEVBQUVtekIsU0FBUzFvQixFQUFFekssSUFBSTQxRCxFQUFFRyxJQUFJLzRDLEVBQUUrNEMsR0FBR3N3QixFQUFFdGtGLFFBQVFpYixFQUFFKzRDLEdBQUcvMUQsRUFBRTQxRCxFQUFFRyxHQUFHLEdBQUcsT0FBTy8xRCxFQUFFLElBQUlnMkQsR0FBRSxNQUFPLENBQUMsSUFBSTNRLEVBQUV1USxFQUFFanlELEdBQUcsT0FBTzBoRCxHQUFHNHBDLEVBQUUxSSxFQUFFbGhDLEVBQUUxK0MsVUFBVTVFLEdBQUdpMEQsR0FBRSxFQUFHLE9BQU9BLEVBQUUsUUFBUWgyRCxFQUFFLEtBQUthLEVBQUU0SSxFQUFFM0ksR0FBRSxHQUR2YSxvQkFBcUJzb0csZ0JBQVcsSUFBU0EsVUFBVTJKLGlCQUFZLElBQVMzSixVQUFVMkosV0FBV0MsZ0JBQWdCNUosVUFBVTJKLFdBQVdDLGVBQWV2dkIsS0FBSzJsQixVQUFVMkosWUFDMlEsSUFDelA3WixFQUQ2UHJKLEdBQUUsRUFBR0ssRUFBRSxLQUFLUCxHQUFHLEVBQUVrQyxFQUFFLEVBQUUyRCxHQUFHLEVBQ3ZjLFNBQVM1RixJQUFJLFFBQU96ekUsRUFBUXMwRCxlQUFlK2tCLEVBQUUzRCxHQUFRLFNBQVN3RSxJQUFJLEdBQUcsT0FBT25HLEVBQUUsQ0FBQyxJQUFJcHVGLEVBQUVxYSxFQUFRczBELGVBQWUra0IsRUFBRTF6RixFQUFFLElBQUlDLEdBQUUsRUFBRyxJQUFJQSxFQUFFbXVGLEdBQUUsRUFBR3B1RixHQUFHLFFBQVFDLEVBQUVtM0YsS0FBS3JKLEdBQUUsRUFBR0ssRUFBRSxZQUFZTCxHQUFFLEVBQVMsR0FBRyxtQkFBb0JqTSxFQUFFc1YsRUFBRSxXQUFXdFYsRUFBRXlTLFNBQVMsR0FBRyxvQkFBcUI0YyxlQUFlLENBQUMsSUFBSTdaLEVBQUUsSUFBSTZaLGVBQWUzWixFQUFFRixFQUFFOFosTUFBTTlaLEVBQUUrWixNQUFNQyxVQUFVL2MsRUFBRTZDLEVBQUUsV0FBV0ksRUFBRStaLFlBQVksWUFBWW5hLEVBQUUsV0FBV2hXLEVBQUVtVCxFQUFFLElBQUksU0FBUzdKLEVBQUUxcUYsR0FBR291RixFQUFFcHVGLEVBQUUrdEYsSUFBSUEsR0FBRSxFQUFHcUosS0FBSyxTQUFTakssRUFBRW50RixFQUFFQyxHQUFHNHRGLEVBQUV6TSxHQUFFLFdBQVdwaEYsRUFBRXFhLEVBQVFzMEQsa0JBQWlCMXVFLEdBQzFkb2EsRUFBUWsxRCxzQkFBc0IsRUFBRWwxRCxFQUFRMDBELDJCQUEyQixFQUFFMTBELEVBQVFnMUQscUJBQXFCLEVBQUVoMUQsRUFBUTgwRCx3QkFBd0IsRUFBRTkwRCxFQUFRbTNGLG1CQUFtQixLQUFLbjNGLEVBQVE0MEQsOEJBQThCLEVBQUU1MEQsRUFBUWcwRCx3QkFBd0IsU0FBU3J1RSxHQUFHQSxFQUFFcXhCLFNBQVMsTUFBTWhYLEVBQVFvM0YsMkJBQTJCLFdBQVdwOUMsR0FBR3IxRCxJQUFJcTFELEdBQUUsRUFBR3EyQixFQUFFN0ksS0FDdlV4bkUsRUFBUXEzRix3QkFBd0IsU0FBUzF4RyxHQUFHLEVBQUVBLEdBQUcsSUFBSUEsRUFBRXdzQyxRQUFRNlgsTUFBTSxtSEFBbUgwckMsRUFBRSxFQUFFL3ZGLEVBQUUwQyxLQUFLa0IsTUFBTSxJQUFJNUQsR0FBRyxHQUFHcWEsRUFBUXcwRCxpQ0FBaUMsV0FBVyxPQUFPOXZFLEdBQUdzYixFQUFRczNGLDhCQUE4QixXQUFXLE9BQU83OUMsRUFBRUcsSUFBSTU1QyxFQUFRdTNGLGNBQWMsU0FBUzV4RyxHQUFHLE9BQU9qQixHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUlrQixFQUFFLEVBQUUsTUFBTSxRQUFRQSxFQUFFbEIsRUFBRSxJQUFJNEksRUFBRTVJLEVBQUVBLEVBQUVrQixFQUFFLElBQUksT0FBT0QsSUFBSSxRQUFRakIsRUFBRTRJLElBQUkwUyxFQUFRdzNGLHdCQUF3QixhQUNuZngzRixFQUFRbzBELHNCQUFzQixhQUFhcDBELEVBQVF5M0YseUJBQXlCLFNBQVM5eEcsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxRQUFRQSxFQUFFLEVBQUUsSUFBSTJILEVBQUU1SSxFQUFFQSxFQUFFaUIsRUFBRSxJQUFJLE9BQU9DLElBQUksUUFBUWxCLEVBQUU0SSxJQUM5TDBTLEVBQVE4ekQsMEJBQTBCLFNBQVNudUUsRUFBRUMsRUFBRTBILEdBQUcsSUFBSUMsRUFBRXlTLEVBQVFzMEQsZUFBOEYsT0FBdENobkUsRUFBekMsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQWUsaUJBQVpBLEVBQUVBLEVBQUUzRyxRQUE2QixFQUFFMkcsRUFBRUMsRUFBRUQsRUFBT0MsRUFBUzVILEdBQUcsS0FBSyxFQUFFLElBQUkySSxHQUFHLEVBQUUsTUFBTSxLQUFLLEVBQUVBLEVBQUUsSUFBSSxNQUFNLEtBQUssRUFBRUEsRUFBRSxXQUFXLE1BQU0sS0FBSyxFQUFFQSxFQUFFLElBQUksTUFBTSxRQUFRQSxFQUFFLElBQW1OLE9BQXpNM0ksRUFBRSxDQUFDZ3pCLEdBQUdtaEMsSUFBSTlpQyxTQUFTcHhCLEVBQUUrd0csY0FBY2h4RyxFQUFFNkUsVUFBVThDLEVBQUVvcEcsZUFBdkRwb0csRUFBRWhCLEVBQUVnQixFQUFvRWtvRyxXQUFXLEdBQUdscEcsRUFBRUMsR0FBRzVILEVBQUU2d0csVUFBVWxwRyxFQUFFaXNELEVBQUUveEQsRUFBRTdCLEdBQUcsT0FBTzh6RCxFQUFFRyxJQUFJajBELElBQUk4ekQsRUFBRWp5RCxLQUFLNnNFLEdBQUc0VixFQUFFdUosR0FBR0EsR0FBRyxHQUFHbmYsR0FBRSxFQUFHeWUsRUFBRTFJLEVBQUU5OEUsRUFBRUMsTUFBTTVILEVBQUU2d0csVUFBVWxvRyxFQUFFaXJELEVBQUVLLEVBQUVqMEQsR0FBR3EwRCxHQUFHcjFELElBQUlxMUQsR0FBRSxFQUFHcTJCLEVBQUU3SSxLQUFZN2hGLEdBQ2xlcWEsRUFBUWswRCxxQkFBcUJ1ZixFQUFFenpFLEVBQVEwM0Ysc0JBQXNCLFNBQVMveEcsR0FBRyxJQUFJQyxFQUFFbEIsRUFBRSxPQUFPLFdBQVcsSUFBSTRJLEVBQUU1SSxFQUFFQSxFQUFFa0IsRUFBRSxJQUFJLE9BQU9ELEVBQUUwMEIsTUFBTTMzQixLQUFLeTNCLFdBQVcsUUFBUXoxQixFQUFFNEksaUNDZjFKc3JELEVBQU81NEMsUUFBVSxFQUFqQixhQ0RGNDRDLEVBQU81NEMsUUFBVSxTQUFzQjIzRixFQUFNQyxFQUFNMy9DLEVBQVM0L0MsR0FDMUQsSUFBSUMsRUFBTTcvQyxFQUFVQSxFQUFRL3JELEtBQUsyckcsRUFBZ0JGLEVBQU1DLFFBQVEsRUFFL0QsUUFBWSxJQUFSRSxFQUNGLFFBQVNBLEVBR1gsR0FBSUgsSUFBU0MsRUFDWCxPQUFPLEVBR1QsR0FBb0IsaUJBQVRELElBQXNCQSxHQUF3QixpQkFBVEMsSUFBc0JBLEVBQ3BFLE9BQU8sRUFHVCxJQUFJRyxFQUFRaHFHLE9BQU91UCxLQUFLcTZGLEdBQ3BCSyxFQUFRanFHLE9BQU91UCxLQUFLczZGLEdBRXhCLEdBQUlHLEVBQU1sdUcsU0FBV211RyxFQUFNbnVHLE9BQ3pCLE9BQU8sRUFNVCxJQUhBLElBQUlvdUcsRUFBa0JscUcsT0FBT0ksVUFBVUgsZUFBZXM1RSxLQUFLc3dCLEdBR2xEM0YsRUFBTSxFQUFHQSxFQUFNOEYsRUFBTWx1RyxPQUFRb29HLElBQU8sQ0FDM0MsSUFBSXhqRyxFQUFNc3BHLEVBQU05RixHQUVoQixJQUFLZ0csRUFBZ0J4cEcsR0FDbkIsT0FBTyxFQUdULElBQUl5cEcsRUFBU1AsRUFBS2xwRyxHQUNkMHBHLEVBQVNQLEVBQUtucEcsR0FJbEIsSUFBWSxLQUZacXBHLEVBQU03L0MsRUFBVUEsRUFBUS9yRCxLQUFLMnJHLEVBQWdCSyxFQUFRQyxFQUFRMXBHLFFBQU8sU0FFdEMsSUFBUnFwRyxHQUFrQkksSUFBV0MsRUFDakQsT0FBTyxFQUlYLE9BQU8sNkJDMUNUcHFHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQS9CLENBQStDaFosT0FBTyxJQUV0RCxNQUFNMjRDLEVBQVEsQ0FBQ3QyQyxFQUFLQyxJQUFTekYsR0FBTXdFLEtBQUtpQixJQUFJakIsS0FBS2dCLElBQUl4RixFQUFHeUYsR0FBTUQsR0FDeEQrdUcsRUFBWXYwRyxHQUFPQSxFQUFJLEVBQUl3MEcsT0FBT3gwRyxFQUFFeTBHLFFBQVEsSUFBTXowRyxFQUNsRDAwRyxFQUFhLHVCQUNiQyxFQUFhLGdIQUNiQyxFQUFtQixvR0FDekIsU0FBU0MsRUFBUzcwRyxHQUNkLE1BQW9CLGlCQUFOQSxFQUdsQixNQUFNMG1CLEVBQVMsQ0FDWGpCLEtBQU96bEIsR0FBbUIsaUJBQU5BLEVBQ3BCcXdDLE1BQU96cUMsV0FDUG1HLFVBQVkvTCxHQUFNQSxHQUVoQm9wQixFQUFRbGYsT0FBT2dELE9BQU9oRCxPQUFPZ0QsT0FBTyxHQUFJd1osR0FBUyxDQUFFM2EsVUFBVyt2QyxFQUFNLEVBQUcsS0FDdkV4NkMsRUFBUTRJLE9BQU9nRCxPQUFPaEQsT0FBT2dELE9BQU8sR0FBSXdaLEdBQVMsQ0FBRUgsUUFBUyxJQUU1RHV1RixFQUFrQkMsSUFBUyxDQUM3QnR2RixLQUFPemxCLEdBQU02MEcsRUFBUzcwRyxJQUFNQSxFQUFFMm5HLFNBQVNvTixJQUFpQyxJQUF4Qi8wRyxFQUFFbUYsTUFBTSxLQUFLYSxPQUM3RHFxQyxNQUFPenFDLFdBQ1BtRyxVQUFZL0wsR0FBTSxHQUFHQSxJQUFJKzBHLE1BRXZCcHNGLEVBQVVtc0YsRUFBZSxPQUN6QmhsRixFQUFVZ2xGLEVBQWUsS0FDekJodUYsRUFBS2d1RixFQUFlLE1BQ3BCMWtFLEVBQUswa0UsRUFBZSxNQUNwQjNrRSxFQUFLMmtFLEVBQWUsTUFDcEJ4ckYsRUFBcUJwZixPQUFPZ0QsT0FBT2hELE9BQU9nRCxPQUFPLEdBQUk0aUIsR0FBVSxDQUFFdWdCLE1BQVFyd0MsR0FBTTh2QixFQUFRdWdCLE1BQU1yd0MsR0FBSyxJQUFLK0wsVUFBWS9MLEdBQU04dkIsRUFBUS9qQixVQUFjLElBQUovTCxLQUUzSWcxRyxFQUFnQixDQUFDcHZGLEVBQU1xdkYsSUFBY2oxRyxHQUNoQ3FELFFBQVN3eEcsRUFBUzcwRyxJQUFNNDBHLEVBQWlCbnZGLEtBQUt6bEIsSUFBTUEsRUFBRTBDLFdBQVdrakIsSUFDbkVxdkYsR0FBWS9xRyxPQUFPSSxVQUFVSCxlQUFlOUIsS0FBS3JJLEVBQUdpMUcsSUFFdkRDLEVBQWEsQ0FBQ0MsRUFBT0MsRUFBT0MsSUFBV3IxRyxJQUN6QyxJQUFLNjBHLEVBQVM3MEcsR0FDVixPQUFPQSxFQUNYLE1BQU84QixFQUFHQyxFQUFHMEgsRUFBRzJmLEdBQVNwcEIsRUFBRTAvQyxNQUFNZzFELEdBQ2pDLE1BQU8sQ0FDSCxDQUFDUyxHQUFRdnZHLFdBQVc5RCxHQUNwQixDQUFDc3pHLEdBQVF4dkcsV0FBVzdELEdBQ3BCLENBQUNzekcsR0FBUXp2RyxXQUFXNkQsR0FDcEIyZixXQUFpQmpxQixJQUFWaXFCLEVBQXNCeGpCLFdBQVd3akIsR0FBUyxJQUluRG14QyxFQUFPLENBQ1Q5MEMsS0FBTXV2RixFQUFjLE1BQU8sT0FDM0Iza0UsTUFBTzZrRSxFQUFXLE1BQU8sYUFBYyxhQUN2Q25wRyxVQUFXLEVBQUc0dEQsSUFBQUEsRUFBS0MsV0FBQUEsRUFBWUMsVUFBQUEsRUFBV3p3QyxNQUFPa3NGLEVBQVUsS0FDL0MsUUFDSjl3RyxLQUFLbWlCLE1BQU1nekMsR0FDWCxLQUNBN3BDLEVBQVEvakIsVUFBVXdvRyxFQUFTMzZDLElBQzNCLEtBQ0E5cEMsRUFBUS9qQixVQUFVd29HLEVBQVMxNkMsSUFDM0IsS0FDQTA2QyxFQUFTbnJGLEVBQU1yZCxVQUFVdXBHLElBQ3pCLEtBSU5DLEVBQWV6NUQsRUFBTSxFQUFHLEtBQ3hCMDVELEVBQVV0ckcsT0FBT2dELE9BQU9oRCxPQUFPZ0QsT0FBTyxHQUFJd1osR0FBUyxDQUFFM2EsVUFBWS9MLEdBQU13RSxLQUFLbWlCLE1BQU00dUYsRUFBYXYxRyxNQUMvRnM2RCxFQUFPLENBQ1Q3MEMsS0FBTXV2RixFQUFjLE1BQU8sT0FDM0Iza0UsTUFBTzZrRSxFQUFXLE1BQU8sUUFBUyxRQUNsQ25wRyxVQUFXLEVBQUcrdEQsSUFBQUEsRUFBS0MsTUFBQUEsRUFBT0MsS0FBQUEsRUFBTTV3QyxNQUFPa3NGLEVBQVUsS0FBUSxRQUNyREUsRUFBUXpwRyxVQUFVK3RELEdBQ2xCLEtBQ0EwN0MsRUFBUXpwRyxVQUFVZ3VELEdBQ2xCLEtBQ0F5N0MsRUFBUXpwRyxVQUFVaXVELEdBQ2xCLEtBQ0F1NkMsRUFBU25yRixFQUFNcmQsVUFBVXVwRyxJQUN6QixLQStCRmo3QyxFQUFNLENBQ1I1MEMsS0FBTXV2RixFQUFjLEtBQ3BCM2tFLE1BOUJKLFNBQWtCcndDLEdBQ2QsSUFBSSsxRCxFQUFJLEdBQ0pKLEVBQUksR0FDSjV6RCxFQUFJLEdBQ0pELEVBQUksR0FpQlIsT0FoQkk5QixFQUFFZ0csT0FBUyxHQUNYK3ZELEVBQUkvMUQsRUFBRW1rRyxPQUFPLEVBQUcsR0FDaEJ4dUMsRUFBSTMxRCxFQUFFbWtHLE9BQU8sRUFBRyxHQUNoQnBpRyxFQUFJL0IsRUFBRW1rRyxPQUFPLEVBQUcsR0FDaEJyaUcsRUFBSTlCLEVBQUVta0csT0FBTyxFQUFHLEtBR2hCcHVDLEVBQUkvMUQsRUFBRW1rRyxPQUFPLEVBQUcsR0FDaEJ4dUMsRUFBSTMxRCxFQUFFbWtHLE9BQU8sRUFBRyxHQUNoQnBpRyxFQUFJL0IsRUFBRW1rRyxPQUFPLEVBQUcsR0FDaEJyaUcsRUFBSTlCLEVBQUVta0csT0FBTyxFQUFHLEdBQ2hCcHVDLEdBQUtBLEVBQ0xKLEdBQUtBLEVBQ0w1ekQsR0FBS0EsRUFDTEQsR0FBS0EsR0FFRixDQUNIZzRELElBQUsyN0MsU0FBUzEvQyxFQUFHLElBQ2pCZ0UsTUFBTzA3QyxTQUFTOS9DLEVBQUcsSUFDbkJxRSxLQUFNeTdDLFNBQVMxekcsRUFBRyxJQUNsQnFuQixNQUFPdG5CLEVBQUkyekcsU0FBUzN6RyxFQUFHLElBQU0sSUFBTSxJQU12Q2lLLFVBQVd1dUQsRUFBS3Z1RCxXQUdkdWEsRUFBUSxDQUNWYixLQUFPemxCLEdBQU1zNkQsRUFBSzcwQyxLQUFLemxCLElBQU1xNkQsRUFBSTUwQyxLQUFLemxCLElBQU11NkQsRUFBSzkwQyxLQUFLemxCLEdBQ3REcXdDLE1BQVFyd0MsR0FDQXM2RCxFQUFLNzBDLEtBQUt6bEIsR0FDSHM2RCxFQUFLanFCLE1BQU1yd0MsR0FFYnU2RCxFQUFLOTBDLEtBQUt6bEIsR0FDUnU2RCxFQUFLbHFCLE1BQU1yd0MsR0FHWHE2RCxFQUFJaHFCLE1BQU1yd0MsR0FHekIrTCxVQUFZL0wsR0FDRDYwRyxFQUFTNzBHLEdBQ1ZBLEVBQ0FBLEVBQUVtSyxlQUFlLE9BQ2Jtd0QsRUFBS3Z1RCxVQUFVL0wsR0FDZnU2RCxFQUFLeHVELFVBQVUvTCxJQUkzQjAxRyxFQUFhLE9BQ2JDLEVBQWMsT0FPcEIsU0FBU2w2QyxFQUFRejdELEdBQ0ksaUJBQU5BLElBQ1BBLEVBQUksR0FBR0EsS0FDWCxNQUFNTCxFQUFTLEdBQ2YsSUFBSWkyRyxFQUFZLEVBQ2hCLE1BQU1DLEVBQVM3MUcsRUFBRTAvQyxNQUFNaTFELEdBQ25Ca0IsSUFDQUQsRUFBWUMsRUFBTzd2RyxPQUNuQmhHLEVBQUlBLEVBQUVpYyxRQUFRMDRGLEVBQVllLEdBQzFCLzFHLEVBQU9VLFFBQVF3MUcsRUFBT2p1RyxJQUFJMGUsRUFBTStwQixTQUVwQyxNQUFNeWxFLEVBQVU5MUcsRUFBRTAvQyxNQUFNZzFELEdBS3hCLE9BSklvQixJQUNBOTFHLEVBQUlBLEVBQUVpYyxRQUFReTRGLEVBQVlpQixHQUMxQmgyRyxFQUFPVSxRQUFReTFHLEVBQVFsdUcsSUFBSThlLEVBQU8ycEIsU0FFL0IsQ0FBRTF3QyxPQUFBQSxFQUFRaTJHLFVBQUFBLEVBQVdHLFVBQVcvMUcsR0FFM0MsU0FBU3F3QyxFQUFNcndDLEdBQ1gsT0FBT3k3RCxFQUFRejdELEdBQUdMLE9BRXRCLFNBQVM2akQsRUFBa0J4akQsR0FDdkIsTUFBTSxPQUFFTCxFQUFNLFVBQUVpMkcsRUFBUyxVQUFFRyxHQUFjdDZDLEVBQVF6N0QsR0FDM0MycEQsRUFBWWhxRCxFQUFPcUcsT0FDekIsT0FBUWhHLElBQ0osSUFBSXlHLEVBQVNzdkcsRUFDYixJQUFLLElBQUl4eEcsRUFBSSxFQUFHQSxFQUFJb2xELEVBQVdwbEQsSUFDM0JrQyxFQUFTQSxFQUFPd1YsUUFBUTFYLEVBQUlxeEcsRUFBWUYsRUFBYUMsRUFBYXB4RyxFQUFJcXhHLEVBQVl0dkYsRUFBTXZhLFVBQVUvTCxFQUFFdUUsSUFBTWd3RyxFQUFTdjBHLEVBQUV1RSxLQUV6SCxPQUFPa0MsR0FHZixNQUFNdXZHLEVBQXdCaDJHLEdBQW1CLGlCQUFOQSxFQUFpQixFQUFJQSxFQU0xRHdsQixFQUFVLENBQUVDLEtBNUNsQixTQUFjemxCLEdBQ1YsSUFBSStILEVBQUlzRSxFQUFJNmxCLEVBQUlDLEVBQ2hCLE9BQVE5TyxNQUFNcmpCLElBQ1Y2MEcsRUFBUzcwRyxLQUM2RSxRQUFwRnFNLEVBQW9DLFFBQTlCdEUsRUFBSy9ILEVBQUUwL0MsTUFBTWcxRCxVQUFnQyxJQUFQM3NHLE9BQWdCLEVBQVNBLEVBQUcvQixjQUEyQixJQUFQcUcsRUFBZ0JBLEVBQUssSUFBMkYsUUFBcEY4bEIsRUFBb0MsUUFBOUJELEVBQUtseUIsRUFBRTAvQyxNQUFNaTFELFVBQWdDLElBQVB6aUYsT0FBZ0IsRUFBU0EsRUFBR2xzQixjQUEyQixJQUFQbXNCLEVBQWdCQSxFQUFLLEdBQUssR0F3Q2hPa2UsTUFBQUEsRUFBT21ULGtCQUFBQSxFQUFtQmo1QixrQkFMbEQsU0FBMkJ2cUIsR0FDdkIsTUFBTXVpRCxFQUFTbFMsRUFBTXJ3QyxHQUVyQixPQURvQndqRCxFQUFrQnhqRCxFQUMvQnlwRCxDQUFZbEgsRUFBTzM2QyxJQUFJb3VHLE1BSTVCQyxFQUFjLElBQUloMEcsSUFBSSxDQUFDLGFBQWMsV0FBWSxXQUFZLFlBQ25FLFNBQVNpMEcsRUFBbUJsMkcsR0FDeEIsSUFBSzBCLEVBQU15QixHQUFTbkQsRUFBRWtvRCxNQUFNLEdBQUksR0FBRy9pRCxNQUFNLEtBQ3pDLEdBQWEsZ0JBQVR6RCxFQUNBLE9BQU8xQixFQUNYLE1BQU8wbUIsR0FBVXZqQixFQUFNdThDLE1BQU1nMUQsSUFBZSxHQUM1QyxJQUFLaHVGLEVBQ0QsT0FBTzFtQixFQUNYLE1BQU0rMEcsRUFBTzV4RyxFQUFNOFksUUFBUXlLLEVBQVEsSUFDbkMsSUFBSW00QixFQUFlbzNELEVBQVl6MkcsSUFBSWtDLEdBQVEsRUFBSSxFQUcvQyxPQUZJZ2xCLElBQVd2akIsSUFDWDA3QyxHQUFnQixLQUNibjlDLEVBQU8sSUFBTW05QyxFQUFlazJELEVBQU8sSUFFOUMsTUFBTW9CLEVBQWdCLG9CQUNoQnJvRyxFQUFTNUQsT0FBT2dELE9BQU9oRCxPQUFPZ0QsT0FBTyxHQUFJc1ksR0FBVSxDQUFFK0Usa0JBQW9CdnFCLElBQ3ZFLE1BQU1vMkcsRUFBWXAyRyxFQUFFMC9DLE1BQU15MkQsR0FDMUIsT0FBT0MsRUFBWUEsRUFBVXh1RyxJQUFJc3VHLEdBQW9CdjBGLEtBQUssS0FBTzNoQixLQUd6RW1jLEVBQVFpTixNQUFRQSxFQUNoQmpOLEVBQVFtSyxNQUFRQSxFQUNoQm5LLEVBQVFxSixRQUFVQSxFQUNsQnJKLEVBQVF3TSxRQUFVQSxFQUNsQnhNLEVBQVFyTyxPQUFTQSxFQUNqQnFPLEVBQVFrK0MsSUFBTUEsRUFDZGwrQyxFQUFRbytDLEtBQU9BLEVBQ2ZwK0MsRUFBUXVLLE9BQVNBLEVBQ2pCdkssRUFBUTJULFFBQVVBLEVBQ2xCM1QsRUFBUW1OLG1CQUFxQkEsRUFDN0JuTixFQUFRMkssR0FBS0EsRUFDYjNLLEVBQVFxNUYsUUFBVUEsRUFDbEJyNUYsRUFBUW0rQyxLQUFPQSxFQUNmbitDLEVBQVE3YSxNQUFRQSxFQUNoQjZhLEVBQVFpMEIsR0FBS0EsRUFDYmowQixFQUFRZzBCLEdBQUtBLHNaQzBZYixRQXRtQkEsU0FBcUJ1ckQsR0FDbkIsU0FBUzlMLEVBQUVsbUYsRUFBR0QsRUFBR2dCLEVBQUdtckQsRUFBRzl6RCxHQUNyQixJQUFLLElBQWdDZzBELEVBQUdILEVBQWlCMzRDLEVBQXVFbmMsRUFBbUNpeUUsRUFBMUp6dEIsRUFBSSxFQUFHdGpELEVBQUksRUFBRy9CLEVBQUksRUFBRzhjLEVBQUksRUFBU2xjLEVBQUksRUFBR3F1RixFQUFJLEVBQU1oNUIsRUFBSWo1QyxFQUFJODRDLEVBQUksRUFBR0QsRUFBSSxFQUFHRSxFQUFJLEVBQUd5MkIsRUFBSSxFQUFHN29GLEVBQUksRUFBRzZzRSxFQUFJL2xFLEVBQUV6RSxPQUFRMjlFLEVBQUluVCxFQUFJLEVBQU05YSxFQUFJLEdBQUlqdUQsRUFBSSxHQUFJbThFLEVBQUksR0FBSXlDLEVBQUksR0FBT3h3QixFQUFJMmEsR0FBSSxDQUk1SyxHQUhBN2EsRUFBSWxyRCxFQUFFZ25ELFdBQVdvRSxHQUNqQkEsSUFBTTh0QixHQUFLLElBQU01aEYsRUFBSSthLEVBQUk5YyxFQUFJcWxELElBQU0sSUFBTXRqRCxJQUFNNHpELEVBQUksS0FBTzV6RCxFQUFJLEdBQUssSUFBSythLEVBQUk5YyxFQUFJcWxELEVBQUksRUFBR21yQixJQUFLbVQsS0FFeEYsSUFBTTVoRixFQUFJK2EsRUFBSTljLEVBQUlxbEQsRUFBRyxDQUN2QixHQUFJd1EsSUFBTTh0QixJQUFNLEVBQUk1dEIsSUFBTUwsRUFBSUEsRUFBRXo1QyxRQUFRNHpFLEVBQUcsS0FBTSxFQUFJbjZCLEVBQUVuekQsT0FBT3lELFFBQVMsQ0FDckUsT0FBUTJ2RCxHQUNOLEtBQUssR0FDTCxLQUFLLEVBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0gsTUFFRixRQUNFRCxHQUFLanJELEVBQUUyaEUsT0FBT3ZXLEdBR2xCRixFQUFJLEdBR04sT0FBUUEsR0FDTixLQUFLLElBS0gsSUFIQUcsR0FEQUosRUFBSUEsRUFBRW56RCxRQUNBa3ZELFdBQVcsR0FDakJ6MEMsRUFBSSxFQUVDclosSUFBTWt5RCxFQUFHQSxFQUFJMmEsR0FBSSxDQUNwQixPQUFRN2EsRUFBSWxyRCxFQUFFZ25ELFdBQVdvRSxJQUN2QixLQUFLLElBQ0g3NEMsSUFDQSxNQUVGLEtBQUssSUFDSEEsSUFDQSxNQUVGLEtBQUssR0FDSCxPQUFRMjRDLEVBQUlsckQsRUFBRWduRCxXQUFXb0UsRUFBSSxJQUMzQixLQUFLLEdBQ0wsS0FBSyxHQUNIL3pELEVBQUcsQ0FDRCxJQUFLbTBELEVBQUlKLEVBQUksRUFBR0ksRUFBSTB0QixJQUFLMXRCLEVBQ3ZCLE9BQVF4ckQsRUFBRWduRCxXQUFXd0UsSUFDbkIsS0FBSyxHQUNILEdBQUksS0FBT04sR0FBSyxLQUFPbHJELEVBQUVnbkQsV0FBV3dFLEVBQUksSUFBTUosRUFBSSxJQUFNSSxFQUFHLENBQ3pESixFQUFJSSxFQUFJLEVBQ1IsTUFBTW4wRCxFQUdSLE1BRUYsS0FBSyxHQUNILEdBQUksS0FBTzZ6RCxFQUFHLENBQ1pFLEVBQUlJLEVBQUksRUFDUixNQUFNbjBELEdBTWQrekQsRUFBSUksR0FLVixNQUVGLEtBQUssR0FDSE4sSUFFRixLQUFLLEdBQ0hBLElBRUYsS0FBSyxHQUNMLEtBQUssR0FDSCxLQUFPRSxJQUFNOHRCLEdBQUtsNUUsRUFBRWduRCxXQUFXb0UsS0FBT0YsS0FLMUMsR0FBSSxJQUFNMzRDLEVBQUcsTUFDYjY0QyxJQU1GLEdBSEE3NEMsRUFBSXZTLEVBQUU0aEUsVUFBVTFvRSxFQUFHa3lELEdBQ25CLElBQU1DLElBQU1BLEdBQUtKLEVBQUlBLEVBQUV6NUMsUUFBUW9vRSxFQUFJLElBQUk5aEYsUUFBUWt2RCxXQUFXLElBR25ELEtBRENxRSxFQUNOLENBSUUsT0FIQSxFQUFJQyxJQUFNTCxFQUFJQSxFQUFFejVDLFFBQVE0ekUsRUFBRyxLQUMzQmw2QixFQUFJRCxFQUFFakUsV0FBVyxJQUdmLEtBQUssSUFDTCxLQUFLLElBQ0wsS0FBSyxJQUNMLEtBQUssR0FDSHNFLEVBQUl0c0QsRUFDSixNQUVGLFFBQ0Vzc0QsRUFBSW02QixFQU1SLEdBRkF2c0YsR0FEQXFaLEVBQUk0eUUsRUFBRW5tRixFQUFHc3NELEVBQUcvNEMsRUFBRzI0QyxFQUFHN3pELEVBQUksSUFDaEJrRSxPQUNOLEVBQUltd0QsSUFBc0IyYyxFQUFJeVQsRUFBRSxFQUFHdnBFLEVBQXpCKzRDLEVBQUk0bEMsRUFBRXpMLEVBQUd4NkIsRUFBRzgyQixHQUFtQi9pRixFQUFHeTVFLEVBQUdwaUYsRUFBRzZDLEVBQUdneUQsRUFBRzd6RCxFQUFHOHpELEdBQUlGLEVBQUlLLEVBQUVwMEMsS0FBSyxTQUFLLElBQVdteEQsR0FBSyxLQUFPbnZFLEdBQUtxWixFQUFJODFELEVBQUV2d0UsUUFBUXlELFVBQVkydkQsRUFBSSxFQUFHMzRDLEVBQUksS0FDNUksRUFBSXJaLEVBQUcsT0FBUWd5RCxHQUNqQixLQUFLLElBQ0hELEVBQUlBLEVBQUV6NUMsUUFBUTZtRCxFQUFJQyxHQUVwQixLQUFLLElBQ0wsS0FBSyxJQUNMLEtBQUssR0FDSC9sRCxFQUFJMDRDLEVBQUksSUFBTTE0QyxFQUFJLElBQ2xCLE1BRUYsS0FBSyxJQUVIQSxHQURBMDRDLEVBQUlBLEVBQUV6NUMsUUFBUSttRCxFQUFJLFVBQ1YsSUFBTWhtRCxFQUFJLElBQ2xCQSxFQUFJLElBQU1nNUMsR0FBSyxJQUFNQSxHQUFLMjVCLEVBQUUsSUFBTTN5RSxFQUFHLEdBQUssWUFBY0EsRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQzVFLE1BRUYsUUFDRUEsRUFBSTA0QyxFQUFJMTRDLEVBQUcsTUFBUTQ0QyxJQUFXbnVELEdBQUt1VixFQUFWQSxFQUFhLFNBQ25DQSxFQUFJLFFBSVhBLEVBQUk0eUUsRUFBRW5tRixFQUFHa3lGLEVBQUVseUYsRUFBR2lzRCxFQUFHODJCLEdBQUl4dkUsRUFBRzQ0QyxFQUFHOXpELEVBQUksR0FHbkM4aEYsR0FBSzVtRSxFQUNMQSxFQUFJd3ZFLEVBQUl6MkIsRUFBSUUsRUFBSUgsRUFBSSxFQUNwQkosRUFBSSxHQUNKQyxFQUFJbHJELEVBQUVnbkQsYUFBYW9FLEdBQ25CLE1BRUYsS0FBSyxJQUNMLEtBQUssR0FFSCxHQUFJLEdBQUtseUQsR0FEVCt4RCxHQUFLLEVBQUlLLEVBQUlMLEVBQUV6NUMsUUFBUTR6RSxFQUFHLElBQU1uNkIsR0FBR256RCxRQUNwQnlELFFBQVMsT0FBUSxJQUFNaXdELElBQU1ILEVBQUlKLEVBQUVqRSxXQUFXLEdBQUksS0FBT3FFLEdBQUssR0FBS0EsR0FBSyxJQUFNQSxLQUFPbnlELEdBQUsreEQsRUFBSUEsRUFBRXo1QyxRQUFRLElBQUssTUFBTWpXLFFBQVMsRUFBSW13RCxRQUFLLEtBQVkyYyxFQUFJeVQsRUFBRSxFQUFHN3dCLEVBQUdqc0QsRUFBR0MsRUFBR3c1RSxFQUFHcGlGLEVBQUcyRyxFQUFFekIsT0FBUTR2RCxFQUFHOXpELEVBQUc4ekQsS0FBTyxLQUFPanlELEdBQUsreEQsRUFBSW9kLEVBQUV2d0UsUUFBUXlELFVBQVkwdkQsRUFBSSxRQUFhSSxFQUFJSixFQUFFakUsV0FBVyxHQUFJa0UsRUFBSUQsRUFBRWpFLFdBQVcsR0FBSXFFLEdBQzlTLEtBQUssRUFDSCxNQUVGLEtBQUssR0FDSCxHQUFJLE1BQVFILEdBQUssS0FBT0EsRUFBRyxDQUN6QjB3QixHQUFLM3dCLEVBQUlqckQsRUFBRTJoRSxPQUFPdlcsR0FDbEIsTUFHSixRQUNFLEtBQU9ILEVBQUVqRSxXQUFXOXRELEVBQUksS0FBTzhELEdBQUtvcUYsRUFBRW44QixFQUFHSSxFQUFHSCxFQUFHRCxFQUFFakUsV0FBVyxLQUVoRSs2QixFQUFJejJCLEVBQUlFLEVBQUlILEVBQUksRUFDaEJKLEVBQUksR0FDSkMsRUFBSWxyRCxFQUFFZ25ELGFBQWFvRSxJQUl6QixPQUFRRixHQUNOLEtBQUssR0FDTCxLQUFLLEdBQ0gsS0FBTzV6RCxFQUFJQSxFQUFJLEVBQUksSUFBTSxFQUFJK3pELEdBQUssTUFBUUYsR0FBSyxFQUFJRixFQUFFMXZELFNBQVcrdkQsRUFBSSxFQUFHTCxHQUFLLE1BQzVFLEVBQUlTLEVBQUl5bEMsR0FBS3JWLEVBQUUsRUFBRzd3QixFQUFHanNELEVBQUdDLEVBQUd3NUUsRUFBR3BpRixFQUFHMkcsRUFBRXpCLE9BQVE0dkQsRUFBRzl6RCxFQUFHOHpELEdBQ2pEOTBELEVBQUksRUFDSm9pRixJQUNBLE1BRUYsS0FBSyxHQUNMLEtBQUssSUFDSCxHQUFJLElBQU1uaEYsRUFBSSthLEVBQUk5YyxFQUFJcWxELEVBQUcsQ0FDdkJ2a0QsSUFDQSxNQUdKLFFBSUUsT0FIQUEsSUFDQUQsRUFBSTRKLEVBQUUyaEUsT0FBT3ZXLEdBRUxGLEdBQ04sS0FBSyxFQUNMLEtBQUssR0FDSCxHQUFJLElBQU03NEMsRUFBSXVvQyxFQUFJdGpELEVBQUcsT0FBUW5CLEdBQzNCLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxFQUNMLEtBQUssR0FDSEMsRUFBSSxHQUNKLE1BRUYsUUFDRSxLQUFPODBELElBQU05MEQsRUFBSSxLQUVyQixNQUVGLEtBQUssRUFDSEEsRUFBSSxNQUNKLE1BRUYsS0FBSyxHQUNIQSxFQUFJLE1BQ0osTUFFRixLQUFLLEdBQ0hBLEVBQUksTUFDSixNQUVGLEtBQUssR0FDSCxJQUFNaWMsRUFBSS9hLEVBQUlzakQsSUFBTTBRLEVBQUl5MkIsRUFBSSxFQUFHM3JGLEVBQUksS0FBT0EsR0FDMUMsTUFFRixLQUFLLElBQ0gsR0FBSSxJQUFNaWMsRUFBSS9hLEVBQUlzakQsRUFBSStnQyxHQUFLLEVBQUlud0IsRUFBRyxPQUFRSixFQUFJSSxHQUM1QyxLQUFLLEVBQ0gsTUFBUXIxRCxHQUFLLEtBQU82SixFQUFFZ25ELFdBQVdvRSxFQUFJLEtBQU91d0IsRUFBSXhsRixHQUVsRCxLQUFLLEVBQ0gsTUFBUXF1RixJQUFNN0ksRUFBSTZJLEdBRXRCLE1BRUYsS0FBSyxHQUNILElBQU1ueUUsRUFBSS9hLEVBQUlzakQsSUFBTTRRLEVBQUlKLEdBQ3hCLE1BRUYsS0FBSyxHQUNILElBQU05ekQsRUFBSS9CLEVBQUk4YyxFQUFJdW9DLElBQU0wUSxFQUFJLEVBQUdsMUQsR0FBSyxNQUNwQyxNQUVGLEtBQUssR0FDTCxLQUFLLEdBQ0gsSUFBTWtCLElBQU0rYSxFQUFJQSxJQUFNNjRDLEVBQUksRUFBSSxJQUFNNzRDLEVBQUk2NEMsRUFBSTc0QyxHQUM1QyxNQUVGLEtBQUssR0FDSCxJQUFNQSxFQUFJL2EsRUFBSS9CLEdBQUtxbEQsSUFDbkIsTUFFRixLQUFLLEdBQ0gsSUFBTXZvQyxFQUFJL2EsRUFBSS9CLEdBQUtxbEQsSUFDbkIsTUFFRixLQUFLLEdBQ0gsSUFBTXZvQyxFQUFJL2EsRUFBSXNqRCxHQUFLcmxELElBQ25CLE1BRUYsS0FBSyxHQUNDLElBQU04YyxFQUFJL2EsRUFBSXNqRCxJQUNaLElBQU15USxJQUFXLEVBQUlsMUQsRUFBSSxFQUFJcXVGLEdBQzFCLE1BSUhuNUIsRUFBSSxJQUVSOTFELEtBR0YsTUFFRixLQUFLLEdBQ0gsSUFBTStCLEVBQUkvQixFQUFJOGMsRUFBSXVvQyxFQUFJNFEsRUFBSWo1QyxJQUFNQSxFQUFJLEdBQ3BDLE1BRUYsS0FBSyxHQUNMLEtBQUssR0FDSCxLQUFNLEVBQUlGLEVBQUl1b0MsRUFBSXJsRCxHQUFJLE9BQVErQixHQUM1QixLQUFLLEVBQ0gsT0FBUSxFQUFJNHpELEVBQUksRUFBSWxyRCxFQUFFZ25ELFdBQVdvRSxFQUFJLElBQ25DLEtBQUssSUFDSDl6RCxFQUFJLEdBQ0osTUFFRixLQUFLLElBQ0g0QixFQUFJa3lELEVBQUc5ekQsRUFBSSxHQUdmLE1BRUYsS0FBSyxHQUNILEtBQU80ekQsR0FBSyxLQUFPLzBELEdBQUsrQyxFQUFJLElBQU1reUQsSUFBTSxLQUFPcHJELEVBQUVnbkQsV0FBVzl0RCxFQUFJLEtBQU84RCxHQUFLZ0QsRUFBRTRoRSxVQUFVMW9FLEVBQUdreUQsRUFBSSxJQUFLaDFELEVBQUksR0FBSWtCLEVBQUksSUFJeEgsSUFBTUEsSUFBTTJ6RCxHQUFLNzBELEdBR3JCb3VGLEVBQUlydUYsRUFDSkEsRUFBSSswRCxFQUNKRSxJQUtGLEdBQUksR0FGSmx5RCxFQUFJOEQsRUFBRXpCLFFBRUssQ0FFVCxHQURBK3ZELEVBQUl0c0QsRUFDQSxFQUFJMHNELFFBQTJDLEtBQXJDMmMsRUFBSXlULEVBQUUsRUFBRzkrRSxFQUFHc3VELEVBQUdyc0QsRUFBR3c1RSxFQUFHcGlGLEVBQUc2QyxFQUFHaXlELEVBQUc5ekQsRUFBRzh6RCxLQUFvQixLQUFPbnVELEVBQUlxckUsR0FBRzlzRSxPQUFTLE9BQU9xZ0YsRUFBSTUrRSxFQUFJbThFLEVBR3pHLEdBRkFuOEUsRUFBSXN1RCxFQUFFcDBDLEtBQUssS0FBTyxJQUFNbGEsRUFBSSxJQUV4QixHQUFNdXVELEVBQUlvd0IsRUFBRyxDQUdmLE9BRkEsSUFBTXB3QixHQUFLMjVCLEVBQUVsb0YsRUFBRyxLQUFPMitFLEVBQUksR0FFbkJBLEdBQ04sS0FBSyxJQUNIMytFLEVBQUlBLEVBQUV3VSxRQUFRZ25ELEVBQUksWUFBY3g3RCxFQUNoQyxNQUVGLEtBQUssSUFDSEEsRUFBSUEsRUFBRXdVLFFBQVF1NUUsRUFBRyxzQkFBd0IvdEYsRUFBRXdVLFFBQVF1NUUsRUFBRyxhQUFlL3RGLEVBQUV3VSxRQUFRdTVFLEVBQUcsaUJBQW1CL3RGLEVBR3pHMitFLEVBQUksR0FJUixPQUFPQyxFQUFJNStFLEVBQUltOEUsRUFHakIsU0FBUytYLEVBQUVqeUYsRUFBR0QsRUFBR2dCLEdBQ2YsSUFBSW1yRCxFQUFJbnNELEVBQUVsSCxPQUFPNEMsTUFBTSs5RCxHQUN2Qno1RCxFQUFJbXNELEVBQ0osSUFBSTl6RCxFQUFJOHpELEVBQUU1dkQsT0FDTnEvQyxFQUFJMzdDLEVBQUUxRCxPQUVWLE9BQVFxL0MsR0FDTixLQUFLLEVBQ0wsS0FBSyxFQUNILElBQUl0akQsRUFBSSxFQUVSLElBQUsySCxFQUFJLElBQU0yN0MsRUFBSSxHQUFLMzdDLEVBQUUsR0FBSyxJQUFLM0gsRUFBSUQsSUFBS0MsRUFDM0MwSCxFQUFFMUgsR0FBS21pRixFQUFFeDZFLEVBQUdELEVBQUUxSCxHQUFJMEksR0FBR2xJLE9BR3ZCLE1BRUYsUUFDRSxJQUFJdkMsRUFBSStCLEVBQUksRUFFWixJQUFLMEgsRUFBSSxHQUFJMUgsRUFBSUQsSUFBS0MsRUFDcEIsSUFBSyxJQUFJK2EsRUFBSSxFQUFHQSxFQUFJdW9DLElBQUt2b0MsRUFDdkJyVCxFQUFFekosS0FBT2trRixFQUFFeDZFLEVBQUVvVCxHQUFLLElBQUs4NEMsRUFBRTd6RCxHQUFJMEksR0FBR2xJLE9BTXhDLE9BQU9rSCxFQUdULFNBQVN5NkUsRUFBRXg2RSxFQUFHRCxFQUFHZ0IsR0FDZixJQUFJbXJELEVBQUluc0QsRUFBRWdvRCxXQUFXLEdBR3JCLE9BRkEsR0FBS21FLElBQU1BLEdBQUtuc0QsRUFBSUEsRUFBRWxILFFBQVFrdkQsV0FBVyxJQUVqQ21FLEdBQ04sS0FBSyxHQUNILE9BQU9uc0QsRUFBRXdTLFFBQVEybkUsRUFBRyxLQUFPbDZFLEVBQUVuSCxRQUUvQixLQUFLLEdBQ0gsT0FBT21ILEVBQUVuSCxPQUFTa0gsRUFBRXdTLFFBQVEybkUsRUFBRyxLQUFPbDZFLEVBQUVuSCxRQUUxQyxRQUNFLEdBQUksRUFBSSxFQUFJa0ksR0FBSyxFQUFJaEIsRUFBRXJKLFFBQVEsTUFBTyxPQUFPcUosRUFBRXdTLFFBQVEybkUsR0FBSSxLQUFPbDZFLEVBQUUrbkQsV0FBVyxHQUFLLEdBQUssTUFBUS9uRCxFQUFFbkgsUUFHdkcsT0FBT21ILEVBQUlELEVBR2IsU0FBU29vRixFQUFFbm9GLEVBQUdELEVBQUdnQixFQUFHbXJELEdBQ2xCLElBQUk5ekQsRUFBSTRILEVBQUksSUFDUjI3QyxFQUFJLEVBQUk1N0MsRUFBSSxFQUFJZ0IsRUFBSSxFQUFJbXJELEVBRTVCLEdBQUksTUFBUXZRLEVBQUcsQ0FDYjM3QyxFQUFJNUgsRUFBRTFCLFFBQVEsSUFBSyxHQUFLLEVBQ3hCLElBQUkyQixFQUFJRCxFQUFFdXFFLFVBQVUzaUUsRUFBRzVILEVBQUVrRSxPQUFTLEdBQUd6RCxPQUVyQyxPQURBUixFQUFJRCxFQUFFdXFFLFVBQVUsRUFBRzNpRSxHQUFHbkgsT0FBU1IsRUFBSSxJQUM1QixJQUFNaTBELEdBQUssSUFBTUEsR0FBSzI1QixFQUFFNXRGLEVBQUcsR0FBSyxXQUFhQSxFQUFJQSxFQUFJQSxFQUc5RCxHQUFJLElBQU1pMEQsR0FBSyxJQUFNQSxJQUFNMjVCLEVBQUU3dEYsRUFBRyxHQUFJLE9BQU9BLEVBRTNDLE9BQVF1akQsR0FDTixLQUFLLEtBQ0gsT0FBTyxLQUFPdmpELEVBQUUydkQsV0FBVyxJQUFNLFdBQWEzdkQsRUFBSUEsRUFBSUEsRUFFeEQsS0FBSyxJQUNILE9BQU8sTUFBUUEsRUFBRTJ2RCxXQUFXLEdBQUssV0FBYTN2RCxFQUFJQSxFQUFJQSxFQUV4RCxLQUFLLElBQ0gsT0FBTyxNQUFRQSxFQUFFMnZELFdBQVcsR0FBSyxXQUFhM3ZELEVBQUlBLEVBQUlBLEVBRXhELEtBQUssS0FDSCxHQUFJLE1BQVFBLEVBQUUydkQsV0FBVyxHQUFJLE1BRS9CLEtBQUssSUFDTCxLQUFLLElBQ0gsTUFBTyxXQUFhM3ZELEVBQUlBLEVBRTFCLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksUUFBVUEsRUFBSUEsRUFFeEMsS0FBSyxLQUNMLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksUUFBVUEsRUFBSSxPQUFTQSxFQUFJQSxFQUVyRCxLQUFLLElBQ0gsR0FBSSxLQUFPQSxFQUFFMnZELFdBQVcsR0FBSSxNQUFPLFdBQWEzdkQsRUFBSUEsRUFDcEQsR0FBSSxFQUFJQSxFQUFFMUIsUUFBUSxhQUFjLElBQUssT0FBTzBCLEVBQUVtYSxRQUFRa25ELEVBQUksZ0JBQWtCcmhFLEVBQzVFLE1BRUYsS0FBSyxJQUNILEdBQUksS0FBT0EsRUFBRTJ2RCxXQUFXLEdBQUksT0FBUTN2RCxFQUFFMnZELFdBQVcsSUFDL0MsS0FBSyxJQUNILE1BQU8sZUFBaUIzdkQsRUFBRW1hLFFBQVEsUUFBUyxJQUFNLFdBQWFuYSxFQUFJLE9BQVNBLEVBQUVtYSxRQUFRLE9BQVEsWUFBY25hLEVBRTdHLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksT0FBU0EsRUFBRW1hLFFBQVEsU0FBVSxZQUFjbmEsRUFFckUsS0FBSyxHQUNILE1BQU8sV0FBYUEsRUFBSSxPQUFTQSxFQUFFbWEsUUFBUSxRQUFTLGtCQUFvQm5hLEVBRTVFLE1BQU8sV0FBYUEsRUFBSSxPQUFTQSxFQUFJQSxFQUV2QyxLQUFLLElBQ0gsTUFBTyxXQUFhQSxFQUFJLFlBQWNBLEVBQUlBLEVBRTVDLEtBQUssS0FDSCxHQUFJLEtBQU9BLEVBQUUydkQsV0FBVyxHQUFJLE1BRTVCLE1BQU8sb0JBRFAxdkQsRUFBSUQsRUFBRXVxRSxVQUFVdnFFLEVBQUUxQixRQUFRLElBQUssS0FBSzZiLFFBQVEsUUFBUyxJQUFJQSxRQUFRLGdCQUFpQixZQUNsRCxXQUFhbmEsRUFBSSxnQkFBa0JDLEVBQUlELEVBRXpFLEtBQUssS0FDSCxPQUFPc2hFLEVBQUczOUMsS0FBSzNqQixHQUFLQSxFQUFFbWEsUUFBUTBtRCxFQUFJLGFBQWU3Z0UsRUFBRW1hLFFBQVEwbUQsRUFBSSxVQUFZN2dFLEVBQUlBLEVBRWpGLEtBQUssSUFJSCxPQUZBMkgsR0FEQTFILEVBQUlELEVBQUV1cUUsVUFBVSxJQUFJOXBFLFFBQ2RuQyxRQUFRLEtBQU8sRUFFYjJCLEVBQUUwdkQsV0FBVyxHQUFLMXZELEVBQUUwdkQsV0FBV2hvRCxJQUNyQyxLQUFLLElBQ0gxSCxFQUFJRCxFQUFFbWEsUUFBUW9xRSxFQUFHLE1BQ2pCLE1BRUYsS0FBSyxJQUNIdGtGLEVBQUlELEVBQUVtYSxRQUFRb3FFLEVBQUcsU0FDakIsTUFFRixLQUFLLElBQ0h0a0YsRUFBSUQsRUFBRW1hLFFBQVFvcUUsRUFBRyxNQUNqQixNQUVGLFFBQ0UsT0FBT3ZrRixFQUdYLE1BQU8sV0FBYUEsRUFBSSxPQUFTQyxFQUFJRCxFQUV2QyxLQUFLLEtBQ0gsSUFBSyxJQUFNQSxFQUFFMUIsUUFBUSxTQUFVLEdBQUksTUFFckMsS0FBSyxJQUlILE9BSEFxSixHQUFLM0gsRUFBSTRILEdBQUcxRCxPQUFTLEdBR2JxL0MsR0FGUnRqRCxHQUFLLEtBQU9ELEVBQUUydkQsV0FBV2hvRCxHQUFLM0gsRUFBRXVxRSxVQUFVLEVBQUc1aUUsR0FBSzNILEdBQUd1cUUsVUFBVTNpRSxFQUFFdEosUUFBUSxJQUFLLEdBQUssR0FBR21DLFFBRXhFa3ZELFdBQVcsSUFBd0IsRUFBbEIxdkQsRUFBRTB2RCxXQUFXLEtBQzFDLEtBQUssSUFDSCxHQUFJLElBQU0xdkQsRUFBRTB2RCxXQUFXLEdBQUksTUFFN0IsS0FBSyxJQUNIM3ZELEVBQUlBLEVBQUVtYSxRQUFRbGEsRUFBRyxXQUFhQSxHQUFLLElBQU1ELEVBQ3pDLE1BRUYsS0FBSyxJQUNMLEtBQUssSUFDSEEsRUFBSUEsRUFBRW1hLFFBQVFsYSxFQUFHLFlBQWMsSUFBTXNqRCxFQUFJLFVBQVksSUFBTSxPQUFTLElBQU12akQsRUFBRW1hLFFBQVFsYSxFQUFHLFdBQWFBLEdBQUssSUFBTUQsRUFBRW1hLFFBQVFsYSxFQUFHLE9BQVNBLEVBQUksT0FBUyxJQUFNRCxFQUc1SixPQUFPQSxFQUFJLElBRWIsS0FBSyxJQUNILEdBQUksS0FBT0EsRUFBRTJ2RCxXQUFXLEdBQUksT0FBUTN2RCxFQUFFMnZELFdBQVcsSUFDL0MsS0FBSyxJQUNILE9BQU8xdkQsRUFBSUQsRUFBRW1hLFFBQVEsU0FBVSxJQUFLLFdBQWFuYSxFQUFJLGVBQWlCQyxFQUFJLFlBQWNBLEVBQUlELEVBRTlGLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksaUJBQW1CQSxFQUFFbWEsUUFBUTJtRCxFQUFJLElBQU05Z0UsRUFFakUsUUFDRSxNQUFPLFdBQWFBLEVBQUkscUJBQXVCQSxFQUFFbWEsUUFBUSxnQkFBaUIsSUFBSUEsUUFBUTJtRCxFQUFJLElBQU05Z0UsRUFFcEcsTUFFRixLQUFLLElBQ0wsS0FBSyxJQUNILEdBQUksS0FBT0EsRUFBRTJ2RCxXQUFXLElBQU0sTUFBUTN2RCxFQUFFMnZELFdBQVcsR0FBSSxNQUV6RCxLQUFLLElBQ0wsS0FBSyxJQUNILElBQUksSUFBTzRSLEVBQUc1OUMsS0FBSy9iLEdBQUksT0FBTyxPQUFTM0gsRUFBSTJILEVBQUUyaUUsVUFBVTNpRSxFQUFFdEosUUFBUSxLQUFPLElBQUlxeEQsV0FBVyxHQUFLb2dDLEVBQUVub0YsRUFBRXVTLFFBQVEsVUFBVyxrQkFBbUJ4UyxFQUFHZ0IsRUFBR21yRCxHQUFHMzVDLFFBQVEsa0JBQW1CLFlBQWNuYSxFQUFFbWEsUUFBUWxhLEVBQUcsV0FBYUEsR0FBS0QsRUFBRW1hLFFBQVFsYSxFQUFHLFFBQVVBLEVBQUVrYSxRQUFRLFFBQVMsS0FBT25hLEVBQ3hRLE1BRUYsS0FBSyxJQUNILEdBQUlBLEVBQUksV0FBYUEsR0FBSyxNQUFRQSxFQUFFMnZELFdBQVcsR0FBSyxPQUFTM3ZELEVBQUksSUFBTUEsRUFBRyxNQUFRMkksRUFBSW1yRCxHQUFLLE1BQVE5ekQsRUFBRTJ2RCxXQUFXLEtBQU8sRUFBSTN2RCxFQUFFMUIsUUFBUSxZQUFhLElBQUssT0FBTzBCLEVBQUV1cUUsVUFBVSxFQUFHdnFFLEVBQUUxQixRQUFRLElBQUssSUFBTSxHQUFHNmIsUUFBUXFuRCxFQUFJLGdCQUFrQnhoRSxFQUd2TyxPQUFPQSxFQUdULFNBQVM2dEYsRUFBRWptRixFQUFHRCxHQUNaLElBQUlnQixFQUFJZixFQUFFdEosUUFBUSxJQUFNcUosRUFBSSxJQUFNLEtBQzlCbXNELEVBQUlsc0QsRUFBRTJpRSxVQUFVLEVBQUcsSUFBTTVpRSxFQUFJZ0IsRUFBSSxJQUVyQyxPQURBQSxFQUFJZixFQUFFMmlFLFVBQVU1aEUsRUFBSSxFQUFHZixFQUFFMUQsT0FBUyxHQUMzQnF3RixFQUFFLElBQU01c0YsRUFBSW1zRCxFQUFJQSxFQUFFMzVDLFFBQVFrb0QsRUFBSSxNQUFPMTVELEVBQUdoQixHQUdqRCxTQUFTczVELEVBQUdyNUQsRUFBR0QsR0FDYixJQUFJZ0IsRUFBSW9uRixFQUFFcG9GLEVBQUdBLEVBQUVnb0QsV0FBVyxHQUFJaG9ELEVBQUVnb0QsV0FBVyxHQUFJaG9ELEVBQUVnb0QsV0FBVyxJQUM1RCxPQUFPaG5ELElBQU1oQixFQUFJLElBQU1nQixFQUFFd1IsUUFBUWdvRCxFQUFJLFlBQVlvSSxVQUFVLEdBQUssSUFBTTVpRSxFQUFJLElBRzVFLFNBQVM4OEUsRUFBRTc4RSxFQUFHRCxFQUFHZ0IsRUFBR21yRCxFQUFHOXpELEVBQUd1akQsRUFBR3RqRCxFQUFHL0IsRUFBRzhjLEVBQUdnNUMsR0FDcEMsSUFBSyxJQUFrQkUsRUFBZEwsRUFBSSxFQUFHLzBELEVBQUk2SSxFQUFNa3NELEVBQUlRLElBQUtSLEVBQ2pDLE9BQVFLLEVBQUlrakMsRUFBRXZqQyxHQUFHdHRELEtBQUttb0UsRUFBRzltRSxFQUFHOUksRUFBRzZKLEVBQUdtckQsRUFBRzl6RCxFQUFHdWpELEVBQUd0akQsRUFBRy9CLEVBQUc4YyxFQUFHZzVDLElBQ2xELFVBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssS0FDSCxNQUVGLFFBQ0VsMUQsRUFBSW8xRCxFQUlWLEdBQUlwMUQsSUFBTTZJLEVBQUcsT0FBTzdJLEVBbUJ0QixTQUFTMDRGLEVBQUU1dkYsR0FHVCxZQURBLEtBREFBLEVBQUlBLEVBQUUyc0csVUFDV2hnQixFQUFJLEtBQU0zc0YsRUFBSSxtQkFBc0JBLEVBQUlzc0QsRUFBSSxHQUFLQSxFQUFJLEVBQUdxZ0MsRUFBSTNzRixHQUFLc3NELEVBQUksR0FDL0VzakMsRUFHVCxTQUFTOW9CLEVBQUU5bUUsRUFBR0QsR0FDWixJQUFJZ0IsRUFBSWYsRUFLUixHQUpBLEdBQUtlLEVBQUVnbkQsV0FBVyxLQUFPaG5ELEVBQUlBLEVBQUVsSSxRQUUvQmtJLEVBQUksQ0FEQUEsR0FHQSxFQUFJMHJELEVBQUcsQ0FDVCxJQUFJUCxFQUFJMndCLEdBQUcsRUFBRzk4RSxFQUFHZ0IsRUFBR0EsRUFBR3k0RSxFQUFHcGlGLEVBQUcsRUFBRyxFQUFHLEVBQUcsUUFDdEMsSUFBVzgwRCxHQUFLLGlCQUFvQkEsSUFBTW5zRCxFQUFJbXNELEdBR2hELElBQUk5ekQsRUFBSTh0RixFQUFFTSxFQUFHemxGLEVBQUdoQixFQUFHLEVBQUcsR0FLdEIsT0FKQSxFQUFJMHNELFFBQW1ELEtBQTdDUCxFQUFJMndCLEdBQUcsRUFBR3prRixFQUFHMkksRUFBR0EsRUFBR3k0RSxFQUFHcGlGLEVBQUdnQixFQUFFa0UsT0FBUSxFQUFHLEVBQUcsTUFBcUJsRSxFQUFJOHpELEdBRTVFd3dCLEVBQUksRUFDSnRsRixFQUFJb2lGLEVBQUksRUFDRHBoRixFQUdULElBQUl1aUYsRUFBSyxRQUNMd0wsRUFBSSxZQUNKbHRCLEVBQUssT0FDTFMsRUFBSyxVQUNMRSxFQUFLLHNCQUNMSixFQUFLLFNBQ0wwZ0IsRUFBSSxvQkFDSjVnQixFQUFLLHFCQUNMd3lCLEVBQUksYUFDSnZ5QixFQUFLLGdCQUNMb2pCLEVBQUkscUJBQ0p2akIsRUFBSyxrQkFDTG1CLEVBQUssZUFDTHJCLEVBQUssZUFDTHVCLEVBQUssOEJBQ0xkLEVBQUssbUNBQ0xGLEVBQUssc0JBQ0xyaUUsRUFBSSxFQUNKb2lGLEVBQUksRUFDSmtELEVBQUksRUFDSnB3QixFQUFJLEVBQ0prNkIsRUFBSSxHQUNKZ0osRUFBSSxHQUNKL2lDLEVBQUksRUFDSmtnQyxFQUFJLEtBQ0p1RixFQUFJLEVBS1IsT0FIQXByQixFQUFFOGxDLElBcEVGLFNBQVNsZCxFQUFFMXZGLEdBQ1QsT0FBUUEsR0FDTixVQUFLLEVBQ0wsS0FBSyxLQUNIeXNELEVBQUkraUMsRUFBRWx6RixPQUFTLEVBQ2YsTUFFRixRQUNFLEdBQUksbUJBQXNCMEQsRUFBR3d2RixFQUFFL2lDLEtBQU96c0QsT0FBTyxHQUFJLGlCQUFvQkEsRUFBRyxJQUFLLElBQUlELEVBQUksRUFBR2dCLEVBQUlmLEVBQUUxRCxPQUFReUQsRUFBSWdCLElBQUtoQixFQUM3RzJ2RixFQUFFMXZGLEVBQUVELFNBQ0NteUYsRUFBVSxJQUFKbHlGLEVBR2pCLE9BQU8wdkYsR0F3RFQ1b0IsRUFBRS93RSxJQUFNNjVGLE9BQ1IsSUFBV29DLEdBQUtwQyxFQUFFb0MsR0FDWGxyQixHQ2xqQlQsRUFqRG1CLENBQ2pCN0csd0JBQXlCLEVBQ3pCRSxrQkFBbUIsRUFDbkJDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxRQUFTLEVBQ1RDLGFBQWMsRUFDZEMsZ0JBQWlCLEVBQ2pCQyxZQUFhLEVBQ2JDLFFBQVMsRUFDVEMsS0FBTSxFQUNOQyxTQUFVLEVBQ1ZDLGFBQWMsRUFDZEMsV0FBWSxFQUNaQyxhQUFjLEVBQ2RDLFVBQVcsRUFDWEUsUUFBUyxFQUNUQyxXQUFZLEVBQ1pDLFlBQWEsRUFDYkMsYUFBYyxFQUNkQyxXQUFZLEVBQ1pDLGNBQWUsRUFDZkMsZUFBZ0IsRUFDaEJDLGdCQUFpQixFQUNqQm9yQyxVQUFXLEVBQ1hDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxpQkFBa0IsRUFDbEJ0ckMsV0FBWSxFQUNaRSxXQUFZLEVBQ1o5Z0UsUUFBUyxFQUNUKzhDLE1BQU8sRUFDUGdrQixRQUFTLEVBQ1RDLFFBQVMsRUFDVEMsT0FBUSxFQUNSaGlELE9BQVEsRUFDUmlpRCxLQUFNLEVBQ05pckMsZ0JBQWlCLEVBRWpCanRGLFlBQWEsRUFDYmlpRCxhQUFjLEVBQ2RDLFlBQWEsRUFDYkMsZ0JBQWlCLEVBQ2pCQyxpQkFBa0IsRUFDbEJDLGlCQUFrQixFQUNsQnBpRCxjQUFlLEVBQ2ZxaUQsWUFBYSxHQzVDZixJQUFJMWEsRUFBa0IsbzlIQVl0QixRQ2RBLFNBQWlCMnlDLEdBQ2YsSUFBSTF5QyxFQUFRcm5ELE9BQU82UyxPQUFPLE1BQzFCLE9BQU8sU0FBVXkwQyxHQUVmLFlBRG1CcnlELElBQWZveUQsRUFBTUMsS0FBb0JELEVBQU1DLElEQ1c5dkMsRUNERDh2QyxFREV6Q0YsRUFBZ0I3ckMsS0FBSy9ELElBQWdDLE1BQXZCQSxFQUFLK3ZDLFdBQVcsSUFFM0IsTUFBdkIvdkMsRUFBSyt2QyxXQUFXLElBRWhCL3ZDLEVBQUsrdkMsV0FBVyxHQUFLLEtDTGZGLEVBQU1DLEdEQXdCLElBQVU5dkMsR0FBbEIseUJFSndXLFNBQVMxaEIsSUFBSSxPQUFPQSxFQUFFa0ssT0FBT2dELFFBQVEsU0FBU3pDLEdBQUcsSUFBSSxJQUFJOUcsRUFBRSxFQUFFQSxFQUFFMnlCLFVBQVV0d0IsT0FBT3JDLElBQUksQ0FBQyxJQUFJbVosRUFBRXdaLFVBQVUzeUIsR0FBRyxJQUFJLElBQUlveUQsS0FBS2o1QyxFQUFFNVMsT0FBT0ksVUFBVUgsZUFBZTlCLEtBQUt5VSxFQUFFaTVDLEtBQUt0ckQsRUFBRXNyRCxHQUFHajVDLEVBQUVpNUMsSUFBSSxPQUFPdHJELElBQUkrckIsTUFBTTMzQixLQUFLeTNCLFdBQVcsSUFBSXEvQixFQUFFLFNBQVNsckQsRUFBRTlHLEdBQUcsSUFBSSxJQUFJbVosRUFBRSxDQUFDclMsRUFBRSxJQUFJc3JELEVBQUUsRUFBRXNILEVBQUUxNUQsRUFBRXFDLE9BQU8rdkQsRUFBRXNILEVBQUV0SCxHQUFHLEVBQUVqNUMsRUFBRXpjLEtBQUtzRCxFQUFFb3lELEdBQUd0ckQsRUFBRXNyRCxFQUFFLElBQUksT0FBT2o1QyxHQUFHbzhFLEVBQUUsU0FBU3YxRixHQUFHLE9BQU8sT0FBT0EsR0FBRyxpQkFBaUJBLEdBQUcscUJBQXFCQSxFQUFFcWxFLFNBQVNybEUsRUFBRXFsRSxXQUFXOStELE9BQU9JLFVBQVUwK0QsU0FBUzNnRSxLQUFLMUUsT0FBTSxZQUFFQSxJQUFJcXlELEVBQUU5ckQsT0FBT2lULE9BQU8sSUFBSWlwRSxFQUFFbDhFLE9BQU9pVCxPQUFPLElBQUksU0FBU3BiLEVBQUUwSSxHQUFHLE1BQU0sbUJBQW1CQSxFQUFFLFNBQVM0N0MsRUFBRTU3QyxHQUFHLE9BQWtFQSxFQUFFZ3BELGFBQWFocEQsRUFBRS9JLE1BQU0sWUFBWSxTQUFTbXVGLEVBQUVwbEYsR0FBRyxPQUFPQSxHQUFHLGlCQUFpQkEsRUFBRW1zRyxrQkFBa0IsSUFBSXpnRCxFQUFFLG9CQUFvQjM0QyxVQUFVQSxRQUFRRCxJQUFJczVGLG1CQUFtQnI1RixRQUFRRCxJQUFJdTVGLFVBQVUsY0FBY2hrQyxFQUFFLFFBQVEwWixFQUFFLG9CQUFvQi9nRixRQUFRLGdCQUFnQkEsT0FBT29tRixFQUFFeHVGLFFBQVEsa0JBQWtCMHpHLGtCQUFrQkEsa0JBQWtCLG9CQUFvQnY1RixjQUFTLElBQVNBLFFBQVFELElBQUl5NUYsNkJBQTZCLEtBQUt4NUYsUUFBUUQsSUFBSXk1Riw0QkFBNEIsVUFBVXg1RixRQUFRRCxJQUFJeTVGLDZCQUE2Qng1RixRQUFRRCxJQUFJeTVGLDRCQUE0QixvQkFBb0J4NUYsY0FBUyxJQUFTQSxRQUFRRCxJQUFJdzVGLG1CQUFtQixLQUFLdjVGLFFBQVFELElBQUl3NUYsbUJBQWtCLFVBQVV2NUYsUUFBUUQsSUFBSXc1RixtQkFBbUJ2NUYsUUFBUUQsSUFBSXc1RixtQkFBdUQ3bUIsRUFBRSxHQUFrNUcsU0FBUyttQixFQUFFeHNHLEdBQUcsSUFBSSxJQUFJOUcsRUFBRTJ5QixVQUFVdHdCLE9BQU84VyxFQUFFLElBQUl0WixNQUFNRyxFQUFFLEVBQUVBLEVBQUUsRUFBRSxHQUFHb3lELEVBQUUsRUFBRUEsRUFBRXB5RCxFQUFFb3lELElBQUlqNUMsRUFBRWk1QyxFQUFFLEdBQUd6L0IsVUFBVXkvQixHQUFHLE1BQXlDLElBQUkyUCxNQUFNLCtDQUErQ2o3RCxFQUFFLDBCQUEwQnFTLEVBQUU5VyxPQUFPLEVBQUUsVUFBVThXLEVBQUU2RSxLQUFLLE1BQU0sS0FBd0QsSUFBSXkzRSxFQUFFLFdBQVcsU0FBUzN1RixFQUFFQSxHQUFHNUwsS0FBS3E0RyxXQUFXLElBQUlDLFlBQVksS0FBS3Q0RyxLQUFLbUgsT0FBTyxJQUFJbkgsS0FBS29uRSxJQUFJeDdELEVBQUUsSUFBSTlHLEVBQUU4RyxFQUFFSCxVQUFVLE9BQU8zRyxFQUFFeXpHLGFBQWEsU0FBUzNzRyxHQUFHLElBQUksSUFBSTlHLEVBQUUsRUFBRW1aLEVBQUUsRUFBRUEsRUFBRXJTLEVBQUVxUyxJQUFJblosR0FBRzlFLEtBQUtxNEcsV0FBV3A2RixHQUFHLE9BQU9uWixHQUFHQSxFQUFFMHpHLFlBQVksU0FBUzVzRyxFQUFFOUcsR0FBRyxHQUFHOEcsR0FBRzVMLEtBQUtxNEcsV0FBV2x4RyxPQUFPLENBQUMsSUFBSSxJQUFJOFcsRUFBRWplLEtBQUtxNEcsV0FBV25oRCxFQUFFajVDLEVBQUU5VyxPQUFPcTNELEVBQUV0SCxFQUFFdHJELEdBQUc0eUQsSUFBSUEsSUFBSSxHQUFHLEdBQUc0NUMsRUFBRSxHQUFHLEdBQUd4c0csR0FBRzVMLEtBQUtxNEcsV0FBVyxJQUFJQyxZQUFZOTVDLEdBQUd4K0QsS0FBS3E0RyxXQUFXejNHLElBQUlxZCxHQUFHamUsS0FBS21ILE9BQU9xM0QsRUFBRSxJQUFJLElBQUl1cEMsRUFBRTd3QyxFQUFFNndDLEVBQUV2cEMsRUFBRXVwQyxJQUFJL25HLEtBQUtxNEcsV0FBV3RRLEdBQUcsRUFBRSxJQUFJLElBQUlyaUcsRUFBRTFGLEtBQUt1NEcsYUFBYTNzRyxFQUFFLEdBQUczSSxFQUFFLEVBQUUySCxFQUFFOUYsRUFBRXFDLE9BQU9sRSxFQUFFMkgsRUFBRTNILElBQUlqRCxLQUFLb25FLElBQUlxeEMsV0FBVy95RyxFQUFFWixFQUFFN0IsTUFBTWpELEtBQUtxNEcsV0FBV3pzRyxLQUFLbEcsTUFBTVosRUFBRTR6RyxXQUFXLFNBQVM5c0csR0FBRyxHQUFHQSxFQUFFNUwsS0FBS21ILE9BQU8sQ0FBQyxJQUFJckMsRUFBRTlFLEtBQUtxNEcsV0FBV3pzRyxHQUFHcVMsRUFBRWplLEtBQUt1NEcsYUFBYTNzRyxHQUFHc3JELEVBQUVqNUMsRUFBRW5aLEVBQUU5RSxLQUFLcTRHLFdBQVd6c0csR0FBRyxFQUFFLElBQUksSUFBSTR5RCxFQUFFdmdELEVBQUV1Z0QsRUFBRXRILEVBQUVzSCxJQUFJeCtELEtBQUtvbkUsSUFBSXV4QyxXQUFXMTZGLEtBQUtuWixFQUFFOHpHLFNBQVMsU0FBU2h0RyxHQUFHLElBQUk5RyxFQUFFLEdBQUcsR0FBRzhHLEdBQUc1TCxLQUFLbUgsUUFBUSxJQUFJbkgsS0FBS3E0RyxXQUFXenNHLEdBQUcsT0FBTzlHLEVBQUUsSUFBSSxJQUFJbVosRUFBRWplLEtBQUtxNEcsV0FBV3pzRyxHQUFHc3JELEVBQUVsM0QsS0FBS3U0RyxhQUFhM3NHLEdBQUc0eUQsRUFBRXRILEVBQUVqNUMsRUFBRThwRixFQUFFN3dDLEVBQUU2d0MsRUFBRXZwQyxFQUFFdXBDLElBQUlqakcsR0FBRzlFLEtBQUtvbkUsSUFBSXl4QyxRQUFROVEsR0FBRyxZQUFZLE9BQU9qakcsR0FBRzhHLEVBQS80QixHQUFvNUI3SixFQUFFLElBQUloQixJQUFJb2QsRUFBRSxJQUFJcGQsSUFBSXU2RixFQUFFLEVBQUUzcEIsRUFBRSxTQUFTL2xFLEdBQUcsR0FBRzdKLEVBQUVwQixJQUFJaUwsR0FBRyxPQUFPN0osRUFBRWYsSUFBSTRLLEdBQUcsS0FBS3VTLEVBQUV4ZCxJQUFJMjZGLElBQUlBLElBQUksSUFBSXgyRixFQUFFdzJGLElBQUksT0FBMEV2NUYsRUFBRW5CLElBQUlnTCxFQUFFOUcsR0FBR3FaLEVBQUV2ZCxJQUFJa0UsRUFBRThHLEdBQUc5RyxHQUFHN0MsRUFBRSxTQUFTMkosR0FBRyxPQUFPdVMsRUFBRW5kLElBQUk0SyxJQUFJbWxGLEVBQUUsU0FBU25sRixFQUFFOUcsR0FBR0EsR0FBR3cyRixJQUFJQSxFQUFFeDJGLEVBQUUsR0FBRy9DLEVBQUVuQixJQUFJZ0wsRUFBRTlHLEdBQUdxWixFQUFFdmQsSUFBSWtFLEVBQUU4RyxJQUFJNDdFLEVBQUUsU0FBU2x3QixFQUFFLGlDQUFpQ3c1QixFQUFFLElBQUlpWSxPQUFPLElBQUl6eEMsRUFBRSxnREFBZ0R5dEIsRUFBRSxTQUFTbjVFLEVBQUU5RyxFQUFFbVosR0FBRyxJQUFJLElBQUlpNUMsRUFBRXNILEVBQUV2Z0QsRUFBRTNYLE1BQU0sS0FBS3loRyxFQUFFLEVBQUVyaUcsRUFBRTg0RCxFQUFFcjNELE9BQU80Z0csRUFBRXJpRyxFQUFFcWlHLEtBQUs3d0MsRUFBRXNILEVBQUV1cEMsS0FBS244RixFQUFFa3RHLGFBQWFoMEcsRUFBRW95RCxJQUFJNmxDLEVBQUUsU0FBU254RixFQUFFOUcsR0FBRyxJQUFJLElBQUltWixHQUFHblosRUFBRTZrRSxhQUFhLElBQUlyakUsTUFBTSxhQUFhNHdELEVBQUUsR0FBR3NILEVBQUUsRUFBRXVwQyxFQUFFOXBGLEVBQUU5VyxPQUFPcTNELEVBQUV1cEMsRUFBRXZwQyxJQUFJLENBQUMsSUFBSTk0RCxFQUFFdVksRUFBRXVnRCxHQUFHOTZELE9BQU8sR0FBR2dDLEVBQUUsQ0FBQyxJQUFJekMsRUFBRXlDLEVBQUVtN0MsTUFBTWl3QyxHQUFHLEdBQUc3dEYsRUFBRSxDQUFDLElBQUkySCxFQUFFLEVBQUVnc0csU0FBUzN6RyxFQUFFLEdBQUcsSUFBSW0wRCxFQUFFbjBELEVBQUUsR0FBRyxJQUFJMkgsSUFBSW1tRixFQUFFMzVCLEVBQUV4c0QsR0FBR202RSxFQUFFbjVFLEVBQUV3ckQsRUFBRW4wRCxFQUFFLElBQUkySSxFQUFFbXRHLFNBQVNQLFlBQVk1dEcsRUFBRXNzRCxJQUFJQSxFQUFFL3ZELE9BQU8sT0FBTyt2RCxFQUFFMTFELEtBQUtrRSxNQUFNdXhELEVBQUUsV0FBVyxNQUFNLG9CQUFvQnJxRCxhQUFRLElBQVNBLE9BQU9vc0csa0JBQWtCcHNHLE9BQU9vc0csa0JBQWtCLE1BQU10eEIsRUFBRSxTQUFTOTdFLEdBQUcsSUFBSTlHLEVBQUVpRyxTQUFTa3VHLEtBQUtoN0YsRUFBRXJTLEdBQUc5RyxFQUFFb3lELEVBQUVuc0QsU0FBU0MsY0FBYyxTQUFTd3pELEVBQUUsU0FBUzV5RCxHQUFHLElBQUksSUFBSTlHLEVBQUU4RyxFQUFFc3RHLFdBQVdqN0YsRUFBRW5aLEVBQUVxQyxPQUFPOFcsR0FBRyxFQUFFQSxJQUFJLENBQUMsSUFBSWk1QyxFQUFFcHlELEVBQUVtWixHQUFHLEdBQUdpNUMsR0FBRyxJQUFJQSxFQUFFeVQsVUFBVXpULEVBQUVpaUQsYUFBYTdoRCxHQUFHLE9BQU9KLEdBQWxILENBQXNIajVDLEdBQUc4cEYsT0FBRSxJQUFTdnBDLEVBQUVBLEVBQUVzaUIsWUFBWSxLQUFLNXBCLEVBQUUvdEIsYUFBYW11QixFQUFFLFVBQVVKLEVBQUUvdEIsYUFBYSxzQkFBc0IsU0FBUyxJQUFJempDLEVBQUV1eEQsSUFBSSxPQUFPdnhELEdBQUd3eEQsRUFBRS90QixhQUFhLFFBQVF6akMsR0FBR3VZLEVBQUVrOUUsYUFBYWprQyxFQUFFNndDLEdBQUc3d0MsR0FBR2tpRCxFQUFFLFdBQVcsU0FBU3h0RyxFQUFFQSxHQUFHLElBQUk5RyxFQUFFOUUsS0FBS1UsUUFBUWduRixFQUFFOTdFLEdBQUc5RyxFQUFFd2xFLFlBQVl2L0QsU0FBU3dzRixlQUFlLEtBQUt2M0YsS0FBS3E1RyxNQUFNLFNBQVN6dEcsR0FBRyxHQUFHQSxFQUFFeXRHLE1BQU0sT0FBT3p0RyxFQUFFeXRHLE1BQU0sSUFBSSxJQUFJdjBHLEVBQUVpRyxTQUFTdXVHLFlBQVlyN0YsRUFBRSxFQUFFaTVDLEVBQUVweUQsRUFBRXFDLE9BQU84VyxFQUFFaTVDLEVBQUVqNUMsSUFBSSxDQUFDLElBQUl1Z0QsRUFBRTE1RCxFQUFFbVosR0FBRyxHQUFHdWdELEVBQUUrNkMsWUFBWTN0RyxFQUFFLE9BQU80eUQsRUFBRTQ1QyxFQUFFLElBQXRJLENBQTJJdHpHLEdBQUc5RSxLQUFLbUgsT0FBTyxFQUFFLElBQUlyQyxFQUFFOEcsRUFBRUgsVUFBVSxPQUFPM0csRUFBRTJ6RyxXQUFXLFNBQVM3c0csRUFBRTlHLEdBQUcsSUFBSSxPQUFPOUUsS0FBS3E1RyxNQUFNWixXQUFXM3pHLEVBQUU4RyxHQUFHNUwsS0FBS21ILFVBQVMsRUFBRyxNQUFNeUUsR0FBRyxPQUFNLElBQUs5RyxFQUFFNnpHLFdBQVcsU0FBUy9zRyxHQUFHNUwsS0FBS3E1RyxNQUFNVixXQUFXL3NHLEdBQUc1TCxLQUFLbUgsVUFBVXJDLEVBQUUrekcsUUFBUSxTQUFTanRHLEdBQUcsSUFBSTlHLEVBQUU5RSxLQUFLcTVHLE1BQU1HLFNBQVM1dEcsR0FBRyxZQUFPLElBQVM5RyxHQUFHLGlCQUFpQkEsRUFBRTIwRyxRQUFRMzBHLEVBQUUyMEcsUUFBUSxJQUFJN3RHLEVBQWxqQixHQUF1akJpeEYsRUFBRSxXQUFXLFNBQVNqeEYsRUFBRUEsR0FBRyxJQUFJOUcsRUFBRTlFLEtBQUtVLFFBQVFnbkYsRUFBRTk3RSxHQUFHNUwsS0FBSzgyQixNQUFNaHlCLEVBQUVvMEcsV0FBV2w1RyxLQUFLbUgsT0FBTyxFQUFFLElBQUlyQyxFQUFFOEcsRUFBRUgsVUFBVSxPQUFPM0csRUFBRTJ6RyxXQUFXLFNBQVM3c0csRUFBRTlHLEdBQUcsR0FBRzhHLEdBQUc1TCxLQUFLbUgsUUFBUXlFLEdBQUcsRUFBRSxDQUFDLElBQUlxUyxFQUFFbFQsU0FBU3dzRixlQUFlenlGLEdBQUdveUQsRUFBRWwzRCxLQUFLODJCLE1BQU1sckIsR0FBRyxPQUFPNUwsS0FBS1UsUUFBUXk2RixhQUFhbDlFLEVBQUVpNUMsR0FBRyxNQUFNbDNELEtBQUttSCxVQUFTLEVBQUcsT0FBTSxHQUFJckMsRUFBRTZ6RyxXQUFXLFNBQVMvc0csR0FBRzVMLEtBQUtVLFFBQVEycEUsWUFBWXJxRSxLQUFLODJCLE1BQU1sckIsSUFBSTVMLEtBQUttSCxVQUFVckMsRUFBRSt6RyxRQUFRLFNBQVNqdEcsR0FBRyxPQUFPQSxFQUFFNUwsS0FBS21ILE9BQU9uSCxLQUFLODJCLE1BQU1sckIsR0FBRys5RCxZQUFZLElBQUkvOUQsRUFBcmIsR0FBMGI2dUYsRUFBRSxXQUFXLFNBQVM3dUYsRUFBRUEsR0FBRzVMLEtBQUswNUcsTUFBTSxHQUFHMTVHLEtBQUttSCxPQUFPLEVBQUUsSUFBSXJDLEVBQUU4RyxFQUFFSCxVQUFVLE9BQU8zRyxFQUFFMnpHLFdBQVcsU0FBUzdzRyxFQUFFOUcsR0FBRyxPQUFPOEcsR0FBRzVMLEtBQUttSCxTQUFTbkgsS0FBSzA1RyxNQUFNOTNHLE9BQU9nSyxFQUFFLEVBQUU5RyxHQUFHOUUsS0FBS21ILFVBQVMsSUFBS3JDLEVBQUU2ekcsV0FBVyxTQUFTL3NHLEdBQUc1TCxLQUFLMDVHLE1BQU05M0csT0FBT2dLLEVBQUUsR0FBRzVMLEtBQUttSCxVQUFVckMsRUFBRSt6RyxRQUFRLFNBQVNqdEcsR0FBRyxPQUFPQSxFQUFFNUwsS0FBS21ILE9BQU9uSCxLQUFLMDVHLE1BQU05dEcsR0FBRyxJQUFJQSxFQUF6UyxHQUE4U2s1RSxFQUFFNkksRUFBRW1QLEVBQUUsQ0FBQzZjLFVBQVVoc0IsRUFBRWlzQixtQkFBbUI1bUIsR0FBRzNOLEVBQUUsV0FBVyxTQUFTejVFLEVBQUVBLEVBQUU5RyxFQUFFbVosUUFBRyxJQUFTclMsSUFBSUEsRUFBRTI3RSxRQUFHLElBQVN6aUYsSUFBSUEsRUFBRSxJQUFJOUUsS0FBSzBNLFFBQVF2TCxFQUFFLEdBQUcyN0YsRUFBRSxHQUFHbHhGLEdBQUc1TCxLQUFLNjVHLEdBQUcvMEcsRUFBRTlFLEtBQUs4OUMsTUFBTSxJQUFJLzhDLElBQUlrZCxHQUFHamUsS0FBSzg1RyxTQUFTbHVHLEVBQUUrdEcsVUFBVTM1RyxLQUFLODVHLFFBQVFuc0IsR0FBRzdJLElBQUlBLEdBQUUsRUFBRyxTQUFTbDVFLEdBQUcsSUFBSSxJQUFJOUcsRUFBRWlHLFNBQVMyRCxpQkFBaUI4NEUsR0FBR3ZwRSxFQUFFLEVBQUVpNUMsRUFBRXB5RCxFQUFFcUMsT0FBTzhXLEVBQUVpNUMsRUFBRWo1QyxJQUFJLENBQUMsSUFBSXVnRCxFQUFFMTVELEVBQUVtWixHQUFHdWdELEdBQUcsV0FBV0EsRUFBRXphLGFBQWF1VCxLQUFLeWxDLEVBQUVueEYsRUFBRTR5RCxHQUFHQSxFQUFFdVEsWUFBWXZRLEVBQUV1USxXQUFXMUUsWUFBWTdMLEtBQXRLLENBQTRLeCtELE9BQU80TCxFQUFFbXVHLFdBQVcsU0FBU251RyxHQUFHLE9BQU8rbEUsRUFBRS9sRSxJQUFJLElBQUk5RyxFQUFFOEcsRUFBRUgsVUFBVSxPQUFPM0csRUFBRWsxRyx1QkFBdUIsU0FBU2wxRyxFQUFFbVosR0FBRyxZQUFPLElBQVNBLElBQUlBLEdBQUUsR0FBSSxJQUFJclMsRUFBRXpLLEVBQUUsR0FBR25CLEtBQUswTSxRQUFRLEdBQUc1SCxHQUFHOUUsS0FBSzY1RyxHQUFHNTdGLEdBQUdqZSxLQUFLODlDLFlBQU8sSUFBU2g1QyxFQUFFbTFHLG1CQUFtQixTQUFTcnVHLEdBQUcsT0FBTzVMLEtBQUs2NUcsR0FBR2p1RyxJQUFJNUwsS0FBSzY1RyxHQUFHanVHLElBQUksR0FBRyxHQUFHOUcsRUFBRWkwRyxPQUFPLFdBQVcsT0FBTy80RyxLQUFLb25FLE1BQU1wbkUsS0FBS29uRSxLQUFLbnBELEdBQUduWixFQUFFOUUsS0FBSzBNLFNBQVNpdEcsU0FBU3ppRCxFQUFFcHlELEVBQUU4MEcsa0JBQWtCcDdDLEVBQUUxNUQsRUFBRXNKLE9BQU94QyxFQUFFcVMsRUFBRSxJQUFJdzhFLEVBQUVqOEIsR0FBR3RILEVBQUUsSUFBSWtpRCxFQUFFNTZDLEdBQUcsSUFBSXErQixFQUFFcitCLEdBQUcsSUFBSSs3QixFQUFFM3VGLEtBQUssSUFBSUEsRUFBRTlHLEVBQUVtWixFQUFFaTVDLEVBQUVzSCxHQUFHMTVELEVBQUVvMUcsYUFBYSxTQUFTdHVHLEVBQUU5RyxHQUFHLE9BQU85RSxLQUFLODlDLE1BQU1uOUMsSUFBSWlMLElBQUk1TCxLQUFLODlDLE1BQU05OEMsSUFBSTRLLEdBQUdqTCxJQUFJbUUsSUFBSUEsRUFBRWcwRyxhQUFhLFNBQVNsdEcsRUFBRTlHLEdBQUcsR0FBRzZzRSxFQUFFL2xFLEdBQUc1TCxLQUFLODlDLE1BQU1uOUMsSUFBSWlMLEdBQUc1TCxLQUFLODlDLE1BQU05OEMsSUFBSTRLLEdBQUc4QixJQUFJNUksT0FBTyxDQUFDLElBQUltWixFQUFFLElBQUk3YSxJQUFJNmEsRUFBRXZRLElBQUk1SSxHQUFHOUUsS0FBSzg5QyxNQUFNbDlDLElBQUlnTCxFQUFFcVMsS0FBS25aLEVBQUUwekcsWUFBWSxTQUFTNXNHLEVBQUU5RyxFQUFFbVosR0FBR2plLEtBQUs4NEcsYUFBYWx0RyxFQUFFOUcsR0FBRzlFLEtBQUsrNEcsU0FBU1AsWUFBWTdtQyxFQUFFL2xFLEdBQUdxUyxJQUFJblosRUFBRXExRyxXQUFXLFNBQVN2dUcsR0FBRzVMLEtBQUs4OUMsTUFBTW45QyxJQUFJaUwsSUFBSTVMLEtBQUs4OUMsTUFBTTk4QyxJQUFJNEssR0FBRzZYLFNBQVMzZSxFQUFFczFHLFdBQVcsU0FBU3h1RyxHQUFHNUwsS0FBSys0RyxTQUFTTCxXQUFXL21DLEVBQUUvbEUsSUFBSTVMLEtBQUttNkcsV0FBV3Z1RyxJQUFJOUcsRUFBRXUxRyxTQUFTLFdBQVdyNkcsS0FBS29uRSxTQUFJLEdBQVF0aUUsRUFBRXFsRSxTQUFTLFdBQVcsT0FBTyxTQUFTditELEdBQUcsSUFBSSxJQUFJOUcsRUFBRThHLEVBQUVtdEcsU0FBUzk2RixFQUFFblosRUFBRXFDLE9BQU8rdkQsRUFBRSxHQUFHc0gsRUFBRSxFQUFFQSxFQUFFdmdELEVBQUV1Z0QsSUFBSSxDQUFDLElBQUl1cEMsRUFBRTlsRyxFQUFFdThELEdBQUcsUUFBRyxJQUFTdXBDLEVBQUUsQ0FBQyxJQUFJcmlHLEVBQUVrRyxFQUFFa3lDLE1BQU05OEMsSUFBSSttRyxHQUFHOWtHLEVBQUU2QixFQUFFOHpHLFNBQVNwNkMsR0FBRyxHQUFHOTRELEdBQUd6QyxHQUFHeUMsRUFBRXNqQixLQUFLLENBQUMsSUFBSXBlLEVBQUUwc0QsRUFBRSxLQUFLa0gsRUFBRSxRQUFRdXBDLEVBQUUsS0FBSzN3QyxFQUFFLFFBQUcsSUFBUzF4RCxHQUFHQSxFQUFFNUMsU0FBUSxTQUFVOEksR0FBR0EsRUFBRXpFLE9BQU8sSUFBSWl3RCxHQUFHeHJELEVBQUUsUUFBUXNyRCxHQUFHLEdBQUdqMEQsRUFBRTJILEVBQUUsYUFBYXdzRCxFQUFFLGdCQUFnQixPQUFPRixFQUE5UixDQUFpU2wzRCxPQUFPNEwsRUFBeGpELEdBQTZqRHdrRixFQUFFLFdBQVd1RyxFQUFFLFNBQVMvcUYsR0FBRyxPQUFPcXdFLE9BQU9DLGFBQWF0d0UsR0FBR0EsRUFBRSxHQUFHLEdBQUcsTUFBTSxTQUFTc3lFLEVBQUd0eUUsR0FBRyxJQUFJOUcsRUFBRW1aLEVBQUUsR0FBRyxJQUFJblosRUFBRWEsS0FBS0MsSUFBSWdHLEdBQUc5RyxFQUFFLEdBQUdBLEVBQUVBLEVBQUUsR0FBRyxFQUFFbVosRUFBRTA0RSxFQUFFN3hGLEVBQUUsSUFBSW1aLEVBQUUsT0FBTzA0RSxFQUFFN3hGLEVBQUUsSUFBSW1aLEdBQUdiLFFBQVFnekUsRUFBRSxTQUFTLElBQUl6USxFQUFHLFNBQVMvekUsRUFBRTlHLEdBQUcsSUFBSSxJQUFJbVosRUFBRW5aLEVBQUVxQyxPQUFPOFcsR0FBR3JTLEVBQUUsR0FBR0EsRUFBRTlHLEVBQUU4dEQsYUFBYTMwQyxHQUFHLE9BQU9yUyxHQUFHd3pFLEVBQUcsU0FBU3h6RSxHQUFHLE9BQU8rekUsRUFBRyxLQUFLL3pFLElBQUksU0FBUzZ6RSxFQUFHN3pFLEdBQUcsSUFBSSxJQUFJOUcsRUFBRSxFQUFFQSxFQUFFOEcsRUFBRXpFLE9BQU9yQyxHQUFHLEVBQUUsQ0FBQyxJQUFJbVosRUFBRXJTLEVBQUU5RyxHQUFHLEdBQUc1QixFQUFFK2EsS0FBSyt5RSxFQUFFL3lFLEdBQUcsT0FBTSxFQUFHLE9BQU0sRUFBRyxJQUFJcWhFLEVBQUdGLEVBQUcsU0FBU00sRUFBRyxXQUFXLFNBQVM5ekUsRUFBRUEsRUFBRTlHLEVBQUVtWixHQUFHamUsS0FBSzA1RyxNQUFNOXRHLEVBQUU1TCxLQUFLczZHLGNBQWMsR0FBR3Q2RyxLQUFLbWdCLGVBQStDLElBQVNsQyxHQUFHQSxFQUFFa0MsV0FBV3MvRCxFQUFHN3pFLEdBQUc1TCxLQUFLdTZHLFlBQVl6MUcsRUFBRTlFLEtBQUt3NkcsU0FBUzc2QixFQUFHTCxFQUFHeDZFLEdBQUc5RSxLQUFLeTZHLFVBQVV4OEYsRUFBRW9uRSxFQUFFMDBCLFdBQVdqMUcsR0FBRyxPQUFPOEcsRUFBRUgsVUFBVWl2Ryx3QkFBd0IsU0FBUzl1RyxFQUFFOUcsRUFBRW1aLEdBQUcsSUFBSWk1QyxFQUFFbDNELEtBQUt1NkcsWUFBWS83QyxFQUFFLEdBQUcsR0FBR3grRCxLQUFLeTZHLFdBQVdqOEMsRUFBRWg5RCxLQUFLeEIsS0FBS3k2RyxVQUFVQyx3QkFBd0I5dUcsRUFBRTlHLEVBQUVtWixJQUFJamUsS0FBS21nQixXQUFXbEMsRUFBRTRuRixLQUFLLEdBQUc3bEcsS0FBS3M2RyxlQUFleDFHLEVBQUVvMUcsYUFBYWhqRCxFQUFFbDNELEtBQUtzNkcsZUFBZTk3QyxFQUFFaDlELEtBQUt4QixLQUFLczZHLG1CQUFtQixDQUFDLElBQUl2UyxFQUFFeG1CLEdBQUd2aEYsS0FBSzA1RyxNQUFNOXRHLEVBQUU5RyxFQUFFbVosR0FBRzZFLEtBQUssSUFBSXBkLEVBQUV3NEUsRUFBR3lCLEVBQUczL0UsS0FBS3c2RyxTQUFTelMsS0FBSyxHQUFHLElBQUlqakcsRUFBRW8xRyxhQUFhaGpELEVBQUV4eEQsR0FBRyxDQUFDLElBQUl6QyxFQUFFZ2IsRUFBRThwRixFQUFFLElBQUlyaUcsT0FBRSxFQUFPd3hELEdBQUdweUQsRUFBRTB6RyxZQUFZdGhELEVBQUV4eEQsRUFBRXpDLEdBQUd1N0QsRUFBRWg5RCxLQUFLa0UsR0FBRzFGLEtBQUtzNkcsY0FBYzUwRyxNQUFNLENBQUMsSUFBSSxJQUFJa0YsRUFBRTVLLEtBQUswNUcsTUFBTXZ5RyxPQUFPaXdELEVBQUV1b0IsRUFBRzMvRSxLQUFLdzZHLFNBQVN2OEYsRUFBRTRuRixNQUFNN3VDLEVBQUUsR0FBR25zRCxFQUFFLEVBQUVBLEVBQUVELEVBQUVDLElBQUksQ0FBQyxJQUFJa3NELEVBQUUvMkQsS0FBSzA1RyxNQUFNN3VHLEdBQUcsR0FBRyxpQkFBaUJrc0QsRUFBRUMsR0FBR0QsT0FBMEQsR0FBR0EsRUFBRSxDQUFDLElBQUludUQsRUFBRTI0RSxHQUFHeHFCLEVBQUVuckQsRUFBRTlHLEVBQUVtWixHQUFHNDRDLEVBQUVseUQsTUFBTUMsUUFBUWdFLEdBQUdBLEVBQUVrYSxLQUFLLElBQUlsYSxFQUFFd3VELEVBQUV1b0IsRUFBR3ZvQixFQUFFUCxFQUFFaHNELEdBQUdtc0QsR0FBR0gsR0FBRyxHQUFHRyxFQUFFLENBQUMsSUFBSXhRLEVBQUUwM0IsRUFBRzltQixJQUFJLEdBQUcsSUFBSXR5RCxFQUFFbzFHLGFBQWFoakQsRUFBRTFRLEdBQUcsQ0FBQyxJQUFJeGtELEVBQUVpYyxFQUFFKzRDLEVBQUUsSUFBSXhRLE9BQUUsRUFBTzBRLEdBQUdweUQsRUFBRTB6RyxZQUFZdGhELEVBQUUxUSxFQUFFeGtELEdBQUd3OEQsRUFBRWg5RCxLQUFLZ2xELElBQUksT0FBT2dZLEVBQUUxN0MsS0FBSyxNQUFNbFgsRUFBdGhDLEdBQTJoQzY1RSxHQUFHLGdCQUFnQjVILEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFNBQVNHLEdBQUdweUUsR0FBRyxJQUFJOUcsRUFBRW1aLEVBQUVpNUMsRUFBRXNILEVBQUV1cEMsT0FBRSxJQUFTbjhGLEVBQUUyN0UsRUFBRTM3RSxFQUFFbEcsRUFBRXFpRyxFQUFFcjdGLFFBQVF6SixPQUFFLElBQVN5QyxFQUFFNmhGLEVBQUU3aEYsRUFBRWtGLEVBQUVtOUYsRUFBRTRTLFFBQVF2akQsT0FBRSxJQUFTeHNELEVBQUV1c0QsRUFBRXZzRCxFQUFFb3NELEVBQUUsSUFBSSxFQUFFL3pELEdBQUc0SCxFQUFFLEdBQUdrc0QsRUFBRSxTQUFTbnJELEdBQUcsU0FBUzlHLEVBQUVBLEdBQUcsR0FBR0EsRUFBRSxJQUFJOEcsRUFBRTlHLEVBQUUsS0FBSyxNQUFNOEcsS0FBSyxPQUFPLFNBQVNxUyxFQUFFaTVDLEVBQUVzSCxFQUFFdXBDLEVBQUVyaUcsRUFBRXpDLEVBQUUySCxFQUFFd3NELEVBQUVKLEVBQUVuc0QsR0FBRyxPQUFPb1QsR0FBRyxLQUFLLEVBQUUsR0FBRyxJQUFJKzRDLEdBQUcsS0FBS0UsRUFBRXRFLFdBQVcsR0FBRyxPQUFPaG5ELEVBQUVzckQsRUFBRSxLQUFLLEdBQUcsTUFBTSxLQUFLLEVBQUUsR0FBRyxJQUFJRSxFQUFFLE9BQU9GLEVBQUUsUUFBUSxNQUFNLEtBQUssRUFBRSxPQUFPRSxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksT0FBT3hyRCxFQUFFNHlELEVBQUUsR0FBR3RILEdBQUcsR0FBRyxRQUFRLE9BQU9BLEdBQUcsSUFBSXJzRCxFQUFFLFFBQVEsSUFBSSxLQUFLLEVBQUVxc0QsRUFBRTV3RCxNQUFNLFVBQVV4RCxRQUFRZ0MsS0FBeFUsRUFBOFUsU0FBVThHLEdBQUdmLEVBQUVySixLQUFLb0ssTUFBTWlyRCxFQUFFLFNBQVNqckQsRUFBRXNyRCxFQUFFNndDLEdBQUcsT0FBTyxJQUFJN3dDLElBQUksSUFBSTJtQixHQUFHdDhFLFFBQVF3bUcsRUFBRTlwRixFQUFFOVcsVUFBVTRnRyxFQUFFbG5ELE1BQU0yZCxHQUFHNXlELEVBQUUsSUFBSTlHLEdBQUcsU0FBUzBoRCxFQUFFNTZDLEVBQUVtOEYsRUFBRXJpRyxFQUFFekMsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLEtBQUssSUFBSTJILEVBQUVnQixFQUFFd1IsUUFBUXFvRSxHQUFHLElBQUlydUIsRUFBRTJ3QyxHQUFHcmlHLEVBQUVBLEVBQUUsSUFBSXFpRyxFQUFFLE1BQU1uOUYsRUFBRSxLQUFLQSxFQUFFLE9BQU85RixFQUFFN0IsRUFBRWdiLEVBQUU4cEYsRUFBRTd3QyxFQUFFLElBQUk2eEMsT0FBTyxLQUFLOXFGLEVBQUUsTUFBTSxLQUFLdWdELEVBQUUsSUFBSXVxQyxPQUFPLE1BQU05cUYsRUFBRSxZQUFZKzRDLEVBQUV0eEQsSUFBSXFpRyxFQUFFLEdBQUdBLEVBQUUzd0MsR0FBRyxPQUFPSixFQUFFeWdELElBQUksR0FBR2h4RixPQUFPMndDLEVBQUUsQ0FBQyxTQUFTeHJELEVBQUU5RyxFQUFFMDVELEdBQUcsSUFBSTV5RCxHQUFHNHlELEVBQUVyM0QsUUFBUXEzRCxFQUFFLEdBQUdvOEMsWUFBWTM4RixHQUFHLElBQUl1Z0QsRUFBRSxHQUFHQSxFQUFFLEdBQUdwaEQsUUFBUTg1QyxFQUFFTCxLQUFLRSxFQUFFLFNBQVNuckQsR0FBRyxJQUFJLElBQUlBLEVBQUUsQ0FBQyxJQUFJOUcsRUFBRStGLEVBQUUsT0FBT0EsRUFBRSxHQUFHL0YsT0FBTzBoRCxFQUFFcS9DLEtBQUt6dUMsRUFBRWp3RCxPQUFPaXdELEVBQUU1ekQsUUFBTyxTQUFVb0ksRUFBRTlHLEdBQUcsT0FBT0EsRUFBRWpDLE1BQU11MUcsRUFBRSxJQUFJejRCLEVBQUcvekUsRUFBRTlHLEVBQUVqQyxRQUFRLE1BQU1zbkUsV0FBVyxHQUFHM2pCLEVBQUUsSUFBSW81QixHQUFHLGtCQUFrQlYsR0FBR1UsR0FBRzJ6QixTQUFTdDFCLEdBQUcsa0JBQWtCSSxJQUFJSixHQUFHczFCLFNBQVMsSUFBSWx1QixHQUFHOUYsR0FBR3ZCLEtBQUssU0FBU0csS0FBSyxPQUFPLGdCQUFFeUIsS0FBS3ZCLEdBQUcsU0FBU2MsS0FBSyxPQUFPLGdCQUFFbEIsS0FBS3NCLEdBQUcsU0FBU1MsR0FBR3AwRSxHQUFHLElBQUk5RyxHQUFFLGNBQUU4RyxFQUFFaXZHLGVBQWU1OEYsRUFBRW5aLEVBQUUsR0FBR2lqRyxFQUFFampHLEVBQUUsR0FBRzhGLEVBQUV1ekUsS0FBSy9tQixHQUFFLGNBQUUsV0FBWSxJQUFJdHlELEVBQUU4RixFQUFFLE9BQU9nQixFQUFFeXRHLE1BQU12MEcsRUFBRThHLEVBQUV5dEcsTUFBTXp0RyxFQUFFd0MsU0FBU3RKLEVBQUVBLEVBQUVrMUcsdUJBQXVCLENBQUM1ckcsT0FBT3hDLEVBQUV3QyxTQUFRLElBQUt4QyxFQUFFa3ZHLHdCQUF3QmgyRyxFQUFFQSxFQUFFazFHLHVCQUF1QixDQUFDSixtQkFBa0IsS0FBTTkwRyxJQUFJLENBQUM4RyxFQUFFa3ZHLHNCQUFzQmx2RyxFQUFFeXRHLE1BQU16dEcsRUFBRXdDLFNBQVM0b0QsR0FBRSxjQUFFLFdBQVksT0FBT2duQixHQUFHLENBQUN0eEUsUUFBUSxDQUFDOHFHLFFBQVE1ckcsRUFBRW12Ryx1QkFBdUJKLFFBQVExOEYsTUFBTSxDQUFDclMsRUFBRW12RyxzQkFBc0I5OEYsSUFBSSxPQUFPLGdCQUFFLFdBQVksSUFBRUEsRUFBRXJTLEVBQUVpdkcsZ0JBQWdCOVMsRUFBRW44RixFQUFFaXZHLGlCQUFpQixDQUFDanZHLEVBQUVpdkcsZ0JBQWdCLGdCQUFnQmo3QixHQUFHejdDLFNBQVMsQ0FBQzcvQixNQUFNOHlELEdBQUcsZ0JBQWdCNm1CLEdBQUc5NUMsU0FBUyxDQUFDNy9CLE1BQU0weUQsR0FBbUVwckQsRUFBRXFwQixXQUFXLElBQUk0cUQsR0FBRyxXQUFXLFNBQVNqMEUsRUFBRUEsRUFBRTlHLEdBQUcsSUFBSW1aLEVBQUVqZSxLQUFLQSxLQUFLOGpHLE9BQU8sU0FBU2w0RixFQUFFOUcsUUFBRyxJQUFTQSxJQUFJQSxFQUFFeTZFLElBQUksSUFBSXJvQixFQUFFajVDLEVBQUVwYixLQUFLaUMsRUFBRStnRyxLQUFLajZGLEVBQUVzdUcsYUFBYWo4RixFQUFFZ1ksR0FBR2loQyxJQUFJdHJELEVBQUU0c0csWUFBWXY2RixFQUFFZ1ksR0FBR2loQyxFQUFFcHlELEVBQUVtWixFQUFFeTdGLE1BQU14aUQsRUFBRSxnQkFBZ0JsM0QsS0FBS21xRSxTQUFTLFdBQVcsT0FBT2l1QyxFQUFFLEdBQUduOEIsT0FBT2grRCxFQUFFcGIsUUFBUTdDLEtBQUs2QyxLQUFLK0ksRUFBRTVMLEtBQUtpMkIsR0FBRyxnQkFBZ0JycUIsRUFBRTVMLEtBQUswNUcsTUFBTTUwRyxFQUFFLE9BQU84RyxFQUFFSCxVQUFVdXZHLFFBQVEsU0FBU3B2RyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRTJ6RSxJQUFJdi9FLEtBQUs2QyxLQUFLK0ksRUFBRWk2RixNQUFNajZGLEVBQTVXLEdBQWlYd3lFLEdBQUcsVUFBVXlFLEdBQUcsV0FBVy9DLEdBQUcsT0FBT1csR0FBRyxTQUFTNzBFLEdBQUcsTUFBTSxJQUFJQSxFQUFFcVIsZUFBZSxTQUFTOGdFLEdBQUdueUUsR0FBRyxPQUFPd3lFLEdBQUd4M0QsS0FBS2hiLEdBQUdBLEVBQUV3UixRQUFReWxFLEdBQUdwQyxJQUFJcmpFLFFBQVEwaUUsR0FBRyxRQUFRbDBFLEVBQUUsSUFBSTJuQixHQUFHLFNBQVMzbkIsR0FBRyxPQUFPLE1BQU1BLElBQUcsSUFBS0EsR0FBRyxLQUFLQSxHQUFHLFNBQVMyMUUsR0FBRzMxRSxFQUFFcVMsRUFBRWk1QyxFQUFFc0gsR0FBRyxHQUFHNzVELE1BQU1DLFFBQVFnSCxHQUFHLENBQUMsSUFBSSxJQUFJbThGLEVBQUVyaUcsRUFBRSxHQUFHekMsRUFBRSxFQUFFMkgsRUFBRWdCLEVBQUV6RSxPQUFPbEUsRUFBRTJILEVBQUUzSCxHQUFHLEVBQUUsTUFBTThrRyxFQUFFeG1CLEdBQUczMUUsRUFBRTNJLEdBQUdnYixFQUFFaTVDLEVBQUVzSCxNQUFNNzVELE1BQU1DLFFBQVFtakcsR0FBR3JpRyxFQUFFbEUsS0FBS20yQixNQUFNanlCLEVBQUVxaUcsR0FBR3JpRyxFQUFFbEUsS0FBS3VtRyxJQUFJLE9BQU9yaUcsRUFBRSxPQUFHNnRCLEdBQUczbkIsR0FBUyxHQUFNb2xGLEVBQUVwbEYsR0FBUyxJQUFJQSxFQUFFbXNHLGtCQUFxQjcwRyxFQUFFMEksR0FBTyxtQkFBbUJvckQsRUFBRXByRCxJQUFJb3JELEVBQUV2ckQsV0FBV3VyRCxFQUFFdnJELFVBQVU0MEYsbUJBQW1CcGlGLEVBQVNyUyxFQUFvUTIxRSxHQUE1UDMxRSxFQUFFcVMsR0FBK1BBLEVBQUVpNUMsRUFBRXNILEdBQWdCNXlELGFBQWFpMEUsR0FBRzNvQixHQUFHdHJELEVBQUVrNEYsT0FBTzVzQyxFQUFFc0gsR0FBRzV5RCxFQUFFb3ZHLFFBQVF4OEMsSUFBSTV5RCxFQUFFeXVGLEVBQUV6dUYsR0FBRyxTQUFTQSxFQUFFOUcsRUFBRW1aLEdBQUcsSUFBSWk1QyxFQUFFc0gsRUFBRXVwQyxFQUFFLEdBQUcsSUFBSSxJQUFJcmlHLEtBQUtaLEVBQUVBLEVBQUV3RyxlQUFlNUYsS0FBSzZ0QixHQUFHenVCLEVBQUVZLE1BQU1mLE1BQU1DLFFBQVFFLEVBQUVZLEtBQUtaLEVBQUVZLEdBQUd1MUcsT0FBTy8zRyxFQUFFNEIsRUFBRVksSUFBSXFpRyxFQUFFdm1HLEtBQUt1OEUsR0FBR3I0RSxHQUFHLElBQUlaLEVBQUVZLEdBQUcsS0FBSzIwRixFQUFFdjFGLEVBQUVZLElBQUlxaUcsRUFBRXZtRyxLQUFLbTJCLE1BQU1vd0UsRUFBRW44RixFQUFFOUcsRUFBRVksR0FBR0EsSUFBSXFpRyxFQUFFdm1HLEtBQUt1OEUsR0FBR3I0RSxHQUFHLE1BQU13eEQsRUFBRXh4RCxHQUFFLE9BQU84NEQsRUFBRTE1RCxFQUFFWSxLQUFLLGtCQUFrQjg0RCxHQUFHLEtBQUtBLEVBQUUsR0FBRyxpQkFBaUJBLEdBQUcsSUFBSUEsR0FBR3RILEtBQUssRUFBRStrQixPQUFPemQsR0FBRzk2RCxPQUFPODZELEVBQUUsTUFBTSxPQUFNLE9BQU92Z0QsRUFBRSxDQUFDQSxFQUFFLE1BQU13SSxPQUFPc2hGLEVBQUUsQ0FBQyxNQUFNQSxFQUE1VixDQUErVm44RixHQUFHQSxFQUFFdStELFdBQXJyQixJQUFrUm5ULEVBQThhLElBQUlvcEIsR0FBRyxTQUFTeDBFLEdBQUcsT0FBT2pILE1BQU1DLFFBQVFnSCxLQUFLQSxFQUFFcXZHLE9BQU0sR0FBSXJ2RyxHQUFHLFNBQVMyMEUsR0FBRzMwRSxHQUFHLElBQUksSUFBSTlHLEVBQUUyeUIsVUFBVXR3QixPQUFPOFcsRUFBRSxJQUFJdFosTUFBTUcsRUFBRSxFQUFFQSxFQUFFLEVBQUUsR0FBR295RCxFQUFFLEVBQUVBLEVBQUVweUQsRUFBRW95RCxJQUFJajVDLEVBQUVpNUMsRUFBRSxHQUFHei9CLFVBQVV5L0IsR0FBRyxPQUFPaDBELEVBQUUwSSxJQUFJeXVGLEVBQUV6dUYsR0FBR3cwRSxHQUFHbUIsR0FBR3pxQixFQUFFSyxFQUFFLENBQUN2ckQsR0FBRzZhLE9BQU94SSxNQUFNLElBQUlBLEVBQUU5VyxRQUFRLElBQUl5RSxFQUFFekUsUUFBUSxpQkFBaUJ5RSxFQUFFLEdBQUdBLEVBQUV3MEUsR0FBR21CLEdBQUd6cUIsRUFBRWxyRCxFQUFFcVMsS0FBb0MsSUFBSTdhLElBQW5DLElBQXFyQncvRSxHQUFHLFNBQVNoM0UsRUFBRTlHLEVBQUVtWixHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRXNwRSxHQUFHMzdFLEVBQUVzdkcsUUFBUWo5RixFQUFFaTlGLE9BQU90dkcsRUFBRXN2RyxPQUFPcDJHLEdBQUdtWixFQUFFaTlGLE9BQU8xNkIsR0FBRyx3Q0FBd0NtRixHQUFHLFdBQVcsU0FBUzdDLEdBQUdsM0UsR0FBRyxPQUFPQSxFQUFFd1IsUUFBUW9qRSxHQUFHLEtBQUtwakUsUUFBUXVvRSxHQUFHLElBQUksSUFBSTVGLEdBQUcsU0FBU24wRSxHQUFHLE9BQU9zeUUsRUFBR2tCLEVBQUd4ekUsS0FBSyxJQUFJLFNBQVMweUUsR0FBRzF5RSxHQUFHLE1BQU0saUJBQWlCQSxJQUFJLEVBQThFLElBQUlvM0UsR0FBRyxTQUFTcDNFLEdBQUcsTUFBTSxtQkFBbUJBLEdBQUcsaUJBQWlCQSxHQUFHLE9BQU9BLElBQUlqSCxNQUFNQyxRQUFRZ0gsSUFBSXkwRSxHQUFHLFNBQVN6MEUsR0FBRyxNQUFNLGNBQWNBLEdBQUcsZ0JBQWdCQSxHQUFHLGNBQWNBLEdBQUcsU0FBU3MwRSxHQUFHdDBFLEVBQUU5RyxFQUFFbVosR0FBRyxJQUFJaTVDLEVBQUV0ckQsRUFBRXFTLEdBQUcra0UsR0FBR2wrRSxJQUFJaytFLEdBQUc5ckIsR0FBR21xQixHQUFHbnFCLEVBQUVweUQsR0FBRzhHLEVBQUVxUyxHQUFHblosRUFBRSxTQUFTdThFLEdBQUd6MUUsR0FBRyxJQUFJLElBQUk5RyxFQUFFMnlCLFVBQVV0d0IsT0FBTzhXLEVBQUUsSUFBSXRaLE1BQU1HLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUdveUQsRUFBRSxFQUFFQSxFQUFFcHlELEVBQUVveUQsSUFBSWo1QyxFQUFFaTVDLEVBQUUsR0FBR3ovQixVQUFVeS9CLEdBQUcsSUFBSSxJQUFJc0gsRUFBRSxFQUFFdXBDLEVBQUU5cEYsRUFBRXVnRCxFQUFFdXBDLEVBQUU1Z0csT0FBT3EzRCxJQUFJLENBQUMsSUFBSTk0RCxFQUFFcWlHLEVBQUV2cEMsR0FBRyxHQUFHd2tCLEdBQUd0OUUsR0FBRyxJQUFJLElBQUl6QyxLQUFLeUMsRUFBRTI2RSxHQUFHcDlFLElBQUlpOUUsR0FBR3QwRSxFQUFFbEcsRUFBRXpDLEdBQUdBLEdBQUcsT0FBTzJJLEVBQUUsSUFBSTgwRSxHQUFHLGtCQUFrQk8sR0FBR1AsR0FBRzZ5QixTQUFTLFNBQVM0SCxHQUFHdnZHLEdBQUcsSUFBSTlHLEdBQUUsZ0JBQUU0N0UsSUFBSXppRSxHQUFFLGNBQUUsV0FBWSxPQUFPLFNBQVNyUyxFQUFFOUcsR0FBRyxPQUFJOEcsRUFBa0IxSSxFQUFFMEksR0FBVUEsRUFBRTlHLEdBQTRHSCxNQUFNQyxRQUFRZ0gsSUFBSSxpQkFBaUJBLEVBQUV3c0csRUFBRSxHQUFHdHpHLEVBQUUzRCxFQUFFLEdBQUcyRCxFQUFFLEdBQUc4RyxHQUFHQSxFQUE1THdzRyxFQUFFLElBQTdCLENBQTBOeHNHLEVBQUVzdkcsTUFBTXAyRyxLQUFLLENBQUM4RyxFQUFFc3ZHLE1BQU1wMkcsSUFBSSxPQUFPOEcsRUFBRXFwQixTQUFTLGdCQUFnQnlyRCxHQUFHdjhDLFNBQVMsQ0FBQzcvQixNQUFNMlosR0FBR3JTLEVBQUVxcEIsVUFBVSxLQUFLLElBQUlzdUQsR0FBRyxHQUFHLFNBQVMvRCxHQUFHNXpFLEVBQUU5RyxFQUFFbVosR0FBRyxJQUFJdWdELEVBQUV3eUIsRUFBRXBsRixHQUFHbEcsR0FBRzQ0RSxHQUFHMXlFLEdBQUczSSxFQUFFNkIsRUFBRStpQyxNQUFNajlCLE9BQUUsSUFBUzNILEVBQUVrMEQsRUFBRWwwRCxFQUFFNEgsRUFBRS9GLEVBQUV5MUcsWUFBWXhqRCxPQUFFLElBQVNsc0QsRUFBRSxTQUFTZSxFQUFFOUcsR0FBRyxJQUFJbVosRUFBRSxpQkFBaUJyUyxFQUFFLEtBQUtrM0UsR0FBR2wzRSxHQUFHMjNFLEdBQUd0bEUsSUFBSXNsRSxHQUFHdGxFLElBQUksR0FBRyxFQUFFLElBQUlpNUMsRUFBRWo1QyxFQUFFLElBQUk4aEUsR0FBRyxRQUFROWhFLEVBQUVzbEUsR0FBR3RsRSxJQUFJLE9BQU9uWixFQUFFQSxFQUFFLElBQUlveUQsRUFBRUEsRUFBdEgsQ0FBeUhweUQsRUFBRTh2RCxZQUFZOXZELEVBQUVzMkcsbUJBQW1CdndHLEVBQUVqQyxFQUFFOUQsRUFBRTh2RCxZQUFZaUMsT0FBRSxJQUFTanVELEVBQUUsU0FBU2dELEdBQUcsT0FBTzB5RSxHQUFHMXlFLEdBQUcsVUFBVUEsRUFBRSxVQUFVNDdDLEVBQUU1N0MsR0FBRyxJQUFwRCxDQUF5REEsR0FBR2hELEVBQUVrdUQsRUFBRWh5RCxFQUFFOHZELGFBQWE5dkQsRUFBRXkxRyxZQUFZejNCLEdBQUdoK0UsRUFBRTh2RCxhQUFhLElBQUk5dkQsRUFBRXkxRyxZQUFZejFHLEVBQUV5MUcsYUFBYXhqRCxFQUFFc2pDLEVBQUU3N0IsR0FBRzV5RCxFQUFFaThCLE1BQU1sakMsTUFBTThHLFVBQVVnYixPQUFPN2EsRUFBRWk4QixNQUFNajlCLEdBQUdxRSxPQUFPekssU0FBU29HLEVBQUUwc0QsRUFBRXh5RCxFQUFFdTJHLGtCQUFrQjc4QyxHQUFHNXlELEVBQUV5dkcsb0JBQW9CL2pELEVBQUV4eUQsRUFBRXUyRyxrQkFBa0IsU0FBU3A5RixFQUFFaTVDLEVBQUVzSCxHQUFHLE9BQU81eUQsRUFBRXl2RyxrQkFBa0JwOUYsRUFBRWk1QyxFQUFFc0gsSUFBSTE1RCxFQUFFdTJHLGtCQUFrQnA5RixFQUFFaTVDLEVBQUVzSCxJQUFJNXlELEVBQUV5dkcsbUJBQW1CLElBQUlwbkMsRUFBRTBaLEVBQUUsSUFBSWpPLEVBQUd6aEUsRUFBRTY0QyxFQUFFMEgsRUFBRTV5RCxFQUFFMHZHLG9CQUFlLEdBQVF0b0IsRUFBRXJGLEVBQUV4dEUsVUFBVSxJQUFJdlYsRUFBRXpELE9BQU9rcUYsRUFBRSxTQUFTemxGLEVBQUU5RyxHQUFHLE9BQU8sU0FBUzhHLEVBQUU5RyxFQUFFbVosRUFBRWk1QyxHQUFHLElBQUlzSCxFQUFFNXlELEVBQUVpOEIsTUFBTW5pQyxFQUFFa0csRUFBRTB2RyxlQUFlcjRHLEVBQUUySSxFQUFFK29ELGFBQWEvcEQsRUFBRWdCLEVBQUUydkcsbUJBQW1CMXdHLEVBQUVlLEVBQUV5dkcsa0JBQWtCdGtELEVBQUVuckQsRUFBRW1zRyxrQkFBa0JudkcsRUFBRWdELEVBQUV3QyxPQUFxRHlvRCxFQUFFLFNBQVNqckQsRUFBRTlHLEVBQUVtWixRQUFHLElBQVNyUyxJQUFJQSxFQUFFMjdFLEdBQUcsSUFBSXJ3QixFQUFFLzFELEVBQUUsR0FBRzJELEVBQUUsQ0FBQ28yRyxNQUFNdHZHLElBQUk0eUQsRUFBRSxHQUFHLE9BQU92Z0QsRUFBRW5iLFNBQVEsU0FBVThJLEdBQUcsSUFBSTlHLEVBQUVtWixFQUFFOHBGLEVBQUVyaUcsRUFBRWtHLEVBQUUsSUFBSTlHLEtBQUs1QixFQUFFd0MsS0FBS0EsRUFBRUEsRUFBRXd4RCxJQUFJeHhELEVBQUV3eEQsRUFBRXB5RCxHQUFHMDVELEVBQUUxNUQsR0FBRyxjQUFjQSxHQUFHbVosRUFBRXVnRCxFQUFFMTVELEdBQUdpakcsRUFBRXJpRyxFQUFFWixHQUFHbVosR0FBRzhwRixFQUFFOXBGLEVBQUUsSUFBSThwRixFQUFFOXBGLEdBQUc4cEYsR0FBR3JpRyxFQUFFWixNQUFNLENBQUNveUQsRUFBRXNILEdBQTVNLENBQWdOb2tCLEdBQUc5OUUsR0FBRSxnQkFBRTQ3RSxJQUFJejlFLElBQUlza0YsRUFBRXppRixFQUFFMDVELEdBQUd4OEQsRUFBRTYwRCxFQUFFLEdBQUdDLEVBQUVELEVBQUUsR0FBR3dqQyxFQUFFLFNBQVN6dUYsRUFBRTlHLEVBQUVtWixFQUFFaTVDLEdBQUcsSUFBSXNILEVBQUUyZixLQUFLNHBCLEVBQUU1b0IsS0FBMkUsT0FBcEVyNkUsRUFBRThHLEVBQUU4dUcsd0JBQXdCbnpCLEVBQUUvb0IsRUFBRXVwQyxHQUFHbjhGLEVBQUU4dUcsd0JBQXdCejhGLEVBQUV1Z0QsRUFBRXVwQyxHQUF2RyxDQUE4TXJpRyxFQUFFd3hELEVBQUVsMUQsR0FBbUVtMUQsRUFBRWw1QyxFQUFFdXBDLEVBQUVzUCxFQUFFMGtELEtBQUsxMkcsRUFBRTAyRyxLQUFLMWtELEVBQUV0TyxJQUFJMWpELEVBQUUwakQsSUFBSTUvQyxFQUFFb29GLEVBQUUxUyxHQUFHOTJCLEdBQUc4UCxFQUFFUixJQUFJaHlELEVBQUUzRCxFQUFFLEdBQUcyRCxFQUFFLEdBQUdneUQsR0FBR2h5RCxFQUFFbXZFLEVBQUUsR0FBRyxJQUFJLElBQUkwWixLQUFLcjJCLEVBQUUsTUFBTXEyQixFQUFFLElBQUksT0FBT0EsSUFBSSxnQkFBZ0JBLEVBQUUxWixFQUFFenJCLEdBQUc4TyxFQUFFcTJCLElBQUk5aUYsRUFBRUEsRUFBRThpRixFQUFFLEVBQUVubUMsSUFBSXdwQyxHQUFHLEVBQUVyRCxNQUFNMVosRUFBRTBaLEdBQUdyMkIsRUFBRXEyQixLQUFLLE9BQU83b0YsRUFBRW9ILE9BQU80cUQsRUFBRTVxRCxRQUFRcEgsRUFBRW9ILFFBQVErbkUsRUFBRS9uRSxNQUFNL0ssRUFBRSxHQUFHMkQsRUFBRW9ILE1BQU0sR0FBRzRxRCxFQUFFNXFELFFBQVErbkUsRUFBRTI5QixVQUFVanRHLE1BQU04RyxVQUFVZ2IsT0FBTzdiLEVBQUVtc0QsRUFBRXNqQyxJQUFJdGpDLEVBQUVzakMsRUFBRSxLQUFLdjFGLEVBQUU4c0csVUFBVTk2QyxFQUFFODZDLFdBQVczaUcsT0FBT3pLLFNBQVNzZSxLQUFLLEtBQUtteEQsRUFBRXJ5RCxJQUFJdTFDLEdBQUUsbUJBQUUzUCxFQUFFeXNCLEdBQWxqQyxDQUFzakNBLEVBQUVyb0UsRUFBRTlHLEVBQUVrdUYsSUFBSSxPQUFPM0IsRUFBRXo4QixZQUFZaUMsR0FBR29kLEVBQUUsYUFBYW9kLElBQUl4cEQsTUFBTXd5RCxFQUFFcG1CLEVBQUVxbkMsZUFBZTN0QixFQUFFMVosRUFBRXJmLFlBQVlpQyxFQUFFb2QsRUFBRW9uQyxrQkFBa0IvakQsRUFBRTJjLEVBQUVzbkMsbUJBQW1CLzhDLEVBQUU3NUQsTUFBTThHLFVBQVVnYixPQUFPN2EsRUFBRTJ2RyxtQkFBbUIzdkcsRUFBRW1zRyxtQkFBbUI1Z0QsRUFBRThjLEVBQUU4akMsa0JBQWtCamhELEVBQUVtZCxFQUFFN2xFLE9BQU9vd0QsRUFBRTV5RCxFQUFFd0MsT0FBT3hDLEVBQUVxb0UsRUFBRXduQyxjQUFjLFNBQVM3dkcsR0FBRyxJQUFJc3JELEVBQUVweUQsRUFBRXkxRyxZQUFZLzdDLEVBQUUsU0FBUzV5RCxFQUFFOUcsR0FBRyxHQUFHLE1BQU04RyxFQUFFLE1BQU0sR0FBRyxJQUFJcVMsRUFBRWk1QyxFQUFFc0gsRUFBRSxHQUFHdXBDLEVBQUUxOEYsT0FBT3VQLEtBQUtoUCxHQUFHLElBQUlzckQsRUFBRSxFQUFFQSxFQUFFNndDLEVBQUU1Z0csT0FBTyt2RCxJQUFJajVDLEVBQUU4cEYsRUFBRTd3QyxHQUFHcHlELEVBQUV2RCxRQUFRMGMsSUFBSSxJQUFJdWdELEVBQUV2Z0QsR0FBR3JTLEVBQUVxUyxJQUFJLE9BQU91Z0QsRUFBbEksQ0FBcUkxNUQsRUFBRSxDQUFDLGdCQUFnQmlqRyxFQUFFN3dDLEdBQUdBLEVBQUUsS0FBS29uQixHQUFHMXlFLEdBQUdBLEVBQUVrM0UsR0FBR3Q3QixFQUFFNTdDLEtBQUssT0FBTzR6RSxHQUFHNXpFLEVBQUV6SyxFQUFFLEdBQUdxOUQsRUFBRSxDQUFDMzJCLE1BQU13eUQsRUFBRWtnQixZQUFZeFMsSUFBSTlwRixJQUFJNVMsT0FBT2dTLGVBQWU0MkQsRUFBRSxlQUFlLENBQUNqekUsSUFBSSxXQUFXLE9BQU9oQixLQUFLMDdHLHFCQUFxQjk2RyxJQUFJLFNBQVNrRSxHQUFHOUUsS0FBSzA3RyxvQkFBb0JsOUMsRUFBRTZpQixHQUFHLEdBQUd6MUUsRUFBRStvRCxhQUFhN3ZELEdBQUdBLEtBQWdpQm12RSxFQUFFOUosU0FBUyxXQUFXLE1BQU0sSUFBSThKLEVBQUU4akMsbUJBQW1CcnlHLEdBQUcsSUFBRXV1RSxFQUFFcm9FLEVBQUUsQ0FBQ2k4QixPQUFNLEVBQUd5ekUsZ0JBQWUsRUFBRzFtRCxhQUFZLEVBQUcybUQsb0JBQW1CLEVBQUdGLG1CQUFrQixFQUFHdEQsbUJBQWtCLEVBQUczcEcsUUFBTyxFQUFHcXRHLGVBQWMsSUFBS3huQyxFQUFFLElBQUkwTSxHQUFHLFNBQVMvMEUsR0FBRyxPQUFPLFNBQVNBLEVBQUU5RyxFQUFFb3lELEVBQUVzSCxHQUFHLFFBQUcsSUFBU0EsSUFBSUEsRUFBRStvQixLQUFJLHdCQUFFcndCLEdBQUcsT0FBT2toRCxFQUFFLEVBQUVuOEIsT0FBTy9rQixJQUFJLElBQUk2d0MsRUFBRSxXQUFXLE9BQU9qakcsRUFBRW95RCxFQUFFc0gsRUFBRStoQixHQUFHNW9ELFdBQU0sRUFBT0YsYUFBYSxPQUFPc3dFLEVBQUU0VCxXQUFXLFNBQVMxOUYsR0FBRyxPQUFPclMsRUFBRTlHLEVBQUVveUQsRUFBRS8xRCxFQUFFLEdBQUdxOUQsRUFBRSxHQUFHdmdELEtBQUs4cEYsRUFBRWxnRSxNQUFNLFNBQVM1cEIsR0FBRyxPQUFPclMsRUFBRTlHLEVBQUVveUQsRUFBRS8xRCxFQUFFLEdBQUdxOUQsRUFBRSxDQUFDMzJCLE1BQU1sakMsTUFBTThHLFVBQVVnYixPQUFPKzNDLEVBQUUzMkIsTUFBTTVwQixHQUFHaFAsT0FBT3pLLGFBQWF1akcsRUFBL1IsQ0FBa1N2b0IsR0FBRzV6RSxJQUFJLENBQUMsSUFBSSxPQUFPLFVBQVUsT0FBTyxVQUFVLFFBQVEsUUFBUSxJQUFJLE9BQU8sTUFBTSxNQUFNLE1BQU0sYUFBYSxPQUFPLEtBQUssU0FBUyxTQUFTLFVBQVUsT0FBTyxPQUFPLE1BQU0sV0FBVyxPQUFPLFdBQVcsS0FBSyxNQUFNLFVBQVUsTUFBTSxTQUFTLE1BQU0sS0FBSyxLQUFLLEtBQUssUUFBUSxXQUFXLGFBQWEsU0FBUyxTQUFTLE9BQU8sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssT0FBTyxTQUFTLFNBQVMsS0FBSyxPQUFPLElBQUksU0FBUyxNQUFNLFFBQVEsTUFBTSxNQUFNLFNBQVMsUUFBUSxTQUFTLEtBQUssT0FBTyxPQUFPLE1BQU0sT0FBTyxVQUFVLE9BQU8sV0FBVyxPQUFPLFFBQVEsTUFBTSxXQUFXLFNBQVMsS0FBSyxXQUFXLFNBQVMsU0FBUyxJQUFJLFFBQVEsVUFBVSxNQUFNLFdBQVcsSUFBSSxLQUFLLEtBQUssT0FBTyxJQUFJLE9BQU8sU0FBUyxVQUFVLFNBQVMsUUFBUSxTQUFTLE9BQU8sU0FBUyxRQUFRLE1BQU0sVUFBVSxNQUFNLFFBQVEsUUFBUSxLQUFLLFdBQVcsUUFBUSxLQUFLLFFBQVEsT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLEtBQUssTUFBTSxRQUFRLE1BQU0sU0FBUyxXQUFXLE9BQU8sVUFBVSxnQkFBZ0IsSUFBSSxRQUFRLE9BQU8saUJBQWlCLFNBQVMsT0FBTyxPQUFPLFVBQVUsVUFBVSxXQUFXLGlCQUFpQixPQUFPLE9BQU8sTUFBTSxPQUFPLFdBQVcsU0FBUzlJLFNBQVEsU0FBVThJLEdBQUcrMEUsR0FBRy8wRSxHQUFHKzBFLEdBQUcvMEUsTUFBTSxJQUFJNjNFLEdBQUcsV0FBVyxTQUFTNzNFLEVBQUVBLEVBQUU5RyxHQUFHOUUsS0FBSzA1RyxNQUFNOXRHLEVBQUU1TCxLQUFLdTZHLFlBQVl6MUcsRUFBRTlFLEtBQUttZ0IsU0FBU3MvRCxFQUFHN3pFLEdBQUd5NUUsRUFBRTAwQixXQUFXLzVHLEtBQUt1NkcsWUFBWSxHQUFHLElBQUl6MUcsRUFBRThHLEVBQUVILFVBQVUsT0FBTzNHLEVBQUU2WCxhQUFhLFNBQVMvUSxFQUFFOUcsRUFBRW1aLEVBQUVpNUMsR0FBRyxJQUFJc0gsRUFBRXRILEVBQUVxcUIsR0FBR3ZoRixLQUFLMDVHLE1BQU01MEcsRUFBRW1aLEVBQUVpNUMsR0FBR3AwQyxLQUFLLElBQUksSUFBSWlsRixFQUFFL25HLEtBQUt1NkcsWUFBWTN1RyxFQUFFcVMsRUFBRXU2RixZQUFZelEsRUFBRUEsRUFBRXZwQyxJQUFJMTVELEVBQUU4MkcsYUFBYSxTQUFTaHdHLEVBQUU5RyxHQUFHQSxFQUFFczFHLFdBQVdwNkcsS0FBS3U2RyxZQUFZM3VHLElBQUk5RyxFQUFFKzJHLGFBQWEsU0FBU2p3RyxFQUFFOUcsRUFBRW1aLEVBQUVpNUMsR0FBR3RyRCxFQUFFLEdBQUd5NUUsRUFBRTAwQixXQUFXLzVHLEtBQUt1NkcsWUFBWTN1RyxHQUFHNUwsS0FBSzQ3RyxhQUFhaHdHLEVBQUVxUyxHQUFHamUsS0FBSzJjLGFBQWEvUSxFQUFFOUcsRUFBRW1aLEVBQUVpNUMsSUFBSXRyRCxFQUF4YixHQUE2YixTQUFTeTNFLEdBQUd6M0UsR0FBRyxJQUFJLElBQUk5RyxFQUFFMnlCLFVBQVV0d0IsT0FBTzhXLEVBQUUsSUFBSXRaLE1BQU1HLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUcwNUQsRUFBRSxFQUFFQSxFQUFFMTVELEVBQUUwNUQsSUFBSXZnRCxFQUFFdWdELEVBQUUsR0FBRy9tQyxVQUFVK21DLEdBQUcsSUFBSTk0RCxFQUFFNjZFLEdBQUc1b0QsV0FBTSxFQUFPLENBQUMvckIsR0FBRzZhLE9BQU94SSxJQUFJaGIsRUFBRSxhQUFhODhFLEdBQUdseEMsS0FBS0MsVUFBVXBwQyxJQUFJMHhELEVBQUUsSUFBSXFzQixHQUFHLzlFLEVBQUV6QyxHQUFHLFNBQVMrekQsRUFBRXByRCxHQUFHLElBQUk5RyxFQUFFcTVFLEtBQUtsZ0UsRUFBRWtoRSxLQUFLM2dCLEdBQUUsZ0JBQUVraUIsSUFBSTFwQixHQUFFLFlBQUVseUQsRUFBRW0xRyxtQkFBbUJoM0csSUFBSW9OLFFBQVEsT0FBeW9CdkwsRUFBRWcxRyxRQUFRL2lELEVBQUVDLEVBQUVwckQsRUFBRTlHLEVBQUUwNUQsRUFBRXZnRCxJQUFHLHNCQUFFLFdBQVksSUFBSW5aLEVBQUVnMUcsT0FBTyxPQUFPL2lELEVBQUVDLEVBQUVwckQsRUFBRTlHLEVBQUUwNUQsRUFBRXZnRCxHQUFHLFdBQVcsT0FBT201QyxFQUFFd2tELGFBQWE1a0QsRUFBRWx5RCxNQUFNLENBQUNreUQsRUFBRXByRCxFQUFFOUcsRUFBRTA1RCxFQUFFdmdELElBQUksS0FBSyxTQUFTODRDLEVBQUVuckQsRUFBRTlHLEVBQUVtWixFQUFFaTVDLEVBQUVzSCxHQUFHLEdBQUdwSCxFQUFFajNDLFNBQVNpM0MsRUFBRXlrRCxhQUFhandHLEVBQUV5bEYsRUFBRXB6RSxFQUFFdWdELE9BQU8sQ0FBQyxJQUFJdXBDLEVBQUU1bUcsRUFBRSxHQUFHMkQsRUFBRSxDQUFDbzJHLE1BQU10NEIsR0FBRzk5RSxFQUFFb3lELEVBQUVGLEVBQUVyQyxnQkFBZ0J5QyxFQUFFeWtELGFBQWFqd0csRUFBRW04RixFQUFFOXBGLEVBQUV1Z0QsSUFBSSxPQUFpRCxPQUFPeEgsR0FBRyxTQUFTK3JCLEdBQUduM0UsR0FBME8sSUFBSSxJQUFJOUcsRUFBRTJ5QixVQUFVdHdCLE9BQU84VyxFQUFFLElBQUl0WixNQUFNRyxFQUFFLEVBQUVBLEVBQUUsRUFBRSxHQUFHb3lELEVBQUUsRUFBRUEsRUFBRXB5RCxFQUFFb3lELElBQUlqNUMsRUFBRWk1QyxFQUFFLEdBQUd6L0IsVUFBVXkvQixHQUFHLElBQUlzSCxFQUFFK2hCLEdBQUc1b0QsV0FBTSxFQUFPLENBQUMvckIsR0FBRzZhLE9BQU94SSxJQUFJNkUsS0FBSyxJQUFJaWxGLEVBQUVob0IsR0FBR3ZoQixHQUFHLE9BQU8sSUFBSXFoQixHQUFHa29CLEVBQUV2cEMsR0FBRyxJQUFJcWlCLEdBQUcsV0FBVyxTQUFTajFFLElBQUksSUFBSUEsRUFBRTVMLEtBQUtBLEtBQUs4N0csY0FBYyxXQUFXLElBQUloM0csRUFBRThHLEVBQUU2bUIsU0FBUzAzQyxXQUFXLElBQUlybEUsRUFBRSxNQUFNLEdBQUcsSUFBSW1aLEVBQUVnNUMsSUFBSSxNQUFNLFVBQVUsQ0FBQ2g1QyxHQUFHLFVBQVVBLEVBQUUsSUFBSXE1QyxFQUFFLFVBQVUsK0JBQStCcm9ELE9BQU96SyxTQUFTc2UsS0FBSyxLQUFLLElBQUloZSxFQUFFLFlBQVk5RSxLQUFLKzdHLGFBQWEsV0FBVyxPQUFPbndHLEVBQUVvd0csT0FBTzVELEVBQUUsR0FBR3hzRyxFQUFFa3dHLGlCQUFpQjk3RyxLQUFLaThHLGdCQUFnQixXQUFXLElBQUluM0csRUFBRSxHQUFHOEcsRUFBRW93RyxPQUFPLE9BQU81RCxFQUFFLEdBQUcsSUFBSW42RixJQUFJblosRUFBRSxJQUFJd3lELEdBQUcsR0FBR3h5RCxFQUFFLHVCQUF1QixRQUFRQSxFQUFFeWtFLHdCQUF3QixDQUFDNmMsT0FBT3g2RSxFQUFFNm1CLFNBQVMwM0MsWUFBWXJsRSxHQUFHMDVELEVBQUV2SCxJQUFJLE9BQU91SCxJQUFJdmdELEVBQUVpK0YsTUFBTTE5QyxHQUFHLENBQUMsZ0JBQWdCLFFBQVFyOUQsRUFBRSxHQUFHOGMsRUFBRSxDQUFDbFMsSUFBSSxjQUFjL0wsS0FBS204RyxLQUFLLFdBQVd2d0csRUFBRW93RyxRQUFPLEdBQUloOEcsS0FBS3l5QixTQUFTLElBQUk0eUQsRUFBRSxDQUFDczBCLFVBQVMsSUFBSzM1RyxLQUFLZzhHLFFBQU8sRUFBRyxJQUFJbDNHLEVBQUU4RyxFQUFFSCxVQUFVLE9BQU8zRyxFQUFFczNHLGNBQWMsU0FBU3h3RyxHQUFHLE9BQU81TCxLQUFLZzhHLE9BQU81RCxFQUFFLEdBQUcsZ0JBQWdCcDRCLEdBQUcsQ0FBQ3E1QixNQUFNcjVHLEtBQUt5eUIsVUFBVTdtQixJQUFJOUcsRUFBRXUzRyx5QkFBeUIsU0FBU3p3RyxHQUFHLE9BQU93c0csRUFBRSxJQUFJeHNHLEVBQXR6QixHQUEyekIwM0UsR0FBRyxTQUFTMTNFLEdBQUcsSUFBSTlHLEVBQUUsY0FBYSxTQUFVQSxFQUFFbVosR0FBRyxJQUFJdWdELEdBQUUsZ0JBQUVraUIsSUFBSWg3RSxFQUFFa0csRUFBRStvRCxhQUFhMXhELEVBQUUyL0UsR0FBRzk5RSxFQUFFMDVELEVBQUU5NEQsR0FBRyxPQUF1TSxnQkFBZ0JrRyxFQUFFekssRUFBRSxHQUFHMkQsRUFBRSxDQUFDbzJHLE1BQU1qNEcsRUFBRTJlLElBQUkzRCxRQUFRLE9BQU8sSUFBRW5aLEVBQUU4RyxHQUFHOUcsRUFBRTh2RCxZQUFZLGFBQWFwTixFQUFFNTdDLEdBQUcsSUFBSTlHLEdBQUcwK0UsR0FBRyxXQUFXLE9BQU8sZ0JBQUU5QyxLQUFLSyxHQUFHLENBQUN1N0IsV0FBV2ozQixFQUFFazNCLFlBQVlsK0IsSUFBMDVCLDhDQ0N4aDBCLElBQUltK0IsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUW8vRixZQUFTLEVBQ2pCLE1BQU1DLEVBQVVILEVBQWdCLEVBQVEsTUFDbENJLEVBQXNCSixFQUFnQixFQUFRLE1BQzlDSyxFQUFVLEVBQVEsS0FDbEJDLEVBQVUsRUFBUSxLQUNsQkMsRUFBa0JILEVBQW9CbDFGLFFBQVFzMUYsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUEyQmxEdkwsRUFBVW1MLEVBQW9CbDFGLFFBQVEwckUsRUFBRzs7RUFHekM2cEIsRUFBY0wsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7OztFQVM5Q0MsRUFBY1AsRUFBb0JsMUYsUUFBUWk4RSxFQUFHOzs7Ozs7RUEyQm5Ecm1GLEVBQVFvL0YsT0FwQk8sSUFDSEMsRUFBUWoxRixRQUFRMWMsY0FBYyt4RyxFQUFpQixLQUNuREosRUFBUWoxRixRQUFRMWMsY0FBY215RyxFQUFhLEtBQ3ZDUixFQUFRajFGLFFBQVExYyxjQUFjeW1HLEVBQVMsS0FDbkNrTCxFQUFRajFGLFFBQVExYyxjQUFjaXlHLEVBQWEsQ0FBRTlsQixRQUFTLE1BQzlDLEVBQUkybEIsRUFBUU0sVUFBVVAsRUFBUVEsU0FBU0MsUUFDdEMsU0FDYlgsRUFBUWoxRixRQUFRMWMsY0FBY3ltRyxFQUFTLEtBQ25Da0wsRUFBUWoxRixRQUFRMWMsY0FBY2l5RyxFQUFhLENBQUU5bEIsUUFBUyxNQUM5QyxFQUFJMmxCLEVBQVFNLFVBQVVQLEVBQVFRLFNBQVNFLFNBQ3RDLFVBQ2JaLEVBQVFqMUYsUUFBUTFjLGNBQWN5bUcsRUFBUyxLQUNuQ2tMLEVBQVFqMUYsUUFBUTFjLGNBQWNpeUcsRUFBYSxDQUFFOWxCLFFBQVMsTUFDOUMsRUFBSTJsQixFQUFRTSxVQUFVUCxFQUFRUSxTQUFTRyxZQUN0QyxhQUNiYixFQUFRajFGLFFBQVExYyxjQUFjeW1HLEVBQVMsS0FDbkNrTCxFQUFRajFGLFFBQVExYyxjQUFjaXlHLEVBQWEsQ0FBRTlsQixRQUFTLE1BQzlDLEVBQUkybEIsRUFBUU0sVUFBVVAsRUFBUVEsU0FBU0ksV0FDdEMsZ0RDekV6QixJQUFJakIsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUW9nRyxXQUFRLEVBQ2hCLE1BQU1mLEVBQVVILEVBQWdCLEVBQVEsTUFDbENJLEVBQXNCSixFQUFnQixFQUFRLE1BQzlDbUIsRUFBa0IsRUFBUSxLQUMxQmQsRUFBVSxFQUFRLEtBQ2xCZSxFQUFjLEVBQVEsS0FDdEJDLEVBQVcsRUFBUSxLQUNuQkMsRUFBYSxFQUFRLEtBQ3JCQyxFQUFZLEVBQVEsS0FDcEJDLEVBQWUsRUFBUSxLQUN2QkMsRUFBbUIsRUFBUSxLQUMzQm5CLEVBQVUsRUFBUSxLQUNsQm9CLEVBQVksRUFBUSxJQUNwQkMsRUFBaUJ2QixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7OztFQU9qRGtCLEVBQXVCeEIsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7OztFQU12RG1CLEdBQWlCLEVBQUl6QixFQUFvQmwxRixTQUFTaTJGLEVBQWdCcDNELE9BQU8yMkQsSUFBSzs7Ozs7OztFQVE5RW9CLEVBQXdCMUIsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7RUFPeERxQixFQUFlM0IsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7RUFPL0NzQixFQUFjNUIsRUFBb0JsMUYsUUFBUXVtRCxHQUFJOzs7O0VBSzlDd3dDLEVBQVU3QixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7O0VBTTFDd0IsRUFBa0I5QixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7Ozs7O0VBU2xEeUIsRUFBdUIvQixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7Ozs7RUFRdkQwQixFQUFhaEMsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7O0VBUTdDMkIsRUFBZ0JqQyxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7Ozs7RUFRaEQ0QixFQUFpQmxDLEVBQW9CbDFGLFFBQVFpOEUsRUFBRzs7Ozs7O0VBNEN0RHJtRixFQUFRb2dHLE1BckNNLElBQ0ZmLEVBQVFqMUYsUUFBUTFjLGNBQWNtekcsRUFBZ0IsQ0FBRWxvRixHQUFJNG1GLEVBQVFRLFNBQVNFLE9BQ3pFWixFQUFRajFGLFFBQVExYyxjQUFjb3pHLEVBQXNCLEtBQ2hEekIsRUFBUWoxRixRQUFRMWMsY0FBY3F6RyxFQUFnQixLQUFNLFlBQ3BEMUIsRUFBUWoxRixRQUFRMWMsY0FBY2t6RyxFQUFVYSxRQUFTLE9BQ3JEcEMsRUFBUWoxRixRQUFRMWMsY0FBY3N6RyxFQUF1QixLQUNqRDNCLEVBQVFqMUYsUUFBUTFjLGNBQWN1ekcsRUFBYyxLQUN4QzVCLEVBQVFqMUYsUUFBUTFjLGNBQWN5ekcsRUFBUyxLQUNuQywrTEFDQTlCLEVBQVFqMUYsUUFBUTFjLGNBQWMsS0FBTSxNQUNwQyw2R0FDQSxLQUNKMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWN3ekcsRUFBYSxDQUFFamlCLElBQUssSUFBRyxFQUFJdWdCLEVBQVFrQyx1Q0FDckVyQyxFQUFRajFGLFFBQVExYyxjQUFjMHpHLEVBQWlCLEtBQzNDL0IsRUFBUWoxRixRQUFRMWMsY0FBYzJ6RyxFQUFzQixLQUFNLFVBQzFEaEMsRUFBUWoxRixRQUFRMWMsY0FBYzR6RyxFQUFZLEtBQ3RDakMsRUFBUWoxRixRQUFRMWMsY0FBYzh6RyxFQUFnQixLQUMxQ25DLEVBQVFqMUYsUUFBUTFjLGNBQWM2ekcsRUFBZSxLQUN6Q2xDLEVBQVFqMUYsUUFBUTFjLGNBQWM0eUcsRUFBWXFCLFVBQVcsTUFDckQsVUFDSnRDLEVBQVFqMUYsUUFBUTFjLGNBQWM2ekcsRUFBZSxLQUN6Q2xDLEVBQVFqMUYsUUFBUTFjLGNBQWM2eUcsRUFBU3FCLE9BQVEsTUFDL0MsZUFDSnZDLEVBQVFqMUYsUUFBUTFjLGNBQWM2ekcsRUFBZSxLQUN6Q2xDLEVBQVFqMUYsUUFBUTFjLGNBQWM4eUcsRUFBV3FCLFNBQVUsTUFDbkQsVUFDUnhDLEVBQVFqMUYsUUFBUTFjLGNBQWM4ekcsRUFBZ0IsS0FDMUNuQyxFQUFRajFGLFFBQVExYyxjQUFjNnpHLEVBQWUsS0FDekNsQyxFQUFRajFGLFFBQVExYyxjQUFjK3lHLEVBQVVxQixRQUFTLE1BQ2pELFFBQ0p6QyxFQUFRajFGLFFBQVExYyxjQUFjNnpHLEVBQWUsS0FDekNsQyxFQUFRajFGLFFBQVExYyxjQUFjaXpHLEVBQWlCb0IsZUFBZ0IsTUFDL0QsZUFDSjFDLEVBQVFqMUYsUUFBUTFjLGNBQWM2ekcsRUFBZSxLQUN6Q2xDLEVBQVFqMUYsUUFBUTFjLGNBQWNnekcsRUFBYXNCLFdBQVksTUFDdkQsbURDMUk1QixJQUFJOUMsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUWlpRyxhQUFVLEVBQ2xCLE1BQU01QyxFQUFVSCxFQUFnQixFQUFRLE1BQ2xDbUIsRUFBa0IsRUFBUSxLQUMxQmYsRUFBc0JKLEVBQWdCLEVBQVEsTUFDOUNnRCxFQUFXLEVBQVEsS0FDbkJDLEVBQWEsRUFBUSxLQUNyQkMsRUFBVyxFQUFRLEtBQ25CN0MsRUFBVSxFQUFRLEtBQ2xCOEMsRUFBWSxFQUFRLEtBQ3BCN0MsRUFBVSxFQUFRLEtBQ2xCOEMsRUFBYyxFQUFRLEtBQ3RCMUIsRUFBWSxFQUFRLElBQ3BCMkIsRUFBd0JqRCxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7Ozs7RUFReEQ0QyxFQUF5QmxELEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7RUFNekQ2QyxFQUF3Qm5ELEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7OztFQUt4RDhDLEVBQTJCcEQsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7RUFJM0QrQyxFQUFlckQsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7Ozs7OztFQVkvQ2dELEVBQWlCdEQsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7RUFPakRpRCxHQUFvQixFQUFJdkQsRUFBb0JsMUYsU0FBU2kyRixFQUFnQnAzRCxPQUFPMjJELElBQUs7Ozs7RUFLakZrRCxFQUFtQnhELEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7Ozs7O0VBVW5EbUQsRUFBY3pELEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7RUF1Q3BENS9GLEVBQVFpaUcsUUFqQ1EsRUFBR2UsVUFBQUEsRUFBWSxPQUNuQjNELEVBQVFqMUYsUUFBUTFjLGNBQWM2MEcsRUFBdUIsQ0FBRTVwRixHQUFJNG1GLEVBQVFRLFNBQVNJLFNBQ2hGZCxFQUFRajFGLFFBQVExYyxjQUFjaTFHLEVBQWMsS0FDeEN0RCxFQUFRajFGLFFBQVExYyxjQUFjODBHLEVBQXdCLEtBQ2xEbkQsRUFBUWoxRixRQUFRMWMsY0FBYyswRyxFQUF1QixLQUFNLHNCQUMzRHBELEVBQVFqMUYsUUFBUTFjLGNBQWNrekcsRUFBVWEsUUFBUyxNQUNqRHBDLEVBQVFqMUYsUUFBUTFjLGNBQWNnMUcsRUFBMEIsS0FDcEQsZ0RBQ0FyRCxFQUFRajFGLFFBQVExYyxjQUFjLEtBQU0sTUFDcEMsZ0VBQ1IyeEcsRUFBUWoxRixRQUFRMWMsY0FBY2sxRyxFQUFnQixLQUMxQ3ZELEVBQVFqMUYsUUFBUTFjLGNBQWNtMUcsRUFBbUIsQ0FBRTU5RixXQUFZLENBQUU5ZixNQUFPNjlHLElBQ3BFM0QsRUFBUWoxRixRQUFRMWMsY0FBYzAwRyxFQUFTYSxPQUFRLENBQUVwcEIsUUFBUyxLQUNsRHZxRixPQUFPNHpHLEtBQUssMEZBRXhCN0QsRUFBUWoxRixRQUFRMWMsY0FBY20xRyxFQUFtQixDQUFFNTlGLFdBQVksQ0FBRTlmLE1BQU82OUcsSUFDcEUzRCxFQUFRajFGLFFBQVExYyxjQUFjdzBHLEVBQVNpQixPQUFRLENBQUV0cEIsUUFBUyxLQUNsRHZxRixPQUFPNHpHLEtBQUssc0NBRXhCN0QsRUFBUWoxRixRQUFRMWMsY0FBY20xRyxFQUFtQixDQUFFNTlGLFdBQVksQ0FBRTlmLE1BQU82OUcsSUFDcEUzRCxFQUFRajFGLFFBQVExYyxjQUFjeTBHLEVBQVdpQixTQUFVLENBQUV2cEIsUUFBUyxLQUN0RHZxRixPQUFPNHpHLEtBQUssNERBRXhCN0QsRUFBUWoxRixRQUFRMWMsY0FBY20xRyxFQUFtQixDQUFFNTlGLFdBQVksQ0FBRTlmLE1BQU82OUcsSUFDcEUzRCxFQUFRajFGLFFBQVExYyxjQUFjNDBHLEVBQVllLFVBQVcsQ0FBRXhwQixRQUFTLEtBQ3hEdnFGLE9BQU80ekcsS0FBSyxzQ0FFNUI3RCxFQUFRajFGLFFBQVExYyxjQUFjbzFHLEVBQWtCLEtBQzVDekQsRUFBUWoxRixRQUFRMWMsY0FBYzIwRyxFQUFVaUIsUUFBUyxDQUFFenBCLFFBQVMsTUFDcEQsRUFBSTJsQixFQUFRTSxVQUFVUCxFQUFRUSxTQUFTQyxVQUVuRFgsRUFBUWoxRixRQUFRMWMsY0FBY3ExRyxFQUFhLEtBQU0seUVDOUc3RCxJQUFJN0QsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUXVqRyxjQUFXLEVBQ25CLE1BQU1sRSxFQUFVSCxFQUFnQixFQUFRLE1BQ2xDSSxFQUFzQkosRUFBZ0IsRUFBUSxNQUM5Q3NFLEVBQVksRUFBUSxLQUNwQkMsRUFBVSxFQUFRLEtBQ2xCQyxFQUFhLEVBQVEsS0FDckJsRSxFQUFVLEVBQVEsS0FDbEJELEVBQVUsRUFBUSxLQUNsQm9FLEVBQVcsRUFBUSxLQUNuQkMsRUFBWSxFQUFRLEtBQ3BCQyxFQUFvQnZFLEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7RUFNcERrRSxFQUF1QnhFLEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0J2RG1FLEVBQWN6RSxFQUFvQmwxRixRQUFRNDVGLEVBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW1CN0NDLEVBQWdCM0UsRUFBb0JsMUYsUUFBUXdrQixNQUFPOzs7Ozs7Ozs7Ozs7Ozs7OztFQWtCbkRzMUUsRUFBb0I1RSxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7OztFQXdCMUQ1L0YsRUFBUXVqRyxTQWpCUyxJQUNMbEUsRUFBUWoxRixRQUFRMWMsY0FBY20yRyxFQUFtQixLQUNyRHhFLEVBQVFqMUYsUUFBUTFjLGNBQWNvMkcsRUFBc0IsQ0FBRW5yRixHQUFJNG1GLEVBQVFRLFNBQVNDLE1BQ3ZFWCxFQUFRajFGLFFBQVExYyxjQUFjcTJHLEVBQWEsS0FDdkMseUJBQ0ExRSxFQUFRajFGLFFBQVExYyxjQUFjLEtBQU0sTUFDcEMsK0JBQ0oyeEcsRUFBUWoxRixRQUFRMWMsY0FBY3UyRyxFQUFlLENBQUVwcUIsUUFBUyxNQUNoRCxFQUFJMmxCLEVBQVFNLFVBQVVQLEVBQVFRLFNBQVNFLFNBQ3RDLHdCQUNiWixFQUFRajFGLFFBQVExYyxjQUFjaTJHLEVBQVN2RSxPQUFRLE1BQy9DQyxFQUFRajFGLFFBQVExYyxjQUFjdzJHLEVBQW1CLEtBQzdDN0UsRUFBUWoxRixRQUFRMWMsY0FBYysxRyxFQUFRckQsTUFBTyxNQUM3Q2YsRUFBUWoxRixRQUFRMWMsY0FBY2cyRyxFQUFXUyxTQUFVLE1BQ25EOUUsRUFBUWoxRixRQUFRMWMsY0FBY2syRyxFQUFVUSxRQUFTLE1BQ2pEL0UsRUFBUWoxRixRQUFRMWMsY0FBYzgxRyxFQUFVdkIsUUFBUywwQ0NyRzdELElBQUkvQyxFQUFtQng4RyxNQUFRQSxLQUFLdzhHLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJeitGLFdBQWN5K0YsRUFBTSxDQUFFLFFBQVdBLElBRXhEcHhHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWhaLE9BQU8sSUFDdERnWixFQUFRcWtHLGlCQUFjLEVBQ3RCLE1BQU1oRixFQUFVSCxFQUFnQixFQUFRLE1BQ2xDSSxFQUFzQkosRUFBZ0IsRUFBUSxNQUM5Q29GLEVBQWUsRUFBUSxLQUN2QkMsRUFBWSxFQUFRLEtBQ3BCQyxFQUF1QmxGLEVBQW9CbDFGLFFBQVF3MUYsR0FBSSxHQUN2RDZFLEVBQWFuRixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7Ozs7Ozs7RUFXN0M4RSxFQUFlcEYsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7Ozs7Ozs7RUFhL0MrRSxFQUFtQnJGLEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7OztFQVFuRGdGLEVBQWlCdEYsRUFBb0JsMUYsUUFBUXVtRCxHQUFJOzs7Ozs7Ozs7RUFVakRrMEMsRUFBdUJ2RixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7Ozs7OztFQVV2RGtGLEVBQThCeEYsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7Ozs7O0VBVzlEbUYsRUFBcUJ6RixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7O0VBTXJEb0YsRUFBd0IxRixFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7RUFLeERxRixFQUFlM0YsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7OztFQU0vQ2dELEVBQWlCdEQsRUFBb0JsMUYsUUFBUXcxRixHQUFJOzs7Ozs7Ozs7RUFpQ3ZENS9GLEVBQVFxa0csWUF2QlksRUFBR2EsTUFBQUEsRUFBT2ptQixJQUFBQSxFQUFLbGxFLEtBQUFBLEVBQU1vckYsWUFBQUEsRUFBYUMsYUFBQUEsRUFBY0MsT0FBQUEsS0FDeERoRyxFQUFRajFGLFFBQVExYyxjQUFjODJHLEVBQXNCLEtBQ3hEbkYsRUFBUWoxRixRQUFRMWMsY0FBYysyRyxFQUFZLEtBQ3RDcEYsRUFBUWoxRixRQUFRMWMsY0FBY2kzRyxFQUFrQixLQUM1Q3RGLEVBQVFqMUYsUUFBUTFjLGNBQWNrM0csRUFBZ0IsQ0FBRTNsQixJQUFLQSxFQUFLcEYsUUFBUyxLQUMzRHZxRixPQUFPNHpHLEtBQUtucEYsT0FFeEJzbEYsRUFBUWoxRixRQUFRMWMsY0FBY20zRyxFQUFzQixLQUNoRHhGLEVBQVFqMUYsUUFBUTFjLGNBQWNnM0csRUFBYyxDQUFFN3FCLFFBQVMsS0FDL0N2cUYsT0FBTzR6RyxLQUFLbnBGLEtBQ1htckYsR0FDVDdGLEVBQVFqMUYsUUFBUTFjLGNBQWNvM0csRUFBNkIsS0FDdkR6RixFQUFRajFGLFFBQVExYyxjQUFjcTNHLEVBQW9CLEtBQU1JLElBQzVEOUYsRUFBUWoxRixRQUFRMWMsY0FBY3MzRyxFQUF1QixLQUNqRDNGLEVBQVFqMUYsUUFBUTFjLGNBQWN1M0csRUFBYyxLQUFNRyxFQUFhNS9GLEtBQUssU0FDeEU2NUYsRUFBUWoxRixRQUFRMWMsY0FBY2sxRyxFQUFnQixLQUMxQ3ZELEVBQVFqMUYsUUFBUTFjLGNBQWM0MkcsRUFBYWdCLFdBQVksQ0FBRXpyQixRQUFTLEtBQzFEdnFGLE9BQU80ekcsS0FBS21DLE1BRXBCaEcsRUFBUWoxRixRQUFRMWMsY0FBYzYyRyxFQUFVZ0IsUUFBUyxDQUFFMXJCLFFBQVMsS0FDcER2cUYsT0FBTzR6RyxLQUFLbnBGLDRDQ3hIeEMsSUFBSW1sRixFQUFtQng4RyxNQUFRQSxLQUFLdzhHLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJeitGLFdBQWN5K0YsRUFBTSxDQUFFLFFBQVdBLElBRXhEcHhHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWhaLE9BQU8sSUFDdERnWixFQUFRbWtHLGNBQVcsRUFDbkIsTUFBTTlFLEVBQVVILEVBQWdCLEVBQVEsTUFDbENJLEVBQXNCSixFQUFnQixFQUFRLE1BQzlDSyxFQUFVLEVBQVEsS0FDbEJDLEVBQVUsRUFBUSxLQUNsQmdHLEVBQWdCLEVBQVEsS0FDeEI1RSxFQUFZLEVBQVEsSUFDcEI2RSxFQUFvQm5HLEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7O0VBT3BEOEYsRUFBeUJwRyxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7O0VBTXpEK0YsRUFBMkJyRyxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7O0VBTTNEZ0csRUFBMEJ0RyxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7RUFLMURpRyxFQUF3QnZHLEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7RUFNeERrRyxFQUFtQnhHLEVBQW9CbDFGLFFBQVF3MUYsR0FBSTs7Ozs7Ozs7O0VBNER6RDUvRixFQUFRbWtHLFNBbERTLEtBRWIsTUFBTTRCLEVBQW1CLENBQ3JCLENBQ0liLE1BQU8sZ0JBQ1BqbUIsSUFBSyxJQUFHLEVBQUl1Z0IsRUFBUWtDLDJEQUNwQjNuRixLQUFNLDZDQUNOc3JGLE9BQVEsK0NBQ1JGLFlBQWEsd0xBQ2JDLGFBQWMsQ0FBQyxTQUFVLGVBQWdCLFVBQVcsYUFFeEQsQ0FDSUYsTUFBTyxhQUNQam1CLElBQUssSUFBRyxFQUFJdWdCLEVBQVFrQyx5REFDcEIzbkYsS0FBTSw2Q0FDTnNyRixPQUFRLCtDQUNSRixZQUFhLG9GQUNiQyxhQUFjLENBQUMsUUFBUyxvQkFBcUIsU0FBVSxlQUUzRCxDQUNJRixNQUFPLGVBQ1BqbUIsSUFBSyxJQUFHLEVBQUl1Z0IsRUFBUWtDLG9EQUNwQjNuRixLQUFNLHFDQUNOc3JGLE9BQVEsdUNBQ1JGLFlBQWEsZ0ZBQ2JDLGFBQWMsQ0FBQyxRQUFTLGFBQWMsU0FBVSxzQkFFcEQsQ0FDSUYsTUFBTyxlQUNQam1CLElBQUssSUFBRyxFQUFJdWdCLEVBQVFrQywwREFDcEIzbkYsS0FBTSw0Q0FDTnNyRixPQUFRLGtEQUNSRixZQUFhLG1FQUNiQyxhQUFjLENBQ1YsUUFDQSxjQUNBLGFBQ0EsY0FDQSxZQUlaLE9BQVEvRixFQUFRajFGLFFBQVExYyxjQUFjKzNHLEVBQW1CLENBQUU5c0YsR0FBSTRtRixFQUFRUSxTQUFTRyxVQUM1RWIsRUFBUWoxRixRQUFRMWMsY0FBY2c0RyxFQUF3QixLQUNsRHJHLEVBQVFqMUYsUUFBUTFjLGNBQWNpNEcsRUFBMEIsS0FBTSwyQkFDOUR0RyxFQUFRajFGLFFBQVExYyxjQUFja3pHLEVBQVVhLFFBQVMsT0FDckRwQyxFQUFRajFGLFFBQVExYyxjQUFjazRHLEVBQXlCLEtBQ25EdkcsRUFBUWoxRixRQUFRMWMsY0FBY200RyxFQUF1QixLQUNqRHhHLEVBQVFqMUYsUUFBUTFjLGNBQWNvNEcsRUFBa0IsS0FBTUMsRUFBaUJ0NkcsS0FBSSxFQUFHeTVHLE1BQUFBLEVBQU9qbUIsSUFBQUEsRUFBS2xsRSxLQUFBQSxFQUFNb3JGLFlBQUFBLEVBQWFDLGFBQUFBLEVBQWNDLE9BQUFBLEtBQWNoRyxFQUFRajFGLFFBQVExYyxjQUFjODNHLEVBQWNuQixZQUFhLENBQUVhLE1BQU9BLEVBQU9qbUIsSUFBS0EsRUFBS2xsRSxLQUFNQSxFQUFNb3JGLFlBQWFBLEVBQWFDLGFBQWNBLEVBQWNDLE9BQVFBLDZDQ25HdFQsSUFBSW5HLEVBQW1CeDhHLE1BQVFBLEtBQUt3OEcsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUl6K0YsV0FBY3krRixFQUFNLENBQUUsUUFBV0EsSUFFeERweEcsT0FBT2dTLGVBQWVDLEVBQVMsYUFBYyxDQUFFaFosT0FBTyxJQUN0RGdaLEVBQVFva0csYUFBVSxFQUNsQixNQUFNL0UsRUFBVUgsRUFBZ0IsRUFBUSxNQUNsQ0ksRUFBc0JKLEVBQWdCLEVBQVEsTUFDOUNtQixFQUFrQixFQUFRLEtBQzFCaUUsRUFBZSxFQUFRLEtBQ3ZCMEIsRUFBbUIxRyxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7Ozs7OztFQVVuRHFHLEVBQWMzRyxFQUFvQmwxRixRQUFRdzFGLEdBQUk7OztFQUk5Q3NHLEdBQWlCLEVBQUk1RyxFQUFvQmwxRixTQUFTaTJGLEVBQWdCcDNELE9BQU8yMkQsSUFBSzs7Ozs7OztFQWdCcEY1L0YsRUFBUW9rRyxRQVJRLElBQ0ovRSxFQUFRajFGLFFBQVExYyxjQUFjczRHLEVBQWtCLEtBQ3BEM0csRUFBUWoxRixRQUFRMWMsY0FBY3U0RyxFQUFhLEtBQ3ZDNUcsRUFBUWoxRixRQUFRMWMsY0FBY3c0RyxFQUFnQixDQUFFamhHLFdBQVksQ0FBRXZnQixHQUFJLEdBQUtpYSxXQUFZLENBQUVqWSxTQUFVLEtBQzNGMjRHLEVBQVFqMUYsUUFBUTFjLGNBQWM0MkcsRUFBYWdCLFdBQVksQ0FBRXpyQixRQUFTLEtBQzFEdnFGLE9BQU80ekcsS0FBSywwRUNwQ3BDLElBQUloRSxFQUFtQng4RyxNQUFRQSxLQUFLdzhHLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJeitGLFdBQWN5K0YsRUFBTSxDQUFFLFFBQVdBLElBRXhEcHhHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWhaLE9BQU8sSUFDdERnWixFQUFRdWxHLGFBQVUsRUFDbEIsTUFBTWxHLEVBQVVILEVBQWdCLEVBQVEsTUFFbENpSCxFQURzQmpILEVBQWdCLEVBQVEsTUFDZjkwRixRQUFRZzhGLEdBQUk7Ozs7OztFQWNqRHBtRyxFQUFRdWxHLFFBUFEsRUFBRy81RixPQUFBQSxFQUFTLE9BQVFGLE1BQUFBLEVBQVEsT0FBUXV1RSxRQUFBQSxLQUN4Q3dsQixFQUFRajFGLFFBQVExYyxjQUFjeTRHLEVBQVUsQ0FBRUUsTUFBTyw2QkFBOEJDLEtBQU0sTUFBT0MsUUFBUyxZQUFhNTFHLEtBQU0sT0FBUWlkLE9BQVEsZUFBZ0IsZUFBZ0IsSUFBSyxpQkFBa0IsUUFBUyxrQkFBbUIsUUFBU3BDLE9BQVFBLEVBQVFGLE1BQU9BLEVBQU91dUUsUUFBU0EsR0FDL1F3bEIsRUFBUWoxRixRQUFRMWMsY0FBYyxRQUFTLEtBQU0saUJBQzdDMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLDZEQUMzQzh4RyxFQUFRajFGLFFBQVExYyxjQUFjLFdBQVksQ0FBRXc0RCxPQUFRLG1CQUNwRG01QyxFQUFRajFGLFFBQVExYyxjQUFjLE9BQVEsQ0FBRXFiLEdBQUksS0FBTUMsR0FBSSxLQUFNQyxHQUFJLEtBQU1DLEdBQUkseUNDbkJsRixJQUFJZzJGLEVBQW1CeDhHLE1BQVFBLEtBQUt3OEcsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUl6K0YsV0FBY3krRixFQUFNLENBQUUsUUFBV0EsSUFFeERweEcsT0FBT2dTLGVBQWVDLEVBQVMsYUFBYyxDQUFFaFosT0FBTyxJQUN0RGdaLEVBQVE4aEcsYUFBVSxFQUNsQixNQUFNekMsRUFBVUgsRUFBZ0IsRUFBUSxNQVN4Q2wvRixFQUFROGhHLFFBUlEsRUFBR3QyRixPQUFBQSxFQUFTLE9BQVFGLE1BQUFBLEVBQVEsVUFDaEMrekYsRUFBUWoxRixRQUFRMWMsY0FBYyxNQUFPLENBQUU0ZCxNQUFPQSxFQUFPRSxPQUFRQSxFQUFRKzZGLFFBQVMsa0JBQW1CRixNQUFPLDZCQUE4Qkcsb0JBQXFCLFlBQy9KbkgsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsa0ZBQW1Gb0QsS0FBTSxZQUNwSTB1RyxFQUFRajFGLFFBQVExYyxjQUFjLE9BQVEsQ0FBRUgsRUFBRywwREFBMkRvRCxLQUFNLFlBQzVHMHVHLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLGtNQUFtTW9ELEtBQU0sWUFDcFAwdUcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsNE9BQzNDOHhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLHNLQUF1S29ELEtBQU0sNENDWmhPLElBQUl1dUcsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUXFqRyxlQUFZLEVBQ3BCLE1BQU1oRSxFQUFVSCxFQUFnQixFQUFRLE1BRWxDaUgsRUFEc0JqSCxFQUFnQixFQUFRLE1BQ2Y5MEYsUUFBUWc4RixHQUFJOzs7Ozs7RUEyQmpEcG1HLEVBQVFxakcsVUFwQlUsRUFBRzczRixPQUFBQSxFQUFTLE9BQVFGLE1BQUFBLEVBQVEsT0FBUXV1RSxRQUFBQSxLQUMxQ3dsQixFQUFRajFGLFFBQVExYyxjQUFjeTRHLEVBQVUsQ0FBRXgxRyxLQUFNLFFBQVN5VixRQUFTLE1BQU91UyxHQUFJLFNBQVUwdEYsTUFBTyw2QkFBOEIvNkYsTUFBT0EsRUFBT0UsT0FBUUEsRUFBUSs2RixRQUFTLG9CQUFxQjFzQixRQUFTQSxHQUNyTXdsQixFQUFRajFGLFFBQVExYyxjQUFjLElBQUssS0FDL0IyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsa21CQUMvQzh4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyx5Q0NoQzNDLElBQUl3eEcsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUW1qRyxZQUFTLEVBQ2pCLE1BQU05RCxFQUFVSCxFQUFnQixFQUFRLE1BRWxDaUgsRUFEc0JqSCxFQUFnQixFQUFRLE1BQ2Y5MEYsUUFBUWc4RixHQUFJOzs7Ozs7RUFZakRwbUcsRUFBUW1qRyxPQUxPLEVBQUczM0YsT0FBQUEsRUFBUyxPQUFRRixNQUFBQSxFQUFRLE9BQVF1dUUsUUFBQUEsS0FDdkN3bEIsRUFBUWoxRixRQUFRMWMsY0FBY3k0RyxFQUFVLENBQUV4MUcsS0FBTSxRQUFTMDFHLE1BQU8sNkJBQThCRSxRQUFTLFlBQWFqN0YsTUFBT0EsRUFBT0UsT0FBUUEsRUFBUXF1RSxRQUFTQSxHQUMvSixJQUNBd2xCLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLDZvQkNqQm5ELElBQUkyeEcsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUTZoRyxjQUFXLEVBQ25CLE1BQU14QyxFQUFVSCxFQUFnQixFQUFRLE1BU3hDbC9GLEVBQVE2aEcsU0FSUyxFQUFHcjJGLE9BQUFBLEVBQVMsT0FBUUYsTUFBQUEsRUFBUSxVQUNqQyt6RixFQUFRajFGLFFBQVExYyxjQUFjLE1BQU8sQ0FBRTRkLE1BQU9BLEVBQU9FLE9BQVFBLEVBQVErNkYsUUFBUyxrQkFBbUJGLE1BQU8sNkJBQThCRyxvQkFBcUIsaUJBQy9KbkgsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsa0ZBQW1Gb0QsS0FBTSxZQUNwSTB1RyxFQUFRajFGLFFBQVExYyxjQUFjLE9BQVEsQ0FBRUgsRUFBRyxxREFBc0RvRCxLQUFNLFlBQ3ZHMHVHLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLCtMQUFnTW9ELEtBQU0sWUFDalAwdUcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsZ1VBQzNDOHhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLCtMQUFnTW9ELEtBQU0sNENDWnpQLElBQUl1dUcsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUTRoRyxZQUFTLEVBQ2pCLE1BQU12QyxFQUFVSCxFQUFnQixFQUFRLE1BTXhDbC9GLEVBQVE0aEcsT0FMTyxFQUFHcDJGLE9BQUFBLEVBQVMsT0FBUUYsTUFBQUEsRUFBUSxVQUMvQit6RixFQUFRajFGLFFBQVExYyxjQUFjLE1BQU8sQ0FBRTRkLE1BQU9BLEVBQU9FLE9BQVFBLEVBQVErNkYsUUFBUyxjQUFlRixNQUFPLDZCQUE4Qkcsb0JBQXFCLGlCQUMzSm5ILEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLG9CQUFxQm9ELEtBQU0sWUFDdEUwdUcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsZ3VCQ1RuRCxJQUFJMnhHLEVBQW1CeDhHLE1BQVFBLEtBQUt3OEcsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUl6K0YsV0FBY3krRixFQUFNLENBQUUsUUFBV0EsSUFFeERweEcsT0FBT2dTLGVBQWVDLEVBQVMsYUFBYyxDQUFFaFosT0FBTyxJQUN0RGdaLEVBQVF5aEcsYUFBVSxFQUNsQixNQUFNcEMsRUFBVUgsRUFBZ0IsRUFBUSxNQUVsQ2lILEVBRHNCakgsRUFBZ0IsRUFBUSxNQUNmOTBGLFFBQVFnOEYsR0FBSSxHQUtqRHBtRyxFQUFReWhHLFFBSlEsRUFBR2oyRixPQUFBQSxFQUFTLE9BQVFGLE1BQUFBLEVBQVEsV0FDaEMrekYsRUFBUWoxRixRQUFRMWMsY0FBY3k0RyxFQUFVLENBQUU3NkYsTUFBT0EsRUFBT0UsT0FBUUEsRUFBUSs2RixRQUFTLFlBQWFuZ0csUUFBUyxNQUFPaWdHLE1BQU8sNkJBQThCMTFHLEtBQU0sU0FDN0owdUcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVpRCxLQUFNLFFBQVNwRCxFQUFHLHlEQ1ZsRSxJQUFJMnhHLEVBQW1CeDhHLE1BQVFBLEtBQUt3OEcsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUl6K0YsV0FBY3krRixFQUFNLENBQUUsUUFBV0EsSUFFeERweEcsT0FBT2dTLGVBQWVDLEVBQVMsYUFBYyxDQUFFaFosT0FBTyxJQUN0RGdaLEVBQVFvakcsY0FBVyxFQUNuQixNQUFNL0QsRUFBVUgsRUFBZ0IsRUFBUSxNQUVsQ2lILEVBRHNCakgsRUFBZ0IsRUFBUSxNQUNmOTBGLFFBQVFnOEYsR0FBSTs7Ozs7O0VBWWpEcG1HLEVBQVFvakcsU0FMUyxFQUFHNTNGLE9BQUFBLEVBQVMsT0FBUUYsTUFBQUEsRUFBUSxPQUFRdXVFLFFBQUFBLEtBQ3pDd2xCLEVBQVFqMUYsUUFBUTFjLGNBQWN5NEcsRUFBVSxDQUFFeDFHLEtBQU0sUUFBUzAxRyxNQUFPLDZCQUE4QkUsUUFBUyxZQUFhajdGLE1BQU9BLEVBQU9FLE9BQVFBLEVBQVFxdUUsUUFBU0EsR0FDL0osSUFDQXdsQixFQUFRajFGLFFBQVExYyxjQUFjLE9BQVEsQ0FBRUgsRUFBRyw2ZENqQm5ELElBQUkyeEcsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUWdpRyxnQkFBYSxFQUNyQixNQUFNM0MsRUFBVUgsRUFBZ0IsRUFBUSxNQU14Q2wvRixFQUFRZ2lHLFdBTFcsRUFBR3gyRixPQUFBQSxFQUFTLE9BQVFGLE1BQUFBLEVBQVEsVUFDbkMrekYsRUFBUWoxRixRQUFRMWMsY0FBYyxNQUFPLENBQUU0ZCxNQUFPQSxFQUFPRSxPQUFRQSxFQUFRKzZGLFFBQVMsa0JBQW1CbmdHLFFBQVMsTUFBT2lnRyxNQUFPLDZCQUE4Qkcsb0JBQXFCLFlBQy9LbkgsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLEtBQy9CMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLGsvRkFBbS9Gb0QsS0FBTSxnRENUaGpHLElBQUl1dUcsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUTJoRyxlQUFZLEVBQ3BCLE1BQU10QyxFQUFVSCxFQUFnQixFQUFRLE1BRWxDaUgsRUFEc0JqSCxFQUFnQixFQUFRLE1BQ2Y5MEYsUUFBUWc4RixHQUFJLEdBVWpEcG1HLEVBQVEyaEcsVUFUVSxFQUFHbjJGLE9BQUFBLEVBQVMsT0FBUUYsTUFBQUEsRUFBUSxVQUNsQyt6RixFQUFRajFGLFFBQVExYyxjQUFjeTRHLEVBQVUsQ0FBRUUsTUFBTyw2QkFBOEIvNkYsTUFBT0EsRUFBT0UsT0FBUUEsRUFBUSs2RixRQUFTLGFBQzFIbEgsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLENBQUVrQyxVQUFXLDRDQUE2Q2UsS0FBTSxPQUFRODFHLFNBQVUsV0FDakhwSCxFQUFRajFGLFFBQVExYyxjQUFjLFNBQVUsQ0FBRWtzRCxFQUFHLFNBQVU4c0QsR0FBSSxVQUFXQyxHQUFJLFVBQVdoMkcsS0FBTSxZQUMzRjB1RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssQ0FBRWtnQixPQUFRLFVBQVdpaUQsWUFBYSxNQUNqRXd2QyxFQUFRajFGLFFBQVExYyxjQUFjLE9BQVEsQ0FBRUgsRUFBRyx3VUFDM0M4eEcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcseVZBQzNDOHhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLGlZQ2YzRCxJQUFJMnhHLEVBQW1CeDhHLE1BQVFBLEtBQUt3OEcsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUl6K0YsV0FBY3krRixFQUFNLENBQUUsUUFBV0EsSUFFeERweEcsT0FBT2dTLGVBQWVDLEVBQVMsYUFBYyxDQUFFaFosT0FBTyxJQUN0RGdaLEVBQVFpakcsWUFBUyxFQUNqQixNQUFNNUQsRUFBVUgsRUFBZ0IsRUFBUSxNQUVsQ2lILEVBRHNCakgsRUFBZ0IsRUFBUSxNQUNmOTBGLFFBQVFnOEYsR0FBSTs7Ozs7O0VBWWpEcG1HLEVBQVFpakcsT0FMTyxFQUFHejNGLE9BQUFBLEVBQVMsT0FBUUYsTUFBQUEsRUFBUSxPQUFRdXVFLFFBQUFBLEtBQ3ZDd2xCLEVBQVFqMUYsUUFBUTFjLGNBQWN5NEcsRUFBVSxDQUFFRSxNQUFPLDZCQUE4Qjc2RixPQUFRQSxFQUFRKzZGLFFBQVMsWUFBYWo3RixNQUFPQSxFQUFPM2EsS0FBTSxRQUFTa3BGLFFBQVNBLEdBQy9Kd2xCLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLGdCQUFpQm9ELEtBQU0sU0FDbEUwdUcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsc0tDakJuRCxJQUFJMnhHLEVBQW1CeDhHLE1BQVFBLEtBQUt3OEcsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUl6K0YsV0FBY3krRixFQUFNLENBQUUsUUFBV0EsSUFFeERweEcsT0FBT2dTLGVBQWVDLEVBQVMsYUFBYyxDQUFFaFosT0FBTyxJQUN0RGdaLEVBQVFzbEcsZ0JBQWEsRUFDckIsTUFBTWpHLEVBQVVILEVBQWdCLEVBQVEsTUFFbENpSCxFQURzQmpILEVBQWdCLEVBQVEsTUFDZjkwRixRQUFRZzhGLEdBQUk7Ozs7Ozs7RUFZakRwbUcsRUFBUXNsRyxXQUpXLEVBQUc5NUYsT0FBQUEsRUFBUyxPQUFRRixNQUFBQSxFQUFRLE9BQVF1dUUsUUFBQUEsS0FDM0N3bEIsRUFBUWoxRixRQUFRMWMsY0FBY3k0RyxFQUFVLENBQUVFLE1BQU8sNkJBQThCNzZGLE9BQVFBLEVBQVFGLE1BQU9BLEVBQU9nN0YsS0FBTSxNQUFPQyxRQUFTLFlBQWE1MUcsS0FBTSxPQUFRaWQsT0FBUSxlQUFnQixlQUFnQixJQUFLLGlCQUFrQixRQUFTLGtCQUFtQixRQUFTaXNFLFFBQVNBLEdBQy9Rd2xCLEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLDJVQ2pCbkQsSUFBSTJ4RyxFQUFtQng4RyxNQUFRQSxLQUFLdzhHLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJeitGLFdBQWN5K0YsRUFBTSxDQUFFLFFBQVdBLElBRXhEcHhHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWhaLE9BQU8sSUFDdERnWixFQUFRK2hHLG9CQUFpQixFQUN6QixNQUFNMUMsRUFBVUgsRUFBZ0IsRUFBUSxNQUVsQ2lILEVBRHNCakgsRUFBZ0IsRUFBUSxNQUNmOTBGLFFBQVFnOEYsR0FBSSxHQUtqRHBtRyxFQUFRK2hHLGVBSmUsRUFBR3YyRixPQUFBQSxFQUFTLE9BQVFGLE1BQUFBLEVBQVEsVUFDdkMrekYsRUFBUWoxRixRQUFRMWMsY0FBY3k0RyxFQUFVLENBQUVFLE1BQU8sNkJBQThCLzZGLE1BQU9BLEVBQU9FLE9BQVFBLEVBQVErNkYsUUFBUyxjQUMxSGxILEVBQVFqMUYsUUFBUTFjLGNBQWMsT0FBUSxDQUFFSCxFQUFHLG82QkFBcTZCb0QsS0FBTSwrQ0NWOTlCLElBQUl1dUcsRUFBbUJ4OEcsTUFBUUEsS0FBS3c4RyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXorRixXQUFjeStGLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHB4RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUXNqRyxhQUFVLEVBQ2xCLE1BQU1qRSxFQUFVSCxFQUFnQixFQUFRLE1BRWxDaUgsRUFEc0JqSCxFQUFnQixFQUFRLE1BQ2Y5MEYsUUFBUWc4RixHQUFJOztFQXlCakRwbUcsRUFBUXNqRyxRQXRCUSxFQUFHOTNGLE9BQUFBLEVBQVMsT0FBUUYsTUFBQUEsRUFBUSxPQUFRdXVFLFFBQUFBLEtBQ3hDd2xCLEVBQVFqMUYsUUFBUTFjLGNBQWN5NEcsRUFBVSxDQUFFLy9GLFFBQVMsTUFBT3VTLEdBQUksU0FBVTB0RixNQUFPLDZCQUE4Qi82RixNQUFPQSxFQUFPRSxPQUFRQSxFQUFRKzZGLFFBQVMsWUFBYTUxRyxLQUFNLFFBQVNrcEYsUUFBU0EsR0FDN0x3bEIsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLEtBQy9CMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxLQUMvQjJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLE9BQVEsQ0FBRUgsRUFBRyx1UEFDM0M4eEcsRUFBUWoxRixRQUFRMWMsY0FBYyxPQUFRLENBQUVILEVBQUcsZ0tBQ25EOHhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLE1BQ25DMnhHLEVBQVFqMUYsUUFBUTFjLGNBQWMsSUFBSyxNQUNuQzJ4RyxFQUFRajFGLFFBQVExYyxjQUFjLElBQUssTUFDbkMyeEcsRUFBUWoxRixRQUFRMWMsY0FBYyxJQUFLLHlDQzlCM0MsSUFBSXd4RyxFQUFtQng4RyxNQUFRQSxLQUFLdzhHLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJeitGLFdBQWN5K0YsRUFBTSxDQUFFLFFBQVdBLElBRXhEcHhHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWhaLE9BQU8sSUFDdERnWixFQUFRNG1HLFNBQU0sRUFDZCxNQUFNdkgsRUFBVUgsRUFBZ0IsRUFBUSxNQUNsQ0ksRUFBc0JKLEVBQWdCLEVBQVEsTUFDOUMySCxFQUFjM0gsRUFBZ0IsRUFBUSxNQUN0QzRILEVBQXFCLEVBQVEsS0FDN0JDLEVBQWEsRUFBUSxLQUNyQkMsRUFBbUIxSCxFQUFvQmwxRixRQUFRdzFGLEdBQUk7Ozs7OztFQWF6RDUvRixFQUFRNG1HLElBTkksSUFDQXZILEVBQVFqMUYsUUFBUTFjLGNBQWNzNUcsRUFBa0IsS0FDcEQzSCxFQUFRajFGLFFBQVExYyxjQUFjbzVHLEVBQW1CbFYsY0FBZSxLQUM1RHlOLEVBQVFqMUYsUUFBUTFjLGNBQWNvNUcsRUFBbUIzVixPQUFRLEtBQ3JEa08sRUFBUWoxRixRQUFRMWMsY0FBY281RyxFQUFtQnBXLE1BQU8sQ0FBRTMyRSxLQUFNLG9CQUFxQjMyQixRQUFTaThHLEVBQVFqMUYsUUFBUTFjLGNBQWNxNUcsRUFBV3hELFNBQVUsV0FHaktzRCxFQUFZejhGLFFBQVF4RCxPQUFPeTRGLEVBQVFqMUYsUUFBUTFjLGNBQWNzUyxFQUFRNG1HLElBQUssTUFBT241RyxTQUFTdzVHLGVBQWUsbUNDckJyRyxJQUFXbEgsRUFIWGh5RyxPQUFPZ1MsZUFBZUMsRUFBUyxhQUFjLENBQUVoWixPQUFPLElBQ3REZ1osRUFBUSsvRixjQUFXLEdBRVJBLEVBS0cvL0YsRUFBUSsvRixXQUFhLy9GLEVBQVErL0YsU0FBVyxLQUpsQyxNQUFJLFFBQ3BCQSxFQUFrQixRQUFJLFVBQ3RCQSxFQUFtQixTQUFJLFdBQ3ZCQSxFQUFlLEtBQUksaUNDUHZCaHlHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWhaLE9BQU8sSUFDdERnWixFQUFRMGhHLGVBQWlCMWhHLEVBQVFrbkcsUUFBVWxuRyxFQUFROC9GLGNBQVcsRUFTOUQ5L0YsRUFBUTgvRixTQVJVbm5GLElBQ2QsTUFBTXd1RixFQUFVMTVHLFNBQVN3NUcsZUFBZXR1RixHQUN4Q3JwQixPQUFPcTJDLFNBQVMsQ0FDWmg2QixJQUFLdzdGLE1BQUFBLE9BQXlDLEVBQVNBLEVBQVFDLFVBQy9EdDdGLEtBQU0sRUFDTnU3RixTQUFVLFlBS2xCcm5HLEVBQVFrbkcsUUFEUSxLQUFNLEVBUXRCbG5HLEVBQVEwaEcsZUFOZSxLQUNmLEVBQUkxaEcsRUFBUWtuRyxXQUNMLFNBRUosK2hCQ0ZYLElBQUlJLEVBQWdCLFNBQVMvNUcsRUFBRzNILEdBSTVCLE9BSEEwaEgsRUFBZ0J2NUcsT0FBT3c1RyxnQkFDbEIsQ0FBRUMsVUFBVyxjQUFnQm5nSCxPQUFTLFNBQVVrRyxFQUFHM0gsR0FBSzJILEVBQUVpNkcsVUFBWTVoSCxJQUN2RSxTQUFVMkgsRUFBRzNILEdBQUssSUFBSyxJQUFJMEYsS0FBSzFGLEVBQU9tSSxPQUFPSSxVQUFVSCxlQUFlOUIsS0FBS3RHLEVBQUcwRixLQUFJaUMsRUFBRWpDLEdBQUsxRixFQUFFMEYsS0FDekZnOEcsRUFBYy81RyxFQUFHM0gsSUFHckIsU0FBUzIrQixFQUFVaDNCLEVBQUczSCxHQUN6QixHQUFpQixtQkFBTkEsR0FBMEIsT0FBTkEsRUFDM0IsTUFBTSxJQUFJNmhILFVBQVUsdUJBQXlCOW9DLE9BQU8vNEUsR0FBSyxpQ0FFN0QsU0FBUzhoSCxJQUFPaGxILEtBQUsySCxZQUFja0QsRUFEbkMrNUcsRUFBYy81RyxFQUFHM0gsR0FFakIySCxFQUFFWSxVQUFrQixPQUFOdkksRUFBYW1JLE9BQU82UyxPQUFPaGIsSUFBTThoSCxFQUFHdjVHLFVBQVl2SSxFQUFFdUksVUFBVyxJQUFJdTVHLEdBRzVFLElBQUlwOUYsRUFBVyxXQVFsQixPQVBBQSxFQUFXdmMsT0FBT2dELFFBQVUsU0FBa0J2SixHQUMxQyxJQUFLLElBQUlpakcsRUFBR3JpRyxFQUFJLEVBQUd1WSxFQUFJd1osVUFBVXR3QixPQUFRekIsRUFBSXVZLEVBQUd2WSxJQUU1QyxJQUFLLElBQUlrRCxLQURUbS9GLEVBQUl0d0UsVUFBVS94QixHQUNPMkYsT0FBT0ksVUFBVUgsZUFBZTlCLEtBQUt1K0YsRUFBR24vRixLQUFJOUQsRUFBRThELEdBQUttL0YsRUFBRW4vRixJQUU5RSxPQUFPOUQsR0FFSjhpQixFQUFTK1AsTUFBTTMzQixLQUFNeTNCLFlBR3pCLFNBQVNybUIsRUFBTzIyRixFQUFHbjhGLEdBQ3RCLElBQUk5RyxFQUFJLEdBQ1IsSUFBSyxJQUFJOEQsS0FBS20vRixFQUFPMThGLE9BQU9JLFVBQVVILGVBQWU5QixLQUFLdStGLEVBQUduL0YsSUFBTWdELEVBQUVySyxRQUFRcUgsR0FBSyxJQUM5RTlELEVBQUU4RCxHQUFLbS9GLEVBQUVuL0YsSUFDYixHQUFTLE1BQUxtL0YsR0FBcUQsbUJBQWpDMThGLE9BQU8wcUQsc0JBQ3RCLEtBQUlyd0QsRUFBSSxFQUFiLElBQWdCa0QsRUFBSXlDLE9BQU8wcUQsc0JBQXNCZ3lDLEdBQUlyaUcsRUFBSWtELEVBQUV6QixPQUFRekIsSUFDM0RrRyxFQUFFckssUUFBUXFILEVBQUVsRCxJQUFNLEdBQUsyRixPQUFPSSxVQUFVdzVHLHFCQUFxQno3RyxLQUFLdStGLEVBQUduL0YsRUFBRWxELE1BQ3ZFWixFQUFFOEQsRUFBRWxELElBQU1xaUcsRUFBRW4vRixFQUFFbEQsS0FFMUIsT0FBT1osRUFHSixTQUFTb2dILEVBQVdDLEVBQVkvMkcsRUFBUXJDLEVBQUtxNUcsR0FDaEQsSUFBMkh2NkcsRUFBdkhELEVBQUk2c0IsVUFBVXR3QixPQUFRK3ZELEVBQUl0c0QsRUFBSSxFQUFJd0QsRUFBa0IsT0FBVGczRyxFQUFnQkEsRUFBTy81RyxPQUFPK1MseUJBQXlCaFEsRUFBUXJDLEdBQU9xNUcsRUFDckgsR0FBdUIsaUJBQVpuK0MsU0FBb0QsbUJBQXJCQSxRQUFRbytDLFNBQXlCbnVELEVBQUkrUCxRQUFRbytDLFNBQVNGLEVBQVkvMkcsRUFBUXJDLEVBQUtxNUcsUUFDcEgsSUFBSyxJQUFJMS9HLEVBQUl5L0csRUFBV2grRyxPQUFTLEVBQUd6QixHQUFLLEVBQUdBLEtBQVNtRixFQUFJczZHLEVBQVd6L0csTUFBSXd4RCxHQUFLdHNELEVBQUksRUFBSUMsRUFBRXFzRCxHQUFLdHNELEVBQUksRUFBSUMsRUFBRXVELEVBQVFyQyxFQUFLbXJELEdBQUtyc0QsRUFBRXVELEVBQVFyQyxLQUFTbXJELEdBQ2hKLE9BQU90c0QsRUFBSSxHQUFLc3NELEdBQUs3ckQsT0FBT2dTLGVBQWVqUCxFQUFRckMsRUFBS21yRCxHQUFJQSxFQUd6RCxTQUFTb3VELEVBQVFDLEVBQVlDLEdBQ2hDLE9BQU8sU0FBVXAzRyxFQUFRckMsR0FBT3k1RyxFQUFVcDNHLEVBQVFyQyxFQUFLdzVHLElBR3BELFNBQVNFLEVBQVdDLEVBQWFDLEdBQ3BDLEdBQXVCLGlCQUFaMStDLFNBQW9ELG1CQUFyQkEsUUFBUTIrQyxTQUF5QixPQUFPMytDLFFBQVEyK0MsU0FBU0YsRUFBYUMsR0FHN0csU0FBU0UsRUFBVUMsRUFBU0MsRUFBWS95QixFQUFHM3lGLEdBRTlDLE9BQU8sSUFBSzJ5RixJQUFNQSxFQUFJOXFGLFdBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBUzQ5RyxFQUFVMWhILEdBQVMsSUFBTW92RCxFQUFLcnpELEVBQVVpUSxLQUFLaE0sSUFBVyxNQUFPc0gsR0FBS3hELEVBQU93RCxJQUNwRixTQUFTcTZHLEVBQVMzaEgsR0FBUyxJQUFNb3ZELEVBQUtyekQsRUFBaUIsTUFBRWlFLElBQVcsTUFBT3NILEdBQUt4RCxFQUFPd0QsSUFDdkYsU0FBUzhuRCxFQUFLa0csR0FKbEIsSUFBZXQxRCxFQUlhczFELEVBQU92bUQsS0FBT2xMLEVBQVF5eEQsRUFBT3QxRCxRQUoxQ0EsRUFJeURzMUQsRUFBT3QxRCxNQUpoREEsYUFBaUIwdUYsRUFBSTF1RixFQUFRLElBQUkwdUYsR0FBRSxTQUFVN3FGLEdBQVdBLEVBQVE3RCxPQUlUcEUsS0FBSzhsSCxFQUFXQyxHQUNsR3Z5RCxHQUFNcnpELEVBQVlBLEVBQVVzM0IsTUFBTW11RixFQUFTQyxHQUFjLEtBQUt6MUcsV0FJL0QsU0FBUzQxRyxFQUFZSixFQUFTNy9ELEdBQ2pDLElBQXNHNFEsRUFBRzcwRCxFQUFHOEMsRUFBR2d5RCxFQUEzR3RQLEVBQUksQ0FBRXJPLE1BQU8sRUFBR2d0RSxLQUFNLFdBQWEsR0FBVyxFQUFQcmhILEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxJQUFPc2hILEtBQU0sR0FBSUMsSUFBSyxJQUNoRyxPQUFPdnZELEVBQUksQ0FBRXhtRCxLQUFNZzJHLEVBQUssR0FBSSxNQUFTQSxFQUFLLEdBQUksT0FBVUEsRUFBSyxJQUF3QixtQkFBWDN2RCxTQUEwQkcsRUFBRUgsT0FBTy85QyxVQUFZLFdBQWEsT0FBTzVZLE9BQVU4MkQsRUFDdkosU0FBU3d2RCxFQUFLcm9HLEdBQUssT0FBTyxTQUFVOWMsR0FBSyxPQUN6QyxTQUFjb2xILEdBQ1YsR0FBSTF2RCxFQUFHLE1BQU0sSUFBSWt1RCxVQUFVLG1DQUMzQixLQUFPdjlELE9BQ0gsR0FBSXFQLEVBQUksRUFBRzcwRCxJQUFNOEMsRUFBWSxFQUFSeWhILEVBQUcsR0FBU3ZrSCxFQUFVLE9BQUl1a0gsRUFBRyxHQUFLdmtILEVBQVMsU0FBTzhDLEVBQUk5QyxFQUFVLFNBQU04QyxFQUFFMEUsS0FBS3hILEdBQUksR0FBS0EsRUFBRXNPLFNBQVd4TCxFQUFJQSxFQUFFMEUsS0FBS3hILEVBQUd1a0gsRUFBRyxLQUFLbHpHLEtBQU0sT0FBT3ZPLEVBRTNKLE9BREk5QyxFQUFJLEVBQUc4QyxJQUFHeWhILEVBQUssQ0FBUyxFQUFSQSxFQUFHLEdBQVF6aEgsRUFBRVIsUUFDekJpaUgsRUFBRyxJQUNQLEtBQUssRUFBRyxLQUFLLEVBQUd6aEgsRUFBSXloSCxFQUFJLE1BQ3hCLEtBQUssRUFBYyxPQUFYLytELEVBQUVyTyxRQUFnQixDQUFFNzBDLE1BQU9paUgsRUFBRyxHQUFJbHpHLE1BQU0sR0FDaEQsS0FBSyxFQUFHbTBDLEVBQUVyTyxRQUFTbjNDLEVBQUl1a0gsRUFBRyxHQUFJQSxFQUFLLENBQUMsR0FBSSxTQUN4QyxLQUFLLEVBQUdBLEVBQUsvK0QsRUFBRTYrRCxJQUFJNWMsTUFBT2ppRCxFQUFFNCtELEtBQUszYyxNQUFPLFNBQ3hDLFFBQ0ksTUFBa0Iza0csR0FBWkEsRUFBSTBpRCxFQUFFNCtELE1BQVlqL0csT0FBUyxHQUFLckMsRUFBRUEsRUFBRXFDLE9BQVMsS0FBa0IsSUFBVm8vRyxFQUFHLElBQXNCLElBQVZBLEVBQUcsSUFBVyxDQUFFLytELEVBQUksRUFBRyxTQUNqRyxHQUFjLElBQVYrK0QsRUFBRyxNQUFjemhILEdBQU15aEgsRUFBRyxHQUFLemhILEVBQUUsSUFBTXloSCxFQUFHLEdBQUt6aEgsRUFBRSxJQUFNLENBQUUwaUQsRUFBRXJPLE1BQVFvdEUsRUFBRyxHQUFJLE1BQzlFLEdBQWMsSUFBVkEsRUFBRyxJQUFZLytELEVBQUVyTyxNQUFRcjBDLEVBQUUsR0FBSSxDQUFFMGlELEVBQUVyTyxNQUFRcjBDLEVBQUUsR0FBSUEsRUFBSXloSCxFQUFJLE1BQzdELEdBQUl6aEgsR0FBSzBpRCxFQUFFck8sTUFBUXIwQyxFQUFFLEdBQUksQ0FBRTBpRCxFQUFFck8sTUFBUXIwQyxFQUFFLEdBQUkwaUQsRUFBRTYrRCxJQUFJN2tILEtBQUsra0gsR0FBSyxNQUN2RHpoSCxFQUFFLElBQUkwaUQsRUFBRTYrRCxJQUFJNWMsTUFDaEJqaUQsRUFBRTQrRCxLQUFLM2MsTUFBTyxTQUV0QjhjLEVBQUt0Z0UsRUFBS3o4QyxLQUFLczhHLEVBQVN0K0QsR0FDMUIsTUFBTzU3QyxHQUFLMjZHLEVBQUssQ0FBQyxFQUFHMzZHLEdBQUk1SixFQUFJLEVBQUssUUFBVTYwRCxFQUFJL3hELEVBQUksRUFDdEQsR0FBWSxFQUFSeWhILEVBQUcsR0FBUSxNQUFNQSxFQUFHLEdBQUksTUFBTyxDQUFFamlILE1BQU9paUgsRUFBRyxHQUFLQSxFQUFHLFFBQUssRUFBUWx6RyxNQUFNLEdBckI5QnFnRCxDQUFLLENBQUN6MUMsRUFBRzljLE1BeUJ0RCxJQUFJcWxILEVBQWtCbjdHLE9BQU82UyxPQUFTLFNBQVVzZ0QsRUFBR2hZLEVBQUdyb0MsRUFBR3NvRyxRQUNqRG5tSCxJQUFQbW1ILElBQWtCQSxFQUFLdG9HLEdBQzNCLElBQUlpbkcsRUFBTy81RyxPQUFPK1MseUJBQXlCb29DLEVBQUdyb0MsR0FDekNpbkcsS0FBUyxRQUFTQSxHQUFRNStELEVBQUV4b0MsV0FBYW9uRyxFQUFLc0IsVUFBWXRCLEVBQUtyOUMsZ0JBQ2hFcTlDLEVBQU8sQ0FBRS9tRyxZQUFZLEVBQU1yZCxJQUFLLFdBQWEsT0FBT3dsRCxFQUFFcm9DLE1BRTFEOVMsT0FBT2dTLGVBQWVtaEQsRUFBR2lvRCxFQUFJckIsSUFDNUIsU0FBVTVtRCxFQUFHaFksRUFBR3JvQyxFQUFHc29HLFFBQ1RubUgsSUFBUG1tSCxJQUFrQkEsRUFBS3RvRyxHQUMzQnFnRCxFQUFFaW9ELEdBQU1qZ0UsRUFBRXJvQyxJQUdQLFNBQVN3b0csRUFBYW5nRSxFQUFHZ1ksR0FDNUIsSUFBSyxJQUFJNTFELEtBQUs0OUMsRUFBYSxZQUFONTlDLEdBQW9CeUMsT0FBT0ksVUFBVUgsZUFBZTlCLEtBQUtnMUQsRUFBRzUxRCxJQUFJNDlHLEVBQWdCaG9ELEVBQUdoWSxFQUFHNTlDLEdBR3hHLFNBQVN3K0MsRUFBU29YLEdBQ3JCLElBQUl1cEMsRUFBc0IsbUJBQVhweEMsUUFBeUJBLE9BQU8vOUMsU0FBVTR0QyxFQUFJdWhELEdBQUt2cEMsRUFBRXVwQyxHQUFJcmlHLEVBQUksRUFDNUUsR0FBSThnRCxFQUFHLE9BQU9BLEVBQUVoOUMsS0FBS2cxRCxHQUNyQixHQUFJQSxHQUF5QixpQkFBYkEsRUFBRXIzRCxPQUFxQixNQUFPLENBQzFDbUosS0FBTSxXQUVGLE9BRElrdUQsR0FBSzk0RCxHQUFLODRELEVBQUVyM0QsU0FBUXEzRCxPQUFJLEdBQ3JCLENBQUVsNkQsTUFBT2s2RCxHQUFLQSxFQUFFOTRELEtBQU0yTixNQUFPbXJELEtBRzVDLE1BQU0sSUFBSXVtRCxVQUFVaGQsRUFBSSwwQkFBNEIsbUNBR2pELFNBQVN4bUYsRUFBT2k5QyxFQUFHdmdELEdBQ3RCLElBQUl1b0MsRUFBc0IsbUJBQVhtUSxRQUF5QjZILEVBQUU3SCxPQUFPLzlDLFVBQ2pELElBQUs0dEMsRUFBRyxPQUFPZ1ksRUFDZixJQUFtQnRILEVBQVl0ckQsRUFBM0JsRyxFQUFJOGdELEVBQUVoOUMsS0FBS2cxRCxHQUFPb29ELEVBQUssR0FDM0IsSUFDSSxXQUFjLElBQU4zb0csR0FBZ0JBLEtBQU0sTUFBUWk1QyxFQUFJeHhELEVBQUU0SyxRQUFRK0MsTUFBTXV6RyxFQUFHcGxILEtBQUswMUQsRUFBRTV5RCxPQUV4RSxNQUFPZ2pELEdBQVMxN0MsRUFBSSxDQUFFMDdDLE1BQU9BLEdBQzdCLFFBQ0ksSUFDUTRQLElBQU1BLEVBQUU3akQsT0FBU216QyxFQUFJOWdELEVBQVUsU0FBSThnRCxFQUFFaDlDLEtBQUs5RCxHQUVsRCxRQUFVLEdBQUlrRyxFQUFHLE1BQU1BLEVBQUUwN0MsT0FFN0IsT0FBT3MvRCxFQUlKLFNBQVNDLElBQ1osSUFBSyxJQUFJRCxFQUFLLEdBQUlsaEgsRUFBSSxFQUFHQSxFQUFJK3hCLFVBQVV0d0IsT0FBUXpCLElBQzNDa2hILEVBQUtBLEVBQUduZ0csT0FBT2xGLEVBQU9rVyxVQUFVL3hCLEtBQ3BDLE9BQU9raEgsRUFJSixTQUFTRSxJQUNaLElBQUssSUFBSS9lLEVBQUksRUFBR3JpRyxFQUFJLEVBQUdxaEgsRUFBS3R2RixVQUFVdHdCLE9BQVF6QixFQUFJcWhILEVBQUlyaEgsSUFBS3FpRyxHQUFLdHdFLFVBQVUveEIsR0FBR3lCLE9BQ3hFLElBQUkrdkQsRUFBSXZ5RCxNQUFNb2pHLEdBQUk1cEYsRUFBSSxFQUEzQixJQUE4QnpZLEVBQUksRUFBR0EsRUFBSXFoSCxFQUFJcmhILElBQ3pDLElBQUssSUFBSXpDLEVBQUl3MEIsVUFBVS94QixHQUFJMHlHLEVBQUksRUFBR2hYLEVBQUtuK0YsRUFBRWtFLE9BQVFpeEcsRUFBSWhYLEVBQUlnWCxJQUFLajZGLElBQzFEKzRDLEVBQUUvNEMsR0FBS2xiLEVBQUVtMUcsR0FDakIsT0FBT2xoRCxFQUdKLFNBQVNockMsRUFBY2paLEVBQUl0RSxFQUFNcTRHLEdBQ3BDLEdBQUlBLEdBQTZCLElBQXJCdnZGLFVBQVV0d0IsT0FBYyxJQUFLLElBQTRCeS9HLEVBQXhCbGhILEVBQUksRUFBR3N4RCxFQUFJcm9ELEVBQUt4SCxPQUFZekIsRUFBSXN4RCxFQUFHdHhELEtBQ3hFa2hILEdBQVFsaEgsS0FBS2lKLElBQ1JpNEcsSUFBSUEsRUFBS2ppSCxNQUFNOEcsVUFBVTQ5QyxNQUFNNy9DLEtBQUttRixFQUFNLEVBQUdqSixJQUNsRGtoSCxFQUFHbGhILEdBQUtpSixFQUFLakosSUFHckIsT0FBT3VOLEVBQUd3VCxPQUFPbWdHLEdBQU1qaUgsTUFBTThHLFVBQVU0OUMsTUFBTTcvQyxLQUFLbUYsSUFHL0MsU0FBU3M0RyxFQUFROWxILEdBQ3BCLE9BQU9uQixnQkFBZ0JpbkgsR0FBV2puSCxLQUFLbUIsRUFBSUEsRUFBR25CLE1BQVEsSUFBSWluSCxFQUFROWxILEdBRy9ELFNBQVMrbEgsRUFBaUJwQixFQUFTQyxFQUFZMWxILEdBQ2xELElBQUtzMkQsT0FBT3d3RCxjQUFlLE1BQU0sSUFBSXBDLFVBQVUsd0NBQy9DLElBQW9Eci9HLEVBQWhEb3hELEVBQUl6MkQsRUFBVXMzQixNQUFNbXVGLEVBQVNDLEdBQWMsSUFBUTl1RCxFQUFJLEdBQzNELE9BQU92eEQsRUFBSSxHQUFJNGdILEVBQUssUUFBU0EsRUFBSyxTQUFVQSxFQUFLLFVBQVc1Z0gsRUFBRWl4RCxPQUFPd3dELGVBQWlCLFdBQWMsT0FBT25uSCxNQUFTMEYsRUFDcEgsU0FBUzRnSCxFQUFLcm9HLEdBQVM2NEMsRUFBRTc0QyxLQUFJdlksRUFBRXVZLEdBQUssU0FBVTljLEdBQUssT0FBTyxJQUFJK0csU0FBUSxTQUFVakYsRUFBR0MsR0FBSyt6RCxFQUFFejFELEtBQUssQ0FBQ3ljLEVBQUc5YyxFQUFHOEIsRUFBR0MsSUFBTSxHQUFLa2tILEVBQU9ucEcsRUFBRzljLFFBQzlILFNBQVNpbUgsRUFBT25wRyxFQUFHOWMsR0FBSyxLQUNWKzFELEVBRHFCSixFQUFFNzRDLEdBQUc5YyxJQUNuQm1ELGlCQUFpQjJpSCxFQUFVLytHLFFBQVFDLFFBQVErdUQsRUFBRTV5RCxNQUFNbkQsR0FBR2pCLEtBQUttbkgsRUFBU2ovRyxHQUFVay9HLEVBQU9yd0QsRUFBRSxHQUFHLEdBQUlDLEdBRHBFLE1BQU90ckQsR0FBSzA3RyxFQUFPcndELEVBQUUsR0FBRyxHQUFJcnJELEdBQzNFLElBQWNzckQsRUFDZCxTQUFTbXdELEVBQVEvaUgsR0FBUzhpSCxFQUFPLE9BQVE5aUgsR0FDekMsU0FBUzhELEVBQU85RCxHQUFTOGlILEVBQU8sUUFBUzlpSCxHQUN6QyxTQUFTZ2pILEVBQU96d0QsRUFBRzExRCxHQUFTMDFELEVBQUUxMUQsR0FBSTgxRCxFQUFFOGUsUUFBUzllLEVBQUU5dkQsUUFBUWlnSCxFQUFPbndELEVBQUUsR0FBRyxHQUFJQSxFQUFFLEdBQUcsS0FHekUsU0FBU3N3RCxFQUFpQi9vRCxHQUM3QixJQUFJOTRELEVBQUdrRCxFQUNQLE9BQU9sRCxFQUFJLEdBQUk0Z0gsRUFBSyxRQUFTQSxFQUFLLFNBQVMsU0FBVTE2RyxHQUFLLE1BQU1BLEtBQU8wNkcsRUFBSyxVQUFXNWdILEVBQUVpeEQsT0FBTy85QyxVQUFZLFdBQWMsT0FBTzVZLE1BQVMwRixFQUMxSSxTQUFTNGdILEVBQUtyb0csRUFBRzQ0QyxHQUFLbnhELEVBQUV1WSxHQUFLdWdELEVBQUV2Z0QsR0FBSyxTQUFVOWMsR0FBSyxPQUFReUgsR0FBS0EsR0FBSyxDQUFFdEUsTUFBTzJpSCxFQUFRem9ELEVBQUV2Z0QsR0FBRzljLElBQUtrUyxLQUFZLFdBQU40SyxHQUFtQjQ0QyxFQUFJQSxFQUFFMTFELEdBQUtBLEdBQU8wMUQsR0FHeEksU0FBUzJ3RCxFQUFjaHBELEdBQzFCLElBQUs3SCxPQUFPd3dELGNBQWUsTUFBTSxJQUFJcEMsVUFBVSx3Q0FDL0MsSUFBaUNyL0csRUFBN0I4Z0QsRUFBSWdZLEVBQUU3SCxPQUFPd3dELGVBQ2pCLE9BQU8zZ0UsRUFBSUEsRUFBRWg5QyxLQUFLZzFELElBQU1BLEVBQXFDcFgsRUFBU29YLEdBQTJCOTRELEVBQUksR0FBSTRnSCxFQUFLLFFBQVNBLEVBQUssU0FBVUEsRUFBSyxVQUFXNWdILEVBQUVpeEQsT0FBT3d3RCxlQUFpQixXQUFjLE9BQU9ubkgsTUFBUzBGLEdBQzlNLFNBQVM0Z0gsRUFBS3JvRyxHQUFLdlksRUFBRXVZLEdBQUt1Z0QsRUFBRXZnRCxJQUFNLFNBQVU5YyxHQUFLLE9BQU8sSUFBSStHLFNBQVEsU0FBVUMsRUFBU0MsSUFDdkYsU0FBZ0JELEVBQVNDLEVBQVF5QyxFQUFHMUosR0FBSytHLFFBQVFDLFFBQVFoSCxHQUFHakIsTUFBSyxTQUFTaUIsR0FBS2dILEVBQVEsQ0FBRTdELE1BQU9uRCxFQUFHa1MsS0FBTXhJLE1BQVN6QyxHQURKay9HLENBQU9uL0csRUFBU0MsR0FBN0JqSCxFQUFJcTlELEVBQUV2Z0QsR0FBRzljLElBQThCa1MsS0FBTWxTLEVBQUVtRCxZQUk3SSxTQUFTbWpILEVBQXFCQyxFQUFRQyxHQUV6QyxPQURJdDhHLE9BQU9nUyxlQUFrQmhTLE9BQU9nUyxlQUFlcXFHLEVBQVEsTUFBTyxDQUFFcGpILE1BQU9xakgsSUFBaUJELEVBQU9DLElBQU1BLEVBQ2xHRCxFQUdYLElBQUlFLEVBQXFCdjhHLE9BQU82UyxPQUFTLFNBQVVzZ0QsRUFBR3I5RCxHQUNsRGtLLE9BQU9nUyxlQUFlbWhELEVBQUcsVUFBVyxDQUFFbmdELFlBQVksRUFBTS9aLE1BQU9uRCxLQUM5RCxTQUFTcTlELEVBQUdyOUQsR0FDYnE5RCxFQUFXLFFBQUlyOUQsR0FHWixTQUFTMG1ILEVBQWFwTCxHQUN6QixHQUFJQSxHQUFPQSxFQUFJeitGLFdBQVksT0FBT3krRixFQUNsQyxJQUFJN2lELEVBQVMsR0FDYixHQUFXLE1BQVA2aUQsRUFBYSxJQUFLLElBQUl0K0YsS0FBS3MrRixFQUFlLFlBQU50K0YsR0FBbUI5UyxPQUFPSSxVQUFVSCxlQUFlOUIsS0FBS2l6RyxFQUFLdCtGLElBQUlxb0csRUFBZ0I1c0QsRUFBUTZpRCxFQUFLdCtGLEdBRXRJLE9BREF5cEcsRUFBbUJodUQsRUFBUTZpRCxHQUNwQjdpRCxFQUdKLFNBQVM0aUQsRUFBZ0JDLEdBQzVCLE9BQVFBLEdBQU9BLEVBQUl6K0YsV0FBY3krRixFQUFNLENBQUUvMEYsUUFBUyswRixHQUcvQyxTQUFTcUwsRUFBdUJDLEVBQVUzMEcsRUFBTzQwRyxFQUFNbnhELEdBQzFELEdBQWEsTUFBVG14RCxJQUFpQm54RCxFQUFHLE1BQU0sSUFBSWt1RCxVQUFVLGlEQUM1QyxHQUFxQixtQkFBVjN4RyxFQUF1QjIwRyxJQUFhMzBHLElBQVV5akQsR0FBS3pqRCxFQUFNelMsSUFBSW9uSCxHQUFXLE1BQU0sSUFBSWhELFVBQVUsNEVBQ3ZHLE1BQWdCLE1BQVRpRCxFQUFlbnhELEVBQWEsTUFBVG14RCxFQUFlbnhELEVBQUVydEQsS0FBS3UrRyxHQUFZbHhELEVBQUlBLEVBQUV2eUQsTUFBUThPLEVBQU1wUyxJQUFJK21ILEdBR2pGLFNBQVNFLEVBQXVCRixFQUFVMzBHLEVBQU85TyxFQUFPMGpILEVBQU1ueEQsR0FDakUsR0FBYSxNQUFUbXhELEVBQWMsTUFBTSxJQUFJakQsVUFBVSxrQ0FDdEMsR0FBYSxNQUFUaUQsSUFBaUJueEQsRUFBRyxNQUFNLElBQUlrdUQsVUFBVSxpREFDNUMsR0FBcUIsbUJBQVYzeEcsRUFBdUIyMEcsSUFBYTMwRyxJQUFVeWpELEdBQUt6akQsRUFBTXpTLElBQUlvbkgsR0FBVyxNQUFNLElBQUloRCxVQUFVLDJFQUN2RyxNQUFpQixNQUFUaUQsRUFBZW54RCxFQUFFcnRELEtBQUt1K0csRUFBVXpqSCxHQUFTdXlELEVBQUlBLEVBQUV2eUQsTUFBUUEsRUFBUThPLEVBQU14UyxJQUFJbW5ILEVBQVV6akgsR0FBU0EsRUFHakcsU0FBUzRqSCxFQUFzQjkwRyxFQUFPMjBHLEdBQ3pDLEdBQWlCLE9BQWJBLEdBQTBDLGlCQUFiQSxHQUE2QyxtQkFBYkEsRUFBMEIsTUFBTSxJQUFJaEQsVUFBVSwwQ0FDL0csTUFBd0IsbUJBQVYzeEcsRUFBdUIyMEcsSUFBYTMwRyxFQUFRQSxFQUFNelMsSUFBSW9uSCxNQ3JQcEVJLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUIvbkgsSUFBakJnb0gsRUFDSCxPQUFPQSxFQUFhaHJHLFFBR3JCLElBQUk0NEMsRUFBU2l5RCxFQUF5QkUsR0FBWSxDQUdqRC9xRyxRQUFTLElBT1YsT0FIQWlyRyxFQUFvQkYsR0FBVTcrRyxLQUFLMHNELEVBQU81NEMsUUFBUzQ0QyxFQUFRQSxFQUFPNTRDLFFBQVM4cUcsR0FHcEVseUQsRUFBTzU0QyxRQ3BCZjhxRyxFQUFvQm5xRyxFQUFLaTRDLElBQ3hCLElBQUlzeUQsRUFBU3R5RCxHQUFVQSxFQUFPbDRDLFdBQzdCLElBQU9rNEMsRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREFreUQsRUFBb0J2OUcsRUFBRTI5RyxFQUFRLENBQUV2bEgsRUFBR3VsSCxJQUM1QkEsR0NMUkosRUFBb0J2OUcsRUFBSSxDQUFDeVMsRUFBU3BYLEtBQ2pDLElBQUksSUFBSTZGLEtBQU83RixFQUNYa2lILEVBQW9CNXBELEVBQUV0NEQsRUFBWTZGLEtBQVNxOEcsRUFBb0I1cEQsRUFBRWxoRCxFQUFTdlIsSUFDNUVWLE9BQU9nUyxlQUFlQyxFQUFTdlIsRUFBSyxDQUFFc1MsWUFBWSxFQUFNcmQsSUFBS2tGLEVBQVc2RixNQ0ozRXE4RyxFQUFvQjVwRCxFQUFJLENBQUNpcUQsRUFBSzVsRyxJQUFVeFgsT0FBT0ksVUFBVUgsZUFBZTlCLEtBQUtpL0csRUFBSzVsRyxHQ0NsRnVsRyxFQUFvQmx4RCxFQUFLNTVDLElBQ0gsb0JBQVhxNUMsUUFBMEJBLE9BQU8reEQsYUFDMUNyOUcsT0FBT2dTLGVBQWVDLEVBQVNxNUMsT0FBTyt4RCxZQUFhLENBQUVwa0gsTUFBTyxXQUU3RCtHLE9BQU9nUyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWhaLE9BQU8sS0NGN0I4akgsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvdHlwZXMvZGlzdC9Nb3Rpb25WYWx1ZS5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS9kYXRhLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L25vb3AuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvYXJyYXkuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvdXRpbHMvdHJhbnNmb3Jtcy5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS91dGlscy9jc3MtdmFyLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L2RlZmF1bHRzLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L2lzLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9lYXNpbmcvZGlzdC9jdWJpYy1iZXppZXIuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvY2xhbXAuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2FuaW1hdGlvbi9kaXN0L3V0aWxzL2Vhc2luZy5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZWFzaW5nL2Rpc3Qvc3RlcHMuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3Qvd3JhcC5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvdXRpbHMvZGlzdC9taXguZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvcHJvZ3Jlc3MuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3Qvb2Zmc2V0LmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9hbmltYXRpb24vZGlzdC9BbmltYXRpb24uZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2FuaW1hdGlvbi9kaXN0L3V0aWxzL2ludGVycG9sYXRlLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L3RpbWUuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvdXRpbHMvZWFzaW5nLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL3V0aWxzL2ZlYXR1cmUtZGV0ZWN0aW9uLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL3V0aWxzL2tleWZyYW1lcy5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS91dGlscy9nZXQtc3R5bGUtbmFtZS5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS9zdHlsZS5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS91dGlscy9zdG9wLWFuaW1hdGlvbi5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS9hbmltYXRlLXN0eWxlLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL3V0aWxzL29wdGlvbnMuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L3V0aWxzL3Jlc29sdmUtZWxlbWVudHMuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvdXRpbHMvY29udHJvbHMuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L3V0aWxzL3N0YWdnZXIuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L3RpbWVsaW5lL3V0aWxzL2NhbGMtdGltZS5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvdGltZWxpbmUvdXRpbHMvZWRpdC5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvdGltZWxpbmUvdXRpbHMvc29ydC5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvdGltZWxpbmUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2dlbmVyYXRvcnMvZGlzdC91dGlscy92ZWxvY2l0eS5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvdXRpbHMvZGlzdC92ZWxvY2l0eS5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZ2VuZXJhdG9ycy9kaXN0L3NwcmluZy9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZ2VuZXJhdG9ycy9kaXN0L3NwcmluZy9kZWZhdWx0cy5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZ2VuZXJhdG9ycy9kaXN0L3NwcmluZy91dGlscy5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZ2VuZXJhdG9ycy9kaXN0L3V0aWxzL2hhcy1yZWFjaGVkLXRhcmdldC5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvZWFzaW5nL2NyZWF0ZS1nZW5lcmF0b3ItZWFzaW5nLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9nZW5lcmF0b3JzL2Rpc3QvdXRpbHMvcHJlZ2VuZXJhdGUta2V5ZnJhbWVzLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9lYXNpbmcvc3ByaW5nL2luZGV4LmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9lYXNpbmcvZ2xpZGUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2dlbmVyYXRvcnMvZGlzdC9nbGlkZS9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvZ2VzdHVyZXMvaW4tdmlldy5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3Qvc3RhdGUvdXRpbHMvcmVzb2x2ZS12YXJpYW50LmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9zdGF0ZS91dGlscy9pcy12YXJpYW50LmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9zdGF0ZS91dGlscy9zY2hlZHVsZS5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3Qvc3RhdGUvdXRpbHMvZXZlbnRzLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9zdGF0ZS9nZXN0dXJlcy9pbi12aWV3LmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9zdGF0ZS9nZXN0dXJlcy9ob3Zlci5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3Qvc3RhdGUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L3N0YXRlL2dlc3R1cmVzL3ByZXNzLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9zdGF0ZS91dGlscy9oYXMtY2hhbmdlZC5lcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS91dGlscy9zdHlsZS1vYmplY3QuZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvdXRpbHMvc3R5bGUtc3RyaW5nLmVzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9mcmFtZXN5bmMvZGlzdC9mcmFtZXN5bmMuY2pzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvaGV5LWxpc3Rlbi9kaXN0L2hleS1saXN0ZW4uZXMuanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9wb3Btb3Rpb24uY2pzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2luZGV4LmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9zaGFsbG93ZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS12YWx1ZS10eXBlcy9kaXN0L3ZhbHVlVHlwZXMuY2pzLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGlzL2Rpc3Qvc3R5bGlzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2NvbXBvbmVudHMvTmF2YmFyLnRzeCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbnMvQWJvdXQudHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9ucy9Db250YWN0LnRzeCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbnMvSG9tZXBhZ2UudHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9ucy9Qcm9qZWN0SXRlbS50c3giLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb25zL1Byb2plY3RzLnRzeCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2NvbXBvbmVudHMvU29jaWFscy50c3giLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL3NyYy9pbWFnZXMvQXBwTGluay50c3giLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL3NyYy9pbWFnZXMvQ1NTTG9nby50c3giLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL3NyYy9pbWFnZXMvRW1haWxMb2dvLnRzeCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2ltYWdlcy9HaXRodWIudHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvaW1hZ2VzL0hUTUxMb2dvLnRzeCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2ltYWdlcy9KU0xvZ28udHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvaW1hZ2VzL0xpbmVUd28udHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvaW1hZ2VzL0xpbmtlZGluLnRzeCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2ltYWdlcy9Ob2RlSlNMb2dvLnRzeCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vc3JjL2ltYWdlcy9SZWFjdExvZ28udHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvaW1hZ2VzL1Jlc3VtZS50c3giLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL3NyYy9pbWFnZXMvVGlueUdpdGh1Yi50c3giLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL3NyYy9pbWFnZXMvVHlwZVNjcmlwdExvZ28udHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvaW1hZ2VzL1VwQXJyb3cudHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvLi9zcmMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcGVyc29uYWwtc2l0ZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3BlcnNvbmFsLXNpdGUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wZXJzb25hbC1zaXRlL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNb3Rpb25WYWx1ZSB0cmFja3MgdGhlIHN0YXRlIG9mIGEgc2luZ2xlIGFuaW1hdGFibGVcbiAqIHZhbHVlLiBDdXJyZW50bHksIHVwZGF0ZWRBdCBhbmQgY3VycmVudCBhcmUgdW51c2VkLiBUaGVcbiAqIGxvbmcgdGVybSBpZGVhIGlzIHRvIHVzZSB0aGlzIHRvIG1pbmltaXNlIHRoZSBudW1iZXJcbiAqIG9mIERPTSByZWFkcywgYW5kIHRvIGFic3RyYWN0IHRoZSBET00gaW50ZXJhY3Rpb25zIGhlcmUuXG4gKi9cbmNsYXNzIE1vdGlvblZhbHVlIHtcbiAgICBzZXRBbmltYXRpb24oYW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuICAgICAgICBhbmltYXRpb24gPT09IG51bGwgfHwgYW5pbWF0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhbmltYXRpb24uZmluaXNoZWQudGhlbigoKSA9PiB0aGlzLmNsZWFyQW5pbWF0aW9uKCkpLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgfVxuICAgIGNsZWFyQW5pbWF0aW9uKCkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHRoaXMuZ2VuZXJhdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTW90aW9uVmFsdWUgfTtcbiIsImltcG9ydCB7IE1vdGlvblZhbHVlIH0gZnJvbSAnQG1vdGlvbm9uZS90eXBlcyc7XG5cbmNvbnN0IGRhdGEgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uRGF0YShlbGVtZW50KSB7XG4gICAgaWYgKCFkYXRhLmhhcyhlbGVtZW50KSkge1xuICAgICAgICBkYXRhLnNldChlbGVtZW50LCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1zOiBbXSxcbiAgICAgICAgICAgIHZhbHVlczogbmV3IE1hcCgpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuZ2V0KGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gZ2V0TW90aW9uVmFsdWUobW90aW9uVmFsdWVzLCBuYW1lKSB7XG4gICAgaWYgKCFtb3Rpb25WYWx1ZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIG1vdGlvblZhbHVlcy5zZXQobmFtZSwgbmV3IE1vdGlvblZhbHVlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gbW90aW9uVmFsdWVzLmdldChuYW1lKTtcbn1cblxuZXhwb3J0IHsgZ2V0QW5pbWF0aW9uRGF0YSwgZ2V0TW90aW9uVmFsdWUgfTtcbiIsImNvbnN0IG5vb3AgPSAoKSA9PiB7IH07XG5jb25zdCBub29wUmV0dXJuID0gKHYpID0+IHY7XG5cbmV4cG9ydCB7IG5vb3AsIG5vb3BSZXR1cm4gfTtcbiIsImZ1bmN0aW9uIGFkZFVuaXF1ZUl0ZW0oYXJyYXksIGl0ZW0pIHtcbiAgICBhcnJheS5pbmRleE9mKGl0ZW0pID09PSAtMSAmJiBhcnJheS5wdXNoKGl0ZW0pO1xufVxuZnVuY3Rpb24gcmVtb3ZlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBjb25zdCBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGluZGV4ID4gLTEgJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG59XG5cbmV4cG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIHJlbW92ZUl0ZW0gfTtcbiIsImltcG9ydCB7IG5vb3BSZXR1cm4sIGFkZFVuaXF1ZUl0ZW0gfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IGdldEFuaW1hdGlvbkRhdGEgfSBmcm9tICcuLi9kYXRhLmVzLmpzJztcblxuLyoqXG4gKiBBIGxpc3Qgb2YgYWxsIHRyYW5zZm9ybWFibGUgYXhlcy4gV2UnbGwgdXNlIHRoaXMgbGlzdCB0byBnZW5lcmF0ZWQgYSB2ZXJzaW9uXG4gKiBvZiBlYWNoIGF4ZXMgZm9yIGVhY2ggdHJhbnNmb3JtLlxuICovXG5jb25zdCBheGVzID0gW1wiXCIsIFwiWFwiLCBcIllcIiwgXCJaXCJdO1xuLyoqXG4gKiBBbiBvcmRlcmVkIGFycmF5IG9mIGVhY2ggdHJhbnNmb3JtYWJsZSB2YWx1ZS4gQnkgZGVmYXVsdCwgdHJhbnNmb3JtIHZhbHVlc1xuICogd2lsbCBiZSBzb3J0ZWQgdG8gdGhpcyBvcmRlci5cbiAqL1xuY29uc3Qgb3JkZXIgPSBbXCJ0cmFuc2xhdGVcIiwgXCJzY2FsZVwiLCBcInJvdGF0ZVwiLCBcInNrZXdcIl07XG5jb25zdCB0cmFuc2Zvcm1BbGlhcyA9IHtcbiAgICB4OiBcInRyYW5zbGF0ZVhcIixcbiAgICB5OiBcInRyYW5zbGF0ZVlcIixcbiAgICB6OiBcInRyYW5zbGF0ZVpcIixcbn07XG5jb25zdCByb3RhdGlvbiA9IHtcbiAgICBzeW50YXg6IFwiPGFuZ2xlPlwiLFxuICAgIGluaXRpYWxWYWx1ZTogXCIwZGVnXCIsXG4gICAgdG9EZWZhdWx0VW5pdDogKHYpID0+IHYgKyBcImRlZ1wiLFxufTtcbmNvbnN0IGJhc2VUcmFuc2Zvcm1Qcm9wZXJ0aWVzID0ge1xuICAgIHRyYW5zbGF0ZToge1xuICAgICAgICBzeW50YXg6IFwiPGxlbmd0aC1wZXJjZW50YWdlPlwiLFxuICAgICAgICBpbml0aWFsVmFsdWU6IFwiMHB4XCIsXG4gICAgICAgIHRvRGVmYXVsdFVuaXQ6ICh2KSA9PiB2ICsgXCJweFwiLFxuICAgIH0sXG4gICAgcm90YXRlOiByb3RhdGlvbixcbiAgICBzY2FsZToge1xuICAgICAgICBzeW50YXg6IFwiPG51bWJlcj5cIixcbiAgICAgICAgaW5pdGlhbFZhbHVlOiAxLFxuICAgICAgICB0b0RlZmF1bHRVbml0OiBub29wUmV0dXJuLFxuICAgIH0sXG4gICAgc2tldzogcm90YXRpb24sXG59O1xuY29uc3QgdHJhbnNmb3JtRGVmaW5pdGlvbnMgPSBuZXcgTWFwKCk7XG5jb25zdCBhc1RyYW5zZm9ybUNzc1ZhciA9IChuYW1lKSA9PiBgLS1tb3Rpb24tJHtuYW1lfWA7XG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiBldmVyeSBwb3NzaWJsZSB0cmFuc2Zvcm0ga2V5XG4gKi9cbmNvbnN0IHRyYW5zZm9ybXMgPSBbXCJ4XCIsIFwieVwiLCBcInpcIl07XG5vcmRlci5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgYXhlcy5mb3JFYWNoKChheGlzKSA9PiB7XG4gICAgICAgIHRyYW5zZm9ybXMucHVzaChuYW1lICsgYXhpcyk7XG4gICAgICAgIHRyYW5zZm9ybURlZmluaXRpb25zLnNldChhc1RyYW5zZm9ybUNzc1ZhcihuYW1lICsgYXhpcyksIGJhc2VUcmFuc2Zvcm1Qcm9wZXJ0aWVzW25hbWVdKTtcbiAgICB9KTtcbn0pO1xuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIHVzZSB3aXRoIEFycmF5LnNvcnQgdG8gc29ydCB0cmFuc2Zvcm0ga2V5cyBieSB0aGVpciBkZWZhdWx0IG9yZGVyLlxuICovXG5jb25zdCBjb21wYXJlVHJhbnNmb3JtT3JkZXIgPSAoYSwgYikgPT4gdHJhbnNmb3Jtcy5pbmRleE9mKGEpIC0gdHJhbnNmb3Jtcy5pbmRleE9mKGIpO1xuLyoqXG4gKiBQcm92aWRlIGEgcXVpY2sgd2F5IHRvIGNoZWNrIGlmIGEgc3RyaW5nIGlzIHRoZSBuYW1lIG9mIGEgdHJhbnNmb3JtXG4gKi9cbmNvbnN0IHRyYW5zZm9ybUxvb2t1cCA9IG5ldyBTZXQodHJhbnNmb3Jtcyk7XG5jb25zdCBpc1RyYW5zZm9ybSA9IChuYW1lKSA9PiB0cmFuc2Zvcm1Mb29rdXAuaGFzKG5hbWUpO1xuY29uc3QgYWRkVHJhbnNmb3JtVG9FbGVtZW50ID0gKGVsZW1lbnQsIG5hbWUpID0+IHtcbiAgICAvLyBNYXAgeCB0byB0cmFuc2xhdGVYIGV0Y1xuICAgIGlmICh0cmFuc2Zvcm1BbGlhc1tuYW1lXSlcbiAgICAgICAgbmFtZSA9IHRyYW5zZm9ybUFsaWFzW25hbWVdO1xuICAgIGNvbnN0IHsgdHJhbnNmb3JtcyB9ID0gZ2V0QW5pbWF0aW9uRGF0YShlbGVtZW50KTtcbiAgICBhZGRVbmlxdWVJdGVtKHRyYW5zZm9ybXMsIG5hbWUpO1xuICAgIC8qKlxuICAgICAqIFRPRE86IEFuIG9wdGltaXNhdGlvbiBoZXJlIGNvdWxkIGJlIHRvIGNhY2hlIHRoZSB0cmFuc2Zvcm0gaW4gZWxlbWVudCBkYXRhXG4gICAgICogYW5kIG9ubHkgdXBkYXRlIGlmIHRoaXMgaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBidWlsZFRyYW5zZm9ybVRlbXBsYXRlKHRyYW5zZm9ybXMpO1xufTtcbmNvbnN0IGJ1aWxkVHJhbnNmb3JtVGVtcGxhdGUgPSAodHJhbnNmb3JtcykgPT4gdHJhbnNmb3Jtc1xuICAgIC5zb3J0KGNvbXBhcmVUcmFuc2Zvcm1PcmRlcilcbiAgICAucmVkdWNlKHRyYW5zZm9ybUxpc3RUb1N0cmluZywgXCJcIilcbiAgICAudHJpbSgpO1xuY29uc3QgdHJhbnNmb3JtTGlzdFRvU3RyaW5nID0gKHRlbXBsYXRlLCBuYW1lKSA9PiBgJHt0ZW1wbGF0ZX0gJHtuYW1lfSh2YXIoJHthc1RyYW5zZm9ybUNzc1ZhcihuYW1lKX0pKWA7XG5cbmV4cG9ydCB7IGFkZFRyYW5zZm9ybVRvRWxlbWVudCwgYXNUcmFuc2Zvcm1Dc3NWYXIsIGF4ZXMsIGJ1aWxkVHJhbnNmb3JtVGVtcGxhdGUsIGNvbXBhcmVUcmFuc2Zvcm1PcmRlciwgaXNUcmFuc2Zvcm0sIHRyYW5zZm9ybUFsaWFzLCB0cmFuc2Zvcm1EZWZpbml0aW9ucyB9O1xuIiwiaW1wb3J0IHsgdHJhbnNmb3JtRGVmaW5pdGlvbnMgfSBmcm9tICcuL3RyYW5zZm9ybXMuZXMuanMnO1xuXG5jb25zdCBpc0Nzc1ZhciA9IChuYW1lKSA9PiBuYW1lLnN0YXJ0c1dpdGgoXCItLVwiKTtcbmNvbnN0IHJlZ2lzdGVyZWRQcm9wZXJ0aWVzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcmVnaXN0ZXJDc3NWYXJpYWJsZShuYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRQcm9wZXJ0aWVzLmhhcyhuYW1lKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHJlZ2lzdGVyZWRQcm9wZXJ0aWVzLmFkZChuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHN5bnRheCwgaW5pdGlhbFZhbHVlIH0gPSB0cmFuc2Zvcm1EZWZpbml0aW9ucy5oYXMobmFtZSlcbiAgICAgICAgICAgID8gdHJhbnNmb3JtRGVmaW5pdGlvbnMuZ2V0KG5hbWUpXG4gICAgICAgICAgICA6IHt9O1xuICAgICAgICBDU1MucmVnaXN0ZXJQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgaW5oZXJpdHM6IGZhbHNlLFxuICAgICAgICAgICAgc3ludGF4LFxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHsgfVxufVxuXG5leHBvcnQgeyBpc0Nzc1ZhciwgcmVnaXN0ZXJDc3NWYXJpYWJsZSwgcmVnaXN0ZXJlZFByb3BlcnRpZXMgfTtcbiIsImNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGR1cmF0aW9uOiAwLjMsXG4gICAgZGVsYXk6IDAsXG4gICAgZW5kRGVsYXk6IDAsXG4gICAgcmVwZWF0OiAwLFxuICAgIGVhc2luZzogXCJlYXNlXCIsXG59O1xuXG5leHBvcnQgeyBkZWZhdWx0cyB9O1xuIiwiY29uc3QgaXNOdW1iZXIgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbmNvbnN0IGlzU3RyaW5nID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG5jb25zdCBpc0Vhc2luZ0dlbmVyYXRvciA9IChlYXNpbmcpID0+IHR5cGVvZiBlYXNpbmcgPT09IFwib2JqZWN0XCIgJiZcbiAgICBCb29sZWFuKGVhc2luZy5jcmVhdGVBbmltYXRpb24pO1xuY29uc3QgaXNDdWJpY0JlemllciA9IChlYXNpbmcpID0+IEFycmF5LmlzQXJyYXkoZWFzaW5nKSAmJiBpc051bWJlcihlYXNpbmdbMF0pO1xuY29uc3QgaXNFYXNpbmdMaXN0ID0gKGVhc2luZykgPT4gQXJyYXkuaXNBcnJheShlYXNpbmcpICYmICFpc051bWJlcihlYXNpbmdbMF0pO1xuXG5leHBvcnQgeyBpc0N1YmljQmV6aWVyLCBpc0Vhc2luZ0dlbmVyYXRvciwgaXNFYXNpbmdMaXN0LCBpc051bWJlciwgaXNTdHJpbmcgfTtcbiIsImltcG9ydCB7IG5vb3BSZXR1cm4gfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcblxuLypcbiAgQmV6aWVyIGZ1bmN0aW9uIGdlbmVyYXRvclxuXG4gIFRoaXMgaGFzIGJlZW4gbW9kaWZpZWQgZnJvbSBHYcOrdGFuIFJlbmF1ZGVhdSdzIEJlemllckVhc2luZ1xuICBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmcvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LmpzXG4gIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gIFxuICBJJ3ZlIHJlbW92ZWQgdGhlIG5ld3RvblJhcGhzb25JdGVyYXRlIGFsZ28gYmVjYXVzZSBpbiBiZW5jaG1hcmtpbmcgaXRcbiAgd2Fzbid0IG5vdGljaWFibHkgZmFzdGVyIHRoYW4gYmluYXJ5U3ViZGl2aXNpb24sIGluZGVlZCByZW1vdmluZyBpdFxuICB1c3VhbGx5IGltcHJvdmVkIHRpbWVzLCBkZXBlbmRpbmcgb24gdGhlIGN1cnZlLlxuXG4gIEkgYWxzbyByZW1vdmVkIHRoZSBsb29rdXAgdGFibGUsIGFzIGZvciB0aGUgYWRkZWQgYnVuZGxlIHNpemUgYW5kIGxvb3Agd2UncmVcbiAgb25seSBjdXR0aW5nIH40IG9yIHNvIHN1YmRpdmlzaW9uIGl0ZXJhdGlvbnMuIEkgYnVtcGVkIHRoZSBtYXggaXRlcmF0aW9ucyB1cFxuICB0byAxMiB0byBjb21wZW5zYXRlIGFuZCB0aGlzIHN0aWxsIHRlbmRlZCB0byBiZSBmYXN0ZXIgZm9yIG5vIHBlcmNlaXZhYmxlXG4gIGxvc3MgaW4gYWNjdXJhY3kuXG5cbiAgVXNhZ2VcbiAgICBjb25zdCBlYXNlT3V0ID0gY3ViaWNCZXppZXIoLjE3LC42NywuODMsLjY3KTtcbiAgICBjb25zdCB4ID0gZWFzZU91dCgwLjUpOyAvLyByZXR1cm5zIDAuNjI3Li4uXG4qL1xuLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmNvbnN0IGNhbGNCZXppZXIgPSAodCwgYTEsIGEyKSA9PiAoKCgxLjAgLSAzLjAgKiBhMiArIDMuMCAqIGExKSAqIHQgKyAoMy4wICogYTIgLSA2LjAgKiBhMSkpICogdCArIDMuMCAqIGExKSAqIHQ7XG5jb25zdCBzdWJkaXZpc2lvblByZWNpc2lvbiA9IDAuMDAwMDAwMTtcbmNvbnN0IHN1YmRpdmlzaW9uTWF4SXRlcmF0aW9ucyA9IDEyO1xuZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlKHgsIGxvd2VyQm91bmQsIHVwcGVyQm91bmQsIG1YMSwgbVgyKSB7XG4gICAgbGV0IGN1cnJlbnRYO1xuICAgIGxldCBjdXJyZW50VDtcbiAgICBsZXQgaSA9IDA7XG4gICAgZG8ge1xuICAgICAgICBjdXJyZW50VCA9IGxvd2VyQm91bmQgKyAodXBwZXJCb3VuZCAtIGxvd2VyQm91bmQpIC8gMi4wO1xuICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIHg7XG4gICAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgICAgICAgdXBwZXJCb3VuZCA9IGN1cnJlbnRUO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG93ZXJCb3VuZCA9IGN1cnJlbnRUO1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gc3ViZGl2aXNpb25QcmVjaXNpb24gJiZcbiAgICAgICAgKytpIDwgc3ViZGl2aXNpb25NYXhJdGVyYXRpb25zKTtcbiAgICByZXR1cm4gY3VycmVudFQ7XG59XG5mdW5jdGlvbiBjdWJpY0JlemllcihtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgICAvLyBJZiB0aGlzIGlzIGEgbGluZWFyIGdyYWRpZW50LCByZXR1cm4gbGluZWFyIGVhc2luZ1xuICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMilcbiAgICAgICAgcmV0dXJuIG5vb3BSZXR1cm47XG4gICAgY29uc3QgZ2V0VEZvclggPSAoYVgpID0+IGJpbmFyeVN1YmRpdmlkZShhWCwgMCwgMSwgbVgxLCBtWDIpO1xuICAgIC8vIElmIGFuaW1hdGlvbiBpcyBhdCBzdGFydC9lbmQsIHJldHVybiB0IHdpdGhvdXQgZWFzaW5nXG4gICAgcmV0dXJuICh0KSA9PiB0ID09PSAwIHx8IHQgPT09IDEgPyB0IDogY2FsY0JlemllcihnZXRURm9yWCh0KSwgbVkxLCBtWTIpO1xufVxuXG5leHBvcnQgeyBjdWJpY0JlemllciB9O1xuIiwiY29uc3QgY2xhbXAgPSAobWluLCBtYXgsIHYpID0+IE1hdGgubWluKE1hdGgubWF4KHYsIG1pbiksIG1heCk7XG5cbmV4cG9ydCB7IGNsYW1wIH07XG4iLCJpbXBvcnQgeyBjdWJpY0Jlemllciwgc3RlcHMgfSBmcm9tICdAbW90aW9ub25lL2Vhc2luZyc7XG5pbXBvcnQgeyBub29wUmV0dXJuLCBpc0Vhc2luZ0xpc3QsIHdyYXAgfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcblxuY29uc3QgbmFtZWRFYXNpbmdzID0ge1xuICAgIGVhc2U6IGN1YmljQmV6aWVyKDAuMjUsIDAuMSwgMC4yNSwgMS4wKSxcbiAgICBcImVhc2UtaW5cIjogY3ViaWNCZXppZXIoMC40MiwgMC4wLCAxLjAsIDEuMCksXG4gICAgXCJlYXNlLWluLW91dFwiOiBjdWJpY0JlemllcigwLjQyLCAwLjAsIDAuNTgsIDEuMCksXG4gICAgXCJlYXNlLW91dFwiOiBjdWJpY0JlemllcigwLjAsIDAuMCwgMC41OCwgMS4wKSxcbn07XG5jb25zdCBmdW5jdGlvbkFyZ3NSZWdleCA9IC9cXCgoLio/KVxcKS87XG5mdW5jdGlvbiBnZXRFYXNpbmdGdW5jdGlvbihkZWZpbml0aW9uKSB7XG4gICAgLy8gSWYgYWxyZWFkeSBhbiBlYXNpbmcgZnVuY3Rpb24sIHJldHVyblxuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAvLyBJZiBhbiBlYXNpbmcgY3VydmUgZGVmaW5pdGlvbiwgcmV0dXJuIGJlemllciBmdW5jdGlvblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKVxuICAgICAgICByZXR1cm4gY3ViaWNCZXppZXIoLi4uZGVmaW5pdGlvbik7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIHByZWRlZmluZWQgZWFzaW5nIGZ1bmN0aW9uLCByZXR1cm5cbiAgICBpZiAobmFtZWRFYXNpbmdzW2RlZmluaXRpb25dKVxuICAgICAgICByZXR1cm4gbmFtZWRFYXNpbmdzW2RlZmluaXRpb25dO1xuICAgIC8vIElmIHRoaXMgaXMgYSBzdGVwcyBmdW5jdGlvbiwgYXR0ZW1wdCB0byBjcmVhdGUgZWFzaW5nIGN1cnZlXG4gICAgaWYgKGRlZmluaXRpb24uc3RhcnRzV2l0aChcInN0ZXBzXCIpKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBmdW5jdGlvbkFyZ3NSZWdleC5leGVjKGRlZmluaXRpb24pO1xuICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgY29uc3QgYXJnc0FycmF5ID0gYXJnc1sxXS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICByZXR1cm4gc3RlcHMocGFyc2VGbG9hdChhcmdzQXJyYXlbMF0pLCBhcmdzQXJyYXlbMV0udHJpbSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9vcFJldHVybjtcbn1cbmZ1bmN0aW9uIGdldEVhc2luZ0ZvclNlZ21lbnQoZWFzaW5nLCBpKSB7XG4gICAgcmV0dXJuIGlzRWFzaW5nTGlzdChlYXNpbmcpXG4gICAgICAgID8gZWFzaW5nW3dyYXAoMCwgZWFzaW5nLmxlbmd0aCwgaSldXG4gICAgICAgIDogZWFzaW5nO1xufVxuXG5leHBvcnQgeyBnZXRFYXNpbmdGb3JTZWdtZW50LCBnZXRFYXNpbmdGdW5jdGlvbiB9O1xuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcblxuY29uc3Qgc3RlcHMgPSAoc3RlcHMsIGRpcmVjdGlvbiA9IFwiZW5kXCIpID0+IChwcm9ncmVzcykgPT4ge1xuICAgIHByb2dyZXNzID1cbiAgICAgICAgZGlyZWN0aW9uID09PSBcImVuZFwiXG4gICAgICAgICAgICA/IE1hdGgubWluKHByb2dyZXNzLCAwLjk5OSlcbiAgICAgICAgICAgIDogTWF0aC5tYXgocHJvZ3Jlc3MsIDAuMDAxKTtcbiAgICBjb25zdCBleHBhbmRlZCA9IHByb2dyZXNzICogc3RlcHM7XG4gICAgY29uc3Qgcm91bmRlZCA9IGRpcmVjdGlvbiA9PT0gXCJlbmRcIiA/IE1hdGguZmxvb3IoZXhwYW5kZWQpIDogTWF0aC5jZWlsKGV4cGFuZGVkKTtcbiAgICByZXR1cm4gY2xhbXAoMCwgMSwgcm91bmRlZCAvIHN0ZXBzKTtcbn07XG5cbmV4cG9ydCB7IHN0ZXBzIH07XG4iLCJjb25zdCB3cmFwID0gKG1pbiwgbWF4LCB2KSA9PiB7XG4gICAgY29uc3QgcmFuZ2VTaXplID0gbWF4IC0gbWluO1xuICAgIHJldHVybiAoKCgodiAtIG1pbikgJSByYW5nZVNpemUpICsgcmFuZ2VTaXplKSAlIHJhbmdlU2l6ZSkgKyBtaW47XG59O1xuXG5leHBvcnQgeyB3cmFwIH07XG4iLCJjb25zdCBtaXggPSAobWluLCBtYXgsIHByb2dyZXNzKSA9PiAtcHJvZ3Jlc3MgKiBtaW4gKyBwcm9ncmVzcyAqIG1heCArIG1pbjtcblxuZXhwb3J0IHsgbWl4IH07XG4iLCJjb25zdCBwcm9ncmVzcyA9IChtaW4sIG1heCwgdmFsdWUpID0+IG1heCAtIG1pbiA9PT0gMCA/IDEgOiAodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbik7XG5cbmV4cG9ydCB7IHByb2dyZXNzIH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5lcy5qcyc7XG5pbXBvcnQgeyBwcm9ncmVzcyB9IGZyb20gJy4vcHJvZ3Jlc3MuZXMuanMnO1xuXG5mdW5jdGlvbiBmaWxsT2Zmc2V0KG9mZnNldCwgcmVtYWluaW5nKSB7XG4gICAgY29uc3QgbWluID0gb2Zmc2V0W29mZnNldC5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSByZW1haW5pbmc7IGkrKykge1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9ncmVzcyA9IHByb2dyZXNzKDAsIHJlbWFpbmluZywgaSk7XG4gICAgICAgIG9mZnNldC5wdXNoKG1peChtaW4sIDEsIG9mZnNldFByb2dyZXNzKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdE9mZnNldChsZW5ndGgpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBbMF07XG4gICAgZmlsbE9mZnNldChvZmZzZXQsIGxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbmV4cG9ydCB7IGRlZmF1bHRPZmZzZXQsIGZpbGxPZmZzZXQgfTtcbiIsImltcG9ydCB7IGlzRWFzaW5nR2VuZXJhdG9yLCBpc0Vhc2luZ0xpc3QsIG5vb3BSZXR1cm4sIGRlZmF1bHRzIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyBnZXRFYXNpbmdGdW5jdGlvbiB9IGZyb20gJy4vdXRpbHMvZWFzaW5nLmVzLmpzJztcbmltcG9ydCB7IGludGVycG9sYXRlIH0gZnJvbSAnLi91dGlscy9pbnRlcnBvbGF0ZS5lcy5qcyc7XG5cbmNsYXNzIEFuaW1hdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3V0cHV0LCBrZXlmcmFtZXMgPSBbMCwgMV0sIHsgZWFzaW5nID0gZGVmYXVsdHMuZWFzaW5nLCBkdXJhdGlvbiA9IGRlZmF1bHRzLmR1cmF0aW9uLCBkZWxheSA9IGRlZmF1bHRzLmRlbGF5LCBlbmREZWxheSA9IGRlZmF1bHRzLmVuZERlbGF5LCByZXBlYXQgPSBkZWZhdWx0cy5yZXBlYXQsIG9mZnNldCwgZGlyZWN0aW9uID0gXCJub3JtYWxcIiwgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5yYXRlID0gMTtcbiAgICAgICAgdGhpcy50ID0gMDtcbiAgICAgICAgdGhpcy5jYW5jZWxUaW1lc3RhbXAgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IFwiaWRsZVwiO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzRWFzaW5nR2VuZXJhdG9yKGVhc2luZykpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbSA9IGVhc2luZy5jcmVhdGVBbmltYXRpb24oa2V5ZnJhbWVzLCAoKSA9PiBcIjBcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBlYXNpbmcgPSBjdXN0b20uZWFzaW5nO1xuICAgICAgICAgICAgaWYgKGN1c3RvbS5rZXlmcmFtZXMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMgPSBjdXN0b20ua2V5ZnJhbWVzO1xuICAgICAgICAgICAgaWYgKGN1c3RvbS5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gY3VzdG9tLmR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbkVhc2luZyA9IGlzRWFzaW5nTGlzdChlYXNpbmcpXG4gICAgICAgICAgICA/IG5vb3BSZXR1cm5cbiAgICAgICAgICAgIDogZ2V0RWFzaW5nRnVuY3Rpb24oZWFzaW5nKTtcbiAgICAgICAgY29uc3QgdG90YWxEdXJhdGlvbiA9IGR1cmF0aW9uICogKHJlcGVhdCArIDEpO1xuICAgICAgICBjb25zdCBpbnRlcnBvbGF0ZSQxID0gaW50ZXJwb2xhdGUoa2V5ZnJhbWVzLCBvZmZzZXQsIGlzRWFzaW5nTGlzdChlYXNpbmcpID8gZWFzaW5nLm1hcChnZXRFYXNpbmdGdW5jdGlvbikgOiBub29wUmV0dXJuKTtcbiAgICAgICAgdGhpcy50aWNrID0gKHRpbWVzdGFtcCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gVE9ETzogVGVtcG9yYXJ5IGZpeCBmb3IgT3B0aW9uc1Jlc29sdmVyIHR5cGluZ1xuICAgICAgICAgICAgZGVsYXkgPSBkZWxheTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdXNlVGltZSlcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgPSB0aGlzLnBhdXNlVGltZTtcbiAgICAgICAgICAgIGxldCB0ID0gKHRpbWVzdGFtcCAtIHRoaXMuc3RhcnRUaW1lKSAqIHRoaXMucmF0ZTtcbiAgICAgICAgICAgIHRoaXMudCA9IHQ7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRvIHNlY29uZHNcbiAgICAgICAgICAgIHQgLz0gMTAwMDtcbiAgICAgICAgICAgIC8vIFJlYmFzZSBvbiBkZWxheVxuICAgICAgICAgICAgdCA9IE1hdGgubWF4KHQgLSBkZWxheSwgMCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgYW5pbWF0aW9uIGhhcyBmaW5pc2hlZCwgc2V0IHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgICAgICAqIHRvIHRoZSB0b3RhbCBkdXJhdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucGxheVN0YXRlID09PSBcImZpbmlzaGVkXCIpXG4gICAgICAgICAgICAgICAgdCA9IHRvdGFsRHVyYXRpb247XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0aGUgY3VycmVudCBwcm9ncmVzcyAoMC0xKSBvZiB0aGUgYW5pbWF0aW9uLiBJZiB0IGlzID5cbiAgICAgICAgICAgICAqIHRoYW4gZHVyYXRpb24gd2UnbGwgZ2V0IHZhbHVlcyBsaWtlIDIuNSAobWlkd2F5IHRocm91Z2ggdGhlXG4gICAgICAgICAgICAgKiB0aGlyZCBpdGVyYXRpb24pXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gdCAvIGR1cmF0aW9uO1xuICAgICAgICAgICAgLy8gVE9ETyBwcm9ncmVzcyArPSBpdGVyYXRpb25TdGFydFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgaXRlcmF0aW9uICgwIGluZGV4ZWQpLiBGb3IgaW5zdGFuY2UgdGhlIGZsb29yIG9mXG4gICAgICAgICAgICAgKiAyLjUgaXMgMi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRJdGVyYXRpb24gPSBNYXRoLmZsb29yKHByb2dyZXNzKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBpdGVyYXRpb24gYnkgdGFraW5nIHRoZSByZW1haW5kZXJcbiAgICAgICAgICAgICAqIHNvIDIuNSBpcyAwLjUgdGhyb3VnaCBpdGVyYXRpb24gMlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgaXRlcmF0aW9uUHJvZ3Jlc3MgPSBwcm9ncmVzcyAlIDEuMDtcbiAgICAgICAgICAgIGlmICghaXRlcmF0aW9uUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPj0gMSkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgaXRlcmF0aW9uIHByb2dyZXNzIGlzIDEgd2UgY291bnQgdGhhdCBhcyB0aGUgZW5kXG4gICAgICAgICAgICAgKiBvZiB0aGUgcHJldmlvdXMgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpdGVyYXRpb25Qcm9ncmVzcyA9PT0gMSAmJiBjdXJyZW50SXRlcmF0aW9uLS07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldmVyc2UgcHJvZ3Jlc3MgaWYgd2UncmUgbm90IHJ1bm5pbmcgaW4gXCJub3JtYWxcIiBkaXJlY3Rpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgaXRlcmF0aW9uSXNPZGQgPSBjdXJyZW50SXRlcmF0aW9uICUgMjtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwicmV2ZXJzZVwiIHx8XG4gICAgICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gXCJhbHRlcm5hdGVcIiAmJiBpdGVyYXRpb25Jc09kZCkgfHxcbiAgICAgICAgICAgICAgICAoZGlyZWN0aW9uID09PSBcImFsdGVybmF0ZS1yZXZlcnNlXCIgJiYgIWl0ZXJhdGlvbklzT2RkKSkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzID0gMSAtIGl0ZXJhdGlvblByb2dyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcCA9IHQgPj0gdG90YWxEdXJhdGlvbiA/IDEgOiBNYXRoLm1pbihpdGVyYXRpb25Qcm9ncmVzcywgMSk7XG4gICAgICAgICAgICBjb25zdCBsYXRlc3QgPSBpbnRlcnBvbGF0ZSQxKGFuaW1hdGlvbkVhc2luZyhwKSk7XG4gICAgICAgICAgICBvdXRwdXQobGF0ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGlzQW5pbWF0aW9uRmluaXNoZWQgPSB0aGlzLnBsYXlTdGF0ZSA9PT0gXCJmaW5pc2hlZFwiIHx8IHQgPj0gdG90YWxEdXJhdGlvbiArIGVuZERlbGF5O1xuICAgICAgICAgICAgaWYgKGlzQW5pbWF0aW9uRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IFwiZmluaXNoZWRcIjtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLnJlc29sdmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIGxhdGVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnBsYXlTdGF0ZSAhPT0gXCJpZGxlXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lUmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudGljayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGxheSgpO1xuICAgIH1cbiAgICBwbGF5KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IFwicnVubmluZ1wiO1xuICAgICAgICBpZiAodGhpcy5wYXVzZVRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbm93IC0gKHRoaXMucGF1c2VUaW1lIC0gKChfYSA9IHRoaXMuc3RhcnRUaW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IG5vdztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbFRpbWVzdGFtcCA9IHRoaXMuc3RhcnRUaW1lO1xuICAgICAgICB0aGlzLnBhdXNlVGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudGljayk7XG4gICAgfVxuICAgIHBhdXNlKCkge1xuICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IFwicGF1c2VkXCI7XG4gICAgICAgIHRoaXMucGF1c2VUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgdGhpcy5wbGF5U3RhdGUgPSBcImZpbmlzaGVkXCI7XG4gICAgICAgIHRoaXMudGljaygwKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IFwiaWRsZVwiO1xuICAgICAgICBpZiAodGhpcy5mcmFtZVJlcXVlc3RJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmZyYW1lUmVxdWVzdElkKTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLnJlamVjdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgZmFsc2UpO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLnRpY2sodGhpcy5jYW5jZWxUaW1lc3RhbXApO1xuICAgIH1cbiAgICByZXZlcnNlKCkge1xuICAgICAgICB0aGlzLnJhdGUgKj0gLTE7XG4gICAgfVxuICAgIGNvbW1pdFN0eWxlcygpIHsgfVxuICAgIGdldCBjdXJyZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudDtcbiAgICB9XG4gICAgc2V0IGN1cnJlbnRUaW1lKHQpIHtcbiAgICAgICAgaWYgKHRoaXMucGF1c2VUaW1lIHx8IHRoaXMucmF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZVRpbWUgPSB0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHQgLyB0aGlzLnJhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHBsYXliYWNrUmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF0ZTtcbiAgICB9XG4gICAgc2V0IHBsYXliYWNrUmF0ZShyYXRlKSB7XG4gICAgICAgIHRoaXMucmF0ZSA9IHJhdGU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBBbmltYXRpb24gfTtcbiIsImltcG9ydCB7IHByb2dyZXNzLCBtaXgsIGZpbGxPZmZzZXQsIGRlZmF1bHRPZmZzZXQsIG5vb3BSZXR1cm4gfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IGdldEVhc2luZ0ZvclNlZ21lbnQgfSBmcm9tICcuL2Vhc2luZy5lcy5qcyc7XG5cbmNvbnN0IGNsYW1wUHJvZ3Jlc3MgPSAocCkgPT4gTWF0aC5taW4oMSwgTWF0aC5tYXgocCwgMCkpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUob3V0cHV0LCBpbnB1dCA9IGRlZmF1bHRPZmZzZXQob3V0cHV0Lmxlbmd0aCksIGVhc2luZyA9IG5vb3BSZXR1cm4pIHtcbiAgICBjb25zdCBsZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBpbnB1dCBsZW5ndGggaXMgbG93ZXIgdGhhbiB0aGUgb3V0cHV0IHdlXG4gICAgICogZmlsbCB0aGUgaW5wdXQgdG8gbWF0Y2guIFRoaXMgY3VycmVudGx5IGFzc3VtZXMgdGhlIGlucHV0XG4gICAgICogaXMgYW4gYW5pbWF0aW9uIHByb2dyZXNzIHZhbHVlIHNvIGlzIGEgZ29vZCBjYW5kaWRhdGUgZm9yXG4gICAgICogbW92aW5nIG91dHNpZGUgdGhlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0IHJlbWFpbmRlciA9IGxlbmd0aCAtIGlucHV0Lmxlbmd0aDtcbiAgICByZW1haW5kZXIgPiAwICYmIGZpbGxPZmZzZXQoaW5wdXQsIHJlbWFpbmRlcik7XG4gICAgcmV0dXJuICh0KSA9PiB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBsZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0IDwgaW5wdXRbaSArIDFdKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9ncmVzc0luUmFuZ2UgPSBjbGFtcFByb2dyZXNzKHByb2dyZXNzKGlucHV0W2ldLCBpbnB1dFtpICsgMV0sIHQpKTtcbiAgICAgICAgY29uc3Qgc2VnbWVudEVhc2luZyA9IGdldEVhc2luZ0ZvclNlZ21lbnQoZWFzaW5nLCBpKTtcbiAgICAgICAgcHJvZ3Jlc3NJblJhbmdlID0gc2VnbWVudEVhc2luZyhwcm9ncmVzc0luUmFuZ2UpO1xuICAgICAgICByZXR1cm4gbWl4KG91dHB1dFtpXSwgb3V0cHV0W2kgKyAxXSwgcHJvZ3Jlc3NJblJhbmdlKTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBpbnRlcnBvbGF0ZSB9O1xuIiwiY29uc3QgdGltZSA9IHtcbiAgICBtczogKHNlY29uZHMpID0+IHNlY29uZHMgKiAxMDAwLFxuICAgIHM6IChtaWxsaXNlY29uZHMpID0+IG1pbGxpc2Vjb25kcyAvIDEwMDAsXG59O1xuXG5leHBvcnQgeyB0aW1lIH07XG4iLCJpbXBvcnQgeyBpc0N1YmljQmV6aWVyIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5cbmNvbnN0IGNvbnZlcnRFYXNpbmcgPSAoZWFzaW5nKSA9PiBpc0N1YmljQmV6aWVyKGVhc2luZykgPyBjdWJpY0JlemllckFzU3RyaW5nKGVhc2luZykgOiBlYXNpbmc7XG5jb25zdCBjdWJpY0JlemllckFzU3RyaW5nID0gKFthLCBiLCBjLCBkXSkgPT4gYGN1YmljLWJlemllcigke2F9LCAke2J9LCAke2N9LCAke2R9KWA7XG5cbmV4cG9ydCB7IGNvbnZlcnRFYXNpbmcsIGN1YmljQmV6aWVyQXNTdHJpbmcgfTtcbiIsImNvbnN0IHRlc3RBbmltYXRpb24gPSAoa2V5ZnJhbWVzKSA9PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmFuaW1hdGUoa2V5ZnJhbWVzLCB7IGR1cmF0aW9uOiAwLjAwMSB9KTtcbmNvbnN0IGZlYXR1cmVUZXN0cyA9IHtcbiAgICBjc3NSZWdpc3RlclByb3BlcnR5OiAoKSA9PiB0eXBlb2YgQ1NTICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKENTUywgXCJyZWdpc3RlclByb3BlcnR5XCIpLFxuICAgIHdhYXBpOiAoKSA9PiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChFbGVtZW50LnByb3RvdHlwZSwgXCJhbmltYXRlXCIpLFxuICAgIHBhcnRpYWxLZXlmcmFtZXM6ICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRlc3RBbmltYXRpb24oeyBvcGFjaXR5OiBbMV0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGZpbmlzaGVkOiAoKSA9PiBCb29sZWFuKHRlc3RBbmltYXRpb24oeyBvcGFjaXR5OiBbMCwgMV0gfSkuZmluaXNoZWQpLFxufTtcbmNvbnN0IHJlc3VsdHMgPSB7fTtcbmNvbnN0IHN1cHBvcnRzID0ge307XG5mb3IgKGNvbnN0IGtleSBpbiBmZWF0dXJlVGVzdHMpIHtcbiAgICBzdXBwb3J0c1trZXldID0gKCkgPT4ge1xuICAgICAgICBpZiAocmVzdWx0c1trZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXN1bHRzW2tleV0gPSBmZWF0dXJlVGVzdHNba2V5XSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0c1trZXldO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IHN1cHBvcnRzIH07XG4iLCJmdW5jdGlvbiBoeWRyYXRlS2V5ZnJhbWVzKGtleWZyYW1lcywgcmVhZEluaXRpYWxWYWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5ZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChrZXlmcmFtZXNbaV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGtleWZyYW1lc1tpXSA9IGkgPyBrZXlmcmFtZXNbaSAtIDFdIDogcmVhZEluaXRpYWxWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlmcmFtZXM7XG59XG5jb25zdCBrZXlmcmFtZXNMaXN0ID0gKGtleWZyYW1lcykgPT4gQXJyYXkuaXNBcnJheShrZXlmcmFtZXMpID8ga2V5ZnJhbWVzIDogW2tleWZyYW1lc107XG5cbmV4cG9ydCB7IGh5ZHJhdGVLZXlmcmFtZXMsIGtleWZyYW1lc0xpc3QgfTtcbiIsImltcG9ydCB7IGlzVHJhbnNmb3JtLCBhc1RyYW5zZm9ybUNzc1ZhciwgdHJhbnNmb3JtQWxpYXMgfSBmcm9tICcuL3RyYW5zZm9ybXMuZXMuanMnO1xuXG5mdW5jdGlvbiBnZXRTdHlsZU5hbWUoa2V5KSB7XG4gICAgaWYgKHRyYW5zZm9ybUFsaWFzW2tleV0pXG4gICAgICAgIGtleSA9IHRyYW5zZm9ybUFsaWFzW2tleV07XG4gICAgcmV0dXJuIGlzVHJhbnNmb3JtKGtleSkgPyBhc1RyYW5zZm9ybUNzc1ZhcihrZXkpIDoga2V5O1xufVxuXG5leHBvcnQgeyBnZXRTdHlsZU5hbWUgfTtcbiIsImltcG9ydCB7IGlzQ3NzVmFyIH0gZnJvbSAnLi91dGlscy9jc3MtdmFyLmVzLmpzJztcbmltcG9ydCB7IGdldFN0eWxlTmFtZSB9IGZyb20gJy4vdXRpbHMvZ2V0LXN0eWxlLW5hbWUuZXMuanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtRGVmaW5pdGlvbnMgfSBmcm9tICcuL3V0aWxzL3RyYW5zZm9ybXMuZXMuanMnO1xuXG5jb25zdCBzdHlsZSA9IHtcbiAgICBnZXQ6IChlbGVtZW50LCBuYW1lKSA9PiB7XG4gICAgICAgIG5hbWUgPSBnZXRTdHlsZU5hbWUobmFtZSk7XG4gICAgICAgIGxldCB2YWx1ZSA9IGlzQ3NzVmFyKG5hbWUpXG4gICAgICAgICAgICA/IGVsZW1lbnQuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgICAgICAgOiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW25hbWVdO1xuICAgICAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gdHJhbnNmb3JtRGVmaW5pdGlvbnMuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgaWYgKGRlZmluaXRpb24pXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZpbml0aW9uLmluaXRpYWxWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IChlbGVtZW50LCBuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgICBuYW1lID0gZ2V0U3R5bGVOYW1lKG5hbWUpO1xuICAgICAgICBpZiAoaXNDc3NWYXIobmFtZSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IHN0eWxlIH07XG4iLCJmdW5jdGlvbiBzdG9wQW5pbWF0aW9uKGFuaW1hdGlvbiwgbmVlZHNDb21taXQgPSB0cnVlKSB7XG4gICAgaWYgKCFhbmltYXRpb24gfHwgYW5pbWF0aW9uLnBsYXlTdGF0ZSA9PT0gXCJmaW5pc2hlZFwiKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gU3VwcHJlc3MgZXJyb3IgdGhyb3duIGJ5IFdBQVBJXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbi5zdG9wKSB7XG4gICAgICAgICAgICBhbmltYXRpb24uc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmVlZHNDb21taXQgJiYgYW5pbWF0aW9uLmNvbW1pdFN0eWxlcygpO1xuICAgICAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH1cbn1cblxuZXhwb3J0IHsgc3RvcEFuaW1hdGlvbiB9O1xuIiwiaW1wb3J0IHsgZ2V0QW5pbWF0aW9uRGF0YSwgZ2V0TW90aW9uVmFsdWUgfSBmcm9tICcuL2RhdGEuZXMuanMnO1xuaW1wb3J0IHsgaXNDc3NWYXIsIHJlZ2lzdGVyQ3NzVmFyaWFibGUgfSBmcm9tICcuL3V0aWxzL2Nzcy12YXIuZXMuanMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uIH0gZnJvbSAnQG1vdGlvbm9uZS9hbmltYXRpb24nO1xuaW1wb3J0IHsgZGVmYXVsdHMsIGlzRWFzaW5nR2VuZXJhdG9yLCBpc051bWJlciwgdGltZSwgaXNFYXNpbmdMaXN0LCBub29wIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyBpc1RyYW5zZm9ybSwgYWRkVHJhbnNmb3JtVG9FbGVtZW50LCB0cmFuc2Zvcm1EZWZpbml0aW9ucyB9IGZyb20gJy4vdXRpbHMvdHJhbnNmb3Jtcy5lcy5qcyc7XG5pbXBvcnQgeyBjb252ZXJ0RWFzaW5nIH0gZnJvbSAnLi91dGlscy9lYXNpbmcuZXMuanMnO1xuaW1wb3J0IHsgc3VwcG9ydHMgfSBmcm9tICcuL3V0aWxzL2ZlYXR1cmUtZGV0ZWN0aW9uLmVzLmpzJztcbmltcG9ydCB7IGh5ZHJhdGVLZXlmcmFtZXMsIGtleWZyYW1lc0xpc3QgfSBmcm9tICcuL3V0aWxzL2tleWZyYW1lcy5lcy5qcyc7XG5pbXBvcnQgeyBzdHlsZSB9IGZyb20gJy4vc3R5bGUuZXMuanMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVOYW1lIH0gZnJvbSAnLi91dGlscy9nZXQtc3R5bGUtbmFtZS5lcy5qcyc7XG5pbXBvcnQgeyBzdG9wQW5pbWF0aW9uIH0gZnJvbSAnLi91dGlscy9zdG9wLWFuaW1hdGlvbi5lcy5qcyc7XG5cbmZ1bmN0aW9uIGdldERldlRvb2xzUmVjb3JkKCkge1xuICAgIHJldHVybiB3aW5kb3cuX19NT1RJT05fREVWX1RPT0xTX1JFQ09SRDtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVTdHlsZShlbGVtZW50LCBrZXksIGtleWZyYW1lc0RlZmluaXRpb24sIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHJlY29yZCA9IGdldERldlRvb2xzUmVjb3JkKCk7XG4gICAgY29uc3QgaXNSZWNvcmRpbmcgPSBvcHRpb25zLnJlY29yZCAhPT0gZmFsc2UgJiYgcmVjb3JkO1xuICAgIGxldCBhbmltYXRpb247XG4gICAgbGV0IHsgZHVyYXRpb24gPSBkZWZhdWx0cy5kdXJhdGlvbiwgZGVsYXkgPSBkZWZhdWx0cy5kZWxheSwgZW5kRGVsYXkgPSBkZWZhdWx0cy5lbmREZWxheSwgcmVwZWF0ID0gZGVmYXVsdHMucmVwZWF0LCBlYXNpbmcgPSBkZWZhdWx0cy5lYXNpbmcsIGRpcmVjdGlvbiwgb2Zmc2V0LCBhbGxvd1dlYmtpdEFjY2VsZXJhdGlvbiA9IGZhbHNlLCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBkYXRhID0gZ2V0QW5pbWF0aW9uRGF0YShlbGVtZW50KTtcbiAgICBsZXQgY2FuQW5pbWF0ZU5hdGl2ZWx5ID0gc3VwcG9ydHMud2FhcGkoKTtcbiAgICBjb25zdCB2YWx1ZUlzVHJhbnNmb3JtID0gaXNUcmFuc2Zvcm0oa2V5KTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGlzIGFuIGluZGl2aWR1YWwgdHJhbnNmb3JtLCB3ZSBuZWVkIHRvIG1hcCBpdHNcbiAgICAgKiBrZXkgdG8gYSBDU1MgdmFyaWFibGUgYW5kIHVwZGF0ZSB0aGUgZWxlbWVudCdzIHRyYW5zZm9ybSBzdHlsZVxuICAgICAqL1xuICAgIHZhbHVlSXNUcmFuc2Zvcm0gJiYgYWRkVHJhbnNmb3JtVG9FbGVtZW50KGVsZW1lbnQsIGtleSk7XG4gICAgY29uc3QgbmFtZSA9IGdldFN0eWxlTmFtZShrZXkpO1xuICAgIGNvbnN0IG1vdGlvblZhbHVlID0gZ2V0TW90aW9uVmFsdWUoZGF0YS52YWx1ZXMsIG5hbWUpO1xuICAgIC8qKlxuICAgICAqIEdldCBkZWZpbml0aW9uIG9mIHZhbHVlLCB0aGlzIHdpbGwgYmUgdXNlZCB0byBjb252ZXJ0IG51bWVyaWNhbFxuICAgICAqIGtleWZyYW1lcyBpbnRvIHRoZSBkZWZhdWx0IHZhbHVlIHR5cGUuXG4gICAgICovXG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IHRyYW5zZm9ybURlZmluaXRpb25zLmdldChuYW1lKTtcbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjdXJyZW50IGFuaW1hdGlvbiwgaWYgYW55LiBCZWNhdXNlIHRoaXMgd2lsbCB0cmlnZ2VyXG4gICAgICogY29tbWl0U3R5bGVzIChET00gd3JpdGVzKSBhbmQgd2UgbWlnaHQgbGF0ZXIgdHJpZ2dlciBET00gcmVhZHMsXG4gICAgICogdGhpcyBpcyBmaXJlZCBub3cgYW5kIHdlIHJldHVybiBhIGZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlXG4gICAgICogdGhlIGFjdHVhbCBhbmltYXRpb24gdGhhdCBjYW4gZ2V0IGNhbGxlZCBpbiBiYXRjaCxcbiAgICAgKi9cbiAgICBzdG9wQW5pbWF0aW9uKG1vdGlvblZhbHVlLmFuaW1hdGlvbiwgIShpc0Vhc2luZ0dlbmVyYXRvcihlYXNpbmcpICYmIG1vdGlvblZhbHVlLmdlbmVyYXRvcikgJiZcbiAgICAgICAgb3B0aW9ucy5yZWNvcmQgIT09IGZhbHNlKTtcbiAgICAvKipcbiAgICAgKiBCYXRjaGFibGUgZmFjdG9yeSBmdW5jdGlvbiBjb250YWluaW5nIGFsbCBET00gcmVhZHMuXG4gICAgICovXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVhZEluaXRpYWxWYWx1ZSA9ICgpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IHN0eWxlLmdldChlbGVtZW50LCBuYW1lKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGVmaW5pdGlvbiA9PT0gbnVsbCB8fCBkZWZpbml0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZpbml0aW9uLmluaXRpYWxWYWx1ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDsgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcGxhY2UgbnVsbCB2YWx1ZXMgd2l0aCB0aGUgcHJldmlvdXMga2V5ZnJhbWUgdmFsdWUsIG9yIHJlYWRcbiAgICAgICAgICogaXQgZnJvbSB0aGUgRE9NIGlmIGl0J3MgdGhlIGZpcnN0IGtleWZyYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGtleWZyYW1lcyA9IGh5ZHJhdGVLZXlmcmFtZXMoa2V5ZnJhbWVzTGlzdChrZXlmcmFtZXNEZWZpbml0aW9uKSwgcmVhZEluaXRpYWxWYWx1ZSk7XG4gICAgICAgIGlmIChpc0Vhc2luZ0dlbmVyYXRvcihlYXNpbmcpKSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b20gPSBlYXNpbmcuY3JlYXRlQW5pbWF0aW9uKGtleWZyYW1lcywgcmVhZEluaXRpYWxWYWx1ZSwgdmFsdWVJc1RyYW5zZm9ybSwgbmFtZSwgbW90aW9uVmFsdWUpO1xuICAgICAgICAgICAgZWFzaW5nID0gY3VzdG9tLmVhc2luZztcbiAgICAgICAgICAgIGlmIChjdXN0b20ua2V5ZnJhbWVzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAga2V5ZnJhbWVzID0gY3VzdG9tLmtleWZyYW1lcztcbiAgICAgICAgICAgIGlmIChjdXN0b20uZHVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IGN1c3RvbS5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyBpcyBhIENTUyB2YXJpYWJsZSB3ZSBuZWVkIHRvIHJlZ2lzdGVyIGl0IHdpdGggdGhlIGJyb3dzZXJcbiAgICAgICAgICogYmVmb3JlIGl0IGNhbiBiZSBhbmltYXRlZCBuYXRpdmVseS4gV2UgYWxzbyBzZXQgaXQgd2l0aCBzZXRQcm9wZXJ0eVxuICAgICAgICAgKiByYXRoZXIgdGhhbiBkaXJlY3RseSBvbnRvIHRoZSBlbGVtZW50LnN0eWxlIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0Nzc1ZhcihuYW1lKSkge1xuICAgICAgICAgICAgaWYgKHN1cHBvcnRzLmNzc1JlZ2lzdGVyUHJvcGVydHkoKSkge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ3NzVmFyaWFibGUobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYW5BbmltYXRlTmF0aXZlbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UgY2FuIGFuaW1hdGUgdGhpcyB2YWx1ZSB3aXRoIFdBQVBJLCBkbyBzby4gQ3VycmVudGx5IHRoaXMgb25seVxuICAgICAgICAgKiBmZWF0dXJlIGRldGVjdHMgQ1NTLnJlZ2lzdGVyUHJvcGVydHkgYnV0IGNvdWxkIGNoZWNrIFdBQVBJIHRvby5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChjYW5BbmltYXRlTmF0aXZlbHkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydCBudW1iZXJzIHRvIGRlZmF1bHQgdmFsdWUgdHlwZXMuIEN1cnJlbnRseSB0aGlzIG9ubHkgc3VwcG9ydHNcbiAgICAgICAgICAgICAqIHRyYW5zZm9ybXMgYnV0IGl0IGNvdWxkIGFsc28gc3VwcG9ydCBvdGhlciB2YWx1ZSB0eXBlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMgPSBrZXlmcmFtZXMubWFwKCh2YWx1ZSkgPT4gaXNOdW1iZXIodmFsdWUpID8gZGVmaW5pdGlvbi50b0RlZmF1bHRVbml0KHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBwYXJ0aWFsL2ltcGxpY2l0IGtleWZyYW1lcyB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAgKiBleHBsaWNpdGx5IHByb3ZpZGUgb25lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoa2V5ZnJhbWVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgICAgICAgICghc3VwcG9ydHMucGFydGlhbEtleWZyYW1lcygpIHx8IGlzUmVjb3JkaW5nKSkge1xuICAgICAgICAgICAgICAgIGtleWZyYW1lcy51bnNoaWZ0KHJlYWRJbml0aWFsVmFsdWUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGRlbGF5OiB0aW1lLm1zKGRlbGF5KSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGltZS5tcyhkdXJhdGlvbiksXG4gICAgICAgICAgICAgICAgZW5kRGVsYXk6IHRpbWUubXMoZW5kRGVsYXkpLFxuICAgICAgICAgICAgICAgIGVhc2luZzogIWlzRWFzaW5nTGlzdChlYXNpbmcpID8gY29udmVydEVhc2luZyhlYXNpbmcpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICBpdGVyYXRpb25zOiByZXBlYXQgKyAxLFxuICAgICAgICAgICAgICAgIGZpbGw6IFwiYm90aFwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFuaW1hdGlvbiA9IGVsZW1lbnQuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgW25hbWVdOiBrZXlmcmFtZXMsXG4gICAgICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgICAgIGVhc2luZzogaXNFYXNpbmdMaXN0KGVhc2luZykgPyBlYXNpbmcubWFwKGNvbnZlcnRFYXNpbmcpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSwgYW5pbWF0aW9uT3B0aW9ucyk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBvbHlmaWxsIGZpbmlzaGVkIFByb21pc2UgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IGl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLmZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLmZpbmlzaGVkID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24ub25maW5pc2ggPSByZXNvbHZlO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24ub25jYW5jZWwgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBrZXlmcmFtZXNba2V5ZnJhbWVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgYW5pbWF0aW9uLmZpbmlzaGVkXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHN0eWxlcyB0byB0YXJnZXRcbiAgICAgICAgICAgICAgICBzdHlsZS5zZXQoZWxlbWVudCwgbmFtZSwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgZmlsbCBtb2RlcyBkb24ndCBwZXJzaXN0XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgZm9yY2VzIFdlYmtpdCB0byBydW4gYW5pbWF0aW9ucyBvbiB0aGUgbWFpbiB0aHJlYWQgYnkgZXhwbG9pdGluZ1xuICAgICAgICAgICAgICogdGhpcyBjb25kaXRpb246XG4gICAgICAgICAgICAgKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3dlYmtpdC90cnVuay9Tb3VyY2UvV2ViQ29yZS9wbGF0Zm9ybS9ncmFwaGljcy9jYS9HcmFwaGljc0xheWVyQ0EuY3BwP3Jldj0yODEyMzgjTDEwOTlcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUaGlzIGZpeGVzIFdlYmtpdCdzIHRpbWluZyBidWdzLCBsaWtlIGFjY2VsZXJhdGVkIGFuaW1hdGlvbnMgZmFsbGluZ1xuICAgICAgICAgICAgICogb3V0IG9mIHN5bmMgd2l0aCBtYWluIHRocmVhZCBhbmltYXRpb25zIGFuZCBtYXNzaXZlIGRlbGF5cyBpbiBzdGFydGluZ1xuICAgICAgICAgICAgICogYWNjZWxlcmF0ZWQgYW5pbWF0aW9ucyBpbiBXS1dlYlZpZXcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghYWxsb3dXZWJraXRBY2NlbGVyYXRpb24pXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXliYWNrUmF0ZSA9IDEuMDAwMDAxO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBjYW4ndCBhbmltYXRlIHRoZSB2YWx1ZSBuYXRpdmVseSB0aGVuIHdlIGNhbiBmYWxsYmFjayB0byB0aGUgbnVtYmVycy1vbmx5XG4gICAgICAgICAgICAgKiBwb2x5ZmlsbCBmb3IgdHJhbnNmb3Jtcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlSXNUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgYW55IGtleWZyYW1lIGlzIGEgc3RyaW5nIChiZWNhdXNlIHdlIG1lYXN1cmVkIGl0IGZyb20gdGhlIERPTSksIHdlIG5lZWQgdG8gY29udmVydFxuICAgICAgICAgICAgICogaXQgaW50byBhIG51bWJlciBiZWZvcmUgcGFzc2luZyB0byB0aGUgQW5pbWF0aW9uIHBvbHlmaWxsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBrZXlmcmFtZXMgPSBrZXlmcmFtZXMubWFwKCh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSBrZXlmcmFtZSwgd2UgbmVlZCB0byBjcmVhdGUgYW4gaW5pdGlhbCBrZXlmcmFtZSBieSByZWFkaW5nXG4gICAgICAgICAgICAgKiB0aGUgY3VycmVudCB2YWx1ZSBmcm9tIHRoZSBET00uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChrZXlmcmFtZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAga2V5ZnJhbWVzLnVuc2hpZnQocGFyc2VGbG9hdChyZWFkSW5pdGlhbFZhbHVlKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlbmRlciA9IChsYXRlc3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbilcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0ID0gZGVmaW5pdGlvbi50b0RlZmF1bHRVbml0KGxhdGVzdCk7XG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0KGVsZW1lbnQsIG5hbWUsIGxhdGVzdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbihyZW5kZXIsIGtleWZyYW1lcywgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBlYXNpbmcgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0ga2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHN0eWxlLnNldChlbGVtZW50LCBuYW1lLCBkZWZpbml0aW9uICYmIGlzTnVtYmVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IGRlZmluaXRpb24udG9EZWZhdWx0VW5pdCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgOiB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlY29yZGluZykge1xuICAgICAgICAgICAgcmVjb3JkKGVsZW1lbnQsIGtleSwga2V5ZnJhbWVzLCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgICAgICAgICAgIGVhc2luZyxcbiAgICAgICAgICAgICAgICByZXBlYXQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgfSwgXCJtb3Rpb24tb25lXCIpO1xuICAgICAgICB9XG4gICAgICAgIG1vdGlvblZhbHVlLnNldEFuaW1hdGlvbihhbmltYXRpb24pO1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGFuaW1hdGVTdHlsZSB9O1xuIiwiY29uc3QgZ2V0T3B0aW9ucyA9IChvcHRpb25zLCBrZXkpID0+IFxuLyoqXG4gKiBUT0RPOiBNYWtlIHRlc3QgZm9yIHRoaXNcbiAqIEFsd2F5cyByZXR1cm4gYSBuZXcgb2JqZWN0IG90aGVyd2lzZSBkZWxheSBpcyBvdmVyd3JpdHRlbiBieSByZXN1bHRzIG9mIHN0YWdnZXJcbiAqIGFuZCB0aGlzIHJlc3VsdHMgaW4gbm8gc3RhZ2dlclxuICovXG5vcHRpb25zW2tleV0gPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCBvcHRpb25zW2tleV0pIDogT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG5cbmV4cG9ydCB7IGdldE9wdGlvbnMgfTtcbiIsImZ1bmN0aW9uIHJlc29sdmVFbGVtZW50cyhlbGVtZW50cywgc2VsZWN0b3JDYWNoZSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChzZWxlY3RvckNhY2hlKSB7XG4gICAgICAgICAgICAoX2EgPSBzZWxlY3RvckNhY2hlW2VsZW1lbnRzXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHNlbGVjdG9yQ2FjaGVbZWxlbWVudHNdID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50cykpO1xuICAgICAgICAgICAgZWxlbWVudHMgPSBzZWxlY3RvckNhY2hlW2VsZW1lbnRzXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZWxlbWVudHMgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGFuIGVtcHR5IGFycmF5XG4gICAgICovXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudHMgfHwgW10pO1xufVxuXG5leHBvcnQgeyByZXNvbHZlRWxlbWVudHMgfTtcbiIsImltcG9ydCB7IGRlZmF1bHRzLCBub29wLCB0aW1lIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyBzdG9wQW5pbWF0aW9uIH0gZnJvbSAnLi9zdG9wLWFuaW1hdGlvbi5lcy5qcyc7XG5cbmNvbnN0IGNyZWF0ZUFuaW1hdGlvbiA9IChmYWN0b3J5KSA9PiBmYWN0b3J5KCk7XG5jb25zdCB3cmFwQW5pbWF0aW9uV2l0aENvbnRyb2xzID0gKGFuaW1hdGlvbkZhY3RvcnksIGR1cmF0aW9uID0gZGVmYXVsdHMuZHVyYXRpb24pID0+IG5ldyBQcm94eSh7XG4gICAgYW5pbWF0aW9uczogYW5pbWF0aW9uRmFjdG9yeS5tYXAoY3JlYXRlQW5pbWF0aW9uKS5maWx0ZXIoQm9vbGVhbiksXG4gICAgZHVyYXRpb24sXG59LCBjb250cm9scyk7XG4vKipcbiAqIFRPRE86XG4gKiBDdXJyZW50bHkgdGhpcyByZXR1cm5zIHRoZSBmaXJzdCBhbmltYXRpb24sIGlkZWFsbHkgaXQgd291bGQgcmV0dXJuXG4gKiB0aGUgZmlyc3QgYWN0aXZlIGFuaW1hdGlvbi5cbiAqL1xuY29uc3QgZ2V0QWN0aXZlQW5pbWF0aW9uID0gKHN0YXRlKSA9PiBzdGF0ZS5hbmltYXRpb25zWzBdO1xuY29uc3QgY29udHJvbHMgPSB7XG4gICAgZ2V0OiAodGFyZ2V0LCBrZXkpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aXZlQW5pbWF0aW9uID0gZ2V0QWN0aXZlQW5pbWF0aW9uKHRhcmdldCk7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiZHVyYXRpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmR1cmF0aW9uO1xuICAgICAgICAgICAgY2FzZSBcImN1cnJlbnRUaW1lXCI6XG4gICAgICAgICAgICAgICAgbGV0IHRpbWUgPSAoYWN0aXZlQW5pbWF0aW9uID09PSBudWxsIHx8IGFjdGl2ZUFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWN0aXZlQW5pbWF0aW9uW2tleV0pIHx8IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbWUgPyB0aW1lIC8gMTAwMCA6IDA7XG4gICAgICAgICAgICBjYXNlIFwicGxheWJhY2tSYXRlXCI6XG4gICAgICAgICAgICBjYXNlIFwicGxheVN0YXRlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUFuaW1hdGlvbiA9PT0gbnVsbCB8fCBhY3RpdmVBbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFjdGl2ZUFuaW1hdGlvbltrZXldO1xuICAgICAgICAgICAgY2FzZSBcImZpbmlzaGVkXCI6XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmZpbmlzaGVkID0gUHJvbWlzZS5hbGwodGFyZ2V0LmFuaW1hdGlvbnMubWFwKHNlbGVjdEZpbmlzaGVkKSkuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuZmluaXNoZWQ7XG4gICAgICAgICAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB0YXJnZXQuYW5pbWF0aW9ucy5mb3JFYWNoKChhbmltYXRpb24pID0+IHN0b3BBbmltYXRpb24oYW5pbWF0aW9uKSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGFjdGl2ZUFuaW1hdGlvbiA9PT0gbnVsbCB8fCBhY3RpdmVBbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFjdGl2ZUFuaW1hdGlvbltrZXldKSA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6ICgpID0+IHRhcmdldC5hbmltYXRpb25zLmZvckVhY2goKGFuaW1hdGlvbikgPT4gYW5pbWF0aW9uW2tleV0oKSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldDogKHRhcmdldCwga2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSBcImN1cnJlbnRUaW1lXCI6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aW1lLm1zKHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgXCJjdXJyZW50VGltZVwiOlxuICAgICAgICAgICAgY2FzZSBcInBsYXliYWNrUmF0ZVwiOlxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0LmFuaW1hdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvbnNbaV1ba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbn07XG5jb25zdCBzZWxlY3RGaW5pc2hlZCA9IChhbmltYXRpb24pID0+IGFuaW1hdGlvbi5maW5pc2hlZDtcblxuZXhwb3J0IHsgY29udHJvbHMsIHdyYXBBbmltYXRpb25XaXRoQ29udHJvbHMgfTtcbiIsImltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyBnZXRFYXNpbmdGdW5jdGlvbiB9IGZyb20gJ0Btb3Rpb25vbmUvYW5pbWF0aW9uJztcblxuZnVuY3Rpb24gc3RhZ2dlcihkdXJhdGlvbiA9IDAuMSwgeyBzdGFydCA9IDAsIGZyb20gPSAwLCBlYXNpbmcgfSA9IHt9KSB7XG4gICAgcmV0dXJuIChpLCB0b3RhbCkgPT4ge1xuICAgICAgICBjb25zdCBmcm9tSW5kZXggPSBpc051bWJlcihmcm9tKSA/IGZyb20gOiBnZXRGcm9tSW5kZXgoZnJvbSwgdG90YWwpO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguYWJzKGZyb21JbmRleCAtIGkpO1xuICAgICAgICBsZXQgZGVsYXkgPSBkdXJhdGlvbiAqIGRpc3RhbmNlO1xuICAgICAgICBpZiAoZWFzaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhEZWxheSA9IHRvdGFsICogZHVyYXRpb247XG4gICAgICAgICAgICBjb25zdCBlYXNpbmdGdW5jdGlvbiA9IGdldEVhc2luZ0Z1bmN0aW9uKGVhc2luZyk7XG4gICAgICAgICAgICBkZWxheSA9IGVhc2luZ0Z1bmN0aW9uKGRlbGF5IC8gbWF4RGVsYXkpICogbWF4RGVsYXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgZGVsYXk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldEZyb21JbmRleChmcm9tLCB0b3RhbCkge1xuICAgIGlmIChmcm9tID09PSBcImZpcnN0XCIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSB0b3RhbCAtIDE7XG4gICAgICAgIHJldHVybiBmcm9tID09PSBcImxhc3RcIiA/IGxhc3RJbmRleCA6IGxhc3RJbmRleCAvIDI7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbihvcHRpb24sIGksIHRvdGFsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvcHRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IG9wdGlvbihpLCB0b3RhbClcbiAgICAgICAgOiBvcHRpb247XG59XG5cbmV4cG9ydCB7IGdldEZyb21JbmRleCwgcmVzb2x2ZU9wdGlvbiwgc3RhZ2dlciB9O1xuIiwiaW1wb3J0IHsgYW5pbWF0ZVN0eWxlIH0gZnJvbSAnLi9hbmltYXRlLXN0eWxlLmVzLmpzJztcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tICcuL3V0aWxzL29wdGlvbnMuZXMuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVsZW1lbnRzIH0gZnJvbSAnLi4vdXRpbHMvcmVzb2x2ZS1lbGVtZW50cy5lcy5qcyc7XG5pbXBvcnQgeyB3cmFwQW5pbWF0aW9uV2l0aENvbnRyb2xzIH0gZnJvbSAnLi91dGlscy9jb250cm9scy5lcy5qcyc7XG5pbXBvcnQgeyByZXNvbHZlT3B0aW9uIH0gZnJvbSAnLi4vdXRpbHMvc3RhZ2dlci5lcy5qcyc7XG5cbmZ1bmN0aW9uIGFuaW1hdGUoZWxlbWVudHMsIGtleWZyYW1lcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgZWxlbWVudHMgPSByZXNvbHZlRWxlbWVudHMoZWxlbWVudHMpO1xuICAgIGNvbnN0IG51bUVsZW1lbnRzID0gZWxlbWVudHMubGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgc3RhcnQgbmV3IGFuaW1hdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdCBhbmltYXRpb25GYWN0b3JpZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpKyspIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlT3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucywga2V5KTtcbiAgICAgICAgICAgIHZhbHVlT3B0aW9ucy5kZWxheSA9IHJlc29sdmVPcHRpb24odmFsdWVPcHRpb25zLmRlbGF5LCBpLCBudW1FbGVtZW50cyk7XG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRlU3R5bGUoZWxlbWVudCwga2V5LCBrZXlmcmFtZXNba2V5XSwgdmFsdWVPcHRpb25zKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZhY3Rvcmllcy5wdXNoKGFuaW1hdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdyYXBBbmltYXRpb25XaXRoQ29udHJvbHMoYW5pbWF0aW9uRmFjdG9yaWVzLCBcbiAgICAvKipcbiAgICAgKiBUT0RPOlxuICAgICAqIElmIGVhc2luZyBpcyBzZXQgdG8gc3ByaW5nIG9yIGdsaWRlLCBkdXJhdGlvbiB3aWxsIGJlIGR5bmFtaWNhbGx5XG4gICAgICogZ2VuZXJhdGVkLiBJZGVhbGx5IHdlIHdvdWxkIGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoaXMgZnJvbVxuICAgICAqIGFuaW1hdGlvbi5lZmZlY3QuZ2V0Q29tcHV0ZWRUaW1pbmcoKS5kdXJhdGlvbiBidXQgdGhpcyBpc24ndFxuICAgICAqIHN1cHBvcnRlZCBpbiBpT1MxMyBvciBvdXIgbnVtYmVyIHBvbHlmaWxsLiBQZXJoYXBzIGl0J3MgcG9zc2libGVcbiAgICAgKiB0byBQcm94eSBhbmltYXRpb25zIHJldHVybmVkIGZyb20gYW5pbWF0ZVN0eWxlIHRoYXQgaGFzIGR1cmF0aW9uXG4gICAgICogYXMgYSBnZXR0ZXIuXG4gICAgICovXG4gICAgb3B0aW9ucy5kdXJhdGlvbik7XG59XG5cbmV4cG9ydCB7IGFuaW1hdGUgfTtcbiIsImltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5cbmZ1bmN0aW9uIGNhbGNOZXh0VGltZShjdXJyZW50LCBuZXh0LCBwcmV2LCBsYWJlbHMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGlzTnVtYmVyKG5leHQpKSB7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgICBlbHNlIGlmIChuZXh0LnN0YXJ0c1dpdGgoXCItXCIpIHx8IG5leHQuc3RhcnRzV2l0aChcIitcIikpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIGN1cnJlbnQgKyBwYXJzZUZsb2F0KG5leHQpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmV4dCA9PT0gXCI8XCIpIHtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gKF9hID0gbGFiZWxzLmdldChuZXh0KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3VycmVudDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGNhbGNOZXh0VGltZSB9O1xuIiwiaW1wb3J0IHsgbWl4LCByZW1vdmVJdGVtIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyBnZXRFYXNpbmdGb3JTZWdtZW50IH0gZnJvbSAnQG1vdGlvbm9uZS9hbmltYXRpb24nO1xuXG5mdW5jdGlvbiBlcmFzZUtleWZyYW1lcyhzZXF1ZW5jZSwgc3RhcnRUaW1lLCBlbmRUaW1lKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXF1ZW5jZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXlmcmFtZSA9IHNlcXVlbmNlW2ldO1xuICAgICAgICBpZiAoa2V5ZnJhbWUuYXQgPiBzdGFydFRpbWUgJiYga2V5ZnJhbWUuYXQgPCBlbmRUaW1lKSB7XG4gICAgICAgICAgICByZW1vdmVJdGVtKHNlcXVlbmNlLCBrZXlmcmFtZSk7XG4gICAgICAgICAgICAvLyBJZiB3ZSByZW1vdmUgdGhpcyBpdGVtIHdlIGhhdmUgdG8gcHVzaCB0aGUgcG9pbnRlciBiYWNrIG9uZVxuICAgICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkS2V5ZnJhbWVzKHNlcXVlbmNlLCBrZXlmcmFtZXMsIGVhc2luZywgb2Zmc2V0LCBzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICAvKipcbiAgICAgKiBFcmFzZSBldmVyeSBleGlzdGluZyB2YWx1ZSBiZXR3ZWVuIGN1cnJlbnRUaW1lIGFuZCB0YXJnZXRUaW1lLFxuICAgICAqIHRoaXMgd2lsbCBlc3NlbnRpYWxseSBzcGxpY2UgdGhpcyB0aW1lbGluZSBpbnRvIGFueSBjdXJyZW50bHlcbiAgICAgKiBkZWZpbmVkIG9uZXMuXG4gICAgICovXG4gICAgZXJhc2VLZXlmcmFtZXMoc2VxdWVuY2UsIHN0YXJ0VGltZSwgZW5kVGltZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VxdWVuY2UucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZToga2V5ZnJhbWVzW2ldLFxuICAgICAgICAgICAgYXQ6IG1peChzdGFydFRpbWUsIGVuZFRpbWUsIG9mZnNldFtpXSksXG4gICAgICAgICAgICBlYXNpbmc6IGdldEVhc2luZ0ZvclNlZ21lbnQoZWFzaW5nLCBpKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBhZGRLZXlmcmFtZXMsIGVyYXNlS2V5ZnJhbWVzIH07XG4iLCJmdW5jdGlvbiBjb21wYXJlQnlUaW1lKGEsIGIpIHtcbiAgICBpZiAoYS5hdCA9PT0gYi5hdCkge1xuICAgICAgICByZXR1cm4gYS52YWx1ZSA9PT0gbnVsbCA/IDEgOiAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmF0IC0gYi5hdDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGNvbXBhcmVCeVRpbWUgfTtcbiIsImltcG9ydCB7IF9fcmVzdCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGRlZmF1bHRzLCBpc0Vhc2luZ0dlbmVyYXRvciwgZGVmYXVsdE9mZnNldCwgZmlsbE9mZnNldCwgcHJvZ3Jlc3MgfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IHJlc29sdmVPcHRpb24gfSBmcm9tICcuLi91dGlscy9zdGFnZ2VyLmVzLmpzJztcbmltcG9ydCB7IGFuaW1hdGVTdHlsZSB9IGZyb20gJy4uL2FuaW1hdGUvYW5pbWF0ZS1zdHlsZS5lcy5qcyc7XG5pbXBvcnQgeyB3cmFwQW5pbWF0aW9uV2l0aENvbnRyb2xzIH0gZnJvbSAnLi4vYW5pbWF0ZS91dGlscy9jb250cm9scy5lcy5qcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXNMaXN0IH0gZnJvbSAnLi4vYW5pbWF0ZS91dGlscy9rZXlmcmFtZXMuZXMuanMnO1xuaW1wb3J0IHsgZ2V0T3B0aW9ucyB9IGZyb20gJy4uL2FuaW1hdGUvdXRpbHMvb3B0aW9ucy5lcy5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRWxlbWVudHMgfSBmcm9tICcuLi91dGlscy9yZXNvbHZlLWVsZW1lbnRzLmVzLmpzJztcbmltcG9ydCB7IGlzVHJhbnNmb3JtIH0gZnJvbSAnLi4vYW5pbWF0ZS91dGlscy90cmFuc2Zvcm1zLmVzLmpzJztcbmltcG9ydCB7IGNhbGNOZXh0VGltZSB9IGZyb20gJy4vdXRpbHMvY2FsYy10aW1lLmVzLmpzJztcbmltcG9ydCB7IGFkZEtleWZyYW1lcyB9IGZyb20gJy4vdXRpbHMvZWRpdC5lcy5qcyc7XG5pbXBvcnQgeyBjb21wYXJlQnlUaW1lIH0gZnJvbSAnLi91dGlscy9zb3J0LmVzLmpzJztcblxuZnVuY3Rpb24gdGltZWxpbmUoZGVmaW5pdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFuaW1hdGlvbkRlZmluaXRpb25zID0gY3JlYXRlQW5pbWF0aW9uc0Zyb21UaW1lbGluZShkZWZpbml0aW9uLCBvcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHN0YXJ0IGFuaW1hdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdCBhbmltYXRpb25GYWN0b3JpZXMgPSBhbmltYXRpb25EZWZpbml0aW9uc1xuICAgICAgICAubWFwKChkZWZpbml0aW9uKSA9PiBhbmltYXRlU3R5bGUoLi4uZGVmaW5pdGlvbikpXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgcmV0dXJuIHdyYXBBbmltYXRpb25XaXRoQ29udHJvbHMoYW5pbWF0aW9uRmFjdG9yaWVzLCBcbiAgICAvLyBHZXQgdGhlIGR1cmF0aW9uIGZyb20gdGhlIGZpcnN0IGFuaW1hdGlvbiBkZWZpbml0aW9uXG4gICAgKF9hID0gYW5pbWF0aW9uRGVmaW5pdGlvbnNbMF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVszXS5kdXJhdGlvbik7XG59XG5mdW5jdGlvbiBjcmVhdGVBbmltYXRpb25zRnJvbVRpbWVsaW5lKGRlZmluaXRpb24sIF9hID0ge30pIHtcbiAgICB2YXIgeyBkZWZhdWx0T3B0aW9ucyA9IHt9IH0gPSBfYSwgdGltZWxpbmVPcHRpb25zID0gX19yZXN0KF9hLCBbXCJkZWZhdWx0T3B0aW9uc1wiXSk7XG4gICAgY29uc3QgYW5pbWF0aW9uRGVmaW5pdGlvbnMgPSBbXTtcbiAgICBjb25zdCBlbGVtZW50U2VxdWVuY2VzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGVsZW1lbnRDYWNoZSA9IHt9O1xuICAgIGNvbnN0IHRpbWVMYWJlbHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IHByZXZUaW1lID0gMDtcbiAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuICAgIGxldCB0b3RhbER1cmF0aW9uID0gMDtcbiAgICAvKipcbiAgICAgKiBCdWlsZCB0aGUgdGltZWxpbmUgYnkgbWFwcGluZyBvdmVyIHRoZSBkZWZpbml0aW9uIGFycmF5IGFuZCBjb252ZXJ0aW5nXG4gICAgICogdGhlIGRlZmluaXRpb25zIGludG8ga2V5ZnJhbWVzIGFuZCBvZmZzZXRzIHdpdGggYWJzb2x1dGUgdGltZSB2YWx1ZXMuXG4gICAgICogVGhlc2Ugd2lsbCBsYXRlciBnZXQgY29udmVydGVkIGludG8gcmVsYXRpdmUgb2Zmc2V0cyBpbiBhIHNlY29uZCBwYXNzLlxuICAgICAqL1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVmaW5pdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzZWdtZW50ID0gZGVmaW5pdGlvbltpXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgaXMgYSB0aW1lbGluZSBsYWJlbCwgbWFyayBpdCBhbmQgc2tpcCB0aGUgcmVzdCBvZiB0aGlzIGl0ZXJhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc1N0cmluZyhzZWdtZW50KSkge1xuICAgICAgICAgICAgdGltZUxhYmVscy5zZXQoc2VnbWVudCwgY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRpbWVMYWJlbHMuc2V0KHNlZ21lbnQubmFtZSwgY2FsY05leHRUaW1lKGN1cnJlbnRUaW1lLCBzZWdtZW50LmF0LCBwcmV2VGltZSwgdGltZUxhYmVscykpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2VsZW1lbnREZWZpbml0aW9uLCBrZXlmcmFtZXMsIG9wdGlvbnMgPSB7fV0gPSBzZWdtZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSByZWxhdGl2ZSBvciBhYnNvbHV0ZSB0aW1lIHZhbHVlIGhhcyBiZWVuIHNwZWNpZmllZCB3ZSBuZWVkIHRvIHJlc29sdmVcbiAgICAgICAgICogaXQgaW4gcmVsYXRpb24gdG8gdGhlIGN1cnJlbnRUaW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKG9wdGlvbnMuYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY3VycmVudFRpbWUgPSBjYWxjTmV4dFRpbWUoY3VycmVudFRpbWUsIG9wdGlvbnMuYXQsIHByZXZUaW1lLCB0aW1lTGFiZWxzKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogS2VlcCB0cmFjayBvZiB0aGUgbWF4aW11bSBkdXJhdGlvbiBpbiB0aGlzIGRlZmluaXRpb24uIFRoaXMgd2lsbCBiZVxuICAgICAgICAgKiBhcHBsaWVkIHRvIGN1cnJlbnRUaW1lIG9uY2UgdGhlIGRlZmluaXRpb24gaGFzIGJlZW4gcGFyc2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IG1heER1cmF0aW9uID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmQgYWxsIHRoZSBlbGVtZW50cyBzcGVjaWZpZWQgaW4gdGhlIGRlZmluaXRpb24gYW5kIHBhcnNlIHZhbHVlXG4gICAgICAgICAqIGtleWZyYW1lcyBmcm9tIHRoZWlyIHRpbWVsaW5lIGRlZmluaXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSByZXNvbHZlRWxlbWVudHMoZWxlbWVudERlZmluaXRpb24sIGVsZW1lbnRDYWNoZSk7XG4gICAgICAgIGNvbnN0IG51bUVsZW1lbnRzID0gZWxlbWVudHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBlbGVtZW50SW5kZXggPSAwOyBlbGVtZW50SW5kZXggPCBudW1FbGVtZW50czsgZWxlbWVudEluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tlbGVtZW50SW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudFNlcXVlbmNlID0gZ2V0RWxlbWVudFNlcXVlbmNlKGVsZW1lbnQsIGVsZW1lbnRTZXF1ZW5jZXMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVTZXF1ZW5jZSA9IGdldFZhbHVlU2VxdWVuY2Uoa2V5LCBlbGVtZW50U2VxdWVuY2UpO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZUtleWZyYW1lcyA9IGtleWZyYW1lc0xpc3Qoa2V5ZnJhbWVzW2tleV0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlT3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucywga2V5KTtcbiAgICAgICAgICAgICAgICBsZXQgeyBkdXJhdGlvbiA9IGRlZmF1bHRPcHRpb25zLmR1cmF0aW9uIHx8IGRlZmF1bHRzLmR1cmF0aW9uLCBlYXNpbmcgPSBkZWZhdWx0T3B0aW9ucy5lYXNpbmcgfHwgZGVmYXVsdHMuZWFzaW5nLCB9ID0gdmFsdWVPcHRpb25zO1xuICAgICAgICAgICAgICAgIGlmIChpc0Vhc2luZ0dlbmVyYXRvcihlYXNpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlSXNUcmFuc2Zvcm0gPSBpc1RyYW5zZm9ybShrZXkpO1xuICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQodmFsdWVLZXlmcmFtZXMubGVuZ3RoID09PSAyIHx8ICF2YWx1ZUlzVHJhbnNmb3JtLCBcInNwcmluZyBtdXN0IGJlIHByb3ZpZGVkIDIga2V5ZnJhbWVzIHdpdGhpbiB0aW1lbGluZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tID0gZWFzaW5nLmNyZWF0ZUFuaW1hdGlvbih2YWx1ZUtleWZyYW1lcywgXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gV2UgY3VycmVudGx5IG9ubHkgc3VwcG9ydCBleHBsaWNpdCBrZXlmcmFtZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gc28gdGhpcyBkb2Vzbid0IGN1cnJlbnRseSByZWFkIGZyb20gdGhlIERPTVxuICAgICAgICAgICAgICAgICAgICAoKSA9PiBcIjBcIiwgdmFsdWVJc1RyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIGVhc2luZyA9IGN1c3RvbS5lYXNpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b20ua2V5ZnJhbWVzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUtleWZyYW1lcyA9IGN1c3RvbS5rZXlmcmFtZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b20uZHVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gY3VzdG9tLmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkZWxheSA9IHJlc29sdmVPcHRpb24ob3B0aW9ucy5kZWxheSwgZWxlbWVudEluZGV4LCBudW1FbGVtZW50cykgfHwgMDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBjdXJyZW50VGltZSArIGRlbGF5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFRpbWUgPSBzdGFydFRpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGxldCB7IG9mZnNldCA9IGRlZmF1bHRPZmZzZXQodmFsdWVLZXlmcmFtZXMubGVuZ3RoKSB9ID0gdmFsdWVPcHRpb25zO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZXJlJ3Mgb25seSBvbmUgb2Zmc2V0IG9mIDAsIGZpbGwgaW4gYSBzZWNvbmQgd2l0aCBsZW5ndGggMVxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogVE9ETzogRW5zdXJlIHRoZXJlJ3MgYSB0ZXN0IHRoYXQgY292ZXJzIHRoaXMgcmVtb3ZhbFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQubGVuZ3RoID09PSAxICYmIG9mZnNldFswXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXRbMV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBGaWxsIG91dCBpZiBvZmZzZXQgaWYgZmV3ZXIgb2Zmc2V0cyB0aGFuIGtleWZyYW1lc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmRlciA9IGxlbmd0aCAtIHZhbHVlS2V5ZnJhbWVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPiAwICYmIGZpbGxPZmZzZXQob2Zmc2V0LCByZW1haW5kZXIpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIG9ubHkgb25lIHZhbHVlIGhhcyBiZWVuIHNldCwgaWUgWzFdLCBwdXNoIGEgbnVsbCB0byB0aGUgc3RhcnQgb2ZcbiAgICAgICAgICAgICAgICAgKiB0aGUga2V5ZnJhbWUgYXJyYXkuIFRoaXMgd2lsbCBsZXQgdXMgbWFyayBhIGtleWZyYW1lIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgICAgICAgICAgKiB0aGF0IHdpbGwgbGF0ZXIgYmUgaHlkcmF0ZWQgd2l0aCB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFsdWVLZXlmcmFtZXMubGVuZ3RoID09PSAxICYmIHZhbHVlS2V5ZnJhbWVzLnVuc2hpZnQobnVsbCk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQWRkIGtleWZyYW1lcywgbWFwcGluZyBvZmZzZXRzIHRvIGFic29sdXRlIHRpbWUuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWRkS2V5ZnJhbWVzKHZhbHVlU2VxdWVuY2UsIHZhbHVlS2V5ZnJhbWVzLCBlYXNpbmcsIG9mZnNldCwgc3RhcnRUaW1lLCB0YXJnZXRUaW1lKTtcbiAgICAgICAgICAgICAgICBtYXhEdXJhdGlvbiA9IE1hdGgubWF4KGRlbGF5ICsgZHVyYXRpb24sIG1heER1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB0b3RhbER1cmF0aW9uID0gTWF0aC5tYXgodGFyZ2V0VGltZSwgdG90YWxEdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJldlRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgY3VycmVudFRpbWUgKz0gbWF4RHVyYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvciBldmVyeSBlbGVtZW50IGFuZCB2YWx1ZSBjb21iaW5hdGlvbiBjcmVhdGUgYSBuZXcgYW5pbWF0aW9uLlxuICAgICAqL1xuICAgIGVsZW1lbnRTZXF1ZW5jZXMuZm9yRWFjaCgodmFsdWVTZXF1ZW5jZXMsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWVTZXF1ZW5jZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlU2VxdWVuY2UgPSB2YWx1ZVNlcXVlbmNlc1trZXldO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcnJhbmdlIGFsbCB0aGUga2V5ZnJhbWVzIGluIGFzY2VuZGluZyB0aW1lIG9yZGVyLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YWx1ZVNlcXVlbmNlLnNvcnQoY29tcGFyZUJ5VGltZSk7XG4gICAgICAgICAgICBjb25zdCBrZXlmcmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlT2Zmc2V0ID0gW107XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUVhc2luZyA9IFtdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGb3IgZWFjaCBrZXlmcmFtZSwgdHJhbnNsYXRlIGFic29sdXRlIHRpbWVzIGludG9cbiAgICAgICAgICAgICAqIHJlbGF0aXZlIG9mZnNldHMgYmFzZWQgb24gdGhlIHRvdGFsIGR1cmF0aW9uIG9mIHRoZSB0aW1lbGluZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZVNlcXVlbmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhdCwgdmFsdWUsIGVhc2luZyB9ID0gdmFsdWVTZXF1ZW5jZVtpXTtcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdmFsdWVPZmZzZXQucHVzaChwcm9ncmVzcygwLCB0b3RhbER1cmF0aW9uLCBhdCkpO1xuICAgICAgICAgICAgICAgIHZhbHVlRWFzaW5nLnB1c2goZWFzaW5nIHx8IGRlZmF1bHRzLmVhc2luZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSBmaXJzdCBrZXlmcmFtZSBkb2Vzbid0IGxhbmQgb24gb2Zmc2V0OiAwXG4gICAgICAgICAgICAgKiBwcm92aWRlIG9uZSBieSBkdXBsaWNhdGluZyB0aGUgaW5pdGlhbCBrZXlmcmFtZS4gVGhpcyBlbnN1cmVzXG4gICAgICAgICAgICAgKiBpdCBzbmFwcyB0byB0aGUgZmlyc3Qga2V5ZnJhbWUgd2hlbiB0aGUgYW5pbWF0aW9uIHN0YXJ0cy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHZhbHVlT2Zmc2V0WzBdICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVPZmZzZXQudW5zaGlmdCgwKTtcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMudW5zaGlmdChrZXlmcmFtZXNbMF0pO1xuICAgICAgICAgICAgICAgIHZhbHVlRWFzaW5nLnVuc2hpZnQoXCJsaW5lYXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSBsYXN0IGtleWZyYW1lIGRvZXNuJ3QgbGFuZCBvbiBvZmZzZXQ6IDFcbiAgICAgICAgICAgICAqIHByb3ZpZGUgb25lIHdpdGggYSBudWxsIHdpbGRjYXJkIHZhbHVlLiBUaGlzIHdpbGwgZW5zdXJlIGl0XG4gICAgICAgICAgICAgKiBzdGF5cyBzdGF0aWMgdW50aWwgdGhlIGVuZCBvZiB0aGUgYW5pbWF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodmFsdWVPZmZzZXRbdmFsdWVPZmZzZXQubGVuZ3RoIC0gMV0gIT09IDEpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZU9mZnNldC5wdXNoKDEpO1xuICAgICAgICAgICAgICAgIGtleWZyYW1lcy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5pbWF0aW9uRGVmaW5pdGlvbnMucHVzaChbXG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAga2V5ZnJhbWVzLFxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucyksIHsgZHVyYXRpb246IHRvdGFsRHVyYXRpb24sIGVhc2luZzogdmFsdWVFYXNpbmcsIG9mZnNldDogdmFsdWVPZmZzZXQgfSksIHRpbWVsaW5lT3B0aW9ucyksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhbmltYXRpb25EZWZpbml0aW9ucztcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRTZXF1ZW5jZShlbGVtZW50LCBzZXF1ZW5jZXMpIHtcbiAgICAhc2VxdWVuY2VzLmhhcyhlbGVtZW50KSAmJiBzZXF1ZW5jZXMuc2V0KGVsZW1lbnQsIHt9KTtcbiAgICByZXR1cm4gc2VxdWVuY2VzLmdldChlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGdldFZhbHVlU2VxdWVuY2UobmFtZSwgc2VxdWVuY2VzKSB7XG4gICAgaWYgKCFzZXF1ZW5jZXNbbmFtZV0pXG4gICAgICAgIHNlcXVlbmNlc1tuYW1lXSA9IFtdO1xuICAgIHJldHVybiBzZXF1ZW5jZXNbbmFtZV07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUFuaW1hdGlvbnNGcm9tVGltZWxpbmUsIHRpbWVsaW5lIH07XG4iLCJpbXBvcnQgeyB2ZWxvY2l0eVBlclNlY29uZCB9IGZyb20gJ0Btb3Rpb25vbmUvdXRpbHMnO1xuXG5jb25zdCBzYW1wbGVUID0gNTsgLy8gbXNcbmZ1bmN0aW9uIGNhbGNHZW5lcmF0b3JWZWxvY2l0eShyZXNvbHZlVmFsdWUsIHQsIGN1cnJlbnQpIHtcbiAgICBjb25zdCBwcmV2VCA9IE1hdGgubWF4KHQgLSBzYW1wbGVULCAwKTtcbiAgICByZXR1cm4gdmVsb2NpdHlQZXJTZWNvbmQoY3VycmVudCAtIHJlc29sdmVWYWx1ZShwcmV2VCksIHQgLSBwcmV2VCk7XG59XG5cbmV4cG9ydCB7IGNhbGNHZW5lcmF0b3JWZWxvY2l0eSB9O1xuIiwiLypcbiAgQ29udmVydCB2ZWxvY2l0eSBpbnRvIHZlbG9jaXR5IHBlciBzZWNvbmRcblxuICBAcGFyYW0gW251bWJlcl06IFVuaXQgcGVyIGZyYW1lXG4gIEBwYXJhbSBbbnVtYmVyXTogRnJhbWUgZHVyYXRpb24gaW4gbXNcbiovXG5mdW5jdGlvbiB2ZWxvY2l0eVBlclNlY29uZCh2ZWxvY2l0eSwgZnJhbWVEdXJhdGlvbikge1xuICAgIHJldHVybiBmcmFtZUR1cmF0aW9uID8gdmVsb2NpdHkgKiAoMTAwMCAvIGZyYW1lRHVyYXRpb24pIDogMDtcbn1cblxuZXhwb3J0IHsgdmVsb2NpdHlQZXJTZWNvbmQgfTtcbiIsImltcG9ydCB7IHRpbWUgfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IGRlZmF1bHRzIH0gZnJvbSAnLi9kZWZhdWx0cy5lcy5qcyc7XG5pbXBvcnQgeyBjYWxjRGFtcGluZ1JhdGlvIH0gZnJvbSAnLi91dGlscy5lcy5qcyc7XG5pbXBvcnQgeyBoYXNSZWFjaGVkVGFyZ2V0IH0gZnJvbSAnLi4vdXRpbHMvaGFzLXJlYWNoZWQtdGFyZ2V0LmVzLmpzJztcbmltcG9ydCB7IGNhbGNHZW5lcmF0b3JWZWxvY2l0eSB9IGZyb20gJy4uL3V0aWxzL3ZlbG9jaXR5LmVzLmpzJztcblxuY29uc3Qgc3ByaW5nID0gKHsgc3RpZmZuZXNzID0gZGVmYXVsdHMuc3RpZmZuZXNzLCBkYW1waW5nID0gZGVmYXVsdHMuZGFtcGluZywgbWFzcyA9IGRlZmF1bHRzLm1hc3MsIGZyb20gPSAwLCB0byA9IDEsIHZlbG9jaXR5ID0gMC4wLCByZXN0U3BlZWQgPSAyLCByZXN0RGlzdGFuY2UgPSAwLjUsIH0gPSB7fSkgPT4ge1xuICAgIHZlbG9jaXR5ID0gdmVsb2NpdHkgPyB0aW1lLnModmVsb2NpdHkpIDogMC4wO1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgaGFzUmVhY2hlZFRhcmdldDogZmFsc2UsXG4gICAgICAgIGN1cnJlbnQ6IGZyb20sXG4gICAgICAgIHRhcmdldDogdG8sXG4gICAgfTtcbiAgICBjb25zdCBpbml0aWFsRGVsdGEgPSB0byAtIGZyb207XG4gICAgY29uc3QgdW5kYW1wZWRBbmd1bGFyRnJlcSA9IE1hdGguc3FydChzdGlmZm5lc3MgLyBtYXNzKSAvIDEwMDA7XG4gICAgY29uc3QgZGFtcGluZ1JhdGlvID0gY2FsY0RhbXBpbmdSYXRpbyhzdGlmZm5lc3MsIGRhbXBpbmcsIG1hc3MpO1xuICAgIGxldCByZXNvbHZlU3ByaW5nO1xuICAgIGlmIChkYW1waW5nUmF0aW8gPCAxKSB7XG4gICAgICAgIGNvbnN0IGFuZ3VsYXJGcmVxID0gdW5kYW1wZWRBbmd1bGFyRnJlcSAqIE1hdGguc3FydCgxIC0gZGFtcGluZ1JhdGlvICogZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgLy8gVW5kZXJkYW1wZWQgc3ByaW5nIChib3VuY3kpXG4gICAgICAgIHJlc29sdmVTcHJpbmcgPSAodCkgPT4gdG8gLVxuICAgICAgICAgICAgTWF0aC5leHAoLWRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiB0KSAqXG4gICAgICAgICAgICAgICAgKCgoLXZlbG9jaXR5ICsgZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIGluaXRpYWxEZWx0YSkgL1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyRnJlcSkgKlxuICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihhbmd1bGFyRnJlcSAqIHQpICtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhICogTWF0aC5jb3MoYW5ndWxhckZyZXEgKiB0KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBDcml0aWNhbGx5IGRhbXBlZCBzcHJpbmdcbiAgICAgICAgcmVzb2x2ZVNwcmluZyA9ICh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHRvIC1cbiAgICAgICAgICAgICAgICBNYXRoLmV4cCgtdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpICpcbiAgICAgICAgICAgICAgICAgICAgKGluaXRpYWxEZWx0YSArICgtdmVsb2NpdHkgKyB1bmRhbXBlZEFuZ3VsYXJGcmVxICogaW5pdGlhbERlbHRhKSAqIHQpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuICh0KSA9PiB7XG4gICAgICAgIHN0YXRlLmN1cnJlbnQgPSByZXNvbHZlU3ByaW5nKHQpO1xuICAgICAgICBjb25zdCBjdXJyZW50VmVsb2NpdHkgPSB0ID09PSAwXG4gICAgICAgICAgICA/IHZlbG9jaXR5XG4gICAgICAgICAgICA6IGNhbGNHZW5lcmF0b3JWZWxvY2l0eShyZXNvbHZlU3ByaW5nLCB0LCBzdGF0ZS5jdXJyZW50KTtcbiAgICAgICAgY29uc3QgaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkID0gTWF0aC5hYnMoY3VycmVudFZlbG9jaXR5KSA8PSByZXN0U3BlZWQ7XG4gICAgICAgIGNvbnN0IGlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQgPSBNYXRoLmFicyh0byAtIHN0YXRlLmN1cnJlbnQpIDw9IHJlc3REaXN0YW5jZTtcbiAgICAgICAgc3RhdGUuZG9uZSA9IGlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCAmJiBpc0JlbG93RGlzcGxhY2VtZW50VGhyZXNob2xkO1xuICAgICAgICBzdGF0ZS5oYXNSZWFjaGVkVGFyZ2V0ID0gaGFzUmVhY2hlZFRhcmdldChmcm9tLCB0bywgc3RhdGUuY3VycmVudCk7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9O1xufTtcblxuZXhwb3J0IHsgc3ByaW5nIH07XG4iLCJjb25zdCBkZWZhdWx0cyA9IHtcbiAgICBzdGlmZm5lc3M6IDEwMC4wLFxuICAgIGRhbXBpbmc6IDEwLjAsXG4gICAgbWFzczogMS4wLFxufTtcblxuZXhwb3J0IHsgZGVmYXVsdHMgfTtcbiIsImltcG9ydCB7IGRlZmF1bHRzIH0gZnJvbSAnLi9kZWZhdWx0cy5lcy5qcyc7XG5cbmNvbnN0IGNhbGNEYW1waW5nUmF0aW8gPSAoc3RpZmZuZXNzID0gZGVmYXVsdHMuc3RpZmZuZXNzLCBkYW1waW5nID0gZGVmYXVsdHMuZGFtcGluZywgbWFzcyA9IGRlZmF1bHRzLm1hc3MpID0+IGRhbXBpbmcgLyAoMiAqIE1hdGguc3FydChzdGlmZm5lc3MgKiBtYXNzKSk7XG5cbmV4cG9ydCB7IGNhbGNEYW1waW5nUmF0aW8gfTtcbiIsImZ1bmN0aW9uIGhhc1JlYWNoZWRUYXJnZXQob3JpZ2luLCB0YXJnZXQsIGN1cnJlbnQpIHtcbiAgICByZXR1cm4gKChvcmlnaW4gPCB0YXJnZXQgJiYgY3VycmVudCA+PSB0YXJnZXQpIHx8XG4gICAgICAgIChvcmlnaW4gPiB0YXJnZXQgJiYgY3VycmVudCA8PSB0YXJnZXQpKTtcbn1cblxuZXhwb3J0IHsgaGFzUmVhY2hlZFRhcmdldCB9O1xuIiwiaW1wb3J0IHsgY2FsY0dlbmVyYXRvclZlbG9jaXR5LCBwcmVnZW5lcmF0ZUtleWZyYW1lcyB9IGZyb20gJ0Btb3Rpb25vbmUvZ2VuZXJhdG9ycyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRvckVhc2luZyhjcmVhdGVHZW5lcmF0b3IpIHtcbiAgICBjb25zdCBrZXlmcmFtZXNDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gICAgcmV0dXJuIChvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgZ2VuZXJhdG9yQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGdldEdlbmVyYXRvciA9IChmcm9tID0gMCwgdG8gPSAxMDAsIHZlbG9jaXR5ID0gMCwgaXNTY2FsZSA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBgJHtmcm9tfS0ke3RvfS0ke3ZlbG9jaXR5fS0ke2lzU2NhbGV9YDtcbiAgICAgICAgICAgIGlmICghZ2VuZXJhdG9yQ2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBnZW5lcmF0b3JDYWNoZS5zZXQoa2V5LCBjcmVhdGVHZW5lcmF0b3IoT2JqZWN0LmFzc2lnbih7IGZyb20sXG4gICAgICAgICAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eSwgcmVzdFNwZWVkOiBpc1NjYWxlID8gMC4wNSA6IDIsIHJlc3REaXN0YW5jZTogaXNTY2FsZSA/IDAuMDEgOiAwLjUgfSwgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0b3JDYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZ2V0S2V5ZnJhbWVzID0gKGdlbmVyYXRvcikgPT4ge1xuICAgICAgICAgICAgaWYgKCFrZXlmcmFtZXNDYWNoZS5oYXMoZ2VuZXJhdG9yKSkge1xuICAgICAgICAgICAgICAgIGtleWZyYW1lc0NhY2hlLnNldChnZW5lcmF0b3IsIHByZWdlbmVyYXRlS2V5ZnJhbWVzKGdlbmVyYXRvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleWZyYW1lc0NhY2hlLmdldChnZW5lcmF0b3IpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlYXRlQW5pbWF0aW9uOiAoa2V5ZnJhbWVzLCBnZXRPcmlnaW4sIGNhblVzZUdlbmVyYXRvciwgbmFtZSwgbW90aW9uVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGxldCBzZXR0aW5ncztcbiAgICAgICAgICAgICAgICBjb25zdCBudW1LZXlmcmFtZXMgPSBrZXlmcmFtZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxldCBzaG91bGRVc2VHZW5lcmF0b3IgPSBjYW5Vc2VHZW5lcmF0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgbnVtS2V5ZnJhbWVzIDw9IDIgJiZcbiAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWVzLmV2ZXJ5KGlzTnVtYmVyT3JOdWxsKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkVXNlR2VuZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGtleWZyYW1lc1tudW1LZXlmcmFtZXMgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5yZXNvbHZlZE9yaWdpbiA9IG51bUtleWZyYW1lcyA9PT0gMSA/IG51bGwgOiBrZXlmcmFtZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIGxldCB2ZWxvY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvcmlnaW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2R2VuZXJhdG9yID0gbW90aW9uVmFsdWUgPT09IG51bGwgfHwgbW90aW9uVmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1vdGlvblZhbHVlLmdlbmVyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZHZW5lcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgd2UgaGF2ZSBhIGdlbmVyYXRvciBmb3IgdGhpcyB2YWx1ZSB3ZSBjYW4gdXNlIGl0IHRvIHJlc29sdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSBhbmltYXRpb25zJ3MgY3VycmVudCB2YWx1ZSBhbmQgdmVsb2NpdHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYW5pbWF0aW9uLCBnZW5lcmF0b3JTdGFydFRpbWUgfSA9IG1vdGlvblZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gKGFuaW1hdGlvbiA9PT0gbnVsbCB8fCBhbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFuaW1hdGlvbi5zdGFydFRpbWUpIHx8IGdlbmVyYXRvclN0YXJ0VGltZSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSAoYW5pbWF0aW9uID09PSBudWxsIHx8IGFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYW5pbWF0aW9uLmN1cnJlbnRUaW1lKSB8fCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZHZW5lcmF0b3JDdXJyZW50ID0gcHJldkdlbmVyYXRvcihjdXJyZW50VGltZSkuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbiA9IChfYSA9IHVucmVzb2x2ZWRPcmlnaW4pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHByZXZHZW5lcmF0b3JDdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bUtleWZyYW1lcyA9PT0gMSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudW1LZXlmcmFtZXMgPT09IDIgJiYga2V5ZnJhbWVzWzBdID09PSBudWxsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5ID0gY2FsY0dlbmVyYXRvclZlbG9jaXR5KCh0KSA9PiBwcmV2R2VuZXJhdG9yKHQpLmN1cnJlbnQsIGN1cnJlbnRUaW1lLCBwcmV2R2VuZXJhdG9yQ3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW4gPSAoX2IgPSB1bnJlc29sdmVkT3JpZ2luKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBwYXJzZUZsb2F0KGdldE9yaWdpbigpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW5lcmF0b3IgPSBnZXRHZW5lcmF0b3Iob3JpZ2luLCB0YXJnZXQsIHZlbG9jaXR5LCBuYW1lID09PSBudWxsIHx8IG5hbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hbWUuaW5jbHVkZXMoXCJzY2FsZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleWZyYW1lc01ldGFkYXRhID0gZ2V0S2V5ZnJhbWVzKGdlbmVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBrZXlmcmFtZXNNZXRhZGF0YSksIHsgZWFzaW5nOiBcImxpbmVhclwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIEFkZCB0ZXN0IGZvciB0aGlzXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3Rpb25WYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW90aW9uVmFsdWUuZ2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW90aW9uVmFsdWUuZ2VuZXJhdG9yU3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleWZyYW1lc01ldGFkYXRhID0gZ2V0S2V5ZnJhbWVzKGdldEdlbmVyYXRvcigwLCAxMDApKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwiZWFzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IGtleWZyYW1lc01ldGFkYXRhLm92ZXJzaG9vdER1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG59XG5jb25zdCBpc051bWJlck9yTnVsbCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiO1xuXG5leHBvcnQgeyBjcmVhdGVHZW5lcmF0b3JFYXNpbmcgfTtcbiIsImNvbnN0IHRpbWVTdGVwID0gMTA7XG5jb25zdCBtYXhEdXJhdGlvbiA9IDEwMDAwO1xuZnVuY3Rpb24gcHJlZ2VuZXJhdGVLZXlmcmFtZXMoZ2VuZXJhdG9yKSB7XG4gICAgbGV0IG92ZXJzaG9vdER1cmF0aW9uID0gdW5kZWZpbmVkO1xuICAgIGxldCB0aW1lc3RhbXAgPSB0aW1lU3RlcDtcbiAgICBsZXQgc3RhdGUgPSBnZW5lcmF0b3IoMCk7XG4gICAgY29uc3Qga2V5ZnJhbWVzID0gW3N0YXRlLmN1cnJlbnRdO1xuICAgIHdoaWxlICghc3RhdGUuZG9uZSAmJiB0aW1lc3RhbXAgPCBtYXhEdXJhdGlvbikge1xuICAgICAgICBzdGF0ZSA9IGdlbmVyYXRvcih0aW1lc3RhbXApO1xuICAgICAgICBrZXlmcmFtZXMucHVzaChzdGF0ZS5kb25lID8gc3RhdGUudGFyZ2V0IDogc3RhdGUuY3VycmVudCk7XG4gICAgICAgIGlmIChvdmVyc2hvb3REdXJhdGlvbiA9PT0gdW5kZWZpbmVkICYmIHN0YXRlLmhhc1JlYWNoZWRUYXJnZXQpIHtcbiAgICAgICAgICAgIG92ZXJzaG9vdER1cmF0aW9uID0gdGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVzdGFtcCArPSB0aW1lU3RlcDtcbiAgICB9XG4gICAgY29uc3QgZHVyYXRpb24gPSB0aW1lc3RhbXAgLSB0aW1lU3RlcDtcbiAgICAvKipcbiAgICAgKiBJZiBnZW5lcmF0aW5nIGFuIGFuaW1hdGlvbiB0aGF0IGRpZG4ndCBhY3R1YWxseSBtb3ZlLFxuICAgICAqIGdlbmVyYXRlIGEgc2Vjb25kIGtleWZyYW1lIHNvIHdlIGhhdmUgYW4gb3JpZ2luIGFuZCB0YXJnZXQuXG4gICAgICovXG4gICAgaWYgKGtleWZyYW1lcy5sZW5ndGggPT09IDEpXG4gICAgICAgIGtleWZyYW1lcy5wdXNoKHN0YXRlLmN1cnJlbnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGtleWZyYW1lcyxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC8gMTAwMCxcbiAgICAgICAgb3ZlcnNob290RHVyYXRpb246IChvdmVyc2hvb3REdXJhdGlvbiAhPT0gbnVsbCAmJiBvdmVyc2hvb3REdXJhdGlvbiAhPT0gdm9pZCAwID8gb3ZlcnNob290RHVyYXRpb24gOiBkdXJhdGlvbikgLyAxMDAwLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IHByZWdlbmVyYXRlS2V5ZnJhbWVzIH07XG4iLCJpbXBvcnQgeyBzcHJpbmcgYXMgc3ByaW5nJDEgfSBmcm9tICdAbW90aW9ub25lL2dlbmVyYXRvcnMnO1xuaW1wb3J0IHsgY3JlYXRlR2VuZXJhdG9yRWFzaW5nIH0gZnJvbSAnLi4vY3JlYXRlLWdlbmVyYXRvci1lYXNpbmcuZXMuanMnO1xuXG5jb25zdCBzcHJpbmcgPSBjcmVhdGVHZW5lcmF0b3JFYXNpbmcoc3ByaW5nJDEpO1xuXG5leHBvcnQgeyBzcHJpbmcgfTtcbiIsImltcG9ydCB7IGdsaWRlIGFzIGdsaWRlJDEgfSBmcm9tICdAbW90aW9ub25lL2dlbmVyYXRvcnMnO1xuaW1wb3J0IHsgY3JlYXRlR2VuZXJhdG9yRWFzaW5nIH0gZnJvbSAnLi4vY3JlYXRlLWdlbmVyYXRvci1lYXNpbmcuZXMuanMnO1xuXG5jb25zdCBnbGlkZSA9IGNyZWF0ZUdlbmVyYXRvckVhc2luZyhnbGlkZSQxKTtcblxuZXhwb3J0IHsgZ2xpZGUgfTtcbiIsImltcG9ydCB7IHRpbWUgfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IGNhbGNHZW5lcmF0b3JWZWxvY2l0eSB9IGZyb20gJy4uL3V0aWxzL3ZlbG9jaXR5LmVzLmpzJztcbmltcG9ydCB7IHNwcmluZyB9IGZyb20gJy4uL3NwcmluZy9pbmRleC5lcy5qcyc7XG5cbmNvbnN0IGdsaWRlID0gKHsgZnJvbSA9IDAsIHZlbG9jaXR5ID0gMC4wLCBwb3dlciA9IDAuOCwgZGVjYXkgPSAwLjMyNSwgYm91bmNlRGFtcGluZywgYm91bmNlU3RpZmZuZXNzLCBjaGFuZ2VUYXJnZXQsIG1pbiwgbWF4LCByZXN0RGlzdGFuY2UgPSAwLjUsIHJlc3RTcGVlZCwgfSkgPT4ge1xuICAgIGRlY2F5ID0gdGltZS5tcyhkZWNheSk7XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGhhc1JlYWNoZWRUYXJnZXQ6IGZhbHNlLFxuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgY3VycmVudDogZnJvbSxcbiAgICAgICAgdGFyZ2V0OiBmcm9tLFxuICAgIH07XG4gICAgY29uc3QgaXNPdXRPZkJvdW5kcyA9ICh2KSA9PiAobWluICE9PSB1bmRlZmluZWQgJiYgdiA8IG1pbikgfHwgKG1heCAhPT0gdW5kZWZpbmVkICYmIHYgPiBtYXgpO1xuICAgIGNvbnN0IG5lYXJlc3RCb3VuZGFyeSA9ICh2KSA9PiB7XG4gICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBtYXg7XG4gICAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBtaW47XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhtaW4gLSB2KSA8IE1hdGguYWJzKG1heCAtIHYpID8gbWluIDogbWF4O1xuICAgIH07XG4gICAgbGV0IGFtcGxpdHVkZSA9IHBvd2VyICogdmVsb2NpdHk7XG4gICAgY29uc3QgaWRlYWwgPSBmcm9tICsgYW1wbGl0dWRlO1xuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZVRhcmdldCA9PT0gdW5kZWZpbmVkID8gaWRlYWwgOiBjaGFuZ2VUYXJnZXQoaWRlYWwpO1xuICAgIHN0YXRlLnRhcmdldCA9IHRhcmdldDtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdGFyZ2V0IGhhcyBjaGFuZ2VkIHdlIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZSBhbXBsaXR1ZGUsIG90aGVyd2lzZVxuICAgICAqIHRoZSBhbmltYXRpb24gd2lsbCBzdGFydCBmcm9tIHRoZSB3cm9uZyBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBpZiAodGFyZ2V0ICE9PSBpZGVhbClcbiAgICAgICAgYW1wbGl0dWRlID0gdGFyZ2V0IC0gZnJvbTtcbiAgICBjb25zdCBjYWxjRGVsdGEgPSAodCkgPT4gLWFtcGxpdHVkZSAqIE1hdGguZXhwKC10IC8gZGVjYXkpO1xuICAgIGNvbnN0IGNhbGNMYXRlc3QgPSAodCkgPT4gdGFyZ2V0ICsgY2FsY0RlbHRhKHQpO1xuICAgIGNvbnN0IGFwcGx5RnJpY3Rpb24gPSAodCkgPT4ge1xuICAgICAgICBjb25zdCBkZWx0YSA9IGNhbGNEZWx0YSh0KTtcbiAgICAgICAgY29uc3QgbGF0ZXN0ID0gY2FsY0xhdGVzdCh0KTtcbiAgICAgICAgc3RhdGUuZG9uZSA9IE1hdGguYWJzKGRlbHRhKSA8PSByZXN0RGlzdGFuY2U7XG4gICAgICAgIHN0YXRlLmN1cnJlbnQgPSBzdGF0ZS5kb25lID8gdGFyZ2V0IDogbGF0ZXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSWRlYWxseSB0aGlzIHdvdWxkIHJlc29sdmUgZm9yIHQgaW4gYSBzdGF0ZWxlc3Mgd2F5LCB3ZSBjb3VsZFxuICAgICAqIGRvIHRoYXQgYnkgYWx3YXlzIHByZWNhbGN1bGF0aW5nIHRoZSBhbmltYXRpb24gYnV0IGFzIHdlIGtub3dcbiAgICAgKiB0aGlzIHdpbGwgYmUgZG9uZSBhbnl3YXkgd2UgY2FuIGFzc3VtZSB0aGF0IHNwcmluZyB3aWxsXG4gICAgICogYmUgZGlzY292ZXJlZCBkdXJpbmcgdGhhdC5cbiAgICAgKi9cbiAgICBsZXQgdGltZVJlYWNoZWRCb3VuZGFyeTtcbiAgICBsZXQgc3ByaW5nJDE7XG4gICAgY29uc3QgY2hlY2tDYXRjaEJvdW5kYXJ5ID0gKHQpID0+IHtcbiAgICAgICAgaWYgKCFpc091dE9mQm91bmRzKHN0YXRlLmN1cnJlbnQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aW1lUmVhY2hlZEJvdW5kYXJ5ID0gdDtcbiAgICAgICAgc3ByaW5nJDEgPSBzcHJpbmcoe1xuICAgICAgICAgICAgZnJvbTogc3RhdGUuY3VycmVudCxcbiAgICAgICAgICAgIHRvOiBuZWFyZXN0Qm91bmRhcnkoc3RhdGUuY3VycmVudCksXG4gICAgICAgICAgICB2ZWxvY2l0eTogY2FsY0dlbmVyYXRvclZlbG9jaXR5KGNhbGNMYXRlc3QsIHQsIHN0YXRlLmN1cnJlbnQpLFxuICAgICAgICAgICAgZGFtcGluZzogYm91bmNlRGFtcGluZyxcbiAgICAgICAgICAgIHN0aWZmbmVzczogYm91bmNlU3RpZmZuZXNzLFxuICAgICAgICAgICAgcmVzdERpc3RhbmNlLFxuICAgICAgICAgICAgcmVzdFNwZWVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNoZWNrQ2F0Y2hCb3VuZGFyeSgwKTtcbiAgICByZXR1cm4gKHQpID0+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIG5lZWQgdG8gcmVzb2x2ZSB0aGUgZnJpY3Rpb24gdG8gZmlndXJlIG91dCBpZiB3ZSBuZWVkIGFcbiAgICAgICAgICogc3ByaW5nIGJ1dCB3ZSBkb24ndCB3YW50IHRvIGRvIHRoaXMgdHdpY2UgcGVyIGZyYW1lLiBTbyBoZXJlXG4gICAgICAgICAqIHdlIGZsYWcgaWYgd2UgdXBkYXRlZCBmb3IgdGhpcyBmcmFtZSBhbmQgbGF0ZXIgaWYgd2UgZGlkXG4gICAgICAgICAqIHdlIGNhbiBza2lwIGRvaW5nIGl0IGFnYWluLlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGhhc1VwZGF0ZWRGcmFtZSA9IGZhbHNlO1xuICAgICAgICBpZiAoIXNwcmluZyQxICYmIHRpbWVSZWFjaGVkQm91bmRhcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGFzVXBkYXRlZEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIGFwcGx5RnJpY3Rpb24odCk7XG4gICAgICAgICAgICBjaGVja0NhdGNoQm91bmRhcnkodCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlIGhhdmUgYSBzcHJpbmcgYW5kIHRoZSBwcm92aWRlZCB0IGlzIGJleW9uZCB0aGUgbW9tZW50IHRoZSBmcmljdGlvblxuICAgICAgICAgKiBhbmltYXRpb24gY3Jvc3NlZCB0aGUgbWluL21heCBib3VuZGFyeSwgdXNlIHRoZSBzcHJpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGltZVJlYWNoZWRCb3VuZGFyeSAhPT0gdW5kZWZpbmVkICYmIHQgPiB0aW1lUmVhY2hlZEJvdW5kYXJ5KSB7XG4gICAgICAgICAgICBzdGF0ZS5oYXNSZWFjaGVkVGFyZ2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBzcHJpbmckMSh0IC0gdGltZVJlYWNoZWRCb3VuZGFyeSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZS5oYXNSZWFjaGVkVGFyZ2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAhaGFzVXBkYXRlZEZyYW1lICYmIGFwcGx5RnJpY3Rpb24odCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IHsgZ2xpZGUgfTtcbiIsImltcG9ydCB7IHJlc29sdmVFbGVtZW50cyB9IGZyb20gJy4uL3V0aWxzL3Jlc29sdmUtZWxlbWVudHMuZXMuanMnO1xuXG5jb25zdCB0aHJlc2hvbGRzID0ge1xuICAgIGFueTogMCxcbiAgICBhbGw6IDEsXG59O1xuZnVuY3Rpb24gaW5WaWV3KGVsZW1lbnRzLCBvblN0YXJ0LCB7IHJvb3QsIG1hcmdpbjogcm9vdE1hcmdpbiwgYW1vdW50ID0gXCJhbnlcIiB9ID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IEludGVyc2VjdGlvbk9ic2VydmVyLCByZXR1cm4gYSBkdW1teSBzdG9wIGZ1bmN0aW9uLlxuICAgICAqIERlZmF1bHQgdHJpZ2dlcmluZyBvZiBvblN0YXJ0IGlzIHRyaWNreSAtIGl0IGNvdWxkIGJlIHVzZWQgZm9yIHN0YXJ0aW5nL3N0b3BwaW5nXG4gICAgICogdmlkZW9zLCBsYXp5IGxvYWRpbmcgY29udGVudCBldGMuIFdlIGNvdWxkIHByb3ZpZGUgYW4gb3B0aW9uIHRvIGVuYWJsZSBhIGZhbGxiYWNrLCBvclxuICAgICAqIHByb3ZpZGUgYSBmYWxsYmFjayBjYWxsYmFjayBvcHRpb24uXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gKCkgPT4geyB9O1xuICAgIH1cbiAgICBjb25zdCByZXNvbHZlZEVsZW1lbnRzID0gcmVzb2x2ZUVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgICBjb25zdCBhY3RpdmVJbnRlcnNlY3Rpb25zID0gbmV3IFdlYWtNYXAoKTtcbiAgICBjb25zdCBvbkludGVyc2VjdGlvbkNoYW5nZSA9IChlbnRyaWVzKSA9PiB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9uRW5kID0gYWN0aXZlSW50ZXJzZWN0aW9ucy5nZXQoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlcmUncyBubyBjaGFuZ2UgdG8gdGhlIGludGVyc2VjdGlvbiwgd2UgZG9uJ3QgbmVlZCB0b1xuICAgICAgICAgICAgICogZG8gYW55dGhpbmcgaGVyZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nID09PSBCb29sZWFuKG9uRW5kKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdPbkVuZCA9IG9uU3RhcnQoZW50cnkpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3T25FbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbnRlcnNlY3Rpb25zLnNldChlbnRyeS50YXJnZXQsIG5ld09uRW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9uRW5kKSB7XG4gICAgICAgICAgICAgICAgb25FbmQoZW50cnkpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZUludGVyc2VjdGlvbnMuZGVsZXRlKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIob25JbnRlcnNlY3Rpb25DaGFuZ2UsIHtcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcm9vdE1hcmdpbixcbiAgICAgICAgdGhyZXNob2xkOiB0eXBlb2YgYW1vdW50ID09PSBcIm51bWJlclwiID8gYW1vdW50IDogdGhyZXNob2xkc1thbW91bnRdLFxuICAgIH0pO1xuICAgIHJlc29sdmVkRWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4gb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KSk7XG4gICAgcmV0dXJuICgpID0+IG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbn1cblxuZXhwb3J0IHsgaW5WaWV3IH07XG4iLCJpbXBvcnQgeyBpc1ZhcmlhbnQgfSBmcm9tICcuL2lzLXZhcmlhbnQuZXMuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlVmFyaWFudChkZWZpbml0aW9uLCB2YXJpYW50cykge1xuICAgIGlmIChpc1ZhcmlhbnQoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfVxuICAgIGVsc2UgaWYgKGRlZmluaXRpb24gJiYgdmFyaWFudHMpIHtcbiAgICAgICAgcmV0dXJuIHZhcmlhbnRzW2RlZmluaXRpb25dO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfTtcbiIsImZ1bmN0aW9uIGlzVmFyaWFudChkZWZpbml0aW9uKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkZWZpbml0aW9uID09PSBcIm9iamVjdFwiO1xufVxuXG5leHBvcnQgeyBpc1ZhcmlhbnQgfTtcbiIsImltcG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIHJlbW92ZUl0ZW0gfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcblxubGV0IHNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIHByb2Nlc3NTY2hlZHVsZWRBbmltYXRpb25zKCkge1xuICAgIGlmICghc2NoZWR1bGVkKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgZ2VuZXJhdG9ycyA9IHNjaGVkdWxlZC5zb3J0KGNvbXBhcmVCeURlcHRoKS5tYXAoZmlyZUFuaW1hdGVVcGRhdGVzKTtcbiAgICBnZW5lcmF0b3JzLmZvckVhY2goZmlyZU5leHQpO1xuICAgIGdlbmVyYXRvcnMuZm9yRWFjaChmaXJlTmV4dCk7XG4gICAgc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVBbmltYXRpb24oc3RhdGUpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBbc3RhdGVdO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocHJvY2Vzc1NjaGVkdWxlZEFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWRkVW5pcXVlSXRlbShzY2hlZHVsZWQsIHN0YXRlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1bnNjaGVkdWxlQW5pbWF0aW9uKHN0YXRlKSB7XG4gICAgc2NoZWR1bGVkICYmIHJlbW92ZUl0ZW0oc2NoZWR1bGVkLCBzdGF0ZSk7XG59XG5jb25zdCBjb21wYXJlQnlEZXB0aCA9IChhLCBiKSA9PiBhLmdldERlcHRoKCkgLSBiLmdldERlcHRoKCk7XG5jb25zdCBmaXJlQW5pbWF0ZVVwZGF0ZXMgPSAoc3RhdGUpID0+IHN0YXRlLmFuaW1hdGVVcGRhdGVzKCk7XG5jb25zdCBmaXJlTmV4dCA9IChpdGVyYXRvcikgPT4gaXRlcmF0b3IubmV4dCgpO1xuXG5leHBvcnQgeyBzY2hlZHVsZUFuaW1hdGlvbiwgdW5zY2hlZHVsZUFuaW1hdGlvbiB9O1xuIiwiY29uc3QgbW90aW9uRXZlbnQgPSAobmFtZSwgdGFyZ2V0KSA9PiBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgeyBkZXRhaWw6IHsgdGFyZ2V0IH0gfSk7XG5mdW5jdGlvbiBkaXNwYXRjaFBvaW50ZXJFdmVudChlbGVtZW50LCBuYW1lLCBldmVudCkge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQobmFtZSwgeyBkZXRhaWw6IHsgb3JpZ2luYWxFdmVudDogZXZlbnQgfSB9KSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFZpZXdFdmVudChlbGVtZW50LCBuYW1lLCBlbnRyeSkge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQobmFtZSwgeyBkZXRhaWw6IHsgb3JpZ2luYWxFbnRyeTogZW50cnkgfSB9KSk7XG59XG5cbmV4cG9ydCB7IGRpc3BhdGNoUG9pbnRlckV2ZW50LCBkaXNwYXRjaFZpZXdFdmVudCwgbW90aW9uRXZlbnQgfTtcbiIsImltcG9ydCB7IF9fcmVzdCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGRpc3BhdGNoVmlld0V2ZW50IH0gZnJvbSAnLi4vdXRpbHMvZXZlbnRzLmVzLmpzJztcbmltcG9ydCB7IGluVmlldyBhcyBpblZpZXckMSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2luLXZpZXcuZXMuanMnO1xuXG5jb25zdCBpblZpZXcgPSB7XG4gICAgaXNBY3RpdmU6IChvcHRpb25zKSA9PiBCb29sZWFuKG9wdGlvbnMuaW5WaWV3KSxcbiAgICBzdWJzY3JpYmU6IChlbGVtZW50LCB7IGVuYWJsZSwgZGlzYWJsZSB9LCB7IGluVmlld09wdGlvbnMgPSB7fSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgb25jZSB9ID0gaW5WaWV3T3B0aW9ucywgdmlld09wdGlvbnMgPSBfX3Jlc3QoaW5WaWV3T3B0aW9ucywgW1wib25jZVwiXSk7XG4gICAgICAgIHJldHVybiBpblZpZXckMShlbGVtZW50LCAoZW50ZXJFbnRyeSkgPT4ge1xuICAgICAgICAgICAgZW5hYmxlKCk7XG4gICAgICAgICAgICBkaXNwYXRjaFZpZXdFdmVudChlbGVtZW50LCBcInZpZXdlbnRlclwiLCBlbnRlckVudHJ5KTtcbiAgICAgICAgICAgIGlmICghb25jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAobGVhdmVFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoVmlld0V2ZW50KGVsZW1lbnQsIFwidmlld2xlYXZlXCIsIGxlYXZlRW50cnkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHZpZXdPcHRpb25zKTtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgaW5WaWV3IH07XG4iLCJpbXBvcnQgeyBkaXNwYXRjaFBvaW50ZXJFdmVudCB9IGZyb20gJy4uL3V0aWxzL2V2ZW50cy5lcy5qcyc7XG5cbmNvbnN0IG1vdXNlRXZlbnQgPSAoZWxlbWVudCwgbmFtZSwgYWN0aW9uKSA9PiAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQucG9pbnRlclR5cGUgJiYgZXZlbnQucG9pbnRlclR5cGUgIT09IFwibW91c2VcIilcbiAgICAgICAgcmV0dXJuO1xuICAgIGFjdGlvbigpO1xuICAgIGRpc3BhdGNoUG9pbnRlckV2ZW50KGVsZW1lbnQsIG5hbWUsIGV2ZW50KTtcbn07XG5jb25zdCBob3ZlciA9IHtcbiAgICBpc0FjdGl2ZTogKG9wdGlvbnMpID0+IEJvb2xlYW4ob3B0aW9ucy5ob3ZlciksXG4gICAgc3Vic2NyaWJlOiAoZWxlbWVudCwgeyBlbmFibGUsIGRpc2FibGUgfSkgPT4ge1xuICAgICAgICBjb25zdCBvbkVudGVyID0gbW91c2VFdmVudChlbGVtZW50LCBcImhvdmVyc3RhcnRcIiwgZW5hYmxlKTtcbiAgICAgICAgY29uc3Qgb25MZWF2ZSA9IG1vdXNlRXZlbnQoZWxlbWVudCwgXCJob3ZlcmVuZFwiLCBkaXNhYmxlKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmVudGVyXCIsIG9uRW50ZXIpO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybGVhdmVcIiwgb25MZWF2ZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZW50ZXJcIiwgb25FbnRlcik7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybGVhdmVcIiwgb25MZWF2ZSk7XG4gICAgICAgIH07XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGhvdmVyIH07XG4iLCJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdoZXktbGlzdGVuJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IGFuaW1hdGVTdHlsZSB9IGZyb20gJy4uL2FuaW1hdGUvYW5pbWF0ZS1zdHlsZS5lcy5qcyc7XG5pbXBvcnQgeyBzdHlsZSB9IGZyb20gJy4uL2FuaW1hdGUvc3R5bGUuZXMuanMnO1xuaW1wb3J0IHsgZ2V0T3B0aW9ucyB9IGZyb20gJy4uL2FuaW1hdGUvdXRpbHMvb3B0aW9ucy5lcy5qcyc7XG5pbXBvcnQgeyBoYXNDaGFuZ2VkIH0gZnJvbSAnLi91dGlscy9oYXMtY2hhbmdlZC5lcy5qcyc7XG5pbXBvcnQgeyByZXNvbHZlVmFyaWFudCB9IGZyb20gJy4vdXRpbHMvcmVzb2x2ZS12YXJpYW50LmVzLmpzJztcbmltcG9ydCB7IHNjaGVkdWxlQW5pbWF0aW9uLCB1bnNjaGVkdWxlQW5pbWF0aW9uIH0gZnJvbSAnLi91dGlscy9zY2hlZHVsZS5lcy5qcyc7XG5pbXBvcnQgeyBpblZpZXcgfSBmcm9tICcuL2dlc3R1cmVzL2luLXZpZXcuZXMuanMnO1xuaW1wb3J0IHsgaG92ZXIgfSBmcm9tICcuL2dlc3R1cmVzL2hvdmVyLmVzLmpzJztcbmltcG9ydCB7IHByZXNzIH0gZnJvbSAnLi9nZXN0dXJlcy9wcmVzcy5lcy5qcyc7XG5pbXBvcnQgeyBtb3Rpb25FdmVudCB9IGZyb20gJy4vdXRpbHMvZXZlbnRzLmVzLmpzJztcblxuY29uc3QgZ2VzdHVyZXMgPSB7IGluVmlldywgaG92ZXIsIHByZXNzIH07XG4vKipcbiAqIEEgbGlzdCBvZiBzdGF0ZSB0eXBlcywgaW4gcHJpb3JpdHkgb3JkZXIuIElmIGEgdmFsdWUgaXMgZGVmaW5lZCBpblxuICogYSByaWdodGVyLW1vc3QgdHlwZSwgaXQgd2lsbCBvdmVycmlkZSBhbnkgZGVmaW5pdGlvbiBpbiBhIGxlZnRlci1tb3N0LlxuICovXG5jb25zdCBzdGF0ZVR5cGVzID0gW1wiaW5pdGlhbFwiLCBcImFuaW1hdGVcIiwgLi4uT2JqZWN0LmtleXMoZ2VzdHVyZXMpLCBcImV4aXRcIl07XG4vKipcbiAqIEEgZ2xvYmFsIHN0b3JlIG9mIGFsbCBnZW5lcmF0ZWQgbW90aW9uIHN0YXRlcy4gVGhpcyBjYW4gYmUgdXNlZCB0byBsb29rdXBcbiAqIGEgbW90aW9uIHN0YXRlIGZvciBhIGdpdmVuIEVsZW1lbnQuXG4gKi9cbmNvbnN0IG1vdW50ZWRTdGF0ZXMgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uU3RhdGUob3B0aW9ucyA9IHt9LCBwYXJlbnQpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZWxlbWVudCByZXByZXNlbnRlZCBieSB0aGUgbW90aW9uIHN0YXRlLiBUaGlzIGlzIGFuIGVtcHR5IHJlZmVyZW5jZVxuICAgICAqIHdoZW4gd2UgY3JlYXRlIHRoZSBzdGF0ZSB0byBzdXBwb3J0IFNTUiBhbmQgYWxsb3cgZm9yIGxhdGVyIG1vdW50aW5nXG4gICAgICogaW4gdmlldyBsaWJyYXJpZXMuXG4gICAgICpcbiAgICAgKiBAdHMtaWdub3JlXG4gICAgICovXG4gICAgbGV0IGVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIGEgZGVwdGggdGhhdCB3ZSBjYW4gdXNlIHRvIG9yZGVyIG1vdGlvbiBzdGF0ZXMgYnkgdHJlZSBkZXB0aC5cbiAgICAgKi9cbiAgICBsZXQgZGVwdGggPSBwYXJlbnQgPyBwYXJlbnQuZ2V0RGVwdGgoKSArIDEgOiAwO1xuICAgIC8qKlxuICAgICAqIFRyYWNrIHdoaWNoIHN0YXRlcyBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAgICAgKi9cbiAgICBjb25zdCBhY3RpdmVTdGF0ZXMgPSB7IGluaXRpYWw6IHRydWUsIGFuaW1hdGU6IHRydWUgfTtcbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiBmdW5jdGlvbnMgdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBmb3JcbiAgICAgKiBhIGdpdmVuIGdlc3R1cmUuXG4gICAgICovXG4gICAgY29uc3QgZ2VzdHVyZVN1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlIGEgY29udGV4dCB0byBzaGFyZSB0aHJvdWdoIG1vdGlvbiBzdGF0ZXMuIFRoaXNcbiAgICAgKiB3aWxsIGJlIHBvcHVsYXRlZCBieSB2YXJpYW50IG5hbWVzIChpZiBhbnkpLlxuICAgICAqL1xuICAgIGNvbnN0IGNvbnRleHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygc3RhdGVUeXBlcykge1xuICAgICAgICBjb250ZXh0W25hbWVdID1cbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zW25hbWVdID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zW25hbWVdXG4gICAgICAgICAgICAgICAgOiBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuZ2V0Q29udGV4dCgpW25hbWVdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiBpbml0aWFsIGlzIHNldCB0byBmYWxzZSB3ZSB1c2UgdGhlIGFuaW1hdGUgcHJvcCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIGFuaW1hdGlvbiBzdGF0ZS5cbiAgICAgKi9cbiAgICBjb25zdCBpbml0aWFsVmFyaWFudFNvdXJjZSA9IG9wdGlvbnMuaW5pdGlhbCA9PT0gZmFsc2UgPyBcImFuaW1hdGVcIiA6IFwiaW5pdGlhbFwiO1xuICAgIC8qKlxuICAgICAqIERlc3RydWN0dXJlIGFuIGluaXRpYWwgdGFyZ2V0IG91dCBmcm9tIHRoZSByZXNvbHZlZCBpbml0aWFsIHZhcmlhbnQuXG4gICAgICovXG4gICAgbGV0IF9hID0gcmVzb2x2ZVZhcmlhbnQob3B0aW9uc1tpbml0aWFsVmFyaWFudFNvdXJjZV0gfHwgY29udGV4dFtpbml0aWFsVmFyaWFudFNvdXJjZV0sIG9wdGlvbnMudmFyaWFudHMpIHx8IHt9LCB0YXJnZXQgPSBfX3Jlc3QoX2EsIFtcInRyYW5zaXRpb25cIl0pO1xuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIHRhcmdldCBpcyBhIGNhY2hlZCBtYXAgb2YgdmFsdWVzIHRoYXQgd2UnbGwgdXNlIHRvIGFuaW1hdGVcbiAgICAgKiBiYWNrIHRvIGlmIGEgdmFsdWUgaXMgcmVtb3ZlZCBmcm9tIGFsbCBhY3RpdmUgc3RhdGUgdHlwZXMuIFRoaXNcbiAgICAgKiBpcyB1c3VhbGx5IHRoZSBpbml0aWFsIHZhbHVlIGFzIHJlYWQgZnJvbSB0aGUgRE9NLCBmb3IgaW5zdGFuY2UgaWZcbiAgICAgKiBpdCBoYXNuJ3QgYmVlbiBkZWZpbmVkIGluIGluaXRpYWwuXG4gICAgICovXG4gICAgY29uc3QgYmFzZVRhcmdldCA9IE9iamVjdC5hc3NpZ24oe30sIHRhcmdldCk7XG4gICAgLyoqXG4gICAgICogQSBnZW5lcmF0b3IgdGhhdCB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGUgZ2xvYmFsIGFuaW1hdGlvbiBzY2hlZHVsZXIuXG4gICAgICogVGhpcyB5ZWlsZHMgd2hlbiBpdCBzd2l0Y2hlcyBmcm9tIHJlYWRpbmcgdGhlIERPTSB0byB3cml0aW5nIHRvIGl0XG4gICAgICogdG8gcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uKiBhbmltYXRlVXBkYXRlcygpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgcHJldlRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGFyZ2V0ID0ge307XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHN0YXRlVHlwZXMpIHtcbiAgICAgICAgICAgIGlmICghYWN0aXZlU3RhdGVzW25hbWVdKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgdmFyaWFudCA9IHJlc29sdmVWYXJpYW50KG9wdGlvbnNbbmFtZV0pO1xuICAgICAgICAgICAgaWYgKCF2YXJpYW50KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFyaWFudCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IFwidHJhbnNpdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhcmlhbnRba2V5XTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25PcHRpb25zW2tleV0gPSBnZXRPcHRpb25zKChfYiA9IChfYSA9IHZhcmlhbnQudHJhbnNpdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogb3B0aW9ucy50cmFuc2l0aW9uKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB7fSwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbGxUYXJnZXRLZXlzID0gbmV3IFNldChbXG4gICAgICAgICAgICAuLi5PYmplY3Qua2V5cyh0YXJnZXQpLFxuICAgICAgICAgICAgLi4uT2JqZWN0LmtleXMocHJldlRhcmdldCksXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBhbmltYXRpb25GYWN0b3JpZXMgPSBbXTtcbiAgICAgICAgYWxsVGFyZ2V0S2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBiYXNlVGFyZ2V0W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzQ2hhbmdlZChwcmV2VGFyZ2V0W2tleV0sIHRhcmdldFtrZXldKSkge1xuICAgICAgICAgICAgICAgIChfYSA9IGJhc2VUYXJnZXRba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKGJhc2VUYXJnZXRba2V5XSA9IHN0eWxlLmdldChlbGVtZW50LCBrZXkpKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25GYWN0b3JpZXMucHVzaChhbmltYXRlU3R5bGUoZWxlbWVudCwga2V5LCB0YXJnZXRba2V5XSwgYW5pbWF0aW9uT3B0aW9uc1trZXldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBXYWl0IGZvciBhbGwgYW5pbWF0aW9uIHN0YXRlcyB0byByZWFkIGZyb20gdGhlIERPTVxuICAgICAgICB5aWVsZDtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IGFuaW1hdGlvbkZhY3Rvcmllc1xuICAgICAgICAgICAgLm1hcCgoZmFjdG9yeSkgPT4gZmFjdG9yeSgpKVxuICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgaWYgKCFhbmltYXRpb25zLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uVGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobW90aW9uRXZlbnQoXCJtb3Rpb25zdGFydFwiLCBhbmltYXRpb25UYXJnZXQpKTtcbiAgICAgICAgUHJvbWlzZS5hbGwoYW5pbWF0aW9ucy5tYXAoKGFuaW1hdGlvbikgPT4gYW5pbWF0aW9uLmZpbmlzaGVkKSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChtb3Rpb25FdmVudChcIm1vdGlvbmNvbXBsZXRlXCIsIGFuaW1hdGlvblRhcmdldCkpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKG5vb3ApO1xuICAgIH1cbiAgICBjb25zdCBzZXRHZXN0dXJlID0gKG5hbWUsIGlzQWN0aXZlKSA9PiAoKSA9PiB7XG4gICAgICAgIGFjdGl2ZVN0YXRlc1tuYW1lXSA9IGlzQWN0aXZlO1xuICAgICAgICBzY2hlZHVsZUFuaW1hdGlvbihzdGF0ZSk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVHZXN0dXJlU3Vic2NyaXB0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGdlc3R1cmVzKSB7XG4gICAgICAgICAgICBjb25zdCBpc0dlc3R1cmVBY3RpdmUgPSBnZXN0dXJlc1tuYW1lXS5pc0FjdGl2ZShvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9IGdlc3R1cmVTdWJzY3JpcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgaWYgKGlzR2VzdHVyZUFjdGl2ZSAmJiAhcmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgZ2VzdHVyZVN1YnNjcmlwdGlvbnNbbmFtZV0gPSBnZXN0dXJlc1tuYW1lXS5zdWJzY3JpYmUoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGU6IHNldEdlc3R1cmUobmFtZSwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGU6IHNldEdlc3R1cmUobmFtZSwgZmFsc2UpLFxuICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzR2VzdHVyZUFjdGl2ZSAmJiByZW1vdmUpIHtcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZ2VzdHVyZVN1YnNjcmlwdGlvbnNbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICB1cGRhdGU6IChuZXdPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICB1cGRhdGVHZXN0dXJlU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICAgICAgc2NoZWR1bGVBbmltYXRpb24oc3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRBY3RpdmU6IChuYW1lLCBpc0FjdGl2ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGFjdGl2ZVN0YXRlc1tuYW1lXSA9IGlzQWN0aXZlO1xuICAgICAgICAgICAgc2NoZWR1bGVBbmltYXRpb24oc3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICBhbmltYXRlVXBkYXRlcyxcbiAgICAgICAgZ2V0RGVwdGg6ICgpID0+IGRlcHRoLFxuICAgICAgICBnZXRUYXJnZXQ6ICgpID0+IHRhcmdldCxcbiAgICAgICAgZ2V0T3B0aW9uczogKCkgPT4gb3B0aW9ucyxcbiAgICAgICAgZ2V0Q29udGV4dDogKCkgPT4gY29udGV4dCxcbiAgICAgICAgbW91bnQ6IChuZXdFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpbnZhcmlhbnQoQm9vbGVhbihuZXdFbGVtZW50KSwgXCJBbmltYXRpb24gc3RhdGUgbXVzdCBiZSBtb3VudGVkIHdpdGggdmFsaWQgRWxlbWVudFwiKTtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBuZXdFbGVtZW50O1xuICAgICAgICAgICAgbW91bnRlZFN0YXRlcy5zZXQoZWxlbWVudCwgc3RhdGUpO1xuICAgICAgICAgICAgdXBkYXRlR2VzdHVyZVN1YnNjcmlwdGlvbnMoKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW91bnRlZFN0YXRlcy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdW5zY2hlZHVsZUFuaW1hdGlvbihzdGF0ZSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZ2VzdHVyZVN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VzdHVyZVN1YnNjcmlwdGlvbnNba2V5XSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGlzTW91bnRlZDogKCkgPT4gQm9vbGVhbihlbGVtZW50KSxcbiAgICB9O1xuICAgIHJldHVybiBzdGF0ZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlTW90aW9uU3RhdGUsIG1vdW50ZWRTdGF0ZXMgfTtcbiIsImltcG9ydCB7IGRpc3BhdGNoUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vdXRpbHMvZXZlbnRzLmVzLmpzJztcblxuY29uc3QgcHJlc3MgPSB7XG4gICAgaXNBY3RpdmU6IChvcHRpb25zKSA9PiBCb29sZWFuKG9wdGlvbnMucHJlc3MpLFxuICAgIHN1YnNjcmliZTogKGVsZW1lbnQsIHsgZW5hYmxlLCBkaXNhYmxlIH0pID0+IHtcbiAgICAgICAgY29uc3Qgb25Qb2ludGVyVXAgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGRpc2FibGUoKTtcbiAgICAgICAgICAgIGRpc3BhdGNoUG9pbnRlckV2ZW50KGVsZW1lbnQsIFwicHJlc3NlbmRcIiwgZXZlbnQpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgb25Qb2ludGVyVXApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvblBvaW50ZXJEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBlbmFibGUoKTtcbiAgICAgICAgICAgIGRpc3BhdGNoUG9pbnRlckV2ZW50KGVsZW1lbnQsIFwicHJlc3NzdGFydFwiLCBldmVudCk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBvblBvaW50ZXJVcCk7XG4gICAgICAgIH07XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIG9uUG9pbnRlckRvd24pO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgb25Qb2ludGVyRG93bik7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBvblBvaW50ZXJVcCk7XG4gICAgICAgIH07XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IHByZXNzIH07XG4iLCJmdW5jdGlvbiBoYXNDaGFuZ2VkKGEsIGIpIHtcbiAgICBpZiAodHlwZW9mIGEgIT09IHR5cGVvZiBiKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKVxuICAgICAgICByZXR1cm4gIXNoYWxsb3dDb21wYXJlKGEsIGIpO1xuICAgIHJldHVybiBhICE9PSBiO1xufVxuZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikge1xuICAgIGNvbnN0IHByZXZMZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgICBpZiAocHJldkxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJldltpXSAhPT0gbmV4dFtpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCB7IGhhc0NoYW5nZWQsIHNoYWxsb3dDb21wYXJlIH07XG4iLCJpbXBvcnQgeyBpc051bWJlciB9IGZyb20gJ0Btb3Rpb25vbmUvdXRpbHMnO1xuaW1wb3J0IHsgaXNUcmFuc2Zvcm0sIHRyYW5zZm9ybUFsaWFzLCBhc1RyYW5zZm9ybUNzc1ZhciwgdHJhbnNmb3JtRGVmaW5pdGlvbnMsIGJ1aWxkVHJhbnNmb3JtVGVtcGxhdGUgfSBmcm9tICcuL3RyYW5zZm9ybXMuZXMuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZXMoa2V5ZnJhbWVzKSB7XG4gICAgY29uc3QgaW5pdGlhbEtleWZyYW1lcyA9IHt9O1xuICAgIGNvbnN0IHRyYW5zZm9ybUtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0ga2V5ZnJhbWVzW2tleV07XG4gICAgICAgIGlmIChpc1RyYW5zZm9ybShrZXkpKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtQWxpYXNba2V5XSlcbiAgICAgICAgICAgICAgICBrZXkgPSB0cmFuc2Zvcm1BbGlhc1trZXldO1xuICAgICAgICAgICAgdHJhbnNmb3JtS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICBrZXkgPSBhc1RyYW5zZm9ybUNzc1ZhcihrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpbml0aWFsS2V5ZnJhbWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlWzBdIDogdmFsdWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGlzIGEgbnVtYmVyIGFuZCB3ZSBoYXZlIGEgZGVmYXVsdCB2YWx1ZSB0eXBlLCBjb252ZXJ0IHRoZSBudW1iZXJcbiAgICAgICAgICogdG8gdGhpcyB0eXBlLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHRyYW5zZm9ybURlZmluaXRpb25zLmdldChrZXkpO1xuICAgICAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgaW5pdGlhbEtleWZyYW1lID0gaXNOdW1iZXIodmFsdWUpXG4gICAgICAgICAgICAgICAgPyBkZWZpbml0aW9uLnRvRGVmYXVsdFVuaXQodmFsdWUpXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbml0aWFsS2V5ZnJhbWVzW2tleV0gPSBpbml0aWFsS2V5ZnJhbWU7XG4gICAgfVxuICAgIGlmICh0cmFuc2Zvcm1LZXlzLmxlbmd0aCkge1xuICAgICAgICBpbml0aWFsS2V5ZnJhbWVzLnRyYW5zZm9ybSA9IGJ1aWxkVHJhbnNmb3JtVGVtcGxhdGUodHJhbnNmb3JtS2V5cyk7XG4gICAgfVxuICAgIHJldHVybiBpbml0aWFsS2V5ZnJhbWVzO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdHlsZXMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZVN0eWxlcyB9IGZyb20gJy4vc3R5bGUtb2JqZWN0LmVzLmpzJztcblxuY29uc3QgY2FtZWxMZXR0ZXJUb1BpcGVMZXR0ZXIgPSAobGV0dGVyKSA9PiBgLSR7bGV0dGVyLnRvTG93ZXJDYXNlKCl9YDtcbmNvbnN0IGNhbWVsVG9QaXBlQ2FzZSA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC9bQS1aXS9nLCBjYW1lbExldHRlclRvUGlwZUxldHRlcik7XG5mdW5jdGlvbiBjcmVhdGVTdHlsZVN0cmluZyh0YXJnZXQgPSB7fSkge1xuICAgIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZVN0eWxlcyh0YXJnZXQpO1xuICAgIGxldCBzdHlsZSA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGVzKSB7XG4gICAgICAgIHN0eWxlICs9IGtleS5zdGFydHNXaXRoKFwiLS1cIikgPyBrZXkgOiBjYW1lbFRvUGlwZUNhc2Uoa2V5KTtcbiAgICAgICAgc3R5bGUgKz0gYDogJHtzdHlsZXNba2V5XX07IGA7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU3R5bGVTdHJpbmcgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgaGV5TGlzdGVuID0gcmVxdWlyZSgnaGV5LWxpc3RlbicpO1xudmFyIHN5bmMgPSByZXF1aXJlKCdmcmFtZXN5bmMnKTtcbnZhciBwb3Btb3Rpb24gPSByZXF1aXJlKCdwb3Btb3Rpb24nKTtcbnZhciBzdHlsZVZhbHVlVHlwZXMgPSByZXF1aXJlKCdzdHlsZS12YWx1ZS10eXBlcycpO1xudmFyIGRvbSA9IHJlcXVpcmUoJ0Btb3Rpb25vbmUvZG9tJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeSAoZSkgeyByZXR1cm4gZSAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCcgJiYgJ2RlZmF1bHQnIGluIGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcE5hbWVzcGFjZShlKSB7XG4gICAgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTtcbiAgICB2YXIgbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKGUpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgaWYgKGsgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBrKTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgaywgZC5nZXQgPyBkIDoge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVba107IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5bXCJkZWZhdWx0XCJdID0gZTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbn1cblxudmFyIFJlYWN0X19uYW1lc3BhY2UgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BOYW1lc3BhY2UoUmVhY3QpO1xudmFyIFJlYWN0X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShSZWFjdCk7XG52YXIgc3luY19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koc3luYyk7XG5cbi8qKlxuICogQnJvd3Nlci1zYWZlIHVzYWdlIG9mIHByb2Nlc3NcbiAqL1xudmFyIGRlZmF1bHRFbnZpcm9ubWVudCA9IFwicHJvZHVjdGlvblwiO1xudmFyIGVudiA9IHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiIHx8IHByb2Nlc3MuZW52ID09PSB1bmRlZmluZWRcbiAgICA/IGRlZmF1bHRFbnZpcm9ubWVudFxuICAgIDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgZGVmYXVsdEVudmlyb25tZW50O1xuXG52YXIgY3JlYXRlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIChwcm9wTmFtZXMpIHsgcmV0dXJuICh7XG4gICAgaXNFbmFibGVkOiBmdW5jdGlvbiAocHJvcHMpIHsgcmV0dXJuIHByb3BOYW1lcy5zb21lKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhIXByb3BzW25hbWVdOyB9KTsgfSxcbn0pOyB9O1xudmFyIGZlYXR1cmVEZWZpbml0aW9ucyA9IHtcbiAgICBtZWFzdXJlTGF5b3V0OiBjcmVhdGVEZWZpbml0aW9uKFtcImxheW91dFwiLCBcImxheW91dElkXCIsIFwiZHJhZ1wiXSksXG4gICAgYW5pbWF0aW9uOiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJhbmltYXRlXCIsXG4gICAgICAgIFwiZXhpdFwiLFxuICAgICAgICBcInZhcmlhbnRzXCIsXG4gICAgICAgIFwid2hpbGVIb3ZlclwiLFxuICAgICAgICBcIndoaWxlVGFwXCIsXG4gICAgICAgIFwid2hpbGVGb2N1c1wiLFxuICAgICAgICBcIndoaWxlRHJhZ1wiLFxuICAgICAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgXSksXG4gICAgZXhpdDogY3JlYXRlRGVmaW5pdGlvbihbXCJleGl0XCJdKSxcbiAgICBkcmFnOiBjcmVhdGVEZWZpbml0aW9uKFtcImRyYWdcIiwgXCJkcmFnQ29udHJvbHNcIl0pLFxuICAgIGZvY3VzOiBjcmVhdGVEZWZpbml0aW9uKFtcIndoaWxlRm9jdXNcIl0pLFxuICAgIGhvdmVyOiBjcmVhdGVEZWZpbml0aW9uKFtcIndoaWxlSG92ZXJcIiwgXCJvbkhvdmVyU3RhcnRcIiwgXCJvbkhvdmVyRW5kXCJdKSxcbiAgICB0YXA6IGNyZWF0ZURlZmluaXRpb24oW1wid2hpbGVUYXBcIiwgXCJvblRhcFwiLCBcIm9uVGFwU3RhcnRcIiwgXCJvblRhcENhbmNlbFwiXSksXG4gICAgcGFuOiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJvblBhblwiLFxuICAgICAgICBcIm9uUGFuU3RhcnRcIixcbiAgICAgICAgXCJvblBhblNlc3Npb25TdGFydFwiLFxuICAgICAgICBcIm9uUGFuRW5kXCIsXG4gICAgXSksXG4gICAgaW5WaWV3OiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJ3aGlsZUluVmlld1wiLFxuICAgICAgICBcIm9uVmlld3BvcnRFbnRlclwiLFxuICAgICAgICBcIm9uVmlld3BvcnRMZWF2ZVwiLFxuICAgIF0pLFxufTtcbmZ1bmN0aW9uIGxvYWRGZWF0dXJlcyhmZWF0dXJlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBmZWF0dXJlcykge1xuICAgICAgICBpZiAoZmVhdHVyZXNba2V5XSA9PT0gbnVsbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoa2V5ID09PSBcInByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgZmVhdHVyZURlZmluaXRpb25zLnByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IgPSBmZWF0dXJlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmVhdHVyZURlZmluaXRpb25zW2tleV0uQ29tcG9uZW50ID0gZmVhdHVyZXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIExhenlDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7IHN0cmljdDogZmFsc2UgfSk7XG5cbnZhciBmZWF0dXJlTmFtZXMgPSBPYmplY3Qua2V5cyhmZWF0dXJlRGVmaW5pdGlvbnMpO1xudmFyIG51bUZlYXR1cmVzID0gZmVhdHVyZU5hbWVzLmxlbmd0aDtcbi8qKlxuICogTG9hZCBmZWF0dXJlcyB2aWEgcmVuZGVybGVzcyBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBNb3Rpb25Qcm9wcy5cbiAqL1xuZnVuY3Rpb24gdXNlRmVhdHVyZXMocHJvcHMsIHZpc3VhbEVsZW1lbnQsIHByZWxvYWRlZEZlYXR1cmVzKSB7XG4gICAgdmFyIGZlYXR1cmVzID0gW107XG4gICAgdmFyIGxhenlDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMYXp5Q29udGV4dCk7XG4gICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSdyZSBpbiBkZXZlbG9wbWVudCBtb2RlLCBjaGVjayB0byBtYWtlIHN1cmUgd2UncmUgbm90IHJlbmRlcmluZyBhIG1vdGlvbiBjb21wb25lbnRcbiAgICAgKiBhcyBhIGNoaWxkIG9mIExhenlNb3Rpb24sIGFzIHRoaXMgd2lsbCBicmVhayB0aGUgZmlsZS1zaXplIGJlbmVmaXRzIG9mIHVzaW5nIGl0LlxuICAgICAqL1xuICAgIGlmIChlbnYgIT09IFwicHJvZHVjdGlvblwiICYmIHByZWxvYWRlZEZlYXR1cmVzICYmIGxhenlDb250ZXh0LnN0cmljdCkge1xuICAgICAgICBoZXlMaXN0ZW4uaW52YXJpYW50KGZhbHNlLCBcIllvdSBoYXZlIHJlbmRlcmVkIGEgYG1vdGlvbmAgY29tcG9uZW50IHdpdGhpbiBhIGBMYXp5TW90aW9uYCBjb21wb25lbnQuIFRoaXMgd2lsbCBicmVhayB0cmVlIHNoYWtpbmcuIEltcG9ydCBhbmQgcmVuZGVyIGEgYG1gIGNvbXBvbmVudCBpbnN0ZWFkLlwiKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1GZWF0dXJlczsgaSsrKSB7XG4gICAgICAgIHZhciBuYW1lXzEgPSBmZWF0dXJlTmFtZXNbaV07XG4gICAgICAgIHZhciBfYSA9IGZlYXR1cmVEZWZpbml0aW9uc1tuYW1lXzFdLCBpc0VuYWJsZWQgPSBfYS5pc0VuYWJsZWQsIENvbXBvbmVudCA9IF9hLkNvbXBvbmVudDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEl0IG1pZ2h0IGJlIHBvc3NpYmxlIGluIHRoZSBmdXR1cmUgdG8gdXNlIHRoaXMgbW9tZW50IHRvXG4gICAgICAgICAqIGR5bmFtaWNhbGx5IHJlcXVlc3QgZnVuY3Rpb25hbGl0eS4gSW4gaW5pdGlhbCB0ZXN0cyB0aGlzXG4gICAgICAgICAqIHdhcyBwcm9kdWNpbmcgYSBsb3Qgb2YgZHVwbGljYXRpb24gYW1vbmdzdCBidW5kbGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlzRW5hYmxlZChwcm9wcykgJiYgQ29tcG9uZW50KSB7XG4gICAgICAgICAgICBmZWF0dXJlcy5wdXNoKFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHRzbGliLl9fYXNzaWduKHsga2V5OiBuYW1lXzEgfSwgcHJvcHMsIHsgdmlzdWFsRWxlbWVudDogdmlzdWFsRWxlbWVudCB9KSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlcztcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbnZhciBNb3Rpb25Db25maWdDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gICAgdHJhbnNmb3JtUGFnZVBvaW50OiBmdW5jdGlvbiAocCkgeyByZXR1cm4gcDsgfSxcbiAgICBpc1N0YXRpYzogZmFsc2UsXG4gICAgcmVkdWNlZE1vdGlvbjogXCJuZXZlclwiLFxufSk7XG5cbnZhciBNb3Rpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5mdW5jdGlvbiB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCgpIHtcbiAgICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db250ZXh0KS52aXN1YWxFbGVtZW50O1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFByZXNlbmNlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gaXNCcm93c2VyID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuXG4vLyBEb2VzIHRoaXMgZGV2aWNlIHByZWZlciByZWR1Y2VkIG1vdGlvbj8gUmV0dXJucyBgbnVsbGAgc2VydmVyLXNpZGUuXG52YXIgcHJlZmVyc1JlZHVjZWRNb3Rpb24gPSB7IGN1cnJlbnQ6IG51bGwgfTtcbnZhciBoYXNEZXRlY3RlZCA9IGZhbHNlO1xuZnVuY3Rpb24gaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uKCkge1xuICAgIGhhc0RldGVjdGVkID0gdHJ1ZTtcbiAgICBpZiAoIWlzQnJvd3NlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSkge1xuICAgICAgICB2YXIgbW90aW9uTWVkaWFRdWVyeV8xID0gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1yZWR1Y2VkLW1vdGlvbilcIik7XG4gICAgICAgIHZhciBzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQgPSBtb3Rpb25NZWRpYVF1ZXJ5XzEubWF0Y2hlcyk7XG4gICAgICAgIH07XG4gICAgICAgIG1vdGlvbk1lZGlhUXVlcnlfMS5hZGRMaXN0ZW5lcihzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMpO1xuICAgICAgICBzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIEEgaG9vayB0aGF0IHJldHVybnMgYHRydWVgIGlmIHdlIHNob3VsZCBiZSB1c2luZyByZWR1Y2VkIG1vdGlvbiBiYXNlZCBvbiB0aGUgY3VycmVudCBkZXZpY2UncyBSZWR1Y2VkIE1vdGlvbiBzZXR0aW5nLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gaW1wbGVtZW50IGNoYW5nZXMgdG8geW91ciBVSSBiYXNlZCBvbiBSZWR1Y2VkIE1vdGlvbi4gRm9yIGluc3RhbmNlLCByZXBsYWNpbmcgbW90aW9uLXNpY2tuZXNzIGluZHVjaW5nXG4gKiBgeGAvYHlgIGFuaW1hdGlvbnMgd2l0aCBgb3BhY2l0eWAsIGRpc2FibGluZyB0aGUgYXV0b3BsYXkgb2YgYmFja2dyb3VuZCB2aWRlb3MsIG9yIHR1cm5pbmcgb2ZmIHBhcmFsbGF4IG1vdGlvbi5cbiAqXG4gKiBJdCB3aWxsIGFjdGl2ZWx5IHJlc3BvbmQgdG8gY2hhbmdlcyBhbmQgcmUtcmVuZGVyIHlvdXIgY29tcG9uZW50cyB3aXRoIHRoZSBsYXRlc3Qgc2V0dGluZy5cbiAqXG4gKiBgYGBqc3hcbiAqIGV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyKHsgaXNPcGVuIH0pIHtcbiAqICAgY29uc3Qgc2hvdWxkUmVkdWNlTW90aW9uID0gdXNlUmVkdWNlZE1vdGlvbigpXG4gKiAgIGNvbnN0IGNsb3NlZFggPSBzaG91bGRSZWR1Y2VNb3Rpb24gPyAwIDogXCItMTAwJVwiXG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxtb3Rpb24uZGl2IGFuaW1hdGU9e3tcbiAqICAgICAgIG9wYWNpdHk6IGlzT3BlbiA/IDEgOiAwLFxuICogICAgICAgeDogaXNPcGVuID8gMCA6IGNsb3NlZFhcbiAqICAgICB9fSAvPlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIGJvb2xlYW5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZVJlZHVjZWRNb3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogTGF6eSBpbml0aWFsaXNhdGlvbiBvZiBwcmVmZXJzUmVkdWNlZE1vdGlvblxuICAgICAqL1xuICAgICFoYXNEZXRlY3RlZCAmJiBpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24oKTtcbiAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQoUmVhY3QudXNlU3RhdGUocHJlZmVyc1JlZHVjZWRNb3Rpb24uY3VycmVudCksIDEpLCBzaG91bGRSZWR1Y2VNb3Rpb24gPSBfYVswXTtcbiAgICAvKipcbiAgICAgKiBUT0RPIFNlZSBpZiBwZW9wbGUgbWlzcyBhdXRvbWF0aWNhbGx5IHVwZGF0aW5nIHNob3VsZFJlZHVjZU1vdGlvbiBzZXR0aW5nXG4gICAgICovXG4gICAgcmV0dXJuIHNob3VsZFJlZHVjZU1vdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVJlZHVjZWRNb3Rpb25Db25maWcoKSB7XG4gICAgdmFyIHJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlID0gdXNlUmVkdWNlZE1vdGlvbigpO1xuICAgIHZhciByZWR1Y2VkTW90aW9uID0gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS5yZWR1Y2VkTW90aW9uO1xuICAgIGlmIChyZWR1Y2VkTW90aW9uID09PSBcIm5ldmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZWR1Y2VkTW90aW9uID09PSBcImFsd2F5c1wiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXNlVmlzdWFsRWxlbWVudChDb21wb25lbnQsIHZpc3VhbFN0YXRlLCBwcm9wcywgY3JlYXRlVmlzdWFsRWxlbWVudCkge1xuICAgIHZhciBsYXp5Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGF6eUNvbnRleHQpO1xuICAgIHZhciBwYXJlbnQgPSB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCgpO1xuICAgIHZhciBwcmVzZW5jZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgdmFyIHNob3VsZFJlZHVjZU1vdGlvbiA9IHVzZVJlZHVjZWRNb3Rpb25Db25maWcoKTtcbiAgICB2YXIgdmlzdWFsRWxlbWVudFJlZiA9IFJlYWN0LnVzZVJlZih1bmRlZmluZWQpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmVuJ3QgcHJlbG9hZGVkIGEgcmVuZGVyZXIsIGNoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIG9uZSBsYXp5LWxvYWRlZFxuICAgICAqL1xuICAgIGlmICghY3JlYXRlVmlzdWFsRWxlbWVudClcbiAgICAgICAgY3JlYXRlVmlzdWFsRWxlbWVudCA9IGxhenlDb250ZXh0LnJlbmRlcmVyO1xuICAgIGlmICghdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50ICYmIGNyZWF0ZVZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50ID0gY3JlYXRlVmlzdWFsRWxlbWVudChDb21wb25lbnQsIHtcbiAgICAgICAgICAgIHZpc3VhbFN0YXRlOiB2aXN1YWxTdGF0ZSxcbiAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICAgICAgcHJlc2VuY2VJZDogcHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmlkLFxuICAgICAgICAgICAgYmxvY2tJbml0aWFsQW5pbWF0aW9uOiAocHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmluaXRpYWwpID09PSBmYWxzZSxcbiAgICAgICAgICAgIHNob3VsZFJlZHVjZU1vdGlvbjogc2hvdWxkUmVkdWNlTW90aW9uLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIHZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQ7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdmlzdWFsRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmlzdWFsRWxlbWVudC5zeW5jUmVuZGVyKCk7XG4gICAgfSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50ID09PSBudWxsIHx8IHZpc3VhbEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hbmltYXRlQ2hhbmdlcygpO1xuICAgIH0pO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmlzdWFsRWxlbWVudCA9PT0gbnVsbCB8fCB2aXN1YWxFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aXN1YWxFbGVtZW50Lm5vdGlmeVVubW91bnQoKTsgfTsgfSwgW10pO1xuICAgIHJldHVybiB2aXN1YWxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1JlZk9iamVjdChyZWYpIHtcbiAgICByZXR1cm4gKHR5cGVvZiByZWYgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlZiwgXCJjdXJyZW50XCIpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVmIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBoeWRyYXRlcyB0aGUgcHJvdmlkZWRcbiAqIGV4dGVybmFsIHJlZiBhbmQgVmlzdWFsRWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gdXNlTW90aW9uUmVmKHZpc3VhbFN0YXRlLCB2aXN1YWxFbGVtZW50LCBleHRlcm5hbFJlZikge1xuICAgIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpbnN0YW5jZSAmJiAoKF9hID0gdmlzdWFsU3RhdGUubW91bnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZpc3VhbFN0YXRlLCBpbnN0YW5jZSkpO1xuICAgICAgICBpZiAodmlzdWFsRWxlbWVudCkge1xuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICA/IHZpc3VhbEVsZW1lbnQubW91bnQoaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgOiB2aXN1YWxFbGVtZW50LnVubW91bnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZXJuYWxSZWYpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZXJuYWxSZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmT2JqZWN0KGV4dGVybmFsUmVmKSkge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmLmN1cnJlbnQgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIE9ubHkgcGFzcyBhIG5ldyByZWYgY2FsbGJhY2sgdG8gUmVhY3QgaWYgd2UndmUgcmVjZWl2ZWQgYSB2aXN1YWwgZWxlbWVudFxuICAgICAqIGZhY3RvcnkuIE90aGVyd2lzZSB3ZSdsbCBiZSBtb3VudGluZy9yZW1vdW50aW5nIGV2ZXJ5IHRpbWUgZXh0ZXJuYWxSZWZcbiAgICAgKiBvciBvdGhlciBkZXBlbmRlbmNpZXMgY2hhbmdlLlxuICAgICAqL1xuICAgIFt2aXN1YWxFbGVtZW50XSk7XG59XG5cbi8qKlxuICogRGVjaWRlcyBpZiB0aGUgc3VwcGxpZWQgdmFyaWFibGUgaXMgYW4gYXJyYXkgb2YgdmFyaWFudCBsYWJlbHNcbiAqL1xuZnVuY3Rpb24gaXNWYXJpYW50TGFiZWxzKHYpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn1cbi8qKlxuICogRGVjaWRlcyBpZiB0aGUgc3VwcGxpZWQgdmFyaWFibGUgaXMgdmFyaWFudCBsYWJlbFxuICovXG5mdW5jdGlvbiBpc1ZhcmlhbnRMYWJlbCh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcInN0cmluZ1wiIHx8IGlzVmFyaWFudExhYmVscyh2KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbGF0ZXN0IHN0YXRlIG9mIGV2ZXJ5IE1vdGlvblZhbHVlIG9uIGEgVmlzdWFsRWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50KHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgY3VycmVudCA9IHt9O1xuICAgIHZpc3VhbEVsZW1lbnQuZm9yRWFjaFZhbHVlKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7IHJldHVybiAoY3VycmVudFtrZXldID0gdmFsdWUuZ2V0KCkpOyB9KTtcbiAgICByZXR1cm4gY3VycmVudDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGV2ZXJ5IE1vdGlvblZhbHVlIG9uIGEgVmlzdWFsRWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRWZWxvY2l0eSQxKHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgdmVsb2NpdHkgPSB7fTtcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZShmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gKHZlbG9jaXR5W2tleV0gPSB2YWx1ZS5nZXRWZWxvY2l0eSgpKTsgfSk7XG4gICAgcmV0dXJuIHZlbG9jaXR5O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMocHJvcHMsIGRlZmluaXRpb24sIGN1c3RvbSwgY3VycmVudFZhbHVlcywgY3VycmVudFZlbG9jaXR5KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChjdXJyZW50VmFsdWVzID09PSB2b2lkIDApIHsgY3VycmVudFZhbHVlcyA9IHt9OyB9XG4gICAgaWYgKGN1cnJlbnRWZWxvY2l0eSA9PT0gdm9pZCAwKSB7IGN1cnJlbnRWZWxvY2l0eSA9IHt9OyB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHZhcmlhbnQgZGVmaW5pdGlvbiBpcyBhIGZ1bmN0aW9uLCByZXNvbHZlLlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBkZWZpbml0aW9uKGN1c3RvbSAhPT0gbnVsbCAmJiBjdXN0b20gIT09IHZvaWQgMCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgY3VycmVudFZhbHVlcywgY3VycmVudFZlbG9jaXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHZhcmlhbnQgZGVmaW5pdGlvbiBpcyBhIHZhcmlhbnQgbGFiZWwsIG9yXG4gICAgICogdGhlIGZ1bmN0aW9uIHJldHVybmVkIGEgdmFyaWFudCBsYWJlbCwgcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IChfYSA9IHByb3BzLnZhcmlhbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbZGVmaW5pdGlvbl07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0IHRoaXMgcG9pbnQgd2UndmUgcmVzb2x2ZWQgYm90aCBmdW5jdGlvbnMgYW5kIHZhcmlhbnQgbGFiZWxzLFxuICAgICAqIGJ1dCB0aGUgcmVzb2x2ZWQgdmFyaWFudCBsYWJlbCBtaWdodCBpdHNlbGYgaGF2ZSBiZWVuIGEgZnVuY3Rpb24uXG4gICAgICogSWYgc28sIHJlc29sdmUuIFRoaXMgY2FuIG9ubHkgaGF2ZSByZXR1cm5lZCBhIHZhbGlkIHRhcmdldCBvYmplY3QuXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24oY3VzdG9tICE9PSBudWxsICYmIGN1c3RvbSAhPT0gdm9pZCAwID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbn1cbmZ1bmN0aW9uIHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIGN1c3RvbSkge1xuICAgIHZhciBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICByZXR1cm4gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMocHJvcHMsIGRlZmluaXRpb24sIGN1c3RvbSAhPT0gbnVsbCAmJiBjdXN0b20gIT09IHZvaWQgMCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSwgZ2V0VmVsb2NpdHkkMSh2aXN1YWxFbGVtZW50KSk7XG59XG5mdW5jdGlvbiBjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKHR5cGVvZiAoKF9hID0gcHJvcHMuYW5pbWF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXJ0KSA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmluaXRpYWwpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmFuaW1hdGUpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlSG92ZXIpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlRHJhZykgfHxcbiAgICAgICAgaXNWYXJpYW50TGFiZWwocHJvcHMud2hpbGVUYXApIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlRm9jdXMpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmV4aXQpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZWYXJpYW50Tm9kZShwcm9wcykge1xuICAgIHJldHVybiBCb29sZWFuKGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSB8fCBwcm9wcy52YXJpYW50cyk7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRUcmVlVmFyaWFudHMocHJvcHMsIGNvbnRleHQpIHtcbiAgICBpZiAoY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpKSB7XG4gICAgICAgIHZhciBpbml0aWFsID0gcHJvcHMuaW5pdGlhbCwgYW5pbWF0ZSA9IHByb3BzLmFuaW1hdGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0aWFsOiBpbml0aWFsID09PSBmYWxzZSB8fCBpc1ZhcmlhbnRMYWJlbChpbml0aWFsKVxuICAgICAgICAgICAgICAgID8gaW5pdGlhbFxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYW5pbWF0ZTogaXNWYXJpYW50TGFiZWwoYW5pbWF0ZSkgPyBhbmltYXRlIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuaW5oZXJpdCAhPT0gZmFsc2UgPyBjb250ZXh0IDoge307XG59XG5cbmZ1bmN0aW9uIHVzZUNyZWF0ZU1vdGlvbkNvbnRleHQocHJvcHMpIHtcbiAgICB2YXIgX2EgPSBnZXRDdXJyZW50VHJlZVZhcmlhbnRzKHByb3BzLCBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbnRleHQpKSwgaW5pdGlhbCA9IF9hLmluaXRpYWwsIGFuaW1hdGUgPSBfYS5hbmltYXRlO1xuICAgIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IGluaXRpYWw6IGluaXRpYWwsIGFuaW1hdGU6IGFuaW1hdGUgfSk7IH0sIFt2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5KGluaXRpYWwpLCB2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5KGFuaW1hdGUpXSk7XG59XG5mdW5jdGlvbiB2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5KHByb3ApIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwcm9wKSA/IHByb3Auam9pbihcIiBcIikgOiBwcm9wO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjb25zdGFudCB2YWx1ZSBvdmVyIHRoZSBsaWZlY3ljbGUgb2YgYSBjb21wb25lbnQuXG4gKlxuICogRXZlbiBpZiBgdXNlTWVtb2AgaXMgcHJvdmlkZWQgYW4gZW1wdHkgYXJyYXkgYXMgaXRzIGZpbmFsIGFyZ3VtZW50LCBpdCBkb2Vzbid0IG9mZmVyXG4gKiBhIGd1YXJhbnRlZSB0aGF0IGl0IHdvbid0IHJlLXJ1biBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyBsYXRlciBvbi4gQnkgdXNpbmcgYHVzZUNvbnN0YW50YFxuICogeW91IGNhbiBlbnN1cmUgdGhhdCBpbml0aWFsaXNlcnMgZG9uJ3QgZXhlY3V0ZSB0d2ljZSBvciBtb3JlLlxuICovXG5mdW5jdGlvbiB1c2VDb25zdGFudChpbml0KSB7XG4gICAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICBpZiAocmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBpbml0KCk7XG4gICAgfVxuICAgIHJldHVybiByZWYuY3VycmVudDtcbn1cblxuZnVuY3Rpb24gYWRkVW5pcXVlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBhcnIuaW5kZXhPZihpdGVtKSA9PT0gLTEgJiYgYXJyLnB1c2goaXRlbSk7XG59XG5mdW5jdGlvbiByZW1vdmVJdGVtKGFyciwgaXRlbSkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGluZGV4ID4gLTEgJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG59XG4vLyBBZGFwdGVkIGZyb20gYXJyYXktbW92ZVxuZnVuY3Rpb24gbW92ZUl0ZW0oX2EsIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIHZhciBfYiA9IHRzbGliLl9fcmVhZChfYSksIGFyciA9IF9iLnNsaWNlKDApO1xuICAgIHZhciBzdGFydEluZGV4ID0gZnJvbUluZGV4IDwgMCA/IGFyci5sZW5ndGggKyBmcm9tSW5kZXggOiBmcm9tSW5kZXg7XG4gICAgaWYgKHN0YXJ0SW5kZXggPj0gMCAmJiBzdGFydEluZGV4IDwgYXJyLmxlbmd0aCkge1xuICAgICAgICB2YXIgZW5kSW5kZXggPSB0b0luZGV4IDwgMCA/IGFyci5sZW5ndGggKyB0b0luZGV4IDogdG9JbmRleDtcbiAgICAgICAgdmFyIF9jID0gdHNsaWIuX19yZWFkKGFyci5zcGxpY2UoZnJvbUluZGV4LCAxKSwgMSksIGl0ZW0gPSBfY1swXTtcbiAgICAgICAgYXJyLnNwbGljZShlbmRJbmRleCwgMCwgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5cbnZhciBTdWJzY3JpcHRpb25NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbk1hbmFnZXIoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMuc3Vic2NyaXB0aW9ucywgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmVJdGVtKF90aGlzLnN1YnNjcmlwdGlvbnMsIGhhbmRsZXIpOyB9O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uTWFuYWdlci5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIG51bVN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICBpZiAoIW51bVN1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChudW1TdWJzY3JpcHRpb25zID09PSAxKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZXJlJ3Mgb25seSBhIHNpbmdsZSBoYW5kbGVyIHdlIGNhbiBqdXN0IGNhbGwgaXQgd2l0aG91dCBpbnZva2luZyBhIGxvb3AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1swXShhLCBiLCBjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3Vic2NyaXB0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ2hlY2sgd2hldGhlciB0aGUgaGFuZGxlciBleGlzdHMgYmVmb3JlIGZpcmluZyBhcyBpdCdzIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICogdGhlIHN1YnNjcmlwdGlvbnMgd2VyZSBtb2RpZmllZCBkdXJpbmcgdGhpcyBsb29wIHJ1bm5pbmcuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLnN1YnNjcmlwdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgaGFuZGxlciAmJiBoYW5kbGVyKGEsIGIsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbk1hbmFnZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpcHRpb25NYW5hZ2VyO1xufSgpKTtcblxudmFyIGlzRmxvYXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG4vKipcbiAqIGBNb3Rpb25WYWx1ZWAgaXMgdXNlZCB0byB0cmFjayB0aGUgc3RhdGUgYW5kIHZlbG9jaXR5IG9mIG1vdGlvbiB2YWx1ZXMuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgTW90aW9uVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGluaXQgLSBUaGUgaW5pdGlhdGluZyB2YWx1ZVxuICAgICAqIEBwYXJhbSBjb25maWcgLSBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICAgKlxuICAgICAqIC0gIGB0cmFuc2Zvcm1lcmA6IEEgZnVuY3Rpb24gdG8gdHJhbnNmb3JtIGluY29taW5nIHZhbHVlcyB3aXRoLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gTW90aW9uVmFsdWUoaW5pdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBidWlsZCBzdGVwIHdpdGggdGhlIGxhdGVzdCB2ZXJzaW9uIG51bWJlci5cbiAgICAgICAgICogV2hlbiBNb3Rpb25WYWx1ZXMgYXJlIHByb3ZpZGVkIHRvIG1vdGlvbiBjb21wb25lbnRzLCB3YXJuIGlmIHZlcnNpb25zIGFyZSBtaXhlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IFwiNi40LjFcIjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIER1cmF0aW9uLCBpbiBtaWxsaXNlY29uZHMsIHNpbmNlIGxhc3QgdXBkYXRpbmcgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50aW1lRGVsdGEgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGltZXN0YW1wIG9mIHRoZSBsYXN0IHRpbWUgdGhpcyBgTW90aW9uVmFsdWVgIHdhcyB1cGRhdGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZWQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb25zIHRvIG5vdGlmeSB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIHVwZGF0ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycyA9IG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdW5jdGlvbnMgdG8gbm90aWZ5IHdoZW4gdGhlIHZlbG9jaXR5IHVwZGF0ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZ1bmN0aW9ucyB0byBub3RpZnkgd2hlbiB0aGUgYE1vdGlvblZhbHVlYCB1cGRhdGVzIGFuZCBgcmVuZGVyYCBpcyBzZXQgdG8gYHRydWVgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVuZGVyU3Vic2NyaWJlcnMgPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhY2tzIHdoZXRoZXIgdGhpcyB2YWx1ZSBjYW4gb3V0cHV0IGEgdmVsb2NpdHkuIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgdHJ1ZVxuICAgICAgICAgKiBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpY2FsLCBidXQgd2UgbWlnaHQgYmUgYWJsZSB0byB3aWRlbiB0aGUgc2NvcGUgaGVyZSBhbmQgc3VwcG9ydFxuICAgICAgICAgKiBvdGhlciB2YWx1ZSB0eXBlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhblRyYWNrVmVsb2NpdHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVBbmROb3RpZnkgPSBmdW5jdGlvbiAodiwgcmVuZGVyKSB7XG4gICAgICAgICAgICBpZiAocmVuZGVyID09PSB2b2lkIDApIHsgcmVuZGVyID0gdHJ1ZTsgfVxuICAgICAgICAgICAgX3RoaXMucHJldiA9IF90aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aW1lc3RhbXBcbiAgICAgICAgICAgIHZhciBfYSA9IHN5bmMuZ2V0RnJhbWVEYXRhKCksIGRlbHRhID0gX2EuZGVsdGEsIHRpbWVzdGFtcCA9IF9hLnRpbWVzdGFtcDtcbiAgICAgICAgICAgIGlmIChfdGhpcy5sYXN0VXBkYXRlZCAhPT0gdGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGltZURlbHRhID0gZGVsdGE7XG4gICAgICAgICAgICAgICAgX3RoaXMubGFzdFVwZGF0ZWQgPSB0aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgc3luY19fZGVmYXVsdFtcImRlZmF1bHRcIl0ucG9zdFJlbmRlcihfdGhpcy5zY2hlZHVsZVZlbG9jaXR5Q2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHVwZGF0ZSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKF90aGlzLnByZXYgIT09IF90aGlzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVTdWJzY3JpYmVycy5ub3RpZnkoX3RoaXMuY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgdmVsb2NpdHkgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIGlmIChfdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzLmdldFNpemUoKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMubm90aWZ5KF90aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHJlbmRlciBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlclN1YnNjcmliZXJzLm5vdGlmeShfdGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlIGEgdmVsb2NpdHkgY2hlY2sgZm9yIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZWR1bGVWZWxvY2l0eUNoZWNrID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3luY19fZGVmYXVsdFtcImRlZmF1bHRcIl0ucG9zdFJlbmRlcihfdGhpcy52ZWxvY2l0eUNoZWNrKTsgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgYHByZXZgIHdpdGggYGN1cnJlbnRgIGlmIHRoZSB2YWx1ZSBoYXNuJ3QgYmVlbiB1cGRhdGVkIHRoaXMgZnJhbWUuXG4gICAgICAgICAqIFRoaXMgZW5zdXJlcyB2ZWxvY2l0eSBjYWxjdWxhdGlvbnMgcmV0dXJuIGAwYC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyBhbiBpbnN0YW5jZWQgYW5kIGJvdW5kIGZ1bmN0aW9uIHRvIHByZXZlbnQgZ2VuZXJhdGluZyBhIG5ld1xuICAgICAgICAgKiBmdW5jdGlvbiBvbmNlIHBlciBmcmFtZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZlbG9jaXR5Q2hlY2sgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBfYS50aW1lc3RhbXA7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wICE9PSBfdGhpcy5sYXN0VXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByZXYgPSBfdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgIF90aGlzLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMubm90aWZ5KF90aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhc0FuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJldiA9IHRoaXMuY3VycmVudCA9IGluaXQ7XG4gICAgICAgIHRoaXMuY2FuVHJhY2tWZWxvY2l0eSA9IGlzRmxvYXQodGhpcy5jdXJyZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBub3RpZmllZCB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIGlzIHVwZGF0ZWQuXG4gICAgICpcbiAgICAgKiBJdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoZSBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBXaGVuIGNhbGxpbmcgYG9uQ2hhbmdlYCBpbnNpZGUgYSBSZWFjdCBjb21wb25lbnQsIGl0IHNob3VsZCBiZSB3cmFwcGVkIHdpdGggdGhlXG4gICAgICogYHVzZUVmZmVjdGAgaG9vay4gQXMgaXQgcmV0dXJucyBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiwgdGhpcyBzaG91bGQgYmUgcmV0dXJuZWRcbiAgICAgKiBmcm9tIHRoZSBgdXNlRWZmZWN0YCBmdW5jdGlvbiB0byBlbnN1cmUgeW91IGRvbid0IGFkZCBkdXBsaWNhdGUgc3Vic2NyaWJlcnMuLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogZXhwb3J0IGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAqICAgY29uc3QgeCA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogICBjb25zdCB5ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiAgIGNvbnN0IG9wYWNpdHkgPSB1c2VNb3Rpb25WYWx1ZSgxKVxuICAgICAqXG4gICAgICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAqICAgICBmdW5jdGlvbiB1cGRhdGVPcGFjaXR5KCkge1xuICAgICAqICAgICAgIGNvbnN0IG1heFhZID0gTWF0aC5tYXgoeC5nZXQoKSwgeS5nZXQoKSlcbiAgICAgKiAgICAgICBjb25zdCBuZXdPcGFjaXR5ID0gdHJhbnNmb3JtKG1heFhZLCBbMCwgMTAwXSwgWzEsIDBdKVxuICAgICAqICAgICAgIG9wYWNpdHkuc2V0KG5ld09wYWNpdHkpXG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqICAgICBjb25zdCB1bnN1YnNjcmliZVggPSB4Lm9uQ2hhbmdlKHVwZGF0ZU9wYWNpdHkpXG4gICAgICogICAgIGNvbnN0IHVuc3Vic2NyaWJlWSA9IHkub25DaGFuZ2UodXBkYXRlT3BhY2l0eSlcbiAgICAgKlxuICAgICAqICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAqICAgICAgIHVuc3Vic2NyaWJlWCgpXG4gICAgICogICAgICAgdW5zdWJzY3JpYmVZKClcbiAgICAgKiAgICAgfVxuICAgICAqICAgfSwgW10pXG4gICAgICpcbiAgICAgKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyB4IH19IC8+XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHByaXZhdGVSZW1hcmtzXG4gICAgICpcbiAgICAgKiBXZSBjb3VsZCBsb29rIGludG8gYSBgdXNlT25DaGFuZ2VgIGhvb2sgaWYgdGhlIGFib3ZlIGxpZmVjeWNsZSBtYW5hZ2VtZW50IHByb3ZlcyBjb25mdXNpbmcuXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiB1c2VPbkNoYW5nZSh4LCAoKSA9PiB7fSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdWJzY3JpYmVyIC0gQSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBsYXRlc3QgdmFsdWUuXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhpcyBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVTdWJzY3JpYmVycy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5jbGVhckxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBub3RpZmllZCB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIHJlcXVlc3RzIGEgcmVuZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN1YnNjcmliZXIgLSBBIGZ1bmN0aW9uIHRoYXQncyBwcm92aWRlZCB0aGUgbGF0ZXN0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLm9uUmVuZGVyUmVxdWVzdCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgLy8gUmVuZGVyIGltbWVkaWF0ZWx5XG4gICAgICAgIHN1YnNjcmlwdGlvbih0aGlzLmdldCgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU3Vic2NyaWJlcnMuYWRkKHN1YnNjcmlwdGlvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIHBhc3NpdmUgZWZmZWN0IHRvIHRoZSBgTW90aW9uVmFsdWVgLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uIChwYXNzaXZlRWZmZWN0KSB7XG4gICAgICAgIHRoaXMucGFzc2l2ZUVmZmVjdCA9IHBhc3NpdmVFZmZlY3Q7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiB0aGUgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiB4LnNldCgxMClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYXRlc3QgLSBMYXRlc3QgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSByZW5kZXIgLSBXaGV0aGVyIHRvIG5vdGlmeSByZW5kZXIgc3Vic2NyaWJlcnMuIERlZmF1bHRzIHRvIGB0cnVlYFxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodiwgcmVuZGVyKSB7XG4gICAgICAgIGlmIChyZW5kZXIgPT09IHZvaWQgMCkgeyByZW5kZXIgPSB0cnVlOyB9XG4gICAgICAgIGlmICghcmVuZGVyIHx8ICF0aGlzLnBhc3NpdmVFZmZlY3QpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5kTm90aWZ5KHYsIHJlbmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhc3NpdmVFZmZlY3QodiwgdGhpcy51cGRhdGVBbmROb3RpZnkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3Qgc3RhdGUgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHJldHVybnMgLSBUaGUgbGF0ZXN0IHN0YXRlIG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5nZXRQcmV2aW91cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBgTW90aW9uVmFsdWVgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyAtIFRoZSBsYXRlc3QgdmVsb2NpdHkgb2YgYE1vdGlvblZhbHVlYC4gUmV0dXJucyBgMGAgaWYgdGhlIHN0YXRlIGlzIG5vbi1udW1lcmljYWwuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmdldFZlbG9jaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGlzRmxvYXQodGhpcy5wcmV2KSAmJiBpc0Zsb2F0KHRoaXMuY3VycmVudCksIGJ1dCB0aGF0IHdvdWxkIGJlIHdhc3RlZnVsXG4gICAgICAgIHJldHVybiB0aGlzLmNhblRyYWNrVmVsb2NpdHlcbiAgICAgICAgICAgID8gLy8gVGhlc2UgY2FzdHMgY291bGQgYmUgYXZvaWRlZCBpZiBwYXJzZUZsb2F0IHdvdWxkIGJlIHR5cGVkIGJldHRlclxuICAgICAgICAgICAgICAgIHBvcG1vdGlvbi52ZWxvY2l0eVBlclNlY29uZChwYXJzZUZsb2F0KHRoaXMuY3VycmVudCkgLVxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHRoaXMucHJldiksIHRoaXMudGltZURlbHRhKVxuICAgICAgICAgICAgOiAwO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbmV3IGFuaW1hdGlvbiB0byBjb250cm9sIHRoaXMgYE1vdGlvblZhbHVlYC4gT25seSBvbmVcbiAgICAgKiBhbmltYXRpb24gY2FuIGRyaXZlIGEgYE1vdGlvblZhbHVlYCBhdCBvbmUgdGltZS5cbiAgICAgKlxuICAgICAqIGBgYGpzeFxuICAgICAqIHZhbHVlLnN0YXJ0KClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbmltYXRpb24gLSBBIGZ1bmN0aW9uIHRoYXQgc3RhcnRzIHRoZSBwcm92aWRlZCBhbmltYXRpb25cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgX3RoaXMuaGFzQW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuc3RvcEFuaW1hdGlvbiA9IGFuaW1hdGlvbihyZXNvbHZlKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5jbGVhckFuaW1hdGlvbigpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0b3AgdGhlIGN1cnJlbnRseSBhY3RpdmUgYW5pbWF0aW9uLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zdG9wQW5pbWF0aW9uKVxuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgIHRoaXMuY2xlYXJBbmltYXRpb24oKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgdmFsdWUgaXMgY3VycmVudGx5IGFuaW1hdGluZy5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuaXNBbmltYXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc3RvcEFuaW1hdGlvbjtcbiAgICB9O1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5jbGVhckFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uID0gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYW5kIGNsZWFuIHVwIHN1YnNjcmliZXJzIHRvIHRoaXMgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIFRoZSBgTW90aW9uVmFsdWVgIGhvb2tzIGxpa2UgYHVzZU1vdGlvblZhbHVlYCBhbmQgYHVzZVRyYW5zZm9ybWAgYXV0b21hdGljYWxseVxuICAgICAqIGhhbmRsZSB0aGUgbGlmZWN5Y2xlIG9mIHRoZSByZXR1cm5lZCBgTW90aW9uVmFsdWVgLCBzbyB0aGlzIG1ldGhvZCBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB5b3UndmUgbWFudWFsbHlcbiAgICAgKiBjcmVhdGVkIGEgYE1vdGlvblZhbHVlYCB2aWEgdGhlIGBtb3Rpb25WYWx1ZWAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJTdWJzY3JpYmVycy5jbGVhcigpO1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICB9O1xuICAgIHJldHVybiBNb3Rpb25WYWx1ZTtcbn0oKSk7XG5mdW5jdGlvbiBtb3Rpb25WYWx1ZShpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBNb3Rpb25WYWx1ZShpbml0KTtcbn1cblxudmFyIGlzTW90aW9uVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gQm9vbGVhbih2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUuZ2V0VmVsb2NpdHkpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xuICpcbiAqIEBwYXJhbSBzZWNvbmRzIC0gVGltZSBpbiBzZWNvbmRzLlxuICogQHJldHVybiBtaWxsaXNlY29uZHMgLSBDb252ZXJ0ZWQgdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKi9cbnZhciBzZWNvbmRzVG9NaWxsaXNlY29uZHMgPSBmdW5jdGlvbiAoc2Vjb25kcykgeyByZXR1cm4gc2Vjb25kcyAqIDEwMDA7IH07XG5cbnZhciBlYXNpbmdMb29rdXAgPSB7XG4gICAgbGluZWFyOiBwb3Btb3Rpb24ubGluZWFyLFxuICAgIGVhc2VJbjogcG9wbW90aW9uLmVhc2VJbixcbiAgICBlYXNlSW5PdXQ6IHBvcG1vdGlvbi5lYXNlSW5PdXQsXG4gICAgZWFzZU91dDogcG9wbW90aW9uLmVhc2VPdXQsXG4gICAgY2lyY0luOiBwb3Btb3Rpb24uY2lyY0luLFxuICAgIGNpcmNJbk91dDogcG9wbW90aW9uLmNpcmNJbk91dCxcbiAgICBjaXJjT3V0OiBwb3Btb3Rpb24uY2lyY091dCxcbiAgICBiYWNrSW46IHBvcG1vdGlvbi5iYWNrSW4sXG4gICAgYmFja0luT3V0OiBwb3Btb3Rpb24uYmFja0luT3V0LFxuICAgIGJhY2tPdXQ6IHBvcG1vdGlvbi5iYWNrT3V0LFxuICAgIGFudGljaXBhdGU6IHBvcG1vdGlvbi5hbnRpY2lwYXRlLFxuICAgIGJvdW5jZUluOiBwb3Btb3Rpb24uYm91bmNlSW4sXG4gICAgYm91bmNlSW5PdXQ6IHBvcG1vdGlvbi5ib3VuY2VJbk91dCxcbiAgICBib3VuY2VPdXQ6IHBvcG1vdGlvbi5ib3VuY2VPdXQsXG59O1xudmFyIGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uID0gZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgICAgICAvLyBJZiBjdWJpYyBiZXppZXIgZGVmaW5pdGlvbiwgY3JlYXRlIGJlemllciBjdXJ2ZVxuICAgICAgICBoZXlMaXN0ZW4uaW52YXJpYW50KGRlZmluaXRpb24ubGVuZ3RoID09PSA0LCBcIkN1YmljIGJlemllciBhcnJheXMgbXVzdCBjb250YWluIGZvdXIgbnVtZXJpY2FsIHZhbHVlcy5cIik7XG4gICAgICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZChkZWZpbml0aW9uLCA0KSwgeDEgPSBfYVswXSwgeTEgPSBfYVsxXSwgeDIgPSBfYVsyXSwgeTIgPSBfYVszXTtcbiAgICAgICAgcmV0dXJuIHBvcG1vdGlvbi5jdWJpY0Jlemllcih4MSwgeTEsIHgyLCB5Mik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIC8vIEVsc2UgbG9va3VwIGZyb20gdGFibGVcbiAgICAgICAgaGV5TGlzdGVuLmludmFyaWFudChlYXNpbmdMb29rdXBbZGVmaW5pdGlvbl0gIT09IHVuZGVmaW5lZCwgXCJJbnZhbGlkIGVhc2luZyB0eXBlICdcIi5jb25jYXQoZGVmaW5pdGlvbiwgXCInXCIpKTtcbiAgICAgICAgcmV0dXJuIGVhc2luZ0xvb2t1cFtkZWZpbml0aW9uXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmluaXRpb247XG59O1xudmFyIGlzRWFzaW5nQXJyYXkgPSBmdW5jdGlvbiAoZWFzZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGVhc2UpICYmIHR5cGVvZiBlYXNlWzBdICE9PSBcIm51bWJlclwiO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGFuaW1hdGFibGUuIEV4YW1wbGVzOlxuICpcbiAqIOKchTogMTAwLCBcIjEwMHB4XCIsIFwiI2ZmZlwiXG4gKiDinYw6IFwiYmxvY2tcIiwgXCJ1cmwoMi5qcGcpXCJcbiAqIEBwYXJhbSB2YWx1ZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgaXNBbmltYXRhYmxlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAvLyBJZiB0aGUgbGlzdCBvZiBrZXlzIHRhdCBtaWdodCBiZSBub24tYW5pbWF0YWJsZSBncm93cywgcmVwbGFjZSB3aXRoIFNldFxuICAgIGlmIChrZXkgPT09IFwiekluZGV4XCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBJZiBpdCdzIGEgbnVtYmVyIG9yIGEga2V5ZnJhbWVzIGFycmF5LCB3ZSBjYW4gYW5pbWF0ZSBpdC4gV2UgbWlnaHQgYXQgc29tZSBwb2ludFxuICAgIC8vIG5lZWQgdG8gZG8gYSBkZWVwIGlzQW5pbWF0YWJsZSBjaGVjayBvZiBrZXlmcmFtZXMsIG9yIGxldCBQb3Btb3Rpb24gaGFuZGxlIHRoaXMsXG4gICAgLy8gYnV0IGZvciBub3cgbGV0cyBsZWF2ZSBpdCBsaWtlIHRoaXMgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIC8vIEl0J3MgYW5pbWF0YWJsZSBpZiB3ZSBoYXZlIGEgc3RyaW5nXG4gICAgICAgIHN0eWxlVmFsdWVUeXBlcy5jb21wbGV4LnRlc3QodmFsdWUpICYmIC8vIEFuZCBpdCBjb250YWlucyBudW1iZXJzIGFuZC9vciBjb2xvcnNcbiAgICAgICAgIXZhbHVlLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpIC8vIFVubGVzcyBpdCBzdGFydHMgd2l0aCBcInVybChcIlxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGlzS2V5ZnJhbWVzVGFyZ2V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn07XG5cbnZhciB1bmRlckRhbXBlZFNwcmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgdHlwZTogXCJzcHJpbmdcIixcbiAgICBzdGlmZm5lc3M6IDUwMCxcbiAgICBkYW1waW5nOiAyNSxcbiAgICByZXN0U3BlZWQ6IDEwLFxufSk7IH07XG52YXIgY3JpdGljYWxseURhbXBlZFNwcmluZyA9IGZ1bmN0aW9uICh0bykgeyByZXR1cm4gKHtcbiAgICB0eXBlOiBcInNwcmluZ1wiLFxuICAgIHN0aWZmbmVzczogNTUwLFxuICAgIGRhbXBpbmc6IHRvID09PSAwID8gMiAqIE1hdGguc3FydCg1NTApIDogMzAsXG4gICAgcmVzdFNwZWVkOiAxMCxcbn0pOyB9O1xudmFyIGxpbmVhclR3ZWVuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICB0eXBlOiBcImtleWZyYW1lc1wiLFxuICAgIGVhc2U6IFwibGluZWFyXCIsXG4gICAgZHVyYXRpb246IDAuMyxcbn0pOyB9O1xudmFyIGtleWZyYW1lcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuICh7XG4gICAgdHlwZTogXCJrZXlmcmFtZXNcIixcbiAgICBkdXJhdGlvbjogMC44LFxuICAgIHZhbHVlczogdmFsdWVzLFxufSk7IH07XG52YXIgZGVmYXVsdFRyYW5zaXRpb25zID0ge1xuICAgIHg6IHVuZGVyRGFtcGVkU3ByaW5nLFxuICAgIHk6IHVuZGVyRGFtcGVkU3ByaW5nLFxuICAgIHo6IHVuZGVyRGFtcGVkU3ByaW5nLFxuICAgIHJvdGF0ZTogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgcm90YXRlWDogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgcm90YXRlWTogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgcm90YXRlWjogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgc2NhbGVYOiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxuICAgIHNjYWxlWTogY3JpdGljYWxseURhbXBlZFNwcmluZyxcbiAgICBzY2FsZTogY3JpdGljYWxseURhbXBlZFNwcmluZyxcbiAgICBvcGFjaXR5OiBsaW5lYXJUd2VlbixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpbmVhclR3ZWVuLFxuICAgIGNvbG9yOiBsaW5lYXJUd2VlbixcbiAgICBkZWZhdWx0OiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxufTtcbnZhciBnZXREZWZhdWx0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZUtleSwgdG8pIHtcbiAgICB2YXIgdHJhbnNpdGlvbkZhY3Rvcnk7XG4gICAgaWYgKGlzS2V5ZnJhbWVzVGFyZ2V0KHRvKSkge1xuICAgICAgICB0cmFuc2l0aW9uRmFjdG9yeSA9IGtleWZyYW1lcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb25GYWN0b3J5ID1cbiAgICAgICAgICAgIGRlZmF1bHRUcmFuc2l0aW9uc1t2YWx1ZUtleV0gfHwgZGVmYXVsdFRyYW5zaXRpb25zLmRlZmF1bHQ7XG4gICAgfVxuICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih7IHRvOiB0byB9LCB0cmFuc2l0aW9uRmFjdG9yeSh0bykpO1xufTtcblxudmFyIGludCA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBzdHlsZVZhbHVlVHlwZXMubnVtYmVyKSwgeyB0cmFuc2Zvcm06IE1hdGgucm91bmQgfSk7XG5cbnZhciBudW1iZXJWYWx1ZVR5cGVzID0ge1xuICAgIC8vIEJvcmRlciBwcm9wc1xuICAgIGJvcmRlcldpZHRoOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyVG9wV2lkdGg6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBib3JkZXJSaWdodFdpZHRoOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBib3JkZXJMZWZ0V2lkdGg6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBib3JkZXJSYWRpdXM6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICByYWRpdXM6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICAvLyBQb3NpdGlvbmluZyBwcm9wc1xuICAgIHdpZHRoOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbWF4V2lkdGg6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBoZWlnaHQ6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBtYXhIZWlnaHQ6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBzaXplOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgdG9wOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgcmlnaHQ6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBib3R0b206IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBsZWZ0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgLy8gU3BhY2luZyBwcm9wc1xuICAgIHBhZGRpbmc6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBwYWRkaW5nVG9wOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgcGFkZGluZ1JpZ2h0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgcGFkZGluZ0JvdHRvbTogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHBhZGRpbmdMZWZ0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbWFyZ2luOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbWFyZ2luVG9wOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbWFyZ2luUmlnaHQ6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBtYXJnaW5Cb3R0b206IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBtYXJnaW5MZWZ0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgLy8gVHJhbnNmb3JtIHByb3BzXG4gICAgcm90YXRlOiBzdHlsZVZhbHVlVHlwZXMuZGVncmVlcyxcbiAgICByb3RhdGVYOiBzdHlsZVZhbHVlVHlwZXMuZGVncmVlcyxcbiAgICByb3RhdGVZOiBzdHlsZVZhbHVlVHlwZXMuZGVncmVlcyxcbiAgICByb3RhdGVaOiBzdHlsZVZhbHVlVHlwZXMuZGVncmVlcyxcbiAgICBzY2FsZTogc3R5bGVWYWx1ZVR5cGVzLnNjYWxlLFxuICAgIHNjYWxlWDogc3R5bGVWYWx1ZVR5cGVzLnNjYWxlLFxuICAgIHNjYWxlWTogc3R5bGVWYWx1ZVR5cGVzLnNjYWxlLFxuICAgIHNjYWxlWjogc3R5bGVWYWx1ZVR5cGVzLnNjYWxlLFxuICAgIHNrZXc6IHN0eWxlVmFsdWVUeXBlcy5kZWdyZWVzLFxuICAgIHNrZXdYOiBzdHlsZVZhbHVlVHlwZXMuZGVncmVlcyxcbiAgICBza2V3WTogc3R5bGVWYWx1ZVR5cGVzLmRlZ3JlZXMsXG4gICAgZGlzdGFuY2U6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICB0cmFuc2xhdGVYOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgdHJhbnNsYXRlWTogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHRyYW5zbGF0ZVo6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICB4OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgeTogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHo6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBwZXJzcGVjdGl2ZTogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgb3BhY2l0eTogc3R5bGVWYWx1ZVR5cGVzLmFscGhhLFxuICAgIG9yaWdpblg6IHN0eWxlVmFsdWVUeXBlcy5wcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgb3JpZ2luWTogc3R5bGVWYWx1ZVR5cGVzLnByb2dyZXNzUGVyY2VudGFnZSxcbiAgICBvcmlnaW5aOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgLy8gTWlzY1xuICAgIHpJbmRleDogaW50LFxuICAgIC8vIFNWR1xuICAgIGZpbGxPcGFjaXR5OiBzdHlsZVZhbHVlVHlwZXMuYWxwaGEsXG4gICAgc3Ryb2tlT3BhY2l0eTogc3R5bGVWYWx1ZVR5cGVzLmFscGhhLFxuICAgIG51bU9jdGF2ZXM6IGludCxcbn07XG5cbi8qKlxuICogQSBtYXAgb2YgZGVmYXVsdCB2YWx1ZSB0eXBlcyBmb3IgY29tbW9uIHZhbHVlc1xuICovXG52YXIgZGVmYXVsdFZhbHVlVHlwZXMgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgbnVtYmVyVmFsdWVUeXBlcyksIHsgXG4gICAgLy8gQ29sb3IgcHJvcHNcbiAgICBjb2xvcjogc3R5bGVWYWx1ZVR5cGVzLmNvbG9yLCBiYWNrZ3JvdW5kQ29sb3I6IHN0eWxlVmFsdWVUeXBlcy5jb2xvciwgb3V0bGluZUNvbG9yOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIGZpbGw6IHN0eWxlVmFsdWVUeXBlcy5jb2xvciwgc3Ryb2tlOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIFxuICAgIC8vIEJvcmRlciBwcm9wc1xuICAgIGJvcmRlckNvbG9yOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIGJvcmRlclRvcENvbG9yOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIGJvcmRlclJpZ2h0Q29sb3I6IHN0eWxlVmFsdWVUeXBlcy5jb2xvciwgYm9yZGVyQm90dG9tQ29sb3I6IHN0eWxlVmFsdWVUeXBlcy5jb2xvciwgYm9yZGVyTGVmdENvbG9yOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIGZpbHRlcjogc3R5bGVWYWx1ZVR5cGVzLmZpbHRlciwgV2Via2l0RmlsdGVyOiBzdHlsZVZhbHVlVHlwZXMuZmlsdGVyIH0pO1xuLyoqXG4gKiBHZXRzIHRoZSBkZWZhdWx0IFZhbHVlVHlwZSBmb3IgdGhlIHByb3ZpZGVkIHZhbHVlIGtleVxuICovXG52YXIgZ2V0RGVmYXVsdFZhbHVlVHlwZSA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGRlZmF1bHRWYWx1ZVR5cGVzW2tleV07IH07XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGFibGVOb25lKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZVR5cGUgPSBnZXREZWZhdWx0VmFsdWVUeXBlKGtleSk7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZVR5cGUgIT09IHN0eWxlVmFsdWVUeXBlcy5maWx0ZXIpXG4gICAgICAgIGRlZmF1bHRWYWx1ZVR5cGUgPSBzdHlsZVZhbHVlVHlwZXMuY29tcGxleDtcbiAgICAvLyBJZiB2YWx1ZSBpcyBub3QgcmVjb2duaXNlZCBhcyBhbmltYXRhYmxlLCBpZSBcIm5vbmVcIiwgY3JlYXRlIGFuIGFuaW1hdGFibGUgdmVyc2lvbiBvcmlnaW4gYmFzZWQgb24gdGhlIHRhcmdldFxuICAgIHJldHVybiAoX2EgPSBkZWZhdWx0VmFsdWVUeXBlLmdldEFuaW1hdGFibGVOb25lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChkZWZhdWx0VmFsdWVUeXBlLCB2YWx1ZSk7XG59XG5cbnZhciBpbnN0YW50QW5pbWF0aW9uU3RhdGUgPSB7XG4gICAgY3VycmVudDogZmFsc2UsXG59O1xuXG52YXIgaXNDdXN0b21WYWx1ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odiAmJiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2Lm1peCAmJiB2LnRvVmFsdWUpO1xufTtcbnZhciByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzID0gZnVuY3Rpb24gKHYpIHtcbiAgICAvLyBUT0RPIG1heWJlIHRocm93IGlmIHYubGVuZ3RoIC0gMSBpcyBwbGFjZWhvbGRlciB0b2tlbj9cbiAgICByZXR1cm4gaXNLZXlmcmFtZXNUYXJnZXQodikgPyB2W3YubGVuZ3RoIC0gMV0gfHwgMCA6IHY7XG59O1xuXG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIGEgdHJhbnNpdGlvbiBpcyBkZWZpbmVkIG9uIGEgZ2l2ZW4gVHJhbnNpdGlvbi5cbiAqIFRoaXMgZmlsdGVycyBvdXQgb3JjaGVzdHJhdGlvbiBvcHRpb25zIGFuZCByZXR1cm5zIHRydWVcbiAqIGlmIGFueSBvcHRpb25zIGFyZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBpc1RyYW5zaXRpb25EZWZpbmVkKF9hKSB7XG4gICAgX2Eud2hlbjsgX2EuZGVsYXk7IF9hLmRlbGF5Q2hpbGRyZW47IF9hLnN0YWdnZXJDaGlsZHJlbjsgX2Euc3RhZ2dlckRpcmVjdGlvbjsgX2EucmVwZWF0OyBfYS5yZXBlYXRUeXBlOyBfYS5yZXBlYXREZWxheTsgX2EuZnJvbTsgdmFyIHRyYW5zaXRpb24gPSB0c2xpYi5fX3Jlc3QoX2EsIFtcIndoZW5cIiwgXCJkZWxheVwiLCBcImRlbGF5Q2hpbGRyZW5cIiwgXCJzdGFnZ2VyQ2hpbGRyZW5cIiwgXCJzdGFnZ2VyRGlyZWN0aW9uXCIsIFwicmVwZWF0XCIsIFwicmVwZWF0VHlwZVwiLCBcInJlcGVhdERlbGF5XCIsIFwiZnJvbVwiXSk7XG4gICAgcmV0dXJuICEhT2JqZWN0LmtleXModHJhbnNpdGlvbikubGVuZ3RoO1xufVxudmFyIGxlZ2FjeVJlcGVhdFdhcm5pbmcgPSBmYWxzZTtcbi8qKlxuICogQ29udmVydCBGcmFtZXIgTW90aW9uJ3MgVHJhbnNpdGlvbiB0eXBlIGludG8gUG9wbW90aW9uLWNvbXBhdGlibGUgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gY29udmVydFRyYW5zaXRpb25Ub0FuaW1hdGlvbk9wdGlvbnMoX2EpIHtcbiAgICB2YXIgZWFzZSA9IF9hLmVhc2UsIHRpbWVzID0gX2EudGltZXMsIHlveW8gPSBfYS55b3lvLCBmbGlwID0gX2EuZmxpcCwgbG9vcCA9IF9hLmxvb3AsIHRyYW5zaXRpb24gPSB0c2xpYi5fX3Jlc3QoX2EsIFtcImVhc2VcIiwgXCJ0aW1lc1wiLCBcInlveW9cIiwgXCJmbGlwXCIsIFwibG9vcFwiXSk7XG4gICAgdmFyIG9wdGlvbnMgPSB0c2xpYi5fX2Fzc2lnbih7fSwgdHJhbnNpdGlvbik7XG4gICAgaWYgKHRpbWVzKVxuICAgICAgICBvcHRpb25zW1wib2Zmc2V0XCJdID0gdGltZXM7XG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbnkgZXhpc3RpbmcgZHVyYXRpb25zIGZyb20gc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBpZiAodHJhbnNpdGlvbi5kdXJhdGlvbilcbiAgICAgICAgb3B0aW9uc1tcImR1cmF0aW9uXCJdID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRyYW5zaXRpb24uZHVyYXRpb24pO1xuICAgIGlmICh0cmFuc2l0aW9uLnJlcGVhdERlbGF5KVxuICAgICAgICBvcHRpb25zLnJlcGVhdERlbGF5ID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRyYW5zaXRpb24ucmVwZWF0RGVsYXkpO1xuICAgIC8qKlxuICAgICAqIE1hcCBlYXNpbmcgbmFtZXMgdG8gUG9wbW90aW9uJ3MgZWFzaW5nIGZ1bmN0aW9uc1xuICAgICAqL1xuICAgIGlmIChlYXNlKSB7XG4gICAgICAgIG9wdGlvbnNbXCJlYXNlXCJdID0gaXNFYXNpbmdBcnJheShlYXNlKVxuICAgICAgICAgICAgPyBlYXNlLm1hcChlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbilcbiAgICAgICAgICAgIDogZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24oZWFzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1cHBvcnQgbGVnYWN5IHRyYW5zaXRpb24gQVBJXG4gICAgICovXG4gICAgaWYgKHRyYW5zaXRpb24udHlwZSA9PT0gXCJ0d2VlblwiKVxuICAgICAgICBvcHRpb25zLnR5cGUgPSBcImtleWZyYW1lc1wiO1xuICAgIC8qKlxuICAgICAqIFRPRE86IFRoZXNlIG9wdGlvbnMgYXJlIG9mZmljaWFsbHkgcmVtb3ZlZCBmcm9tIHRoZSBBUEkuXG4gICAgICovXG4gICAgaWYgKHlveW8gfHwgbG9vcCB8fCBmbGlwKSB7XG4gICAgICAgIGhleUxpc3Rlbi53YXJuaW5nKCFsZWdhY3lSZXBlYXRXYXJuaW5nLCBcInlveW8sIGxvb3AgYW5kIGZsaXAgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgQVBJLiBSZXBsYWNlIHdpdGggcmVwZWF0IGFuZCByZXBlYXRUeXBlIG9wdGlvbnMuXCIpO1xuICAgICAgICBsZWdhY3lSZXBlYXRXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHlveW8pIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwicmV2ZXJzZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwibG9vcFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZsaXApIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwibWlycm9yXCI7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5yZXBlYXQgPSBsb29wIHx8IHlveW8gfHwgZmxpcCB8fCB0cmFuc2l0aW9uLnJlcGVhdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVE9ETzogUG9wbW90aW9uIDkgaGFzIHRoZSBhYmlsaXR5IHRvIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHdoZXRoZXIgdG8gdXNlXG4gICAgICogYSBrZXlmcmFtZXMgb3Igc3ByaW5nIGFuaW1hdGlvbiwgYnV0IGRvZXMgc28gYnkgZGV0ZWN0aW5nIHZlbG9jaXR5IGFuZCBvdGhlciBzcHJpbmcgb3B0aW9ucy5cbiAgICAgKiBJdCdkIGJlIGdvb2QgdG8gaW50cm9kdWNlIGEgc2ltaWxhciB0aGluZyBoZXJlLlxuICAgICAqL1xuICAgIGlmICh0cmFuc2l0aW9uLnR5cGUgIT09IFwic3ByaW5nXCIpXG4gICAgICAgIG9wdGlvbnMudHlwZSA9IFwia2V5ZnJhbWVzXCI7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG4vKipcbiAqIEdldCB0aGUgZGVsYXkgZm9yIGEgdmFsdWUgYnkgY2hlY2tpbmcgVHJhbnNpdGlvbiB3aXRoIGRlY3JlYXNpbmcgc3BlY2lmaWNpdHkuXG4gKi9cbmZ1bmN0aW9uIGdldERlbGF5RnJvbVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgdmFsdWVUcmFuc2l0aW9uID0gZ2V0VmFsdWVUcmFuc2l0aW9uKHRyYW5zaXRpb24sIGtleSkgfHwge307XG4gICAgcmV0dXJuIChfYiA9IChfYSA9IHZhbHVlVHJhbnNpdGlvbi5kZWxheSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJhbnNpdGlvbi5kZWxheSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbn1cbmZ1bmN0aW9uIGh5ZHJhdGVLZXlmcmFtZXMob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMudG8pICYmIG9wdGlvbnMudG9bMF0gPT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy50byA9IHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChvcHRpb25zLnRvKSwgZmFsc2UpO1xuICAgICAgICBvcHRpb25zLnRvWzBdID0gb3B0aW9ucy5mcm9tO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGdldFBvcG1vdGlvbkFuaW1hdGlvbk9wdGlvbnModHJhbnNpdGlvbiwgb3B0aW9ucywga2V5KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMudG8pKSB7XG4gICAgICAgIChfYSA9IHRyYW5zaXRpb24uZHVyYXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh0cmFuc2l0aW9uLmR1cmF0aW9uID0gMC44KTtcbiAgICB9XG4gICAgaHlkcmF0ZUtleWZyYW1lcyhvcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBkZWZhdWx0IHRyYW5zaXRpb24gaWYgbm9uZSBpcyBkZXRlcm1pbmVkIHRvIGJlIGRlZmluZWQuXG4gICAgICovXG4gICAgaWYgKCFpc1RyYW5zaXRpb25EZWZpbmVkKHRyYW5zaXRpb24pKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgdHJhbnNpdGlvbiksIGdldERlZmF1bHRUcmFuc2l0aW9uKGtleSwgb3B0aW9ucy50bykpO1xuICAgIH1cbiAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG9wdGlvbnMpLCBjb252ZXJ0VHJhbnNpdGlvblRvQW5pbWF0aW9uT3B0aW9ucyh0cmFuc2l0aW9uKSk7XG59XG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIGdldEFuaW1hdGlvbihrZXksIHZhbHVlLCB0YXJnZXQsIHRyYW5zaXRpb24sIG9uQ29tcGxldGUpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHZhbHVlVHJhbnNpdGlvbiA9IGdldFZhbHVlVHJhbnNpdGlvbih0cmFuc2l0aW9uLCBrZXkpO1xuICAgIHZhciBvcmlnaW4gPSAoX2EgPSB2YWx1ZVRyYW5zaXRpb24uZnJvbSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmFsdWUuZ2V0KCk7XG4gICAgdmFyIGlzVGFyZ2V0QW5pbWF0YWJsZSA9IGlzQW5pbWF0YWJsZShrZXksIHRhcmdldCk7XG4gICAgaWYgKG9yaWdpbiA9PT0gXCJub25lXCIgJiYgaXNUYXJnZXRBbmltYXRhYmxlICYmIHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIHRyeWluZyB0byBhbmltYXRlIGZyb20gXCJub25lXCIsIHRyeSBhbmQgZ2V0IGFuIGFuaW1hdGFibGUgdmVyc2lvblxuICAgICAgICAgKiBvZiB0aGUgdGFyZ2V0LiBUaGlzIGNvdWxkIGJlIGltcHJvdmVkIHRvIHdvcmsgYm90aCB3YXlzLlxuICAgICAgICAgKi9cbiAgICAgICAgb3JpZ2luID0gZ2V0QW5pbWF0YWJsZU5vbmUoa2V5LCB0YXJnZXQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1plcm8ob3JpZ2luKSAmJiB0eXBlb2YgdGFyZ2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG9yaWdpbiA9IGdldFplcm9Vbml0KHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHRhcmdldCkgJiZcbiAgICAgICAgaXNaZXJvKHRhcmdldCkgJiZcbiAgICAgICAgdHlwZW9mIG9yaWdpbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0YXJnZXQgPSBnZXRaZXJvVW5pdChvcmlnaW4pO1xuICAgIH1cbiAgICB2YXIgaXNPcmlnaW5BbmltYXRhYmxlID0gaXNBbmltYXRhYmxlKGtleSwgb3JpZ2luKTtcbiAgICBoZXlMaXN0ZW4ud2FybmluZyhpc09yaWdpbkFuaW1hdGFibGUgPT09IGlzVGFyZ2V0QW5pbWF0YWJsZSwgXCJZb3UgYXJlIHRyeWluZyB0byBhbmltYXRlIFwiLmNvbmNhdChrZXksIFwiIGZyb20gXFxcIlwiKS5jb25jYXQob3JpZ2luLCBcIlxcXCIgdG8gXFxcIlwiKS5jb25jYXQodGFyZ2V0LCBcIlxcXCIuIFwiKS5jb25jYXQob3JpZ2luLCBcIiBpcyBub3QgYW4gYW5pbWF0YWJsZSB2YWx1ZSAtIHRvIGVuYWJsZSB0aGlzIGFuaW1hdGlvbiBzZXQgXCIpLmNvbmNhdChvcmlnaW4sIFwiIHRvIGEgdmFsdWUgYW5pbWF0YWJsZSB0byBcIikuY29uY2F0KHRhcmdldCwgXCIgdmlhIHRoZSBgc3R5bGVgIHByb3BlcnR5LlwiKSk7XG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgZnJvbTogb3JpZ2luLFxuICAgICAgICAgICAgdG86IHRhcmdldCxcbiAgICAgICAgICAgIHZlbG9jaXR5OiB2YWx1ZS5nZXRWZWxvY2l0eSgpLFxuICAgICAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZSxcbiAgICAgICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiAodikgeyByZXR1cm4gdmFsdWUuc2V0KHYpOyB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdmFsdWVUcmFuc2l0aW9uLnR5cGUgPT09IFwiaW5lcnRpYVwiIHx8XG4gICAgICAgICAgICB2YWx1ZVRyYW5zaXRpb24udHlwZSA9PT0gXCJkZWNheVwiXG4gICAgICAgICAgICA/IHBvcG1vdGlvbi5pbmVydGlhKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBvcHRpb25zKSwgdmFsdWVUcmFuc2l0aW9uKSlcbiAgICAgICAgICAgIDogcG9wbW90aW9uLmFuaW1hdGUodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGdldFBvcG1vdGlvbkFuaW1hdGlvbk9wdGlvbnModmFsdWVUcmFuc2l0aW9uLCBvcHRpb25zLCBrZXkpKSwgeyBvblVwZGF0ZTogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uVXBkYXRlKHYpO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSB2YWx1ZVRyYW5zaXRpb24ub25VcGRhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZhbHVlVHJhbnNpdGlvbiwgdik7XG4gICAgICAgICAgICAgICAgfSwgb25Db21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSB2YWx1ZVRyYW5zaXRpb24ub25Db21wbGV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodmFsdWVUcmFuc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9IH0pKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0KCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgZmluYWxUYXJnZXQgPSByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzKHRhcmdldCk7XG4gICAgICAgIHZhbHVlLnNldChmaW5hbFRhcmdldCk7XG4gICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgKF9hID0gdmFsdWVUcmFuc2l0aW9uID09PSBudWxsIHx8IHZhbHVlVHJhbnNpdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWVUcmFuc2l0aW9uLm9uVXBkYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh2YWx1ZVRyYW5zaXRpb24sIGZpbmFsVGFyZ2V0KTtcbiAgICAgICAgKF9iID0gdmFsdWVUcmFuc2l0aW9uID09PSBudWxsIHx8IHZhbHVlVHJhbnNpdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWVUcmFuc2l0aW9uLm9uQ29tcGxldGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKHZhbHVlVHJhbnNpdGlvbik7XG4gICAgICAgIHJldHVybiB7IHN0b3A6IGZ1bmN0aW9uICgpIHsgfSB9O1xuICAgIH1cbiAgICByZXR1cm4gIWlzT3JpZ2luQW5pbWF0YWJsZSB8fFxuICAgICAgICAhaXNUYXJnZXRBbmltYXRhYmxlIHx8XG4gICAgICAgIHZhbHVlVHJhbnNpdGlvbi50eXBlID09PSBmYWxzZVxuICAgICAgICA/IHNldFxuICAgICAgICA6IHN0YXJ0O1xufVxuZnVuY3Rpb24gaXNaZXJvKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PT0gMCB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHZhbHVlKSA9PT0gMCAmJlxuICAgICAgICAgICAgdmFsdWUuaW5kZXhPZihcIiBcIikgPT09IC0xKSk7XG59XG5mdW5jdGlvbiBnZXRaZXJvVW5pdChwb3RlbnRpYWxVbml0VHlwZSkge1xuICAgIHJldHVybiB0eXBlb2YgcG90ZW50aWFsVW5pdFR5cGUgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyAwXG4gICAgICAgIDogZ2V0QW5pbWF0YWJsZU5vbmUoXCJcIiwgcG90ZW50aWFsVW5pdFR5cGUpO1xufVxuZnVuY3Rpb24gZ2V0VmFsdWVUcmFuc2l0aW9uKHRyYW5zaXRpb24sIGtleSkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uW2tleV0gfHwgdHJhbnNpdGlvbltcImRlZmF1bHRcIl0gfHwgdHJhbnNpdGlvbjtcbn1cbi8qKlxuICogU3RhcnQgYW5pbWF0aW9uIG9uIGEgTW90aW9uVmFsdWUuIFRoaXMgZnVuY3Rpb24gaXMgYW4gaW50ZXJmYWNlIGJldHdlZW5cbiAqIEZyYW1lciBNb3Rpb24gYW5kIFBvcG1vdGlvblxuICovXG5mdW5jdGlvbiBzdGFydEFuaW1hdGlvbihrZXksIHZhbHVlLCB0YXJnZXQsIHRyYW5zaXRpb24pIHtcbiAgICBpZiAodHJhbnNpdGlvbiA9PT0gdm9pZCAwKSB7IHRyYW5zaXRpb24gPSB7fTsgfVxuICAgIGlmIChpbnN0YW50QW5pbWF0aW9uU3RhdGUuY3VycmVudCkge1xuICAgICAgICB0cmFuc2l0aW9uID0geyB0eXBlOiBmYWxzZSB9O1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUuc3RhcnQoZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgICAgICAgdmFyIGRlbGF5VGltZXI7XG4gICAgICAgIHZhciBjb250cm9scztcbiAgICAgICAgdmFyIGFuaW1hdGlvbiA9IGdldEFuaW1hdGlvbihrZXksIHZhbHVlLCB0YXJnZXQsIHRyYW5zaXRpb24sIG9uQ29tcGxldGUpO1xuICAgICAgICB2YXIgZGVsYXkgPSBnZXREZWxheUZyb21UcmFuc2l0aW9uKHRyYW5zaXRpb24sIGtleSk7XG4gICAgICAgIHZhciBzdGFydCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIChjb250cm9scyA9IGFuaW1hdGlvbigpKTsgfTtcbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgICBkZWxheVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoc3RhcnQsIHNlY29uZHNUb01pbGxpc2Vjb25kcyhkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXIpO1xuICAgICAgICAgICAgY29udHJvbHMgPT09IG51bGwgfHwgY29udHJvbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBBbmltYXRlIGEgc2luZ2xlIHZhbHVlIG9yIGEgYE1vdGlvblZhbHVlYC5cbiAqXG4gKiBUaGUgZmlyc3QgYXJndW1lbnQgaXMgZWl0aGVyIGEgYE1vdGlvblZhbHVlYCB0byBhbmltYXRlLCBvciBhbiBpbml0aWFsIGFuaW1hdGlvbiB2YWx1ZS5cbiAqXG4gKiBUaGUgc2Vjb25kIGlzIGVpdGhlciBhIHZhbHVlIHRvIGFuaW1hdGUgdG8sIG9yIGFuIGFycmF5IG9mIGtleWZyYW1lcyB0byBhbmltYXRlIHRocm91Z2guXG4gKlxuICogVGhlIHRoaXJkIGFyZ3VtZW50IGNhbiBiZSBlaXRoZXIgdHdlZW4gb3Igc3ByaW5nIG9wdGlvbnMsIGFuZCBvcHRpb25hbCBsaWZlY3ljbGUgbWV0aG9kczogYG9uVXBkYXRlYCwgYG9uUGxheWAsIGBvbkNvbXBsZXRlYCwgYG9uUmVwZWF0YCBhbmQgYG9uU3RvcGAuXG4gKlxuICogUmV0dXJucyBgQW5pbWF0aW9uUGxheWJhY2tDb250cm9sc2AsIGN1cnJlbnRseSBqdXN0IGEgYHN0b3BgIG1ldGhvZC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAqXG4gKiB1c2VFZmZlY3QoKCkgPT4ge1xuICogICBjb25zdCBjb250cm9scyA9IGFuaW1hdGUoeCwgMTAwLCB7XG4gKiAgICAgdHlwZTogXCJzcHJpbmdcIixcbiAqICAgICBzdGlmZm5lc3M6IDIwMDAsXG4gKiAgICAgb25Db21wbGV0ZTogdiA9PiB7fVxuICogICB9KVxuICpcbiAqICAgcmV0dXJuIGNvbnRyb2xzLnN0b3BcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUoZnJvbSwgdG8sIHRyYW5zaXRpb24pIHtcbiAgICBpZiAodHJhbnNpdGlvbiA9PT0gdm9pZCAwKSB7IHRyYW5zaXRpb24gPSB7fTsgfVxuICAgIHZhciB2YWx1ZSA9IGlzTW90aW9uVmFsdWUoZnJvbSkgPyBmcm9tIDogbW90aW9uVmFsdWUoZnJvbSk7XG4gICAgc3RhcnRBbmltYXRpb24oXCJcIiwgdmFsdWUsIHRvLCB0cmFuc2l0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZS5zdG9wKCk7IH0sXG4gICAgICAgIGlzQW5pbWF0aW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZS5pc0FuaW1hdGluZygpOyB9LFxuICAgIH07XG59XG5cbnZhciBib3JkZXJzID0gW1wiVG9wTGVmdFwiLCBcIlRvcFJpZ2h0XCIsIFwiQm90dG9tTGVmdFwiLCBcIkJvdHRvbVJpZ2h0XCJdO1xudmFyIG51bUJvcmRlcnMgPSBib3JkZXJzLmxlbmd0aDtcbnZhciBhc051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyBwYXJzZUZsb2F0KHZhbHVlKSA6IHZhbHVlO1xufTtcbnZhciBpc1B4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBzdHlsZVZhbHVlVHlwZXMucHgudGVzdCh2YWx1ZSk7XG59O1xuZnVuY3Rpb24gbWl4VmFsdWVzKHRhcmdldCwgZm9sbG93LCBsZWFkLCBwcm9ncmVzcywgc2hvdWxkQ3Jvc3NmYWRlT3BhY2l0eSwgaXNPbmx5TWVtYmVyKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGlmIChzaG91bGRDcm9zc2ZhZGVPcGFjaXR5KSB7XG4gICAgICAgIHRhcmdldC5vcGFjaXR5ID0gcG9wbW90aW9uLm1peCgwLCBcbiAgICAgICAgLy8gKGZvbGxvdz8ub3BhY2l0eSBhcyBudW1iZXIpID8/IDAsXG4gICAgICAgIC8vIFRPRE8gUmVpbnN0YXRlIHRoaXMgaWYgb25seSBjaGlsZFxuICAgICAgICAoX2EgPSBsZWFkLm9wYWNpdHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEsIGVhc2VDcm9zc2ZhZGVJbihwcm9ncmVzcykpO1xuICAgICAgICB0YXJnZXQub3BhY2l0eUV4aXQgPSBwb3Btb3Rpb24ubWl4KChfYiA9IGZvbGxvdy5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAxLCAwLCBlYXNlQ3Jvc3NmYWRlT3V0KHByb2dyZXNzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT25seU1lbWJlcikge1xuICAgICAgICB0YXJnZXQub3BhY2l0eSA9IHBvcG1vdGlvbi5taXgoKF9jID0gZm9sbG93Lm9wYWNpdHkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDEsIChfZCA9IGxlYWQub3BhY2l0eSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMSwgcHJvZ3Jlc3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNaXggYm9yZGVyIHJhZGl1c1xuICAgICAqL1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQm9yZGVyczsgaSsrKSB7XG4gICAgICAgIHZhciBib3JkZXJMYWJlbCA9IFwiYm9yZGVyXCIuY29uY2F0KGJvcmRlcnNbaV0sIFwiUmFkaXVzXCIpO1xuICAgICAgICB2YXIgZm9sbG93UmFkaXVzID0gZ2V0UmFkaXVzKGZvbGxvdywgYm9yZGVyTGFiZWwpO1xuICAgICAgICB2YXIgbGVhZFJhZGl1cyA9IGdldFJhZGl1cyhsZWFkLCBib3JkZXJMYWJlbCk7XG4gICAgICAgIGlmIChmb2xsb3dSYWRpdXMgPT09IHVuZGVmaW5lZCAmJiBsZWFkUmFkaXVzID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZm9sbG93UmFkaXVzIHx8IChmb2xsb3dSYWRpdXMgPSAwKTtcbiAgICAgICAgbGVhZFJhZGl1cyB8fCAobGVhZFJhZGl1cyA9IDApO1xuICAgICAgICB2YXIgY2FuTWl4ID0gZm9sbG93UmFkaXVzID09PSAwIHx8XG4gICAgICAgICAgICBsZWFkUmFkaXVzID09PSAwIHx8XG4gICAgICAgICAgICBpc1B4KGZvbGxvd1JhZGl1cykgPT09IGlzUHgobGVhZFJhZGl1cyk7XG4gICAgICAgIGlmIChjYW5NaXgpIHtcbiAgICAgICAgICAgIHRhcmdldFtib3JkZXJMYWJlbF0gPSBNYXRoLm1heChwb3Btb3Rpb24ubWl4KGFzTnVtYmVyKGZvbGxvd1JhZGl1cyksIGFzTnVtYmVyKGxlYWRSYWRpdXMpLCBwcm9ncmVzcyksIDApO1xuICAgICAgICAgICAgaWYgKHN0eWxlVmFsdWVUeXBlcy5wZXJjZW50LnRlc3QobGVhZFJhZGl1cykgfHwgc3R5bGVWYWx1ZVR5cGVzLnBlcmNlbnQudGVzdChmb2xsb3dSYWRpdXMpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2JvcmRlckxhYmVsXSArPSBcIiVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtib3JkZXJMYWJlbF0gPSBsZWFkUmFkaXVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1peCByb3RhdGlvblxuICAgICAqL1xuICAgIGlmIChmb2xsb3cucm90YXRlIHx8IGxlYWQucm90YXRlKSB7XG4gICAgICAgIHRhcmdldC5yb3RhdGUgPSBwb3Btb3Rpb24ubWl4KGZvbGxvdy5yb3RhdGUgfHwgMCwgbGVhZC5yb3RhdGUgfHwgMCwgcHJvZ3Jlc3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFJhZGl1cyh2YWx1ZXMsIHJhZGl1c05hbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHZhbHVlc1tyYWRpdXNOYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmFsdWVzLmJvcmRlclJhZGl1cztcbn1cbi8vIC8qKlxuLy8gICogV2Ugb25seSB3YW50IHRvIG1peCB0aGUgYmFja2dyb3VuZCBjb2xvciBpZiB0aGVyZSdzIGEgZm9sbG93IGVsZW1lbnRcbi8vICAqIHRoYXQgd2UncmUgbm90IGNyb3NzZmFkaW5nIG9wYWNpdHkgYmV0d2Vlbi4gRm9yIGluc3RhbmNlIHdpdGggc3dpdGNoXG4vLyAgKiBBbmltYXRlU2hhcmVkTGF5b3V0IGFuaW1hdGlvbnMsIHRoaXMgaGVscHMgdGhlIGlsbHVzaW9uIG9mIGEgY29udGludW91c1xuLy8gICogZWxlbWVudCBiZWluZyBhbmltYXRlZCBidXQgYWxzbyBjdXRzIGRvd24gb24gdGhlIG51bWJlciBvZiBwYWludHMgdHJpZ2dlcmVkXG4vLyAgKiBmb3IgZWxlbWVudHMgd2hlcmUgb3BhY2l0eSBpcyBkb2luZyB0aGF0IHdvcmsgZm9yIHVzLlxuLy8gICovXG4vLyBpZiAoXG4vLyAgICAgIWhhc0ZvbGxvd0VsZW1lbnQgJiZcbi8vICAgICBsYXRlc3RMZWFkVmFsdWVzLmJhY2tncm91bmRDb2xvciAmJlxuLy8gICAgIGxhdGVzdEZvbGxvd1ZhbHVlcy5iYWNrZ3JvdW5kQ29sb3Jcbi8vICkge1xuLy8gICAgIC8qKlxuLy8gICAgICAqIFRoaXMgaXNuJ3QgaWRlYWwgcGVyZm9ybWFuY2Utd2lzZSBhcyBtaXhDb2xvciBpcyBjcmVhdGluZyBhIG5ldyBmdW5jdGlvbiBldmVyeSBmcmFtZS5cbi8vICAgICAgKiBXZSBjb3VsZCBwcm9iYWJseSBjcmVhdGUgYSBtaXhlciB0aGF0IHJ1bnMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhbmltYXRpb24gYnV0XG4vLyAgICAgICogdGhlIGlkZWEgYmVoaW5kIHRoZSBjcm9zc2ZhZGVyIGlzIHRoYXQgaXQgcnVucyBkeW5hbWljYWxseSBiZXR3ZWVuIHR3byBwb3RlbnRpYWxseVxuLy8gICAgICAqIGNoYW5naW5nIHRhcmdldHMgKGllIG9wYWNpdHkgb3IgYm9yZGVyUmFkaXVzIG1heSBiZSBhbmltYXRpbmcgaW5kZXBlbmRlbnRseSB2aWEgdmFyaWFudHMpXG4vLyAgICAgICovXG4vLyAgICAgbGVhZFN0YXRlLmJhY2tncm91bmRDb2xvciA9IGZvbGxvd1N0YXRlLmJhY2tncm91bmRDb2xvciA9IG1peENvbG9yKFxuLy8gICAgICAgICBsYXRlc3RGb2xsb3dWYWx1ZXMuYmFja2dyb3VuZENvbG9yIGFzIHN0cmluZyxcbi8vICAgICAgICAgbGF0ZXN0TGVhZFZhbHVlcy5iYWNrZ3JvdW5kQ29sb3IgYXMgc3RyaW5nXG4vLyAgICAgKShwKVxuLy8gfVxudmFyIGVhc2VDcm9zc2ZhZGVJbiA9IGNvbXByZXNzKDAsIDAuNSwgcG9wbW90aW9uLmNpcmNPdXQpO1xudmFyIGVhc2VDcm9zc2ZhZGVPdXQgPSBjb21wcmVzcygwLjUsIDAuOTUsIHBvcG1vdGlvbi5saW5lYXIpO1xuZnVuY3Rpb24gY29tcHJlc3MobWluLCBtYXgsIGVhc2luZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgICAvLyBDb3VsZCByZXBsYWNlIGlmcyB3aXRoIGNsYW1wXG4gICAgICAgIGlmIChwIDwgbWluKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGlmIChwID4gbWF4KVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiBlYXNpbmcocG9wbW90aW9uLnByb2dyZXNzKG1pbiwgbWF4LCBwKSk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXNldCBhbiBheGlzIHRvIHRoZSBwcm92aWRlZCBvcmlnaW4gYm94LlxuICpcbiAqIFRoaXMgaXMgYSBtdXRhdGl2ZSBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGNvcHlBeGlzSW50byhheGlzLCBvcmlnaW5BeGlzKSB7XG4gICAgYXhpcy5taW4gPSBvcmlnaW5BeGlzLm1pbjtcbiAgICBheGlzLm1heCA9IG9yaWdpbkF4aXMubWF4O1xufVxuLyoqXG4gKiBSZXNldCBhIGJveCB0byB0aGUgcHJvdmlkZWQgb3JpZ2luIGJveC5cbiAqXG4gKiBUaGlzIGlzIGEgbXV0YXRpdmUgb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb3B5Qm94SW50byhib3gsIG9yaWdpbkJveCkge1xuICAgIGNvcHlBeGlzSW50byhib3gueCwgb3JpZ2luQm94LngpO1xuICAgIGNvcHlBeGlzSW50byhib3gueSwgb3JpZ2luQm94LnkpO1xufVxuXG5mdW5jdGlvbiBpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUgPT09IHVuZGVmaW5lZCB8fCBzY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGhhc1NjYWxlKF9hKSB7XG4gICAgdmFyIHNjYWxlID0gX2Euc2NhbGUsIHNjYWxlWCA9IF9hLnNjYWxlWCwgc2NhbGVZID0gX2Euc2NhbGVZO1xuICAgIHJldHVybiAoIWlzSWRlbnRpdHlTY2FsZShzY2FsZSkgfHxcbiAgICAgICAgIWlzSWRlbnRpdHlTY2FsZShzY2FsZVgpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVZKSk7XG59XG5mdW5jdGlvbiBoYXNUcmFuc2Zvcm0odmFsdWVzKSB7XG4gICAgcmV0dXJuIChoYXNTY2FsZSh2YWx1ZXMpIHx8XG4gICAgICAgIGhhc1RyYW5zbGF0ZSh2YWx1ZXMueCkgfHxcbiAgICAgICAgaGFzVHJhbnNsYXRlKHZhbHVlcy55KSB8fFxuICAgICAgICB2YWx1ZXMueiB8fFxuICAgICAgICB2YWx1ZXMucm90YXRlIHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGVYIHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGVZKTtcbn1cbmZ1bmN0aW9uIGhhc1RyYW5zbGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZSAhPT0gXCIwJVwiO1xufVxuXG4vKipcbiAqIFNjYWxlcyBhIHBvaW50IGJhc2VkIG9uIGEgZmFjdG9yIGFuZCBhbiBvcmlnaW5Qb2ludFxuICovXG5mdW5jdGlvbiBzY2FsZVBvaW50KHBvaW50LCBzY2FsZSwgb3JpZ2luUG9pbnQpIHtcbiAgICB2YXIgZGlzdGFuY2VGcm9tT3JpZ2luID0gcG9pbnQgLSBvcmlnaW5Qb2ludDtcbiAgICB2YXIgc2NhbGVkID0gc2NhbGUgKiBkaXN0YW5jZUZyb21PcmlnaW47XG4gICAgcmV0dXJuIG9yaWdpblBvaW50ICsgc2NhbGVkO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGEgcG9pbnRcbiAqL1xuZnVuY3Rpb24gYXBwbHlQb2ludERlbHRhKHBvaW50LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBpZiAoYm94U2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZVBvaW50KHBvaW50LCBzY2FsZSwgb3JpZ2luUG9pbnQpICsgdHJhbnNsYXRlO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGFuIGF4aXNcbiAqL1xuZnVuY3Rpb24gYXBwbHlBeGlzRGVsdGEoYXhpcywgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKSB7XG4gICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7IHRyYW5zbGF0ZSA9IDA7IH1cbiAgICBpZiAoc2NhbGUgPT09IHZvaWQgMCkgeyBzY2FsZSA9IDE7IH1cbiAgICBheGlzLm1pbiA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogQXBwbGllcyBhIHRyYW5zbGF0ZS9zY2FsZSBkZWx0YSB0byBhIGJveFxuICovXG5mdW5jdGlvbiBhcHBseUJveERlbHRhKGJveCwgX2EpIHtcbiAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgIGFwcGx5QXhpc0RlbHRhKGJveC54LCB4LnRyYW5zbGF0ZSwgeC5zY2FsZSwgeC5vcmlnaW5Qb2ludCk7XG4gICAgYXBwbHlBeGlzRGVsdGEoYm94LnksIHkudHJhbnNsYXRlLCB5LnNjYWxlLCB5Lm9yaWdpblBvaW50KTtcbn1cbi8qKlxuICogQXBwbHkgYSB0cmVlIG9mIGRlbHRhcyB0byBhIGJveC4gV2UgZG8gdGhpcyB0byBjYWxjdWxhdGUgdGhlIGVmZmVjdCBvZiBhbGwgdGhlIHRyYW5zZm9ybXNcbiAqIGluIGEgdHJlZSB1cG9uIG91ciBib3ggYmVmb3JlIHRoZW4gY2FsY3VsYXRpbmcgaG93IHRvIHByb2plY3QgaXQgaW50byBvdXIgZGVzaXJlZCB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqXG4gKiBUaGlzIGlzIHRoZSBmaW5hbCBuZXN0ZWQgbG9vcCB3aXRoaW4gdXBkYXRlTGF5b3V0RGVsdGEgZm9yIGZ1dHVyZSByZWZhY3RvcmluZ1xuICovXG5mdW5jdGlvbiBhcHBseVRyZWVEZWx0YXMoYm94LCB0cmVlU2NhbGUsIHRyZWVQYXRoLCBpc1NoYXJlZFRyYW5zaXRpb24pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChpc1NoYXJlZFRyYW5zaXRpb24gPT09IHZvaWQgMCkgeyBpc1NoYXJlZFRyYW5zaXRpb24gPSBmYWxzZTsgfVxuICAgIHZhciB0cmVlTGVuZ3RoID0gdHJlZVBhdGgubGVuZ3RoO1xuICAgIGlmICghdHJlZUxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIFJlc2V0IHRoZSB0cmVlU2NhbGVcbiAgICB0cmVlU2NhbGUueCA9IHRyZWVTY2FsZS55ID0gMTtcbiAgICB2YXIgbm9kZTtcbiAgICB2YXIgZGVsdGE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbm9kZSA9IHRyZWVQYXRoW2ldO1xuICAgICAgICBkZWx0YSA9IG5vZGUucHJvamVjdGlvbkRlbHRhO1xuICAgICAgICBpZiAoKChfYiA9IChfYSA9IG5vZGUuaW5zdGFuY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdHlsZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRpc3BsYXkpID09PSBcImNvbnRlbnRzXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGlzU2hhcmVkVHJhbnNpdGlvbiAmJlxuICAgICAgICAgICAgbm9kZS5vcHRpb25zLmxheW91dFNjcm9sbCAmJlxuICAgICAgICAgICAgbm9kZS5zY3JvbGwgJiZcbiAgICAgICAgICAgIG5vZGUgIT09IG5vZGUucm9vdCkge1xuICAgICAgICAgICAgdHJhbnNmb3JtQm94KGJveCwgeyB4OiAtbm9kZS5zY3JvbGwueCwgeTogLW5vZGUuc2Nyb2xsLnkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgICAgICAvLyBJbmNvcG9yYXRlIGVhY2ggYW5jZXN0b3IncyBzY2FsZSBpbnRvIGEgY3VsbXVsYXRpdmUgdHJlZVNjYWxlIGZvciB0aGlzIGNvbXBvbmVudFxuICAgICAgICAgICAgdHJlZVNjYWxlLnggKj0gZGVsdGEueC5zY2FsZTtcbiAgICAgICAgICAgIHRyZWVTY2FsZS55ICo9IGRlbHRhLnkuc2NhbGU7XG4gICAgICAgICAgICAvLyBBcHBseSBlYWNoIGFuY2VzdG9yJ3MgY2FsY3VsYXRlZCBkZWx0YSBpbnRvIHRoaXMgY29tcG9uZW50J3MgcmVjb3JkZWQgbGF5b3V0IGJveFxuICAgICAgICAgICAgYXBwbHlCb3hEZWx0YShib3gsIGRlbHRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTaGFyZWRUcmFuc2l0aW9uICYmIGhhc1RyYW5zZm9ybShub2RlLmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybUJveChib3gsIG5vZGUubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZUF4aXMoYXhpcywgZGlzdGFuY2UpIHtcbiAgICBheGlzLm1pbiA9IGF4aXMubWluICsgZGlzdGFuY2U7XG4gICAgYXhpcy5tYXggPSBheGlzLm1heCArIGRpc3RhbmNlO1xufVxuLyoqXG4gKiBBcHBseSBhIHRyYW5zZm9ybSB0byBhbiBheGlzIGZyb20gdGhlIGxhdGVzdCByZXNvbHZlZCBtb3Rpb24gdmFsdWVzLlxuICogVGhpcyBmdW5jdGlvbiBiYXNpY2FsbHkgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIGEgZmxhdCBtb3Rpb24gdmFsdWUgbWFwXG4gKiBhbmQgYXBwbHlBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQXhpcyhheGlzLCB0cmFuc2Zvcm1zLCBfYSkge1xuICAgIHZhciBfYiA9IHRzbGliLl9fcmVhZChfYSwgMyksIGtleSA9IF9iWzBdLCBzY2FsZUtleSA9IF9iWzFdLCBvcmlnaW5LZXkgPSBfYlsyXTtcbiAgICB2YXIgYXhpc09yaWdpbiA9IHRyYW5zZm9ybXNbb3JpZ2luS2V5XSAhPT0gdW5kZWZpbmVkID8gdHJhbnNmb3Jtc1tvcmlnaW5LZXldIDogMC41O1xuICAgIHZhciBvcmlnaW5Qb2ludCA9IHBvcG1vdGlvbi5taXgoYXhpcy5taW4sIGF4aXMubWF4LCBheGlzT3JpZ2luKTtcbiAgICAvLyBBcHBseSB0aGUgYXhpcyBkZWx0YSB0byB0aGUgZmluYWwgYXhpc1xuICAgIGFwcGx5QXhpc0RlbHRhKGF4aXMsIHRyYW5zZm9ybXNba2V5XSwgdHJhbnNmb3Jtc1tzY2FsZUtleV0sIG9yaWdpblBvaW50LCB0cmFuc2Zvcm1zLnNjYWxlKTtcbn1cbi8qKlxuICogVGhlIG5hbWVzIG9mIHRoZSBtb3Rpb24gdmFsdWVzIHdlIHdhbnQgdG8gYXBwbHkgYXMgdHJhbnNsYXRpb24sIHNjYWxlIGFuZCBvcmlnaW4uXG4gKi9cbnZhciB4S2V5cyQxID0gW1wieFwiLCBcInNjYWxlWFwiLCBcIm9yaWdpblhcIl07XG52YXIgeUtleXMkMSA9IFtcInlcIiwgXCJzY2FsZVlcIiwgXCJvcmlnaW5ZXCJdO1xuLyoqXG4gKiBBcHBseSBhIHRyYW5zZm9ybSB0byBhIGJveCBmcm9tIHRoZSBsYXRlc3QgcmVzb2x2ZWQgbW90aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQm94KGJveCwgdHJhbnNmb3JtKSB7XG4gICAgdHJhbnNmb3JtQXhpcyhib3gueCwgdHJhbnNmb3JtLCB4S2V5cyQxKTtcbiAgICB0cmFuc2Zvcm1BeGlzKGJveC55LCB0cmFuc2Zvcm0sIHlLZXlzJDEpO1xufVxuXG5mdW5jdGlvbiBjYWxjTGVuZ3RoKGF4aXMpIHtcbiAgICByZXR1cm4gYXhpcy5tYXggLSBheGlzLm1pbjtcbn1cbmZ1bmN0aW9uIGlzTmVhcih2YWx1ZSwgdGFyZ2V0LCBtYXhEaXN0YW5jZSkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkgeyB0YXJnZXQgPSAwOyB9XG4gICAgaWYgKG1heERpc3RhbmNlID09PSB2b2lkIDApIHsgbWF4RGlzdGFuY2UgPSAwLjAxOyB9XG4gICAgcmV0dXJuIHBvcG1vdGlvbi5kaXN0YW5jZSh2YWx1ZSwgdGFyZ2V0KSA8IG1heERpc3RhbmNlO1xufVxuZnVuY3Rpb24gY2FsY0F4aXNEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbikge1xuICAgIGlmIChvcmlnaW4gPT09IHZvaWQgMCkgeyBvcmlnaW4gPSAwLjU7IH1cbiAgICBkZWx0YS5vcmlnaW4gPSBvcmlnaW47XG4gICAgZGVsdGEub3JpZ2luUG9pbnQgPSBwb3Btb3Rpb24ubWl4KHNvdXJjZS5taW4sIHNvdXJjZS5tYXgsIGRlbHRhLm9yaWdpbik7XG4gICAgZGVsdGEuc2NhbGUgPSBjYWxjTGVuZ3RoKHRhcmdldCkgLyBjYWxjTGVuZ3RoKHNvdXJjZSk7XG4gICAgaWYgKGlzTmVhcihkZWx0YS5zY2FsZSwgMSwgMC4wMDAxKSB8fCBpc05hTihkZWx0YS5zY2FsZSkpXG4gICAgICAgIGRlbHRhLnNjYWxlID0gMTtcbiAgICBkZWx0YS50cmFuc2xhdGUgPVxuICAgICAgICBwb3Btb3Rpb24ubWl4KHRhcmdldC5taW4sIHRhcmdldC5tYXgsIGRlbHRhLm9yaWdpbikgLSBkZWx0YS5vcmlnaW5Qb2ludDtcbiAgICBpZiAoaXNOZWFyKGRlbHRhLnRyYW5zbGF0ZSkgfHwgaXNOYU4oZGVsdGEudHJhbnNsYXRlKSlcbiAgICAgICAgZGVsdGEudHJhbnNsYXRlID0gMDtcbn1cbmZ1bmN0aW9uIGNhbGNCb3hEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbikge1xuICAgIGNhbGNBeGlzRGVsdGEoZGVsdGEueCwgc291cmNlLngsIHRhcmdldC54LCBvcmlnaW4gPT09IG51bGwgfHwgb3JpZ2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW4ub3JpZ2luWCk7XG4gICAgY2FsY0F4aXNEZWx0YShkZWx0YS55LCBzb3VyY2UueSwgdGFyZ2V0LnksIG9yaWdpbiA9PT0gbnVsbCB8fCBvcmlnaW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbi5vcmlnaW5ZKTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LCByZWxhdGl2ZSwgcGFyZW50KSB7XG4gICAgdGFyZ2V0Lm1pbiA9IHBhcmVudC5taW4gKyByZWxhdGl2ZS5taW47XG4gICAgdGFyZ2V0Lm1heCA9IHRhcmdldC5taW4gKyBjYWxjTGVuZ3RoKHJlbGF0aXZlKTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUJveCh0YXJnZXQsIHJlbGF0aXZlLCBwYXJlbnQpIHtcbiAgICBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldC54LCByZWxhdGl2ZS54LCBwYXJlbnQueCk7XG4gICAgY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQueSwgcmVsYXRpdmUueSwgcGFyZW50LnkpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldCwgbGF5b3V0LCBwYXJlbnQpIHtcbiAgICB0YXJnZXQubWluID0gbGF5b3V0Lm1pbiAtIHBhcmVudC5taW47XG4gICAgdGFyZ2V0Lm1heCA9IHRhcmdldC5taW4gKyBjYWxjTGVuZ3RoKGxheW91dCk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVQb3NpdGlvbih0YXJnZXQsIGxheW91dCwgcGFyZW50KSB7XG4gICAgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldC54LCBsYXlvdXQueCwgcGFyZW50LngpO1xuICAgIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbih0YXJnZXQueSwgbGF5b3V0LnksIHBhcmVudC55KTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBkZWx0YSBmcm9tIGEgcG9pbnQuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5UG9pbnREZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVBvaW50RGVsdGEocG9pbnQsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIHBvaW50IC09IHRyYW5zbGF0ZTtcbiAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIDEgLyBzY2FsZSwgb3JpZ2luUG9pbnQpO1xuICAgIGlmIChib3hTY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgMSAvIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludDtcbn1cbi8qKlxuICogUmVtb3ZlIGEgZGVsdGEgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNEZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNEZWx0YShheGlzLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW4sIGJveFNjYWxlLCBvcmlnaW5BeGlzLCBzb3VyY2VBeGlzKSB7XG4gICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7IHRyYW5zbGF0ZSA9IDA7IH1cbiAgICBpZiAoc2NhbGUgPT09IHZvaWQgMCkgeyBzY2FsZSA9IDE7IH1cbiAgICBpZiAob3JpZ2luID09PSB2b2lkIDApIHsgb3JpZ2luID0gMC41OyB9XG4gICAgaWYgKG9yaWdpbkF4aXMgPT09IHZvaWQgMCkgeyBvcmlnaW5BeGlzID0gYXhpczsgfVxuICAgIGlmIChzb3VyY2VBeGlzID09PSB2b2lkIDApIHsgc291cmNlQXhpcyA9IGF4aXM7IH1cbiAgICBpZiAoc3R5bGVWYWx1ZVR5cGVzLnBlcmNlbnQudGVzdCh0cmFuc2xhdGUpKSB7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHBhcnNlRmxvYXQodHJhbnNsYXRlKTtcbiAgICAgICAgdmFyIHJlbGF0aXZlUHJvZ3Jlc3MgPSBwb3Btb3Rpb24ubWl4KHNvdXJjZUF4aXMubWluLCBzb3VyY2VBeGlzLm1heCwgdHJhbnNsYXRlIC8gMTAwKTtcbiAgICAgICAgdHJhbnNsYXRlID0gcmVsYXRpdmVQcm9ncmVzcyAtIHNvdXJjZUF4aXMubWluO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRyYW5zbGF0ZSAhPT0gXCJudW1iZXJcIilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBvcmlnaW5Qb2ludCA9IHBvcG1vdGlvbi5taXgob3JpZ2luQXhpcy5taW4sIG9yaWdpbkF4aXMubWF4LCBvcmlnaW4pO1xuICAgIGlmIChheGlzID09PSBvcmlnaW5BeGlzKVxuICAgICAgICBvcmlnaW5Qb2ludCAtPSB0cmFuc2xhdGU7XG4gICAgYXhpcy5taW4gPSByZW1vdmVQb2ludERlbHRhKGF4aXMubWluLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xuICAgIGF4aXMubWF4ID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgdHJhbnNmb3JtcyBmcm9tIGFuIGF4aXMuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc1RyYW5zZm9ybXMgaW4gcmV2ZXJzZVxuICogYW5kIGFjdHMgYXMgYSBicmlkZ2UgYmV0d2VlbiBtb3Rpb24gdmFsdWVzIGFuZCByZW1vdmVBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYXhpcywgdHJhbnNmb3JtcywgX2EsIG9yaWdpbiwgc291cmNlQXhpcykge1xuICAgIHZhciBfYiA9IHRzbGliLl9fcmVhZChfYSwgMyksIGtleSA9IF9iWzBdLCBzY2FsZUtleSA9IF9iWzFdLCBvcmlnaW5LZXkgPSBfYlsyXTtcbiAgICByZW1vdmVBeGlzRGVsdGEoYXhpcywgdHJhbnNmb3Jtc1trZXldLCB0cmFuc2Zvcm1zW3NjYWxlS2V5XSwgdHJhbnNmb3Jtc1tvcmlnaW5LZXldLCB0cmFuc2Zvcm1zLnNjYWxlLCBvcmlnaW4sIHNvdXJjZUF4aXMpO1xufVxuLyoqXG4gKiBUaGUgbmFtZXMgb2YgdGhlIG1vdGlvbiB2YWx1ZXMgd2Ugd2FudCB0byBhcHBseSBhcyB0cmFuc2xhdGlvbiwgc2NhbGUgYW5kIG9yaWdpbi5cbiAqL1xudmFyIHhLZXlzID0gW1wieFwiLCBcInNjYWxlWFwiLCBcIm9yaWdpblhcIl07XG52YXIgeUtleXMgPSBbXCJ5XCIsIFwic2NhbGVZXCIsIFwib3JpZ2luWVwiXTtcbi8qKlxuICogUmVtb3ZlIGEgdHJhbnNmb3JtcyBmcm9tIGFuIGJveC4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlBeGlzQm94IGluIHJldmVyc2VcbiAqIGFuZCBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gbW90aW9uIHZhbHVlcyBhbmQgcmVtb3ZlQXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJveFRyYW5zZm9ybXMoYm94LCB0cmFuc2Zvcm1zLCBvcmlnaW5Cb3gsIHNvdXJjZUJveCkge1xuICAgIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGJveC54LCB0cmFuc2Zvcm1zLCB4S2V5cywgb3JpZ2luQm94ID09PSBudWxsIHx8IG9yaWdpbkJveCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luQm94LngsIHNvdXJjZUJveCA9PT0gbnVsbCB8fCBzb3VyY2VCb3ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZUJveC54KTtcbiAgICByZW1vdmVBeGlzVHJhbnNmb3Jtcyhib3gueSwgdHJhbnNmb3JtcywgeUtleXMsIG9yaWdpbkJveCA9PT0gbnVsbCB8fCBvcmlnaW5Cb3ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbkJveC55LCBzb3VyY2VCb3ggPT09IG51bGwgfHwgc291cmNlQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VCb3gueSk7XG59XG5cbnZhciBjcmVhdGVBeGlzRGVsdGEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHRyYW5zbGF0ZTogMCxcbiAgICBzY2FsZTogMSxcbiAgICBvcmlnaW46IDAsXG4gICAgb3JpZ2luUG9pbnQ6IDAsXG59KTsgfTtcbnZhciBjcmVhdGVEZWx0YSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgeDogY3JlYXRlQXhpc0RlbHRhKCksXG4gICAgeTogY3JlYXRlQXhpc0RlbHRhKCksXG59KTsgfTtcbnZhciBjcmVhdGVBeGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgbWluOiAwLCBtYXg6IDAgfSk7IH07XG52YXIgY3JlYXRlQm94ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICB4OiBjcmVhdGVBeGlzKCksXG4gICAgeTogY3JlYXRlQXhpcygpLFxufSk7IH07XG5cbmZ1bmN0aW9uIGlzQXhpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBkZWx0YS50cmFuc2xhdGUgPT09IDAgJiYgZGVsdGEuc2NhbGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBpc0F4aXNEZWx0YVplcm8oZGVsdGEueCkgJiYgaXNBeGlzRGVsdGFaZXJvKGRlbHRhLnkpO1xufVxuZnVuY3Rpb24gYm94RXF1YWxzKGEsIGIpIHtcbiAgICByZXR1cm4gKGEueC5taW4gPT09IGIueC5taW4gJiZcbiAgICAgICAgYS54Lm1heCA9PT0gYi54Lm1heCAmJlxuICAgICAgICBhLnkubWluID09PSBiLnkubWluICYmXG4gICAgICAgIGEueS5tYXggPT09IGIueS5tYXgpO1xufVxuXG52YXIgTm9kZVN0YWNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vZGVTdGFjaygpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzID0gW107XG4gICAgfVxuICAgIE5vZGVTdGFjay5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgYWRkVW5pcXVlSXRlbSh0aGlzLm1lbWJlcnMsIG5vZGUpO1xuICAgICAgICBub2RlLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgfTtcbiAgICBOb2RlU3RhY2sucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJlbW92ZUl0ZW0odGhpcy5tZW1iZXJzLCBub2RlKTtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMucHJldkxlYWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJldkxlYWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMubGVhZCkge1xuICAgICAgICAgICAgdmFyIHByZXZMZWFkID0gdGhpcy5tZW1iZXJzW3RoaXMubWVtYmVycy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChwcmV2TGVhZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvbW90ZShwcmV2TGVhZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE5vZGVTdGFjay5wcm90b3R5cGUucmVsZWdhdGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgaW5kZXhPZk5vZGUgPSB0aGlzLm1lbWJlcnMuZmluZEluZGV4KGZ1bmN0aW9uIChtZW1iZXIpIHsgcmV0dXJuIG5vZGUgPT09IG1lbWJlcjsgfSk7XG4gICAgICAgIGlmIChpbmRleE9mTm9kZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmQgdGhlIG5leHQgcHJvamVjdGlvbiBub2RlIHRoYXQgaXMgcHJlc2VudFxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHByZXZMZWFkO1xuICAgICAgICBmb3IgKHZhciBpID0gaW5kZXhPZk5vZGU7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgbWVtYmVyID0gdGhpcy5tZW1iZXJzW2ldO1xuICAgICAgICAgICAgaWYgKG1lbWJlci5pc1ByZXNlbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcHJldkxlYWQgPSBtZW1iZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZMZWFkKSB7XG4gICAgICAgICAgICB0aGlzLnByb21vdGUocHJldkxlYWQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE5vZGVTdGFjay5wcm90b3R5cGUucHJvbW90ZSA9IGZ1bmN0aW9uIChub2RlLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgcHJldkxlYWQgPSB0aGlzLmxlYWQ7XG4gICAgICAgIGlmIChub2RlID09PSBwcmV2TGVhZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5wcmV2TGVhZCA9IHByZXZMZWFkO1xuICAgICAgICB0aGlzLmxlYWQgPSBub2RlO1xuICAgICAgICBub2RlLnNob3coKTtcbiAgICAgICAgaWYgKHByZXZMZWFkKSB7XG4gICAgICAgICAgICBwcmV2TGVhZC5pbnN0YW5jZSAmJiBwcmV2TGVhZC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgbm9kZS5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgbm9kZS5yZXN1bWVGcm9tID0gcHJldkxlYWQ7XG4gICAgICAgICAgICBpZiAocHJlc2VydmVGb2xsb3dPcGFjaXR5KSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZXN1bWVGcm9tLnByZXNlcnZlT3BhY2l0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldkxlYWQuc25hcHNob3QpIHtcbiAgICAgICAgICAgICAgICBub2RlLnNuYXBzaG90ID0gcHJldkxlYWQuc25hcHNob3Q7XG4gICAgICAgICAgICAgICAgbm9kZS5zbmFwc2hvdC5sYXRlc3RWYWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgICBwcmV2TGVhZC5hbmltYXRpb25WYWx1ZXMgfHwgcHJldkxlYWQubGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgICAgIG5vZGUuc25hcHNob3QuaXNTaGFyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChfYSA9IG5vZGUucm9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBub2RlLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNyb3NzZmFkZSA9IG5vZGUub3B0aW9ucy5jcm9zc2ZhZGU7XG4gICAgICAgICAgICBpZiAoY3Jvc3NmYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHByZXZMZWFkLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVE9ETzpcbiAgICAgICAgICAgICAqICAgLSBUZXN0IGJvcmRlciByYWRpdXMgd2hlbiBwcmV2aW91cyBub2RlIHdhcyBkZWxldGVkXG4gICAgICAgICAgICAgKiAgIC0gYm94U2hhZG93IG1peGluZ1xuICAgICAgICAgICAgICogICAtIFNoYXJlZCBiZXR3ZWVuIGVsZW1lbnQgQSBpbiBzY3JvbGxlZCBjb250YWluZXIgYW5kIGVsZW1lbnQgQiAoc2Nyb2xsIHN0YXlzIHRoZSBzYW1lIG9yIGNoYW5nZXMpXG4gICAgICAgICAgICAgKiAgIC0gU2hhcmVkIGJldHdlZW4gZWxlbWVudCBBIGluIHRyYW5zZm9ybWVkIGNvbnRhaW5lciBhbmQgZWxlbWVudCBCICh0cmFuc2Zvcm0gc3RheXMgdGhlIHNhbWUgb3IgY2hhbmdlcylcbiAgICAgICAgICAgICAqICAgLSBTaGFyZWQgYmV0d2VlbiBlbGVtZW50IEEgaW4gc2Nyb2xsZWQgcGFnZSBhbmQgZWxlbWVudCBCIChzY3JvbGwgc3RheXMgdGhlIHNhbWUgb3IgY2hhbmdlcylcbiAgICAgICAgICAgICAqIC0tLVxuICAgICAgICAgICAgICogICAtIENyb3NzZmFkZSBvcGFjaXR5IG9mIHJvb3Qgbm9kZXNcbiAgICAgICAgICAgICAqICAgLSBsYXlvdXRJZCBjaGFuZ2VzIGFmdGVyIGFuaW1hdGlvblxuICAgICAgICAgICAgICogICAtIGxheW91dElkIGNoYW5nZXMgbWlkIGFuaW1hdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgIH1cbiAgICB9O1xuICAgIE5vZGVTdGFjay5wcm90b3R5cGUuZXhpdEFuaW1hdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1lbWJlcnMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IG5vZGUub3B0aW9ucykub25FeGl0Q29tcGxldGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgICAgIChfZSA9IChfYyA9IG5vZGUucmVzdW1pbmdGcm9tKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kID0gX2Mub3B0aW9ucykub25FeGl0Q29tcGxldGUpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jYWxsKF9kKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBOb2RlU3RhY2sucHJvdG90eXBlLnNjaGVkdWxlUmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1lbWJlcnMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5pbnN0YW5jZSAmJiBub2RlLnNjaGVkdWxlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhciBhbnkgbGVhZHMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCB0aGlzIHJlbmRlciB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZ1xuICAgICAqIHVzZWQgaW4gZnV0dXJlIGFuaW1hdGlvbnMgYW5kIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG4gICAgICovXG4gICAgTm9kZVN0YWNrLnByb3RvdHlwZS5yZW1vdmVMZWFkU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlYWQgJiYgdGhpcy5sZWFkLnNuYXBzaG90KSB7XG4gICAgICAgICAgICB0aGlzLmxlYWQuc25hcHNob3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBOb2RlU3RhY2s7XG59KCkpO1xuXG52YXIgc2NhbGVDb3JyZWN0b3JzID0ge307XG5mdW5jdGlvbiBhZGRTY2FsZUNvcnJlY3Rvcihjb3JyZWN0b3JzKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzY2FsZUNvcnJlY3RvcnMsIGNvcnJlY3RvcnMpO1xufVxuXG52YXIgaWRlbnRpdHlQcm9qZWN0aW9uID0gXCJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMCkgc2NhbGUoMSwgMSkgc2NhbGUoMSwgMSlcIjtcbmZ1bmN0aW9uIGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybShkZWx0YSwgdHJlZVNjYWxlLCBsYXRlc3RUcmFuc2Zvcm0pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhbnNsYXRpb25zIHdlIHVzZSB0byBjYWxjdWxhdGUgYXJlIGFsd2F5cyByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZSBzcGFjZS5cbiAgICAgKiBCdXQgd2hlbiB3ZSBhcHBseSBzY2FsZXMsIHdlIGFsc28gc2NhbGUgdGhlIGNvb3JkaW5hdGUgc3BhY2Ugb2YgYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqIEZvciBpbnN0YW5jZSBpZiB3ZSBoYXZlIGEgdHJlZVNjYWxlICh0aGUgY3VsbWluYXRpb24gb2YgYWxsIHBhcmVudCBzY2FsZXMpIG9mIDAuNSBhbmQgd2UgbmVlZFxuICAgICAqIHRvIG1vdmUgYW4gZWxlbWVudCAxMDAgcGl4ZWxzLCB3ZSBhY3R1YWxseSBuZWVkIHRvIG1vdmUgaXQgMjAwIGluIHdpdGhpbiB0aGF0IHNjYWxlZCBzcGFjZS5cbiAgICAgKi9cbiAgICB2YXIgeFRyYW5zbGF0ZSA9IGRlbHRhLngudHJhbnNsYXRlIC8gdHJlZVNjYWxlLng7XG4gICAgdmFyIHlUcmFuc2xhdGUgPSBkZWx0YS55LnRyYW5zbGF0ZSAvIHRyZWVTY2FsZS55O1xuICAgIHZhciB0cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiLmNvbmNhdCh4VHJhbnNsYXRlLCBcInB4LCBcIikuY29uY2F0KHlUcmFuc2xhdGUsIFwicHgsIDApIFwiKTtcbiAgICAvKipcbiAgICAgKiBBcHBseSBzY2FsZSBjb3JyZWN0aW9uIGZvciB0aGUgdHJlZSB0cmFuc2Zvcm0uXG4gICAgICogVGhpcyB3aWxsIGFwcGx5IHNjYWxlIHRvIHRoZSBzY3JlZW4tb3JpZW50YXRlZCBheGVzLlxuICAgICAqL1xuICAgIHRyYW5zZm9ybSArPSBcInNjYWxlKFwiLmNvbmNhdCgxIC8gdHJlZVNjYWxlLngsIFwiLCBcIikuY29uY2F0KDEgLyB0cmVlU2NhbGUueSwgXCIpIFwiKTtcbiAgICBpZiAobGF0ZXN0VHJhbnNmb3JtKSB7XG4gICAgICAgIHZhciByb3RhdGUgPSBsYXRlc3RUcmFuc2Zvcm0ucm90YXRlLCByb3RhdGVYID0gbGF0ZXN0VHJhbnNmb3JtLnJvdGF0ZVgsIHJvdGF0ZVkgPSBsYXRlc3RUcmFuc2Zvcm0ucm90YXRlWTtcbiAgICAgICAgaWYgKHJvdGF0ZSlcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZykgXCIpO1xuICAgICAgICBpZiAocm90YXRlWClcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBcInJvdGF0ZVgoXCIuY29uY2F0KHJvdGF0ZVgsIFwiZGVnKSBcIik7XG4gICAgICAgIGlmIChyb3RhdGVZKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IFwicm90YXRlWShcIi5jb25jYXQocm90YXRlWSwgXCJkZWcpIFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgc2NhbGUgdG8gbWF0Y2ggdGhlIHNpemUgb2YgdGhlIGVsZW1lbnQgdG8gdGhlIHNpemUgd2Ugd2FudCBpdC5cbiAgICAgKiBUaGlzIHdpbGwgYXBwbHkgc2NhbGUgdG8gdGhlIGVsZW1lbnQtb3JpZW50YXRlZCBheGVzLlxuICAgICAqL1xuICAgIHZhciBlbGVtZW50U2NhbGVYID0gZGVsdGEueC5zY2FsZSAqIHRyZWVTY2FsZS54O1xuICAgIHZhciBlbGVtZW50U2NhbGVZID0gZGVsdGEueS5zY2FsZSAqIHRyZWVTY2FsZS55O1xuICAgIHRyYW5zZm9ybSArPSBcInNjYWxlKFwiLmNvbmNhdChlbGVtZW50U2NhbGVYLCBcIiwgXCIpLmNvbmNhdChlbGVtZW50U2NhbGVZLCBcIilcIik7XG4gICAgcmV0dXJuIHRyYW5zZm9ybSA9PT0gaWRlbnRpdHlQcm9qZWN0aW9uID8gXCJub25lXCIgOiB0cmFuc2Zvcm07XG59XG5cbmZ1bmN0aW9uIGVhY2hBeGlzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFtjYWxsYmFjayhcInhcIiksIGNhbGxiYWNrKFwieVwiKV07XG59XG5cbi8qKlxuICogQSBsaXN0IG9mIGFsbCB0cmFuc2Zvcm1hYmxlIGF4ZXMuIFdlJ2xsIHVzZSB0aGlzIGxpc3QgdG8gZ2VuZXJhdGVkIGEgdmVyc2lvblxuICogb2YgZWFjaCBheGVzIGZvciBlYWNoIHRyYW5zZm9ybS5cbiAqL1xudmFyIHRyYW5zZm9ybUF4ZXMgPSBbXCJcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIl07XG4vKipcbiAqIEFuIG9yZGVyZWQgYXJyYXkgb2YgZWFjaCB0cmFuc2Zvcm1hYmxlIHZhbHVlLiBCeSBkZWZhdWx0LCB0cmFuc2Zvcm0gdmFsdWVzXG4gKiB3aWxsIGJlIHNvcnRlZCB0byB0aGlzIG9yZGVyLlxuICovXG52YXIgb3JkZXIgPSBbXCJ0cmFuc2xhdGVcIiwgXCJzY2FsZVwiLCBcInJvdGF0ZVwiLCBcInNrZXdcIl07XG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiBldmVyeSBwb3NzaWJsZSB0cmFuc2Zvcm0ga2V5LlxuICovXG52YXIgdHJhbnNmb3JtUHJvcHMgPSBbXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcInhcIiwgXCJ5XCIsIFwielwiXTtcbm9yZGVyLmZvckVhY2goZnVuY3Rpb24gKG9wZXJhdGlvbktleSkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1BeGVzLmZvckVhY2goZnVuY3Rpb24gKGF4ZXNLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVByb3BzLnB1c2gob3BlcmF0aW9uS2V5ICsgYXhlc0tleSk7XG4gICAgfSk7XG59KTtcbi8qKlxuICogQSBmdW5jdGlvbiB0byB1c2Ugd2l0aCBBcnJheS5zb3J0IHRvIHNvcnQgdHJhbnNmb3JtIGtleXMgYnkgdGhlaXIgZGVmYXVsdCBvcmRlci5cbiAqL1xuZnVuY3Rpb24gc29ydFRyYW5zZm9ybVByb3BzKGEsIGIpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUHJvcHMuaW5kZXhPZihhKSAtIHRyYW5zZm9ybVByb3BzLmluZGV4T2YoYik7XG59XG4vKipcbiAqIEEgcXVpY2sgbG9va3VwIGZvciB0cmFuc2Zvcm0gcHJvcHMuXG4gKi9cbnZhciB0cmFuc2Zvcm1Qcm9wU2V0ID0gbmV3IFNldCh0cmFuc2Zvcm1Qcm9wcyk7XG5mdW5jdGlvbiBpc1RyYW5zZm9ybVByb3Aoa2V5KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVByb3BTZXQuaGFzKGtleSk7XG59XG4vKipcbiAqIEEgcXVpY2sgbG9va3VwIGZvciB0cmFuc2Zvcm0gb3JpZ2luIHByb3BzXG4gKi9cbnZhciB0cmFuc2Zvcm1PcmlnaW5Qcm9wcyA9IG5ldyBTZXQoW1wib3JpZ2luWFwiLCBcIm9yaWdpbllcIiwgXCJvcmlnaW5aXCJdKTtcbmZ1bmN0aW9uIGlzVHJhbnNmb3JtT3JpZ2luUHJvcChrZXkpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtT3JpZ2luUHJvcHMuaGFzKGtleSk7XG59XG5cbnZhciBjb21wYXJlQnlEZXB0aCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuZGVwdGggLSBiLmRlcHRoO1xufTtcblxudmFyIEZsYXRUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZsYXRUcmVlKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgIH1cbiAgICBGbGF0VHJlZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5jaGlsZHJlbiwgY2hpbGQpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIH07XG4gICAgRmxhdFRyZWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZW1vdmVJdGVtKHRoaXMuY2hpbGRyZW4sIGNoaWxkKTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9O1xuICAgIEZsYXRUcmVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSAmJiB0aGlzLmNoaWxkcmVuLnNvcnQoY29tcGFyZUJ5RGVwdGgpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIHJldHVybiBGbGF0VHJlZTtcbn0oKSk7XG5cbi8qKlxuICogSWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGEgTW90aW9uVmFsdWUsIHRoaXMgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlLCBvdGhlcndpc2UganVzdCB0aGUgdmFsdWUgaXRzZWxmXG4gKlxuICogVE9ETzogUmVtb3ZlIGFuZCBtb3ZlIHRvIGxpYnJhcnlcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU1vdGlvblZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHVud3JhcHBlZFZhbHVlID0gaXNNb3Rpb25WYWx1ZSh2YWx1ZSkgPyB2YWx1ZS5nZXQoKSA6IHZhbHVlO1xuICAgIHJldHVybiBpc0N1c3RvbVZhbHVlKHVud3JhcHBlZFZhbHVlKVxuICAgICAgICA/IHVud3JhcHBlZFZhbHVlLnRvVmFsdWUoKVxuICAgICAgICA6IHVud3JhcHBlZFZhbHVlO1xufVxuXG4vKipcbiAqIFdlIHVzZSAxMDAwIGFzIHRoZSBhbmltYXRpb24gdGFyZ2V0IGFzIDAtMTAwMCBtYXBzIGJldHRlciB0byBwaXhlbHMgdGhhbiAwLTFcbiAqIHdoaWNoIGhhcyBhIG5vdGljZWFibGUgZGlmZmVyZW5jZSBpbiBzcHJpbmcgYW5pbWF0aW9uc1xuICovXG52YXIgYW5pbWF0aW9uVGFyZ2V0ID0gMTAwMDtcbi8qKlxuICogVGhpcyBzaG91bGQgb25seSBldmVyIGJlIG1vZGlmaWVkIG9uIHRoZSBjbGllbnQgb3RoZXJ3aXNlIGl0J2xsXG4gKiBwZXJzaXN0IHRocm91Z2ggc2VydmVyIHJlcXVlc3RzLiBJZiB3ZSBuZWVkIGluc3RhbmNlZCBzdGF0ZXMgd2VcbiAqIGNvdWxkIGxhenktaW5pdCB2aWEgcm9vdC5cbiAqL1xudmFyIGdsb2JhbFByb2plY3Rpb25TdGF0ZSA9IHtcbiAgICAvKipcbiAgICAgKiBHbG9iYWwgZmxhZyBhcyB0byB3aGV0aGVyIHRoZSB0cmVlIGhhcyBhbmltYXRlZCBzaW5jZSB0aGUgbGFzdCB0aW1lXG4gICAgICogd2UgcmVzaXplZCB0aGUgd2luZG93XG4gICAgICovXG4gICAgaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZTogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBXZSBzZXQgdGhpcyB0byB0cnVlIG9uY2UsIG9uIHRoZSBmaXJzdCB1cGRhdGUuIEFueSBub2RlcyBhZGRlZCB0byB0aGUgdHJlZSBiZXlvbmQgdGhhdFxuICAgICAqIHVwZGF0ZSB3aWxsIGJlIGdpdmVuIGEgYGRhdGEtcHJvamVjdGlvbi1pZGAgYXR0cmlidXRlLlxuICAgICAqL1xuICAgIGhhc0V2ZXJVcGRhdGVkOiBmYWxzZSxcbn07XG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0aW9uTm9kZShfYSkge1xuICAgIHZhciBhdHRhY2hSZXNpemVMaXN0ZW5lciA9IF9hLmF0dGFjaFJlc2l6ZUxpc3RlbmVyLCBkZWZhdWx0UGFyZW50ID0gX2EuZGVmYXVsdFBhcmVudCwgbWVhc3VyZVNjcm9sbCA9IF9hLm1lYXN1cmVTY3JvbGwsIGNoZWNrSXNTY3JvbGxSb290ID0gX2EuY2hlY2tJc1Njcm9sbFJvb3QsIHJlc2V0VHJhbnNmb3JtID0gX2EucmVzZXRUcmFuc2Zvcm07XG4gICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUHJvamVjdGlvbk5vZGUoaWQsIGxhdGVzdFZhbHVlcywgcGFyZW50KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGxhdGVzdFZhbHVlcyA9PT0gdm9pZCAwKSB7IGxhdGVzdFZhbHVlcyA9IHt9OyB9XG4gICAgICAgICAgICBpZiAocGFyZW50ID09PSB2b2lkIDApIHsgcGFyZW50ID0gZGVmYXVsdFBhcmVudCA9PT0gbnVsbCB8fCBkZWZhdWx0UGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0UGFyZW50KCk7IH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBTZXQgY29udGFpbmluZyBhbGwgdGhpcyBjb21wb25lbnQncyBjaGlsZHJlbi4gVGhpcyBpcyB1c2VkIHRvIGl0ZXJhdGVcbiAgICAgICAgICAgICAqIHRocm91Z2ggdGhlIGNoaWxkcmVuLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IFRoaXMgY291bGQgYmUgZmFzdGVyIHRvIGl0ZXJhdGUgYXMgYSBmbGF0IGFycmF5IHN0b3JlZCBvbiB0aGUgcm9vdCBub2RlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPcHRpb25zIGZvciB0aGUgbm9kZS4gV2UgdXNlIHRoaXMgdG8gY29uZmlndXJlIHdoYXQga2luZCBvZiBsYXlvdXQgYW5pbWF0aW9uc1xuICAgICAgICAgICAgICogd2Ugc2hvdWxkIHBlcmZvcm0gKGlmIGFueSkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSB1c2UgdGhpcyB0byBkZXRlY3Qgd2hlbiBpdHMgc2FmZSB0byBzaHV0IGRvd24gcGFydCBvZiBhIHByb2plY3Rpb24gdHJlZS5cbiAgICAgICAgICAgICAqIFdlIGhhdmUgdG8ga2VlcCBwcm9qZWN0aW5nIGNoaWxkcmVuIGZvciBzY2FsZSBjb3JyZWN0aW9uIGFuZCByZWxhdGl2ZSBwcm9qZWN0aW9uXG4gICAgICAgICAgICAgKiB1bnRpbCBhbGwgdGhlaXIgcGFyZW50cyBzdG9wIHBlcmZvcm1pbmcgbGF5b3V0IGFuaW1hdGlvbnMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNUcmVlQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzQW5pbWF0aW9uQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFnIHRvIHRydWUgaWYgd2UgdGhpbmsgdGhpcyBsYXlvdXQgaGFzIGJlZW4gY2hhbmdlZC4gV2UgY2FuJ3QgYWx3YXlzIGtub3cgdGhpcyxcbiAgICAgICAgICAgICAqIGN1cnJlbnRseSB3ZSBzZXQgaXQgdG8gdHJ1ZSBldmVyeSB0aW1lIGEgY29tcG9uZW50IHJlbmRlcnMsIG9yIGlmIGl0IGhhcyBhIGxheW91dERlcGVuZGVuY3lcbiAgICAgICAgICAgICAqIGlmIHRoYXQgaGFzIGNoYW5nZWQgYmV0d2VlbiByZW5kZXJzLiBBZGRpdGlvbmFsbHksIGNvbXBvbmVudHMgY2FuIGJlIGdyb3VwZWQgYnkgTGF5b3V0R3JvdXBcbiAgICAgICAgICAgICAqIGFuZCBpZiBvbmUgbm9kZSBpcyBkaXJ0aWVkLCB0aGV5IGFsbCBhcmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNMYXlvdXREaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCbG9jayBsYXlvdXQgdXBkYXRlcyBmb3IgaW5zdGFudCBsYXlvdXQgdHJhbnNpdGlvbnMgdGhyb3VnaG91dCB0aGUgdHJlZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYW51YWxseUJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQmxvY2tlZEJ5UmVzaXplID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldCB0byB0cnVlIGJldHdlZW4gdGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCBgd2lsbFVwZGF0ZWAgY2FsbCBhbmQgdGhlIGVuZCBvZiB0aGUgYGRpZFVwZGF0ZWBcbiAgICAgICAgICAgICAqIGNhbGwuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNVcGRhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGFuIFNWRyBlbGVtZW50IHdlIGN1cnJlbnRseSBkaXNhYmxlIHByb2plY3Rpb24gdHJhbnNmb3Jtc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzU1ZHID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZsYWcgdG8gdHJ1ZSAoZHVyaW5nIHByb21vdGlvbikgaWYgYSBub2RlIGRvaW5nIGFuIGluc3RhbnQgbGF5b3V0IHRyYW5zaXRpb24gbmVlZHMgdG8gcmVzZXRcbiAgICAgICAgICAgICAqIGl0cyBwcm9qZWN0aW9uIHN0eWxlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5uZWVkc1Jlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZsYWdzIHdoZXRoZXIgdGhpcyBub2RlIHNob3VsZCBoYXZlIGl0cyB0cmFuc2Zvcm0gcmVzZXQgcHJpb3IgdG8gbWVhc3VyaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnNob3VsZFJlc2V0VHJhbnNmb3JtID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGNhbGN1bGF0ZWQgY29udGV4dHVhbC9hY2N1bXVsYXRlZC90cmVlIHNjYWxlLlxuICAgICAgICAgICAgICogVGhpcyB3aWxsIGJlIHVzZWQgdG8gc2NhbGUgY2FsY3VsY2F0ZWQgcHJvamVjdGlvbiB0cmFuc2Zvcm1zLCBhcyB0aGVzZSBhcmVcbiAgICAgICAgICAgICAqIGNhbGN1bGF0ZWQgaW4gc2NyZWVuLXNwYWNlIGJ1dCBuZWVkIHRvIGJlIHNjYWxlZCBmb3IgZWxlbWVudHMgdG8gYWN0dWFsbHlcbiAgICAgICAgICAgICAqIG1ha2UgaXQgdG8gdGhlaXIgY2FsY3VsYXRlZCBkZXN0aW5hdGlvbnMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVE9ETzogTGF6eS1pbml0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudHJlZVNjYWxlID0geyB4OiAxLCB5OiAxIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIC8vIE5vdGU6IEN1cnJlbnRseSBvbmx5IHJ1bm5pbmcgb24gcm9vdCBub2RlXG4gICAgICAgICAgICB0aGlzLnBvdGVudGlhbE5vZGVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5jaGVja1VwZGF0ZUZhaWxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNVcGRhdGluZykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyQWxsU25hcHNob3RzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvamVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5ub2Rlcy5mb3JFYWNoKHJlc29sdmVUYXJnZXREZWx0YSk7XG4gICAgICAgICAgICAgICAgX3RoaXMubm9kZXMuZm9yRWFjaChjYWxjUHJvamVjdGlvbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5oYXNQcm9qZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTaGFyZWQgbGF5b3V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIFRPRE8gT25seSBydW5uaW5nIG9uIHJvb3Qgbm9kZVxuICAgICAgICAgICAgdGhpcy5zaGFyZWROb2RlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMubGF0ZXN0VmFsdWVzID0gbGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5yb290ID0gcGFyZW50ID8gcGFyZW50LnJvb3QgfHwgcGFyZW50IDogdGhpcztcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IHBhcmVudCA/IHRzbGliLl9fc3ByZWFkQXJyYXkodHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKHBhcmVudC5wYXRoKSwgZmFsc2UpLCBbcGFyZW50XSwgZmFsc2UpIDogW107XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgIHRoaXMuZGVwdGggPSBwYXJlbnQgPyBwYXJlbnQuZGVwdGggKyAxIDogMDtcbiAgICAgICAgICAgIGlkICYmIHRoaXMucm9vdC5yZWdpc3RlclBvdGVudGlhbE5vZGUoaWQsIHRoaXMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhbaV0uc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucm9vdCA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gbmV3IEZsYXRUcmVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAobmFtZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmV2ZW50SGFuZGxlcnMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzLnNldChuYW1lLCBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50SGFuZGxlcnMuZ2V0KG5hbWUpLmFkZChoYW5kbGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLm5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbk1hbmFnZXIgPSB0aGlzLmV2ZW50SGFuZGxlcnMuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uTWFuYWdlciA9PT0gbnVsbCB8fCBzdWJzY3JpcHRpb25NYW5hZ2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdWJzY3JpcHRpb25NYW5hZ2VyLm5vdGlmeS5hcHBseShzdWJzY3JpcHRpb25NYW5hZ2VyLCB0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCB0c2xpYi5fX3JlYWQoYXJncyksIGZhbHNlKSk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRIYW5kbGVycy5oYXMobmFtZSk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5yZWdpc3RlclBvdGVudGlhbE5vZGUgPSBmdW5jdGlvbiAoaWQsIG5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMucG90ZW50aWFsTm9kZXMuc2V0KGlkLCBub2RlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpZmVjeWNsZXNcbiAgICAgICAgICovXG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5tb3VudCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgaXNMYXlvdXREaXJ0eSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChpc0xheW91dERpcnR5ID09PSB2b2lkIDApIHsgaXNMYXlvdXREaXJ0eSA9IGZhbHNlOyB9XG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzU1ZHID1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgJiYgaW5zdGFuY2UudGFnTmFtZSAhPT0gXCJzdmdcIjtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIHZhciBfYiA9IHRoaXMub3B0aW9ucywgbGF5b3V0SWQgPSBfYi5sYXlvdXRJZCwgbGF5b3V0ID0gX2IubGF5b3V0LCB2aXN1YWxFbGVtZW50ID0gX2IudmlzdWFsRWxlbWVudDtcbiAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50ICYmICF2aXN1YWxFbGVtZW50LmdldEluc3RhbmNlKCkpIHtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50Lm1vdW50KGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucm9vdC5ub2Rlcy5hZGQodGhpcyk7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNoaWxkcmVuLmFkZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuaWQgJiYgdGhpcy5yb290LnBvdGVudGlhbE5vZGVzLmRlbGV0ZSh0aGlzLmlkKTtcbiAgICAgICAgICAgIGlmIChpc0xheW91dERpcnR5ICYmIChsYXlvdXQgfHwgbGF5b3V0SWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0xheW91dERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhdHRhY2hSZXNpemVMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHZhciB1bmJsb2NrVGltZW91dF8xO1xuICAgICAgICAgICAgICAgIHZhciByZXNpemVVbmJsb2NrVXBkYXRlXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX3RoaXMucm9vdC51cGRhdGVCbG9ja2VkQnlSZXNpemUgPSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhdHRhY2hSZXNpemVMaXN0ZW5lcihpbnN0YW5jZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb290LnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh1bmJsb2NrVGltZW91dF8xKTtcbiAgICAgICAgICAgICAgICAgICAgdW5ibG9ja1RpbWVvdXRfMSA9IHdpbmRvdy5zZXRUaW1lb3V0KHJlc2l6ZVVuYmxvY2tVcGRhdGVfMSwgMjUwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNBbmltYXRlZFNpbmNlUmVzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxQcm9qZWN0aW9uU3RhdGUuaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubm9kZXMuZm9yRWFjaChmaW5pc2hBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QucmVnaXN0ZXJTaGFyZWROb2RlKGxheW91dElkLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE9ubHkgcmVnaXN0ZXIgdGhlIGhhbmRsZXIgaWYgaXQgcmVxdWlyZXMgbGF5b3V0IGFuaW1hdGlvblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlICE9PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICAobGF5b3V0SWQgfHwgbGF5b3V0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImRpZFVwZGF0ZVwiLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gX2EuZGVsdGEsIGhhc0xheW91dENoYW5nZWQgPSBfYS5oYXNMYXlvdXRDaGFuZ2VkLCBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSBfYS5oYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQsIG5ld0xheW91dCA9IF9hLmxheW91dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzVHJlZUFuaW1hdGlvbkJsb2NrZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVsYXRpdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaGVyZSBpZiBhbiBhbmltYXRpb24gZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXlvdXRUcmFuc2l0aW9uID0gKF9jID0gKF9iID0gX3RoaXMub3B0aW9ucy50cmFuc2l0aW9uKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB2aXN1YWxFbGVtZW50LmdldERlZmF1bHRUcmFuc2l0aW9uKCkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2cgPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKCksIG9uTGF5b3V0QW5pbWF0aW9uU3RhcnQgPSBfZy5vbkxheW91dEFuaW1hdGlvblN0YXJ0LCBvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlID0gX2cub25MYXlvdXRBbmltYXRpb25Db21wbGV0ZTtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFRoZSB0YXJnZXQgbGF5b3V0IG9mIHRoZSBlbGVtZW50IG1pZ2h0IHN0YXkgdGhlIHNhbWUsXG4gICAgICAgICAgICAgICAgICAgICAqIGJ1dCBpdHMgcG9zaXRpb24gcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBoYXMgY2hhbmdlZC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRDaGFuZ2VkID0gIV90aGlzLnRhcmdldExheW91dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIWJveEVxdWFscyhfdGhpcy50YXJnZXRMYXlvdXQsIG5ld0xheW91dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZDtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIHRoZSBsYXlvdXQgaGFzbid0IHNlZW1lZCB0byBoYXZlIGNoYW5nZWQsIGl0IG1pZ2h0IGJlIHRoYXQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAqIGVsZW1lbnQgaXMgdmlzdWFsbHkgaW4gdGhlIHNhbWUgcGxhY2UgaW4gdGhlIGRvY3VtZW50IGJ1dCBpdHMgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBoYXMgaW5kZWVkIGNoYW5nZWQuIFNvIGhlcmUgd2UgY2hlY2sgZm9yIHRoYXQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCA9ICFoYXNMYXlvdXRDaGFuZ2VkICYmIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgoX2QgPSBfdGhpcy5yZXN1bWVGcm9tKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaGFzTGF5b3V0Q2hhbmdlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0YXJnZXRDaGFuZ2VkIHx8ICFfdGhpcy5jdXJyZW50QW5pbWF0aW9uKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5yZXN1bWVGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzdW1pbmdGcm9tID0gX3RoaXMucmVzdW1lRnJvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXN1bWluZ0Zyb20ucmVzdW1pbmdGcm9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0QW5pbWF0aW9uT3JpZ2luKGRlbHRhLCBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25PcHRpb25zID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGdldFZhbHVlVHJhbnNpdGlvbihsYXlvdXRUcmFuc2l0aW9uLCBcImxheW91dFwiKSksIHsgb25QbGF5OiBvbkxheW91dEFuaW1hdGlvblN0YXJ0LCBvbkNvbXBsZXRlOiBvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQuc2hvdWxkUmVkdWNlTW90aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uT3B0aW9ucy5kZWxheSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uT3B0aW9ucy50eXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydEFuaW1hdGlvbihhbmltYXRpb25PcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgdGhlIGxheW91dCBoYXNuJ3QgY2hhbmdlZCBhbmQgd2UgaGF2ZSBhbiBhbmltYXRpb24gdGhhdCBoYXNuJ3Qgc3RhcnRlZCB5ZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBmaW5pc2ggaXQgaW1tZWRpYXRlbHkuIE90aGVyd2lzZSBpdCB3aWxsIGJlIGFuaW1hdGluZyBmcm9tIGEgbG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoYXQgd2FzIHByb2JhYmx5IG5ldmVyIGNvbW1pdGVkIHRvIHNjcmVlbiBhbmQgbG9vayBsaWtlIGEganVtcHkgYm94LlxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0xheW91dENoYW5nZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hbmltYXRpb25Qcm9ncmVzcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZpbmlzaEFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaXNMZWFkKCkgJiYgKChfZiA9IChfZSA9IF90aGlzLm9wdGlvbnMpLm9uRXhpdENvbXBsZXRlKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY2FsbChfZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRhcmdldExheW91dCA9IG5ld0xheW91dDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxheW91dElkICYmIHRoaXMud2lsbFVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5yb290Lm5vZGVzLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuZ2V0U3RhY2soKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgIChfYiA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2hpbGRyZW4uZGVsZXRlKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHN5bmMuY2FuY2VsU3luYy5wcmVSZW5kZXIodGhpcy51cGRhdGVQcm9qZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gb25seSBvbiB0aGUgcm9vdFxuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuYmxvY2tVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS51bmJsb2NrVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYW51YWxseUJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmlzVXBkYXRlQmxvY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCB8fCB0aGlzLnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmlzVHJlZUFuaW1hdGlvbkJsb2NrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuaXNBbmltYXRpb25CbG9ja2VkIHx8XG4gICAgICAgICAgICAgICAgKChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCgpKSB8fFxuICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTm90ZTogY3VycmVudGx5IG9ubHkgcnVubmluZyBvbiByb290IG5vZGVcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnN0YXJ0VXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNVcGRhdGVCbG9ja2VkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMubm9kZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKHJlc2V0Um90YXRpb24pO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUud2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIChzaG91bGROb3RpZnlMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgaWYgKHNob3VsZE5vdGlmeUxpc3RlbmVycyA9PT0gdm9pZCAwKSB7IHNob3VsZE5vdGlmeUxpc3RlbmVycyA9IHRydWU7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3QuaXNVcGRhdGVCbG9ja2VkKCkpIHtcbiAgICAgICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLm9uRXhpdENvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIXRoaXMucm9vdC5pc1VwZGF0aW5nICYmIHRoaXMucm9vdC5zdGFydFVwZGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXlvdXREaXJ0eSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBub2RlLnNob3VsZFJlc2V0VHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUT0RPOiBDaGVjayB3ZSBoYXZlbid0IHVwZGF0ZWQgdGhlIHNjcm9sbFxuICAgICAgICAgICAgICAgICAqIHNpbmNlIHRoZSBsYXN0IGRpZFVwZGF0ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIG5vZGUudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2QgPSB0aGlzLm9wdGlvbnMsIGxheW91dElkID0gX2QubGF5b3V0SWQsIGxheW91dCA9IF9kLmxheW91dDtcbiAgICAgICAgICAgIGlmIChsYXlvdXRJZCA9PT0gdW5kZWZpbmVkICYmICFsYXlvdXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVRlbXBsYXRlID0gKF9jID0gdGhpcy5vcHRpb25zLnZpc3VhbEVsZW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5nZXRQcm9wcygpLnRyYW5zZm9ybVRlbXBsYXRlO1xuICAgICAgICAgICAgdGhpcy5wcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSA9IHRyYW5zZm9ybVRlbXBsYXRlID09PSBudWxsIHx8IHRyYW5zZm9ybVRlbXBsYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmFuc2Zvcm1UZW1wbGF0ZSh0aGlzLmxhdGVzdFZhbHVlcywgXCJcIik7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNuYXBzaG90KCk7XG4gICAgICAgICAgICBzaG91bGROb3RpZnlMaXN0ZW5lcnMgJiYgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJ3aWxsVXBkYXRlXCIpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBOb3RlOiBDdXJyZW50bHkgb25seSBydW5uaW5nIG9uIHJvb3Qgbm9kZVxuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuZGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVwZGF0ZVdhc0Jsb2NrZWQgPSB0aGlzLmlzVXBkYXRlQmxvY2tlZCgpO1xuICAgICAgICAgICAgLy8gV2hlbiBkb2luZyBhbiBpbnN0YW50IHRyYW5zaXRpb24sIHdlIHNraXAgdGhlIGxheW91dCB1cGRhdGUsXG4gICAgICAgICAgICAvLyBidXQgc2hvdWxkIHN0aWxsIGNsZWFuIHVwIHRoZSBtZWFzdXJlbWVudHMgc28gdGhhdCB0aGUgbmV4dFxuICAgICAgICAgICAgLy8gc25hcHNob3QgY291bGQgYmUgdGFrZW4gY29ycmVjdGx5LlxuICAgICAgICAgICAgaWYgKHVwZGF0ZVdhc0Jsb2NrZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuYmxvY2tVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQWxsU25hcHNob3RzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNsZWFyTWVhc3VyZW1lbnRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGluZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2VhcmNoIGZvciBhbmQgbW91bnQgbmV3bHktYWRkZWQgcHJvamVjdGlvbiBlbGVtZW50cy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBFdmVyeSB0aW1lIGEgbmV3IGNvbXBvbmVudCBpcyByZW5kZXJlZCB3ZSBjb3VsZCBzZWFyY2ggdXAgdGhlIHRyZWUgZm9yXG4gICAgICAgICAgICAgKiB0aGUgY2xvc2VzdCBtb3VudGVkIG5vZGUgYW5kIHF1ZXJ5IGZyb20gdGhlcmUgcmF0aGVyIHRoYW4gZG9jdW1lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnBvdGVudGlhbE5vZGVzLnNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvdGVudGlhbE5vZGVzLmZvckVhY2gobW91bnROb2RlRWFybHkpO1xuICAgICAgICAgICAgICAgIHRoaXMucG90ZW50aWFsTm9kZXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV3JpdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKHJlc2V0VHJhbnNmb3JtU3R5bGUpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZWFkID09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBVcGRhdGUgbGF5b3V0IG1lYXN1cmVtZW50cyBvZiB1cGRhdGVkIGNoaWxkcmVuXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2godXBkYXRlTGF5b3V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV3JpdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gTm90aWZ5IGxpc3RlbmVycyB0aGF0IHRoZSBsYXlvdXQgaXMgdXBkYXRlZFxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKG5vdGlmeUxheW91dFVwZGF0ZSk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQWxsU25hcHNob3RzKCk7XG4gICAgICAgICAgICAvLyBGbHVzaCBhbnkgc2NoZWR1bGVkIHVwZGF0ZXNcbiAgICAgICAgICAgIHN5bmMuZmx1c2hTeW5jLnVwZGF0ZSgpO1xuICAgICAgICAgICAgc3luYy5mbHVzaFN5bmMucHJlUmVuZGVyKCk7XG4gICAgICAgICAgICBzeW5jLmZsdXNoU3luYy5yZW5kZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmNsZWFyQWxsU25hcHNob3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNsZWFyU25hcHNob3QpO1xuICAgICAgICAgICAgdGhpcy5zaGFyZWROb2Rlcy5mb3JFYWNoKHJlbW92ZUxlYWRTbmFwc2hvdHMpO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuc2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3luY19fZGVmYXVsdFtcImRlZmF1bHRcIl0ucHJlUmVuZGVyKHRoaXMudXBkYXRlUHJvamVjdGlvbiwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuc2NoZWR1bGVDaGVja0FmdGVyVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSB1bm1vdW50aW5nIG5vZGUgaXMgaW4gYSBsYXlvdXRHcm91cCBhbmQgZGlkIHRyaWdnZXIgYSB3aWxsVXBkYXRlLFxuICAgICAgICAgICAgICogd2UgbWFudWFsbHkgY2FsbCBkaWRVcGRhdGUgdG8gZ2l2ZSBhIGNoYW5jZSB0byB0aGUgc2libGluZ3MgdG8gYW5pbWF0ZS5cbiAgICAgICAgICAgICAqIE90aGVyd2lzZSwgY2xlYW51cCBhbGwgc25hcHNob3RzIHRvIHByZXZlbnRzIGZ1dHVyZSBub2RlcyBmcm9tIHJldXNpbmcgdGhlbS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3luY19fZGVmYXVsdFtcImRlZmF1bHRcIl0ucG9zdFJlbmRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzTGF5b3V0RGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucm9vdC5kaWRVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJvb3QuY2hlY2tVcGRhdGVGYWlsZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSBtZWFzdXJlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS51cGRhdGVTbmFwc2hvdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNuYXBzaG90IHx8ICF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlZCA9IHRoaXMubWVhc3VyZSgpO1xuICAgICAgICAgICAgdmFyIGxheW91dCA9IHRoaXMucmVtb3ZlVHJhbnNmb3JtKHRoaXMucmVtb3ZlRWxlbWVudFNjcm9sbChtZWFzdXJlZCkpO1xuICAgICAgICAgICAgcm91bmRCb3gobGF5b3V0KTtcbiAgICAgICAgICAgIHRoaXMuc25hcHNob3QgPSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZWQ6IG1lYXN1cmVkLFxuICAgICAgICAgICAgICAgIGxheW91dDogbGF5b3V0LFxuICAgICAgICAgICAgICAgIGxhdGVzdFZhbHVlczoge30sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUudXBkYXRlTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIFRPRE86IEluY29ycG9yYXRlIGludG8gYSBmb3J3YXJkZWQgc2Nyb2xsIG9mZnNldFxuICAgICAgICAgICAgdGhpcy51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgICAgIGlmICghKHRoaXMub3B0aW9ucy5hbHdheXNNZWFzdXJlTGF5b3V0ICYmIHRoaXMuaXNMZWFkKCkpICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNMYXlvdXREaXJ0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hlbiBhIG5vZGUgaXMgbW91bnRlZCwgaXQgc2ltcGx5IHJlc3VtZXMgZnJvbSB0aGUgcHJldkxlYWQnc1xuICAgICAgICAgICAgICogc25hcHNob3QgaW5zdGVhZCBvZiB0YWtpbmcgYSBuZXcgb25lLCBidXQgdGhlIGFuY2VzdG9ycyBzY3JvbGxcbiAgICAgICAgICAgICAqIG1pZ2h0IGhhdmUgdXBkYXRlZCB3aGlsZSB0aGUgcHJldkxlYWQgaXMgdW5tb3VudGVkLiBXZSBuZWVkIHRvXG4gICAgICAgICAgICAgKiB1cGRhdGUgdGhlIHNjcm9sbCBhZ2FpbiB0byBtYWtlIHN1cmUgdGhlIGxheW91dCB3ZSBtZWFzdXJlIGlzXG4gICAgICAgICAgICAgKiB1cCB0byBkYXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bWVGcm9tICYmICF0aGlzLnJlc3VtZUZyb20uaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWVhc3VyZWQgPSB0aGlzLm1lYXN1cmUoKTtcbiAgICAgICAgICAgIHJvdW5kQm94KG1lYXN1cmVkKTtcbiAgICAgICAgICAgIHZhciBwcmV2TGF5b3V0ID0gdGhpcy5sYXlvdXQ7XG4gICAgICAgICAgICB0aGlzLmxheW91dCA9IHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlZDogbWVhc3VyZWQsXG4gICAgICAgICAgICAgICAgYWN0dWFsOiB0aGlzLnJlbW92ZUVsZW1lbnRTY3JvbGwobWVhc3VyZWQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0Q29ycmVjdGVkID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJtZWFzdXJlXCIsIHRoaXMubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5vdGlmeUxheW91dE1lYXN1cmUodGhpcy5sYXlvdXQuYWN0dWFsLCBwcmV2TGF5b3V0ID09PSBudWxsIHx8IHByZXZMYXlvdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZMYXlvdXQuYWN0dWFsKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnVwZGF0ZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGF5b3V0U2Nyb2xsICYmIHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzU2Nyb2xsUm9vdCA9IGNoZWNrSXNTY3JvbGxSb290KHRoaXMuaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gbWVhc3VyZVNjcm9sbCh0aGlzLmluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnJlc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKCFyZXNldFRyYW5zZm9ybSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgaXNSZXNldFJlcXVlc3RlZCA9IHRoaXMuaXNMYXlvdXREaXJ0eSB8fCB0aGlzLnNob3VsZFJlc2V0VHJhbnNmb3JtO1xuICAgICAgICAgICAgdmFyIGhhc1Byb2plY3Rpb24gPSB0aGlzLnByb2plY3Rpb25EZWx0YSAmJiAhaXNEZWx0YVplcm8odGhpcy5wcm9qZWN0aW9uRGVsdGEpO1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVRlbXBsYXRlID0gKF9hID0gdGhpcy5vcHRpb25zLnZpc3VhbEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRQcm9wcygpLnRyYW5zZm9ybVRlbXBsYXRlO1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVRlbXBsYXRlVmFsdWUgPSB0cmFuc2Zvcm1UZW1wbGF0ZSA9PT0gbnVsbCB8fCB0cmFuc2Zvcm1UZW1wbGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJhbnNmb3JtVGVtcGxhdGUodGhpcy5sYXRlc3RWYWx1ZXMsIFwiXCIpO1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVRlbXBsYXRlSGFzQ2hhbmdlZCA9IHRyYW5zZm9ybVRlbXBsYXRlVmFsdWUgIT09IHRoaXMucHJldlRyYW5zZm9ybVRlbXBsYXRlVmFsdWU7XG4gICAgICAgICAgICBpZiAoaXNSZXNldFJlcXVlc3RlZCAmJlxuICAgICAgICAgICAgICAgIChoYXNQcm9qZWN0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgIGhhc1RyYW5zZm9ybSh0aGlzLmxhdGVzdFZhbHVlcykgfHxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtVGVtcGxhdGVIYXNDaGFuZ2VkKSkge1xuICAgICAgICAgICAgICAgIHJlc2V0VHJhbnNmb3JtKHRoaXMuaW5zdGFuY2UsIHRyYW5zZm9ybVRlbXBsYXRlVmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5tZWFzdXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHZpc3VhbEVsZW1lbnQgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICB2YXIgYm94ID0gdmlzdWFsRWxlbWVudC5tZWFzdXJlVmlld3BvcnRCb3goKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB2aWV3cG9ydCBzY3JvbGwgdG8gZ2l2ZSBwYWdlLXJlbGF0aXZlIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICB2YXIgc2Nyb2xsID0gdGhpcy5yb290LnNjcm9sbDtcbiAgICAgICAgICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveC54LCBzY3JvbGwueCk7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3gueSwgc2Nyb2xsLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJveDtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnJlbW92ZUVsZW1lbnRTY3JvbGwgPSBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgICAgICB2YXIgYm94V2l0aG91dFNjcm9sbCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29weUJveEludG8oYm94V2l0aG91dFNjcm9sbCwgYm94KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGVyZm9ybWFuY2UgVE9ETzogS2VlcCBhIGN1bXVsYXRpdmUgc2Nyb2xsIG9mZnNldCBkb3duIHRoZSB0cmVlXG4gICAgICAgICAgICAgKiByYXRoZXIgdGhhbiBsb29wIGJhY2sgdXAgdGhlIHBhdGguXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbF8xID0gbm9kZS5zY3JvbGwsIG9wdGlvbnMgPSBub2RlLm9wdGlvbnMsIGlzU2Nyb2xsUm9vdCA9IG5vZGUuaXNTY3JvbGxSb290O1xuICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSB0aGlzLnJvb3QgJiYgc2Nyb2xsXzEgJiYgb3B0aW9ucy5sYXlvdXRTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBuZXcgc2Nyb2xsIHJvb3QsIHdlIHdhbnQgdG8gcmVtb3ZlIGFsbCBwcmV2aW91cyBzY3JvbGxzXG4gICAgICAgICAgICAgICAgICAgICAqIGZyb20gdGhlIHZpZXdwb3J0IGJveC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1Njcm9sbFJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKGJveFdpdGhvdXRTY3JvbGwsIGJveCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm9vdFNjcm9sbCA9IHRoaXMucm9vdC5zY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIFVuZG8gdGhlIGFwcGxpY2F0aW9uIG9mIHBhZ2Ugc2Nyb2xsIHRoYXQgd2FzIG9yaWdpbmFsbHkgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRvIHRoZSBtZWFzdXJlZCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb290U2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3hXaXRob3V0U2Nyb2xsLngsIC1yb290U2Nyb2xsLngpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC55LCAtcm9vdFNjcm9sbC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveFdpdGhvdXRTY3JvbGwueCwgc2Nyb2xsXzEueCk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC55LCBzY3JvbGxfMS55KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm94V2l0aG91dFNjcm9sbDtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmFwcGx5VHJhbnNmb3JtID0gZnVuY3Rpb24gKGJveCwgdHJhbnNmb3JtT25seSkge1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybU9ubHkgPT09IHZvaWQgMCkgeyB0cmFuc2Zvcm1Pbmx5ID0gZmFsc2U7IH1cbiAgICAgICAgICAgIHZhciB3aXRoVHJhbnNmb3JtcyA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29weUJveEludG8od2l0aFRyYW5zZm9ybXMsIGJveCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5wYXRoW2ldO1xuICAgICAgICAgICAgICAgIGlmICghdHJhbnNmb3JtT25seSAmJlxuICAgICAgICAgICAgICAgICAgICBub2RlLm9wdGlvbnMubGF5b3V0U2Nyb2xsICYmXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2Nyb2xsICYmXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgIT09IG5vZGUucm9vdCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Cb3god2l0aFRyYW5zZm9ybXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IC1ub2RlLnNjcm9sbC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogLW5vZGUuc2Nyb2xsLnksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWhhc1RyYW5zZm9ybShub2RlLmxhdGVzdFZhbHVlcykpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUJveCh3aXRoVHJhbnNmb3Jtcywgbm9kZS5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc1RyYW5zZm9ybSh0aGlzLmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Cb3god2l0aFRyYW5zZm9ybXMsIHRoaXMubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3aXRoVHJhbnNmb3JtcztcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnJlbW92ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHZhciBib3hXaXRob3V0VHJhbnNmb3JtID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICBjb3B5Qm94SW50byhib3hXaXRob3V0VHJhbnNmb3JtLCBib3gpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmICghaGFzVHJhbnNmb3JtKG5vZGUubGF0ZXN0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaGFzU2NhbGUobm9kZS5sYXRlc3RWYWx1ZXMpICYmIG5vZGUudXBkYXRlU25hcHNob3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlQm94ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVCb3ggPSBub2RlLm1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICBjb3B5Qm94SW50byhzb3VyY2VCb3gsIG5vZGVCb3gpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUJveFRyYW5zZm9ybXMoYm94V2l0aG91dFRyYW5zZm9ybSwgbm9kZS5sYXRlc3RWYWx1ZXMsIChfYSA9IG5vZGUuc25hcHNob3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYXlvdXQsIHNvdXJjZUJveCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzVHJhbnNmb3JtKHRoaXMubGF0ZXN0VmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUJveFRyYW5zZm9ybXMoYm94V2l0aG91dFRyYW5zZm9ybSwgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJveFdpdGhvdXRUcmFuc2Zvcm07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnNldFRhcmdldERlbHRhID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldERlbHRhID0gZGVsdGE7XG4gICAgICAgICAgICB0aGlzLnJvb3Quc2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKSwgeyBjcm9zc2ZhZGU6IChfYSA9IG9wdGlvbnMuY3Jvc3NmYWRlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0cnVlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuY2xlYXJNZWFzdXJlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5zbmFwc2hvdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMucHJldlRyYW5zZm9ybVRlbXBsYXRlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnRhcmdldERlbHRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZyYW1lIGNhbGN1bGF0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnJlc29sdmVUYXJnZXREZWx0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHZhciBfYiA9IHRoaXMub3B0aW9ucywgbGF5b3V0ID0gX2IubGF5b3V0LCBsYXlvdXRJZCA9IF9iLmxheW91dElkO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIG5vIGxheW91dCwgd2UgY2FuJ3QgcGVyZm9ybSBwcm9qZWN0aW9uLCBzbyBlYXJseSByZXR1cm5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxheW91dCB8fCAhKGxheW91dCB8fCBsYXlvdXRJZCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGEgdGFyZ2V0RGVsdGEgYnV0IGRvIGhhdmUgYSBsYXlvdXQsIHdlIGNhbiBhdHRlbXB0IHRvIHJlc29sdmVcbiAgICAgICAgICAgICAqIGEgcmVsYXRpdmVQYXJlbnQuIFRoaXMgd2lsbCBhbGxvdyBhIGNvbXBvbmVudCB0byBwZXJmb3JtIHNjYWxlIGNvcnJlY3Rpb25cbiAgICAgICAgICAgICAqIGV2ZW4gaWYgbm8gYW5pbWF0aW9uIGhhcyBzdGFydGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBUT0RPIElmIHRoaXMgaXMgdW5zdWNjZXNzZnVsIHRoaXMgY3VycmVudGx5IGhhcHBlbnMgZXZlcnkgZnJhbWVcbiAgICAgICAgICAgIGlmICghdGhpcy50YXJnZXREZWx0YSAmJiAhdGhpcy5yZWxhdGl2ZVRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgaXMgYSBzZW1pLXJlcGV0aXRpb24gb2YgZnVydGhlciBkb3duIHRoaXMgZnVuY3Rpb24sIG1ha2UgRFJZXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudCA9IHRoaXMuZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZVBhcmVudCAmJiB0aGlzLnJlbGF0aXZlUGFyZW50LmxheW91dCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4gPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlUG9zaXRpb24odGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiwgdGhpcy5sYXlvdXQuYWN0dWFsLCB0aGlzLnJlbGF0aXZlUGFyZW50LmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5Qm94SW50byh0aGlzLnJlbGF0aXZlVGFyZ2V0LCB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgbm8gcmVsYXRpdmUgdGFyZ2V0IG9yIG5vIHRhcmdldCBkZWx0YSBvdXIgdGFyZ2V0IGlzbid0IHZhbGlkXG4gICAgICAgICAgICAgKiBmb3IgdGhpcyBmcmFtZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJlbGF0aXZlVGFyZ2V0ICYmICF0aGlzLnRhcmdldERlbHRhKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTGF6eS1pbml0IHRhcmdldCBkYXRhIHN0cnVjdHVyZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFdpdGhUcmFuc2Zvcm1zID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3ZlIGdvdCBhIHJlbGF0aXZlIGJveCBmb3IgdGhpcyBjb21wb25lbnQsIHJlc29sdmUgaXQgaW50byBhIHRhcmdldCByZWxhdGl2ZSB0byB0aGUgcGFyZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZVRhcmdldCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4gJiZcbiAgICAgICAgICAgICAgICAoKF9hID0gdGhpcy5yZWxhdGl2ZVBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVCb3godGhpcy50YXJnZXQsIHRoaXMucmVsYXRpdmVUYXJnZXQsIHRoaXMucmVsYXRpdmVQYXJlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB3ZSd2ZSBvbmx5IGdvdCBhIHRhcmdldERlbHRhLCByZXNvbHZlIGl0IGludG8gYSB0YXJnZXRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudGFyZ2V0RGVsdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoQm9vbGVhbih0aGlzLnJlc3VtaW5nRnJvbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBpcyBjcmVhdGluZyBhIG5ldyBvYmplY3QgZXZlcnkgZnJhbWVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLmFwcGx5VHJhbnNmb3JtKHRoaXMubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb3B5Qm94SW50byh0aGlzLnRhcmdldCwgdGhpcy5sYXlvdXQuYWN0dWFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBwbHlCb3hEZWx0YSh0aGlzLnRhcmdldCwgdGhpcy50YXJnZXREZWx0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiBubyB0YXJnZXQsIHVzZSBvd24gbGF5b3V0IGFzIHRhcmdldFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMudGFyZ2V0LCB0aGlzLmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSd2ZSBiZWVuIHRvbGQgdG8gYXR0ZW1wdCB0byByZXNvbHZlIGEgcmVsYXRpdmUgdGFyZ2V0LCBkbyBzby5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0ZW1wdFRvUmVzb2x2ZVJlbGF0aXZlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50ID0gdGhpcy5nZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlUGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIEJvb2xlYW4odGhpcy5yZWxhdGl2ZVBhcmVudC5yZXN1bWluZ0Zyb20pID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgQm9vbGVhbih0aGlzLnJlc3VtaW5nRnJvbSkgJiZcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMucmVsYXRpdmVQYXJlbnQub3B0aW9ucy5sYXlvdXRTY3JvbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVBhcmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4sIHRoaXMudGFyZ2V0LCB0aGlzLnJlbGF0aXZlUGFyZW50LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMucmVsYXRpdmVUYXJnZXQsIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCB8fCBoYXNUcmFuc2Zvcm0odGhpcy5wYXJlbnQubGF0ZXN0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCh0aGlzLnBhcmVudC5yZWxhdGl2ZVRhcmdldCB8fCB0aGlzLnBhcmVudC50YXJnZXREZWx0YSkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5sYXlvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmNhbGNQcm9qZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5vcHRpb25zLCBsYXlvdXQgPSBfYi5sYXlvdXQsIGxheW91dElkID0gX2IubGF5b3V0SWQ7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgc2VjdGlvbiBvZiB0aGUgdHJlZSBpc24ndCBhbmltYXRpbmcgd2UgY2FuXG4gICAgICAgICAgICAgKiBkZWxldGUgb3VyIHRhcmdldCBzb3VyY2VzIGZvciB0aGUgZm9sbG93aW5nIGZyYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzVHJlZUFuaW1hdGluZyA9IEJvb2xlYW4oKChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNUcmVlQW5pbWF0aW5nKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiB8fFxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0FuaW1hdGlvbik7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNUcmVlQW5pbWF0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXREZWx0YSA9IHRoaXMucmVsYXRpdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMubGF5b3V0IHx8ICEobGF5b3V0IHx8IGxheW91dElkKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXNldCB0aGUgY29ycmVjdGVkIGJveCB3aXRoIHRoZSBsYXRlc3QgdmFsdWVzIGZyb20gYm94LCBhcyB3ZSdyZSB0aGVuIGdvaW5nXG4gICAgICAgICAgICAgKiB0byBwZXJmb3JtIG11dGF0aXZlIG9wZXJhdGlvbnMgb24gaXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0aGlzLmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcHBseSBhbGwgdGhlIHBhcmVudCBkZWx0YXMgdG8gdGhpcyBib3ggdG8gcHJvZHVjZSB0aGUgY29ycmVjdGVkIGJveC4gVGhpc1xuICAgICAgICAgICAgICogaXMgdGhlIGxheW91dCBib3gsIGFzIGl0IHdpbGwgYXBwZWFyIG9uIHNjcmVlbiBhcyBhIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtcyBvZiBpdHMgcGFyZW50cy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYXBwbHlUcmVlRGVsdGFzKHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0aGlzLnRyZWVTY2FsZSwgdGhpcy5wYXRoLCBCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSB8fCB0aGlzICE9PSBsZWFkKTtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBsZWFkLnRhcmdldDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9qZWN0aW9uRGVsdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YSA9IGNyZWF0ZURlbHRhKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uRGVsdGFXaXRoVHJhbnNmb3JtID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcmV2VHJlZVNjYWxlWCA9IHRoaXMudHJlZVNjYWxlLng7XG4gICAgICAgICAgICB2YXIgcHJldlRyZWVTY2FsZVkgPSB0aGlzLnRyZWVTY2FsZS55O1xuICAgICAgICAgICAgdmFyIHByZXZQcm9qZWN0aW9uVHJhbnNmb3JtID0gdGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgdGhlIGRlbHRhIGJldHdlZW4gdGhlIGNvcnJlY3RlZCBib3ggYW5kIHRoZSB0YXJnZXQgYm94IGJlZm9yZSB1c2VyLXNldCB0cmFuc2Zvcm1zIHdlcmUgYXBwbGllZC5cbiAgICAgICAgICAgICAqIFRoaXMgd2lsbCBhbGxvdyB1cyB0byBjYWxjdWxhdGUgdGhlIGNvcnJlY3RlZCBib3JkZXJSYWRpdXMgYW5kIGJveFNoYWRvdyB0byBjb21wZW5zYXRlXG4gICAgICAgICAgICAgKiBmb3Igb3VyIGxheW91dCByZXByb2plY3Rpb24sIGJ1dCBzdGlsbCBhbGxvdyB0aGVtIHRvIGJlIHNjYWxlZCBjb3JyZWN0bHkgYnkgdGhlIHVzZXIuXG4gICAgICAgICAgICAgKiBJdCBtaWdodCBiZSB0aGF0IHRvIHNpbXBsaWZ5IHRoaXMgd2UgbWF5IHdhbnQgdG8gYWNjZXB0IHRoYXQgdXNlci1zZXQgc2NhbGUgaXMgYWxzbyBjb3JyZWN0ZWRcbiAgICAgICAgICAgICAqIGFuZCB3ZSB3b3VsZG4ndCBoYXZlIHRvIGtlZXAgYW5kIGNhbGMgYm90aCBkZWx0YXMsIE9SIHdlIGNvdWxkIHN1cHBvcnQgYSB1c2VyIHNldHRpbmdcbiAgICAgICAgICAgICAqIHRvIGFsbG93IHBlb3BsZSB0byBjaG9vc2Ugd2hldGhlciB0aGVzZSBzdHlsZXMgYXJlIGNvcnJlY3RlZCBiYXNlZCBvbiBqdXN0IHRoZVxuICAgICAgICAgICAgICogbGF5b3V0IHJlcHJvamVjdGlvbiBvciB0aGUgZmluYWwgYm91bmRpbmcgYm94LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjYWxjQm94RGVsdGEodGhpcy5wcm9qZWN0aW9uRGVsdGEsIHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0YXJnZXQsIHRoaXMubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvblRyYW5zZm9ybSA9IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSh0aGlzLnByb2plY3Rpb25EZWx0YSwgdGhpcy50cmVlU2NhbGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvblRyYW5zZm9ybSAhPT0gcHJldlByb2plY3Rpb25UcmFuc2Zvcm0gfHxcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVTY2FsZS54ICE9PSBwcmV2VHJlZVNjYWxlWCB8fFxuICAgICAgICAgICAgICAgIHRoaXMudHJlZVNjYWxlLnkgIT09IHByZXZUcmVlU2NhbGVZKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNQcm9qZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhcInByb2plY3Rpb25VcGRhdGVcIiwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gVE9ETzogU2NoZWR1bGUgcmVuZGVyXG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgLy8gVE9ETzogU2NoZWR1bGUgcmVuZGVyXG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5zY2hlZHVsZVJlbmRlciA9IGZ1bmN0aW9uIChub3RpZnlBbGwpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgaWYgKG5vdGlmeUFsbCA9PT0gdm9pZCAwKSB7IG5vdGlmeUFsbCA9IHRydWU7IH1cbiAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMub3B0aW9ucykuc2NoZWR1bGVSZW5kZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgICAgIG5vdGlmeUFsbCAmJiAoKF9jID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2NoZWR1bGVSZW5kZXIoKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bWluZ0Zyb20gJiYgIXRoaXMucmVzdW1pbmdGcm9tLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5zZXRBbmltYXRpb25PcmlnaW4gPSBmdW5jdGlvbiAoZGVsdGEsIGhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCA9PT0gdm9pZCAwKSB7IGhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSBmYWxzZTsgfVxuICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5zbmFwc2hvdDtcbiAgICAgICAgICAgIHZhciBzbmFwc2hvdExhdGVzdFZhbHVlcyA9IChzbmFwc2hvdCA9PT0gbnVsbCB8fCBzbmFwc2hvdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc25hcHNob3QubGF0ZXN0VmFsdWVzKSB8fCB7fTtcbiAgICAgICAgICAgIHZhciBtaXhlZFZhbHVlcyA9IHRzbGliLl9fYXNzaWduKHt9LCB0aGlzLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0RGVsdGEgPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldCA9IHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCA9ICFoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkO1xuICAgICAgICAgICAgdmFyIHJlbGF0aXZlTGF5b3V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICB2YXIgaXNTaGFyZWRMYXlvdXRBbmltYXRpb24gPSBzbmFwc2hvdCA9PT0gbnVsbCB8fCBzbmFwc2hvdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc25hcHNob3QuaXNTaGFyZWQ7XG4gICAgICAgICAgICB2YXIgaXNPbmx5TWVtYmVyID0gKCgoX2EgPSB0aGlzLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZW1iZXJzLmxlbmd0aCkgfHwgMCkgPD0gMTtcbiAgICAgICAgICAgIHZhciBzaG91bGRDcm9zc2ZhZGVPcGFjaXR5ID0gQm9vbGVhbihpc1NoYXJlZExheW91dEFuaW1hdGlvbiAmJlxuICAgICAgICAgICAgICAgICFpc09ubHlNZW1iZXIgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY3Jvc3NmYWRlID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgIXRoaXMucGF0aC5zb21lKGhhc09wYWNpdHlDcm9zc2ZhZGUpKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgdGhpcy5taXhUYXJnZXREZWx0YSA9IGZ1bmN0aW9uIChsYXRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gbGF0ZXN0IC8gMTAwMDtcbiAgICAgICAgICAgICAgICBtaXhBeGlzRGVsdGEodGFyZ2V0RGVsdGEueCwgZGVsdGEueCwgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIG1peEF4aXNEZWx0YSh0YXJnZXREZWx0YS55LCBkZWx0YS55LCBwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0VGFyZ2V0RGVsdGEodGFyZ2V0RGVsdGEpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5yZWxhdGl2ZVRhcmdldCAmJlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiAmJlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sYXlvdXQgJiZcbiAgICAgICAgICAgICAgICAgICAgKChfYSA9IF90aGlzLnJlbGF0aXZlUGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGF5b3V0KSkge1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbihyZWxhdGl2ZUxheW91dCwgX3RoaXMubGF5b3V0LmFjdHVhbCwgX3RoaXMucmVsYXRpdmVQYXJlbnQubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgICAgIG1peEJveChfdGhpcy5yZWxhdGl2ZVRhcmdldCwgX3RoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4sIHJlbGF0aXZlTGF5b3V0LCBwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc1NoYXJlZExheW91dEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hbmltYXRpb25WYWx1ZXMgPSBtaXhlZFZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgbWl4VmFsdWVzKG1peGVkVmFsdWVzLCBzbmFwc2hvdExhdGVzdFZhbHVlcywgX3RoaXMubGF0ZXN0VmFsdWVzLCBwcm9ncmVzcywgc2hvdWxkQ3Jvc3NmYWRlT3BhY2l0eSwgaXNPbmx5TWVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC5zY2hlZHVsZVVwZGF0ZVByb2plY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvblByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5taXhUYXJnZXREZWx0YSgwKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJhbmltYXRpb25TdGFydFwiKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuY3VycmVudEFuaW1hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0b3AoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgIChfYiA9IHRoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc3luYy5jYW5jZWxTeW5jLnVwZGF0ZSh0aGlzLnBlbmRpbmdBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0FuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RhcnQgdGhlIGFuaW1hdGlvbiBpbiB0aGUgbmV4dCBmcmFtZSB0byBoYXZlIGEgZnJhbWUgd2l0aCBwcm9ncmVzcyAwLFxuICAgICAgICAgICAgICogd2hlcmUgdGhlIHRhcmdldCBpcyB0aGUgc2FtZSBhcyB3aGVuIHRoZSBhbmltYXRpb24gc3RhcnRlZCwgc28gd2UgY2FuXG4gICAgICAgICAgICAgKiBjYWxjdWxhdGUgdGhlIHJlbGF0aXZlIHBvc2l0aW9ucyBjb3JyZWN0bHkgZm9yIGluc3RhbnQgdHJhbnNpdGlvbnMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0FuaW1hdGlvbiA9IHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnVwZGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0FuaW1hdGVkU2luY2VSZXNpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRBbmltYXRpb24gPSBhbmltYXRlKDAsIGFuaW1hdGlvblRhcmdldCwgdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IG9uVXBkYXRlOiBmdW5jdGlvbiAobGF0ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taXhUYXJnZXREZWx0YShsYXRlc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gb3B0aW9ucy5vblVwZGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwob3B0aW9ucywgbGF0ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgb25Db21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gb3B0aW9ucy5vbkNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbXBsZXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gfSkpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5yZXN1bWluZ0Zyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24gPSBfdGhpcy5jdXJyZW50QW5pbWF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5wZW5kaW5nQW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5jb21wbGV0ZUFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20ucHJlc2VydmVPcGFjaXR5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXhpdEFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbSA9XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25WYWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJhbmltYXRpb25Db21wbGV0ZVwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmZpbmlzaEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLm1peFRhcmdldERlbHRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBhbmltYXRpb25UYXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlQW5pbWF0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5hcHBseVRyYW5zZm9ybXNUb1RhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0TGVhZCgpLCB0YXJnZXRXaXRoVHJhbnNmb3JtcyA9IF9hLnRhcmdldFdpdGhUcmFuc2Zvcm1zLCB0YXJnZXQgPSBfYS50YXJnZXQsIGxheW91dCA9IF9hLmxheW91dCwgbGF0ZXN0VmFsdWVzID0gX2EubGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXRXaXRoVHJhbnNmb3JtcyB8fCAhdGFyZ2V0IHx8ICFsYXlvdXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29weUJveEludG8odGFyZ2V0V2l0aFRyYW5zZm9ybXMsIHRhcmdldCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFwcGx5IHRoZSBsYXRlc3QgdXNlci1zZXQgdHJhbnNmb3JtcyB0byB0aGUgdGFyZ2V0Qm94IHRvIHByb2R1Y2UgdGhlIHRhcmdldEJveEZpbmFsLlxuICAgICAgICAgICAgICogVGhpcyBpcyB0aGUgZmluYWwgYm94IHRoYXQgd2Ugd2lsbCB0aGVuIHByb2plY3QgaW50byBieSBjYWxjdWxhdGluZyBhIHRyYW5zZm9ybSBkZWx0YSBhbmRcbiAgICAgICAgICAgICAqIGFwcGx5aW5nIGl0IHRvIHRoZSBjb3JyZWN0ZWQgYm94LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0cmFuc2Zvcm1Cb3godGFyZ2V0V2l0aFRyYW5zZm9ybXMsIGxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgZGVsdGEgYmV0d2VlbiB0aGUgY29ycmVjdGVkIGJveCBhbmQgdGhlIGZpbmFsIHRhcmdldCBib3gsIGFmdGVyXG4gICAgICAgICAgICAgKiB1c2VyLXNldCB0cmFuc2Zvcm1zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGlzIHdpbGwgYmUgdXNlZCBieSB0aGUgcmVuZGVyZXIgdG9cbiAgICAgICAgICAgICAqIGNyZWF0ZSBhIHRyYW5zZm9ybSBzdHlsZSB0aGF0IHdpbGwgcmVwcm9qZWN0IHRoZSBlbGVtZW50IGZyb20gaXRzIGFjdHVhbCBsYXlvdXRcbiAgICAgICAgICAgICAqIGludG8gdGhlIGRlc2lyZWQgYm91bmRpbmcgYm94LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjYWxjQm94RGVsdGEodGhpcy5wcm9qZWN0aW9uRGVsdGFXaXRoVHJhbnNmb3JtLCB0aGlzLmxheW91dENvcnJlY3RlZCwgdGFyZ2V0V2l0aFRyYW5zZm9ybXMsIGxhdGVzdFZhbHVlcyk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5yZWdpc3RlclNoYXJlZE5vZGUgPSBmdW5jdGlvbiAobGF5b3V0SWQsIG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNoYXJlZE5vZGVzLmhhcyhsYXlvdXRJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXJlZE5vZGVzLnNldChsYXlvdXRJZCwgbmV3IE5vZGVTdGFjaygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdGFjayA9IHRoaXMuc2hhcmVkTm9kZXMuZ2V0KGxheW91dElkKTtcbiAgICAgICAgICAgIHN0YWNrLmFkZChub2RlKTtcbiAgICAgICAgICAgIG5vZGUucHJvbW90ZSh7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogKF9hID0gbm9kZS5vcHRpb25zLmluaXRpYWxQcm9tb3Rpb25Db25maWcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50cmFuc2l0aW9uLFxuICAgICAgICAgICAgICAgIHByZXNlcnZlRm9sbG93T3BhY2l0eTogKF9jID0gKF9iID0gbm9kZS5vcHRpb25zLmluaXRpYWxQcm9tb3Rpb25Db25maWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zaG91bGRQcmVzZXJ2ZUZvbGxvd09wYWNpdHkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKF9iLCBub2RlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuaXNMZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrID8gc3RhY2subGVhZCA9PT0gdGhpcyA6IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5nZXRMZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIGxheW91dElkID0gdGhpcy5vcHRpb25zLmxheW91dElkO1xuICAgICAgICAgICAgcmV0dXJuIGxheW91dElkID8gKChfYSA9IHRoaXMuZ2V0U3RhY2soKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlYWQpIHx8IHRoaXMgOiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuZ2V0UHJldkxlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgbGF5b3V0SWQgPSB0aGlzLm9wdGlvbnMubGF5b3V0SWQ7XG4gICAgICAgICAgICByZXR1cm4gbGF5b3V0SWQgPyAoX2EgPSB0aGlzLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wcmV2TGVhZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmdldFN0YWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxheW91dElkID0gdGhpcy5vcHRpb25zLmxheW91dElkO1xuICAgICAgICAgICAgaWYgKGxheW91dElkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Quc2hhcmVkTm9kZXMuZ2V0KGxheW91dElkKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnByb21vdGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBuZWVkc1Jlc2V0ID0gX2IubmVlZHNSZXNldCwgdHJhbnNpdGlvbiA9IF9iLnRyYW5zaXRpb24sIHByZXNlcnZlRm9sbG93T3BhY2l0eSA9IF9iLnByZXNlcnZlRm9sbG93T3BhY2l0eTtcbiAgICAgICAgICAgIHZhciBzdGFjayA9IHRoaXMuZ2V0U3RhY2soKTtcbiAgICAgICAgICAgIGlmIChzdGFjaylcbiAgICAgICAgICAgICAgICBzdGFjay5wcm9tb3RlKHRoaXMsIHByZXNlcnZlRm9sbG93T3BhY2l0eSk7XG4gICAgICAgICAgICBpZiAobmVlZHNSZXNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMubmVlZHNSZXNldCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbilcbiAgICAgICAgICAgICAgICB0aGlzLnNldE9wdGlvbnMoeyB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uIH0pO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUucmVsZWdhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICBpZiAoc3RhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2sucmVsZWdhdGUodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5yZXNldFJvdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHZpc3VhbEVsZW1lbnQgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGRldGVjdGVkIHJvdGF0aW9uIHZhbHVlcywgd2UgY2FuIGVhcmx5IHJldHVybiB3aXRob3V0IGEgZm9yY2VkIHJlbmRlci5cbiAgICAgICAgICAgIHZhciBoYXNSb3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIEtlZXAgYSByZWNvcmQgb2YgYWxsIHRoZSB2YWx1ZXMgd2UndmUgcmVzZXRcbiAgICAgICAgICAgIHZhciByZXNldFZhbHVlcyA9IHt9O1xuICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJvdGF0ZSB2YWx1ZSBvZiBhbGwgYXhlcyBhbmQgcmVzZXQgdG8gMFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFuc2Zvcm1BeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF4aXMgPSB0cmFuc2Zvcm1BeGVzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBcInJvdGF0ZVwiICsgYXhpcztcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIHJvdGF0aW9uIGRvZXNuJ3QgZXhpc3QgYXMgYSBtb3Rpb24gdmFsdWUsIHRoZW4gd2UgZG9uJ3RcbiAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHJlc2V0IGl0XG4gICAgICAgICAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50LmdldFN0YXRpY1ZhbHVlKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhc1JvdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSByb3RhdGlvbiBhbmQgdGhlbiB0ZW1wb3JhcmlseSBzZXQgaXQgdG8gMFxuICAgICAgICAgICAgICAgIHJlc2V0VmFsdWVzW2tleV0gPSB2aXN1YWxFbGVtZW50LmdldFN0YXRpY1ZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRTdGF0aWNWYWx1ZShrZXksIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyByb3RhdGlvbiB2YWx1ZXMsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55IG1vcmUuXG4gICAgICAgICAgICBpZiAoIWhhc1JvdGF0ZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBGb3JjZSBhIHJlbmRlciBvZiB0aGlzIGVsZW1lbnQgdG8gYXBwbHkgdGhlIHRyYW5zZm9ybSB3aXRoIGFsbCByb3RhdGlvbnNcbiAgICAgICAgICAgIC8vIHNldCB0byAwLlxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudCA9PT0gbnVsbCB8fCB2aXN1YWxFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICAgICAgICAgIC8vIFB1dCBiYWNrIGFsbCB0aGUgdmFsdWVzIHdlIHJlc2V0XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmVzZXRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50LnNldFN0YXRpY1ZhbHVlKGtleSwgcmVzZXRWYWx1ZXNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTY2hlZHVsZSBhIHJlbmRlciBmb3IgdGhlIG5leHQgZnJhbWUuIFRoaXMgZW5zdXJlcyB3ZSB3b24ndCB2aXN1YWxseVxuICAgICAgICAgICAgLy8gc2VlIHRoZSBlbGVtZW50IHdpdGggdGhlIHJlc2V0IHJvdGF0ZSB2YWx1ZSBhcHBsaWVkLlxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuZ2V0UHJvamVjdGlvblN0eWxlcyA9IGZ1bmN0aW9uIChzdHlsZVByb3ApIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICAgICAgaWYgKHN0eWxlUHJvcCA9PT0gdm9pZCAwKSB7IHN0eWxlUHJvcCA9IHt9OyB9XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXR1cm4gbGlmZWN5Y2xlLXBlcnNpc3RlbnQgb2JqZWN0XG4gICAgICAgICAgICB2YXIgc3R5bGVzID0ge307XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2UgfHwgdGhpcy5pc1NWRylcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZpc2liaWxpdHk6IFwiaGlkZGVuXCIgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlcy52aXNpYmlsaXR5ID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1UZW1wbGF0ZSA9IChfYSA9IHRoaXMub3B0aW9ucy52aXN1YWxFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0UHJvcHMoKS50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLm5lZWRzUmVzZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRzUmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdHlsZXMub3BhY2l0eSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgc3R5bGVzLnBvaW50ZXJFdmVudHMgPVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlTW90aW9uVmFsdWUoc3R5bGVQcm9wLnBvaW50ZXJFdmVudHMpIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgc3R5bGVzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgID8gdHJhbnNmb3JtVGVtcGxhdGUodGhpcy5sYXRlc3RWYWx1ZXMsIFwiXCIpXG4gICAgICAgICAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsZWFkID0gdGhpcy5nZXRMZWFkKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvamVjdGlvbkRlbHRhIHx8ICF0aGlzLmxheW91dCB8fCAhbGVhZC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW1wdHlTdHlsZXMgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5U3R5bGVzLm9wYWNpdHkgPSAoX2IgPSB0aGlzLmxhdGVzdFZhbHVlcy5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAxO1xuICAgICAgICAgICAgICAgICAgICBlbXB0eVN0eWxlcy5wb2ludGVyRXZlbnRzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVNb3Rpb25WYWx1ZShzdHlsZVByb3AucG9pbnRlckV2ZW50cykgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzUHJvamVjdGVkICYmICFoYXNUcmFuc2Zvcm0odGhpcy5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5U3R5bGVzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHt9LCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNQcm9qZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5U3R5bGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlc1RvUmVuZGVyID0gbGVhZC5hbmltYXRpb25WYWx1ZXMgfHwgbGVhZC5sYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtc1RvVGFyZ2V0KCk7XG4gICAgICAgICAgICBzdHlsZXMudHJhbnNmb3JtID0gYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtKHRoaXMucHJvamVjdGlvbkRlbHRhV2l0aFRyYW5zZm9ybSwgdGhpcy50cmVlU2NhbGUsIHZhbHVlc1RvUmVuZGVyKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZSh2YWx1ZXNUb1JlbmRlciwgc3R5bGVzLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2cgPSB0aGlzLnByb2plY3Rpb25EZWx0YSwgeCA9IF9nLngsIHkgPSBfZy55O1xuICAgICAgICAgICAgc3R5bGVzLnRyYW5zZm9ybU9yaWdpbiA9IFwiXCIuY29uY2F0KHgub3JpZ2luICogMTAwLCBcIiUgXCIpLmNvbmNhdCh5Lm9yaWdpbiAqIDEwMCwgXCIlIDBcIik7XG4gICAgICAgICAgICBpZiAobGVhZC5hbmltYXRpb25WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgbGVhZCBjb21wb25lbnQgaXMgYW5pbWF0aW5nLCBhc3NpZ24gdGhpcyBlaXRoZXIgdGhlIGVudGVyaW5nL2xlYXZpbmdcbiAgICAgICAgICAgICAgICAgKiBvcGFjaXR5XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc3R5bGVzLm9wYWNpdHkgPVxuICAgICAgICAgICAgICAgICAgICBsZWFkID09PSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChfZCA9IChfYyA9IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHRoaXMubGF0ZXN0VmFsdWVzLm9wYWNpdHkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5wcmVzZXJ2ZU9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMubGF0ZXN0VmFsdWVzLm9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHlFeGl0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogT3Igd2UncmUgbm90IGFuaW1hdGluZyBhdCBhbGwsIHNldCB0aGUgbGVhZCBjb21wb25lbnQgdG8gaXRzIGFjdHVhbFxuICAgICAgICAgICAgICAgICAqIG9wYWNpdHkgYW5kIG90aGVyIGNvbXBvbmVudHMgdG8gaGlkZGVuLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHN0eWxlcy5vcGFjaXR5ID1cbiAgICAgICAgICAgICAgICAgICAgbGVhZCA9PT0gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoX2UgPSB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChfZiA9IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHlFeGl0KSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcHBseSBzY2FsZSBjb3JyZWN0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzY2FsZUNvcnJlY3RvcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzVG9SZW5kZXJba2V5XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB2YXIgX2ggPSBzY2FsZUNvcnJlY3RvcnNba2V5XSwgY29ycmVjdCA9IF9oLmNvcnJlY3QsIGFwcGx5VG8gPSBfaC5hcHBseVRvO1xuICAgICAgICAgICAgICAgIHZhciBjb3JyZWN0ZWQgPSBjb3JyZWN0KHZhbHVlc1RvUmVuZGVyW2tleV0sIGxlYWQpO1xuICAgICAgICAgICAgICAgIGlmIChhcHBseVRvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW0gPSBhcHBseVRvLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzW2FwcGx5VG9baV1dID0gY29ycmVjdGVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXNba2V5XSA9IGNvcnJlY3RlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERpc2FibGUgcG9pbnRlciBldmVudHMgb24gZm9sbG93IGNvbXBvbmVudHMuIFRoaXMgaXMgdG8gZW5zdXJlXG4gICAgICAgICAgICAgKiB0aGF0IGlmIGEgZm9sbG93IGNvbXBvbmVudCBjb3ZlcnMgYSBsZWFkIGNvbXBvbmVudCBpdCBkb2Vzbid0IGJsb2NrXG4gICAgICAgICAgICAgKiBwb2ludGVyIGV2ZW50cyBvbiB0aGUgbGVhZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sYXlvdXRJZCkge1xuICAgICAgICAgICAgICAgIHN0eWxlcy5wb2ludGVyRXZlbnRzID1cbiAgICAgICAgICAgICAgICAgICAgbGVhZCA9PT0gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXNvbHZlTW90aW9uVmFsdWUoc3R5bGVQcm9wLnBvaW50ZXJFdmVudHMpIHx8IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuY2xlYXJTbmFwc2hvdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lRnJvbSA9IHRoaXMuc25hcHNob3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIC8vIE9ubHkgcnVuIG9uIHJvb3RcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnJlc2V0VHJlZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdC5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7IHZhciBfYTsgcmV0dXJuIChfYSA9IG5vZGUuY3VycmVudEFuaW1hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0b3AoKTsgfSk7XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMuZm9yRWFjaChjbGVhck1lYXN1cmVtZW50cyk7XG4gICAgICAgICAgICB0aGlzLnJvb3Quc2hhcmVkTm9kZXMuY2xlYXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFByb2plY3Rpb25Ob2RlO1xuICAgIH0oKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVMYXlvdXQobm9kZSkge1xuICAgIG5vZGUudXBkYXRlTGF5b3V0KCk7XG59XG5mdW5jdGlvbiBub3RpZnlMYXlvdXRVcGRhdGUobm9kZSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICB2YXIgc25hcHNob3QgPSAoX2IgPSAoX2EgPSBub2RlLnJlc3VtZUZyb20pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zbmFwc2hvdCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbm9kZS5zbmFwc2hvdDtcbiAgICBpZiAobm9kZS5pc0xlYWQoKSAmJlxuICAgICAgICBub2RlLmxheW91dCAmJlxuICAgICAgICBzbmFwc2hvdCAmJlxuICAgICAgICBub2RlLmhhc0xpc3RlbmVycyhcImRpZFVwZGF0ZVwiKSkge1xuICAgICAgICB2YXIgX2UgPSBub2RlLmxheW91dCwgbGF5b3V0XzEgPSBfZS5hY3R1YWwsIG1lYXN1cmVkTGF5b3V0ID0gX2UubWVhc3VyZWQ7XG4gICAgICAgIC8vIFRPRE8gTWF5YmUgd2Ugd2FudCB0byBhbHNvIHJlc2l6ZSB0aGUgbGF5b3V0IHNuYXBzaG90IHNvIHdlIGRvbid0IHRyaWdnZXJcbiAgICAgICAgLy8gYW5pbWF0aW9ucyBmb3IgaW5zdGFuY2UgaWYgbGF5b3V0PVwic2l6ZVwiIGFuZCBhbiBlbGVtZW50IGhhcyBvbmx5IGNoYW5nZWQgcG9zaXRpb25cbiAgICAgICAgaWYgKG5vZGUub3B0aW9ucy5hbmltYXRpb25UeXBlID09PSBcInNpemVcIikge1xuICAgICAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXhpc1NuYXBzaG90ID0gc25hcHNob3QuaXNTaGFyZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzbmFwc2hvdC5tZWFzdXJlZFtheGlzXVxuICAgICAgICAgICAgICAgICAgICA6IHNuYXBzaG90LmxheW91dFtheGlzXTtcbiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gY2FsY0xlbmd0aChheGlzU25hcHNob3QpO1xuICAgICAgICAgICAgICAgIGF4aXNTbmFwc2hvdC5taW4gPSBsYXlvdXRfMVtheGlzXS5taW47XG4gICAgICAgICAgICAgICAgYXhpc1NuYXBzaG90Lm1heCA9IGF4aXNTbmFwc2hvdC5taW4gKyBsZW5ndGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLm9wdGlvbnMuYW5pbWF0aW9uVHlwZSA9PT0gXCJwb3NpdGlvblwiKSB7XG4gICAgICAgICAgICBlYWNoQXhpcyhmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICAgICAgICAgIHZhciBheGlzU25hcHNob3QgPSBzbmFwc2hvdC5pc1NoYXJlZFxuICAgICAgICAgICAgICAgICAgICA/IHNuYXBzaG90Lm1lYXN1cmVkW2F4aXNdXG4gICAgICAgICAgICAgICAgICAgIDogc25hcHNob3QubGF5b3V0W2F4aXNdO1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBjYWxjTGVuZ3RoKGxheW91dF8xW2F4aXNdKTtcbiAgICAgICAgICAgICAgICBheGlzU25hcHNob3QubWF4ID0gYXhpc1NuYXBzaG90Lm1pbiArIGxlbmd0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXlvdXREZWx0YSA9IGNyZWF0ZURlbHRhKCk7XG4gICAgICAgIGNhbGNCb3hEZWx0YShsYXlvdXREZWx0YSwgbGF5b3V0XzEsIHNuYXBzaG90LmxheW91dCk7XG4gICAgICAgIHZhciB2aXN1YWxEZWx0YSA9IGNyZWF0ZURlbHRhKCk7XG4gICAgICAgIGlmIChzbmFwc2hvdC5pc1NoYXJlZCkge1xuICAgICAgICAgICAgY2FsY0JveERlbHRhKHZpc3VhbERlbHRhLCBub2RlLmFwcGx5VHJhbnNmb3JtKG1lYXN1cmVkTGF5b3V0LCB0cnVlKSwgc25hcHNob3QubWVhc3VyZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FsY0JveERlbHRhKHZpc3VhbERlbHRhLCBsYXlvdXRfMSwgc25hcHNob3QubGF5b3V0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFzTGF5b3V0Q2hhbmdlZCA9ICFpc0RlbHRhWmVybyhsYXlvdXREZWx0YSk7XG4gICAgICAgIHZhciBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFub2RlLnJlc3VtZUZyb20pIHtcbiAgICAgICAgICAgIG5vZGUucmVsYXRpdmVQYXJlbnQgPSBub2RlLmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSByZWxhdGl2ZVBhcmVudCBpcyBpdHNlbGYgcmVzdW1pbmcgZnJvbSBhIGRpZmZlcmVudCBlbGVtZW50IHRoZW5cbiAgICAgICAgICAgICAqIHRoZSByZWxhdGl2ZSBzbmFwc2hvdCBpcyBub3QgcmVsYXZlbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKG5vZGUucmVsYXRpdmVQYXJlbnQgJiYgIW5vZGUucmVsYXRpdmVQYXJlbnQucmVzdW1lRnJvbSkge1xuICAgICAgICAgICAgICAgIHZhciBfZiA9IG5vZGUucmVsYXRpdmVQYXJlbnQsIHBhcmVudFNuYXBzaG90ID0gX2Yuc25hcHNob3QsIHBhcmVudExheW91dCA9IF9mLmxheW91dDtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50U25hcHNob3QgJiYgcGFyZW50TGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZVNuYXBzaG90ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHJlbGF0aXZlU25hcHNob3QsIHNuYXBzaG90LmxheW91dCwgcGFyZW50U25hcHNob3QubGF5b3V0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlTGF5b3V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHJlbGF0aXZlTGF5b3V0LCBsYXlvdXRfMSwgcGFyZW50TGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYm94RXF1YWxzKHJlbGF0aXZlU25hcHNob3QsIHJlbGF0aXZlTGF5b3V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlLm5vdGlmeUxpc3RlbmVycyhcImRpZFVwZGF0ZVwiLCB7XG4gICAgICAgICAgICBsYXlvdXQ6IGxheW91dF8xLFxuICAgICAgICAgICAgc25hcHNob3Q6IHNuYXBzaG90LFxuICAgICAgICAgICAgZGVsdGE6IHZpc3VhbERlbHRhLFxuICAgICAgICAgICAgbGF5b3V0RGVsdGE6IGxheW91dERlbHRhLFxuICAgICAgICAgICAgaGFzTGF5b3V0Q2hhbmdlZDogaGFzTGF5b3V0Q2hhbmdlZCxcbiAgICAgICAgICAgIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZDogaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5pc0xlYWQoKSkge1xuICAgICAgICAoX2QgPSAoX2MgPSBub2RlLm9wdGlvbnMpLm9uRXhpdENvbXBsZXRlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyaW5nIHRyYW5zaXRpb25cbiAgICAgKiBUT0RPOiBJbnZlc3RpZ2F0ZSB3aHkgdGhpcyB0cmFuc2l0aW9uIGlzIGJlaW5nIHBhc3NlZCBpbiBhcyB7dHlwZTogZmFsc2UgfSBmcm9tIEZyYW1lclxuICAgICAqIGFuZCB3aHkgd2UgbmVlZCBpdCBhdCBhbGxcbiAgICAgKi9cbiAgICBub2RlLm9wdGlvbnMudHJhbnNpdGlvbiA9IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGNsZWFyU25hcHNob3Qobm9kZSkge1xuICAgIG5vZGUuY2xlYXJTbmFwc2hvdCgpO1xufVxuZnVuY3Rpb24gY2xlYXJNZWFzdXJlbWVudHMobm9kZSkge1xuICAgIG5vZGUuY2xlYXJNZWFzdXJlbWVudHMoKTtcbn1cbmZ1bmN0aW9uIHJlc2V0VHJhbnNmb3JtU3R5bGUobm9kZSkge1xuICAgIHZhciB2aXN1YWxFbGVtZW50ID0gbm9kZS5vcHRpb25zLnZpc3VhbEVsZW1lbnQ7XG4gICAgaWYgKHZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdmlzdWFsRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpLm9uQmVmb3JlTGF5b3V0TWVhc3VyZSkge1xuICAgICAgICB2aXN1YWxFbGVtZW50Lm5vdGlmeUJlZm9yZUxheW91dE1lYXN1cmUoKTtcbiAgICB9XG4gICAgbm9kZS5yZXNldFRyYW5zZm9ybSgpO1xufVxuZnVuY3Rpb24gZmluaXNoQW5pbWF0aW9uKG5vZGUpIHtcbiAgICBub2RlLmZpbmlzaEFuaW1hdGlvbigpO1xuICAgIG5vZGUudGFyZ2V0RGVsdGEgPSBub2RlLnJlbGF0aXZlVGFyZ2V0ID0gbm9kZS50YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiByZXNvbHZlVGFyZ2V0RGVsdGEobm9kZSkge1xuICAgIG5vZGUucmVzb2x2ZVRhcmdldERlbHRhKCk7XG59XG5mdW5jdGlvbiBjYWxjUHJvamVjdGlvbihub2RlKSB7XG4gICAgbm9kZS5jYWxjUHJvamVjdGlvbigpO1xufVxuZnVuY3Rpb24gcmVzZXRSb3RhdGlvbihub2RlKSB7XG4gICAgbm9kZS5yZXNldFJvdGF0aW9uKCk7XG59XG5mdW5jdGlvbiByZW1vdmVMZWFkU25hcHNob3RzKHN0YWNrKSB7XG4gICAgc3RhY2sucmVtb3ZlTGVhZFNuYXBzaG90KCk7XG59XG5mdW5jdGlvbiBtaXhBeGlzRGVsdGEob3V0cHV0LCBkZWx0YSwgcCkge1xuICAgIG91dHB1dC50cmFuc2xhdGUgPSBwb3Btb3Rpb24ubWl4KGRlbHRhLnRyYW5zbGF0ZSwgMCwgcCk7XG4gICAgb3V0cHV0LnNjYWxlID0gcG9wbW90aW9uLm1peChkZWx0YS5zY2FsZSwgMSwgcCk7XG4gICAgb3V0cHV0Lm9yaWdpbiA9IGRlbHRhLm9yaWdpbjtcbiAgICBvdXRwdXQub3JpZ2luUG9pbnQgPSBkZWx0YS5vcmlnaW5Qb2ludDtcbn1cbmZ1bmN0aW9uIG1peEF4aXMob3V0cHV0LCBmcm9tLCB0bywgcCkge1xuICAgIG91dHB1dC5taW4gPSBwb3Btb3Rpb24ubWl4KGZyb20ubWluLCB0by5taW4sIHApO1xuICAgIG91dHB1dC5tYXggPSBwb3Btb3Rpb24ubWl4KGZyb20ubWF4LCB0by5tYXgsIHApO1xufVxuZnVuY3Rpb24gbWl4Qm94KG91dHB1dCwgZnJvbSwgdG8sIHApIHtcbiAgICBtaXhBeGlzKG91dHB1dC54LCBmcm9tLngsIHRvLngsIHApO1xuICAgIG1peEF4aXMob3V0cHV0LnksIGZyb20ueSwgdG8ueSwgcCk7XG59XG5mdW5jdGlvbiBoYXNPcGFjaXR5Q3Jvc3NmYWRlKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuYW5pbWF0aW9uVmFsdWVzICYmIG5vZGUuYW5pbWF0aW9uVmFsdWVzLm9wYWNpdHlFeGl0ICE9PSB1bmRlZmluZWQpO1xufVxudmFyIGRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiAwLjQ1LFxuICAgIGVhc2U6IFswLjQsIDAsIDAuMSwgMV0sXG59O1xuZnVuY3Rpb24gbW91bnROb2RlRWFybHkobm9kZSwgaWQpIHtcbiAgICAvKipcbiAgICAgKiBSYXRoZXIgdGhhbiBzZWFyY2hpbmcgdGhlIERPTSBmcm9tIGRvY3VtZW50IHdlIGNhbiBzZWFyY2ggdGhlXG4gICAgICogcGF0aCBmb3IgdGhlIGRlZXBlc3QgbW91bnRlZCBhbmNlc3RvciBhbmQgc2VhcmNoIGZyb20gdGhlcmVcbiAgICAgKi9cbiAgICB2YXIgc2VhcmNoTm9kZSA9IG5vZGUucm9vdDtcbiAgICBmb3IgKHZhciBpID0gbm9kZS5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChCb29sZWFuKG5vZGUucGF0aFtpXS5pbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIHNlYXJjaE5vZGUgPSBub2RlLnBhdGhbaV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc2VhcmNoRWxlbWVudCA9IHNlYXJjaE5vZGUgJiYgc2VhcmNoTm9kZSAhPT0gbm9kZS5yb290ID8gc2VhcmNoTm9kZS5pbnN0YW5jZSA6IGRvY3VtZW50O1xuICAgIHZhciBlbGVtZW50ID0gc2VhcmNoRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtcHJvamVjdGlvbi1pZD1cXFwiXCIuY29uY2F0KGlkLCBcIlxcXCJdXCIpKTtcbiAgICBpZiAoZWxlbWVudClcbiAgICAgICAgbm9kZS5tb3VudChlbGVtZW50LCB0cnVlKTtcbn1cbmZ1bmN0aW9uIHJvdW5kQXhpcyhheGlzKSB7XG4gICAgYXhpcy5taW4gPSBNYXRoLnJvdW5kKGF4aXMubWluKTtcbiAgICBheGlzLm1heCA9IE1hdGgucm91bmQoYXhpcy5tYXgpO1xufVxuZnVuY3Rpb24gcm91bmRCb3goYm94KSB7XG4gICAgcm91bmRBeGlzKGJveC54KTtcbiAgICByb3VuZEF4aXMoYm94LnkpO1xufVxuXG52YXIgaWQkMSA9IDE7XG5mdW5jdGlvbiB1c2VQcm9qZWN0aW9uSWQoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNFdmVyVXBkYXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkJDErKztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG52YXIgTGF5b3V0R3JvdXBDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbi8qKlxuICogSW50ZXJuYWwsIGV4cG9ydGVkIG9ubHkgZm9yIHVzYWdlIGluIEZyYW1lclxuICovXG52YXIgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmZ1bmN0aW9uIHVzZVByb2plY3Rpb24ocHJvamVjdGlvbklkLCBfYSwgdmlzdWFsRWxlbWVudCwgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3Rvcikge1xuICAgIHZhciBfYjtcbiAgICB2YXIgbGF5b3V0SWQgPSBfYS5sYXlvdXRJZCwgbGF5b3V0ID0gX2EubGF5b3V0LCBkcmFnID0gX2EuZHJhZywgZHJhZ0NvbnN0cmFpbnRzID0gX2EuZHJhZ0NvbnN0cmFpbnRzLCBsYXlvdXRTY3JvbGwgPSBfYS5sYXlvdXRTY3JvbGw7XG4gICAgdmFyIGluaXRpYWxQcm9tb3Rpb25Db25maWcgPSBSZWFjdC51c2VDb250ZXh0KFN3aXRjaExheW91dEdyb3VwQ29udGV4dCk7XG4gICAgaWYgKCFQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yIHx8XG4gICAgICAgICF2aXN1YWxFbGVtZW50IHx8XG4gICAgICAgICh2aXN1YWxFbGVtZW50ID09PSBudWxsIHx8IHZpc3VhbEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2aXN1YWxFbGVtZW50LnByb2plY3Rpb24gPSBuZXcgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3Rvcihwcm9qZWN0aW9uSWQsIHZpc3VhbEVsZW1lbnQuZ2V0TGF0ZXN0VmFsdWVzKCksIChfYiA9IHZpc3VhbEVsZW1lbnQucGFyZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucHJvamVjdGlvbik7XG4gICAgdmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLnNldE9wdGlvbnMoe1xuICAgICAgICBsYXlvdXRJZDogbGF5b3V0SWQsXG4gICAgICAgIGxheW91dDogbGF5b3V0LFxuICAgICAgICBhbHdheXNNZWFzdXJlTGF5b3V0OiBCb29sZWFuKGRyYWcpIHx8IChkcmFnQ29uc3RyYWludHMgJiYgaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSksXG4gICAgICAgIHZpc3VhbEVsZW1lbnQ6IHZpc3VhbEVsZW1lbnQsXG4gICAgICAgIHNjaGVkdWxlUmVuZGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2aXN1YWxFbGVtZW50LnNjaGVkdWxlUmVuZGVyKCk7IH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUT0RPOiBVcGRhdGUgb3B0aW9ucyBpbiBhbiBlZmZlY3QuIFRoaXMgY291bGQgYmUgdHJpY2t5IGFzIGl0J2xsIGJlIHRvbyBsYXRlXG4gICAgICAgICAqIHRvIHVwZGF0ZSBieSB0aGUgdGltZSBsYXlvdXQgYW5pbWF0aW9ucyBydW4uXG4gICAgICAgICAqIFdlIGFsc28gbmVlZCB0byBmaXggdGhpcyBzYWZlVG9SZW1vdmUgYnkgbGlua2luZyBpdCB1cCB0byB0aGUgb25lIHJldHVybmVkIGJ5IHVzZVByZXNlbmNlLFxuICAgICAgICAgKiBlbnN1cmluZyBpdCBnZXRzIGNhbGxlZCBpZiB0aGVyZSdzIG5vIHBvdGVudGlhbCBsYXlvdXQgYW5pbWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGFuaW1hdGlvblR5cGU6IHR5cGVvZiBsYXlvdXQgPT09IFwic3RyaW5nXCIgPyBsYXlvdXQgOiBcImJvdGhcIixcbiAgICAgICAgaW5pdGlhbFByb21vdGlvbkNvbmZpZzogaW5pdGlhbFByb21vdGlvbkNvbmZpZyxcbiAgICAgICAgbGF5b3V0U2Nyb2xsOiBsYXlvdXRTY3JvbGwsXG4gICAgfSk7XG59XG5cbnZhciBWaXN1YWxFbGVtZW50SGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoVmlzdWFsRWxlbWVudEhhbmRsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlzdWFsRWxlbWVudEhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHZpc3VhbCBlbGVtZW50IHByb3BzIGFzIHNvb24gYXMgd2Uga25vdyB0aGlzIHVwZGF0ZSBpcyBnb2luZyB0byBiZSBjb21taXRlZC5cbiAgICAgKi9cbiAgICBWaXN1YWxFbGVtZW50SGFuZGxlci5wcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUHJvcHMoKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50SGFuZGxlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIFZpc3VhbEVsZW1lbnRIYW5kbGVyLnByb3RvdHlwZS51cGRhdGVQcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQsIHByb3BzID0gX2EucHJvcHM7XG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRQcm9wcyhwcm9wcyk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50SGFuZGxlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuICAgIHJldHVybiBWaXN1YWxFbGVtZW50SGFuZGxlcjtcbn0oUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCkpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGBtb3Rpb25gIGNvbXBvbmVudC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYSBDb21wb25lbnQgYXJndW1lbnQsIHdoaWNoIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgKGllIFwiZGl2XCJcbiAqIGZvciBgbW90aW9uLmRpdmApLCBvciBhbiBhY3R1YWwgUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEFsb25nc2lkZSB0aGlzIGlzIGEgY29uZmlnIG9wdGlvbiB3aGljaCBwcm92aWRlcyBhIHdheSBvZiByZW5kZXJpbmcgdGhlIHByb3ZpZGVkXG4gKiBjb21wb25lbnQgXCJvZmZsaW5lXCIsIG9yIG91dHNpZGUgdGhlIFJlYWN0IHJlbmRlciBjeWNsZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uQ29tcG9uZW50KF9hKSB7XG4gICAgdmFyIHByZWxvYWRlZEZlYXR1cmVzID0gX2EucHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQgPSBfYS5jcmVhdGVWaXN1YWxFbGVtZW50LCBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yID0gX2EucHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciwgdXNlUmVuZGVyID0gX2EudXNlUmVuZGVyLCB1c2VWaXN1YWxTdGF0ZSA9IF9hLnVzZVZpc3VhbFN0YXRlLCBDb21wb25lbnQgPSBfYS5Db21wb25lbnQ7XG4gICAgcHJlbG9hZGVkRmVhdHVyZXMgJiYgbG9hZEZlYXR1cmVzKHByZWxvYWRlZEZlYXR1cmVzKTtcbiAgICBmdW5jdGlvbiBNb3Rpb25Db21wb25lbnQocHJvcHMsIGV4dGVybmFsUmVmKSB7XG4gICAgICAgIHZhciBsYXlvdXRJZCA9IHVzZUxheW91dElkKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcHJvcHMpLCB7IGxheW91dElkOiBsYXlvdXRJZCB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBlbnZpcm9ubWVudCwgd2Ugb25seSB2aXN1YWxseSB1cGRhdGUgdGhlIGNvbXBvbmVudFxuICAgICAgICAgKiBhcyBhIHJlc3VsdCBvZiBhIFJlYWN0LXJlcmVuZGVyIHJhdGhlciB0aGFuIGludGVyYWN0aW9ucyBvciBhbmltYXRpb25zLiBUaGlzXG4gICAgICAgICAqIG1lYW5zIHdlIGRvbid0IG5lZWQgdG8gbG9hZCBhZGRpdGlvbmFsIG1lbW9yeSBzdHJ1Y3R1cmVzIGxpa2UgVmlzdWFsRWxlbWVudCxcbiAgICAgICAgICogb3IgYW55IGdlc3R1cmUvYW5pbWF0aW9uIGZlYXR1cmVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGNvbmZpZyA9IFJlYWN0LnVzZUNvbnRleHQoTW90aW9uQ29uZmlnQ29udGV4dCk7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IG51bGw7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdXNlQ3JlYXRlTW90aW9uQ29udGV4dChwcm9wcyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSB1bmlxdWUgcHJvamVjdGlvbiBJRCBmb3IgdGhpcyBjb21wb25lbnQuIElmIGEgbmV3IGNvbXBvbmVudCBpcyBhZGRlZFxuICAgICAgICAgKiBkdXJpbmcgYSBsYXlvdXQgYW5pbWF0aW9uIHdlJ2xsIHVzZSB0aGlzIHRvIHF1ZXJ5IHRoZSBET00gYW5kIGh5ZHJhdGUgaXRzIHJlZiBlYXJseSwgYWxsb3dpbmdcbiAgICAgICAgICogdXMgdG8gbWVhc3VyZSBpdCBhcyBzb29uIGFzIGFueSBsYXlvdXQgZWZmZWN0IGZsdXNoZXMgcGVuZGluZyBsYXlvdXQgYW5pbWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogUGVyZm9ybWFuY2Ugbm90ZTogSXQnZCBiZSBiZXR0ZXIgbm90IHRvIGhhdmUgdG8gc2VhcmNoIHRoZSBET00gZm9yIHRoZXNlIGVsZW1lbnRzLlxuICAgICAgICAgKiBGb3IgbmV3bHktZW50ZXJpbmcgY29tcG9uZW50cyBpdCBjb3VsZCBiZSBlbm91Z2ggdG8gb25seSBjb3JyZWN0IHRyZWVTY2FsZSwgaW4gd2hpY2hcbiAgICAgICAgICogY2FzZSB3ZSBjb3VsZCBtb3VudCBpbiBhIHNjYWxlLWNvcnJlY3Rpb24gbW9kZS4gVGhpcyB3b3VsZG4ndCBiZSBlbm91Z2ggZm9yXG4gICAgICAgICAqIHNoYXJlZCBlbGVtZW50IHRyYW5zaXRpb25zIGhvd2V2ZXIuIFBlcmhhcHMgZm9yIHRob3NlIHdlIGNvdWxkIHJldmVydCB0byBhIHJvb3Qgbm9kZVxuICAgICAgICAgKiB0aGF0IGdldHMgZm9yY2VSZW5kZXJlZCBhbmQgbGF5b3V0IGFuaW1hdGlvbnMgYXJlIHRyaWdnZXJlZCBvbiBpdHMgbGF5b3V0IGVmZmVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBwcm9qZWN0aW9uSWQgPSBjb25maWcuaXNTdGF0aWMgPyB1bmRlZmluZWQgOiB1c2VQcm9qZWN0aW9uSWQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgdmlzdWFsU3RhdGUgPSB1c2VWaXN1YWxTdGF0ZShwcm9wcywgY29uZmlnLmlzU3RhdGljKTtcbiAgICAgICAgaWYgKCFjb25maWcuaXNTdGF0aWMgJiYgaXNCcm93c2VyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZSBhIFZpc3VhbEVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50LiBBIFZpc3VhbEVsZW1lbnQgcHJvdmlkZXMgYSBjb21tb25cbiAgICAgICAgICAgICAqIGludGVyZmFjZSB0byByZW5kZXJlci1zcGVjaWZpYyBBUElzIChpZSBET00vVGhyZWUuanMgZXRjKSBhcyB3ZWxsIGFzXG4gICAgICAgICAgICAgKiBwcm92aWRpbmcgYSB3YXkgb2YgcmVuZGVyaW5nIHRvIHRoZXNlIEFQSXMgb3V0c2lkZSBvZiB0aGUgUmVhY3QgcmVuZGVyIGxvb3BcbiAgICAgICAgICAgICAqIGZvciBtb3JlIHBlcmZvcm1hbnQgYW5pbWF0aW9ucyBhbmQgaW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnRleHQudmlzdWFsRWxlbWVudCA9IHVzZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB2aXN1YWxTdGF0ZSwgdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGNvbmZpZyksIHByb3BzKSwgY3JlYXRlVmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICB1c2VQcm9qZWN0aW9uKHByb2plY3Rpb25JZCwgcHJvcHMsIGNvbnRleHQudmlzdWFsRWxlbWVudCwgcHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciB8fFxuICAgICAgICAgICAgICAgIGZlYXR1cmVEZWZpbml0aW9ucy5wcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTG9hZCBNb3Rpb24gZ2VzdHVyZSBhbmQgYW5pbWF0aW9uIGZlYXR1cmVzLiBUaGVzZSBhcmUgcmVuZGVyZWQgYXMgcmVuZGVybGVzc1xuICAgICAgICAgICAgICogY29tcG9uZW50cyBzbyBlYWNoIGZlYXR1cmUgY2FuIG9wdGlvbmFsbHkgbWFrZSB1c2Ugb2YgUmVhY3QgbGlmZWN5Y2xlIG1ldGhvZHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZlYXR1cmVzID0gdXNlRmVhdHVyZXMocHJvcHMsIGNvbnRleHQudmlzdWFsRWxlbWVudCwgcHJlbG9hZGVkRmVhdHVyZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbW91bnQgb3JkZXIgYW5kIGhpZXJhcmNoeSBpcyBzcGVjaWZpYyB0byBlbnN1cmUgb3VyIGVsZW1lbnQgcmVmXG4gICAgICAgICAqIGlzIGh5ZHJhdGVkIGJ5IHRoZSB0aW1lIGZlYXR1cmVzIGZpcmUgdGhlaXIgZWZmZWN0cy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFZpc3VhbEVsZW1lbnRIYW5kbGVyLCB7IHZpc3VhbEVsZW1lbnQ6IGNvbnRleHQudmlzdWFsRWxlbWVudCwgcHJvcHM6IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBjb25maWcpLCBwcm9wcykgfSxcbiAgICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgICAgUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KE1vdGlvbkNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNvbnRleHQgfSwgdXNlUmVuZGVyKENvbXBvbmVudCwgcHJvcHMsIHByb2plY3Rpb25JZCwgdXNlTW90aW9uUmVmKHZpc3VhbFN0YXRlLCBjb250ZXh0LnZpc3VhbEVsZW1lbnQsIGV4dGVybmFsUmVmKSwgdmlzdWFsU3RhdGUsIGNvbmZpZy5pc1N0YXRpYywgY29udGV4dC52aXN1YWxFbGVtZW50KSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmZvcndhcmRSZWYoTW90aW9uQ29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIHVzZUxheW91dElkKF9hKSB7XG4gICAgdmFyIF9iO1xuICAgIHZhciBsYXlvdXRJZCA9IF9hLmxheW91dElkO1xuICAgIHZhciBsYXlvdXRHcm91cElkID0gKF9iID0gUmVhY3QudXNlQ29udGV4dChMYXlvdXRHcm91cENvbnRleHQpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaWQ7XG4gICAgcmV0dXJuIGxheW91dEdyb3VwSWQgJiYgbGF5b3V0SWQgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxheW91dEdyb3VwSWQgKyBcIi1cIiArIGxheW91dElkXG4gICAgICAgIDogbGF5b3V0SWQ7XG59XG5cbi8qKlxuICogQ29udmVydCBhbnkgUmVhY3QgY29tcG9uZW50IGludG8gYSBgbW90aW9uYCBjb21wb25lbnQuIFRoZSBwcm92aWRlZCBjb21wb25lbnRcbiAqICoqbXVzdCoqIHVzZSBgUmVhY3QuZm9yd2FyZFJlZmAgdG8gdGhlIHVuZGVybHlpbmcgRE9NIGNvbXBvbmVudCB5b3Ugd2FudCB0byBhbmltYXRlLlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICogICByZXR1cm4gPGRpdiByZWY9e3JlZn0gLz5cbiAqIH0pXG4gKlxuICogY29uc3QgTW90aW9uQ29tcG9uZW50ID0gbW90aW9uKENvbXBvbmVudClcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uUHJveHkoY3JlYXRlQ29uZmlnKSB7XG4gICAgZnVuY3Rpb24gY3VzdG9tKENvbXBvbmVudCwgY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnKSB7XG4gICAgICAgIGlmIChjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPT09IHZvaWQgMCkgeyBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPSB7fTsgfVxuICAgICAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZUNvbmZpZyhDb21wb25lbnQsIGN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZykpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBjdXN0b207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY2FjaGUgb2YgZ2VuZXJhdGVkIGBtb3Rpb25gIGNvbXBvbmVudHMsIGUuZyBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgKiBSYXRoZXIgdGhhbiBnZW5lcmF0aW5nIHRoZW0gYW5ldyBldmVyeSByZW5kZXIuXG4gICAgICovXG4gICAgdmFyIGNvbXBvbmVudENhY2hlID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBuZXcgUHJveHkoY3VzdG9tLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBgbW90aW9uYCBpcyByZWZlcmVuY2VkIHdpdGggYSBwcm9wOiBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgICAgICogVGhlIHByb3AgbmFtZSBpcyBwYXNzZWQgdGhyb3VnaCBhcyBga2V5YCBhbmQgd2UgY2FuIHVzZSB0aGF0IHRvIGdlbmVyYXRlIGEgYG1vdGlvbmBcbiAgICAgICAgICogRE9NIGNvbXBvbmVudCB3aXRoIHRoYXQgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKF90YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGVsZW1lbnQgZG9lc24ndCBleGlzdCBpbiB0aGUgY29tcG9uZW50IGNhY2hlLCBjcmVhdGUgaXQgYW5kIGNhY2hlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudENhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50Q2FjaGUuc2V0KGtleSwgY3VzdG9tKGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudENhY2hlLmdldChrZXkpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuXG4vKipcbiAqIFdlIGtlZXAgdGhlc2UgbGlzdGVkIHNlcGVyYXRlbHkgYXMgd2UgdXNlIHRoZSBsb3dlcmNhc2UgdGFnIG5hbWVzIGFzIHBhcnRcbiAqIG9mIHRoZSBydW50aW1lIGJ1bmRsZSB0byBkZXRlY3QgU1ZHIGNvbXBvbmVudHNcbiAqL1xudmFyIGxvd2VyY2FzZVNWR0VsZW1lbnRzID0gW1xuICAgIFwiYW5pbWF0ZVwiLFxuICAgIFwiY2lyY2xlXCIsXG4gICAgXCJkZWZzXCIsXG4gICAgXCJkZXNjXCIsXG4gICAgXCJlbGxpcHNlXCIsXG4gICAgXCJnXCIsXG4gICAgXCJpbWFnZVwiLFxuICAgIFwibGluZVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJtYXJrZXJcIixcbiAgICBcIm1hc2tcIixcbiAgICBcIm1ldGFkYXRhXCIsXG4gICAgXCJwYXRoXCIsXG4gICAgXCJwYXR0ZXJuXCIsXG4gICAgXCJwb2x5Z29uXCIsXG4gICAgXCJwb2x5bGluZVwiLFxuICAgIFwicmVjdFwiLFxuICAgIFwic3RvcFwiLFxuICAgIFwic3ZnXCIsXG4gICAgXCJzd2l0Y2hcIixcbiAgICBcInN5bWJvbFwiLFxuICAgIFwidGV4dFwiLFxuICAgIFwidHNwYW5cIixcbiAgICBcInVzZVwiLFxuICAgIFwidmlld1wiLFxuXTtcblxuZnVuY3Rpb24gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KSB7XG4gICAgaWYgKFxuICAgIC8qKlxuICAgICAqIElmIGl0J3Mgbm90IGEgc3RyaW5nLCBpdCdzIGEgY3VzdG9tIFJlYWN0IGNvbXBvbmVudC4gQ3VycmVudGx5IHdlIG9ubHkgc3VwcG9ydFxuICAgICAqIEhUTUwgY3VzdG9tIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgdHlwZW9mIENvbXBvbmVudCAhPT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgaXQgY29udGFpbnMgYSBkYXNoLCB0aGUgZWxlbWVudCBpcyBhIGN1c3RvbSBIVE1MIHdlYmNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIENvbXBvbmVudC5pbmNsdWRlcyhcIi1cIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAvKipcbiAgICAgKiBJZiBpdCdzIGluIG91ciBsaXN0IG9mIGxvd2VyY2FzZSBTVkcgdGFncywgaXQncyBhbiBTVkcgY29tcG9uZW50XG4gICAgICovXG4gICAgbG93ZXJjYXNlU1ZHRWxlbWVudHMuaW5kZXhPZihDb21wb25lbnQpID4gLTEgfHxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGl0IGNvbnRhaW5zIGEgY2FwaXRhbCBsZXR0ZXIsIGl0J3MgYW4gU1ZHIGNvbXBvbmVudFxuICAgICAgICAgKi9cbiAgICAgICAgL1tBLVpdLy50ZXN0KENvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIF9hKSB7XG4gICAgdmFyIGxheW91dCA9IF9hLmxheW91dCwgbGF5b3V0SWQgPSBfYS5sYXlvdXRJZDtcbiAgICByZXR1cm4gKGlzVHJhbnNmb3JtUHJvcChrZXkpIHx8XG4gICAgICAgIGlzVHJhbnNmb3JtT3JpZ2luUHJvcChrZXkpIHx8XG4gICAgICAgICgobGF5b3V0IHx8IGxheW91dElkICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoISFzY2FsZUNvcnJlY3RvcnNba2V5XSB8fCBrZXkgPT09IFwib3BhY2l0eVwiKSkpO1xufVxuXG52YXIgdHJhbnNsYXRlQWxpYXMgPSB7XG4gICAgeDogXCJ0cmFuc2xhdGVYXCIsXG4gICAgeTogXCJ0cmFuc2xhdGVZXCIsXG4gICAgejogXCJ0cmFuc2xhdGVaXCIsXG4gICAgdHJhbnNmb3JtUGVyc3BlY3RpdmU6IFwicGVyc3BlY3RpdmVcIixcbn07XG4vKipcbiAqIEJ1aWxkIGEgQ1NTIHRyYW5zZm9ybSBzdHlsZSBmcm9tIGluZGl2aWR1YWwgeC95L3NjYWxlIGV0YyBwcm9wZXJ0aWVzLlxuICpcbiAqIFRoaXMgb3V0cHV0cyB3aXRoIGEgZGVmYXVsdCBvcmRlciBvZiB0cmFuc2Zvcm1zL3NjYWxlcy9yb3RhdGlvbnMsIHRoaXMgY2FuIGJlIGN1c3RvbWlzZWQgYnlcbiAqIHByb3ZpZGluZyBhIHRyYW5zZm9ybVRlbXBsYXRlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBidWlsZFRyYW5zZm9ybShfYSwgX2IsIHRyYW5zZm9ybUlzRGVmYXVsdCwgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gX2EudHJhbnNmb3JtLCB0cmFuc2Zvcm1LZXlzID0gX2EudHJhbnNmb3JtS2V5cztcbiAgICB2YXIgX2MgPSBfYi5lbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiwgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24gPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBfZCA9IF9iLmFsbG93VHJhbnNmb3JtTm9uZSwgYWxsb3dUcmFuc2Zvcm1Ob25lID0gX2QgPT09IHZvaWQgMCA/IHRydWUgOiBfZDtcbiAgICAvLyBUaGUgdHJhbnNmb3JtIHN0cmluZyB3ZSdyZSBnb2luZyB0byBidWlsZCBpbnRvLlxuICAgIHZhciB0cmFuc2Zvcm1TdHJpbmcgPSBcIlwiO1xuICAgIC8vIFRyYW5zZm9ybSBrZXlzIGludG8gdGhlaXIgZGVmYXVsdCBvcmRlciAtIHRoaXMgd2lsbCBkZXRlcm1pbmUgdGhlIG91dHB1dCBvcmRlci5cbiAgICB0cmFuc2Zvcm1LZXlzLnNvcnQoc29ydFRyYW5zZm9ybVByb3BzKTtcbiAgICAvLyBUcmFjayB3aGV0aGVyIHRoZSBkZWZpbmVkIHRyYW5zZm9ybSBoYXMgYSBkZWZpbmVkIHogc28gd2UgZG9uJ3QgYWRkIGFcbiAgICAvLyBzZWNvbmQgdG8gZW5hYmxlIGhhcmR3YXJlIGFjY2VsZXJhdGlvblxuICAgIHZhciB0cmFuc2Zvcm1IYXNaID0gZmFsc2U7XG4gICAgLy8gTG9vcCBvdmVyIGVhY2ggdHJhbnNmb3JtIGFuZCBidWlsZCB0aGVtIGludG8gdHJhbnNmb3JtU3RyaW5nXG4gICAgdmFyIG51bVRyYW5zZm9ybUtleXMgPSB0cmFuc2Zvcm1LZXlzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVRyYW5zZm9ybUtleXM7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gdHJhbnNmb3JtS2V5c1tpXTtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IFwiXCIuY29uY2F0KHRyYW5zbGF0ZUFsaWFzW2tleV0gfHwga2V5LCBcIihcIikuY29uY2F0KHRyYW5zZm9ybVtrZXldLCBcIikgXCIpO1xuICAgICAgICBpZiAoa2V5ID09PSBcInpcIilcbiAgICAgICAgICAgIHRyYW5zZm9ybUhhc1ogPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXRyYW5zZm9ybUhhc1ogJiYgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24pIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IFwidHJhbnNsYXRlWigwKVwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtU3RyaW5nLnRyaW0oKTtcbiAgICB9XG4gICAgLy8gSWYgd2UgaGF2ZSBhIGN1c3RvbSBgdHJhbnNmb3JtYCB0ZW1wbGF0ZSwgcGFzcyBvdXIgdHJhbnNmb3JtIHZhbHVlcyBhbmRcbiAgICAvLyBnZW5lcmF0ZWQgdHJhbnNmb3JtU3RyaW5nIHRvIHRoYXQgYmVmb3JlIHJldHVybmluZ1xuICAgIGlmICh0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSB0cmFuc2Zvcm1UZW1wbGF0ZSh0cmFuc2Zvcm0sIHRyYW5zZm9ybUlzRGVmYXVsdCA/IFwiXCIgOiB0cmFuc2Zvcm1TdHJpbmcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhbGxvd1RyYW5zZm9ybU5vbmUgJiYgdHJhbnNmb3JtSXNEZWZhdWx0KSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyA9IFwibm9uZVwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtU3RyaW5nO1xufVxuLyoqXG4gKiBCdWlsZCBhIHRyYW5zZm9ybU9yaWdpbiBzdHlsZS4gVXNlcyB0aGUgc2FtZSBkZWZhdWx0cyBhcyB0aGUgYnJvd3NlciBmb3JcbiAqIHVuZGVmaW5lZCBvcmlnaW5zLlxuICovXG5mdW5jdGlvbiBidWlsZFRyYW5zZm9ybU9yaWdpbihfYSkge1xuICAgIHZhciBfYiA9IF9hLm9yaWdpblgsIG9yaWdpblggPSBfYiA9PT0gdm9pZCAwID8gXCI1MCVcIiA6IF9iLCBfYyA9IF9hLm9yaWdpblksIG9yaWdpblkgPSBfYyA9PT0gdm9pZCAwID8gXCI1MCVcIiA6IF9jLCBfZCA9IF9hLm9yaWdpblosIG9yaWdpblogPSBfZCA9PT0gdm9pZCAwID8gMCA6IF9kO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChvcmlnaW5YLCBcIiBcIikuY29uY2F0KG9yaWdpblksIFwiIFwiKS5jb25jYXQob3JpZ2luWik7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBrZXkgaXMgYSBDU1MgdmFyaWFibGVcbiAqL1xuZnVuY3Rpb24gaXNDU1NWYXJpYWJsZSQxKGtleSkge1xuICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aChcIi0tXCIpO1xufVxuXG4vKipcbiAqIFByb3ZpZGVkIGEgdmFsdWUgYW5kIGEgVmFsdWVUeXBlLCByZXR1cm5zIHRoZSB2YWx1ZSBhcyB0aGF0IHZhbHVlIHR5cGUuXG4gKi9cbnZhciBnZXRWYWx1ZUFzVHlwZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgIHJldHVybiB0eXBlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IHR5cGUudHJhbnNmb3JtKHZhbHVlKVxuICAgICAgICA6IHZhbHVlO1xufTtcblxuZnVuY3Rpb24gYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlLCB2YXJzID0gc3RhdGUudmFycywgdHJhbnNmb3JtID0gc3RhdGUudHJhbnNmb3JtLCB0cmFuc2Zvcm1LZXlzID0gc3RhdGUudHJhbnNmb3JtS2V5cywgdHJhbnNmb3JtT3JpZ2luID0gc3RhdGUudHJhbnNmb3JtT3JpZ2luO1xuICAgIC8vIEVtcHR5IHRoZSB0cmFuc2Zvcm1LZXlzIGFycmF5LiBBcyB3ZSdyZSB0aHJvd2luZyBvdXQgcmVmcyB0byBpdHMgaXRlbXNcbiAgICAvLyB0aGlzIG1pZ2h0IG5vdCBiZSBhcyBjaGVhcCBhcyBzdXNwZWN0ZWQuIE1heWJlIHVzaW5nIHRoZSBhcnJheSBhcyBhIGJ1ZmZlclxuICAgIC8vIHdpdGggYSBtYW51YWwgaW5jcmVtZW50YXRpb24gd291bGQgYmUgYmV0dGVyLlxuICAgIHRyYW5zZm9ybUtleXMubGVuZ3RoID0gMDtcbiAgICAvLyBUcmFjayB3aGV0aGVyIHdlIGVuY291bnRlciBhbnkgdHJhbnNmb3JtIG9yIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMuXG4gICAgdmFyIGhhc1RyYW5zZm9ybSA9IGZhbHNlO1xuICAgIHZhciBoYXNUcmFuc2Zvcm1PcmlnaW4gPSBmYWxzZTtcbiAgICAvLyBEb2VzIHRoZSBjYWxjdWxhdGVkIHRyYW5zZm9ybSBlc3NlbnRpYWxseSBlcXVhbCBcIm5vbmVcIj9cbiAgICB2YXIgdHJhbnNmb3JtSXNOb25lID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBMb29wIG92ZXIgYWxsIG91ciBsYXRlc3QgYW5pbWF0ZWQgdmFsdWVzIGFuZCBkZWNpZGUgd2hldGhlciB0byBoYW5kbGUgdGhlbVxuICAgICAqIGFzIGEgc3R5bGUgb3IgQ1NTIHZhcmlhYmxlLlxuICAgICAqXG4gICAgICogVHJhbnNmb3JtcyBhbmQgdHJhbnNmb3JtIG9yaWdpbnMgYXJlIGtlcHQgc2VwZXJhdGVseSBmb3IgZnVydGhlciBwcm9jZXNzaW5nLlxuICAgICAqL1xuICAgIGZvciAodmFyIGtleSBpbiBsYXRlc3RWYWx1ZXMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbGF0ZXN0VmFsdWVzW2tleV07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGlzIGEgQ1NTIHZhcmlhYmxlIHdlIGRvbid0IGRvIGFueSBmdXJ0aGVyIHByb2Nlc3NpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNDU1NWYXJpYWJsZSQxKGtleSkpIHtcbiAgICAgICAgICAgIHZhcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCB0aGUgdmFsdWUgdG8gaXRzIGRlZmF1bHQgdmFsdWUgdHlwZSwgaWUgMCAtPiBcIjBweFwiXG4gICAgICAgIHZhciB2YWx1ZVR5cGUgPSBudW1iZXJWYWx1ZVR5cGVzW2tleV07XG4gICAgICAgIHZhciB2YWx1ZUFzVHlwZSA9IGdldFZhbHVlQXNUeXBlKHZhbHVlLCB2YWx1ZVR5cGUpO1xuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1Qcm9wKGtleSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0sIGZsYWcgdG8gZW5hYmxlIGZ1cnRoZXIgdHJhbnNmb3JtIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICAgICAgdHJhbnNmb3JtS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGtub3cgd2UgaGF2ZSBhIG5vbi1kZWZhdWx0IHRyYW5zZm9ybSwgZWFybHkgcmV0dXJuXG4gICAgICAgICAgICBpZiAoIXRyYW5zZm9ybUlzTm9uZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBjaGVjayB0byBzZWUgaWYgdGhpcyBpcyBhIGRlZmF1bHQgdHJhbnNmb3JtXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09ICgoX2EgPSB2YWx1ZVR5cGUuZGVmYXVsdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkpXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtSXNOb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wKGtleSkpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbltrZXldID0gdmFsdWVBc1R5cGU7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgdHJhbnNmb3JtIG9yaWdpbiwgZmxhZyBhbmQgZW5hYmxlIGZ1cnRoZXIgdHJhbnNmb3JtLW9yaWdpbiBwcm9jZXNzaW5nXG4gICAgICAgICAgICBoYXNUcmFuc2Zvcm1PcmlnaW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNUcmFuc2Zvcm0pIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYnVpbGRUcmFuc2Zvcm0oc3RhdGUsIG9wdGlvbnMsIHRyYW5zZm9ybUlzTm9uZSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZSh7fSwgXCJcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFsYXRlc3RWYWx1ZXMudHJhbnNmb3JtICYmIHN0eWxlLnRyYW5zZm9ybSkge1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgaWYgKGhhc1RyYW5zZm9ybU9yaWdpbikge1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBidWlsZFRyYW5zZm9ybU9yaWdpbih0cmFuc2Zvcm1PcmlnaW4pO1xuICAgIH1cbn1cblxudmFyIGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgc3R5bGU6IHt9LFxuICAgIHRyYW5zZm9ybToge30sXG4gICAgdHJhbnNmb3JtS2V5czogW10sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiB7fSxcbiAgICB2YXJzOiB7fSxcbn0pOyB9O1xuXG5mdW5jdGlvbiBjb3B5UmF3VmFsdWVzT25seSh0YXJnZXQsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmICghaXNNb3Rpb25WYWx1ZShzb3VyY2Vba2V5XSkgJiYgIWlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBwcm9wcykpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB1c2VJbml0aWFsTW90aW9uVmFsdWVzKF9hLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSBfYS50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICByZXR1cm4gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIHZpc3VhbFN0YXRlLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiAhaXNTdGF0aWMgfSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICB2YXIgdmFycyA9IHN0YXRlLnZhcnMsIHN0eWxlID0gc3RhdGUuc3R5bGU7XG4gICAgICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgdmFycyksIHN0eWxlKTtcbiAgICB9LCBbdmlzdWFsU3RhdGVdKTtcbn1cbmZ1bmN0aW9uIHVzZVN0eWxlKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICB2YXIgc3R5bGVQcm9wID0gcHJvcHMuc3R5bGUgfHwge307XG4gICAgdmFyIHN0eWxlID0ge307XG4gICAgLyoqXG4gICAgICogQ29weSBub24tTW90aW9uIFZhbHVlcyBzdHJhaWdodCBpbnRvIHN0eWxlXG4gICAgICovXG4gICAgY29weVJhd1ZhbHVlc09ubHkoc3R5bGUsIHN0eWxlUHJvcCwgcHJvcHMpO1xuICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHVzZUluaXRpYWxNb3Rpb25WYWx1ZXMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykpO1xuICAgIGlmIChwcm9wcy50cmFuc2Zvcm1WYWx1ZXMpIHtcbiAgICAgICAgc3R5bGUgPSBwcm9wcy50cmFuc2Zvcm1WYWx1ZXMoc3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiB1c2VIVE1MUHJvcHMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIC8vIFRoZSBgYW55YCBpc24ndCBpZGVhbCBidXQgaXQgaXMgdGhlIHR5cGUgb2YgY3JlYXRlRWxlbWVudCBwcm9wcyBhcmd1bWVudFxuICAgIHZhciBodG1sUHJvcHMgPSB7fTtcbiAgICB2YXIgc3R5bGUgPSB1c2VTdHlsZShwcm9wcywgdmlzdWFsU3RhdGUsIGlzU3RhdGljKTtcbiAgICBpZiAoQm9vbGVhbihwcm9wcy5kcmFnKSAmJiBwcm9wcy5kcmFnTGlzdGVuZXIgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vIERpc2FibGUgdGhlIGdob3N0IGVsZW1lbnQgd2hlbiBhIHVzZXIgZHJhZ3NcbiAgICAgICAgaHRtbFByb3BzLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgICAvLyBEaXNhYmxlIHRleHQgc2VsZWN0aW9uXG4gICAgICAgIHN0eWxlLnVzZXJTZWxlY3QgPVxuICAgICAgICAgICAgc3R5bGUuV2Via2l0VXNlclNlbGVjdCA9XG4gICAgICAgICAgICAgICAgc3R5bGUuV2Via2l0VG91Y2hDYWxsb3V0ID1cbiAgICAgICAgICAgICAgICAgICAgXCJub25lXCI7XG4gICAgICAgIC8vIERpc2FibGUgc2Nyb2xsaW5nIG9uIHRoZSBkcmFnZ2FibGUgZGlyZWN0aW9uXG4gICAgICAgIHN0eWxlLnRvdWNoQWN0aW9uID1cbiAgICAgICAgICAgIHByb3BzLmRyYWcgPT09IHRydWVcbiAgICAgICAgICAgICAgICA/IFwibm9uZVwiXG4gICAgICAgICAgICAgICAgOiBcInBhbi1cIi5jb25jYXQocHJvcHMuZHJhZyA9PT0gXCJ4XCIgPyBcInlcIiA6IFwieFwiKTtcbiAgICB9XG4gICAgaHRtbFByb3BzLnN0eWxlID0gc3R5bGU7XG4gICAgcmV0dXJuIGh0bWxQcm9wcztcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2YgYWxsIHZhbGlkIE1vdGlvblByb3BzLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogVGhpcyBkb2Vzbid0IHRocm93IGlmIGEgYE1vdGlvblByb3BgIG5hbWUgaXMgbWlzc2luZyAtIGl0IHNob3VsZC5cbiAqL1xudmFyIHZhbGlkTW90aW9uUHJvcHMgPSBuZXcgU2V0KFtcbiAgICBcImluaXRpYWxcIixcbiAgICBcImFuaW1hdGVcIixcbiAgICBcImV4aXRcIixcbiAgICBcInN0eWxlXCIsXG4gICAgXCJ2YXJpYW50c1wiLFxuICAgIFwidHJhbnNpdGlvblwiLFxuICAgIFwidHJhbnNmb3JtVGVtcGxhdGVcIixcbiAgICBcInRyYW5zZm9ybVZhbHVlc1wiLFxuICAgIFwiY3VzdG9tXCIsXG4gICAgXCJpbmhlcml0XCIsXG4gICAgXCJsYXlvdXRcIixcbiAgICBcImxheW91dElkXCIsXG4gICAgXCJsYXlvdXREZXBlbmRlbmN5XCIsXG4gICAgXCJvbkxheW91dEFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJvbkxheW91dE1lYXN1cmVcIixcbiAgICBcIm9uQmVmb3JlTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwib25BbmltYXRpb25TdGFydFwiLFxuICAgIFwib25BbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwib25VcGRhdGVcIixcbiAgICBcIm9uRHJhZ1N0YXJ0XCIsXG4gICAgXCJvbkRyYWdcIixcbiAgICBcIm9uRHJhZ0VuZFwiLFxuICAgIFwib25NZWFzdXJlRHJhZ0NvbnN0cmFpbnRzXCIsXG4gICAgXCJvbkRpcmVjdGlvbkxvY2tcIixcbiAgICBcIm9uRHJhZ1RyYW5zaXRpb25FbmRcIixcbiAgICBcImRyYWdcIixcbiAgICBcImRyYWdDb250cm9sc1wiLFxuICAgIFwiZHJhZ0xpc3RlbmVyXCIsXG4gICAgXCJkcmFnQ29uc3RyYWludHNcIixcbiAgICBcImRyYWdEaXJlY3Rpb25Mb2NrXCIsXG4gICAgXCJkcmFnU25hcFRvT3JpZ2luXCIsXG4gICAgXCJfZHJhZ1hcIixcbiAgICBcIl9kcmFnWVwiLFxuICAgIFwiZHJhZ0VsYXN0aWNcIixcbiAgICBcImRyYWdNb21lbnR1bVwiLFxuICAgIFwiZHJhZ1Byb3BhZ2F0aW9uXCIsXG4gICAgXCJkcmFnVHJhbnNpdGlvblwiLFxuICAgIFwid2hpbGVEcmFnXCIsXG4gICAgXCJvblBhblwiLFxuICAgIFwib25QYW5TdGFydFwiLFxuICAgIFwib25QYW5FbmRcIixcbiAgICBcIm9uUGFuU2Vzc2lvblN0YXJ0XCIsXG4gICAgXCJvblRhcFwiLFxuICAgIFwib25UYXBTdGFydFwiLFxuICAgIFwib25UYXBDYW5jZWxcIixcbiAgICBcIm9uSG92ZXJTdGFydFwiLFxuICAgIFwib25Ib3ZlckVuZFwiLFxuICAgIFwid2hpbGVGb2N1c1wiLFxuICAgIFwid2hpbGVUYXBcIixcbiAgICBcIndoaWxlSG92ZXJcIixcbiAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgXCJvblZpZXdwb3J0RW50ZXJcIixcbiAgICBcIm9uVmlld3BvcnRMZWF2ZVwiLFxuICAgIFwidmlld3BvcnRcIixcbiAgICBcImxheW91dFNjcm9sbFwiLFxuXSk7XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBwcm9wIG5hbWUgaXMgYSB2YWxpZCBgTW90aW9uUHJvcGAga2V5LlxuICpcbiAqIEBwYXJhbSBrZXkgLSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBjaGVja1xuICogQHJldHVybnMgYHRydWVgIGlzIGtleSBpcyBhIHZhbGlkIGBNb3Rpb25Qcm9wYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRNb3Rpb25Qcm9wKGtleSkge1xuICAgIHJldHVybiB2YWxpZE1vdGlvblByb3BzLmhhcyhrZXkpO1xufVxuXG52YXIgc2hvdWxkRm9yd2FyZCA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpOyB9O1xuZnVuY3Rpb24gbG9hZEV4dGVybmFsSXNWYWxpZFByb3AoaXNWYWxpZFByb3ApIHtcbiAgICBpZiAoIWlzVmFsaWRQcm9wKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gRXhwbGljaXRseSBmaWx0ZXIgb3VyIGV2ZW50c1xuICAgIHNob3VsZEZvcndhcmQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aChcIm9uXCIpID8gIWlzVmFsaWRNb3Rpb25Qcm9wKGtleSkgOiBpc1ZhbGlkUHJvcChrZXkpO1xuICAgIH07XG59XG4vKipcbiAqIEVtb3Rpb24gYW5kIFN0eWxlZCBDb21wb25lbnRzIGJvdGggYWxsb3cgdXNlcnMgdG8gcGFzcyB0aHJvdWdoIGFyYml0cmFyeSBwcm9wcyB0byB0aGVpciBjb21wb25lbnRzXG4gKiB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBDU1MuIFRoZXkgYm90aCB1c2UgdGhlIGBAZW1vdGlvbi9pcy1wcm9wLXZhbGlkYCBwYWNrYWdlIHRvIGRldGVybWluZSB3aGljaFxuICogb2YgdGhlc2Ugc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBET00gbm9kZS5cbiAqXG4gKiBIb3dldmVyLCB3aGVuIHN0eWxpbmcgYSBNb3Rpb24gY29tcG9uZW50IGBzdHlsZWQobW90aW9uLmRpdilgLCBib3RoIHBhY2thZ2VzIHBhc3MgdGhyb3VnaCAqYWxsKiBwcm9wc1xuICogYXMgaXQncyBzZWVuIGFzIGFuIGFyYml0cmFyeSBjb21wb25lbnQgcmF0aGVyIHRoYW4gYSBET00gbm9kZS4gTW90aW9uIG9ubHkgYWxsb3dzIGFyYml0cmFyeSBwcm9wc1xuICogcGFzc2VkIHRocm91Z2ggdGhlIGBjdXN0b21gIHByb3Agc28gaXQgZG9lc24ndCAqbmVlZCogdGhlIHBheWxvYWQgb3IgY29tcHV0YXRpb25hbCBvdmVyaGVhZCBvZlxuICogYEBlbW90aW9uL2lzLXByb3AtdmFsaWRgLCBob3dldmVyIHRvIGZpeCB0aGlzIHByb2JsZW0gd2UgbmVlZCB0byB1c2UgaXQuXG4gKlxuICogQnkgbWFraW5nIGl0IGFuIG9wdGlvbmFsRGVwZW5kZW5jeSB3ZSBjYW4gb2ZmZXIgdGhpcyBmdW5jdGlvbmFsaXR5IG9ubHkgaW4gdGhlIHNpdHVhdGlvbnMgd2hlcmUgaXQnc1xuICogYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbnRyeSB7XG4gICAgLyoqXG4gICAgICogV2UgYXR0ZW1wdCB0byBpbXBvcnQgdGhpcyBwYWNrYWdlIGJ1dCByZXF1aXJlIHdvbid0IGJlIGRlZmluZWQgaW4gZXNtIGVudmlyb25tZW50cywgaW4gdGhhdCBjYXNlXG4gICAgICogaXNQcm9wVmFsaWQgd2lsbCBoYXZlIHRvIGJlIHByb3ZpZGVkIHZpYSBgTW90aW9uQ29udGV4dGAuIEluIGEgNi4wLjAgdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZFxuICAgICAqIGluIGZhdm91ciBvZiBleHBsaWNpdCBpbmplY3Rpb24uXG4gICAgICovXG4gICAgbG9hZEV4dGVybmFsSXNWYWxpZFByb3AocmVxdWlyZShcIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIikuZGVmYXVsdCk7XG59XG5jYXRjaCAoX2EpIHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGRvIGFueXRoaW5nIGhlcmUgLSB0aGUgZmFsbGJhY2sgaXMgdGhlIGV4aXN0aW5nIGBpc1Byb3BWYWxpZGAuXG59XG5mdW5jdGlvbiBmaWx0ZXJQcm9wcyhwcm9wcywgaXNEb20sIGZvcndhcmRNb3Rpb25Qcm9wcykge1xuICAgIHZhciBmaWx0ZXJlZFByb3BzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRGb3J3YXJkKGtleSkgfHxcbiAgICAgICAgICAgIChmb3J3YXJkTW90aW9uUHJvcHMgPT09IHRydWUgJiYgaXNWYWxpZE1vdGlvblByb3Aoa2V5KSkgfHxcbiAgICAgICAgICAgICghaXNEb20gJiYgIWlzVmFsaWRNb3Rpb25Qcm9wKGtleSkpIHx8XG4gICAgICAgICAgICAvLyBJZiB0cnlpbmcgdG8gdXNlIG5hdGl2ZSBIVE1MIGRyYWcgZXZlbnRzLCBmb3J3YXJkIGRyYWcgbGlzdGVuZXJzXG4gICAgICAgICAgICAocHJvcHNbXCJkcmFnZ2FibGVcIl0gJiYga2V5LnN0YXJ0c1dpdGgoXCJvbkRyYWdcIikpKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZFByb3BzO1xufVxuXG5mdW5jdGlvbiBjYWxjT3JpZ2luJDEob3JpZ2luLCBvZmZzZXQsIHNpemUpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9yaWdpbiA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IG9yaWdpblxuICAgICAgICA6IHN0eWxlVmFsdWVUeXBlcy5weC50cmFuc2Zvcm0ob2Zmc2V0ICsgc2l6ZSAqIG9yaWdpbik7XG59XG4vKipcbiAqIFRoZSBTVkcgdHJhbnNmb3JtIG9yaWdpbiBkZWZhdWx0cyBhcmUgZGlmZmVyZW50IHRvIENTUyBhbmQgaXMgbGVzcyBpbnR1aXRpdmUsXG4gKiBzbyB3ZSB1c2UgdGhlIG1lYXN1cmVkIGRpbWVuc2lvbnMgb2YgdGhlIFNWRyB0byByZWNvbmNpbGUgdGhlc2UuXG4gKi9cbmZ1bmN0aW9uIGNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4oZGltZW5zaW9ucywgb3JpZ2luWCwgb3JpZ2luWSkge1xuICAgIHZhciBweE9yaWdpblggPSBjYWxjT3JpZ2luJDEob3JpZ2luWCwgZGltZW5zaW9ucy54LCBkaW1lbnNpb25zLndpZHRoKTtcbiAgICB2YXIgcHhPcmlnaW5ZID0gY2FsY09yaWdpbiQxKG9yaWdpblksIGRpbWVuc2lvbnMueSwgZGltZW5zaW9ucy5oZWlnaHQpO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChweE9yaWdpblgsIFwiIFwiKS5jb25jYXQocHhPcmlnaW5ZKTtcbn1cblxudmFyIGRhc2hLZXlzID0ge1xuICAgIG9mZnNldDogXCJzdHJva2UtZGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZS1kYXNoYXJyYXlcIixcbn07XG52YXIgY2FtZWxLZXlzID0ge1xuICAgIG9mZnNldDogXCJzdHJva2VEYXNob2Zmc2V0XCIsXG4gICAgYXJyYXk6IFwic3Ryb2tlRGFzaGFycmF5XCIsXG59O1xuLyoqXG4gKiBCdWlsZCBTVkcgcGF0aCBwcm9wZXJ0aWVzLiBVc2VzIHRoZSBwYXRoJ3MgbWVhc3VyZWQgbGVuZ3RoIHRvIGNvbnZlcnRcbiAqIG91ciBjdXN0b20gcGF0aExlbmd0aCwgcGF0aFNwYWNpbmcgYW5kIHBhdGhPZmZzZXQgaW50byBzdHJva2UtZGFzaG9mZnNldFxuICogYW5kIHN0cm9rZS1kYXNoYXJyYXkgYXR0cmlidXRlcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG11dGF0aXZlIHRvIHJlZHVjZSBwZXItZnJhbWUgR0MuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU1ZHUGF0aChhdHRycywgbGVuZ3RoLCBzcGFjaW5nLCBvZmZzZXQsIHVzZURhc2hDYXNlKSB7XG4gICAgaWYgKHNwYWNpbmcgPT09IHZvaWQgMCkgeyBzcGFjaW5nID0gMTsgfVxuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgaWYgKHVzZURhc2hDYXNlID09PSB2b2lkIDApIHsgdXNlRGFzaENhc2UgPSB0cnVlOyB9XG4gICAgLy8gTm9ybWFsaXNlIHBhdGggbGVuZ3RoIGJ5IHNldHRpbmcgU1ZHIGF0dHJpYnV0ZSBwYXRoTGVuZ3RoIHRvIDFcbiAgICBhdHRycy5wYXRoTGVuZ3RoID0gMTtcbiAgICAvLyBXZSB1c2UgZGFzaCBjYXNlIHdoZW4gc2V0dGluZyBhdHRyaWJ1dGVzIGRpcmVjdGx5IHRvIHRoZSBET00gbm9kZSBhbmQgY2FtZWwgY2FzZVxuICAgIC8vIHdoZW4gZGVmaW5pbmcgcHJvcHMgb24gYSBSZWFjdCBjb21wb25lbnQuXG4gICAgdmFyIGtleXMgPSB1c2VEYXNoQ2FzZSA/IGRhc2hLZXlzIDogY2FtZWxLZXlzO1xuICAgIC8vIEJ1aWxkIHRoZSBkYXNoIG9mZnNldFxuICAgIGF0dHJzW2tleXMub2Zmc2V0XSA9IHN0eWxlVmFsdWVUeXBlcy5weC50cmFuc2Zvcm0oLW9mZnNldCk7XG4gICAgLy8gQnVpbGQgdGhlIGRhc2ggYXJyYXlcbiAgICB2YXIgcGF0aExlbmd0aCA9IHN0eWxlVmFsdWVUeXBlcy5weC50cmFuc2Zvcm0obGVuZ3RoKTtcbiAgICB2YXIgcGF0aFNwYWNpbmcgPSBzdHlsZVZhbHVlVHlwZXMucHgudHJhbnNmb3JtKHNwYWNpbmcpO1xuICAgIGF0dHJzW2tleXMuYXJyYXldID0gXCJcIi5jb25jYXQocGF0aExlbmd0aCwgXCIgXCIpLmNvbmNhdChwYXRoU3BhY2luZyk7XG59XG5cbi8qKlxuICogQnVpbGQgU1ZHIHZpc3VhbCBhdHRyYnV0ZXMsIGxpa2UgY3ggYW5kIHN0eWxlLnRyYW5zZm9ybVxuICovXG5mdW5jdGlvbiBidWlsZFNWR0F0dHJzKHN0YXRlLCBfYSwgb3B0aW9ucywgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICB2YXIgYXR0clggPSBfYS5hdHRyWCwgYXR0clkgPSBfYS5hdHRyWSwgb3JpZ2luWCA9IF9hLm9yaWdpblgsIG9yaWdpblkgPSBfYS5vcmlnaW5ZLCBwYXRoTGVuZ3RoID0gX2EucGF0aExlbmd0aCwgX2IgPSBfYS5wYXRoU3BhY2luZywgcGF0aFNwYWNpbmcgPSBfYiA9PT0gdm9pZCAwID8gMSA6IF9iLCBfYyA9IF9hLnBhdGhPZmZzZXQsIHBhdGhPZmZzZXQgPSBfYyA9PT0gdm9pZCAwID8gMCA6IF9jLCBcbiAgICAvLyBUaGlzIGlzIG9iamVjdCBjcmVhdGlvbiwgd2hpY2ggd2UgdHJ5IHRvIGF2b2lkIHBlci1mcmFtZS5cbiAgICBsYXRlc3QgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcImF0dHJYXCIsIFwiYXR0cllcIiwgXCJvcmlnaW5YXCIsIFwib3JpZ2luWVwiLCBcInBhdGhMZW5ndGhcIiwgXCJwYXRoU3BhY2luZ1wiLCBcInBhdGhPZmZzZXRcIl0pO1xuICAgIGJ1aWxkSFRNTFN0eWxlcyhzdGF0ZSwgbGF0ZXN0LCBvcHRpb25zLCB0cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgc3RhdGUuYXR0cnMgPSBzdGF0ZS5zdHlsZTtcbiAgICBzdGF0ZS5zdHlsZSA9IHt9O1xuICAgIHZhciBhdHRycyA9IHN0YXRlLmF0dHJzLCBzdHlsZSA9IHN0YXRlLnN0eWxlLCBkaW1lbnNpb25zID0gc3RhdGUuZGltZW5zaW9ucztcbiAgICAvKipcbiAgICAgKiBIb3dldmVyLCB3ZSBhcHBseSB0cmFuc2Zvcm1zIGFzIENTUyB0cmFuc2Zvcm1zLiBTbyBpZiB3ZSBkZXRlY3QgYSB0cmFuc2Zvcm0gd2UgdGFrZSBpdCBmcm9tIGF0dHJzXG4gICAgICogYW5kIGNvcHkgaXQgaW50byBzdHlsZS5cbiAgICAgKi9cbiAgICBpZiAoYXR0cnMudHJhbnNmb3JtKSB7XG4gICAgICAgIGlmIChkaW1lbnNpb25zKVxuICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYXR0cnMudHJhbnNmb3JtO1xuICAgICAgICBkZWxldGUgYXR0cnMudHJhbnNmb3JtO1xuICAgIH1cbiAgICAvLyBQYXJzZSB0cmFuc2Zvcm1PcmlnaW5cbiAgICBpZiAoZGltZW5zaW9ucyAmJlxuICAgICAgICAob3JpZ2luWCAhPT0gdW5kZWZpbmVkIHx8IG9yaWdpblkgIT09IHVuZGVmaW5lZCB8fCBzdHlsZS50cmFuc2Zvcm0pKSB7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4oZGltZW5zaW9ucywgb3JpZ2luWCAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWCA6IDAuNSwgb3JpZ2luWSAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWSA6IDAuNSk7XG4gICAgfVxuICAgIC8vIFRyZWF0IHgveSBub3QgYXMgc2hvcnRjdXRzIGJ1dCBhcyBhY3R1YWwgYXR0cmlidXRlc1xuICAgIGlmIChhdHRyWCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhdHRycy54ID0gYXR0clg7XG4gICAgaWYgKGF0dHJZICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnkgPSBhdHRyWTtcbiAgICAvLyBCdWlsZCBTVkcgcGF0aCBpZiBvbmUgaGFzIGJlZW4gZGVmaW5lZFxuICAgIGlmIChwYXRoTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYnVpbGRTVkdQYXRoKGF0dHJzLCBwYXRoTGVuZ3RoLCBwYXRoU3BhY2luZywgcGF0aE9mZnNldCwgZmFsc2UpO1xuICAgIH1cbn1cblxudmFyIGNyZWF0ZVN2Z1JlbmRlclN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBjcmVhdGVIdG1sUmVuZGVyU3RhdGUoKSksIHsgYXR0cnM6IHt9IH0pKTsgfTtcblxuZnVuY3Rpb24gdXNlU1ZHUHJvcHMocHJvcHMsIHZpc3VhbFN0YXRlKSB7XG4gICAgdmFyIHZpc3VhbFByb3BzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGNyZWF0ZVN2Z1JlbmRlclN0YXRlKCk7XG4gICAgICAgIGJ1aWxkU1ZHQXR0cnMoc3RhdGUsIHZpc3VhbFN0YXRlLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgc3RhdGUuYXR0cnMpLCB7IHN0eWxlOiB0c2xpYi5fX2Fzc2lnbih7fSwgc3RhdGUuc3R5bGUpIH0pO1xuICAgIH0sIFt2aXN1YWxTdGF0ZV0pO1xuICAgIGlmIChwcm9wcy5zdHlsZSkge1xuICAgICAgICB2YXIgcmF3U3R5bGVzID0ge307XG4gICAgICAgIGNvcHlSYXdWYWx1ZXNPbmx5KHJhd1N0eWxlcywgcHJvcHMuc3R5bGUsIHByb3BzKTtcbiAgICAgICAgdmlzdWFsUHJvcHMuc3R5bGUgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcmF3U3R5bGVzKSwgdmlzdWFsUHJvcHMuc3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gdmlzdWFsUHJvcHM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpIHtcbiAgICBpZiAoZm9yd2FyZE1vdGlvblByb3BzID09PSB2b2lkIDApIHsgZm9yd2FyZE1vdGlvblByb3BzID0gZmFsc2U7IH1cbiAgICB2YXIgdXNlUmVuZGVyID0gZnVuY3Rpb24gKENvbXBvbmVudCwgcHJvcHMsIHByb2plY3Rpb25JZCwgcmVmLCBfYSwgaXNTdGF0aWMpIHtcbiAgICAgICAgdmFyIGxhdGVzdFZhbHVlcyA9IF9hLmxhdGVzdFZhbHVlcztcbiAgICAgICAgdmFyIHVzZVZpc3VhbFByb3BzID0gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KVxuICAgICAgICAgICAgPyB1c2VTVkdQcm9wc1xuICAgICAgICAgICAgOiB1c2VIVE1MUHJvcHM7XG4gICAgICAgIHZhciB2aXN1YWxQcm9wcyA9IHVzZVZpc3VhbFByb3BzKHByb3BzLCBsYXRlc3RWYWx1ZXMsIGlzU3RhdGljKTtcbiAgICAgICAgdmFyIGZpbHRlcmVkUHJvcHMgPSBmaWx0ZXJQcm9wcyhwcm9wcywgdHlwZW9mIENvbXBvbmVudCA9PT0gXCJzdHJpbmdcIiwgZm9yd2FyZE1vdGlvblByb3BzKTtcbiAgICAgICAgdmFyIGVsZW1lbnRQcm9wcyA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBmaWx0ZXJlZFByb3BzKSwgdmlzdWFsUHJvcHMpLCB7IHJlZjogcmVmIH0pO1xuICAgICAgICBpZiAocHJvamVjdGlvbklkKSB7XG4gICAgICAgICAgICBlbGVtZW50UHJvcHNbXCJkYXRhLXByb2plY3Rpb24taWRcIl0gPSBwcm9qZWN0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBlbGVtZW50UHJvcHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHVzZVJlbmRlcjtcbn1cblxudmFyIENBTUVMX0NBU0VfUEFUVEVSTiA9IC8oW2Etel0pKFtBLVpdKS9nO1xudmFyIFJFUExBQ0VfVEVNUExBVEUgPSBcIiQxLSQyXCI7XG4vKipcbiAqIENvbnZlcnQgY2FtZWxDYXNlIHRvIGRhc2gtY2FzZSBwcm9wZXJ0aWVzLlxuICovXG52YXIgY2FtZWxUb0Rhc2ggPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKENBTUVMX0NBU0VfUEFUVEVSTiwgUkVQTEFDRV9URU1QTEFURSkudG9Mb3dlckNhc2UoKTtcbn07XG5cbmZ1bmN0aW9uIHJlbmRlckhUTUwoZWxlbWVudCwgX2EsIHN0eWxlUHJvcCwgcHJvamVjdGlvbikge1xuICAgIHZhciBzdHlsZSA9IF9hLnN0eWxlLCB2YXJzID0gX2EudmFycztcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlLCBwcm9qZWN0aW9uICYmIHByb2plY3Rpb24uZ2V0UHJvamVjdGlvblN0eWxlcyhzdHlsZVByb3ApKTtcbiAgICAvLyBMb29wIG92ZXIgYW55IENTUyB2YXJpYWJsZXMgYW5kIGFzc2lnbiB0aG9zZS5cbiAgICBmb3IgKHZhciBrZXkgaW4gdmFycykge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFyc1trZXldKTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBzZXQgb2YgYXR0cmlidXRlIG5hbWVzIHRoYXQgYXJlIGFsd2F5cyByZWFkL3dyaXR0ZW4gYXMgY2FtZWwgY2FzZS5cbiAqL1xudmFyIGNhbWVsQ2FzZUF0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgICBcImJhc2VGcmVxdWVuY3lcIixcbiAgICBcImRpZmZ1c2VDb25zdGFudFwiLFxuICAgIFwia2VybmVsTWF0cml4XCIsXG4gICAgXCJrZXJuZWxVbml0TGVuZ3RoXCIsXG4gICAgXCJrZXlTcGxpbmVzXCIsXG4gICAgXCJrZXlUaW1lc1wiLFxuICAgIFwibGltaXRpbmdDb25lQW5nbGVcIixcbiAgICBcIm1hcmtlckhlaWdodFwiLFxuICAgIFwibWFya2VyV2lkdGhcIixcbiAgICBcIm51bU9jdGF2ZXNcIixcbiAgICBcInRhcmdldFhcIixcbiAgICBcInRhcmdldFlcIixcbiAgICBcInN1cmZhY2VTY2FsZVwiLFxuICAgIFwic3BlY3VsYXJDb25zdGFudFwiLFxuICAgIFwic3BlY3VsYXJFeHBvbmVudFwiLFxuICAgIFwic3RkRGV2aWF0aW9uXCIsXG4gICAgXCJ0YWJsZVZhbHVlc1wiLFxuICAgIFwidmlld0JveFwiLFxuICAgIFwiZ3JhZGllbnRUcmFuc2Zvcm1cIixcbiAgICBcInBhdGhMZW5ndGhcIixcbl0pO1xuXG5mdW5jdGlvbiByZW5kZXJTVkcoZWxlbWVudCwgcmVuZGVyU3RhdGUsIF9zdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICByZW5kZXJIVE1MKGVsZW1lbnQsIHJlbmRlclN0YXRlLCB1bmRlZmluZWQsIHByb2plY3Rpb24pO1xuICAgIGZvciAodmFyIGtleSBpbiByZW5kZXJTdGF0ZS5hdHRycykge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSghY2FtZWxDYXNlQXR0cmlidXRlcy5oYXMoa2V5KSA/IGNhbWVsVG9EYXNoKGtleSkgOiBrZXksIHJlbmRlclN0YXRlLmF0dHJzW2tleV0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzJDEocHJvcHMpIHtcbiAgICB2YXIgc3R5bGUgPSBwcm9wcy5zdHlsZTtcbiAgICB2YXIgbmV3VmFsdWVzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHN0eWxlKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHN0eWxlW2tleV0pIHx8IGlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBwcm9wcykpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlc1trZXldID0gc3R5bGVba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWVzO1xufVxuXG5mdW5jdGlvbiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMpIHtcbiAgICB2YXIgbmV3VmFsdWVzID0gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzJDEocHJvcHMpO1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoaXNNb3Rpb25WYWx1ZShwcm9wc1trZXldKSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEtleSA9IGtleSA9PT0gXCJ4XCIgfHwga2V5ID09PSBcInlcIiA/IFwiYXR0clwiICsga2V5LnRvVXBwZXJDYXNlKCkgOiBrZXk7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbdGFyZ2V0S2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlcztcbn1cblxuZnVuY3Rpb24gaXNBbmltYXRpb25Db250cm9scyh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2LnN0YXJ0ID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIG1ha2VTdGF0ZShfYSwgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCkge1xuICAgIHZhciBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgPSBfYS5zY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMsIGNyZWF0ZVJlbmRlclN0YXRlID0gX2EuY3JlYXRlUmVuZGVyU3RhdGUsIG9uTW91bnQgPSBfYS5vbk1vdW50O1xuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgbGF0ZXN0VmFsdWVzOiBtYWtlTGF0ZXN0VmFsdWVzKHByb3BzLCBjb250ZXh0LCBwcmVzZW5jZUNvbnRleHQsIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyksXG4gICAgICAgIHJlbmRlclN0YXRlOiBjcmVhdGVSZW5kZXJTdGF0ZSgpLFxuICAgIH07XG4gICAgaWYgKG9uTW91bnQpIHtcbiAgICAgICAgc3RhdGUubW91bnQgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIG9uTW91bnQocHJvcHMsIGluc3RhbmNlLCBzdGF0ZSk7IH07XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbn1cbnZhciBtYWtlVXNlVmlzdWFsU3RhdGUgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgaXNTdGF0aWMpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbnRleHQpO1xuICAgICAgICB2YXIgcHJlc2VuY2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgICAgICByZXR1cm4gaXNTdGF0aWNcbiAgICAgICAgICAgID8gbWFrZVN0YXRlKGNvbmZpZywgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dClcbiAgICAgICAgICAgIDogdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlU3RhdGUoY29uZmlnLCBwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG59O1xuZnVuY3Rpb24gbWFrZUxhdGVzdFZhbHVlcyhwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0LCBzY3JhcGVNb3Rpb25WYWx1ZXMpIHtcbiAgICB2YXIgdmFsdWVzID0ge307XG4gICAgdmFyIGJsb2NrSW5pdGlhbEFuaW1hdGlvbiA9IChwcmVzZW5jZUNvbnRleHQgPT09IG51bGwgfHwgcHJlc2VuY2VDb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmVzZW5jZUNvbnRleHQuaW5pdGlhbCkgPT09IGZhbHNlO1xuICAgIHZhciBtb3Rpb25WYWx1ZXMgPSBzY3JhcGVNb3Rpb25WYWx1ZXMocHJvcHMpO1xuICAgIGZvciAodmFyIGtleSBpbiBtb3Rpb25WYWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzW2tleV0gPSByZXNvbHZlTW90aW9uVmFsdWUobW90aW9uVmFsdWVzW2tleV0pO1xuICAgIH1cbiAgICB2YXIgaW5pdGlhbCA9IHByb3BzLmluaXRpYWwsIGFuaW1hdGUgPSBwcm9wcy5hbmltYXRlO1xuICAgIHZhciBpc0NvbnRyb2xsaW5nVmFyaWFudHMgPSBjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcyk7XG4gICAgdmFyIGlzVmFyaWFudE5vZGUgPSBjaGVja0lmVmFyaWFudE5vZGUocHJvcHMpO1xuICAgIGlmIChjb250ZXh0ICYmXG4gICAgICAgIGlzVmFyaWFudE5vZGUgJiZcbiAgICAgICAgIWlzQ29udHJvbGxpbmdWYXJpYW50cyAmJlxuICAgICAgICBwcm9wcy5pbmhlcml0ICE9PSBmYWxzZSkge1xuICAgICAgICBpbml0aWFsICE9PSBudWxsICYmIGluaXRpYWwgIT09IHZvaWQgMCA/IGluaXRpYWwgOiAoaW5pdGlhbCA9IGNvbnRleHQuaW5pdGlhbCk7XG4gICAgICAgIGFuaW1hdGUgIT09IG51bGwgJiYgYW5pbWF0ZSAhPT0gdm9pZCAwID8gYW5pbWF0ZSA6IChhbmltYXRlID0gY29udGV4dC5hbmltYXRlKTtcbiAgICB9XG4gICAgdmFyIGluaXRpYWxBbmltYXRpb25Jc0Jsb2NrZWQgPSBibG9ja0luaXRpYWxBbmltYXRpb24gfHwgaW5pdGlhbCA9PT0gZmFsc2U7XG4gICAgdmFyIHZhcmlhbnRUb1NldCA9IGluaXRpYWxBbmltYXRpb25Jc0Jsb2NrZWQgPyBhbmltYXRlIDogaW5pdGlhbDtcbiAgICBpZiAodmFyaWFudFRvU2V0ICYmXG4gICAgICAgIHR5cGVvZiB2YXJpYW50VG9TZXQgIT09IFwiYm9vbGVhblwiICYmXG4gICAgICAgICFpc0FuaW1hdGlvbkNvbnRyb2xzKHZhcmlhbnRUb1NldCkpIHtcbiAgICAgICAgdmFyIGxpc3QgPSBBcnJheS5pc0FycmF5KHZhcmlhbnRUb1NldCkgPyB2YXJpYW50VG9TZXQgOiBbdmFyaWFudFRvU2V0XTtcbiAgICAgICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbik7XG4gICAgICAgICAgICBpZiAoIXJlc29sdmVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uRW5kID0gcmVzb2x2ZWQudHJhbnNpdGlvbkVuZDsgcmVzb2x2ZWQudHJhbnNpdGlvbjsgdmFyIHRhcmdldCA9IHRzbGliLl9fcmVzdChyZXNvbHZlZCwgW1widHJhbnNpdGlvbkVuZFwiLCBcInRyYW5zaXRpb25cIl0pO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZVRhcmdldCA9IHRhcmdldFtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVGFrZSBmaW5hbCBrZXlmcmFtZSBpZiB0aGUgaW5pdGlhbCBhbmltYXRpb24gaXMgYmxvY2tlZCBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAqIHdlIHdhbnQgdG8gaW5pdGlhbGlzZSBhdCB0aGUgZW5kIG9mIHRoYXQgYmxvY2tlZCBhbmltYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBpbml0aWFsQW5pbWF0aW9uSXNCbG9ja2VkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHZhbHVlVGFyZ2V0Lmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUYXJnZXQgPSB2YWx1ZVRhcmdldFtpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVRhcmdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNba2V5XSA9IHZhbHVlVGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0cmFuc2l0aW9uRW5kKVxuICAgICAgICAgICAgICAgIHZhbHVlc1trZXldID0gdHJhbnNpdGlvbkVuZFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxudmFyIHN2Z01vdGlvbkNvbmZpZyA9IHtcbiAgICB1c2VWaXN1YWxTdGF0ZTogbWFrZVVzZVZpc3VhbFN0YXRlKHtcbiAgICAgICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzOiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMsXG4gICAgICAgIGNyZWF0ZVJlbmRlclN0YXRlOiBjcmVhdGVTdmdSZW5kZXJTdGF0ZSxcbiAgICAgICAgb25Nb3VudDogZnVuY3Rpb24gKHByb3BzLCBpbnN0YW5jZSwgX2EpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJTdGF0ZSA9IF9hLnJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMgPSBfYS5sYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlbmRlclN0YXRlLmRpbWVuc2lvbnMgPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaW5zdGFuY2UuZ2V0QkJveCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyBpbnN0YW5jZS5nZXRCQm94KClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW5zdGFuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIE1vc3QgbGlrZWx5IHRyeWluZyB0byBtZWFzdXJlIGFuIHVucmVuZGVyZWQgZWxlbWVudCB1bmRlciBGaXJlZm94XG4gICAgICAgICAgICAgICAgcmVuZGVyU3RhdGUuZGltZW5zaW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgICAgICByZW5kZXJTVkcoaW5zdGFuY2UsIHJlbmRlclN0YXRlKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbn07XG5cbnZhciBodG1sTW90aW9uQ29uZmlnID0ge1xuICAgIHVzZVZpc3VhbFN0YXRlOiBtYWtlVXNlVmlzdWFsU3RhdGUoe1xuICAgICAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlSHRtbFJlbmRlclN0YXRlLFxuICAgIH0pLFxufTtcblxuZnVuY3Rpb24gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgX2EsIHByZWxvYWRlZEZlYXR1cmVzLCBjcmVhdGVWaXN1YWxFbGVtZW50LCBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKSB7XG4gICAgdmFyIF9iID0gX2EuZm9yd2FyZE1vdGlvblByb3BzLCBmb3J3YXJkTW90aW9uUHJvcHMgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjtcbiAgICB2YXIgYmFzZUNvbmZpZyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBzdmdNb3Rpb25Db25maWdcbiAgICAgICAgOiBodG1sTW90aW9uQ29uZmlnO1xuICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgYmFzZUNvbmZpZyksIHsgcHJlbG9hZGVkRmVhdHVyZXM6IHByZWxvYWRlZEZlYXR1cmVzLCB1c2VSZW5kZXI6IGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpLCBjcmVhdGVWaXN1YWxFbGVtZW50OiBjcmVhdGVWaXN1YWxFbGVtZW50LCBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yOiBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yLCBDb21wb25lbnQ6IENvbXBvbmVudCB9KTtcbn1cblxuZXhwb3J0cy5BbmltYXRpb25UeXBlID0gdm9pZCAwO1xuKGZ1bmN0aW9uIChBbmltYXRpb25UeXBlKSB7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkFuaW1hdGVcIl0gPSBcImFuaW1hdGVcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiSG92ZXJcIl0gPSBcIndoaWxlSG92ZXJcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiVGFwXCJdID0gXCJ3aGlsZVRhcFwiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJEcmFnXCJdID0gXCJ3aGlsZURyYWdcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiRm9jdXNcIl0gPSBcIndoaWxlRm9jdXNcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiSW5WaWV3XCJdID0gXCJ3aGlsZUluVmlld1wiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJFeGl0XCJdID0gXCJleGl0XCI7XG59KShleHBvcnRzLkFuaW1hdGlvblR5cGUgfHwgKGV4cG9ydHMuQW5pbWF0aW9uVHlwZSA9IHt9KSk7XG5cbmZ1bmN0aW9uIGFkZERvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlIH07IH1cbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xufVxuLyoqXG4gKiBBdHRhY2hlcyBhbiBldmVudCBsaXN0ZW5lciBkaXJlY3RseSB0byB0aGUgcHJvdmlkZWQgRE9NIGVsZW1lbnQuXG4gKlxuICogQnlwYXNzaW5nIFJlYWN0J3MgZXZlbnQgc3lzdGVtIGNhbiBiZSBkZXNpcmFibGUsIGZvciBpbnN0YW5jZSB3aGVuIGF0dGFjaGluZyBub24tcGFzc2l2ZVxuICogZXZlbnQgaGFuZGxlcnMuXG4gKlxuICogYGBganN4XG4gKiBjb25zdCByZWYgPSB1c2VSZWYobnVsbClcbiAqXG4gKiB1c2VEb21FdmVudChyZWYsICd3aGVlbCcsIG9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSlcbiAqXG4gKiByZXR1cm4gPGRpdiByZWY9e3JlZn0gLz5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSByZWYgLSBSZWFjdC5SZWZPYmplY3QgdGhhdCdzIGJlZW4gcHJvdmlkZWQgdG8gdGhlIGVsZW1lbnQgeW91IHdhbnQgdG8gYmluZCB0aGUgbGlzdGVuZXIgdG8uXG4gKiBAcGFyYW0gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZXZlbnQgeW91IHdhbnQgbGlzdGVuIGZvci5cbiAqIEBwYXJhbSBoYW5kbGVyIC0gRnVuY3Rpb24gdG8gZmlyZSB3aGVuIHJlY2VpdmluZyB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gcGFzcyB0byBgRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VEb21FdmVudChyZWYsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChoYW5kbGVyICYmIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGREb21FdmVudChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSwgW3JlZiwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zXSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBwcm9wc1xuICogQHBhcmFtIHJlZlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZUZvY3VzR2VzdHVyZShfYSkge1xuICAgIHZhciB3aGlsZUZvY3VzID0gX2Eud2hpbGVGb2N1cywgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgdmFyIG9uRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShleHBvcnRzLkFuaW1hdGlvblR5cGUuRm9jdXMsIHRydWUpO1xuICAgIH07XG4gICAgdmFyIG9uQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKGV4cG9ydHMuQW5pbWF0aW9uVHlwZS5Gb2N1cywgZmFsc2UpO1xuICAgIH07XG4gICAgdXNlRG9tRXZlbnQodmlzdWFsRWxlbWVudCwgXCJmb2N1c1wiLCB3aGlsZUZvY3VzID8gb25Gb2N1cyA6IHVuZGVmaW5lZCk7XG4gICAgdXNlRG9tRXZlbnQodmlzdWFsRWxlbWVudCwgXCJibHVyXCIsIHdoaWxlRm9jdXMgPyBvbkJsdXIgOiB1bmRlZmluZWQpO1xufVxuXG5mdW5jdGlvbiBpc01vdXNlRXZlbnQoZXZlbnQpIHtcbiAgICAvLyBQb2ludGVyRXZlbnQgaW5oZXJpdHMgZnJvbSBNb3VzZUV2ZW50IHNvIHdlIGNhbid0IHVzZSBhIHN0cmFpZ2h0IGluc3RhbmNlb2YgY2hlY2suXG4gICAgaWYgKHR5cGVvZiBQb2ludGVyRXZlbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZXZlbnQgaW5zdGFuY2VvZiBQb2ludGVyRXZlbnQpIHtcbiAgICAgICAgcmV0dXJuICEhKGV2ZW50LnBvaW50ZXJUeXBlID09PSBcIm1vdXNlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50O1xufVxuZnVuY3Rpb24gaXNUb3VjaEV2ZW50KGV2ZW50KSB7XG4gICAgdmFyIGhhc1RvdWNoZXMgPSAhIWV2ZW50LnRvdWNoZXM7XG4gICAgcmV0dXJuIGhhc1RvdWNoZXM7XG59XG5cbi8qKlxuICogRmlsdGVycyBvdXQgZXZlbnRzIG5vdCBhdHRhY2hlZCB0byB0aGUgcHJpbWFyeSBwb2ludGVyIChjdXJyZW50bHkgbGVmdCBtb3VzZSBidXR0b24pXG4gKiBAcGFyYW0gZXZlbnRIYW5kbGVyXG4gKi9cbmZ1bmN0aW9uIGZpbHRlclByaW1hcnlQb2ludGVyKGV2ZW50SGFuZGxlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGlzTW91c2VFdmVudCA9IGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudDtcbiAgICAgICAgdmFyIGlzUHJpbWFyeVBvaW50ZXIgPSAhaXNNb3VzZUV2ZW50IHx8XG4gICAgICAgICAgICAoaXNNb3VzZUV2ZW50ICYmIGV2ZW50LmJ1dHRvbiA9PT0gMCk7XG4gICAgICAgIGlmIChpc1ByaW1hcnlQb2ludGVyKSB7XG4gICAgICAgICAgICBldmVudEhhbmRsZXIoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbnZhciBkZWZhdWx0UGFnZVBvaW50ID0geyBwYWdlWDogMCwgcGFnZVk6IDAgfTtcbmZ1bmN0aW9uIHBvaW50RnJvbVRvdWNoKGUsIHBvaW50VHlwZSkge1xuICAgIGlmIChwb2ludFR5cGUgPT09IHZvaWQgMCkgeyBwb2ludFR5cGUgPSBcInBhZ2VcIjsgfVxuICAgIHZhciBwcmltYXJ5VG91Y2ggPSBlLnRvdWNoZXNbMF0gfHwgZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICB2YXIgcG9pbnQgPSBwcmltYXJ5VG91Y2ggfHwgZGVmYXVsdFBhZ2VQb2ludDtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwb2ludFtwb2ludFR5cGUgKyBcIlhcIl0sXG4gICAgICAgIHk6IHBvaW50W3BvaW50VHlwZSArIFwiWVwiXSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcG9pbnRGcm9tTW91c2UocG9pbnQsIHBvaW50VHlwZSkge1xuICAgIGlmIChwb2ludFR5cGUgPT09IHZvaWQgMCkgeyBwb2ludFR5cGUgPSBcInBhZ2VcIjsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHBvaW50W3BvaW50VHlwZSArIFwiWFwiXSxcbiAgICAgICAgeTogcG9pbnRbcG9pbnRUeXBlICsgXCJZXCJdLFxuICAgIH07XG59XG5mdW5jdGlvbiBleHRyYWN0RXZlbnRJbmZvKGV2ZW50LCBwb2ludFR5cGUpIHtcbiAgICBpZiAocG9pbnRUeXBlID09PSB2b2lkIDApIHsgcG9pbnRUeXBlID0gXCJwYWdlXCI7IH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwb2ludDogaXNUb3VjaEV2ZW50KGV2ZW50KVxuICAgICAgICAgICAgPyBwb2ludEZyb21Ub3VjaChldmVudCwgcG9pbnRUeXBlKVxuICAgICAgICAgICAgOiBwb2ludEZyb21Nb3VzZShldmVudCwgcG9pbnRUeXBlKSxcbiAgICB9O1xufVxudmFyIHdyYXBIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIHNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyKSB7XG4gICAgaWYgKHNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyID09PSB2b2lkIDApIHsgc2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXIgPSBmYWxzZTsgfVxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlcihldmVudCwgZXh0cmFjdEV2ZW50SW5mbyhldmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIHNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyXG4gICAgICAgID8gZmlsdGVyUHJpbWFyeVBvaW50ZXIobGlzdGVuZXIpXG4gICAgICAgIDogbGlzdGVuZXI7XG59O1xuXG4vLyBXZSBjaGVjayBmb3IgZXZlbnQgc3VwcG9ydCB2aWEgZnVuY3Rpb25zIGluIGNhc2UgdGhleSd2ZSBiZWVuIG1vY2tlZCBieSBhIHRlc3Rpbmcgc3VpdGUuXG52YXIgc3VwcG9ydHNQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgd2luZG93Lm9ucG9pbnRlcmRvd24gPT09IG51bGw7XG59O1xudmFyIHN1cHBvcnRzVG91Y2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzQnJvd3NlciAmJiB3aW5kb3cub250b3VjaHN0YXJ0ID09PSBudWxsO1xufTtcbnZhciBzdXBwb3J0c01vdXNlRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgd2luZG93Lm9ubW91c2Vkb3duID09PSBudWxsO1xufTtcblxudmFyIG1vdXNlRXZlbnROYW1lcyA9IHtcbiAgICBwb2ludGVyZG93bjogXCJtb3VzZWRvd25cIixcbiAgICBwb2ludGVybW92ZTogXCJtb3VzZW1vdmVcIixcbiAgICBwb2ludGVydXA6IFwibW91c2V1cFwiLFxuICAgIHBvaW50ZXJjYW5jZWw6IFwibW91c2VjYW5jZWxcIixcbiAgICBwb2ludGVyb3ZlcjogXCJtb3VzZW92ZXJcIixcbiAgICBwb2ludGVyb3V0OiBcIm1vdXNlb3V0XCIsXG4gICAgcG9pbnRlcmVudGVyOiBcIm1vdXNlZW50ZXJcIixcbiAgICBwb2ludGVybGVhdmU6IFwibW91c2VsZWF2ZVwiLFxufTtcbnZhciB0b3VjaEV2ZW50TmFtZXMgPSB7XG4gICAgcG9pbnRlcmRvd246IFwidG91Y2hzdGFydFwiLFxuICAgIHBvaW50ZXJtb3ZlOiBcInRvdWNobW92ZVwiLFxuICAgIHBvaW50ZXJ1cDogXCJ0b3VjaGVuZFwiLFxuICAgIHBvaW50ZXJjYW5jZWw6IFwidG91Y2hjYW5jZWxcIixcbn07XG5mdW5jdGlvbiBnZXRQb2ludGVyRXZlbnROYW1lKG5hbWUpIHtcbiAgICBpZiAoc3VwcG9ydHNQb2ludGVyRXZlbnRzKCkpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN1cHBvcnRzVG91Y2hFdmVudHMoKSkge1xuICAgICAgICByZXR1cm4gdG91Y2hFdmVudE5hbWVzW25hbWVdO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdXBwb3J0c01vdXNlRXZlbnRzKCkpIHtcbiAgICAgICAgcmV0dXJuIG1vdXNlRXZlbnROYW1lc1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBhZGRQb2ludGVyRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYWRkRG9tRXZlbnQodGFyZ2V0LCBnZXRQb2ludGVyRXZlbnROYW1lKGV2ZW50TmFtZSksIHdyYXBIYW5kbGVyKGhhbmRsZXIsIGV2ZW50TmFtZSA9PT0gXCJwb2ludGVyZG93blwiKSwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiB1c2VQb2ludGVyRXZlbnQocmVmLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdXNlRG9tRXZlbnQocmVmLCBnZXRQb2ludGVyRXZlbnROYW1lKGV2ZW50TmFtZSksIGhhbmRsZXIgJiYgd3JhcEhhbmRsZXIoaGFuZGxlciwgZXZlbnROYW1lID09PSBcInBvaW50ZXJkb3duXCIpLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jayhuYW1lKSB7XG4gICAgdmFyIGxvY2sgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVuTG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxvY2sgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBpZiAobG9jayA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9jayA9IG5hbWU7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkxvY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG52YXIgZ2xvYmFsSG9yaXpvbnRhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ0hvcml6b250YWxcIik7XG52YXIgZ2xvYmFsVmVydGljYWxMb2NrID0gY3JlYXRlTG9jayhcImRyYWdWZXJ0aWNhbFwiKTtcbmZ1bmN0aW9uIGdldEdsb2JhbExvY2soZHJhZykge1xuICAgIHZhciBsb2NrID0gZmFsc2U7XG4gICAgaWYgKGRyYWcgPT09IFwieVwiKSB7XG4gICAgICAgIGxvY2sgPSBnbG9iYWxWZXJ0aWNhbExvY2soKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZyA9PT0gXCJ4XCIpIHtcbiAgICAgICAgbG9jayA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgb3Blbkhvcml6b250YWxfMSA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgICAgIHZhciBvcGVuVmVydGljYWxfMSA9IGdsb2JhbFZlcnRpY2FsTG9jaygpO1xuICAgICAgICBpZiAob3Blbkhvcml6b250YWxfMSAmJiBvcGVuVmVydGljYWxfMSkge1xuICAgICAgICAgICAgbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbF8xKCk7XG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsXzEoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZWxlYXNlIHRoZSBsb2NrcyBiZWNhdXNlIHdlIGRvbid0IHVzZSB0aGVtXG4gICAgICAgICAgICBpZiAob3Blbkhvcml6b250YWxfMSlcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbF8xKCk7XG4gICAgICAgICAgICBpZiAob3BlblZlcnRpY2FsXzEpXG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsXzEoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jaztcbn1cbmZ1bmN0aW9uIGlzRHJhZ0FjdGl2ZSgpIHtcbiAgICAvLyBDaGVjayB0aGUgZ2VzdHVyZSBsb2NrIC0gaWYgd2UgZ2V0IGl0LCBpdCBtZWFucyBubyBkcmFnIGdlc3R1cmUgaXMgYWN0aXZlXG4gICAgLy8gYW5kIHdlIGNhbiBzYWZlbHkgZmlyZSB0aGUgdGFwIGdlc3R1cmUuXG4gICAgdmFyIG9wZW5HZXN0dXJlTG9jayA9IGdldEdsb2JhbExvY2sodHJ1ZSk7XG4gICAgaWYgKCFvcGVuR2VzdHVyZUxvY2spXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIG9wZW5HZXN0dXJlTG9jaygpO1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSG92ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBpc0FjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFpc01vdXNlRXZlbnQoZXZlbnQpIHx8IGlzRHJhZ0FjdGl2ZSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5zdXJlIHdlIHRyaWdnZXIgYW5pbWF0aW9ucyBiZWZvcmUgZmlyaW5nIGV2ZW50IGNhbGxiYWNrXG4gICAgICAgICAqL1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKGV4cG9ydHMuQW5pbWF0aW9uVHlwZS5Ib3ZlciwgaXNBY3RpdmUpO1xuICAgICAgICBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2soZXZlbnQsIGluZm8pO1xuICAgIH07XG59XG5mdW5jdGlvbiB1c2VIb3Zlckdlc3R1cmUoX2EpIHtcbiAgICB2YXIgb25Ib3ZlclN0YXJ0ID0gX2Eub25Ib3ZlclN0YXJ0LCBvbkhvdmVyRW5kID0gX2Eub25Ib3ZlckVuZCwgd2hpbGVIb3ZlciA9IF9hLndoaWxlSG92ZXIsIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50O1xuICAgIHVzZVBvaW50ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBcInBvaW50ZXJlbnRlclwiLCBvbkhvdmVyU3RhcnQgfHwgd2hpbGVIb3ZlclxuICAgICAgICA/IGNyZWF0ZUhvdmVyRXZlbnQodmlzdWFsRWxlbWVudCwgdHJ1ZSwgb25Ib3ZlclN0YXJ0KVxuICAgICAgICA6IHVuZGVmaW5lZCwgeyBwYXNzaXZlOiAhb25Ib3ZlclN0YXJ0IH0pO1xuICAgIHVzZVBvaW50ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBcInBvaW50ZXJsZWF2ZVwiLCBvbkhvdmVyRW5kIHx8IHdoaWxlSG92ZXJcbiAgICAgICAgPyBjcmVhdGVIb3ZlckV2ZW50KHZpc3VhbEVsZW1lbnQsIGZhbHNlLCBvbkhvdmVyRW5kKVxuICAgICAgICA6IHVuZGVmaW5lZCwgeyBwYXNzaXZlOiAhb25Ib3ZlckVuZCB9KTtcbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSB1cCB0aGUgdHJlZSB0byBjaGVjayB3aGV0aGVyIHRoZSBwcm92aWRlZCBjaGlsZCBub2RlXG4gKiBpcyB0aGUgcGFyZW50IG9yIGEgZGVzY2VuZGFudCBvZiBpdC5cbiAqXG4gKiBAcGFyYW0gcGFyZW50IC0gRWxlbWVudCB0byBmaW5kXG4gKiBAcGFyYW0gY2hpbGQgLSBFbGVtZW50IHRvIHRlc3QgYWdhaW5zdCBwYXJlbnRcbiAqL1xudmFyIGlzTm9kZU9yQ2hpbGQgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCkge1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChwYXJlbnQgPT09IGNoaWxkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzTm9kZU9yQ2hpbGQocGFyZW50LCBjaGlsZC5wYXJlbnRFbGVtZW50KTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiB1c2VVbm1vdW50RWZmZWN0KGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjaygpOyB9OyB9LCBbXSk7XG59XG5cbi8qKlxuICogQHBhcmFtIGhhbmRsZXJzIC1cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VUYXBHZXN0dXJlKF9hKSB7XG4gICAgdmFyIG9uVGFwID0gX2Eub25UYXAsIG9uVGFwU3RhcnQgPSBfYS5vblRhcFN0YXJ0LCBvblRhcENhbmNlbCA9IF9hLm9uVGFwQ2FuY2VsLCB3aGlsZVRhcCA9IF9hLndoaWxlVGFwLCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudDtcbiAgICB2YXIgaGFzUHJlc3NMaXN0ZW5lcnMgPSBvblRhcCB8fCBvblRhcFN0YXJ0IHx8IG9uVGFwQ2FuY2VsIHx8IHdoaWxlVGFwO1xuICAgIHZhciBpc1ByZXNzaW5nID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICB2YXIgY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycyA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICAvKipcbiAgICAgKiBPbmx5IHNldCBsaXN0ZW5lciB0byBwYXNzaXZlIGlmIHRoZXJlIGFyZSBubyBleHRlcm5hbCBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgdmFyIGV2ZW50T3B0aW9ucyA9IHtcbiAgICAgICAgcGFzc2l2ZTogIShvblRhcFN0YXJ0IHx8IG9uVGFwIHx8IG9uVGFwQ2FuY2VsIHx8IG9uUG9pbnRlckRvd24pLFxuICAgIH07XG4gICAgZnVuY3Rpb24gcmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycyk7XG4gICAgICAgIGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrUG9pbnRlckVuZCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZW1vdmVQb2ludGVyRW5kTGlzdGVuZXIoKTtcbiAgICAgICAgaXNQcmVzc2luZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoZXhwb3J0cy5BbmltYXRpb25UeXBlLlRhcCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gIWlzRHJhZ0FjdGl2ZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJVcChldmVudCwgaW5mbykge1xuICAgICAgICBpZiAoIWNoZWNrUG9pbnRlckVuZCgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2Ugb25seSBjb3VudCB0aGlzIGFzIGEgdGFwIGdlc3R1cmUgaWYgdGhlIGV2ZW50LnRhcmdldCBpcyB0aGUgc2FtZVxuICAgICAgICAgKiBhcywgb3IgYSBjaGlsZCBvZiwgdGhpcyBjb21wb25lbnQncyBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICAhaXNOb2RlT3JDaGlsZCh2aXN1YWxFbGVtZW50LmdldEluc3RhbmNlKCksIGV2ZW50LnRhcmdldClcbiAgICAgICAgICAgID8gb25UYXBDYW5jZWwgPT09IG51bGwgfHwgb25UYXBDYW5jZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVGFwQ2FuY2VsKGV2ZW50LCBpbmZvKVxuICAgICAgICAgICAgOiBvblRhcCA9PT0gbnVsbCB8fCBvblRhcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25UYXAoZXZlbnQsIGluZm8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJDYW5jZWwoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgaWYgKCFjaGVja1BvaW50ZXJFbmQoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb25UYXBDYW5jZWwgPT09IG51bGwgfHwgb25UYXBDYW5jZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVGFwQ2FuY2VsKGV2ZW50LCBpbmZvKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihldmVudCwgaW5mbykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJlbW92ZVBvaW50ZXJFbmRMaXN0ZW5lcigpO1xuICAgICAgICBpZiAoaXNQcmVzc2luZy5jdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpc1ByZXNzaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzLmN1cnJlbnQgPSBwb3Btb3Rpb24ucGlwZShhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJ1cFwiLCBvblBvaW50ZXJVcCwgZXZlbnRPcHRpb25zKSwgYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVyY2FuY2VsXCIsIG9uUG9pbnRlckNhbmNlbCwgZXZlbnRPcHRpb25zKSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbnN1cmUgd2UgdHJpZ2dlciBhbmltYXRpb25zIGJlZm9yZSBmaXJpbmcgZXZlbnQgY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoZXhwb3J0cy5BbmltYXRpb25UeXBlLlRhcCwgdHJ1ZSk7XG4gICAgICAgIG9uVGFwU3RhcnQgPT09IG51bGwgfHwgb25UYXBTdGFydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25UYXBTdGFydChldmVudCwgaW5mbyk7XG4gICAgfVxuICAgIHVzZVBvaW50ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBcInBvaW50ZXJkb3duXCIsIGhhc1ByZXNzTGlzdGVuZXJzID8gb25Qb2ludGVyRG93biA6IHVuZGVmaW5lZCwgZXZlbnRPcHRpb25zKTtcbiAgICB1c2VVbm1vdW50RWZmZWN0KHJlbW92ZVBvaW50ZXJFbmRMaXN0ZW5lcik7XG59XG5cbnZhciB3YXJuZWQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiB3YXJuT25jZShjb25kaXRpb24sIG1lc3NhZ2UsIGVsZW1lbnQpIHtcbiAgICBpZiAoY29uZGl0aW9uIHx8IHdhcm5lZC5oYXMobWVzc2FnZSkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgaWYgKGVsZW1lbnQpXG4gICAgICAgIGNvbnNvbGUud2FybihlbGVtZW50KTtcbiAgICB3YXJuZWQuYWRkKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIE1hcCBhbiBJbnRlcnNlY3Rpb25IYW5kbGVyIGNhbGxiYWNrIHRvIGFuIGVsZW1lbnQuIFdlIG9ubHkgZXZlciBtYWtlIG9uZSBoYW5kbGVyIGZvciBvbmVcbiAqIGVsZW1lbnQsIHNvIGV2ZW4gdGhvdWdoIHRoZXNlIGhhbmRsZXJzIG1pZ2h0IGFsbCBiZSB0cmlnZ2VyZWQgYnkgZGlmZmVyZW50XG4gKiBvYnNlcnZlcnMsIHdlIGNhbiBrZWVwIHRoZW0gaW4gdGhlIHNhbWUgbWFwLlxuICovXG52YXIgb2JzZXJ2ZXJDYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBNdWx0aXBsZSBvYnNlcnZlcnMgY2FuIGJlIGNyZWF0ZWQgZm9yIG11bHRpcGxlIGVsZW1lbnQvZG9jdW1lbnQgcm9vdHMuIEVhY2ggd2l0aFxuICogZGlmZmVyZW50IHNldHRpbmdzLiBTbyBoZXJlIHdlIHN0b3JlIGRpY3Rpb25hcmllcyBvZiBvYnNlcnZlcnMgdG8gZWFjaCByb290LFxuICogdXNpbmcgc2VyaWFsaXNlZCBzZXR0aW5ncyAodGhyZXNob2xkL21hcmdpbikgYXMgbG9va3VwIGtleXMuXG4gKi9cbnZhciBvYnNlcnZlcnMgPSBuZXcgV2Vha01hcCgpO1xudmFyIGZpcmVPYnNlcnZlckNhbGxiYWNrID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IG9ic2VydmVyQ2FsbGJhY2tzLmdldChlbnRyeS50YXJnZXQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EoZW50cnkpO1xufTtcbnZhciBmaXJlQWxsT2JzZXJ2ZXJDYWxsYmFja3MgPSBmdW5jdGlvbiAoZW50cmllcykge1xuICAgIGVudHJpZXMuZm9yRWFjaChmaXJlT2JzZXJ2ZXJDYWxsYmFjayk7XG59O1xuZnVuY3Rpb24gaW5pdEludGVyc2VjdGlvbk9ic2VydmVyKF9hKSB7XG4gICAgdmFyIHJvb3QgPSBfYS5yb290LCBvcHRpb25zID0gdHNsaWIuX19yZXN0KF9hLCBbXCJyb290XCJdKTtcbiAgICB2YXIgbG9va3VwUm9vdCA9IHJvb3QgfHwgZG9jdW1lbnQ7XG4gICAgLyoqXG4gICAgICogSWYgd2UgZG9uJ3QgaGF2ZSBhbiBvYnNlcnZlciBsb29rdXAgbWFwIGZvciB0aGlzIHJvb3QsIGNyZWF0ZSBvbmUuXG4gICAgICovXG4gICAgaWYgKCFvYnNlcnZlcnMuaGFzKGxvb2t1cFJvb3QpKSB7XG4gICAgICAgIG9ic2VydmVycy5zZXQobG9va3VwUm9vdCwge30pO1xuICAgIH1cbiAgICB2YXIgcm9vdE9ic2VydmVycyA9IG9ic2VydmVycy5nZXQobG9va3VwUm9vdCk7XG4gICAgdmFyIGtleSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgYW4gb2JzZXJ2ZXIgZm9yIHRoaXMgY29tYmluYXRpb24gb2Ygcm9vdCBhbmQgc2V0dGluZ3MsXG4gICAgICogY3JlYXRlIG9uZS5cbiAgICAgKi9cbiAgICBpZiAoIXJvb3RPYnNlcnZlcnNba2V5XSkge1xuICAgICAgICByb290T2JzZXJ2ZXJzW2tleV0gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzLCB0c2xpYi5fX2Fzc2lnbih7IHJvb3Q6IHJvb3QgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICByZXR1cm4gcm9vdE9ic2VydmVyc1trZXldO1xufVxuZnVuY3Rpb24gb2JzZXJ2ZUludGVyc2VjdGlvbihlbGVtZW50LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciByb290SW50ZXJlc2VjdGlvbk9ic2VydmVyID0gaW5pdEludGVyc2VjdGlvbk9ic2VydmVyKG9wdGlvbnMpO1xuICAgIG9ic2VydmVyQ2FsbGJhY2tzLnNldChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9ic2VydmVyQ2FsbGJhY2tzLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdXNlVmlld3BvcnQoX2EpIHtcbiAgICB2YXIgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQsIHdoaWxlSW5WaWV3ID0gX2Eud2hpbGVJblZpZXcsIG9uVmlld3BvcnRFbnRlciA9IF9hLm9uVmlld3BvcnRFbnRlciwgb25WaWV3cG9ydExlYXZlID0gX2Eub25WaWV3cG9ydExlYXZlLCBfYiA9IF9hLnZpZXdwb3J0LCB2aWV3cG9ydCA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iO1xuICAgIHZhciBzdGF0ZSA9IFJlYWN0LnVzZVJlZih7XG4gICAgICAgIGhhc0VudGVyZWRWaWV3OiBmYWxzZSxcbiAgICAgICAgaXNJblZpZXc6IGZhbHNlLFxuICAgIH0pO1xuICAgIHZhciBzaG91bGRPYnNlcnZlID0gQm9vbGVhbih3aGlsZUluVmlldyB8fCBvblZpZXdwb3J0RW50ZXIgfHwgb25WaWV3cG9ydExlYXZlKTtcbiAgICBpZiAodmlld3BvcnQub25jZSAmJiBzdGF0ZS5jdXJyZW50Lmhhc0VudGVyZWRWaWV3KVxuICAgICAgICBzaG91bGRPYnNlcnZlID0gZmFsc2U7XG4gICAgdmFyIHVzZU9ic2VydmVyID0gdHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gdXNlTWlzc2luZ0ludGVyc2VjdGlvbk9ic2VydmVyXG4gICAgICAgIDogdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG4gICAgdXNlT2JzZXJ2ZXIoc2hvdWxkT2JzZXJ2ZSwgc3RhdGUuY3VycmVudCwgdmlzdWFsRWxlbWVudCwgdmlld3BvcnQpO1xufVxudmFyIHRocmVzaG9sZE5hbWVzID0ge1xuICAgIHNvbWU6IDAsXG4gICAgYWxsOiAxLFxufTtcbmZ1bmN0aW9uIHVzZUludGVyc2VjdGlvbk9ic2VydmVyKHNob3VsZE9ic2VydmUsIHN0YXRlLCB2aXN1YWxFbGVtZW50LCBfYSkge1xuICAgIHZhciByb290ID0gX2Eucm9vdCwgcm9vdE1hcmdpbiA9IF9hLm1hcmdpbiwgX2IgPSBfYS5hbW91bnQsIGFtb3VudCA9IF9iID09PSB2b2lkIDAgPyBcInNvbWVcIiA6IF9iLCBvbmNlID0gX2Eub25jZTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZE9ic2VydmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgcm9vdDogcm9vdCA9PT0gbnVsbCB8fCByb290ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByb290LmN1cnJlbnQsXG4gICAgICAgICAgICByb290TWFyZ2luOiByb290TWFyZ2luLFxuICAgICAgICAgICAgdGhyZXNob2xkOiB0eXBlb2YgYW1vdW50ID09PSBcIm51bWJlclwiID8gYW1vdW50IDogdGhyZXNob2xkTmFtZXNbYW1vdW50XSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgaXNJbnRlcnNlY3RpbmcgPSBlbnRyeS5pc0ludGVyc2VjdGluZztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlcmUncyBiZWVuIG5vIGNoYW5nZSBpbiB0aGUgdmlld3BvcnQgc3RhdGUsIGVhcmx5IHJldHVybi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHN0YXRlLmlzSW5WaWV3ID09PSBpc0ludGVyc2VjdGluZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzdGF0ZS5pc0luVmlldyA9IGlzSW50ZXJzZWN0aW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBIYW5kbGUgaGFzRW50ZXJlZFZpZXcuIElmIHRoaXMgaXMgb25seSBtZWFudCB0byBydW4gb25jZSwgYW5kXG4gICAgICAgICAgICAgKiBlbGVtZW50IGlzbid0IHZpc2libGUsIGVhcmx5IHJldHVybi4gT3RoZXJ3aXNlIHNldCBoYXNFbnRlcmVkVmlldyB0byB0cnVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAob25jZSAmJiAhaXNJbnRlcnNlY3RpbmcgJiYgc3RhdGUuaGFzRW50ZXJlZFZpZXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgIHN0YXRlLmhhc0VudGVyZWRWaWV3ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoZXhwb3J0cy5BbmltYXRpb25UeXBlLkluVmlldywgaXNJbnRlcnNlY3RpbmcpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2UgdGhlIGxhdGVzdCBjb21taXR0ZWQgcHJvcHMgcmF0aGVyIHRoYW4gdGhlIG9uZXMgaW4gc2NvcGVcbiAgICAgICAgICAgICAqIHdoZW4gdGhpcyBvYnNlcnZlciBpcyBjcmVhdGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGlzSW50ZXJzZWN0aW5nXG4gICAgICAgICAgICAgICAgPyBwcm9wcy5vblZpZXdwb3J0RW50ZXJcbiAgICAgICAgICAgICAgICA6IHByb3BzLm9uVmlld3BvcnRMZWF2ZTtcbiAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlbnRyeSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvYnNlcnZlSW50ZXJzZWN0aW9uKHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSwgb3B0aW9ucywgaW50ZXJzZWN0aW9uQ2FsbGJhY2spO1xuICAgIH0sIFtzaG91bGRPYnNlcnZlLCByb290LCByb290TWFyZ2luLCBhbW91bnRdKTtcbn1cbi8qKlxuICogSWYgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaXMgbWlzc2luZywgd2UgYWN0aXZhdGUgaW5WaWV3IGFuZCBmaXJlIG9uVmlld3BvcnRFbnRlclxuICogb24gbW91bnQuIFRoaXMgd2F5LCB0aGUgcGFnZSB3aWxsIGJlIGluIHRoZSBzdGF0ZSB0aGUgYXV0aG9yIGV4cGVjdHMgdXNlcnNcbiAqIHRvIHNlZSBpdCBpbiBmb3IgZXZlcnlvbmUuXG4gKi9cbmZ1bmN0aW9uIHVzZU1pc3NpbmdJbnRlcnNlY3Rpb25PYnNlcnZlcihzaG91bGRPYnNlcnZlLCBzdGF0ZSwgdmlzdWFsRWxlbWVudCwgX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5mYWxsYmFjaywgZmFsbGJhY2sgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkT2JzZXJ2ZSB8fCAhZmFsbGJhY2spXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChlbnYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICB3YXJuT25jZShmYWxzZSwgXCJJbnRlcnNlY3Rpb25PYnNlcnZlciBub3QgYXZhaWxhYmxlIG9uIHRoaXMgZGV2aWNlLiB3aGlsZUluVmlldyBhbmltYXRpb25zIHdpbGwgdHJpZ2dlciBvbiBtb3VudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmUgdGhpcyBpbiBhbiByQUYgYmVjYXVzZSwgYXQgdGhpcyBwb2ludCwgdGhlIGFuaW1hdGlvbiBzdGF0ZVxuICAgICAgICAgKiB3b24ndCBoYXZlIGZsdXNoZWQgZm9yIHRoZSBmaXJzdCB0aW1lIGFuZCB0aGVyZSdzIGNlcnRhaW4gbG9naWMgaW5cbiAgICAgICAgICogdGhlcmUgdGhhdCBiZWhhdmVzIGRpZmZlcmVudGx5IG9uIHRoZSBpbml0aWFsIGFuaW1hdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBob29rIHNob3VsZCBiZSBxdWl0ZSByYXJlbHkgY2FsbGVkIHNvIHNldHRpbmcgdGhpcyBpbiBhbiByQUZcbiAgICAgICAgICogaXMgcHJlZmVycmVkIHRvIGNoYW5naW5nIHRoZSBiZWhhdmlvdXIgb2YgdGhlIGFuaW1hdGlvbiBzdGF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBzdGF0ZS5oYXNFbnRlcmVkVmlldyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb25WaWV3cG9ydEVudGVyID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpLm9uVmlld3BvcnRFbnRlcjtcbiAgICAgICAgICAgIG9uVmlld3BvcnRFbnRlciA9PT0gbnVsbCB8fCBvblZpZXdwb3J0RW50ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVmlld3BvcnRFbnRlcihudWxsKTtcbiAgICAgICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoZXhwb3J0cy5BbmltYXRpb25UeXBlLkluVmlldywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0sIFtzaG91bGRPYnNlcnZlXSk7XG59XG5cbnZhciBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCA9IGZ1bmN0aW9uIChob29rKSB7IHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBob29rKHByb3BzKTtcbiAgICByZXR1cm4gbnVsbDtcbn07IH07XG5cbnZhciBnZXN0dXJlQW5pbWF0aW9ucyA9IHtcbiAgICBpblZpZXc6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZVZpZXdwb3J0KSxcbiAgICB0YXA6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZVRhcEdlc3R1cmUpLFxuICAgIGZvY3VzOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VGb2N1c0dlc3R1cmUpLFxuICAgIGhvdmVyOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VIb3Zlckdlc3R1cmUpLFxufTtcblxudmFyIGNvdW50ZXIgPSAwO1xudmFyIGluY3JlbWVudElkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY291bnRlcisrOyB9O1xudmFyIHVzZUlkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdXNlQ29uc3RhbnQoaW5jcmVtZW50SWQpOyB9O1xuLyoqXG4gKiBJZGVhbGx5IHdlJ2QgdXNlIHRoZSBmb2xsb3dpbmcgY29kZSB0byBzdXBwb3J0IFJlYWN0IDE4IG9wdGlvbmFsbHkuXG4gKiBCdXQgdGhpcyBmYWlybHkgZmFpbHMgaW4gV2VicGFjayAob3RoZXJ3aXNlIHRyZWVzaGFraW5nIHdvdWxkbid0IHdvcmsgYXQgYWxsKS5cbiAqIE5lZWQgdG8gY29tZSB1cCB3aXRoIGEgZGlmZmVyZW50IHdheSBvZiBmaWd1cmluZyB0aGlzIG91dC5cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IHVzZUlkID0gKFJlYWN0IGFzIGFueSkudXNlSWRcbi8vICAgICA/IChSZWFjdCBhcyBhbnkpLnVzZUlkXG4vLyAgICAgOiAoKSA9PiB1c2VDb25zdGFudChpbmNyZW1lbnRJZClcblxuLyoqXG4gKiBXaGVuIGEgY29tcG9uZW50IGlzIHRoZSBjaGlsZCBvZiBgQW5pbWF0ZVByZXNlbmNlYCwgaXQgY2FuIHVzZSBgdXNlUHJlc2VuY2VgXG4gKiB0byBhY2Nlc3MgaW5mb3JtYXRpb24gYWJvdXQgd2hldGhlciBpdCdzIHN0aWxsIHByZXNlbnQgaW4gdGhlIFJlYWN0IHRyZWUuXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyB1c2VQcmVzZW5jZSB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbaXNQcmVzZW50LCBzYWZlVG9SZW1vdmVdID0gdXNlUHJlc2VuY2UoKVxuICpcbiAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgICAhaXNQcmVzZW50ICYmIHNldFRpbWVvdXQoc2FmZVRvUmVtb3ZlLCAxMDAwKVxuICogICB9LCBbaXNQcmVzZW50XSlcbiAqXG4gKiAgIHJldHVybiA8ZGl2IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJZiBgaXNQcmVzZW50YCBpcyBgZmFsc2VgLCBpdCBtZWFucyB0aGF0IGEgY29tcG9uZW50IGhhcyBiZWVuIHJlbW92ZWQgdGhlIHRyZWUsIGJ1dFxuICogYEFuaW1hdGVQcmVzZW5jZWAgd29uJ3QgcmVhbGx5IHJlbW92ZSBpdCB1bnRpbCBgc2FmZVRvUmVtb3ZlYCBoYXMgYmVlbiBjYWxsZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VQcmVzZW5jZSgpIHtcbiAgICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICBpZiAoY29udGV4dCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFt0cnVlLCBudWxsXTtcbiAgICB2YXIgaXNQcmVzZW50ID0gY29udGV4dC5pc1ByZXNlbnQsIG9uRXhpdENvbXBsZXRlID0gY29udGV4dC5vbkV4aXRDb21wbGV0ZSwgcmVnaXN0ZXIgPSBjb250ZXh0LnJlZ2lzdGVyO1xuICAgIC8vIEl0J3Mgc2FmZSB0byBjYWxsIHRoZSBmb2xsb3dpbmcgaG9va3MgY29uZGl0aW9uYWxseSAoYWZ0ZXIgYW4gZWFybHkgcmV0dXJuKSBiZWNhdXNlIHRoZSBjb250ZXh0IHdpbGwgYWx3YXlzXG4gICAgLy8gZWl0aGVyIGJlIG51bGwgb3Igbm9uLW51bGwgZm9yIHRoZSBsaWZlc3BhbiBvZiB0aGUgY29tcG9uZW50LlxuICAgIC8vIFJlcGxhY2Ugd2l0aCB1c2VJZCB3aGVuIHJlbGVhc2VkIGluIFJlYWN0XG4gICAgdmFyIGlkID0gdXNlSWQoKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVnaXN0ZXIoaWQpOyB9LCBbXSk7XG4gICAgdmFyIHNhZmVUb1JlbW92ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uRXhpdENvbXBsZXRlID09PSBudWxsIHx8IG9uRXhpdENvbXBsZXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkV4aXRDb21wbGV0ZShpZCk7IH07XG4gICAgcmV0dXJuICFpc1ByZXNlbnQgJiYgb25FeGl0Q29tcGxldGUgPyBbZmFsc2UsIHNhZmVUb1JlbW92ZV0gOiBbdHJ1ZV07XG59XG4vKipcbiAqIFNpbWlsYXIgdG8gYHVzZVByZXNlbmNlYCwgZXhjZXB0IGB1c2VJc1ByZXNlbnRgIHNpbXBseSByZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBjb21wb25lbnQgaXMgcHJlc2VudC5cbiAqIFRoZXJlIGlzIG5vIGBzYWZlVG9SZW1vdmVgIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgdXNlSXNQcmVzZW50IH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IGlzUHJlc2VudCA9IHVzZUlzUHJlc2VudCgpXG4gKlxuICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICogICAgICFpc1ByZXNlbnQgJiYgY29uc29sZS5sb2coXCJJJ3ZlIGJlZW4gcmVtb3ZlZCFcIilcbiAqICAgfSwgW2lzUHJlc2VudF0pXG4gKlxuICogICByZXR1cm4gPGRpdiAvPlxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VJc1ByZXNlbnQoKSB7XG4gICAgcmV0dXJuIGlzUHJlc2VudChSZWFjdC51c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCkpO1xufVxuZnVuY3Rpb24gaXNQcmVzZW50KGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dCA9PT0gbnVsbCA/IHRydWUgOiBjb250ZXh0LmlzUHJlc2VudDtcbn1cblxuZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcmV2KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBwcmV2TGVuZ3RoID0gcHJldi5sZW5ndGg7XG4gICAgaWYgKHByZXZMZW5ndGggIT09IG5leHQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmV2TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHByZXZbaV0gIT09IG5leHRbaV0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIGEgbnVtZXJpY2FsIHN0cmluZywgaWUgYSBzdHJpbmcgdGhhdCBpcyBwdXJlbHkgYSBudW1iZXIgZWcgXCIxMDBcIiBvciBcIi0xMDAuMVwiXG4gKi9cbnZhciBpc051bWVyaWNhbFN0cmluZyA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAvXlxcLT9cXGQqXFwuP1xcZCskLy50ZXN0KHYpOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB2YWx1ZSBpcyBhIHplcm8gdmFsdWUgc3RyaW5nIGxpa2UgXCIwcHhcIiBvciBcIjAlXCJcbiAqL1xudmFyIGlzWmVyb1ZhbHVlU3RyaW5nID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIC9eMFteLlxcc10rJC8udGVzdCh2KTsgfTtcblxuLyoqXG4gKiBUZXN0cyBhIHByb3ZpZGVkIHZhbHVlIGFnYWluc3QgYSBWYWx1ZVR5cGVcbiAqL1xudmFyIHRlc3RWYWx1ZVR5cGUgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHR5cGUudGVzdCh2KTsgfTsgfTtcblxuLyoqXG4gKiBWYWx1ZVR5cGUgZm9yIFwiYXV0b1wiXG4gKi9cbnZhciBhdXRvID0ge1xuICAgIHRlc3Q6IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2ID09PSBcImF1dG9cIjsgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHY7IH0sXG59O1xuXG4vKipcbiAqIEEgbGlzdCBvZiB2YWx1ZSB0eXBlcyBjb21tb25seSB1c2VkIGZvciBkaW1lbnNpb25zXG4gKi9cbnZhciBkaW1lbnNpb25WYWx1ZVR5cGVzID0gW3N0eWxlVmFsdWVUeXBlcy5udW1iZXIsIHN0eWxlVmFsdWVUeXBlcy5weCwgc3R5bGVWYWx1ZVR5cGVzLnBlcmNlbnQsIHN0eWxlVmFsdWVUeXBlcy5kZWdyZWVzLCBzdHlsZVZhbHVlVHlwZXMudncsIHN0eWxlVmFsdWVUeXBlcy52aCwgYXV0b107XG4vKipcbiAqIFRlc3RzIGEgZGltZW5zaW9uYWwgdmFsdWUgYWdhaW5zdCB0aGUgbGlzdCBvZiBkaW1lbnNpb24gVmFsdWVUeXBlc1xuICovXG52YXIgZmluZERpbWVuc2lvblZhbHVlVHlwZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIGRpbWVuc2lvblZhbHVlVHlwZXMuZmluZCh0ZXN0VmFsdWVUeXBlKHYpKTtcbn07XG5cbi8qKlxuICogQSBsaXN0IG9mIGFsbCBWYWx1ZVR5cGVzXG4gKi9cbnZhciB2YWx1ZVR5cGVzID0gdHNsaWIuX19zcHJlYWRBcnJheSh0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCB0c2xpYi5fX3JlYWQoZGltZW5zaW9uVmFsdWVUeXBlcyksIGZhbHNlKSwgW3N0eWxlVmFsdWVUeXBlcy5jb2xvciwgc3R5bGVWYWx1ZVR5cGVzLmNvbXBsZXhdLCBmYWxzZSk7XG4vKipcbiAqIFRlc3RzIGEgdmFsdWUgYWdhaW5zdCB0aGUgbGlzdCBvZiBWYWx1ZVR5cGVzXG4gKi9cbnZhciBmaW5kVmFsdWVUeXBlID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZhbHVlVHlwZXMuZmluZCh0ZXN0VmFsdWVUeXBlKHYpKTsgfTtcblxuLyoqXG4gKiBTZXQgVmlzdWFsRWxlbWVudCdzIE1vdGlvblZhbHVlLCBjcmVhdGluZyBhIG5ldyBNb3Rpb25WYWx1ZSBmb3IgaXQgaWZcbiAqIGl0IGRvZXNuJ3QgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldE1vdGlvblZhbHVlKHZpc3VhbEVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAodmlzdWFsRWxlbWVudC5oYXNWYWx1ZShrZXkpKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KS5zZXQodmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKHZhbHVlKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VGFyZ2V0KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pIHtcbiAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICB2YXIgX2EgPSByZXNvbHZlZCA/IHZpc3VhbEVsZW1lbnQubWFrZVRhcmdldEFuaW1hdGFibGUocmVzb2x2ZWQsIGZhbHNlKSA6IHt9LCBfYiA9IF9hLnRyYW5zaXRpb25FbmQsIHRyYW5zaXRpb25FbmQgPSBfYiA9PT0gdm9pZCAwID8ge30gOiBfYjsgX2EudHJhbnNpdGlvbjsgdmFyIHRhcmdldCA9IHRzbGliLl9fcmVzdChfYSwgW1widHJhbnNpdGlvbkVuZFwiLCBcInRyYW5zaXRpb25cIl0pO1xuICAgIHRhcmdldCA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCB0YXJnZXQpLCB0cmFuc2l0aW9uRW5kKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXModGFyZ2V0W2tleV0pO1xuICAgICAgICBzZXRNb3Rpb25WYWx1ZSh2aXN1YWxFbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRWYXJpYW50cyh2aXN1YWxFbGVtZW50LCB2YXJpYW50TGFiZWxzKSB7XG4gICAgdmFyIHJldmVyc2VkTGFiZWxzID0gdHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKHZhcmlhbnRMYWJlbHMpLCBmYWxzZSkucmV2ZXJzZSgpO1xuICAgIHJldmVyc2VkTGFiZWxzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciB2YXJpYW50ID0gdmlzdWFsRWxlbWVudC5nZXRWYXJpYW50KGtleSk7XG4gICAgICAgIHZhcmlhbnQgJiYgc2V0VGFyZ2V0KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQpO1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBzZXRWYXJpYW50cyhjaGlsZCwgdmFyaWFudExhYmVscyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVzKHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgICAgICByZXR1cm4gc2V0VmFyaWFudHModmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBzZXRWYXJpYW50cyh2aXN1YWxFbGVtZW50LCBbZGVmaW5pdGlvbl0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0VGFyZ2V0KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgdmFyIF9kO1xuICAgIHZhciBuZXdWYWx1ZUtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAhdmlzdWFsRWxlbWVudC5oYXNWYWx1ZShrZXkpOyB9KTtcbiAgICB2YXIgbnVtTmV3VmFsdWVzID0gbmV3VmFsdWVLZXlzLmxlbmd0aDtcbiAgICBpZiAoIW51bU5ld1ZhbHVlcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtTmV3VmFsdWVzOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IG5ld1ZhbHVlS2V5c1tpXTtcbiAgICAgICAgdmFyIHRhcmdldFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzIGEgc2VyaWVzIG9mIGtleWZyYW1lcywgd2UgY2FuIHVzZSB0aGUgZmlyc3QgdmFsdWVcbiAgICAgICAgICogaW4gdGhlIGFycmF5LiBJZiB0aGlzIGZpcnN0IHZhbHVlIGlzIG51bGwsIHdlJ2xsIHN0aWxsIG5lZWQgdG8gcmVhZCBmcm9tIHRoZSBET00uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGFyZ2V0VmFsdWVbMF07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSB0YXJnZXQgaXNuJ3Qga2V5ZnJhbWVzLCBvciB0aGUgZmlyc3Qga2V5ZnJhbWUgd2FzIG51bGwsIHdlIG5lZWQgdG9cbiAgICAgICAgICogZmlyc3QgY2hlY2sgaWYgYW4gb3JpZ2luIHZhbHVlIHdhcyBleHBsaWNpdGx5IGRlZmluZWQgaW4gdGhlIHRyYW5zaXRpb24gYXMgXCJmcm9tXCIsXG4gICAgICAgICAqIGlmIG5vdCByZWFkIHRoZSB2YWx1ZSBmcm9tIHRoZSBET00uIEFzIGFuIGFic29sdXRlIGZhbGxiYWNrLCB0YWtlIHRoZSBkZWZpbmVkIHRhcmdldCB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWUgPSAoX2IgPSAoX2EgPSBvcmlnaW5ba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmlzdWFsRWxlbWVudC5yZWFkVmFsdWUoa2V5KSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGFyZ2V0W2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHZhbHVlIGlzIHN0aWxsIHVuZGVmaW5lZCBvciBudWxsLCBpZ25vcmUgaXQuIFByZWZlcmFibHkgdGhpcyB3b3VsZCB0aHJvdyxcbiAgICAgICAgICogYnV0IHRoaXMgd2FzIGNhdXNpbmcgaXNzdWVzIGluIEZyYW1lci5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIChpc051bWVyaWNhbFN0cmluZyh2YWx1ZSkgfHwgaXNaZXJvVmFsdWVTdHJpbmcodmFsdWUpKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIG51bWJlciByZWFkIGFzIGEgc3RyaW5nLCBpZSBcIjBcIiBvciBcIjIwMFwiLCBjb252ZXJ0IGl0IHRvIGEgbnVtYmVyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmaW5kVmFsdWVUeXBlKHZhbHVlKSAmJiBzdHlsZVZhbHVlVHlwZXMuY29tcGxleC50ZXN0KHRhcmdldFZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBnZXRBbmltYXRhYmxlTm9uZShrZXksIHRhcmdldFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2aXN1YWxFbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUodmFsdWUpKTtcbiAgICAgICAgKF9jID0gKF9kID0gb3JpZ2luKVtrZXldKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoX2Rba2V5XSA9IHZhbHVlKTtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRCYXNlVGFyZ2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE9yaWdpbkZyb21UcmFuc2l0aW9uKGtleSwgdHJhbnNpdGlvbikge1xuICAgIGlmICghdHJhbnNpdGlvbilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB2YWx1ZVRyYW5zaXRpb24gPSB0cmFuc2l0aW9uW2tleV0gfHwgdHJhbnNpdGlvbltcImRlZmF1bHRcIl0gfHwgdHJhbnNpdGlvbjtcbiAgICByZXR1cm4gdmFsdWVUcmFuc2l0aW9uLmZyb207XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odGFyZ2V0LCB0cmFuc2l0aW9uLCB2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgb3JpZ2luID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICBvcmlnaW5ba2V5XSA9XG4gICAgICAgICAgICAoX2EgPSBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbihrZXksIHRyYW5zaXRpb24pKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2IgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIG9yaWdpbjtcbn1cblxuZnVuY3Rpb24gYW5pbWF0ZVZpc3VhbEVsZW1lbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmlzdWFsRWxlbWVudC5ub3RpZnlBbmltYXRpb25TdGFydChkZWZpbml0aW9uKTtcbiAgICB2YXIgYW5pbWF0aW9uO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIHZhciBhbmltYXRpb25zID0gZGVmaW5pdGlvbi5tYXAoZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRlVmFyaWFudCh2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFuaW1hdGlvbiA9IFByb21pc2UuYWxsKGFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBhbmltYXRpb24gPSBhbmltYXRlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciByZXNvbHZlZERlZmluaXRpb24gPSB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIG9wdGlvbnMuY3VzdG9tKVxuICAgICAgICAgICAgOiBkZWZpbml0aW9uO1xuICAgICAgICBhbmltYXRpb24gPSBhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIHJlc29sdmVkRGVmaW5pdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb24udGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2aXN1YWxFbGVtZW50Lm5vdGlmeUFuaW1hdGlvbkNvbXBsZXRlKGRlZmluaXRpb24pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciByZXNvbHZlZCA9IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIG9wdGlvbnMuY3VzdG9tKTtcbiAgICB2YXIgX2IgPSAocmVzb2x2ZWQgfHwge30pLnRyYW5zaXRpb24sIHRyYW5zaXRpb24gPSBfYiA9PT0gdm9pZCAwID8gdmlzdWFsRWxlbWVudC5nZXREZWZhdWx0VHJhbnNpdGlvbigpIHx8IHt9IDogX2I7XG4gICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbk92ZXJyaWRlKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSBvcHRpb25zLnRyYW5zaXRpb25PdmVycmlkZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZSBhIHZhcmlhbnQsIGNyZWF0ZSBhIGNhbGxiYWNrIHRoYXQgcnVucyBpdCBhcyBhbiBhbmltYXRpb24uXG4gICAgICogT3RoZXJ3aXNlLCB3ZSByZXNvbHZlIGEgUHJvbWlzZSBpbW1lZGlhdGVseSBmb3IgYSBjb21wb3NhYmxlIG5vLW9wLlxuICAgICAqL1xuICAgIHZhciBnZXRBbmltYXRpb24gPSByZXNvbHZlZFxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFuaW1hdGVUYXJnZXQodmlzdWFsRWxlbWVudCwgcmVzb2x2ZWQsIG9wdGlvbnMpOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7IH07XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZSBjaGlsZHJlbiwgY3JlYXRlIGEgY2FsbGJhY2sgdGhhdCBydW5zIGFsbCB0aGVpciBhbmltYXRpb25zLlxuICAgICAqIE90aGVyd2lzZSwgd2UgcmVzb2x2ZSBhIFByb21pc2UgaW1tZWRpYXRlbHkgZm9yIGEgY29tcG9zYWJsZSBuby1vcC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0Q2hpbGRBbmltYXRpb25zID0gKChfYSA9IHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2l6ZSlcbiAgICAgICAgPyBmdW5jdGlvbiAoZm9yd2FyZERlbGF5KSB7XG4gICAgICAgICAgICBpZiAoZm9yd2FyZERlbGF5ID09PSB2b2lkIDApIHsgZm9yd2FyZERlbGF5ID0gMDsgfVxuICAgICAgICAgICAgdmFyIF9hID0gdHJhbnNpdGlvbi5kZWxheUNoaWxkcmVuLCBkZWxheUNoaWxkcmVuID0gX2EgPT09IHZvaWQgMCA/IDAgOiBfYSwgc3RhZ2dlckNoaWxkcmVuID0gdHJhbnNpdGlvbi5zdGFnZ2VyQ2hpbGRyZW4sIHN0YWdnZXJEaXJlY3Rpb24gPSB0cmFuc2l0aW9uLnN0YWdnZXJEaXJlY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZUNoaWxkcmVuKHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIGRlbGF5Q2hpbGRyZW4gKyBmb3J3YXJkRGVsYXksIHN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsgfTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdHJhbnNpdGlvbiBleHBsaWNpdGx5IGRlZmluZXMgYSBcIndoZW5cIiBvcHRpb24sIHdlIG5lZWQgdG8gcmVzb2x2ZSBlaXRoZXJcbiAgICAgKiB0aGlzIGFuaW1hdGlvbiBvciBhbGwgY2hpbGRyZW4gYW5pbWF0aW9ucyBiZWZvcmUgcGxheWluZyB0aGUgb3RoZXIuXG4gICAgICovXG4gICAgdmFyIHdoZW4gPSB0cmFuc2l0aW9uLndoZW47XG4gICAgaWYgKHdoZW4pIHtcbiAgICAgICAgdmFyIF9jID0gdHNsaWIuX19yZWFkKHdoZW4gPT09IFwiYmVmb3JlQ2hpbGRyZW5cIlxuICAgICAgICAgICAgPyBbZ2V0QW5pbWF0aW9uLCBnZXRDaGlsZEFuaW1hdGlvbnNdXG4gICAgICAgICAgICA6IFtnZXRDaGlsZEFuaW1hdGlvbnMsIGdldEFuaW1hdGlvbl0sIDIpLCBmaXJzdCA9IF9jWzBdLCBsYXN0ID0gX2NbMV07XG4gICAgICAgIHJldHVybiBmaXJzdCgpLnRoZW4obGFzdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2dldEFuaW1hdGlvbigpLCBnZXRDaGlsZEFuaW1hdGlvbnMob3B0aW9ucy5kZWxheSldKTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIF9hKSB7XG4gICAgdmFyIF9iO1xuICAgIHZhciBfYyA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfZCA9IF9jLmRlbGF5LCBkZWxheSA9IF9kID09PSB2b2lkIDAgPyAwIDogX2QsIHRyYW5zaXRpb25PdmVycmlkZSA9IF9jLnRyYW5zaXRpb25PdmVycmlkZSwgdHlwZSA9IF9jLnR5cGU7XG4gICAgdmFyIF9lID0gdmlzdWFsRWxlbWVudC5tYWtlVGFyZ2V0QW5pbWF0YWJsZShkZWZpbml0aW9uKSwgX2YgPSBfZS50cmFuc2l0aW9uLCB0cmFuc2l0aW9uID0gX2YgPT09IHZvaWQgMCA/IHZpc3VhbEVsZW1lbnQuZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSA6IF9mLCB0cmFuc2l0aW9uRW5kID0gX2UudHJhbnNpdGlvbkVuZCwgdGFyZ2V0ID0gdHNsaWIuX19yZXN0KF9lLCBbXCJ0cmFuc2l0aW9uXCIsIFwidHJhbnNpdGlvbkVuZFwiXSk7XG4gICAgaWYgKHRyYW5zaXRpb25PdmVycmlkZSlcbiAgICAgICAgdHJhbnNpdGlvbiA9IHRyYW5zaXRpb25PdmVycmlkZTtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IFtdO1xuICAgIHZhciBhbmltYXRpb25UeXBlU3RhdGUgPSB0eXBlICYmICgoX2IgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0U3RhdGUoKVt0eXBlXSk7XG4gICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIHZhciB2YWx1ZVRhcmdldCA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoIXZhbHVlIHx8XG4gICAgICAgICAgICB2YWx1ZVRhcmdldCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAoYW5pbWF0aW9uVHlwZVN0YXRlICYmXG4gICAgICAgICAgICAgICAgc2hvdWxkQmxvY2tBbmltYXRpb24oYW5pbWF0aW9uVHlwZVN0YXRlLCBrZXkpKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlVHJhbnNpdGlvbiA9IHRzbGliLl9fYXNzaWduKHsgZGVsYXk6IGRlbGF5IH0sIHRyYW5zaXRpb24pO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFrZSBhbmltYXRpb24gaW5zdGFudCBpZiB0aGlzIGlzIGEgdHJhbnNmb3JtIHByb3AgYW5kIHdlIHNob3VsZCByZWR1Y2UgbW90aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQuc2hvdWxkUmVkdWNlTW90aW9uICYmIGlzVHJhbnNmb3JtUHJvcChrZXkpKSB7XG4gICAgICAgICAgICB2YWx1ZVRyYW5zaXRpb24gPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgdmFsdWVUcmFuc2l0aW9uKSwgeyB0eXBlOiBmYWxzZSwgZGVsYXk6IDAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHN0YXJ0QW5pbWF0aW9uKGtleSwgdmFsdWUsIHZhbHVlVGFyZ2V0LCB2YWx1ZVRyYW5zaXRpb24pO1xuICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGFuaW1hdGlvbnMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB0cmFuc2l0aW9uRW5kICYmIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCB0cmFuc2l0aW9uRW5kKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVDaGlsZHJlbih2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBkZWxheUNoaWxkcmVuLCBzdGFnZ2VyQ2hpbGRyZW4sIHN0YWdnZXJEaXJlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAoZGVsYXlDaGlsZHJlbiA9PT0gdm9pZCAwKSB7IGRlbGF5Q2hpbGRyZW4gPSAwOyB9XG4gICAgaWYgKHN0YWdnZXJDaGlsZHJlbiA9PT0gdm9pZCAwKSB7IHN0YWdnZXJDaGlsZHJlbiA9IDA7IH1cbiAgICBpZiAoc3RhZ2dlckRpcmVjdGlvbiA9PT0gdm9pZCAwKSB7IHN0YWdnZXJEaXJlY3Rpb24gPSAxOyB9XG4gICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcbiAgICB2YXIgbWF4U3RhZ2dlckR1cmF0aW9uID0gKHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuLnNpemUgLSAxKSAqIHN0YWdnZXJDaGlsZHJlbjtcbiAgICB2YXIgZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24gPSBzdGFnZ2VyRGlyZWN0aW9uID09PSAxXG4gICAgICAgID8gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGlmIChpID09PSB2b2lkIDApIHsgaSA9IDA7IH1cbiAgICAgICAgICAgIHJldHVybiBpICogc3RhZ2dlckNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIDogZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGlmIChpID09PSB2b2lkIDApIHsgaSA9IDA7IH1cbiAgICAgICAgICAgIHJldHVybiBtYXhTdGFnZ2VyRHVyYXRpb24gLSBpICogc3RhZ2dlckNoaWxkcmVuO1xuICAgICAgICB9O1xuICAgIEFycmF5LmZyb20odmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pXG4gICAgICAgIC5zb3J0KHNvcnRCeVRyZWVPcmRlcilcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRlVmFyaWFudChjaGlsZCwgdmFyaWFudCwgdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGRlbGF5OiBkZWxheUNoaWxkcmVuICsgZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24oaSkgfSkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hpbGQubm90aWZ5QW5pbWF0aW9uQ29tcGxldGUodmFyaWFudCk7IH0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoYW5pbWF0aW9ucyk7XG59XG5mdW5jdGlvbiBzdG9wQW5pbWF0aW9uKHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZShmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlLnN0b3AoKTsgfSk7XG59XG5mdW5jdGlvbiBzb3J0QnlUcmVlT3JkZXIoYSwgYikge1xuICAgIHJldHVybiBhLnNvcnROb2RlUG9zaXRpb24oYik7XG59XG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIHdlIHNob3VsZCBibG9jayB0aGlzIGFuaW1hdGlvbi4gUHJldmlvdXNseSwgd2UgYWNoaWV2ZWQgdGhpc1xuICoganVzdCBieSBjaGVja2luZyB3aGV0aGVyIHRoZSBrZXkgd2FzIGxpc3RlZCBpbiBwcm90ZWN0ZWRLZXlzLCBidXQgdGhpc1xuICogcG9zZWQgcHJvYmxlbXMgaWYgYW4gYW5pbWF0aW9uIHdhcyB0cmlnZ2VyZWQgYnkgYWZ0ZXJDaGlsZHJlbiBhbmQgcHJvdGVjdGVkS2V5c1xuICogaGFkIGJlZW4gc2V0IHRvIHRydWUgaW4gdGhlIG1lYW50aW1lLlxuICovXG5mdW5jdGlvbiBzaG91bGRCbG9ja0FuaW1hdGlvbihfYSwga2V5KSB7XG4gICAgdmFyIHByb3RlY3RlZEtleXMgPSBfYS5wcm90ZWN0ZWRLZXlzLCBuZWVkc0FuaW1hdGluZyA9IF9hLm5lZWRzQW5pbWF0aW5nO1xuICAgIHZhciBzaG91bGRCbG9jayA9IHByb3RlY3RlZEtleXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBuZWVkc0FuaW1hdGluZ1trZXldICE9PSB0cnVlO1xuICAgIG5lZWRzQW5pbWF0aW5nW2tleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gc2hvdWxkQmxvY2s7XG59XG5cbnZhciB2YXJpYW50UHJpb3JpdHlPcmRlciA9IFtcbiAgICBleHBvcnRzLkFuaW1hdGlvblR5cGUuQW5pbWF0ZSxcbiAgICBleHBvcnRzLkFuaW1hdGlvblR5cGUuSW5WaWV3LFxuICAgIGV4cG9ydHMuQW5pbWF0aW9uVHlwZS5Gb2N1cyxcbiAgICBleHBvcnRzLkFuaW1hdGlvblR5cGUuSG92ZXIsXG4gICAgZXhwb3J0cy5BbmltYXRpb25UeXBlLlRhcCxcbiAgICBleHBvcnRzLkFuaW1hdGlvblR5cGUuRHJhZyxcbiAgICBleHBvcnRzLkFuaW1hdGlvblR5cGUuRXhpdCxcbl07XG52YXIgcmV2ZXJzZVByaW9yaXR5T3JkZXIgPSB0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCB0c2xpYi5fX3JlYWQodmFyaWFudFByaW9yaXR5T3JkZXIpLCBmYWxzZSkucmV2ZXJzZSgpO1xudmFyIG51bUFuaW1hdGlvblR5cGVzID0gdmFyaWFudFByaW9yaXR5T3JkZXIubGVuZ3RoO1xuZnVuY3Rpb24gYW5pbWF0ZUxpc3QodmlzdWFsRWxlbWVudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYW5pbWF0aW9ucykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gX2EuYW5pbWF0aW9uLCBvcHRpb25zID0gX2Eub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRlVmlzdWFsRWxlbWVudCh2aXN1YWxFbGVtZW50LCBhbmltYXRpb24sIG9wdGlvbnMpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvblN0YXRlKHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgYW5pbWF0ZSA9IGFuaW1hdGVMaXN0KHZpc3VhbEVsZW1lbnQpO1xuICAgIHZhciBzdGF0ZSA9IGNyZWF0ZVN0YXRlKCk7XG4gICAgdmFyIGFsbEFuaW1hdGVkS2V5cyA9IHt9O1xuICAgIHZhciBpc0luaXRpYWxSZW5kZXIgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSB1c2VkIHRvIHJlZHVjZSB0aGUgYW5pbWF0aW9uIGRlZmluaXRpb25zIGZvclxuICAgICAqIGVhY2ggYWN0aXZlIGFuaW1hdGlvbiB0eXBlIGludG8gYW4gb2JqZWN0IG9mIHJlc29sdmVkIHZhbHVlcyBmb3IgaXQuXG4gICAgICovXG4gICAgdmFyIGJ1aWxkUmVzb2x2ZWRUeXBlVmFsdWVzID0gZnVuY3Rpb24gKGFjYywgZGVmaW5pdGlvbikge1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgICAgICByZXNvbHZlZC50cmFuc2l0aW9uOyB2YXIgdHJhbnNpdGlvbkVuZCA9IHJlc29sdmVkLnRyYW5zaXRpb25FbmQsIHRhcmdldCA9IHRzbGliLl9fcmVzdChyZXNvbHZlZCwgW1widHJhbnNpdGlvblwiLCBcInRyYW5zaXRpb25FbmRcIl0pO1xuICAgICAgICAgICAgYWNjID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGFjYyksIHRhcmdldCksIHRyYW5zaXRpb25FbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBpc0FuaW1hdGVkKGtleSkge1xuICAgICAgICByZXR1cm4gYWxsQW5pbWF0ZWRLZXlzW2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBqdXN0IGFsbG93cyB1cyB0byBpbmplY3QgbW9ja2VkIGFuaW1hdGlvbiBmdW5jdGlvbnNcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRBbmltYXRlRnVuY3Rpb24obWFrZUFuaW1hdG9yKSB7XG4gICAgICAgIGFuaW1hdGUgPSBtYWtlQW5pbWF0b3IodmlzdWFsRWxlbWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gd2UgcmVjZWl2ZSBuZXcgcHJvcHMsIHdlIG5lZWQgdG86XG4gICAgICogMS4gQ3JlYXRlIGEgbGlzdCBvZiBwcm90ZWN0ZWQga2V5cyBmb3IgZWFjaCB0eXBlLiBUaGlzIGlzIGEgZGlyZWN0b3J5IG9mXG4gICAgICogICAgdmFsdWUga2V5cyB0aGF0IGFyZSBjdXJyZW50bHkgYmVpbmcgXCJoYW5kbGVkXCIgYnkgdHlwZXMgb2YgYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAgKiAgICBzbyB0aGF0IHdoZW5ldmVyIGFuIGFuaW1hdGlvbiBpcyBwbGF5ZWQgb2YgYSBnaXZlbiB0eXBlLCB0aGVzZSB2YWx1ZXMgYXJlXG4gICAgICogICAgcHJvdGVjdGVkIGZyb20gYmVpbmcgYW5pbWF0ZWQuXG4gICAgICogMi4gRGV0ZXJtaW5lIGlmIGFuIGFuaW1hdGlvbiB0eXBlIG5lZWRzIGFuaW1hdGluZy5cbiAgICAgKiAzLiBEZXRlcm1pbmUgaWYgYW55IHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIGEgdHlwZSBhbmQgZmlndXJlIG91dFxuICAgICAqICAgIHdoYXQgdG8gYW5pbWF0ZSB0aG9zZSB0by5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhbmltYXRlQ2hhbmdlcyhvcHRpb25zLCBjaGFuZ2VkQWN0aXZlVHlwZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB2aXN1YWxFbGVtZW50LmdldFZhcmlhbnRDb250ZXh0KHRydWUpIHx8IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIGFuaW1hdGlvbnMgdGhhdCB3ZSdsbCBidWlsZCBpbnRvIGFzIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAqIHR5cGVzLiBUaGlzIHdpbGwgZ2V0IGV4ZWN1dGVkIGF0IHRoZSBlbmQgb2YgdGhlIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXAgdHJhY2sgb2Ygd2hpY2ggdmFsdWVzIGhhdmUgYmVlbiByZW1vdmVkLiBUaGVuLCBhcyB3ZSBoaXQgbG93ZXIgcHJpb3JpdHlcbiAgICAgICAgICogYW5pbWF0aW9uIHR5cGVzLCB3ZSBjYW4gY2hlY2sgaWYgdGhleSBjb250YWluIHJlbW92ZWQgdmFsdWVzIGFuZCBhbmltYXRlIHRvIHRoYXQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcmVtb3ZlZEtleXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRpY3Rpb25hcnkgb2YgYWxsIGVuY291bnRlcmVkIGtleXMuIFRoaXMgaXMgYW4gb2JqZWN0IHRvIGxldCB1cyBidWlsZCBpbnRvIGFuZFxuICAgICAgICAgKiBjb3B5IGl0IHdpdGhvdXQgaXRlcmF0aW9uLiBFYWNoIHRpbWUgd2UgaGl0IGFuIGFuaW1hdGlvbiB0eXBlIHdlIHNldCBpdHMgcHJvdGVjdGVkXG4gICAgICAgICAqIGtleXMgLSB0aGUga2V5cyBpdHMgbm90IGFsbG93ZWQgdG8gYW5pbWF0ZSAtIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGlzIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBlbmNvdW50ZXJlZEtleXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgdmFyaWFudCBoYXMgYmVlbiByZW1vdmVkIGF0IGEgZ2l2ZW4gaW5kZXgsIGFuZCB0aGlzIGNvbXBvbmVudCBpcyBjb250cm9sbGluZ1xuICAgICAgICAgKiB2YXJpYW50IGFuaW1hdGlvbnMsIHdlIHdhbnQgdG8gZW5zdXJlIGxvd2VyLXByaW9yaXR5IHZhcmlhbnRzIGFyZSBmb3JjZWQgdG8gYW5pbWF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIHZhciByZW1vdmVkVmFyaWFudEluZGV4ID0gSW5maW5pdHk7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gcmV2ZXJzZVByaW9yaXR5T3JkZXJbaV07XG4gICAgICAgICAgICB2YXIgdHlwZVN0YXRlID0gc3RhdGVbdHlwZV07XG4gICAgICAgICAgICB2YXIgcHJvcCA9IChfYSA9IHByb3BzW3R5cGVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb250ZXh0W3R5cGVdO1xuICAgICAgICAgICAgdmFyIHByb3BJc1ZhcmlhbnQgPSBpc1ZhcmlhbnRMYWJlbChwcm9wKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyB0eXBlIGhhcyAqanVzdCogY2hhbmdlZCBpc0FjdGl2ZSBzdGF0dXMsIHNldCBhY3RpdmVEZWx0YVxuICAgICAgICAgICAgICogdG8gdGhhdCBzdGF0dXMuIE90aGVyd2lzZSBzZXQgdG8gbnVsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGFjdGl2ZURlbHRhID0gdHlwZSA9PT0gY2hhbmdlZEFjdGl2ZVR5cGUgPyB0eXBlU3RhdGUuaXNBY3RpdmUgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZURlbHRhID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZW1vdmVkVmFyaWFudEluZGV4ID0gaTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBwcm9wIGlzIGFuIGluaGVyaXRlZCB2YXJpYW50LCByYXRoZXIgdGhhbiBiZWVuIHNldCBkaXJlY3RseSBvbiB0aGVcbiAgICAgICAgICAgICAqIGNvbXBvbmVudCBpdHNlbGYsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFsbG93IHRoZSBwYXJlbnQgdG8gdHJpZ2dlciBhbmltYXRpb25zLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IENhbiBwcm9iYWJseSBjaGFuZ2UgdGhpcyB0byBhICFpc0NvbnRyb2xsaW5nVmFyaWFudHMgY2hlY2tcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGlzSW5oZXJpdGVkID0gcHJvcCA9PT0gY29udGV4dFt0eXBlXSAmJiBwcm9wICE9PSBwcm9wc1t0eXBlXSAmJiBwcm9wSXNWYXJpYW50O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoaXNJbmhlcml0ZWQgJiZcbiAgICAgICAgICAgICAgICBpc0luaXRpYWxSZW5kZXIgJiZcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50Lm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQpIHtcbiAgICAgICAgICAgICAgICBpc0luaGVyaXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgYWxsIGVuY291bnRlcmVkIGtleXMgc28gZmFyIGFzIHRoZSBwcm90ZWN0ZWQga2V5cyBmb3IgdGhpcyB0eXBlLiBUaGlzIHdpbGxcbiAgICAgICAgICAgICAqIGJlIGFueSBrZXkgdGhhdCBoYXMgYmVlbiBhbmltYXRlZCBvciBvdGhlcndpc2UgaGFuZGxlZCBieSBhY3RpdmUsIGhpZ2hlci1wcmlvcnRpeSB0eXBlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHlwZVN0YXRlLnByb3RlY3RlZEtleXMgPSB0c2xpYi5fX2Fzc2lnbih7fSwgZW5jb3VudGVyZWRLZXlzKTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBza2lwIGFuYWx5c2luZyB0aGlzIHByb3AgZWFybHlcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIElmIGl0IGlzbid0IGFjdGl2ZSBhbmQgaGFzbid0ICpqdXN0KiBiZWVuIHNldCBhcyBpbmFjdGl2ZVxuICAgICAgICAgICAgKCF0eXBlU3RhdGUuaXNBY3RpdmUgJiYgYWN0aXZlRGVsdGEgPT09IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZGlkbid0IGFuZCBkb24ndCBoYXZlIGFueSBkZWZpbmVkIHByb3AgZm9yIHRoaXMgYW5pbWF0aW9uIHR5cGVcbiAgICAgICAgICAgICAgICAoIXByb3AgJiYgIXR5cGVTdGF0ZS5wcmV2UHJvcCkgfHxcbiAgICAgICAgICAgICAgICAvLyBPciBpZiB0aGUgcHJvcCBkb2Vzbid0IGRlZmluZSBhbiBhbmltYXRpb25cbiAgICAgICAgICAgICAgICBpc0FuaW1hdGlvbkNvbnRyb2xzKHByb3ApIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIHByb3AgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXMgd2UgZ28gbG9vayB0aHJvdWdoIHRoZSB2YWx1ZXMgZGVmaW5lZCBvbiB0aGlzIHR5cGUsIGlmIHdlIGRldGVjdFxuICAgICAgICAgICAgICogYSBjaGFuZ2VkIHZhbHVlIG9yIGEgdmFsdWUgdGhhdCB3YXMgcmVtb3ZlZCBpbiBhIGhpZ2hlciBwcmlvcml0eSwgd2Ugc2V0XG4gICAgICAgICAgICAgKiB0aGlzIHRvIHRydWUgYW5kIGFkZCB0aGlzIHByb3AgdG8gdGhlIGFuaW1hdGlvbiBsaXN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgdmFyaWFudERpZENoYW5nZSA9IGNoZWNrVmFyaWFudHNEaWRDaGFuZ2UodHlwZVN0YXRlLnByZXZQcm9wLCBwcm9wKTtcbiAgICAgICAgICAgIHZhciBzaG91bGRBbmltYXRlVHlwZSA9IHZhcmlhbnREaWRDaGFuZ2UgfHxcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBtYWtpbmcgdGhpcyB2YXJpYW50IGFjdGl2ZSwgd2Ugd2FudCB0byBhbHdheXMgbWFrZSBpdCBhY3RpdmVcbiAgICAgICAgICAgICAgICAodHlwZSA9PT0gY2hhbmdlZEFjdGl2ZVR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlLmlzQWN0aXZlICYmXG4gICAgICAgICAgICAgICAgICAgICFpc0luaGVyaXRlZCAmJlxuICAgICAgICAgICAgICAgICAgICBwcm9wSXNWYXJpYW50KSB8fFxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlbW92ZWQgYSBoaWdoZXItcHJpb3JpdHkgdmFyaWFudCAoaSBpcyBpbiByZXZlcnNlIG9yZGVyKVxuICAgICAgICAgICAgICAgIChpID4gcmVtb3ZlZFZhcmlhbnRJbmRleCAmJiBwcm9wSXNWYXJpYW50KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXMgYW5pbWF0aW9ucyBjYW4gYmUgc2V0IGFzIHZhcmlhbnQgbGlzdHMsIHZhcmlhbnRzIG9yIHRhcmdldCBvYmplY3RzLCB3ZVxuICAgICAgICAgICAgICogY29lcmNlIGV2ZXJ5dGhpbmcgdG8gYW4gYXJyYXkgaWYgaXQgaXNuJ3Qgb25lIGFscmVhZHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGRlZmluaXRpb25MaXN0ID0gQXJyYXkuaXNBcnJheShwcm9wKSA/IHByb3AgOiBbcHJvcF07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJ1aWxkIGFuIG9iamVjdCBvZiBhbGwgdGhlIHJlc29sdmVkIHZhbHVlcy4gV2UnbGwgdXNlIHRoaXMgaW4gdGhlIHN1YnNlcXVlbnRcbiAgICAgICAgICAgICAqIGFuaW1hdGVDaGFuZ2VzIGNhbGxzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciByZXNvbHZlZFZhbHVlcyA9IGRlZmluaXRpb25MaXN0LnJlZHVjZShidWlsZFJlc29sdmVkVHlwZVZhbHVlcywge30pO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZURlbHRhID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXNvbHZlZFZhbHVlcyA9IHt9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3cgd2UgbmVlZCB0byBsb29wIHRocm91Z2ggYWxsIHRoZSBrZXlzIGluIHRoZSBwcmV2IHByb3AgYW5kIHRoaXMgcHJvcCxcbiAgICAgICAgICAgICAqIGFuZCBkZWNpZGU6XG4gICAgICAgICAgICAgKiAxLiBJZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQsIGFuZCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAqIDIuIElmIGl0IGhhcyBiZWVuIHJlbW92ZWQsIGFuZCBuZWVkcyBhZGRpbmcgdG8gdGhlIHJlbW92ZWRLZXlzIHNldFxuICAgICAgICAgICAgICogMy4gSWYgaXQgaGFzIGJlZW4gcmVtb3ZlZCBpbiBhIGhpZ2hlciBwcmlvcml0eSB0eXBlIGFuZCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAqIDQuIElmIGl0IGhhc24ndCBiZWVuIHJlbW92ZWQgaW4gYSBoaWdoZXIgcHJpb3JpdHkgYnV0IGhhc24ndCBjaGFuZ2VkLCBhbmRcbiAgICAgICAgICAgICAqICAgIG5lZWRzIGFkZGluZyB0byB0aGUgdHlwZSdzIHByb3RlY3RlZEtleXMgbGlzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9iID0gdHlwZVN0YXRlLnByZXZSZXNvbHZlZFZhbHVlcywgcHJldlJlc29sdmVkVmFsdWVzID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2I7XG4gICAgICAgICAgICB2YXIgYWxsS2V5cyA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBwcmV2UmVzb2x2ZWRWYWx1ZXMpLCByZXNvbHZlZFZhbHVlcyk7XG4gICAgICAgICAgICB2YXIgbWFya1RvQW5pbWF0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRBbmltYXRlVHlwZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZEtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgdHlwZVN0YXRlLm5lZWRzQW5pbWF0aW5nW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSByZXNvbHZlZFZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gcHJldlJlc29sdmVkVmFsdWVzW2tleV07XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoaXMgd2UgY2FuIGp1c3Qgc2tpcCBhaGVhZFxuICAgICAgICAgICAgICAgIGlmIChlbmNvdW50ZXJlZEtleXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLCB3ZSBwcm9iYWJseSB3YW50IHRvIGFuaW1hdGUgaXQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIGJvdGggdmFsdWVzIGFyZSBrZXlmcmFtZXMsIHdlIG5lZWQgdG8gc2hhbGxvdyBjb21wYXJlIHRoZW0gdG9cbiAgICAgICAgICAgICAgICAgICAgICogZGV0ZWN0IHdoZXRoZXIgYW55IHZhbHVlIGhhcyBjaGFuZ2VkLiBJZiBpdCBoYXMsIHdlIGFuaW1hdGUgaXQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNLZXlmcmFtZXNUYXJnZXQobmV4dCkgJiYgaXNLZXlmcmFtZXNUYXJnZXQocHJldikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikgfHwgdmFyaWFudERpZENoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtUb0FuaW1hdGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIElmIGl0IGhhc24ndCBjaGFuZ2VkLCB3ZSB3YW50IHRvIGVuc3VyZSBpdCBkb2Vzbid0IGFuaW1hdGUgYnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBhZGRpbmcgaXQgdG8gdGhlIGxpc3Qgb2YgcHJvdGVjdGVkIGtleXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlLnByb3RlY3RlZEtleXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBuZXh0IGlzIGRlZmluZWQgYW5kIGRvZXNuJ3QgZXF1YWwgcHJldiwgaXQgbmVlZHMgYW5pbWF0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrVG9BbmltYXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIHVuZGVmaW5lZCwgaXQncyBiZWVuIHJlbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0ICE9PSB1bmRlZmluZWQgJiYgcmVtb3ZlZEtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIG5leHQgaGFzbid0IGNoYW5nZWQgYW5kIGl0IGlzbid0IHVuZGVmaW5lZCwgd2Ugd2FudCB0byBjaGVjayBpZiBpdCdzXG4gICAgICAgICAgICAgICAgICAgICAqIGJlZW4gcmVtb3ZlZCBieSBhIGhpZ2hlciBwcmlvcml0eVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgbWFya1RvQW5pbWF0ZShrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIGl0IGhhc24ndCBjaGFuZ2VkLCB3ZSBhZGQgaXQgdG8gdGhlIGxpc3Qgb2YgcHJvdGVjdGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgKiB0byBlbnN1cmUgaXQgZG9lc24ndCBnZXQgYW5pbWF0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB0eXBlU3RhdGUucHJvdGVjdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgdHlwZVN0YXRlIHNvIG5leHQgdGltZSBhbmltYXRlQ2hhbmdlcyBpcyBjYWxsZWQgd2UgY2FuIGNvbXBhcmUgdGhlXG4gICAgICAgICAgICAgKiBsYXRlc3QgcHJvcCBhbmQgcmVzb2x2ZWRWYWx1ZXMgdG8gdGhlc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHR5cGVTdGF0ZS5wcmV2UHJvcCA9IHByb3A7XG4gICAgICAgICAgICB0eXBlU3RhdGUucHJldlJlc29sdmVkVmFsdWVzID0gcmVzb2x2ZWRWYWx1ZXM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0eXBlU3RhdGUuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBlbmNvdW50ZXJlZEtleXMgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgZW5jb3VudGVyZWRLZXlzKSwgcmVzb2x2ZWRWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSW5pdGlhbFJlbmRlciAmJiB2aXN1YWxFbGVtZW50LmJsb2NrSW5pdGlhbEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHNob3VsZEFuaW1hdGVUeXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYW4gaW5oZXJpdGVkIHByb3Agd2Ugd2FudCB0byBoYXJkLWJsb2NrIGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAqIFRPRE86IFRlc3QgYXMgdGhpcyBzaG91bGQgcHJvYmFibHkgc3RpbGwgaGFuZGxlIGFuaW1hdGlvbnMgdHJpZ2dlcmVkXG4gICAgICAgICAgICAgKiBieSByZW1vdmVkIHZhbHVlcz9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHNob3VsZEFuaW1hdGVUeXBlICYmICFpc0luaGVyaXRlZCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaC5hcHBseShhbmltYXRpb25zLCB0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCB0c2xpYi5fX3JlYWQoZGVmaW5pdGlvbkxpc3QubWFwKGZ1bmN0aW9uIChhbmltYXRpb24pIHsgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB0c2xpYi5fX2Fzc2lnbih7IHR5cGU6IHR5cGUgfSwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgfSk7IH0pKSwgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEl0ZXJhdGUgdGhyb3VnaCBhbGwgYW5pbWF0aW9uIHR5cGVzIGluIHJldmVyc2UgcHJpb3JpdHkgb3JkZXIuIEZvciBlYWNoLCB3ZSB3YW50IHRvXG4gICAgICAgICAqIGRldGVjdCB3aGljaCB2YWx1ZXMgaXQncyBoYW5kbGluZyBhbmQgd2hldGhlciBvciBub3QgdGhleSd2ZSBjaGFuZ2VkIChhbmQgdGhlcmVmb3JlXG4gICAgICAgICAqIG5lZWQgdG8gYmUgYW5pbWF0ZWQpLiBJZiBhbnkgdmFsdWVzIGhhdmUgYmVlbiByZW1vdmVkLCB3ZSB3YW50IHRvIGRldGVjdCB0aG9zZSBpblxuICAgICAgICAgKiBsb3dlciBwcmlvcml0eSBwcm9wcyBhbmQgZmxhZyBmb3IgYW5pbWF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1BbmltYXRpb25UeXBlczsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgICAgIGFsbEFuaW1hdGVkS2V5cyA9IHRzbGliLl9fYXNzaWduKHt9LCBlbmNvdW50ZXJlZEtleXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUgYXJlIHNvbWUgcmVtb3ZlZCB2YWx1ZSB0aGF0IGhhdmVuJ3QgYmVlbiBkZWFsdCB3aXRoLFxuICAgICAgICAgKiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBhbmltYXRpb24gdGhhdCBmYWxscyBiYWNrIGVpdGhlciB0byB0aGUgdmFsdWVcbiAgICAgICAgICogZGVmaW5lZCBpbiB0aGUgc3R5bGUgcHJvcCwgb3IgdGhlIGxhc3QgcmVhZCB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChyZW1vdmVkS2V5cy5zaXplKSB7XG4gICAgICAgICAgICB2YXIgZmFsbGJhY2tBbmltYXRpb25fMSA9IHt9O1xuICAgICAgICAgICAgcmVtb3ZlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZhbGxiYWNrVGFyZ2V0ID0gdmlzdWFsRWxlbWVudC5nZXRCYXNlVGFyZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGZhbGxiYWNrVGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tBbmltYXRpb25fMVtrZXldID0gZmFsbGJhY2tUYXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbmltYXRpb25zLnB1c2goeyBhbmltYXRpb246IGZhbGxiYWNrQW5pbWF0aW9uXzEgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNob3VsZEFuaW1hdGUgPSBCb29sZWFuKGFuaW1hdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgaWYgKGlzSW5pdGlhbFJlbmRlciAmJlxuICAgICAgICAgICAgcHJvcHMuaW5pdGlhbCA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICF2aXN1YWxFbGVtZW50Lm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQpIHtcbiAgICAgICAgICAgIHNob3VsZEFuaW1hdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpc0luaXRpYWxSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHNob3VsZEFuaW1hdGUgPyBhbmltYXRlKGFuaW1hdGlvbnMpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB3aGV0aGVyIGEgY2VydGFpbiBhbmltYXRpb24gdHlwZSBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QWN0aXZlKHR5cGUsIGlzQWN0aXZlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gSWYgdGhlIGFjdGl2ZSBzdGF0ZSBoYXNuJ3QgY2hhbmdlZCwgd2UgY2FuIHNhZmVseSBkbyBub3RoaW5nIGhlcmVcbiAgICAgICAgaWYgKHN0YXRlW3R5cGVdLmlzQWN0aXZlID09PSBpc0FjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgLy8gUHJvcGFnYXRlIGFjdGl2ZSBjaGFuZ2UgdG8gY2hpbGRyZW5cbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBjaGlsZC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZSh0eXBlLCBpc0FjdGl2ZSk7IH0pO1xuICAgICAgICBzdGF0ZVt0eXBlXS5pc0FjdGl2ZSA9IGlzQWN0aXZlO1xuICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IGFuaW1hdGVDaGFuZ2VzKG9wdGlvbnMsIHR5cGUpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlW2tleV0ucHJvdGVjdGVkS2V5cyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBpc0FuaW1hdGVkOiBpc0FuaW1hdGVkLFxuICAgICAgICBhbmltYXRlQ2hhbmdlczogYW5pbWF0ZUNoYW5nZXMsXG4gICAgICAgIHNldEFjdGl2ZTogc2V0QWN0aXZlLFxuICAgICAgICBzZXRBbmltYXRlRnVuY3Rpb246IHNldEFuaW1hdGVGdW5jdGlvbixcbiAgICAgICAgZ2V0U3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0YXRlOyB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja1ZhcmlhbnRzRGlkQ2hhbmdlKHByZXYsIG5leHQpIHtcbiAgICBpZiAodHlwZW9mIG5leHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQgIT09IHByZXY7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVmFyaWFudExhYmVscyhuZXh0KSkge1xuICAgICAgICByZXR1cm4gIXNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVUeXBlU3RhdGUoaXNBY3RpdmUpIHtcbiAgICBpZiAoaXNBY3RpdmUgPT09IHZvaWQgMCkgeyBpc0FjdGl2ZSA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgICBwcm90ZWN0ZWRLZXlzOiB7fSxcbiAgICAgICAgbmVlZHNBbmltYXRpbmc6IHt9LFxuICAgICAgICBwcmV2UmVzb2x2ZWRWYWx1ZXM6IHt9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0ZSgpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIF9hID0ge30sXG4gICAgICAgIF9hW2V4cG9ydHMuQW5pbWF0aW9uVHlwZS5BbmltYXRlXSA9IGNyZWF0ZVR5cGVTdGF0ZSh0cnVlKSxcbiAgICAgICAgX2FbZXhwb3J0cy5BbmltYXRpb25UeXBlLkluVmlld10gPSBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgX2FbZXhwb3J0cy5BbmltYXRpb25UeXBlLkhvdmVyXSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtleHBvcnRzLkFuaW1hdGlvblR5cGUuVGFwXSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtleHBvcnRzLkFuaW1hdGlvblR5cGUuRHJhZ10gPSBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgX2FbZXhwb3J0cy5BbmltYXRpb25UeXBlLkZvY3VzXSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtleHBvcnRzLkFuaW1hdGlvblR5cGUuRXhpdF0gPSBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgX2E7XG59XG5cbnZhciBhbmltYXRpb25zID0ge1xuICAgIGFuaW1hdGlvbjogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudCwgYW5pbWF0ZSA9IF9hLmFuaW1hdGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBkeW5hbWljYWxseSBnZW5lcmF0ZSB0aGUgQW5pbWF0aW9uU3RhdGUgbWFuYWdlciBhcyBpdCBjb250YWlucyBhIHJlZmVyZW5jZVxuICAgICAgICAgKiB0byB0aGUgdW5kZXJseWluZyBhbmltYXRpb24gbGlicmFyeS4gV2Ugb25seSB3YW50IHRvIGxvYWQgdGhhdCBpZiB3ZSBsb2FkIHRoaXMsXG4gICAgICAgICAqIHNvIHBlb3BsZSBjYW4gb3B0aW9uYWxseSBjb2RlIHNwbGl0IGl0IG91dCB1c2luZyB0aGUgYG1gIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgfHwgKHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgPSBjcmVhdGVBbmltYXRpb25TdGF0ZSh2aXN1YWxFbGVtZW50KSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdWJzY3JpYmUgYW55IHByb3ZpZGVkIEFuaW1hdGlvbkNvbnRyb2xzIHRvIHRoZSBjb21wb25lbnQncyBWaXN1YWxFbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNBbmltYXRpb25Db250cm9scyhhbmltYXRlKSkge1xuICAgICAgICAgICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFuaW1hdGUuc3Vic2NyaWJlKHZpc3VhbEVsZW1lbnQpOyB9LCBbYW5pbWF0ZV0pO1xuICAgICAgICB9XG4gICAgfSksXG4gICAgZXhpdDogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBjdXN0b20gPSBwcm9wcy5jdXN0b20sIHZpc3VhbEVsZW1lbnQgPSBwcm9wcy52aXN1YWxFbGVtZW50O1xuICAgICAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQodXNlUHJlc2VuY2UoKSwgMiksIGlzUHJlc2VudCA9IF9hWzBdLCBzYWZlVG9SZW1vdmUgPSBfYVsxXTtcbiAgICAgICAgdmFyIHByZXNlbmNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB2aXN1YWxFbGVtZW50LmlzUHJlc2VudCA9IGlzUHJlc2VudDtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKGV4cG9ydHMuQW5pbWF0aW9uVHlwZS5FeGl0LCAhaXNQcmVzZW50LCB7IGN1c3RvbTogKF9iID0gcHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmN1c3RvbSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogY3VzdG9tIH0pO1xuICAgICAgICAgICAgIWlzUHJlc2VudCAmJiAoYW5pbWF0aW9uID09PSBudWxsIHx8IGFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYW5pbWF0aW9uLnRoZW4oc2FmZVRvUmVtb3ZlKSk7XG4gICAgICAgIH0sIFtpc1ByZXNlbnRdKTtcbiAgICB9KSxcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbnZhciBQYW5TZXNzaW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhblNlc3Npb24oZXZlbnQsIGhhbmRsZXJzLCBfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgdHJhbnNmb3JtUGFnZVBvaW50ID0gX2IudHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0RXZlbnQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnRJbmZvID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgICB0aGlzLnVwZGF0ZVBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEoX3RoaXMubGFzdE1vdmVFdmVudCAmJiBfdGhpcy5sYXN0TW92ZUV2ZW50SW5mbykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGluZm8gPSBnZXRQYW5JbmZvKF90aGlzLmxhc3RNb3ZlRXZlbnRJbmZvLCBfdGhpcy5oaXN0b3J5KTtcbiAgICAgICAgICAgIHZhciBpc1BhblN0YXJ0ZWQgPSBfdGhpcy5zdGFydEV2ZW50ICE9PSBudWxsO1xuICAgICAgICAgICAgLy8gT25seSBzdGFydCBwYW5uaW5nIGlmIHRoZSBvZmZzZXQgaXMgbGFyZ2VyIHRoYW4gMyBwaXhlbHMuIElmIHdlIG1ha2UgaXRcbiAgICAgICAgICAgIC8vIGFueSBsYXJnZXIgdGhhbiB0aGlzIHdlJ2xsIHdhbnQgdG8gcmVzZXQgdGhlIHBvaW50ZXIgaGlzdG9yeVxuICAgICAgICAgICAgLy8gb24gdGhlIGZpcnN0IHVwZGF0ZSB0byBhdm9pZCB2aXN1YWwgc25hcHBpbmcgdG8gdGhlIGN1cnNvZS5cbiAgICAgICAgICAgIHZhciBpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZCA9IHBvcG1vdGlvbi5kaXN0YW5jZShpbmZvLm9mZnNldCwgeyB4OiAwLCB5OiAwIH0pID49IDM7XG4gICAgICAgICAgICBpZiAoIWlzUGFuU3RhcnRlZCAmJiAhaXNEaXN0YW5jZVBhc3RUaHJlc2hvbGQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gaW5mby5wb2ludDtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBzeW5jLmdldEZyYW1lRGF0YSgpLnRpbWVzdGFtcDtcbiAgICAgICAgICAgIF90aGlzLmhpc3RvcnkucHVzaCh0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcG9pbnQpLCB7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0pKTtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmhhbmRsZXJzLCBvblN0YXJ0ID0gX2Eub25TdGFydCwgb25Nb3ZlID0gX2Eub25Nb3ZlO1xuICAgICAgICAgICAgaWYgKCFpc1BhblN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQoX3RoaXMubGFzdE1vdmVFdmVudCwgaW5mbyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3RhcnRFdmVudCA9IF90aGlzLmxhc3RNb3ZlRXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbk1vdmUgJiYgb25Nb3ZlKF90aGlzLmxhc3RNb3ZlRXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgICAgICBfdGhpcy5sYXN0TW92ZUV2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICBfdGhpcy5sYXN0TW92ZUV2ZW50SW5mbyA9IHRyYW5zZm9ybVBvaW50KGluZm8sIF90aGlzLnRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgICAgICAgICAvLyBCZWNhdXNlIFNhZmFyaSBkb2Vzbid0IHRyaWdnZXIgbW91c2V1cCBldmVudHMgd2hlbiBpdCdzIGFib3ZlIGEgYDxzZWxlY3Q+YFxuICAgICAgICAgICAgaWYgKGlzTW91c2VFdmVudChldmVudCkgJiYgZXZlbnQuYnV0dG9ucyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJVcChldmVudCwgaW5mbyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhyb3R0bGUgbW91c2UgbW92ZSBldmVudCB0byBvbmNlIHBlciBmcmFtZVxuICAgICAgICAgICAgc3luY19fZGVmYXVsdFtcImRlZmF1bHRcIl0udXBkYXRlKF90aGlzLnVwZGF0ZVBvaW50LCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbiAoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgICAgIF90aGlzLmVuZCgpO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuaGFuZGxlcnMsIG9uRW5kID0gX2Eub25FbmQsIG9uU2Vzc2lvbkVuZCA9IF9hLm9uU2Vzc2lvbkVuZDtcbiAgICAgICAgICAgIHZhciBwYW5JbmZvID0gZ2V0UGFuSW5mbyh0cmFuc2Zvcm1Qb2ludChpbmZvLCBfdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQpLCBfdGhpcy5oaXN0b3J5KTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zdGFydEV2ZW50ICYmIG9uRW5kKSB7XG4gICAgICAgICAgICAgICAgb25FbmQoZXZlbnQsIHBhbkluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25TZXNzaW9uRW5kICYmIG9uU2Vzc2lvbkVuZChldmVudCwgcGFuSW5mbyk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbW9yZSB0aGFuIG9uZSB0b3VjaCwgZG9uJ3Qgc3RhcnQgZGV0ZWN0aW5nIHRoaXMgZ2VzdHVyZVxuICAgICAgICBpZiAoaXNUb3VjaEV2ZW50KGV2ZW50KSAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQgPSB0cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgICAgIHZhciBpbmZvID0gZXh0cmFjdEV2ZW50SW5mbyhldmVudCk7XG4gICAgICAgIHZhciBpbml0aWFsSW5mbyA9IHRyYW5zZm9ybVBvaW50KGluZm8sIHRoaXMudHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICAgICAgdmFyIHBvaW50ID0gaW5pdGlhbEluZm8ucG9pbnQ7XG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBzeW5jLmdldEZyYW1lRGF0YSgpLnRpbWVzdGFtcDtcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gW3RzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBwb2ludCksIHsgdGltZXN0YW1wOiB0aW1lc3RhbXAgfSldO1xuICAgICAgICB2YXIgb25TZXNzaW9uU3RhcnQgPSBoYW5kbGVycy5vblNlc3Npb25TdGFydDtcbiAgICAgICAgb25TZXNzaW9uU3RhcnQgJiZcbiAgICAgICAgICAgIG9uU2Vzc2lvblN0YXJ0KGV2ZW50LCBnZXRQYW5JbmZvKGluaXRpYWxJbmZvLCB0aGlzLmhpc3RvcnkpKTtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMgPSBwb3Btb3Rpb24ucGlwZShhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJtb3ZlXCIsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpLCBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJ1cFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCksIGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCkpO1xuICAgIH1cbiAgICBQYW5TZXNzaW9uLnByb3RvdHlwZS51cGRhdGVIYW5kbGVycyA9IGZ1bmN0aW9uIChoYW5kbGVycykge1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgfTtcbiAgICBQYW5TZXNzaW9uLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzICYmIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIHN5bmMuY2FuY2VsU3luYy51cGRhdGUodGhpcy51cGRhdGVQb2ludCk7XG4gICAgfTtcbiAgICByZXR1cm4gUGFuU2Vzc2lvbjtcbn0oKSk7XG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChpbmZvLCB0cmFuc2Zvcm1QYWdlUG9pbnQpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUGFnZVBvaW50ID8geyBwb2ludDogdHJhbnNmb3JtUGFnZVBvaW50KGluZm8ucG9pbnQpIH0gOiBpbmZvO1xufVxuZnVuY3Rpb24gc3VidHJhY3RQb2ludChhLCBiKSB7XG4gICAgcmV0dXJuIHsgeDogYS54IC0gYi54LCB5OiBhLnkgLSBiLnkgfTtcbn1cbmZ1bmN0aW9uIGdldFBhbkluZm8oX2EsIGhpc3RvcnkpIHtcbiAgICB2YXIgcG9pbnQgPSBfYS5wb2ludDtcbiAgICByZXR1cm4ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGRlbHRhOiBzdWJ0cmFjdFBvaW50KHBvaW50LCBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSkpLFxuICAgICAgICBvZmZzZXQ6IHN1YnRyYWN0UG9pbnQocG9pbnQsIHN0YXJ0RGV2aWNlUG9pbnQoaGlzdG9yeSkpLFxuICAgICAgICB2ZWxvY2l0eTogZ2V0VmVsb2NpdHkoaGlzdG9yeSwgMC4xKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RhcnREZXZpY2VQb2ludChoaXN0b3J5KSB7XG4gICAgcmV0dXJuIGhpc3RvcnlbMF07XG59XG5mdW5jdGlvbiBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSkge1xuICAgIHJldHVybiBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiBnZXRWZWxvY2l0eShoaXN0b3J5LCB0aW1lRGVsdGEpIHtcbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcbiAgICB9XG4gICAgdmFyIGkgPSBoaXN0b3J5Lmxlbmd0aCAtIDE7XG4gICAgdmFyIHRpbWVzdGFtcGVkUG9pbnQgPSBudWxsO1xuICAgIHZhciBsYXN0UG9pbnQgPSBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSk7XG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgICB0aW1lc3RhbXBlZFBvaW50ID0gaGlzdG9yeVtpXTtcbiAgICAgICAgaWYgKGxhc3RQb2ludC50aW1lc3RhbXAgLSB0aW1lc3RhbXBlZFBvaW50LnRpbWVzdGFtcCA+XG4gICAgICAgICAgICBzZWNvbmRzVG9NaWxsaXNlY29uZHModGltZURlbHRhKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoIXRpbWVzdGFtcGVkUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIH1cbiAgICB2YXIgdGltZSA9IChsYXN0UG9pbnQudGltZXN0YW1wIC0gdGltZXN0YW1wZWRQb2ludC50aW1lc3RhbXApIC8gMTAwMDtcbiAgICBpZiAodGltZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIHZhciBjdXJyZW50VmVsb2NpdHkgPSB7XG4gICAgICAgIHg6IChsYXN0UG9pbnQueCAtIHRpbWVzdGFtcGVkUG9pbnQueCkgLyB0aW1lLFxuICAgICAgICB5OiAobGFzdFBvaW50LnkgLSB0aW1lc3RhbXBlZFBvaW50LnkpIC8gdGltZSxcbiAgICB9O1xuICAgIGlmIChjdXJyZW50VmVsb2NpdHkueCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgY3VycmVudFZlbG9jaXR5LnggPSAwO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFZlbG9jaXR5LnkgPT09IEluZmluaXR5KSB7XG4gICAgICAgIGN1cnJlbnRWZWxvY2l0eS55ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRWZWxvY2l0eTtcbn1cblxuLyoqXG4gKiBBcHBseSBjb25zdHJhaW50cyB0byBhIHBvaW50LiBUaGVzZSBjb25zdHJhaW50cyBhcmUgYm90aCBwaHlzaWNhbCBhbG9uZyBhblxuICogYXhpcywgYW5kIGFuIGVsYXN0aWMgZmFjdG9yIHRoYXQgZGV0ZXJtaW5lcyBob3cgbXVjaCB0byBjb25zdHJhaW4gdGhlIHBvaW50XG4gKiBieSBpZiBpdCBkb2VzIGxpZSBvdXRzaWRlIHRoZSBkZWZpbmVkIHBhcmFtZXRlcnMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludHMocG9pbnQsIF9hLCBlbGFzdGljKSB7XG4gICAgdmFyIG1pbiA9IF9hLm1pbiwgbWF4ID0gX2EubWF4O1xuICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBwb2ludCA8IG1pbikge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbWluIHBvaW50IGRlZmluZWQsIGFuZCB0aGlzIGlzIG91dHNpZGUgb2YgdGhhdCwgY29uc3RyYWluXG4gICAgICAgIHBvaW50ID0gZWxhc3RpYyA/IHBvcG1vdGlvbi5taXgobWluLCBwb2ludCwgZWxhc3RpYy5taW4pIDogTWF0aC5tYXgocG9pbnQsIG1pbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1heCAhPT0gdW5kZWZpbmVkICYmIHBvaW50ID4gbWF4KSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBtYXggcG9pbnQgZGVmaW5lZCwgYW5kIHRoaXMgaXMgb3V0c2lkZSBvZiB0aGF0LCBjb25zdHJhaW5cbiAgICAgICAgcG9pbnQgPSBlbGFzdGljID8gcG9wbW90aW9uLm1peChtYXgsIHBvaW50LCBlbGFzdGljLm1heCkgOiBNYXRoLm1pbihwb2ludCwgbWF4KTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgY29uc3RyYWludHMgaW4gdGVybXMgb2YgdGhlIHZpZXdwb3J0IHdoZW4gZGVmaW5lZCByZWxhdGl2ZWx5IHRvIHRoZVxuICogbWVhc3VyZWQgYXhpcy4gVGhpcyBpcyBtZWFzdXJlZCBmcm9tIHRoZSBuZWFyZXN0IGVkZ2UsIHNvIGEgbWF4IGNvbnN0cmFpbnQgb2YgMjAwXG4gKiBvbiBhbiBheGlzIHdpdGggYSBtYXggdmFsdWUgb2YgMzAwIHdvdWxkIHJldHVybiBhIGNvbnN0cmFpbnQgb2YgNTAwIC0gYXhpcyBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzKGF4aXMsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW4gIT09IHVuZGVmaW5lZCA/IGF4aXMubWluICsgbWluIDogdW5kZWZpbmVkLFxuICAgICAgICBtYXg6IG1heCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGF4aXMubWF4ICsgbWF4IC0gKGF4aXMubWF4IC0gYXhpcy5taW4pXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgY29uc3RyYWludHMgaW4gdGVybXMgb2YgdGhlIHZpZXdwb3J0IHdoZW5cbiAqIGRlZmluZWQgcmVsYXRpdmVseSB0byB0aGUgbWVhc3VyZWQgYm91bmRpbmcgYm94LlxuICovXG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVDb25zdHJhaW50cyhsYXlvdXRCb3gsIF9hKSB7XG4gICAgdmFyIHRvcCA9IF9hLnRvcCwgbGVmdCA9IF9hLmxlZnQsIGJvdHRvbSA9IF9hLmJvdHRvbSwgcmlnaHQgPSBfYS5yaWdodDtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBjYWxjUmVsYXRpdmVBeGlzQ29uc3RyYWludHMobGF5b3V0Qm94LngsIGxlZnQsIHJpZ2h0KSxcbiAgICAgICAgeTogY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC55LCB0b3AsIGJvdHRvbSksXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHdoZW4gZGVmaW5lZCBhcyBhbm90aGVyIHZpZXdwb3J0LXJlbGF0aXZlIGF4aXNcbiAqL1xuZnVuY3Rpb24gY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEF4aXMsIGNvbnN0cmFpbnRzQXhpcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgbWluID0gY29uc3RyYWludHNBeGlzLm1pbiAtIGxheW91dEF4aXMubWluO1xuICAgIHZhciBtYXggPSBjb25zdHJhaW50c0F4aXMubWF4IC0gbGF5b3V0QXhpcy5tYXg7XG4gICAgLy8gSWYgdGhlIGNvbnN0cmFpbnRzIGF4aXMgaXMgYWN0dWFsbHkgc21hbGxlciB0aGFuIHRoZSBsYXlvdXQgYXhpcyB0aGVuIHdlIGNhblxuICAgIC8vIGZsaXAgdGhlIGNvbnN0cmFpbnRzXG4gICAgaWYgKGNvbnN0cmFpbnRzQXhpcy5tYXggLSBjb25zdHJhaW50c0F4aXMubWluIDxcbiAgICAgICAgbGF5b3V0QXhpcy5tYXggLSBsYXlvdXRBeGlzLm1pbikge1xuICAgICAgICBfYSA9IHRzbGliLl9fcmVhZChbbWF4LCBtaW5dLCAyKSwgbWluID0gX2FbMF0sIG1heCA9IF9hWzFdO1xuICAgIH1cbiAgICByZXR1cm4geyBtaW46IG1pbiwgbWF4OiBtYXggfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHdoZW4gZGVmaW5lZCBhcyBhbm90aGVyIHZpZXdwb3J0LXJlbGF0aXZlIGJveFxuICovXG5mdW5jdGlvbiBjYWxjVmlld3BvcnRDb25zdHJhaW50cyhsYXlvdXRCb3gsIGNvbnN0cmFpbnRzQm94KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC54LCBjb25zdHJhaW50c0JveC54KSxcbiAgICAgICAgeTogY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC55LCBjb25zdHJhaW50c0JveC55KSxcbiAgICB9O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgYSB0cmFuc2Zvcm0gb3JpZ2luIHJlbGF0aXZlIHRvIHRoZSBzb3VyY2UgYXhpcywgYmV0d2VlbiAwLTEsIHRoYXQgcmVzdWx0c1xuICogaW4gYW4gYXN0aGV0aWNhbGx5IHBsZWFzaW5nIHNjYWxlL3RyYW5zZm9ybSBuZWVkZWQgdG8gcHJvamVjdCBmcm9tIHNvdXJjZSB0byB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGNhbGNPcmlnaW4oc291cmNlLCB0YXJnZXQpIHtcbiAgICB2YXIgb3JpZ2luID0gMC41O1xuICAgIHZhciBzb3VyY2VMZW5ndGggPSBjYWxjTGVuZ3RoKHNvdXJjZSk7XG4gICAgdmFyIHRhcmdldExlbmd0aCA9IGNhbGNMZW5ndGgodGFyZ2V0KTtcbiAgICBpZiAodGFyZ2V0TGVuZ3RoID4gc291cmNlTGVuZ3RoKSB7XG4gICAgICAgIG9yaWdpbiA9IHBvcG1vdGlvbi5wcm9ncmVzcyh0YXJnZXQubWluLCB0YXJnZXQubWF4IC0gc291cmNlTGVuZ3RoLCBzb3VyY2UubWluKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc291cmNlTGVuZ3RoID4gdGFyZ2V0TGVuZ3RoKSB7XG4gICAgICAgIG9yaWdpbiA9IHBvcG1vdGlvbi5wcm9ncmVzcyhzb3VyY2UubWluLCBzb3VyY2UubWF4IC0gdGFyZ2V0TGVuZ3RoLCB0YXJnZXQubWluKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvcG1vdGlvbi5jbGFtcCgwLCAxLCBvcmlnaW4pO1xufVxuLyoqXG4gKiBSZWJhc2UgdGhlIGNhbGN1bGF0ZWQgdmlld3BvcnQgY29uc3RyYWludHMgcmVsYXRpdmUgdG8gdGhlIGxheW91dC5taW4gcG9pbnQuXG4gKi9cbmZ1bmN0aW9uIHJlYmFzZUF4aXNDb25zdHJhaW50cyhsYXlvdXQsIGNvbnN0cmFpbnRzKSB7XG4gICAgdmFyIHJlbGF0aXZlQ29uc3RyYWludHMgPSB7fTtcbiAgICBpZiAoY29uc3RyYWludHMubWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVsYXRpdmVDb25zdHJhaW50cy5taW4gPSBjb25zdHJhaW50cy5taW4gLSBsYXlvdXQubWluO1xuICAgIH1cbiAgICBpZiAoY29uc3RyYWludHMubWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVsYXRpdmVDb25zdHJhaW50cy5tYXggPSBjb25zdHJhaW50cy5tYXggLSBsYXlvdXQubWluO1xuICAgIH1cbiAgICByZXR1cm4gcmVsYXRpdmVDb25zdHJhaW50cztcbn1cbnZhciBkZWZhdWx0RWxhc3RpYyA9IDAuMzU7XG4vKipcbiAqIEFjY2VwdHMgYSBkcmFnRWxhc3RpYyBwcm9wIGFuZCByZXR1cm5zIHJlc29sdmVkIGVsYXN0aWMgdmFsdWVzIGZvciBlYWNoIGF4aXMuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVEcmFnRWxhc3RpYyhkcmFnRWxhc3RpYykge1xuICAgIGlmIChkcmFnRWxhc3RpYyA9PT0gdm9pZCAwKSB7IGRyYWdFbGFzdGljID0gZGVmYXVsdEVsYXN0aWM7IH1cbiAgICBpZiAoZHJhZ0VsYXN0aWMgPT09IGZhbHNlKSB7XG4gICAgICAgIGRyYWdFbGFzdGljID0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZ0VsYXN0aWMgPT09IHRydWUpIHtcbiAgICAgICAgZHJhZ0VsYXN0aWMgPSBkZWZhdWx0RWxhc3RpYztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcImxlZnRcIiwgXCJyaWdodFwiKSxcbiAgICAgICAgeTogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcInRvcFwiLCBcImJvdHRvbVwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBtaW5MYWJlbCwgbWF4TGFiZWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIG1pbkxhYmVsKSxcbiAgICAgICAgbWF4OiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBtYXhMYWJlbCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIGxhYmVsKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0eXBlb2YgZHJhZ0VsYXN0aWMgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyBkcmFnRWxhc3RpY1xuICAgICAgICA6IChfYSA9IGRyYWdFbGFzdGljW2xhYmVsXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbn1cblxuLyoqXG4gKiBCb3VuZGluZyBib3hlcyB0ZW5kIHRvIGJlIGRlZmluZWQgYXMgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLiBGb3IgdmFyaW91cyBvcGVyYXRpb25zXG4gKiBpdCdzIGVhc2llciB0byBjb25zaWRlciBlYWNoIGF4aXMgaW5kaXZpZHVhbGx5LiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBib3VuZGluZyBib3hcbiAqIGFzIGEgbWFwIG9mIHNpbmdsZS1heGlzIG1pbi9tYXggdmFsdWVzLlxuICovXG5mdW5jdGlvbiBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveChfYSkge1xuICAgIHZhciB0b3AgPSBfYS50b3AsIGxlZnQgPSBfYS5sZWZ0LCByaWdodCA9IF9hLnJpZ2h0LCBib3R0b20gPSBfYS5ib3R0b207XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeyBtaW46IGxlZnQsIG1heDogcmlnaHQgfSxcbiAgICAgICAgeTogeyBtaW46IHRvcCwgbWF4OiBib3R0b20gfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY29udmVydEJveFRvQm91bmRpbmdCb3goX2EpIHtcbiAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgIHJldHVybiB7IHRvcDogeS5taW4sIHJpZ2h0OiB4Lm1heCwgYm90dG9tOiB5Lm1heCwgbGVmdDogeC5taW4gfTtcbn1cbi8qKlxuICogQXBwbGllcyBhIFRyYW5zZm9ybVBvaW50IGZ1bmN0aW9uIHRvIGEgYm91bmRpbmcgYm94LiBUcmFuc2Zvcm1Qb2ludCBpcyB1c3VhbGx5IGEgZnVuY3Rpb25cbiAqIHByb3ZpZGVkIGJ5IEZyYW1lciB0byBhbGxvdyBtZWFzdXJlZCBwb2ludHMgdG8gYmUgY29ycmVjdGVkIGZvciBkZXZpY2Ugc2NhbGluZy4gVGhpcyBpcyB1c2VkXG4gKiB3aGVuIG1lYXN1cmluZyBET00gZWxlbWVudHMgYW5kIERPTSBldmVudCBwb2ludHMuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUJveFBvaW50cyhwb2ludCwgdHJhbnNmb3JtUG9pbnQpIHtcbiAgICBpZiAoIXRyYW5zZm9ybVBvaW50KVxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgdmFyIHRvcExlZnQgPSB0cmFuc2Zvcm1Qb2ludCh7IHg6IHBvaW50LmxlZnQsIHk6IHBvaW50LnRvcCB9KTtcbiAgICB2YXIgYm90dG9tUmlnaHQgPSB0cmFuc2Zvcm1Qb2ludCh7IHg6IHBvaW50LnJpZ2h0LCB5OiBwb2ludC5ib3R0b20gfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0b3BMZWZ0LnksXG4gICAgICAgIGxlZnQ6IHRvcExlZnQueCxcbiAgICAgICAgYm90dG9tOiBib3R0b21SaWdodC55LFxuICAgICAgICByaWdodDogYm90dG9tUmlnaHQueCxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBtZWFzdXJlVmlld3BvcnRCb3goaW5zdGFuY2UsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHRyYW5zZm9ybUJveFBvaW50cyhpbnN0YW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdHJhbnNmb3JtUG9pbnQpKTtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVQYWdlQm94KGVsZW1lbnQsIHJvb3RQcm9qZWN0aW9uTm9kZSwgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgdmFyIHZpZXdwb3J0Qm94ID0gbWVhc3VyZVZpZXdwb3J0Qm94KGVsZW1lbnQsIHRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgdmFyIHNjcm9sbCA9IHJvb3RQcm9qZWN0aW9uTm9kZS5zY3JvbGw7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgICB0cmFuc2xhdGVBeGlzKHZpZXdwb3J0Qm94LngsIHNjcm9sbC54KTtcbiAgICAgICAgdHJhbnNsYXRlQXhpcyh2aWV3cG9ydEJveC55LCBzY3JvbGwueSk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3cG9ydEJveDtcbn1cblxudmFyIGVsZW1lbnREcmFnQ29udHJvbHMgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKlxuICovXG4vLyBsZXQgbGF0ZXN0UG9pbnRlckV2ZW50OiBBbnlQb2ludGVyRXZlbnRcbnZhciBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHModmlzdWFsRWxlbWVudCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgZHJhZyBnZXN0dXJlIGxvY2ssIGVuc3VyaW5nIG9ubHkgb25lIGNvbXBvbmVudFxuICAgICAgICAvLyBjYW4gXCJjYXB0dXJlXCIgdGhlIGRyYWcgb2Ygb25lIG9yIGJvdGggYXhlcy5cbiAgICAgICAgLy8gVE9ETzogTG9vayBpbnRvIG1vdmluZyB0aGlzIGludG8gcGFuc2Vzc2lvbj9cbiAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jayA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9yaWdpblBvaW50ID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGVybWl0dGVkIGJvdW5kYXJpZXMgb2YgdHJhdmVsLCBpbiBwaXhlbHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzTXV0YXRlZENvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGVyLWF4aXMgcmVzb2x2ZWQgZWxhc3RpYyB2YWx1ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVsYXN0aWMgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudDtcbiAgICB9XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAob3JpZ2luRXZlbnQsIF9hKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfYyA9IF9iLnNuYXBUb0N1cnNvciwgc25hcFRvQ3Vyc29yID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2M7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEb24ndCBzdGFydCBkcmFnZ2luZyBpZiB0aGlzIGNvbXBvbmVudCBpcyBleGl0aW5nXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcy52aXN1YWxFbGVtZW50LmlzUHJlc2VudCA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBvblNlc3Npb25TdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgLy8gU3RvcCBhbnkgYW5pbWF0aW9ucyBvbiBib3RoIGF4aXMgdmFsdWVzIGltbWVkaWF0ZWx5LiBUaGlzIGFsbG93cyB0aGUgdXNlciB0byB0aHJvdyBhbmQgY2F0Y2hcbiAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAgICBfdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBpZiAoc25hcFRvQ3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc25hcFRvQ3Vyc29yKGV4dHJhY3RFdmVudEluZm8oZXZlbnQsIFwicGFnZVwiKS5wb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvblN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGdyYWIgdGhlIGdsb2JhbCBkcmFnIGdlc3R1cmUgbG9jayAtIG1heWJlIG1ha2UgdGhpcyBwYXJ0IG9mIFBhblNlc3Npb25cbiAgICAgICAgICAgIHZhciBfYiA9IF90aGlzLmdldFByb3BzKCksIGRyYWcgPSBfYi5kcmFnLCBkcmFnUHJvcGFnYXRpb24gPSBfYi5kcmFnUHJvcGFnYXRpb24sIG9uRHJhZ1N0YXJ0ID0gX2Iub25EcmFnU3RhcnQ7XG4gICAgICAgICAgICBpZiAoZHJhZyAmJiAhZHJhZ1Byb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vcGVuR2xvYmFsTG9jaygpO1xuICAgICAgICAgICAgICAgIF90aGlzLm9wZW5HbG9iYWxMb2NrID0gZ2V0R2xvYmFsTG9jayhkcmFnKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkb24gJ3QgaGF2ZSB0aGUgbG9jaywgZG9uJ3Qgc3RhcnQgZHJhZ2dpbmdcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLmlzQW5pbWF0aW9uQmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVjb3JkIGdlc3R1cmUgb3JpZ2luXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKS5nZXQoKSB8fCAwO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSBNb3Rpb25WYWx1ZSBpcyBhIHBlcmNlbnRhZ2UgdmFsdWUgY29udmVydCB0byBweFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZVZhbHVlVHlwZXMucGVyY2VudC50ZXN0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZWFzdXJlZEF4aXMgPSAoX2IgPSAoX2EgPSBfdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYXlvdXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hY3R1YWxbYXhpc107XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlZEF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGhfMSA9IGNhbGNMZW5ndGgobWVhc3VyZWRBeGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBsZW5ndGhfMSAqIChwYXJzZUZsb2F0KGN1cnJlbnQpIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5vcmlnaW5Qb2ludFtheGlzXSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEZpcmUgb25EcmFnU3RhcnQgZXZlbnRcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0ID09PSBudWxsIHx8IG9uRHJhZ1N0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkRyYWdTdGFydChldmVudCwgaW5mbyk7XG4gICAgICAgICAgICAoX2EgPSBfdGhpcy52aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKGV4cG9ydHMuQW5pbWF0aW9uVHlwZS5EcmFnLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uTW92ZSA9IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgLy8gbGF0ZXN0UG9pbnRlckV2ZW50ID0gZXZlbnRcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmdldFByb3BzKCksIGRyYWdQcm9wYWdhdGlvbiA9IF9hLmRyYWdQcm9wYWdhdGlvbiwgZHJhZ0RpcmVjdGlvbkxvY2sgPSBfYS5kcmFnRGlyZWN0aW9uTG9jaywgb25EaXJlY3Rpb25Mb2NrID0gX2Eub25EaXJlY3Rpb25Mb2NrLCBvbkRyYWcgPSBfYS5vbkRyYWc7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3Qgc3VjY2Vzc2Z1bGx5IHJlY2VpdmUgdGhlIGdlc3R1cmUgbG9jaywgZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgaWYgKCFkcmFnUHJvcGFnYXRpb24gJiYgIV90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBpbmZvLm9mZnNldDtcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGRyYWcgZGlyZWN0aW9uIGlmIGRpcmVjdGlvbkxvY2sgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKGRyYWdEaXJlY3Rpb25Mb2NrICYmIF90aGlzLmN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50RGlyZWN0aW9uID0gZ2V0Q3VycmVudERpcmVjdGlvbihvZmZzZXQpO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIHN1Y2Nlc3NmdWxseSBzZXQgYSBkaXJlY3Rpb24sIG5vdGlmeSBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jdXJyZW50RGlyZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRGlyZWN0aW9uTG9jayA9PT0gbnVsbCB8fCBvbkRpcmVjdGlvbkxvY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRGlyZWN0aW9uTG9jayhfdGhpcy5jdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIGVhY2ggcG9pbnQgd2l0aCB0aGUgbGF0ZXN0IHBvc2l0aW9uXG4gICAgICAgICAgICBfdGhpcy51cGRhdGVBeGlzKFwieFwiLCBpbmZvLnBvaW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlQXhpcyhcInlcIiwgaW5mby5wb2ludCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWRlYWxseSB3ZSB3b3VsZCBsZWF2ZSB0aGUgcmVuZGVyZXIgdG8gZmlyZSBuYXR1cmFsbHkgYXQgdGhlIGVuZCBvZlxuICAgICAgICAgICAgICogdGhpcyBmcmFtZSBidXQgaWYgdGhlIGVsZW1lbnQgaXMgYWJvdXQgdG8gY2hhbmdlIGxheW91dCBhcyB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgKiBvZiBhIHJlLXJlbmRlciB3ZSB3YW50IHRvIGVuc3VyZSB0aGUgYnJvd3NlciBjYW4gcmVhZCB0aGUgbGF0ZXN0XG4gICAgICAgICAgICAgKiBib3VuZGluZyBib3ggdG8gZW5zdXJlIHRoZSBwb2ludGVyIGFuZCBlbGVtZW50IGRvbid0IGZhbGwgb3V0IG9mIHN5bmMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF90aGlzLnZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIG11c3QgZmlyZSBhZnRlciB0aGUgc3luY1JlbmRlciBjYWxsIGFzIGl0IG1pZ2h0IHRyaWdnZXIgYSBzdGF0ZVxuICAgICAgICAgICAgICogY2hhbmdlIHdoaWNoIGl0c2VsZiBtaWdodCB0cmlnZ2VyIGEgbGF5b3V0IHVwZGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb25EcmFnID09PSBudWxsIHx8IG9uRHJhZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25EcmFnKGV2ZW50LCBpbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uU2Vzc2lvbkVuZCA9IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0b3AoZXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBhblNlc3Npb24gPSBuZXcgUGFuU2Vzc2lvbihvcmlnaW5FdmVudCwge1xuICAgICAgICAgICAgb25TZXNzaW9uU3RhcnQ6IG9uU2Vzc2lvblN0YXJ0LFxuICAgICAgICAgICAgb25TdGFydDogb25TdGFydCxcbiAgICAgICAgICAgIG9uTW92ZTogb25Nb3ZlLFxuICAgICAgICAgICAgb25TZXNzaW9uRW5kOiBvblNlc3Npb25FbmQsXG4gICAgICAgIH0sIHsgdHJhbnNmb3JtUGFnZVBvaW50OiB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VHJhbnNmb3JtUGFnZVBvaW50KCkgfSk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHZhciBpc0RyYWdnaW5nID0gdGhpcy5pc0RyYWdnaW5nO1xuICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciB2ZWxvY2l0eSA9IGluZm8udmVsb2NpdHk7XG4gICAgICAgIHRoaXMuc3RhcnRBbmltYXRpb24odmVsb2NpdHkpO1xuICAgICAgICB2YXIgb25EcmFnRW5kID0gdGhpcy5nZXRQcm9wcygpLm9uRHJhZ0VuZDtcbiAgICAgICAgb25EcmFnRW5kID09PSBudWxsIHx8IG9uRHJhZ0VuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25EcmFnRW5kKGV2ZW50LCBpbmZvKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24uaXNBbmltYXRpb25CbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5wYW5TZXNzaW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW5kKCk7XG4gICAgICAgIHRoaXMucGFuU2Vzc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGRyYWdQcm9wYWdhdGlvbiA9IHRoaXMuZ2V0UHJvcHMoKS5kcmFnUHJvcGFnYXRpb247XG4gICAgICAgIGlmICghZHJhZ1Byb3BhZ2F0aW9uICYmIHRoaXMub3Blbkdsb2JhbExvY2spIHtcbiAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2soKTtcbiAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2sgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIChfYiA9IHRoaXMudmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNldEFjdGl2ZShleHBvcnRzLkFuaW1hdGlvblR5cGUuRHJhZywgZmFsc2UpO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUudXBkYXRlQXhpcyA9IGZ1bmN0aW9uIChheGlzLCBfcG9pbnQsIG9mZnNldCkge1xuICAgICAgICB2YXIgZHJhZyA9IHRoaXMuZ2V0UHJvcHMoKS5kcmFnO1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3QgZHJhZ2dpbmcgdGhpcyBheGlzLCBkbyBhbiBlYXJseSByZXR1cm4uXG4gICAgICAgIGlmICghb2Zmc2V0IHx8ICFzaG91bGREcmFnKGF4aXMsIGRyYWcsIHRoaXMuY3VycmVudERpcmVjdGlvbikpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm9yaWdpblBvaW50W2F4aXNdICsgb2Zmc2V0W2F4aXNdO1xuICAgICAgICAvLyBBcHBseSBjb25zdHJhaW50c1xuICAgICAgICBpZiAodGhpcy5jb25zdHJhaW50cyAmJiB0aGlzLmNvbnN0cmFpbnRzW2F4aXNdKSB7XG4gICAgICAgICAgICBuZXh0ID0gYXBwbHlDb25zdHJhaW50cyhuZXh0LCB0aGlzLmNvbnN0cmFpbnRzW2F4aXNdLCB0aGlzLmVsYXN0aWNbYXhpc10pO1xuICAgICAgICB9XG4gICAgICAgIGF4aXNWYWx1ZS5zZXQobmV4dCk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5yZXNvbHZlQ29uc3RyYWludHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0UHJvcHMoKSwgZHJhZ0NvbnN0cmFpbnRzID0gX2EuZHJhZ0NvbnN0cmFpbnRzLCBkcmFnRWxhc3RpYyA9IF9hLmRyYWdFbGFzdGljO1xuICAgICAgICB2YXIgbGF5b3V0ID0gKHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uIHx8IHt9KS5sYXlvdXQ7XG4gICAgICAgIHZhciBwcmV2Q29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzO1xuICAgICAgICBpZiAoZHJhZ0NvbnN0cmFpbnRzICYmIGlzUmVmT2JqZWN0KGRyYWdDb25zdHJhaW50cykpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb25zdHJhaW50cykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgPSB0aGlzLnJlc29sdmVSZWZDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRyYWdDb25zdHJhaW50cyAmJiBsYXlvdXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gY2FsY1JlbGF0aXZlQ29uc3RyYWludHMobGF5b3V0LmFjdHVhbCwgZHJhZ0NvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsYXN0aWMgPSByZXNvbHZlRHJhZ0VsYXN0aWMoZHJhZ0VsYXN0aWMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UncmUgb3V0cHV0dGluZyB0byBleHRlcm5hbCBNb3Rpb25WYWx1ZXMsIHdlIHdhbnQgdG8gcmViYXNlIHRoZSBtZWFzdXJlZCBjb25zdHJhaW50c1xuICAgICAgICAgKiBmcm9tIHZpZXdwb3J0LXJlbGF0aXZlIHRvIGNvbXBvbmVudC1yZWxhdGl2ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChwcmV2Q29uc3RyYWludHMgIT09IHRoaXMuY29uc3RyYWludHMgJiZcbiAgICAgICAgICAgIGxheW91dCAmJlxuICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyAmJlxuICAgICAgICAgICAgIXRoaXMuaGFzTXV0YXRlZENvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICBlYWNoQXhpcyhmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29uc3RyYWludHNbYXhpc10gPSByZWJhc2VBeGlzQ29uc3RyYWludHMobGF5b3V0LmFjdHVhbFtheGlzXSwgX3RoaXMuY29uc3RyYWludHNbYXhpc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5yZXNvbHZlUmVmQ29uc3RyYWludHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0UHJvcHMoKSwgY29uc3RyYWludHMgPSBfYS5kcmFnQ29uc3RyYWludHMsIG9uTWVhc3VyZURyYWdDb25zdHJhaW50cyA9IF9hLm9uTWVhc3VyZURyYWdDb25zdHJhaW50cztcbiAgICAgICAgaWYgKCFjb25zdHJhaW50cyB8fCAhaXNSZWZPYmplY3QoY29uc3RyYWludHMpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgY29uc3RyYWludHNFbGVtZW50ID0gY29uc3RyYWludHMuY3VycmVudDtcbiAgICAgICAgaGV5TGlzdGVuLmludmFyaWFudChjb25zdHJhaW50c0VsZW1lbnQgIT09IG51bGwsIFwiSWYgYGRyYWdDb25zdHJhaW50c2AgaXMgc2V0IGFzIGEgUmVhY3QgcmVmLCB0aGF0IHJlZiBtdXN0IGJlIHBhc3NlZCB0byBhbm90aGVyIGNvbXBvbmVudCdzIGByZWZgIHByb3AuXCIpO1xuICAgICAgICB2YXIgcHJvamVjdGlvbiA9IHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uO1xuICAgICAgICAvLyBUT0RPXG4gICAgICAgIGlmICghcHJvamVjdGlvbiB8fCAhcHJvamVjdGlvbi5sYXlvdXQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBjb25zdHJhaW50c0JveCA9IG1lYXN1cmVQYWdlQm94KGNvbnN0cmFpbnRzRWxlbWVudCwgcHJvamVjdGlvbi5yb290LCB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VHJhbnNmb3JtUGFnZVBvaW50KCkpO1xuICAgICAgICB2YXIgbWVhc3VyZWRDb25zdHJhaW50cyA9IGNhbGNWaWV3cG9ydENvbnN0cmFpbnRzKHByb2plY3Rpb24ubGF5b3V0LmFjdHVhbCwgY29uc3RyYWludHNCb3gpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUncyBhbiBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMgbGlzdGVuZXIgd2UgY2FsbCBpdCBhbmRcbiAgICAgICAgICogaWYgZGlmZmVyZW50IGNvbnN0cmFpbnRzIGFyZSByZXR1cm5lZCwgc2V0IGNvbnN0cmFpbnRzIHRvIHRoYXRcbiAgICAgICAgICovXG4gICAgICAgIGlmIChvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIHZhciB1c2VyQ29uc3RyYWludHMgPSBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMoY29udmVydEJveFRvQm91bmRpbmdCb3gobWVhc3VyZWRDb25zdHJhaW50cykpO1xuICAgICAgICAgICAgdGhpcy5oYXNNdXRhdGVkQ29uc3RyYWludHMgPSAhIXVzZXJDb25zdHJhaW50cztcbiAgICAgICAgICAgIGlmICh1c2VyQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlZENvbnN0cmFpbnRzID0gY29udmVydEJvdW5kaW5nQm94VG9Cb3godXNlckNvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVhc3VyZWRDb25zdHJhaW50cztcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24gKHZlbG9jaXR5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0UHJvcHMoKSwgZHJhZyA9IF9hLmRyYWcsIGRyYWdNb21lbnR1bSA9IF9hLmRyYWdNb21lbnR1bSwgZHJhZ0VsYXN0aWMgPSBfYS5kcmFnRWxhc3RpYywgZHJhZ1RyYW5zaXRpb24gPSBfYS5kcmFnVHJhbnNpdGlvbiwgZHJhZ1NuYXBUb09yaWdpbiA9IF9hLmRyYWdTbmFwVG9PcmlnaW4sIG9uRHJhZ1RyYW5zaXRpb25FbmQgPSBfYS5vbkRyYWdUcmFuc2l0aW9uRW5kO1xuICAgICAgICB2YXIgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzIHx8IHt9O1xuICAgICAgICB2YXIgbW9tZW50dW1BbmltYXRpb25zID0gZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBfdGhpcy5jdXJyZW50RGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uID0gKF9hID0gY29uc3RyYWludHMgPT09IG51bGwgfHwgY29uc3RyYWludHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnN0cmFpbnRzW2F4aXNdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICAgICAgICAgIGlmIChkcmFnU25hcFRvT3JpZ2luKVxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7IG1pbjogMCwgbWF4OiAwIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE92ZXJkYW1wIHRoZSBib3VuZGFyeSBzcHJpbmcgaWYgYGRyYWdFbGFzdGljYCBpcyBkaXNhYmxlZC4gVGhlcmUncyBzdGlsbCBhIGZyYW1lXG4gICAgICAgICAgICAgKiBvZiBzcHJpbmcgYW5pbWF0aW9ucyBzbyB3ZSBzaG91bGQgbG9vayBpbnRvIGFkZGluZyBhIGRpc2FibGUgc3ByaW5nIG9wdGlvbiB0byBgaW5lcnRpYWAuXG4gICAgICAgICAgICAgKiBXZSBjb3VsZCBkbyBzb21ldGhpbmcgaGVyZSB3aGVyZSB3ZSBhZmZlY3QgdGhlIGBib3VuY2VTdGlmZm5lc3NgIGFuZCBgYm91bmNlRGFtcGluZ2BcbiAgICAgICAgICAgICAqIHVzaW5nIHRoZSB2YWx1ZSBvZiBgZHJhZ0VsYXN0aWNgLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgYm91bmNlU3RpZmZuZXNzID0gZHJhZ0VsYXN0aWMgPyAyMDAgOiAxMDAwMDAwO1xuICAgICAgICAgICAgdmFyIGJvdW5jZURhbXBpbmcgPSBkcmFnRWxhc3RpYyA/IDQwIDogMTAwMDAwMDA7XG4gICAgICAgICAgICB2YXIgaW5lcnRpYSA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHsgdHlwZTogXCJpbmVydGlhXCIsIHZlbG9jaXR5OiBkcmFnTW9tZW50dW0gPyB2ZWxvY2l0eVtheGlzXSA6IDAsIGJvdW5jZVN0aWZmbmVzczogYm91bmNlU3RpZmZuZXNzLCBib3VuY2VEYW1waW5nOiBib3VuY2VEYW1waW5nLCB0aW1lQ29uc3RhbnQ6IDc1MCwgcmVzdERlbHRhOiAxLCByZXN0U3BlZWQ6IDEwIH0sIGRyYWdUcmFuc2l0aW9uKSwgdHJhbnNpdGlvbik7XG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgYW5pbWF0aW5nIG9uIGFuIGV4dGVybmFsbHktcHJvdmlkZWQgYE1vdGlvblZhbHVlYCB3ZSBjYW4gdXNlIHRoZVxuICAgICAgICAgICAgLy8gY29tcG9uZW50J3MgYW5pbWF0aW9uIGNvbnRyb2xzIHdoaWNoIHdpbGwgaGFuZGxlIGludGVyYWN0aW9ucyB3aXRoIHdoaWxlSG92ZXIgKGV0YyksXG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UganVzdCBoYXZlIHRvIGFuaW1hdGUgdGhlIGBNb3Rpb25WYWx1ZWAgaXRzZWxmLlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0YXJ0QXhpc1ZhbHVlQW5pbWF0aW9uKGF4aXMsIGluZXJ0aWEpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gUnVuIGFsbCBhbmltYXRpb25zIGFuZCB0aGVuIHJlc29sdmUgdGhlIG5ldyBkcmFnIGNvbnN0cmFpbnRzLlxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobW9tZW50dW1BbmltYXRpb25zKS50aGVuKG9uRHJhZ1RyYW5zaXRpb25FbmQpO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc3RhcnRBeGlzVmFsdWVBbmltYXRpb24gPSBmdW5jdGlvbiAoYXhpcywgdHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgYXhpc1ZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgIHJldHVybiBzdGFydEFuaW1hdGlvbihheGlzLCBheGlzVmFsdWUsIDAsIHRyYW5zaXRpb24pO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHsgcmV0dXJuIF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKS5zdG9wKCk7IH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRHJhZyB3b3JrcyBkaWZmZXJlbnRseSBkZXBlbmRpbmcgb24gd2hpY2ggcHJvcHMgYXJlIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogLSBJZiBfZHJhZ1ggYW5kIF9kcmFnWSBhcmUgcHJvdmlkZWQsIHdlIG91dHB1dCB0aGUgZ2VzdHVyZSBkZWx0YSBkaXJlY3RseSB0byB0aG9zZSBtb3Rpb24gdmFsdWVzLlxuICAgICAqIC0gT3RoZXJ3aXNlLCB3ZSBhcHBseSB0aGUgZGVsdGEgdG8gdGhlIHgveSBtb3Rpb24gdmFsdWVzLlxuICAgICAqL1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmdldEF4aXNNb3Rpb25WYWx1ZSA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBkcmFnS2V5ID0gXCJfZHJhZ1wiICsgYXhpcy50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB2YXIgZXh0ZXJuYWxNb3Rpb25WYWx1ZSA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRQcm9wcygpW2RyYWdLZXldO1xuICAgICAgICByZXR1cm4gZXh0ZXJuYWxNb3Rpb25WYWx1ZVxuICAgICAgICAgICAgPyBleHRlcm5hbE1vdGlvblZhbHVlXG4gICAgICAgICAgICA6IHRoaXMudmlzdWFsRWxlbWVudC5nZXRWYWx1ZShheGlzLCAoX2IgPSAoX2EgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKS5pbml0aWFsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbYXhpc10pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc25hcFRvQ3Vyc29yID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICB2YXIgZHJhZyA9IF90aGlzLmdldFByb3BzKCkuZHJhZztcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBkcmFnZ2luZyB0aGlzIGF4aXMsIGRvIGFuIGVhcmx5IHJldHVybi5cbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBfdGhpcy5jdXJyZW50RGlyZWN0aW9uKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgcHJvamVjdGlvbiA9IF90aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgICAgIHZhciBheGlzVmFsdWUgPSBfdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgICAgICBpZiAocHJvamVjdGlvbiAmJiBwcm9qZWN0aW9uLmxheW91dCkge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IHByb2plY3Rpb24ubGF5b3V0LmFjdHVhbFtheGlzXSwgbWluID0gX2EubWluLCBtYXggPSBfYS5tYXg7XG4gICAgICAgICAgICAgICAgYXhpc1ZhbHVlLnNldChwb2ludFtheGlzXSAtIHBvcG1vdGlvbi5taXgobWluLCBtYXgsIDAuNSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHZpZXdwb3J0IHJlc2l6ZXMgd2Ugd2FudCB0byBjaGVjayBpZiB0aGUgbWVhc3VyZWQgY29uc3RyYWludHNcbiAgICAgKiBoYXZlIGNoYW5nZWQgYW5kLCBpZiBzbywgcmVwb3NpdGlvbiB0aGUgZWxlbWVudCB3aXRoaW4gdGhvc2UgbmV3IGNvbnN0cmFpbnRzXG4gICAgICogcmVsYXRpdmUgdG8gd2hlcmUgaXQgd2FzIGJlZm9yZSB0aGUgcmVzaXplLlxuICAgICAqL1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnNjYWxlUG9zaXRpb25XaXRoaW5Db25zdHJhaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgX2IgPSB0aGlzLmdldFByb3BzKCksIGRyYWcgPSBfYi5kcmFnLCBkcmFnQ29uc3RyYWludHMgPSBfYi5kcmFnQ29uc3RyYWludHM7XG4gICAgICAgIHZhciBwcm9qZWN0aW9uID0gdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb247XG4gICAgICAgIGlmICghaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSB8fCAhcHJvamVjdGlvbiB8fCAhdGhpcy5jb25zdHJhaW50cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3AgY3VycmVudCBhbmltYXRpb25zIGFzIHRoZXJlIGNhbiBiZSB2aXN1YWwgZ2xpdGNoaW5nIGlmIHdlIHRyeSB0byBkb1xuICAgICAgICAgKiB0aGlzIG1pZC1hbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVjb3JkIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZVxuICAgICAgICAgKiBjb25zdHJhaW50cyBib3ggYW5kIHNhdmUgYXMgYSBwcm9ncmVzcyB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBib3hQcm9ncmVzcyA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBlYWNoQXhpcyhmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICAgICAgdmFyIGF4aXNWYWx1ZSA9IF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgIGlmIChheGlzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGF0ZXN0ID0gYXhpc1ZhbHVlLmdldCgpO1xuICAgICAgICAgICAgICAgIGJveFByb2dyZXNzW2F4aXNdID0gY2FsY09yaWdpbih7IG1pbjogbGF0ZXN0LCBtYXg6IGxhdGVzdCB9LCBfdGhpcy5jb25zdHJhaW50c1theGlzXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHRoZSBsYXlvdXQgb2YgdGhpcyBlbGVtZW50IGFuZCByZXNvbHZlIHRoZSBsYXRlc3QgZHJhZyBjb25zdHJhaW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHRyYW5zZm9ybVRlbXBsYXRlID0gdGhpcy52aXN1YWxFbGVtZW50LmdldFByb3BzKCkudHJhbnNmb3JtVGVtcGxhdGU7XG4gICAgICAgIHRoaXMudmlzdWFsRWxlbWVudC5nZXRJbnN0YW5jZSgpLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHt9LCBcIlwiKVxuICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgKF9hID0gcHJvamVjdGlvbi5yb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgIHByb2plY3Rpb24udXBkYXRlTGF5b3V0KCk7XG4gICAgICAgIHRoaXMucmVzb2x2ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3IgZWFjaCBheGlzLCBjYWxjdWxhdGUgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIGxheW91dCBheGlzXG4gICAgICAgICAqIHdpdGhpbiB0aGUgbmV3IGNvbnN0cmFpbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBudWxsKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGN1bGF0ZSBhIG5ldyB0cmFuc2Zvcm0gYmFzZWQgb24gdGhlIHByZXZpb3VzIGJveCBwcm9ncmVzc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgYXhpc1ZhbHVlID0gX3RoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuY29uc3RyYWludHNbYXhpc10sIG1pbiA9IF9hLm1pbiwgbWF4ID0gX2EubWF4O1xuICAgICAgICAgICAgYXhpc1ZhbHVlLnNldChwb3Btb3Rpb24ubWl4KG1pbiwgbWF4LCBib3hQcm9ncmVzc1theGlzXSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmFkZExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBlbGVtZW50RHJhZ0NvbnRyb2xzLnNldCh0aGlzLnZpc3VhbEVsZW1lbnQsIHRoaXMpO1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQXR0YWNoIGEgcG9pbnRlcmRvd24gZXZlbnQgbGlzdGVuZXIgb24gdGhpcyBET00gZWxlbWVudCB0byBpbml0aWF0ZSBkcmFnIHRyYWNraW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHN0b3BQb2ludGVyTGlzdGVuZXIgPSBhZGRQb2ludGVyRXZlbnQoZWxlbWVudCwgXCJwb2ludGVyZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmdldFByb3BzKCksIGRyYWcgPSBfYS5kcmFnLCBfYiA9IF9hLmRyYWdMaXN0ZW5lciwgZHJhZ0xpc3RlbmVyID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYjtcbiAgICAgICAgICAgIGRyYWcgJiYgZHJhZ0xpc3RlbmVyICYmIF90aGlzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtZWFzdXJlRHJhZ0NvbnN0cmFpbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRyYWdDb25zdHJhaW50cyA9IF90aGlzLmdldFByb3BzKCkuZHJhZ0NvbnN0cmFpbnRzO1xuICAgICAgICAgICAgaWYgKGlzUmVmT2JqZWN0KGRyYWdDb25zdHJhaW50cykpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25zdHJhaW50cyA9IF90aGlzLnJlc29sdmVSZWZDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgcHJvamVjdGlvbiA9IHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uO1xuICAgICAgICB2YXIgc3RvcE1lYXN1cmVMYXlvdXRMaXN0ZW5lciA9IHByb2plY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcihcIm1lYXN1cmVcIiwgbWVhc3VyZURyYWdDb25zdHJhaW50cyk7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uICYmICFwcm9qZWN0aW9uLmxheW91dCkge1xuICAgICAgICAgICAgKF9hID0gcHJvamVjdGlvbi5yb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnVwZGF0ZUxheW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIG1lYXN1cmVEcmFnQ29uc3RyYWludHMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEF0dGFjaCBhIHdpbmRvdyByZXNpemUgbGlzdGVuZXIgdG8gc2NhbGUgdGhlIGRyYWdnYWJsZSB0YXJnZXQgd2l0aGluIGl0cyBkZWZpbmVkXG4gICAgICAgICAqIGNvbnN0cmFpbnRzIGFzIHRoZSB3aW5kb3cgcmVzaXplcy5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBzdG9wUmVzaXplTGlzdGVuZXIgPSBhZGREb21FdmVudCh3aW5kb3csIFwicmVzaXplXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgZWxlbWVudCdzIGxheW91dCBjaGFuZ2VzLCBjYWxjdWxhdGUgdGhlIGRlbHRhIGFuZCBhcHBseSB0aGF0IHRvXG4gICAgICAgICAqIHRoZSBkcmFnIGdlc3R1cmUncyBvcmlnaW4gcG9pbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJkaWRVcGRhdGVcIiwgKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gX2EuZGVsdGEsIGhhc0xheW91dENoYW5nZWQgPSBfYS5oYXNMYXlvdXRDaGFuZ2VkO1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcgJiYgaGFzTGF5b3V0Q2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtb3Rpb25WYWx1ZSA9IF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3Rpb25WYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3JpZ2luUG9pbnRbYXhpc10gKz0gZGVsdGFbYXhpc10udHJhbnNsYXRlO1xuICAgICAgICAgICAgICAgICAgICBtb3Rpb25WYWx1ZS5zZXQobW90aW9uVmFsdWUuZ2V0KCkgKyBkZWx0YVtheGlzXS50cmFuc2xhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLnZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9wUmVzaXplTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BQb2ludGVyTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BNZWFzdXJlTGF5b3V0TGlzdGVuZXIoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmdldFByb3BzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgdmFyIF9hID0gcHJvcHMuZHJhZywgZHJhZyA9IF9hID09PSB2b2lkIDAgPyBmYWxzZSA6IF9hLCBfYiA9IHByb3BzLmRyYWdEaXJlY3Rpb25Mb2NrLCBkcmFnRGlyZWN0aW9uTG9jayA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iLCBfYyA9IHByb3BzLmRyYWdQcm9wYWdhdGlvbiwgZHJhZ1Byb3BhZ2F0aW9uID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2MsIF9kID0gcHJvcHMuZHJhZ0NvbnN0cmFpbnRzLCBkcmFnQ29uc3RyYWludHMgPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZCwgX2UgPSBwcm9wcy5kcmFnRWxhc3RpYywgZHJhZ0VsYXN0aWMgPSBfZSA9PT0gdm9pZCAwID8gZGVmYXVsdEVsYXN0aWMgOiBfZSwgX2YgPSBwcm9wcy5kcmFnTW9tZW50dW0sIGRyYWdNb21lbnR1bSA9IF9mID09PSB2b2lkIDAgPyB0cnVlIDogX2Y7XG4gICAgICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcHJvcHMpLCB7IGRyYWc6IGRyYWcsIGRyYWdEaXJlY3Rpb25Mb2NrOiBkcmFnRGlyZWN0aW9uTG9jaywgZHJhZ1Byb3BhZ2F0aW9uOiBkcmFnUHJvcGFnYXRpb24sIGRyYWdDb25zdHJhaW50czogZHJhZ0NvbnN0cmFpbnRzLCBkcmFnRWxhc3RpYzogZHJhZ0VsYXN0aWMsIGRyYWdNb21lbnR1bTogZHJhZ01vbWVudHVtIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHM7XG59KCkpO1xuZnVuY3Rpb24gc2hvdWxkRHJhZyhkaXJlY3Rpb24sIGRyYWcsIGN1cnJlbnREaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gKChkcmFnID09PSB0cnVlIHx8IGRyYWcgPT09IGRpcmVjdGlvbikgJiZcbiAgICAgICAgKGN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwgfHwgY3VycmVudERpcmVjdGlvbiA9PT0gZGlyZWN0aW9uKSk7XG59XG4vKipcbiAqIEJhc2VkIG9uIGFuIHgveSBvZmZzZXQgZGV0ZXJtaW5lIHRoZSBjdXJyZW50IGRyYWcgZGlyZWN0aW9uLiBJZiBib3RoIGF4aXMnIG9mZnNldHMgYXJlIGxvd2VyXG4gKiB0aGFuIHRoZSBwcm92aWRlZCB0aHJlc2hvbGQsIHJldHVybiBgbnVsbGAuXG4gKlxuICogQHBhcmFtIG9mZnNldCAtIFRoZSB4L3kgb2Zmc2V0IGZyb20gb3JpZ2luLlxuICogQHBhcmFtIGxvY2tUaHJlc2hvbGQgLSAoT3B0aW9uYWwpIC0gdGhlIG1pbmltdW0gYWJzb2x1dGUgb2Zmc2V0IGJlZm9yZSB3ZSBjYW4gZGV0ZXJtaW5lIGEgZHJhZyBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnREaXJlY3Rpb24ob2Zmc2V0LCBsb2NrVGhyZXNob2xkKSB7XG4gICAgaWYgKGxvY2tUaHJlc2hvbGQgPT09IHZvaWQgMCkgeyBsb2NrVGhyZXNob2xkID0gMTA7IH1cbiAgICB2YXIgZGlyZWN0aW9uID0gbnVsbDtcbiAgICBpZiAoTWF0aC5hYnMob2Zmc2V0LnkpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInlcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoTWF0aC5hYnMob2Zmc2V0LngpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInhcIjtcbiAgICB9XG4gICAgcmV0dXJuIGRpcmVjdGlvbjtcbn1cblxuLyoqXG4gKiBBIGhvb2sgdGhhdCBhbGxvd3MgYW4gZWxlbWVudCB0byBiZSBkcmFnZ2VkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VEcmFnKHByb3BzKSB7XG4gICAgdmFyIGdyb3VwRHJhZ0NvbnRyb2xzID0gcHJvcHMuZHJhZ0NvbnRyb2xzLCB2aXN1YWxFbGVtZW50ID0gcHJvcHMudmlzdWFsRWxlbWVudDtcbiAgICB2YXIgZHJhZ0NvbnRyb2xzID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHModmlzdWFsRWxlbWVudCk7IH0pO1xuICAgIC8vIElmIHdlJ3ZlIGJlZW4gcHJvdmlkZWQgYSBEcmFnQ29udHJvbHMgZm9yIG1hbnVhbCBjb250cm9sIG92ZXIgdGhlIGRyYWcgZ2VzdHVyZSxcbiAgICAvLyBzdWJzY3JpYmUgdGhpcyBjb21wb25lbnQgdG8gaXQgb24gbW91bnQuXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdyb3VwRHJhZ0NvbnRyb2xzICYmIGdyb3VwRHJhZ0NvbnRyb2xzLnN1YnNjcmliZShkcmFnQ29udHJvbHMpOyB9LCBbZHJhZ0NvbnRyb2xzLCBncm91cERyYWdDb250cm9sc10pO1xuICAgIC8vIEFwcGx5IHRoZSBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGVsZW1lbnRcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZHJhZ0NvbnRyb2xzLmFkZExpc3RlbmVycygpOyB9LCBbZHJhZ0NvbnRyb2xzXSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBoYW5kbGVycyAtXG4gKiBAcGFyYW0gcmVmIC1cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIEN1cnJlbnRseSB0aGlzIHNldHMgbmV3IHBhbiBnZXN0dXJlIGZ1bmN0aW9ucyBldmVyeSByZW5kZXIuIFRoZSBtZW1vIHJvdXRlIGhhcyBiZWVuIGV4cGxvcmVkXG4gKiBpbiB0aGUgcGFzdCBidXQgdWx0aW1hdGVseSB3ZSdyZSBzdGlsbCBjcmVhdGluZyBuZXcgZnVuY3Rpb25zIGV2ZXJ5IHJlbmRlci4gQW4gb3B0aW1pc2F0aW9uXG4gKiB0byBleHBsb3JlIGlzIGNyZWF0aW5nIHRoZSBwYW4gZ2VzdHVyZXMgYW5kIGxvYWRpbmcgdGhlbSBpbnRvIGEgYHJlZmAuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZVBhbkdlc3R1cmUoX2EpIHtcbiAgICB2YXIgb25QYW4gPSBfYS5vblBhbiwgb25QYW5TdGFydCA9IF9hLm9uUGFuU3RhcnQsIG9uUGFuRW5kID0gX2Eub25QYW5FbmQsIG9uUGFuU2Vzc2lvblN0YXJ0ID0gX2Eub25QYW5TZXNzaW9uU3RhcnQsIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50O1xuICAgIHZhciBoYXNQYW5FdmVudHMgPSBvblBhbiB8fCBvblBhblN0YXJ0IHx8IG9uUGFuRW5kIHx8IG9uUGFuU2Vzc2lvblN0YXJ0O1xuICAgIHZhciBwYW5TZXNzaW9uID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIHZhciB0cmFuc2Zvcm1QYWdlUG9pbnQgPSBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLnRyYW5zZm9ybVBhZ2VQb2ludDtcbiAgICB2YXIgaGFuZGxlcnMgPSB7XG4gICAgICAgIG9uU2Vzc2lvblN0YXJ0OiBvblBhblNlc3Npb25TdGFydCxcbiAgICAgICAgb25TdGFydDogb25QYW5TdGFydCxcbiAgICAgICAgb25Nb3ZlOiBvblBhbixcbiAgICAgICAgb25FbmQ6IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgcGFuU2Vzc2lvbi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIG9uUGFuRW5kICYmIG9uUGFuRW5kKGV2ZW50LCBpbmZvKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChwYW5TZXNzaW9uLmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBhblNlc3Npb24uY3VycmVudC51cGRhdGVIYW5kbGVycyhoYW5kbGVycyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGV2ZW50KSB7XG4gICAgICAgIHBhblNlc3Npb24uY3VycmVudCA9IG5ldyBQYW5TZXNzaW9uKGV2ZW50LCBoYW5kbGVycywge1xuICAgICAgICAgICAgdHJhbnNmb3JtUGFnZVBvaW50OiB0cmFuc2Zvcm1QYWdlUG9pbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZG93blwiLCBoYXNQYW5FdmVudHMgJiYgb25Qb2ludGVyRG93bik7XG4gICAgdXNlVW5tb3VudEVmZmVjdChmdW5jdGlvbiAoKSB7IHJldHVybiBwYW5TZXNzaW9uLmN1cnJlbnQgJiYgcGFuU2Vzc2lvbi5jdXJyZW50LmVuZCgpOyB9KTtcbn1cblxudmFyIGRyYWcgPSB7XG4gICAgcGFuOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VQYW5HZXN0dXJlKSxcbiAgICBkcmFnOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VEcmFnKSxcbn07XG5cbnZhciBuYW1lcyA9IFtcbiAgICBcIkxheW91dE1lYXN1cmVcIixcbiAgICBcIkJlZm9yZUxheW91dE1lYXN1cmVcIixcbiAgICBcIkxheW91dFVwZGF0ZVwiLFxuICAgIFwiVmlld3BvcnRCb3hVcGRhdGVcIixcbiAgICBcIlVwZGF0ZVwiLFxuICAgIFwiUmVuZGVyXCIsXG4gICAgXCJBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwiTGF5b3V0QW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIkFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJMYXlvdXRBbmltYXRpb25TdGFydFwiLFxuICAgIFwiU2V0QXhpc1RhcmdldFwiLFxuICAgIFwiVW5tb3VudFwiLFxuXTtcbmZ1bmN0aW9uIGNyZWF0ZUxpZmVjeWNsZXMoKSB7XG4gICAgdmFyIG1hbmFnZXJzID0gbmFtZXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7IH0pO1xuICAgIHZhciBwcm9wU3Vic2NyaXB0aW9ucyA9IHt9O1xuICAgIHZhciBsaWZlY3ljbGVzID0ge1xuICAgICAgICBjbGVhckFsbExpc3RlbmVyczogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFuYWdlcnMuZm9yRWFjaChmdW5jdGlvbiAobWFuYWdlcikgeyByZXR1cm4gbWFuYWdlci5jbGVhcigpOyB9KTsgfSxcbiAgICAgICAgdXBkYXRlUHJvcExpc3RlbmVyczogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciBvbiA9IFwib25cIiArIG5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BMaXN0ZW5lciA9IHByb3BzW29uXTtcbiAgICAgICAgICAgICAgICAvLyBVbnN1YnNjcmliZSBleGlzdGluZyBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAoX2EgPSBwcm9wU3Vic2NyaXB0aW9uc1tuYW1lXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwocHJvcFN1YnNjcmlwdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHByb3BMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wU3Vic2NyaXB0aW9uc1tuYW1lXSA9IGxpZmVjeWNsZXNbb25dKHByb3BMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBtYW5hZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChtYW5hZ2VyLCBpKSB7XG4gICAgICAgIGxpZmVjeWNsZXNbXCJvblwiICsgbmFtZXNbaV1dID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIG1hbmFnZXIuYWRkKGhhbmRsZXIpOyB9O1xuICAgICAgICBsaWZlY3ljbGVzW1wibm90aWZ5XCIgKyBuYW1lc1tpXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFuYWdlci5ub3RpZnkuYXBwbHkobWFuYWdlciwgdHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKGFyZ3MpLCBmYWxzZSkpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBsaWZlY3ljbGVzO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMoZWxlbWVudCwgbmV4dCwgcHJldikge1xuICAgIHZhciBfYTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV4dCkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gbmV4dFtrZXldO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gcHJldltrZXldO1xuICAgICAgICBpZiAoaXNNb3Rpb25WYWx1ZShuZXh0VmFsdWUpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBtb3Rpb24gdmFsdWUgZm91bmQgaW4gcHJvcHMgb3Igc3R5bGUsIHdlIHdhbnQgdG8gYWRkIGl0XG4gICAgICAgICAgICAgKiB0byBvdXIgdmlzdWFsIGVsZW1lbnQncyBtb3Rpb24gdmFsdWUgbWFwLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbmV4dFZhbHVlKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGluY29taW5nIG1vdGlvbiB2YWx1ZSB3aXRoIHRoaXMgdmVyc2lvblxuICAgICAgICAgICAgICogYW5kIHdhcm4gYWdhaW5zdCBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKG5leHRWYWx1ZS52ZXJzaW9uID09PSBcIjYuNC4xXCIsIFwiQXR0ZW1wdGluZyB0byBtaXggRnJhbWVyIE1vdGlvbiB2ZXJzaW9ucyBcIi5jb25jYXQobmV4dFZhbHVlLnZlcnNpb24sIFwiIHdpdGggNi40LjEgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNNb3Rpb25WYWx1ZShwcmV2VmFsdWUpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3JlIHN3YXBwaW5nIHRvIGEgbmV3IG1vdGlvbiB2YWx1ZSwgY3JlYXRlIGEgbmV3IG1vdGlvbiB2YWx1ZVxuICAgICAgICAgICAgICogZnJvbSB0aGF0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZShuZXh0VmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2VmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgZmxhdCB2YWx1ZSB0aGF0IGhhcyBjaGFuZ2VkLCB1cGRhdGUgdGhlIG1vdGlvbiB2YWx1ZVxuICAgICAgICAgICAgICogb3IgY3JlYXRlIG9uZSBpZiBpdCBkb2Vzbid0IGV4aXN0LiBXZSBvbmx5IHdhbnQgdG8gZG8gdGhpcyBpZiB3ZSdyZVxuICAgICAgICAgICAgICogbm90IGhhbmRsaW5nIHRoZSB2YWx1ZSB3aXRoIG91ciBhbmltYXRpb24gc3RhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc1ZhbHVlKGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IGVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBPbmx5IHVwZGF0ZSB2YWx1ZXMgdGhhdCBhcmVuJ3QgYmVpbmcgYW5pbWF0ZWQgb3IgZXZlbiBsb29rZWQgYXRcbiAgICAgICAgICAgICAgICAhZXhpc3RpbmdWYWx1ZS5oYXNBbmltYXRlZCAmJiBleGlzdGluZ1ZhbHVlLnNldChuZXh0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKChfYSA9IGVsZW1lbnQuZ2V0U3RhdGljVmFsdWUoa2V5KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV4dFZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSGFuZGxlIHJlbW92ZWQgdmFsdWVzXG4gICAgZm9yICh2YXIga2V5IGluIHByZXYpIHtcbiAgICAgICAgaWYgKG5leHRba2V5XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVWYWx1ZShrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dDtcbn1cblxudmFyIHZpc3VhbEVsZW1lbnQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS50cmVlVHlwZSwgdHJlZVR5cGUgPSBfYiA9PT0gdm9pZCAwID8gXCJcIiA6IF9iLCBidWlsZCA9IF9hLmJ1aWxkLCBnZXRCYXNlVGFyZ2V0ID0gX2EuZ2V0QmFzZVRhcmdldCwgbWFrZVRhcmdldEFuaW1hdGFibGUgPSBfYS5tYWtlVGFyZ2V0QW5pbWF0YWJsZSwgbWVhc3VyZVZpZXdwb3J0Qm94ID0gX2EubWVhc3VyZVZpZXdwb3J0Qm94LCByZW5kZXJJbnN0YW5jZSA9IF9hLnJlbmRlciwgcmVhZFZhbHVlRnJvbUluc3RhbmNlID0gX2EucmVhZFZhbHVlRnJvbUluc3RhbmNlLCByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSA9IF9hLnJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlLCBzb3J0Tm9kZVBvc2l0aW9uID0gX2Euc29ydE5vZGVQb3NpdGlvbiwgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzID0gX2Euc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiAoX2EsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IF9hLnBhcmVudCwgcHJvcHMgPSBfYS5wcm9wcywgcHJlc2VuY2VJZCA9IF9hLnByZXNlbmNlSWQsIGJsb2NrSW5pdGlhbEFuaW1hdGlvbiA9IF9hLmJsb2NrSW5pdGlhbEFuaW1hdGlvbiwgdmlzdWFsU3RhdGUgPSBfYS52aXN1YWxTdGF0ZSwgc2hvdWxkUmVkdWNlTW90aW9uID0gX2Euc2hvdWxkUmVkdWNlTW90aW9uO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXRlc3RWYWx1ZXMgPSB2aXN1YWxTdGF0ZS5sYXRlc3RWYWx1ZXMsIHJlbmRlclN0YXRlID0gdmlzdWFsU3RhdGUucmVuZGVyU3RhdGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaW5zdGFuY2Ugb2YgdGhlIHJlbmRlci1zcGVjaWZpYyBub2RlIHRoYXQgd2lsbCBiZSBoeWRyYXRlZCBieSB0aGVcbiAgICAgICAgICogZXhwb3NlZCBSZWFjdCByZWYuIFNvIGZvciBleGFtcGxlLCB0aGlzIHZpc3VhbCBlbGVtZW50IGNhbiBob3N0IGFcbiAgICAgICAgICogSFRNTEVsZW1lbnQsIHBsYWluIG9iamVjdCwgb3IgVGhyZWUuanMgb2JqZWN0LiBUaGUgZnVuY3Rpb25zIHByb3ZpZGVkXG4gICAgICAgICAqIGluIFZpc3VhbEVsZW1lbnRDb25maWcgYWxsb3cgdXMgdG8gaW50ZXJmYWNlIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBpbnN0YW5jZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hbmFnZXMgdGhlIHN1YnNjcmlwdGlvbnMgZm9yIGEgdmlzdWFsIGVsZW1lbnQncyBsaWZlY3ljbGUsIGZvciBpbnN0YW5jZVxuICAgICAgICAgKiBvblJlbmRlclxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGxpZmVjeWNsZXMgPSBjcmVhdGVMaWZlY3ljbGVzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG1hcCBvZiBhbGwgbW90aW9uIHZhbHVlcyBhdHRhY2hlZCB0byB0aGlzIHZpc3VhbCBlbGVtZW50LiBNb3Rpb25cbiAgICAgICAgICogdmFsdWVzIGFyZSBzb3VyY2Ugb2YgdHJ1dGggZm9yIGFueSBnaXZlbiBhbmltYXRlZCB2YWx1ZS4gQSBtb3Rpb25cbiAgICAgICAgICogdmFsdWUgbWlnaHQgYmUgcHJvdmlkZWQgZXh0ZXJuYWxseSBieSB0aGUgY29tcG9uZW50IHZpYSBwcm9wcy5cbiAgICAgICAgICovXG4gICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG1hcCBvZiBldmVyeSBzdWJzY3JpcHRpb24gdGhhdCBiaW5kcyB0aGUgcHJvdmlkZWQgb3IgZ2VuZXJhdGVkXG4gICAgICAgICAqIG1vdGlvbiB2YWx1ZXMgb25DaGFuZ2UgbGlzdGVuZXJzIHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgdmFsdWVTdWJzY3JpcHRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIHByZXZpb3VzbHktcHJvdmlkZWQgbW90aW9uIHZhbHVlcyBhcyByZXR1cm5lZFxuICAgICAgICAgKiBmcm9tIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcy4gV2UgdXNlIHRoZSBrZXlzIGluIGhlcmUgdG8gZGV0ZXJtaW5lXG4gICAgICAgICAqIGlmIGFueSBtb3Rpb24gdmFsdWVzIG5lZWQgdG8gYmUgcmVtb3ZlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBwcmV2TW90aW9uVmFsdWVzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHZhbHVlcyBhcmUgcmVtb3ZlZCBmcm9tIGFsbCBhbmltYXRpb24gcHJvcHMgd2UgbmVlZCB0byBzZWFyY2hcbiAgICAgICAgICogZm9yIGEgZmFsbGJhY2sgdmFsdWUgdG8gYW5pbWF0ZSB0by4gVGhlc2UgdmFsdWVzIGFyZSB0cmFja2VkIGluIGJhc2VUYXJnZXQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgYmFzZVRhcmdldCA9IHRzbGliLl9fYXNzaWduKHt9LCBsYXRlc3RWYWx1ZXMpO1xuICAgICAgICAvLyBJbnRlcm5hbCBtZXRob2RzID09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAvKipcbiAgICAgICAgICogT24gbW91bnQsIHRoaXMgd2lsbCBiZSBoeWRyYXRlZCB3aXRoIGEgY2FsbGJhY2sgdG8gZGlzY29ubmVjdFxuICAgICAgICAgKiB0aGlzIHZpc3VhbCBlbGVtZW50IGZyb20gaXRzIHBhcmVudCBvbiB1bm1vdW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHJlbW92ZUZyb21WYXJpYW50VHJlZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciB0aGUgZWxlbWVudCB3aXRoIHRoZSBsYXRlc3Qgc3R5bGVzIG91dHNpZGUgb2YgdGhlIFJlYWN0XG4gICAgICAgICAqIHJlbmRlciBsaWZlY3ljbGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIGlmICghaW5zdGFuY2UgfHwgIWlzTW91bnRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0cmlnZ2VyQnVpbGQoKTtcbiAgICAgICAgICAgIHJlbmRlckluc3RhbmNlKGluc3RhbmNlLCByZW5kZXJTdGF0ZSwgcHJvcHMuc3R5bGUsIGVsZW1lbnQucHJvamVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdHJpZ2dlckJ1aWxkKCkge1xuICAgICAgICAgICAgYnVpbGQoZWxlbWVudCwgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgICAgIGxpZmVjeWNsZXMubm90aWZ5VXBkYXRlKGxhdGVzdFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBiaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlT25DaGFuZ2UgPSB2YWx1ZS5vbkNoYW5nZShmdW5jdGlvbiAobGF0ZXN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsYXRlc3RWYWx1ZXNba2V5XSA9IGxhdGVzdFZhbHVlO1xuICAgICAgICAgICAgICAgIHByb3BzLm9uVXBkYXRlICYmIHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnVwZGF0ZSh1cGRhdGUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHJlbW92ZU9uUmVuZGVyUmVxdWVzdCA9IHZhbHVlLm9uUmVuZGVyUmVxdWVzdChlbGVtZW50LnNjaGVkdWxlUmVuZGVyKTtcbiAgICAgICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5zZXQoa2V5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlT25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICByZW1vdmVPblJlbmRlclJlcXVlc3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbnkgbW90aW9uIHZhbHVlcyB0aGF0IGFyZSBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB3aGVuIGNyZWF0ZWRcbiAgICAgICAgICogYXJlbid0IHlldCBib3VuZCB0byB0aGUgZWxlbWVudCwgYXMgdGhpcyB3b3VsZCB0ZWNobmljYWxseSBiZSBpbXB1cmUuXG4gICAgICAgICAqIEhvd2V2ZXIsIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgbW90aW9uIHZhbHVlcyBhbmQgc2V0IHRoZW0gdG8gdGhlXG4gICAgICAgICAqIGluaXRpYWwgdmFsdWVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogVGhpcyBpcyBpbXB1cmUgYW5kIHdlIHNob3VsZCBsb29rIGF0IGNoYW5naW5nIHRoaXMgdG8gcnVuIG9uIG1vdW50LlxuICAgICAgICAgKiBEb2luZyBzbyB3aWxsIGJyZWFrIHNvbWUgdGVzdHMgYnV0IHRoaXMgaXNuJ3QgbmVjY2Vzc2FyaWx5IGEgYnJlYWtpbmcgY2hhbmdlLFxuICAgICAgICAgKiBtb3JlIGEgcmVmbGVjdGlvbiBvZiB0aGUgdGVzdC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBpbml0aWFsTW90aW9uVmFsdWVzID0gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGluaXRpYWxNb3Rpb25WYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGluaXRpYWxNb3Rpb25WYWx1ZXNba2V5XTtcbiAgICAgICAgICAgIGlmIChsYXRlc3RWYWx1ZXNba2V5XSAhPT0gdW5kZWZpbmVkICYmIGlzTW90aW9uVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUuc2V0KGxhdGVzdFZhbHVlc1trZXldLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZSB3aGF0IHJvbGUgdGhpcyB2aXN1YWwgZWxlbWVudCBzaG91bGQgdGFrZSBpbiB0aGUgdmFyaWFudCB0cmVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGlzQ29udHJvbGxpbmdWYXJpYW50cyA9IGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKTtcbiAgICAgICAgdmFyIGlzVmFyaWFudE5vZGUgPSBjaGVja0lmVmFyaWFudE5vZGUocHJvcHMpO1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHsgdHJlZVR5cGU6IHRyZWVUeXBlLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBpcyBhIG1pcnJvciBvZiB0aGUgaW50ZXJuYWwgaW5zdGFuY2UgcHJvcCwgd2hpY2gga2VlcHNcbiAgICAgICAgICAgICAqIFZpc3VhbEVsZW1lbnQgdHlwZS1jb21wYXRpYmxlIHdpdGggUmVhY3QncyBSZWZPYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGN1cnJlbnQ6IG51bGwsIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgZGVwdGggb2YgdGhpcyB2aXN1YWwgZWxlbWVudCB3aXRoaW4gdGhlIHZpc3VhbCBlbGVtZW50IHRyZWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlcHRoOiBwYXJlbnQgPyBwYXJlbnQuZGVwdGggKyAxIDogMCwgcGFyZW50OiBwYXJlbnQsIGNoaWxkcmVuOiBuZXcgU2V0KCksIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwcmVzZW5jZUlkOiBwcmVzZW5jZUlkLCBzaG91bGRSZWR1Y2VNb3Rpb246IHNob3VsZFJlZHVjZU1vdGlvbiwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgY29tcG9uZW50IGlzIHBhcnQgb2YgdGhlIHZhcmlhbnQgdHJlZSwgaXQgc2hvdWxkIHRyYWNrXG4gICAgICAgICAgICAgKiBhbnkgY2hpbGRyZW4gdGhhdCBhcmUgYWxzbyBwYXJ0IG9mIHRoZSB0cmVlLiBUaGlzIGlzIGVzc2VudGlhbGx5XG4gICAgICAgICAgICAgKiBhIHNoYWRvdyB0cmVlIHRvIHNpbXBsaWZ5IGxvZ2ljIGFyb3VuZCBob3cgdG8gc3RhZ2dlciBvdmVyIGNoaWxkcmVuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXJpYW50Q2hpbGRyZW46IGlzVmFyaWFudE5vZGUgPyBuZXcgU2V0KCkgOiB1bmRlZmluZWQsIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaGV0aGVyIHRoaXMgaW5zdGFuY2UgaXMgdmlzaWJsZS4gVGhpcyBjYW4gYmUgY2hhbmdlZCBpbXBlcmF0aXZlbHlcbiAgICAgICAgICAgICAqIGJ5IHRoZSBwcm9qZWN0aW9uIHRyZWUsIGlzIGFuYWxvZ291cyB0byBDU1MncyB2aXNpYmlsaXR5IGluIHRoYXRcbiAgICAgICAgICAgICAqIGhpZGRlbiBlbGVtZW50cyBzaG91bGQgdGFrZSB1cCBsYXlvdXQsIGFuZCBuZWVkcyBlbmFjdGluZyBieSB0aGUgY29uZmlndXJlZFxuICAgICAgICAgICAgICogcmVuZGVyIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpc1Zpc2libGU6IHVuZGVmaW5lZCwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE5vcm1hbGx5LCBpZiBhIGNvbXBvbmVudCBpcyBjb250cm9sbGVkIGJ5IGEgcGFyZW50J3MgdmFyaWFudHMsIGl0IGNhblxuICAgICAgICAgICAgICogcmVseSBvbiB0aGF0IGFuY2VzdG9yIHRvIHRyaWdnZXIgYW5pbWF0aW9ucyBmdXJ0aGVyIGRvd24gdGhlIHRyZWUuXG4gICAgICAgICAgICAgKiBIb3dldmVyLCBpZiBhIGNvbXBvbmVudCBpcyBjcmVhdGVkIGFmdGVyIGl0cyBwYXJlbnQgaXMgbW91bnRlZCwgdGhlIHBhcmVudFxuICAgICAgICAgICAgICogd29uJ3QgdHJpZ2dlciB0aGF0IG1vdW50IGFuaW1hdGlvbiBzbyB0aGUgY2hpbGQgbmVlZHMgdG8uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVE9ETzogVGhpcyBtaWdodCBiZSBiZXR0ZXIgcmVwbGFjZWQgd2l0aCBhIG1ldGhvZCBpc1BhcmVudE1vdW50ZWRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbWFudWFsbHlBbmltYXRlT25Nb3VudDogQm9vbGVhbihwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuaXNNb3VudGVkKCkpLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBjYW4gYmUgc2V0IGJ5IEFuaW1hdGVQcmVzZW5jZSB0byBmb3JjZSBjb21wb25lbnRzIHRoYXQgbW91bnRcbiAgICAgICAgICAgICAqIGF0IHRoZSBzYW1lIHRpbWUgYXMgaXQgdG8gbW91bnQgYXMgaWYgdGhleSBoYXZlIGluaXRpYWw9e2ZhbHNlfSBzZXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGJsb2NrSW5pdGlhbEFuaW1hdGlvbjogYmxvY2tJbml0aWFsQW5pbWF0aW9uLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBjb21wb25lbnQgaGFzIG1vdW50ZWQgeWV0LiBUaGlzIGlzIG1vc3RseSB1c2VkXG4gICAgICAgICAgICAgKiBieSB2YXJpYW50IGNoaWxkcmVuIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgbmVlZCB0byB0cmlnZ2VyIHRoZWlyXG4gICAgICAgICAgICAgKiBvd24gYW5pbWF0aW9ucyBvbiBtb3VudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaXNNb3VudGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBCb29sZWFuKGluc3RhbmNlKTsgfSwgbW91bnQ6IGZ1bmN0aW9uIChuZXdJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBlbGVtZW50LmN1cnJlbnQgPSBuZXdJbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucHJvamVjdGlvbi5tb3VudChuZXdJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc1ZhcmlhbnROb2RlICYmIHBhcmVudCAmJiAhaXNDb250cm9sbGluZ1ZhcmlhbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUZyb21WYXJpYW50VHJlZSA9IHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5hZGRWYXJpYW50Q2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7IHJldHVybiBiaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKTsgfSk7XG4gICAgICAgICAgICAgICAgcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmNoaWxkcmVuLmFkZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldFByb3BzKHByb3BzKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1bm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IGVsZW1lbnQucHJvamVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVubW91bnQoKTtcbiAgICAgICAgICAgICAgICBzeW5jLmNhbmNlbFN5bmMudXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgICAgICAgICAgc3luYy5jYW5jZWxTeW5jLnJlbmRlcihyZW5kZXIpO1xuICAgICAgICAgICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChyZW1vdmUpIHsgcmV0dXJuIHJlbW92ZSgpOyB9KTtcbiAgICAgICAgICAgICAgICByZW1vdmVGcm9tVmFyaWFudFRyZWUgPT09IG51bGwgfHwgcmVtb3ZlRnJvbVZhcmlhbnRUcmVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZW1vdmVGcm9tVmFyaWFudFRyZWUoKTtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuY2hpbGRyZW4uZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGxpZmVjeWNsZXMuY2xlYXJBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZGQgYSBjaGlsZCB2aXN1YWwgZWxlbWVudCB0byBvdXIgc2V0IG9mIGNoaWxkcmVuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRWYXJpYW50Q2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2VzdFZhcmlhbnROb2RlID0gZWxlbWVudC5nZXRDbG9zZXN0VmFyaWFudE5vZGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdFZhcmlhbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGQoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4uZGVsZXRlKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBzb3J0Tm9kZVBvc2l0aW9uOiBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGVzZSBub2RlcyBhcmVuJ3QgZXZlbiBvZiB0aGUgc2FtZSB0eXBlIHdlIGNhbid0IGNvbXBhcmUgdGhlaXIgZGVwdGguXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKCFzb3J0Tm9kZVBvc2l0aW9uIHx8IHRyZWVUeXBlICE9PSBvdGhlci50cmVlVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvcnROb2RlUG9zaXRpb24oZWxlbWVudC5nZXRJbnN0YW5jZSgpLCBvdGhlci5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBjbG9zZXN0IHZhcmlhbnQgbm9kZSBpbiB0aGUgdHJlZSBzdGFydGluZyBmcm9tXG4gICAgICAgICAgICAgKiB0aGlzIHZpc3VhbCBlbGVtZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRDbG9zZXN0VmFyaWFudE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNWYXJpYW50Tm9kZSA/IGVsZW1lbnQgOiBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuZ2V0Q2xvc2VzdFZhcmlhbnROb2RlKCk7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXhwb3NlIHRoZSBsYXRlc3QgbGF5b3V0SWQgcHJvcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TGF5b3V0SWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3BzLmxheW91dElkOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RhbmNlOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0L3NldCB0aGUgbGF0ZXN0IHN0YXRpYyB2YWx1ZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldFN0YXRpY1ZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBsYXRlc3RWYWx1ZXNba2V5XTsgfSwgc2V0U3RhdGljVmFsdWU6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IHJldHVybiAobGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZSk7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3QgbW90aW9uIHZhbHVlIHN0YXRlLiBDdXJyZW50bHkgb25seSB1c2VkIHRvIHRha2VcbiAgICAgICAgICAgICAqIGEgc25hcHNob3Qgb2YgdGhlIHZpc3VhbCBlbGVtZW50IC0gcGVyaGFwcyB0aGlzIGNhbiByZXR1cm4gdGhlIHdob2xlXG4gICAgICAgICAgICAgKiB2aXN1YWwgc3RhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TGF0ZXN0VmFsdWVzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYXRlc3RWYWx1ZXM7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdGhlIHZpc2libGl0eSBvZiB0aGUgdmlzdWFsIGVsZW1lbnQuIElmIGl0J3MgY2hhbmdlZCwgc2NoZWR1bGVcbiAgICAgICAgICAgICAqIGEgcmVuZGVyIHRvIHJlZmxlY3QgdGhlc2UgY2hhbmdlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0VmlzaWJpbGl0eTogZnVuY3Rpb24gKHZpc2liaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pc1Zpc2libGUgPT09IHZpc2liaWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlzVmlzaWJsZSA9IHZpc2liaWxpdHk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1ha2UgYSB0YXJnZXQgYW5pbWF0YWJsZSBieSBQb3Btb3Rpb24uIEZvciBpbnN0YW5jZSwgaWYgd2UncmVcbiAgICAgICAgICAgICAqIHRyeWluZyB0byBhbmltYXRlIHdpZHRoIGZyb20gMTAwcHggdG8gMTAwdncgd2UgbmVlZCB0byBtZWFzdXJlIDEwMHZ3XG4gICAgICAgICAgICAgKiBpbiBwaXhlbHMgdG8gZGV0ZXJtaW5lIHdoYXQgd2UgcmVhbGx5IG5lZWQgdG8gYW5pbWF0ZSB0by4gVGhpcyBpcyBhbHNvXG4gICAgICAgICAgICAgKiBwbHVnZ2FibGUgdG8gc3VwcG9ydCBGcmFtZXIncyBjdXN0b20gdmFsdWUgdHlwZXMgbGlrZSBDb2xvcixcbiAgICAgICAgICAgICAqIGFuZCBDU1MgdmFyaWFibGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtYWtlVGFyZ2V0QW5pbWF0YWJsZTogZnVuY3Rpb24gKHRhcmdldCwgY2FuTXV0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbk11dGF0ZSA9PT0gdm9pZCAwKSB7IGNhbk11dGF0ZSA9IHRydWU7IH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVRhcmdldEFuaW1hdGFibGUoZWxlbWVudCwgdGFyZ2V0LCBwcm9wcywgY2FuTXV0YXRlKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNZWFzdXJlIHRoZSBjdXJyZW50IHZpZXdwb3J0IGJveCB3aXRoIG9yIHdpdGhvdXQgdHJhbnNmb3Jtcy5cbiAgICAgICAgICAgICAqIE9ubHkgbWVhc3VyZXMgYXhpcy1hbGlnbmVkIGJveGVzLCByb3RhdGUgYW5kIHNrZXcgbXVzdCBiZSBtYW51YWxseVxuICAgICAgICAgICAgICogcmVtb3ZlZCB3aXRoIGEgcmUtcmVuZGVyIHRvIHdvcmsuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1lYXN1cmVWaWV3cG9ydEJveDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWFzdXJlVmlld3BvcnRCb3goaW5zdGFuY2UsIHByb3BzKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLy8gTW90aW9uIHZhbHVlcyA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkIGEgbW90aW9uIHZhbHVlIGFuZCBiaW5kIGl0IHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFkZFZhbHVlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyB2YWx1ZSBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNWYWx1ZShrZXkpKVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZVZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBsYXRlc3RWYWx1ZXNba2V5XSA9IHZhbHVlLmdldCgpO1xuICAgICAgICAgICAgICAgIGJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZSBhIG1vdGlvbiB2YWx1ZSBhbmQgdW5iaW5kIGFueSBhY3RpdmUgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVtb3ZlVmFsdWU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFsdWVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIChfYSA9IHZhbHVlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hKCk7XG4gICAgICAgICAgICAgICAgdmFsdWVTdWJzY3JpcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZShrZXksIHJlbmRlclN0YXRlKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVjayB3aGV0aGVyIHdlIGhhdmUgYSBtb3Rpb24gdmFsdWUgZm9yIHRoaXMga2V5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGhhc1ZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB2YWx1ZXMuaGFzKGtleSk7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgYSBtb3Rpb24gdmFsdWUgZm9yIHRoaXMga2V5LiBJZiBjYWxsZWQgd2l0aCBhIGRlZmF1bHRcbiAgICAgICAgICAgICAqIHZhbHVlLCB3ZSdsbCBjcmVhdGUgb25lIGlmIG5vbmUgZXhpc3RzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbW90aW9uVmFsdWUoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEl0ZXJhdGUgb3ZlciBvdXIgbW90aW9uIHZhbHVlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yRWFjaFZhbHVlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIHZhbHVlcy5mb3JFYWNoKGNhbGxiYWNrKTsgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3JlIHRyeWluZyB0byBhbmltYXRlIHRvIGEgcHJldmlvdXNseSB1bmVuY291bnRlcmVkIHZhbHVlLFxuICAgICAgICAgICAgICogd2UgbmVlZCB0byBjaGVjayBmb3IgaXQgaW4gb3VyIHN0YXRlIGFuZCBhcyBhIGxhc3QgcmVzb3J0IHJlYWQgaXRcbiAgICAgICAgICAgICAqIGRpcmVjdGx5IGZyb20gdGhlIGluc3RhbmNlICh3aGljaCBtaWdodCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucykuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlYWRWYWx1ZTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0gbGF0ZXN0VmFsdWVzW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJlYWRWYWx1ZUZyb21JbnN0YW5jZShpbnN0YW5jZSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdGhlIGJhc2UgdGFyZ2V0IHRvIGxhdGVyIGFuaW1hdGUgYmFjayB0by4gVGhpcyBpcyBjdXJyZW50bHlcbiAgICAgICAgICAgICAqIG9ubHkgaHlkcmF0ZWQgb24gY3JlYXRpb24gYW5kIHdoZW4gd2UgZmlyc3QgcmVhZCBhIHZhbHVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGJhc2VUYXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZpbmQgdGhlIGJhc2UgdGFyZ2V0IGZvciBhIHZhbHVlIHRoYXRzIGJlZW4gcmVtb3ZlZCBmcm9tIGFsbCBhbmltYXRpb25cbiAgICAgICAgICAgICAqIHByb3BzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJhc2VUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGdldEJhc2VUYXJnZXQocHJvcHMsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiAhaXNNb3Rpb25WYWx1ZSh0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VUYXJnZXRba2V5XTtcbiAgICAgICAgICAgIH0gfSwgbGlmZWN5Y2xlcyksIHsgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJ1aWxkIHRoZSByZW5kZXJlciBzdGF0ZSBiYXNlZCBvbiB0aGUgbGF0ZXN0IHZpc3VhbCBzdGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQnVpbGQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyU3RhdGU7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2NoZWR1bGUgYSByZW5kZXIgb24gdGhlIG5leHQgYW5pbWF0aW9uIGZyYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzY2hlZHVsZVJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnJlbmRlcihyZW5kZXIsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTeW5jaHJvbm91c2x5IGZpcmUgcmVuZGVyLiBJdCdzIHByZWZlcmVkIHRoYXQgd2UgYmF0Y2ggcmVuZGVycyBidXRcbiAgICAgICAgICAgICAqIGluIG1hbnkgY2lyY3Vtc3RhbmNlcywgbGlrZSBsYXlvdXQgbWVhc3VyZW1lbnQsIHdlIG5lZWQgdG8gcnVuIHRoaXNcbiAgICAgICAgICAgICAqIHN5bmNocm9ub3VzbHkuIEhvd2V2ZXIgaW4gdGhvc2UgaW5zdGFuY2VzIG90aGVyIG1lYXN1cmVzIHNob3VsZCBiZSB0YWtlblxuICAgICAgICAgICAgICogdG8gYmF0Y2ggcmVhZHMvd3JpdGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzeW5jUmVuZGVyOiByZW5kZXIsIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgdGhlIHByb3ZpZGVkIHByb3BzLiBFbnN1cmUgYW55IG5ld2x5LWFkZGVkIG1vdGlvbiB2YWx1ZXMgYXJlXG4gICAgICAgICAgICAgKiBhZGRlZCB0byBvdXIgbWFwLCBvbGQgb25lcyByZW1vdmVkLCBhbmQgbGlzdGVuZXJzIHVwZGF0ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldFByb3BzOiBmdW5jdGlvbiAobmV3UHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3UHJvcHMudHJhbnNmb3JtVGVtcGxhdGUgfHwgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9wcyA9IG5ld1Byb3BzO1xuICAgICAgICAgICAgICAgIGxpZmVjeWNsZXMudXBkYXRlUHJvcExpc3RlbmVycyhuZXdQcm9wcyk7XG4gICAgICAgICAgICAgICAgcHJldk1vdGlvblZhbHVlcyA9IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMpLCBwcmV2TW90aW9uVmFsdWVzKTtcbiAgICAgICAgICAgIH0sIGdldFByb3BzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9wczsgfSwgXG4gICAgICAgICAgICAvLyBWYXJpYW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgdmFyaWFudCBkZWZpbml0aW9uIHdpdGggYSBnaXZlbiBuYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRWYXJpYW50OiBmdW5jdGlvbiAobmFtZSkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBwcm9wcy52YXJpYW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25hbWVdOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgZGVmaW5lZCBkZWZhdWx0IHRyYW5zaXRpb24gb24gdGhpcyBjb21wb25lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldERlZmF1bHRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9wcy50cmFuc2l0aW9uOyB9LCBnZXRUcmFuc2Zvcm1QYWdlUG9pbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMudHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgYnkgY2hpbGQgdmFyaWFudCBub2RlcyB0byBnZXQgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgdmFyaWFudCBwcm9wcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0VmFyaWFudENvbnRleHQ6IGZ1bmN0aW9uIChzdGFydEF0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0QXRQYXJlbnQgPT09IHZvaWQgMCkgeyBzdGFydEF0UGFyZW50ID0gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRBdFBhcmVudClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5nZXRWYXJpYW50Q29udGV4dCgpO1xuICAgICAgICAgICAgICAgIGlmICghaXNDb250cm9sbGluZ1ZhcmlhbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSAocGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmdldFZhcmlhbnRDb250ZXh0KCkpIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMuaW5pdGlhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0XzEuaW5pdGlhbCA9IHByb3BzLmluaXRpYWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHRfMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVZhcmlhbnRQcm9wczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lXzEgPSB2YXJpYW50UHJvcHNbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gcHJvcHNbbmFtZV8xXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFyaWFudExhYmVsKHByb3ApIHx8IHByb3AgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0W25hbWVfMV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTtcbn07XG52YXIgdmFyaWFudFByb3BzID0gdHNsaWIuX19zcHJlYWRBcnJheShbXCJpbml0aWFsXCJdLCB0c2xpYi5fX3JlYWQodmFyaWFudFByaW9yaXR5T3JkZXIpLCBmYWxzZSk7XG52YXIgbnVtVmFyaWFudFByb3BzID0gdmFyaWFudFByb3BzLmxlbmd0aDtcblxuZnVuY3Rpb24gaXNDU1NWYXJpYWJsZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuc3RhcnRzV2l0aChcInZhcigtLVwiKTtcbn1cbi8qKlxuICogUGFyc2UgRnJhbWVyJ3Mgc3BlY2lhbCBDU1MgdmFyaWFibGUgZm9ybWF0IGludG8gYSBDU1MgdG9rZW4gYW5kIGEgZmFsbGJhY2suXG4gKlxuICogYGBgXG4gKiBgdmFyKC0tZm9vLCAjZmZmKWAgPT4gW2AtLWZvb2AsICcjZmZmJ11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBjdXJyZW50XG4gKi9cbnZhciBjc3NWYXJpYWJsZVJlZ2V4ID0gL3ZhclxcKCgtLVthLXpBLVowLTktX10rKSw/ID8oW2EtekEtWjAtOSAoKSUjLiwtXSspP1xcKS87XG5mdW5jdGlvbiBwYXJzZUNTU1ZhcmlhYmxlKGN1cnJlbnQpIHtcbiAgICB2YXIgbWF0Y2ggPSBjc3NWYXJpYWJsZVJlZ2V4LmV4ZWMoY3VycmVudCk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dXJuIFssXTtcbiAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQobWF0Y2gsIDMpLCB0b2tlbiA9IF9hWzFdLCBmYWxsYmFjayA9IF9hWzJdO1xuICAgIHJldHVybiBbdG9rZW4sIGZhbGxiYWNrXTtcbn1cbnZhciBtYXhEZXB0aCA9IDQ7XG5mdW5jdGlvbiBnZXRWYXJpYWJsZVZhbHVlKGN1cnJlbnQsIGVsZW1lbnQsIGRlcHRoKSB7XG4gICAgaWYgKGRlcHRoID09PSB2b2lkIDApIHsgZGVwdGggPSAxOyB9XG4gICAgaGV5TGlzdGVuLmludmFyaWFudChkZXB0aCA8PSBtYXhEZXB0aCwgXCJNYXggQ1NTIHZhcmlhYmxlIGZhbGxiYWNrIGRlcHRoIGRldGVjdGVkIGluIHByb3BlcnR5IFxcXCJcIi5jb25jYXQoY3VycmVudCwgXCJcXFwiLiBUaGlzIG1heSBpbmRpY2F0ZSBhIGNpcmN1bGFyIGZhbGxiYWNrIGRlcGVuZGVuY3kuXCIpKTtcbiAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQocGFyc2VDU1NWYXJpYWJsZShjdXJyZW50KSwgMiksIHRva2VuID0gX2FbMF0sIGZhbGxiYWNrID0gX2FbMV07XG4gICAgLy8gTm8gQ1NTIHZhcmlhYmxlIGRldGVjdGVkXG4gICAgaWYgKCF0b2tlbilcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEF0dGVtcHQgdG8gcmVhZCB0aGlzIENTUyB2YXJpYWJsZSBvZmYgdGhlIGVsZW1lbnRcbiAgICB2YXIgcmVzb2x2ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHRva2VuKTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkLnRyaW0oKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDU1NWYXJpYWJsZShmYWxsYmFjaykpIHtcbiAgICAgICAgLy8gVGhlIGZhbGxiYWNrIG1pZ2h0IGl0c2VsZiBiZSBhIENTUyB2YXJpYWJsZSwgaW4gd2hpY2ggY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc29sdmUgaXQgdG9vLlxuICAgICAgICByZXR1cm4gZ2V0VmFyaWFibGVWYWx1ZShmYWxsYmFjaywgZWxlbWVudCwgZGVwdGggKyAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmUgQ1NTIHZhcmlhYmxlcyBmcm9tXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVDU1NWYXJpYWJsZXModmlzdWFsRWxlbWVudCwgX2EsIHRyYW5zaXRpb25FbmQpIHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIHRhcmdldCA9IHRzbGliLl9fcmVzdChfYSwgW10pO1xuICAgIHZhciBlbGVtZW50ID0gdmlzdWFsRWxlbWVudC5nZXRJbnN0YW5jZSgpO1xuICAgIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50KSlcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0OiB0YXJnZXQsIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfTtcbiAgICAvLyBJZiBgdHJhbnNpdGlvbkVuZGAgaXNuJ3QgYHVuZGVmaW5lZGAsIGNsb25lIGl0LiBXZSBjb3VsZCBjbG9uZSBgdGFyZ2V0YCBhbmQgYHRyYW5zaXRpb25FbmRgXG4gICAgLy8gb25seSBpZiB0aGV5IGNoYW5nZSBidXQgSSB0aGluayB0aGlzIHJlYWRzIGNsZWFyZXIgYW5kIHRoaXMgaXNuJ3QgYSBwZXJmb3JtYW5jZS1jcml0aWNhbCBwYXRoLlxuICAgIGlmICh0cmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHRyYW5zaXRpb25FbmQgPSB0c2xpYi5fX2Fzc2lnbih7fSwgdHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICAgIC8vIEdvIHRocm91Z2ggZXhpc3RpbmcgYE1vdGlvblZhbHVlYHMgYW5kIGVuc3VyZSBhbnkgZXhpc3RpbmcgQ1NTIHZhcmlhYmxlcyBhcmUgcmVzb2x2ZWRcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgaWYgKCFpc0NTU1ZhcmlhYmxlKGN1cnJlbnQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBnZXRWYXJpYWJsZVZhbHVlKGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgICBpZiAocmVzb2x2ZWQpXG4gICAgICAgICAgICB2YWx1ZS5zZXQocmVzb2x2ZWQpO1xuICAgIH0pO1xuICAgIC8vIEN5Y2xlIHRocm91Z2ggZXZlcnkgdGFyZ2V0IHByb3BlcnR5IGFuZCByZXNvbHZlIENTUyB2YXJpYWJsZXMuIEN1cnJlbnRseVxuICAgIC8vIHdlIG9ubHkgcmVhZCBzaW5nbGUtdmFyIHByb3BlcnRpZXMgbGlrZSBgdmFyKC0tZm9vKWAsIG5vdCBgY2FsYyh2YXIoLS1mb28pICsgMjBweClgXG4gICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoIWlzQ1NTVmFyaWFibGUoY3VycmVudCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgdmFyIHJlc29sdmVkID0gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKCFyZXNvbHZlZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyBDbG9uZSB0YXJnZXQgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlblxuICAgICAgICB0YXJnZXRba2V5XSA9IHJlc29sdmVkO1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBoYXNuJ3QgYWxyZWFkeSBzZXQgdGhpcyBrZXkgb24gYHRyYW5zaXRpb25FbmRgLCBzZXQgaXQgdG8gdGhlIHVucmVzb2x2ZWRcbiAgICAgICAgLy8gQ1NTIHZhcmlhYmxlLiBUaGlzIHdpbGwgZW5zdXJlIHRoYXQgYWZ0ZXIgdGhlIGFuaW1hdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgcmVmbGVjdFxuICAgICAgICAvLyBjaGFuZ2VzIGluIHRoZSB2YWx1ZSBvZiB0aGUgQ1NTIHZhcmlhYmxlLlxuICAgICAgICBpZiAodHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgIChfYiA9IHRyYW5zaXRpb25FbmRba2V5XSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKHRyYW5zaXRpb25FbmRba2V5XSA9IGN1cnJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4geyB0YXJnZXQ6IHRhcmdldCwgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9O1xufVxuXG52YXIgcG9zaXRpb25hbEtleXMgPSBuZXcgU2V0KFtcbiAgICBcIndpZHRoXCIsXG4gICAgXCJoZWlnaHRcIixcbiAgICBcInRvcFwiLFxuICAgIFwibGVmdFwiLFxuICAgIFwicmlnaHRcIixcbiAgICBcImJvdHRvbVwiLFxuICAgIFwieFwiLFxuICAgIFwieVwiLFxuXSk7XG52YXIgaXNQb3NpdGlvbmFsS2V5ID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gcG9zaXRpb25hbEtleXMuaGFzKGtleSk7IH07XG52YXIgaGFzUG9zaXRpb25hbEtleSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0KS5zb21lKGlzUG9zaXRpb25hbEtleSk7XG59O1xudmFyIHNldEFuZFJlc2V0VmVsb2NpdHkgPSBmdW5jdGlvbiAodmFsdWUsIHRvKSB7XG4gICAgLy8gTG9va3Mgb2RkIGJ1dCBzZXR0aW5nIGl0IHR3aWNlIGRvZXNuJ3QgcmVuZGVyLCBpdCdsbCBqdXN0XG4gICAgLy8gc2V0IGJvdGggcHJldiBhbmQgY3VycmVudCB0byB0aGUgbGF0ZXN0IHZhbHVlXG4gICAgdmFsdWUuc2V0KHRvLCBmYWxzZSk7XG4gICAgdmFsdWUuc2V0KHRvKTtcbn07XG52YXIgaXNOdW1PclB4VHlwZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHYgPT09IHN0eWxlVmFsdWVUeXBlcy5udW1iZXIgfHwgdiA9PT0gc3R5bGVWYWx1ZVR5cGVzLnB4O1xufTtcbnZhciBCb3VuZGluZ0JveERpbWVuc2lvbjtcbihmdW5jdGlvbiAoQm91bmRpbmdCb3hEaW1lbnNpb24pIHtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcIndpZHRoXCJdID0gXCJ3aWR0aFwiO1xuICAgIEJvdW5kaW5nQm94RGltZW5zaW9uW1wiaGVpZ2h0XCJdID0gXCJoZWlnaHRcIjtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcImxlZnRcIl0gPSBcImxlZnRcIjtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcInJpZ2h0XCJdID0gXCJyaWdodFwiO1xuICAgIEJvdW5kaW5nQm94RGltZW5zaW9uW1widG9wXCJdID0gXCJ0b3BcIjtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcImJvdHRvbVwiXSA9IFwiYm90dG9tXCI7XG59KShCb3VuZGluZ0JveERpbWVuc2lvbiB8fCAoQm91bmRpbmdCb3hEaW1lbnNpb24gPSB7fSkpO1xudmFyIGdldFBvc0Zyb21NYXRyaXggPSBmdW5jdGlvbiAobWF0cml4LCBwb3MpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChtYXRyaXguc3BsaXQoXCIsIFwiKVtwb3NdKTtcbn07XG52YXIgZ2V0VHJhbnNsYXRlRnJvbU1hdHJpeCA9IGZ1bmN0aW9uIChwb3MyLCBwb3MzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfYmJveCwgX2EpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IF9hLnRyYW5zZm9ybTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybSA9PT0gXCJub25lXCIgfHwgIXRyYW5zZm9ybSlcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB2YXIgbWF0cml4M2QgPSB0cmFuc2Zvcm0ubWF0Y2goL15tYXRyaXgzZFxcKCguKylcXCkkLyk7XG4gICAgICAgIGlmIChtYXRyaXgzZCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFBvc0Zyb21NYXRyaXgobWF0cml4M2RbMV0sIHBvczMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeFxcKCguKylcXCkkLyk7XG4gICAgICAgICAgICBpZiAobWF0cml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFBvc0Zyb21NYXRyaXgobWF0cml4WzFdLCBwb3MyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG52YXIgdHJhbnNmb3JtS2V5cyA9IG5ldyBTZXQoW1wieFwiLCBcInlcIiwgXCJ6XCJdKTtcbnZhciBub25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtS2V5cyA9IHRyYW5zZm9ybVByb3BzLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAhdHJhbnNmb3JtS2V5cy5oYXMoa2V5KTsgfSk7XG5mdW5jdGlvbiByZW1vdmVOb25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtKHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgcmVtb3ZlZFRyYW5zZm9ybXMgPSBbXTtcbiAgICBub25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVtb3ZlZFRyYW5zZm9ybXMucHVzaChba2V5LCB2YWx1ZS5nZXQoKV0pO1xuICAgICAgICAgICAgdmFsdWUuc2V0KGtleS5zdGFydHNXaXRoKFwic2NhbGVcIikgPyAxIDogMCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBBcHBseSBjaGFuZ2VzIHRvIGVsZW1lbnQgYmVmb3JlIG1lYXN1cmVtZW50XG4gICAgaWYgKHJlbW92ZWRUcmFuc2Zvcm1zLmxlbmd0aClcbiAgICAgICAgdmlzdWFsRWxlbWVudC5zeW5jUmVuZGVyKCk7XG4gICAgcmV0dXJuIHJlbW92ZWRUcmFuc2Zvcm1zO1xufVxudmFyIHBvc2l0aW9uYWxWYWx1ZXMgPSB7XG4gICAgLy8gRGltZW5zaW9uc1xuICAgIHdpZHRoOiBmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgIHZhciB4ID0gX2EueDtcbiAgICAgICAgdmFyIF9jID0gX2IucGFkZGluZ0xlZnQsIHBhZGRpbmdMZWZ0ID0gX2MgPT09IHZvaWQgMCA/IFwiMFwiIDogX2MsIF9kID0gX2IucGFkZGluZ1JpZ2h0LCBwYWRkaW5nUmlnaHQgPSBfZCA9PT0gdm9pZCAwID8gXCIwXCIgOiBfZDtcbiAgICAgICAgcmV0dXJuIHgubWF4IC0geC5taW4gLSBwYXJzZUZsb2F0KHBhZGRpbmdMZWZ0KSAtIHBhcnNlRmxvYXQocGFkZGluZ1JpZ2h0KTtcbiAgICB9LFxuICAgIGhlaWdodDogZnVuY3Rpb24gKF9hLCBfYikge1xuICAgICAgICB2YXIgeSA9IF9hLnk7XG4gICAgICAgIHZhciBfYyA9IF9iLnBhZGRpbmdUb3AsIHBhZGRpbmdUb3AgPSBfYyA9PT0gdm9pZCAwID8gXCIwXCIgOiBfYywgX2QgPSBfYi5wYWRkaW5nQm90dG9tLCBwYWRkaW5nQm90dG9tID0gX2QgPT09IHZvaWQgMCA/IFwiMFwiIDogX2Q7XG4gICAgICAgIHJldHVybiB5Lm1heCAtIHkubWluIC0gcGFyc2VGbG9hdChwYWRkaW5nVG9wKSAtIHBhcnNlRmxvYXQocGFkZGluZ0JvdHRvbSk7XG4gICAgfSxcbiAgICB0b3A6IGZ1bmN0aW9uIChfYmJveCwgX2EpIHtcbiAgICAgICAgdmFyIHRvcCA9IF9hLnRvcDtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodG9wKTtcbiAgICB9LFxuICAgIGxlZnQ6IGZ1bmN0aW9uIChfYmJveCwgX2EpIHtcbiAgICAgICAgdmFyIGxlZnQgPSBfYS5sZWZ0O1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChsZWZ0KTtcbiAgICB9LFxuICAgIGJvdHRvbTogZnVuY3Rpb24gKF9hLCBfYikge1xuICAgICAgICB2YXIgeSA9IF9hLnk7XG4gICAgICAgIHZhciB0b3AgPSBfYi50b3A7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRvcCkgKyAoeS5tYXggLSB5Lm1pbik7XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24gKF9hLCBfYikge1xuICAgICAgICB2YXIgeCA9IF9hLng7XG4gICAgICAgIHZhciBsZWZ0ID0gX2IubGVmdDtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobGVmdCkgKyAoeC5tYXggLSB4Lm1pbik7XG4gICAgfSxcbiAgICAvLyBUcmFuc2Zvcm1cbiAgICB4OiBnZXRUcmFuc2xhdGVGcm9tTWF0cml4KDQsIDEzKSxcbiAgICB5OiBnZXRUcmFuc2xhdGVGcm9tTWF0cml4KDUsIDE0KSxcbn07XG52YXIgY29udmVydENoYW5nZWRWYWx1ZVR5cGVzID0gZnVuY3Rpb24gKHRhcmdldCwgdmlzdWFsRWxlbWVudCwgY2hhbmdlZEtleXMpIHtcbiAgICB2YXIgb3JpZ2luQmJveCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgdmFyIGVsZW1lbnQgPSB2aXN1YWxFbGVtZW50LmdldEluc3RhbmNlKCk7XG4gICAgdmFyIGVsZW1lbnRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICB2YXIgZGlzcGxheSA9IGVsZW1lbnRDb21wdXRlZFN0eWxlLmRpc3BsYXk7XG4gICAgdmFyIG9yaWdpbiA9IHt9O1xuICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIGN1cnJlbnRseSBzZXQgdG8gZGlzcGxheTogXCJub25lXCIsIG1ha2UgaXQgdmlzaWJsZSBiZWZvcmVcbiAgICAvLyBtZWFzdXJpbmcgdGhlIHRhcmdldCBib3VuZGluZyBib3hcbiAgICBpZiAoZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRTdGF0aWNWYWx1ZShcImRpc3BsYXlcIiwgdGFyZ2V0LmRpc3BsYXkgfHwgXCJibG9ja1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVjb3JkIG9yaWdpbnMgYmVmb3JlIHdlIHJlbmRlciBhbmQgdXBkYXRlIHN0eWxlc1xuICAgICAqL1xuICAgIGNoYW5nZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBvcmlnaW5ba2V5XSA9IHBvc2l0aW9uYWxWYWx1ZXNba2V5XShvcmlnaW5CYm94LCBlbGVtZW50Q29tcHV0ZWRTdHlsZSk7XG4gICAgfSk7XG4gICAgLy8gQXBwbHkgdGhlIGxhdGVzdCB2YWx1ZXMgKGFzIHNldCBpbiBjaGVja0FuZENvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcylcbiAgICB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICB2YXIgdGFyZ2V0QmJveCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgY2hhbmdlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIFJlc3RvcmUgc3R5bGVzIHRvIHRoZWlyICoqY2FsY3VsYXRlZCBjb21wdXRlZCBzdHlsZSoqLCBub3QgdGhlaXIgYWN0dWFsXG4gICAgICAgIC8vIG9yaWdpbmFsbHkgc2V0IHN0eWxlLiBUaGlzIGFsbG93cyB1cyB0byBhbmltYXRlIGJldHdlZW4gZXF1aXZhbGVudCBwaXhlbCB1bml0cy5cbiAgICAgICAgdmFyIHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBzZXRBbmRSZXNldFZlbG9jaXR5KHZhbHVlLCBvcmlnaW5ba2V5XSk7XG4gICAgICAgIHRhcmdldFtrZXldID0gcG9zaXRpb25hbFZhbHVlc1trZXldKHRhcmdldEJib3gsIGVsZW1lbnRDb21wdXRlZFN0eWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbnZhciBjaGVja0FuZENvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyA9IGZ1bmN0aW9uICh2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCkge1xuICAgIGlmIChvcmlnaW4gPT09IHZvaWQgMCkgeyBvcmlnaW4gPSB7fTsgfVxuICAgIGlmICh0cmFuc2l0aW9uRW5kID09PSB2b2lkIDApIHsgdHJhbnNpdGlvbkVuZCA9IHt9OyB9XG4gICAgdGFyZ2V0ID0gdHNsaWIuX19hc3NpZ24oe30sIHRhcmdldCk7XG4gICAgdHJhbnNpdGlvbkVuZCA9IHRzbGliLl9fYXNzaWduKHt9LCB0cmFuc2l0aW9uRW5kKTtcbiAgICB2YXIgdGFyZ2V0UG9zaXRpb25hbEtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpLmZpbHRlcihpc1Bvc2l0aW9uYWxLZXkpO1xuICAgIC8vIFdlIHdhbnQgdG8gcmVtb3ZlIGFueSB0cmFuc2Zvcm0gdmFsdWVzIHRoYXQgY291bGQgYWZmZWN0IHRoZSBlbGVtZW50J3MgYm91bmRpbmcgYm94IGJlZm9yZVxuICAgIC8vIGl0J3MgbWVhc3VyZWQuIFdlJ2xsIHJlYXBwbHkgdGhlc2UgbGF0ZXIuXG4gICAgdmFyIHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMgPSBbXTtcbiAgICB2YXIgaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMgPSBmYWxzZTtcbiAgICB2YXIgY2hhbmdlZFZhbHVlVHlwZUtleXMgPSBbXTtcbiAgICB0YXJnZXRQb3NpdGlvbmFsS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBpZiAoIXZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGZyb20gPSBvcmlnaW5ba2V5XTtcbiAgICAgICAgdmFyIGZyb21UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZShmcm9tKTtcbiAgICAgICAgdmFyIHRvID0gdGFyZ2V0W2tleV07XG4gICAgICAgIHZhciB0b1R5cGU7XG4gICAgICAgIC8vIFRPRE86IFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRoaXMgYmFzaWNhbGx5IHRocm93cyBhbiBlcnJvclxuICAgICAgICAvLyBpZiB5b3UgdHJ5IGFuZCBkbyB2YWx1ZSBjb252ZXJzaW9uIHZpYSBrZXlmcmFtZXMuIFRoZXJlJ3MgcHJvYmFibHlcbiAgICAgICAgLy8gYSB3YXkgb2YgZG9pbmcgdGhpcyBidXQgdGhlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucyB3b3VsZCBuZWVkIGdyZWF0ZXIgc2NydXRpbnksXG4gICAgICAgIC8vIGFzIGl0J2QgYmUgZG9pbmcgbXVsdGlwbGUgcmVzaXplLXJlbWVhc3VyZSBvcGVyYXRpb25zLlxuICAgICAgICBpZiAoaXNLZXlmcmFtZXNUYXJnZXQodG8pKSB7XG4gICAgICAgICAgICB2YXIgbnVtS2V5ZnJhbWVzID0gdG8ubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGZyb21JbmRleCA9IHRvWzBdID09PSBudWxsID8gMSA6IDA7XG4gICAgICAgICAgICBmcm9tID0gdG9bZnJvbUluZGV4XTtcbiAgICAgICAgICAgIGZyb21UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZShmcm9tKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXg7IGkgPCBudW1LZXlmcmFtZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghdG9UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvVHlwZSA9IGZpbmREaW1lbnNpb25WYWx1ZVR5cGUodG9baV0pO1xuICAgICAgICAgICAgICAgICAgICBoZXlMaXN0ZW4uaW52YXJpYW50KHRvVHlwZSA9PT0gZnJvbVR5cGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpc051bU9yUHhUeXBlKGZyb21UeXBlKSAmJiBpc051bU9yUHhUeXBlKHRvVHlwZSkpLCBcIktleWZyYW1lcyBtdXN0IGJlIG9mIHRoZSBzYW1lIGRpbWVuc2lvbiBhcyB0aGUgY3VycmVudCB2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoZmluZERpbWVuc2lvblZhbHVlVHlwZSh0b1tpXSkgPT09IHRvVHlwZSwgXCJBbGwga2V5ZnJhbWVzIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b1R5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKHRvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbVR5cGUgIT09IHRvVHlwZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhleSdyZSBib3RoIGp1c3QgbnVtYmVyIG9yIHB4LCBjb252ZXJ0IHRoZW0gYm90aCB0byBudW1iZXJzIHJhdGhlciB0aGFuXG4gICAgICAgICAgICAvLyByZWx5aW5nIG9uIHJlc2l6ZS9yZW1lYXN1cmUgdG8gY29udmVydCAod2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhpcyBzaXR1YXRpb24pXG4gICAgICAgICAgICBpZiAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuc2V0KHBhcnNlRmxvYXQoY3VycmVudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gcGFyc2VGbG9hdCh0byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodG8pICYmIHRvVHlwZSA9PT0gc3R5bGVWYWx1ZVR5cGVzLnB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gdG8ubWFwKHBhcnNlRmxvYXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChmcm9tVHlwZSA9PT0gbnVsbCB8fCBmcm9tVHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZnJvbVR5cGUudHJhbnNmb3JtKSAmJlxuICAgICAgICAgICAgICAgICh0b1R5cGUgPT09IG51bGwgfHwgdG9UeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0b1R5cGUudHJhbnNmb3JtKSAmJlxuICAgICAgICAgICAgICAgIChmcm9tID09PSAwIHx8IHRvID09PSAwKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIG9uZSBvciB0aGUgb3RoZXIgdmFsdWUgaXMgMCwgaXQncyBzYWZlIHRvIGNvZXJjZSBpdCB0byB0aGVcbiAgICAgICAgICAgICAgICAvLyB0eXBlIG9mIHRoZSBvdGhlciB3aXRob3V0IG1lYXN1cmVtZW50XG4gICAgICAgICAgICAgICAgaWYgKGZyb20gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuc2V0KHRvVHlwZS50cmFuc2Zvcm0oZnJvbSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBmcm9tVHlwZS50cmFuc2Zvcm0odG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIGdvaW5nIHRvIGRvIHZhbHVlIGNvbnZlcnNpb24gdmlhIERPTSBtZWFzdXJlbWVudHMsIHdlIGZpcnN0XG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byByZW1vdmUgbm9uLXBvc2l0aW9uYWwgdHJhbnNmb3JtIHZhbHVlcyB0aGF0IGNvdWxkIGFmZmVjdCB0aGUgYmJveCBtZWFzdXJlbWVudHMuXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNBdHRlbXB0ZWRUb1JlbW92ZVRyYW5zZm9ybVZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkVHJhbnNmb3JtVmFsdWVzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm0odmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhbmdlZFZhbHVlVHlwZUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FbmRba2V5XSA9XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FbmRba2V5XSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25FbmRba2V5XVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0YXJnZXRba2V5XTtcbiAgICAgICAgICAgICAgICBzZXRBbmRSZXNldFZlbG9jaXR5KHZhbHVlLCB0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoY2hhbmdlZFZhbHVlVHlwZUtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzY3JvbGxZXzEgPSBjaGFuZ2VkVmFsdWVUeXBlS2V5cy5pbmRleE9mKFwiaGVpZ2h0XCIpID49IDBcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHZhciBjb252ZXJ0ZWRUYXJnZXQgPSBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXModGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkVmFsdWVUeXBlS2V5cyk7XG4gICAgICAgIC8vIElmIHdlIHJlbW92ZWQgdHJhbnNmb3JtIHZhbHVlcywgcmVhcHBseSB0aGVtIGJlZm9yZSB0aGUgbmV4dCByZW5kZXJcbiAgICAgICAgaWYgKHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhbnNmb3JtVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iID0gdHNsaWIuX19yZWFkKF9hLCAyKSwga2V5ID0gX2JbMF0sIHZhbHVlID0gX2JbMV07XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpLnNldCh2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWFwcGx5IG9yaWdpbmFsIHZhbHVlc1xuICAgICAgICB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICAgICAgLy8gUmVzdG9yZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgaWYgKHNjcm9sbFlfMSAhPT0gbnVsbClcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogc2Nyb2xsWV8xIH0pO1xuICAgICAgICByZXR1cm4geyB0YXJnZXQ6IGNvbnZlcnRlZFRhcmdldCwgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0OiB0YXJnZXQsIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBDb252ZXJ0IHZhbHVlIHR5cGVzIGZvciB4L3kvd2lkdGgvaGVpZ2h0L3RvcC9sZWZ0L2JvdHRvbS9yaWdodFxuICpcbiAqIEFsbG93cyBhbmltYXRpb24gYmV0d2VlbiBgJ2F1dG8nYCAtPiBgJzEwMCUnYCBvciBgMGAgLT4gYCdjYWxjKDUwJSAtIDEwdncpJ2BcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdW5pdENvbnZlcnNpb24odmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpIHtcbiAgICByZXR1cm4gaGFzUG9zaXRpb25hbEtleSh0YXJnZXQpXG4gICAgICAgID8gY2hlY2tBbmRDb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXModmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpXG4gICAgICAgIDogeyB0YXJnZXQ6IHRhcmdldCwgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGEgRE9NIHZhcmlhbnQgdG8gbWFrZSBpdCBhbmltYXRhYmxlLiBUaGlzIGludm9sdmVzIHJlc29sdmluZyBDU1MgdmFyaWFibGVzXG4gKiBhbmQgZW5zdXJpbmcgYW5pbWF0aW9ucyBsaWtlIFwiMjAlXCIgPT4gXCJjYWxjKDUwdncpXCIgYXJlIHBlcmZvcm1lZCBpbiBwaXhlbHMuXG4gKi9cbnZhciBwYXJzZURvbVZhcmlhbnQgPSBmdW5jdGlvbiAodmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpIHtcbiAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlQ1NTVmFyaWFibGVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgdGFyZ2V0ID0gcmVzb2x2ZWQudGFyZ2V0O1xuICAgIHRyYW5zaXRpb25FbmQgPSByZXNvbHZlZC50cmFuc2l0aW9uRW5kO1xuICAgIHJldHVybiB1bml0Q29udmVyc2lvbih2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCk7XG59O1xuXG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlJDEoZWxlbWVudCkge1xuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cbnZhciBodG1sQ29uZmlnID0ge1xuICAgIHRyZWVUeXBlOiBcImRvbVwiLFxuICAgIHJlYWRWYWx1ZUZyb21JbnN0YW5jZTogZnVuY3Rpb24gKGRvbUVsZW1lbnQsIGtleSkge1xuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1Qcm9wKGtleSkpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VHlwZSA9IGdldERlZmF1bHRWYWx1ZVR5cGUoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VHlwZSA/IGRlZmF1bHRUeXBlLmRlZmF1bHQgfHwgMCA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUkMShkb21FbGVtZW50KTtcbiAgICAgICAgICAgIHJldHVybiAoKGlzQ1NTVmFyaWFibGUkMShrZXkpXG4gICAgICAgICAgICAgICAgPyBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoa2V5KVxuICAgICAgICAgICAgICAgIDogY29tcHV0ZWRTdHlsZVtrZXldKSB8fCAwKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc29ydE5vZGVQb3NpdGlvbjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIHJldHVybnMgYSBiaXRtYXNrLCBieSB1c2luZyB0aGUgYml0d2lzZSAmXG4gICAgICAgICAqIHdlJ3JlIHJldHVybmluZyB0cnVlIGlmIDIgaW4gdGhhdCBiaXRtYXNrIGlzIHNldCB0byB0cnVlLiAyIGlzIHNldFxuICAgICAgICAgKiB0byB0cnVlIGlmIGIgcHJlY2VlZHMgYS5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgMiA/IDEgOiAtMTtcbiAgICB9LFxuICAgIGdldEJhc2VUYXJnZXQ6IGZ1bmN0aW9uIChwcm9wcywga2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHByb3BzLnN0eWxlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Fba2V5XTtcbiAgICB9LFxuICAgIG1lYXN1cmVWaWV3cG9ydEJveDogZnVuY3Rpb24gKGVsZW1lbnQsIF9hKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1QYWdlUG9pbnQgPSBfYS50cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgICAgIHJldHVybiBtZWFzdXJlVmlld3BvcnRCb3goZWxlbWVudCwgdHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSB0cmFuc2Zvcm0gb24gdGhlIGN1cnJlbnQgRWxlbWVudC4gVGhpcyBpcyBjYWxsZWQgYXMgcGFydFxuICAgICAqIG9mIGEgYmF0Y2hlZCBwcm9jZXNzIGFjcm9zcyB0aGUgZW50aXJlIGxheW91dCB0cmVlLiBUbyByZW1vdmUgdGhpcyB3cml0ZVxuICAgICAqIGN5Y2xlIGl0J2QgYmUgaW50ZXJlc3RpbmcgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gXCJ1bmRvXCIgYWxsIHRoZSBjdXJyZW50XG4gICAgICogbGF5b3V0IHRyYW5zZm9ybXMgdXAgdGhlIHRyZWUgaW4gdGhlIHNhbWUgd2F5IHRoaXMuZ2V0Qm91bmRpbmdCb3hXaXRob3V0VHJhbnNmb3Jtc1xuICAgICAqIHdvcmtzXG4gICAgICovXG4gICAgcmVzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uIChlbGVtZW50LCBkb21FbGVtZW50LCBwcm9wcykge1xuICAgICAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICAgICAgZG9tRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgPyB0cmFuc2Zvcm1UZW1wbGF0ZSh7fSwgXCJcIilcbiAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IHdoYXRldmVyIGhhcHBlbnMgbmV4dCwgd2UgcmVzdG9yZSBvdXIgdHJhbnNmb3JtIG9uIHRoZSBuZXh0IGZyYW1lXG4gICAgICAgIGVsZW1lbnQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICB9LFxuICAgIHJlc3RvcmVUcmFuc2Zvcm06IGZ1bmN0aW9uIChpbnN0YW5jZSwgbXV0YWJsZVN0YXRlKSB7XG4gICAgICAgIGluc3RhbmNlLnN0eWxlLnRyYW5zZm9ybSA9IG11dGFibGVTdGF0ZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgfSxcbiAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZTogZnVuY3Rpb24gKGtleSwgX2EpIHtcbiAgICAgICAgdmFyIHZhcnMgPSBfYS52YXJzLCBzdHlsZSA9IF9hLnN0eWxlO1xuICAgICAgICBkZWxldGUgdmFyc1trZXldO1xuICAgICAgICBkZWxldGUgc3R5bGVba2V5XTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGF0IEhUTUwgYW5kIEZyYW1lci1zcGVjaWZpYyB2YWx1ZSB0eXBlcyBsaWtlIGBweGAtPmAlYCBhbmQgYENvbG9yYFxuICAgICAqIGNhbiBiZSBhbmltYXRlZCBieSBNb3Rpb24uXG4gICAgICovXG4gICAgbWFrZVRhcmdldEFuaW1hdGFibGU6IGZ1bmN0aW9uIChlbGVtZW50LCBfYSwgX2IsIGlzTW91bnRlZCkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtVmFsdWVzID0gX2IudHJhbnNmb3JtVmFsdWVzO1xuICAgICAgICBpZiAoaXNNb3VudGVkID09PSB2b2lkIDApIHsgaXNNb3VudGVkID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IF9hLnRyYW5zaXRpb24sIHRyYW5zaXRpb25FbmQgPSBfYS50cmFuc2l0aW9uRW5kLCB0YXJnZXQgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcInRyYW5zaXRpb25cIiwgXCJ0cmFuc2l0aW9uRW5kXCJdKTtcbiAgICAgICAgdmFyIG9yaWdpbiA9IGdldE9yaWdpbih0YXJnZXQsIHRyYW5zaXRpb24gfHwge30sIGVsZW1lbnQpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgRnJhbWVyIGhhcyBwcm92aWRlZCBhIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYENvbG9yYCBldGMgdmFsdWUgdHlwZXMsIGNvbnZlcnQgdGhlbVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRyYW5zZm9ybVZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25FbmQpXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9IHRyYW5zZm9ybVZhbHVlcyh0cmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdHJhbnNmb3JtVmFsdWVzKHRhcmdldCk7XG4gICAgICAgICAgICBpZiAob3JpZ2luKVxuICAgICAgICAgICAgICAgIG9yaWdpbiA9IHRyYW5zZm9ybVZhbHVlcyhvcmlnaW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICAgIGNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzKGVsZW1lbnQsIHRhcmdldCwgb3JpZ2luKTtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZURvbVZhcmlhbnQoZWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9IHBhcnNlZC50cmFuc2l0aW9uRW5kO1xuICAgICAgICAgICAgdGFyZ2V0ID0gcGFyc2VkLnRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24oeyB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kIH0sIHRhcmdldCk7XG4gICAgfSxcbiAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxLFxuICAgIGJ1aWxkOiBmdW5jdGlvbiAoZWxlbWVudCwgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuaXNWaXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlbmRlclN0YXRlLnN0eWxlLnZpc2liaWxpdHkgPSBlbGVtZW50LmlzVmlzaWJsZVxuICAgICAgICAgICAgICAgID8gXCJ2aXNpYmxlXCJcbiAgICAgICAgICAgICAgICA6IFwiaGlkZGVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGRIVE1MU3R5bGVzKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICB9LFxuICAgIHJlbmRlcjogcmVuZGVySFRNTCxcbn07XG52YXIgaHRtbFZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50KGh0bWxDb25maWcpO1xuXG52YXIgc3ZnVmlzdWFsRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGh0bWxDb25maWcpLCB7IGdldEJhc2VUYXJnZXQ6IGZ1bmN0aW9uIChwcm9wcywga2V5KSB7XG4gICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgIH0sIHJlYWRWYWx1ZUZyb21JbnN0YW5jZTogZnVuY3Rpb24gKGRvbUVsZW1lbnQsIGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVByb3Aoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSBnZXREZWZhdWx0VmFsdWVUeXBlKGtleSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWZhdWx0KSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9ICFjYW1lbENhc2VBdHRyaWJ1dGVzLmhhcyhrZXkpID8gY2FtZWxUb0Rhc2goa2V5KSA6IGtleTtcbiAgICAgICAgcmV0dXJuIGRvbUVsZW1lbnQuZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgfSwgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzOiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMsIGJ1aWxkOiBmdW5jdGlvbiAoX2VsZW1lbnQsIHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHByb3BzKSB7XG4gICAgICAgIGJ1aWxkU1ZHQXR0cnMocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgIH0sIHJlbmRlcjogcmVuZGVyU1ZHIH0pKTtcblxudmFyIGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgPSBmdW5jdGlvbiAoQ29tcG9uZW50LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBzdmdWaXN1YWxFbGVtZW50KG9wdGlvbnMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IGZhbHNlIH0pXG4gICAgICAgIDogaHRtbFZpc3VhbEVsZW1lbnQob3B0aW9ucywgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogdHJ1ZSB9KTtcbn07XG5cbmZ1bmN0aW9uIHBpeGVsc1RvUGVyY2VudChwaXhlbHMsIGF4aXMpIHtcbiAgICBpZiAoYXhpcy5tYXggPT09IGF4aXMubWluKVxuICAgICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gKHBpeGVscyAvIChheGlzLm1heCAtIGF4aXMubWluKSkgKiAxMDA7XG59XG4vKipcbiAqIFdlIGFsd2F5cyBjb3JyZWN0IGJvcmRlclJhZGl1cyBhcyBhIHBlcmNlbnRhZ2UgcmF0aGVyIHRoYW4gcGl4ZWxzIHRvIHJlZHVjZSBwYWludHMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgeW91IGFyZSBwcm9qZWN0aW5nIGEgYm94IHRoYXQgaXMgMTAwcHggd2lkZSB3aXRoIGEgMTBweCBib3JkZXJSYWRpdXNcbiAqIGludG8gYSBib3ggdGhhdCBpcyAyMDBweCB3aWRlIHdpdGggYSAyMHB4IGJvcmRlclJhZGl1cywgdGhhdCBpcyBhY3R1YWxseSBhIDEwJVxuICogYm9yZGVyUmFkaXVzIGluIGJvdGggc3RhdGVzLiBJZiB3ZSBhbmltYXRlIGJldHdlZW4gdGhlIHR3byBpbiBwaXhlbHMgdGhhdCB3aWxsIHRyaWdnZXJcbiAqIGEgcGFpbnQgZWFjaCB0aW1lLiBJZiB3ZSBhbmltYXRlIGJldHdlZW4gdGhlIHR3byBpbiBwZXJjZW50YWdlIHdlJ2xsIGF2b2lkIGEgcGFpbnQuXG4gKi9cbnZhciBjb3JyZWN0Qm9yZGVyUmFkaXVzID0ge1xuICAgIGNvcnJlY3Q6IGZ1bmN0aW9uIChsYXRlc3QsIG5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlLnRhcmdldClcbiAgICAgICAgICAgIHJldHVybiBsYXRlc3Q7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBsYXRlc3QgaXMgYSBzdHJpbmcsIGlmIGl0J3MgYSBwZXJjZW50YWdlIHdlIGNhbiByZXR1cm4gaW1tZWRpYXRlbHkgYXMgaXQnc1xuICAgICAgICAgKiBnb2luZyB0byBiZSBzdHJldGNoZWQgYXBwcm9wcmlhdGVseS4gT3RoZXJ3aXNlLCBpZiBpdCdzIGEgcGl4ZWwsIGNvbnZlcnQgaXQgdG8gYSBudW1iZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIGxhdGVzdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHN0eWxlVmFsdWVUeXBlcy5weC50ZXN0KGxhdGVzdCkpIHtcbiAgICAgICAgICAgICAgICBsYXRlc3QgPSBwYXJzZUZsb2F0KGxhdGVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGF0ZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBsYXRlc3QgaXMgYSBudW1iZXIsIGl0J3MgYSBwaXhlbCB2YWx1ZS4gV2UgdXNlIHRoZSBjdXJyZW50IHZpZXdwb3J0Qm94IHRvIGNhbGN1bGF0ZSB0aGF0XG4gICAgICAgICAqIHBpeGVsIHZhbHVlIGFzIGEgcGVyY2VudGFnZSBvZiBlYWNoIGF4aXNcbiAgICAgICAgICovXG4gICAgICAgIHZhciB4ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueCk7XG4gICAgICAgIHZhciB5ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueSk7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh4LCBcIiUgXCIpLmNvbmNhdCh5LCBcIiVcIik7XG4gICAgfSxcbn07XG5cbnZhciB2YXJUb2tlbiA9IFwiXyRjc3NcIjtcbnZhciBjb3JyZWN0Qm94U2hhZG93ID0ge1xuICAgIGNvcnJlY3Q6IGZ1bmN0aW9uIChsYXRlc3QsIF9hKSB7XG4gICAgICAgIHZhciB0cmVlU2NhbGUgPSBfYS50cmVlU2NhbGUsIHByb2plY3Rpb25EZWx0YSA9IF9hLnByb2plY3Rpb25EZWx0YTtcbiAgICAgICAgdmFyIG9yaWdpbmFsID0gbGF0ZXN0O1xuICAgICAgICAvKipcbiAgICAgICAgICogV2UgbmVlZCB0byBmaXJzdCBzdHJpcCBhbmQgc3RvcmUgQ1NTIHZhcmlhYmxlcyBmcm9tIHRoZSBzdHJpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgY29udGFpbnNDU1NWYXJpYWJsZXMgPSBsYXRlc3QuaW5jbHVkZXMoXCJ2YXIoXCIpO1xuICAgICAgICB2YXIgY3NzVmFyaWFibGVzID0gW107XG4gICAgICAgIGlmIChjb250YWluc0NTU1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgbGF0ZXN0ID0gbGF0ZXN0LnJlcGxhY2UoY3NzVmFyaWFibGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgY3NzVmFyaWFibGVzLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YXJUb2tlbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaGFkb3cgPSBzdHlsZVZhbHVlVHlwZXMuY29tcGxleC5wYXJzZShsYXRlc3QpO1xuICAgICAgICAvLyBUT0RPOiBEb2Vzbid0IHN1cHBvcnQgbXVsdGlwbGUgc2hhZG93c1xuICAgICAgICBpZiAoc2hhZG93Lmxlbmd0aCA+IDUpXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWw7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHN0eWxlVmFsdWVUeXBlcy5jb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKGxhdGVzdCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0eXBlb2Ygc2hhZG93WzBdICE9PSBcIm51bWJlclwiID8gMSA6IDA7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgb3ZlcmFsbCBjb250ZXh0IHNjYWxlXG4gICAgICAgIHZhciB4U2NhbGUgPSBwcm9qZWN0aW9uRGVsdGEueC5zY2FsZSAqIHRyZWVTY2FsZS54O1xuICAgICAgICB2YXIgeVNjYWxlID0gcHJvamVjdGlvbkRlbHRhLnkuc2NhbGUgKiB0cmVlU2NhbGUueTtcbiAgICAgICAgc2hhZG93WzAgKyBvZmZzZXRdIC89IHhTY2FsZTtcbiAgICAgICAgc2hhZG93WzEgKyBvZmZzZXRdIC89IHlTY2FsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElkZWFsbHkgd2UnZCBjb3JyZWN0IHggYW5kIHkgc2NhbGVzIGluZGl2aWR1YWxseSwgYnV0IGJlY2F1c2UgYmx1ciBhbmRcbiAgICAgICAgICogc3ByZWFkIGFwcGx5IHRvIGJvdGggd2UgaGF2ZSB0byB0YWtlIGEgc2NhbGUgYXZlcmFnZSBhbmQgYXBwbHkgdGhhdCBpbnN0ZWFkLlxuICAgICAgICAgKiBXZSBjb3VsZCBwb3RlbnRpYWxseSBpbXByb3ZlIHRoZSBvdXRjb21lIG9mIHRoaXMgYnkgaW5jb3Jwb3JhdGluZyB0aGUgcmF0aW8gYmV0d2VlblxuICAgICAgICAgKiB0aGUgdHdvIHNjYWxlcy5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBhdmVyYWdlU2NhbGUgPSBwb3Btb3Rpb24ubWl4KHhTY2FsZSwgeVNjYWxlLCAwLjUpO1xuICAgICAgICAvLyBCbHVyXG4gICAgICAgIGlmICh0eXBlb2Ygc2hhZG93WzIgKyBvZmZzZXRdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgc2hhZG93WzIgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICAgICAgLy8gU3ByZWFkXG4gICAgICAgIGlmICh0eXBlb2Ygc2hhZG93WzMgKyBvZmZzZXRdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgc2hhZG93WzMgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRlbXBsYXRlKHNoYWRvdyk7XG4gICAgICAgIGlmIChjb250YWluc0NTU1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgdmFyIGlfMSA9IDA7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSh2YXJUb2tlbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjc3NWYXJpYWJsZSA9IGNzc1ZhcmlhYmxlc1tpXzFdO1xuICAgICAgICAgICAgICAgIGlfMSsrO1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NWYXJpYWJsZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSxcbn07XG5cbnZhciBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBvbmx5IG1vdW50cyBwcm9qZWN0aW9uIG5vZGVzIGZvciBjb21wb25lbnRzIHRoYXRcbiAgICAgKiBuZWVkIG1lYXN1cmluZywgd2UgbWlnaHQgd2FudCB0byBkbyBpdCBmb3IgYWxsIGNvbXBvbmVudHNcbiAgICAgKiBpbiBvcmRlciB0byBpbmNvcnBvcmF0ZSB0cmFuc2Zvcm1zXG4gICAgICovXG4gICAgTWVhc3VyZUxheW91dFdpdGhDb250ZXh0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQsIGxheW91dEdyb3VwID0gX2EubGF5b3V0R3JvdXAsIHN3aXRjaExheW91dEdyb3VwID0gX2Euc3dpdGNoTGF5b3V0R3JvdXAsIGxheW91dElkID0gX2EubGF5b3V0SWQ7XG4gICAgICAgIHZhciBwcm9qZWN0aW9uID0gdmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uO1xuICAgICAgICBhZGRTY2FsZUNvcnJlY3RvcihkZWZhdWx0U2NhbGVDb3JyZWN0b3JzKTtcbiAgICAgICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChsYXlvdXRHcm91cCA9PT0gbnVsbCB8fCBsYXlvdXRHcm91cCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGF5b3V0R3JvdXAuZ3JvdXApXG4gICAgICAgICAgICAgICAgbGF5b3V0R3JvdXAuZ3JvdXAuYWRkKHByb2plY3Rpb24pO1xuICAgICAgICAgICAgaWYgKChzd2l0Y2hMYXlvdXRHcm91cCA9PT0gbnVsbCB8fCBzd2l0Y2hMYXlvdXRHcm91cCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3dpdGNoTGF5b3V0R3JvdXAucmVnaXN0ZXIpICYmIGxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoTGF5b3V0R3JvdXAucmVnaXN0ZXIocHJvamVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnJvb3QuZGlkVXBkYXRlKCk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25Db21wbGV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2FmZVRvUmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByb2plY3Rpb24uc2V0T3B0aW9ucyh0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcHJvamVjdGlvbi5vcHRpb25zKSwgeyBvbkV4aXRDb21wbGV0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2FmZVRvUmVtb3ZlKCk7IH0gfSkpO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNFdmVyVXBkYXRlZCA9IHRydWU7XG4gICAgfTtcbiAgICBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQucHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBsYXlvdXREZXBlbmRlbmN5ID0gX2EubGF5b3V0RGVwZW5kZW5jeSwgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQsIGRyYWcgPSBfYS5kcmFnLCBpc1ByZXNlbnQgPSBfYS5pc1ByZXNlbnQ7XG4gICAgICAgIHZhciBwcm9qZWN0aW9uID0gdmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uO1xuICAgICAgICBpZiAoIXByb2plY3Rpb24pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRPRE86IFdlIHVzZSB0aGlzIGRhdGEgaW4gcmVsZWdhdGUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG9cbiAgICAgICAgICogcHJvbW90ZSBhIHByZXZpb3VzIGVsZW1lbnQuIFRoZXJlJ3Mgbm8gZ3VhcmFudGVlIGl0cyBwcmVzZW5jZSBkYXRhXG4gICAgICAgICAqIHdpbGwgaGF2ZSB1cGRhdGVkIGJ5IHRoaXMgcG9pbnQgLSBpZiBhIGJ1ZyBsaWtlIHRoaXMgYXJpc2VzIGl0IHdpbGxcbiAgICAgICAgICogaGF2ZSB0byBiZSB0aGF0IHdlIG1hcmtGb3JSZWxlZ2F0aW9uIGFuZCB0aGVuIGZpbmQgYSBuZXcgbGVhZCBzb21lIG90aGVyIHdheSxcbiAgICAgICAgICogcGVyaGFwcyBpbiBkaWRVcGRhdGVcbiAgICAgICAgICovXG4gICAgICAgIHByb2plY3Rpb24uaXNQcmVzZW50ID0gaXNQcmVzZW50O1xuICAgICAgICBpZiAoZHJhZyB8fFxuICAgICAgICAgICAgcHJldlByb3BzLmxheW91dERlcGVuZGVuY3kgIT09IGxheW91dERlcGVuZGVuY3kgfHxcbiAgICAgICAgICAgIGxheW91dERlcGVuZGVuY3kgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvamVjdGlvbi53aWxsVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2UHJvcHMuaXNQcmVzZW50ICE9PSBpc1ByZXNlbnQpIHtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uLnByb21vdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFwcm9qZWN0aW9uLnJlbGVnYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGVyZSdzIGFub3RoZXIgc3RhY2sgbWVtYmVyIHRha2luZyBvdmVyIGZyb20gdGhpcyBvbmUsXG4gICAgICAgICAgICAgICAgICogaXQncyBpbiBjaGFyZ2Ugb2YgdGhlIGV4aXQgYW5pbWF0aW9uIGFuZCB0aGVyZWZvcmUgc2hvdWxkXG4gICAgICAgICAgICAgICAgICogYmUgaW4gY2hhcmdlIG9mIHRoZSBzYWZlIHRvIHJlbW92ZS4gT3RoZXJ3aXNlIHdlIGNhbGwgaXQgaGVyZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzeW5jX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5wb3N0UmVuZGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISgoX2EgPSBwcm9qZWN0aW9uLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZW1iZXJzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByb2plY3Rpb24gPSB0aGlzLnByb3BzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24ucm9vdC5kaWRVcGRhdGUoKTtcbiAgICAgICAgICAgIGlmICghcHJvamVjdGlvbi5jdXJyZW50QW5pbWF0aW9uICYmIHByb2plY3Rpb24uaXNMZWFkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudCwgbGF5b3V0R3JvdXAgPSBfYS5sYXlvdXRHcm91cCwgcHJvbW90ZUNvbnRleHQgPSBfYS5zd2l0Y2hMYXlvdXRHcm91cDtcbiAgICAgICAgdmFyIHByb2plY3Rpb24gPSB2aXN1YWxFbGVtZW50LnByb2plY3Rpb247XG4gICAgICAgIGlmIChwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnNjaGVkdWxlQ2hlY2tBZnRlclVubW91bnQoKTtcbiAgICAgICAgICAgIGlmIChsYXlvdXRHcm91cCA9PT0gbnVsbCB8fCBsYXlvdXRHcm91cCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGF5b3V0R3JvdXAuZ3JvdXApXG4gICAgICAgICAgICAgICAgbGF5b3V0R3JvdXAuZ3JvdXAucmVtb3ZlKHByb2plY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHByb21vdGVDb250ZXh0ID09PSBudWxsIHx8IHByb21vdGVDb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9tb3RlQ29udGV4dC5kZXJlZ2lzdGVyKVxuICAgICAgICAgICAgICAgIHByb21vdGVDb250ZXh0LmRlcmVnaXN0ZXIocHJvamVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dC5wcm90b3R5cGUuc2FmZVRvUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2FmZVRvUmVtb3ZlID0gdGhpcy5wcm9wcy5zYWZlVG9SZW1vdmU7XG4gICAgICAgIHNhZmVUb1JlbW92ZSA9PT0gbnVsbCB8fCBzYWZlVG9SZW1vdmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNhZmVUb1JlbW92ZSgpO1xuICAgIH07XG4gICAgTWVhc3VyZUxheW91dFdpdGhDb250ZXh0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dDtcbn0oUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCkpO1xuZnVuY3Rpb24gTWVhc3VyZUxheW91dChwcm9wcykge1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZCh1c2VQcmVzZW5jZSgpLCAyKSwgaXNQcmVzZW50ID0gX2FbMF0sIHNhZmVUb1JlbW92ZSA9IF9hWzFdO1xuICAgIHZhciBsYXlvdXRHcm91cCA9IFJlYWN0LnVzZUNvbnRleHQoTGF5b3V0R3JvdXBDb250ZXh0KTtcbiAgICByZXR1cm4gKFJlYWN0X19kZWZhdWx0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dCwgdHNsaWIuX19hc3NpZ24oe30sIHByb3BzLCB7IGxheW91dEdyb3VwOiBsYXlvdXRHcm91cCwgc3dpdGNoTGF5b3V0R3JvdXA6IFJlYWN0LnVzZUNvbnRleHQoU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0KSwgaXNQcmVzZW50OiBpc1ByZXNlbnQsIHNhZmVUb1JlbW92ZTogc2FmZVRvUmVtb3ZlIH0pKSk7XG59XG52YXIgZGVmYXVsdFNjYWxlQ29ycmVjdG9ycyA9IHtcbiAgICBib3JkZXJSYWRpdXM6IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBjb3JyZWN0Qm9yZGVyUmFkaXVzKSwgeyBhcHBseVRvOiBbXG4gICAgICAgICAgICBcImJvcmRlclRvcExlZnRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiLFxuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiLFxuICAgICAgICBdIH0pLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGNvcnJlY3RCb3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IGNvcnJlY3RCb3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogY29ycmVjdEJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogY29ycmVjdEJvcmRlclJhZGl1cyxcbiAgICBib3hTaGFkb3c6IGNvcnJlY3RCb3hTaGFkb3csXG59O1xuXG52YXIgbGF5b3V0RmVhdHVyZXMgPSB7XG4gICAgbWVhc3VyZUxheW91dDogTWVhc3VyZUxheW91dCxcbn07XG5cbnZhciBEb2N1bWVudFByb2plY3Rpb25Ob2RlID0gY3JlYXRlUHJvamVjdGlvbk5vZGUoe1xuICAgIGF0dGFjaFJlc2l6ZUxpc3RlbmVyOiBmdW5jdGlvbiAocmVmLCBub3RpZnkpIHsgcmV0dXJuIGFkZERvbUV2ZW50KHJlZiwgXCJyZXNpemVcIiwgbm90aWZ5KTsgfSxcbiAgICBtZWFzdXJlU2Nyb2xsOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICB4OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsXG4gICAgICAgIHk6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXG4gICAgfSk7IH0sXG4gICAgY2hlY2tJc1Njcm9sbFJvb3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0sXG59KTtcblxudmFyIHJvb3RQcm9qZWN0aW9uTm9kZSA9IHtcbiAgICBjdXJyZW50OiB1bmRlZmluZWQsXG59O1xudmFyIEhUTUxQcm9qZWN0aW9uTm9kZSA9IGNyZWF0ZVByb2plY3Rpb25Ob2RlKHtcbiAgICBtZWFzdXJlU2Nyb2xsOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuICh7XG4gICAgICAgIHg6IGluc3RhbmNlLnNjcm9sbExlZnQsXG4gICAgICAgIHk6IGluc3RhbmNlLnNjcm9sbFRvcCxcbiAgICB9KTsgfSxcbiAgICBkZWZhdWx0UGFyZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciBkb2N1bWVudE5vZGUgPSBuZXcgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSgwLCB7fSk7XG4gICAgICAgICAgICBkb2N1bWVudE5vZGUubW91bnQod2luZG93KTtcbiAgICAgICAgICAgIGRvY3VtZW50Tm9kZS5zZXRPcHRpb25zKHsgbGF5b3V0U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQgPSBkb2N1bWVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50O1xuICAgIH0sXG4gICAgcmVzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uIChpbnN0YW5jZSwgdmFsdWUpIHtcbiAgICAgICAgaW5zdGFuY2Uuc3R5bGUudHJhbnNmb3JtID0gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCA/IHZhbHVlIDogXCJub25lXCI7XG4gICAgfSxcbiAgICBjaGVja0lzU2Nyb2xsUm9vdDogZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGluc3RhbmNlKS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiKTtcbiAgICB9LFxufSk7XG5cbnZhciBmZWF0dXJlQnVuZGxlID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGFuaW1hdGlvbnMpLCBnZXN0dXJlQW5pbWF0aW9ucyksIGRyYWcpLCBsYXlvdXRGZWF0dXJlcyk7XG4vKipcbiAqIEhUTUwgJiBTVkcgY29tcG9uZW50cywgb3B0aW1pc2VkIGZvciB1c2Ugd2l0aCBnZXN0dXJlcyBhbmQgYW5pbWF0aW9uLiBUaGVzZSBjYW4gYmUgdXNlZCBhc1xuICogZHJvcC1pbiByZXBsYWNlbWVudHMgZm9yIGFueSBIVE1MICYgU1ZHIGNvbXBvbmVudCwgYWxsIENTUyAmIFNWRyBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbW90aW9uID0gLypAX19QVVJFX18qLyBjcmVhdGVNb3Rpb25Qcm94eShmdW5jdGlvbiAoQ29tcG9uZW50LCBjb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgY29uZmlnLCBmZWF0dXJlQnVuZGxlLCBjcmVhdGVEb21WaXN1YWxFbGVtZW50LCBIVE1MUHJvamVjdGlvbk5vZGUpO1xufSk7XG4vKipcbiAqIENyZWF0ZSBhIERPTSBgbW90aW9uYCBjb21wb25lbnQgd2l0aCB0aGUgcHJvdmlkZWQgc3RyaW5nLiBUaGlzIGlzIHByaW1hcmlseSBpbnRlbmRlZFxuICogYXMgYSBmdWxsIGFsdGVybmF0aXZlIHRvIGBtb3Rpb25gIGZvciBjb25zdW1lcnMgd2hvIGhhdmUgdG8gc3VwcG9ydCBlbnZpcm9ubWVudHMgdGhhdCBkb24ndFxuICogc3VwcG9ydCBgUHJveHlgLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBjb25zdCBtb3Rpb24gPSB7XG4gKiAgIGRpdjogY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50KCdkaXYnKVxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQoa2V5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZU1vdGlvbkNvbXBvbmVudChjcmVhdGVEb21Nb3Rpb25Db25maWcoa2V5LCB7IGZvcndhcmRNb3Rpb25Qcm9wczogZmFsc2UgfSwgZmVhdHVyZUJ1bmRsZSwgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCwgSFRNTFByb2plY3Rpb25Ob2RlKSk7XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG52YXIgbSA9IGNyZWF0ZU1vdGlvblByb3h5KGNyZWF0ZURvbU1vdGlvbkNvbmZpZyk7XG5cbmZ1bmN0aW9uIHVzZUlzTW91bnRlZCgpIHtcbiAgICB2YXIgaXNNb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGlzTW91bnRlZDtcbn1cblxuZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XG4gICAgdmFyIGlzTW91bnRlZCA9IHVzZUlzTW91bnRlZCgpO1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZChSZWFjdC51c2VTdGF0ZSgwKSwgMiksIGZvcmNlZFJlbmRlckNvdW50ID0gX2FbMF0sIHNldEZvcmNlZFJlbmRlckNvdW50ID0gX2FbMV07XG4gICAgdmFyIGZvcmNlUmVuZGVyID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpc01vdW50ZWQuY3VycmVudCAmJiBzZXRGb3JjZWRSZW5kZXJDb3VudChmb3JjZWRSZW5kZXJDb3VudCArIDEpO1xuICAgIH0sIFtmb3JjZWRSZW5kZXJDb3VudF0pO1xuICAgIC8qKlxuICAgICAqIERlZmVyIHRoaXMgdG8gdGhlIGVuZCBvZiB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWUgaW4gY2FzZSB0aGVyZSBhcmUgbXVsdGlwbGVcbiAgICAgKiBzeW5jaHJvbm91cyBjYWxscy5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXJyZWRGb3JjZVJlbmRlciA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnBvc3RSZW5kZXIoZm9yY2VSZW5kZXIpOyB9LCBbZm9yY2VSZW5kZXJdKTtcbiAgICByZXR1cm4gW2RlZmVycmVkRm9yY2VSZW5kZXIsIGZvcmNlZFJlbmRlckNvdW50XTtcbn1cblxudmFyIFByZXNlbmNlQ2hpbGQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgaW5pdGlhbCA9IF9hLmluaXRpYWwsIGlzUHJlc2VudCA9IF9hLmlzUHJlc2VudCwgb25FeGl0Q29tcGxldGUgPSBfYS5vbkV4aXRDb21wbGV0ZSwgY3VzdG9tID0gX2EuY3VzdG9tLCBwcmVzZW5jZUFmZmVjdHNMYXlvdXQgPSBfYS5wcmVzZW5jZUFmZmVjdHNMYXlvdXQ7XG4gICAgdmFyIHByZXNlbmNlQ2hpbGRyZW4gPSB1c2VDb25zdGFudChuZXdDaGlsZHJlbk1hcCk7XG4gICAgdmFyIGlkID0gdXNlSWQoKTtcbiAgICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBpbml0aWFsOiBpbml0aWFsLFxuICAgICAgICBpc1ByZXNlbnQ6IGlzUHJlc2VudCxcbiAgICAgICAgY3VzdG9tOiBjdXN0b20sXG4gICAgICAgIG9uRXhpdENvbXBsZXRlOiBmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICBwcmVzZW5jZUNoaWxkcmVuLnNldChjaGlsZElkLCB0cnVlKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSB0c2xpYi5fX3ZhbHVlcyhwcmVzZW5jZUNoaWxkcmVuLnZhbHVlcygpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQ29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIGNhbiBzdG9wIHNlYXJjaGluZyB3aGVuIGFueSBpcyBpbmNvbXBsZXRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25FeGl0Q29tcGxldGUgPT09IG51bGwgfHwgb25FeGl0Q29tcGxldGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRXhpdENvbXBsZXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgICAgICAgICAgcHJlc2VuY2VDaGlsZHJlbi5zZXQoY2hpbGRJZCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByZXNlbmNlQ2hpbGRyZW4uZGVsZXRlKGNoaWxkSWQpOyB9O1xuICAgICAgICB9LFxuICAgIH0pOyB9LCBcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcHJlc2VuY2Ugb2YgYSBjaGlsZCBhZmZlY3RzIHRoZSBsYXlvdXQgb2YgdGhlIGNvbXBvbmVudHMgYXJvdW5kIGl0LFxuICAgICAqIHdlIHdhbnQgdG8gbWFrZSBhIG5ldyBjb250ZXh0IHZhbHVlIHRvIGVuc3VyZSB0aGV5IGdldCByZS1yZW5kZXJlZFxuICAgICAqIHNvIHRoZXkgY2FuIGRldGVjdCB0aGF0IGxheW91dCBjaGFuZ2UuXG4gICAgICovXG4gICAgcHJlc2VuY2VBZmZlY3RzTGF5b3V0ID8gdW5kZWZpbmVkIDogW2lzUHJlc2VudF0pO1xuICAgIFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBwcmVzZW5jZUNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKF8sIGtleSkgeyByZXR1cm4gcHJlc2VuY2VDaGlsZHJlbi5zZXQoa2V5LCBmYWxzZSk7IH0pO1xuICAgIH0sIFtpc1ByZXNlbnRdKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGVyZSdzIG5vIGBtb3Rpb25gIGNvbXBvbmVudHMgdG8gZmlyZSBleGl0IGFuaW1hdGlvbnMsIHdlIHdhbnQgdG8gcmVtb3ZlIHRoaXNcbiAgICAgKiBjb21wb25lbnQgaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgUmVhY3RfX25hbWVzcGFjZS51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAhaXNQcmVzZW50ICYmICFwcmVzZW5jZUNoaWxkcmVuLnNpemUgJiYgKG9uRXhpdENvbXBsZXRlID09PSBudWxsIHx8IG9uRXhpdENvbXBsZXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkV4aXRDb21wbGV0ZSgpKTtcbiAgICB9LCBbaXNQcmVzZW50XSk7XG4gICAgcmV0dXJuIChSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoUHJlc2VuY2VDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sIGNoaWxkcmVuKSk7XG59O1xuZnVuY3Rpb24gbmV3Q2hpbGRyZW5NYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXAoKTtcbn1cblxudmFyIGdldENoaWxkS2V5ID0gZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBjaGlsZC5rZXkgfHwgXCJcIjsgfTtcbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkTG9va3VwKGNoaWxkcmVuLCBhbGxDaGlsZHJlbikge1xuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBrZXkgPSBnZXRDaGlsZEtleShjaGlsZCk7XG4gICAgICAgIGFsbENoaWxkcmVuLnNldChrZXksIGNoaWxkKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG9ubHlFbGVtZW50cyhjaGlsZHJlbikge1xuICAgIHZhciBmaWx0ZXJlZCA9IFtdO1xuICAgIC8vIFdlIHVzZSBmb3JFYWNoIGhlcmUgaW5zdGVhZCBvZiBtYXAgYXMgbWFwIG11dGF0ZXMgdGhlIGNvbXBvbmVudCBrZXkgYnkgcHJlcHJlbmRpbmcgYC4kYFxuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKVxuICAgICAgICAgICAgZmlsdGVyZWQucHVzaChjaGlsZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpbHRlcmVkO1xufVxuLyoqXG4gKiBgQW5pbWF0ZVByZXNlbmNlYCBlbmFibGVzIHRoZSBhbmltYXRpb24gb2YgY29tcG9uZW50cyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIHRyZWUuXG4gKlxuICogV2hlbiBhZGRpbmcvcmVtb3ZpbmcgbW9yZSB0aGFuIGEgc2luZ2xlIGNoaWxkLCBldmVyeSBjaGlsZCAqKm11c3QqKiBiZSBnaXZlbiBhIHVuaXF1ZSBga2V5YCBwcm9wLlxuICpcbiAqIEFueSBgbW90aW9uYCBjb21wb25lbnRzIHRoYXQgaGF2ZSBhbiBgZXhpdGAgcHJvcGVydHkgZGVmaW5lZCB3aWxsIGFuaW1hdGUgb3V0IHdoZW4gcmVtb3ZlZCBmcm9tXG4gKiB0aGUgdHJlZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IG1vdGlvbiwgQW5pbWF0ZVByZXNlbmNlIH0gZnJvbSAnZnJhbWVyLW1vdGlvbidcbiAqXG4gKiBleHBvcnQgY29uc3QgSXRlbXMgPSAoeyBpdGVtcyB9KSA9PiAoXG4gKiAgIDxBbmltYXRlUHJlc2VuY2U+XG4gKiAgICAge2l0ZW1zLm1hcChpdGVtID0+IChcbiAqICAgICAgIDxtb3Rpb24uZGl2XG4gKiAgICAgICAgIGtleT17aXRlbS5pZH1cbiAqICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwIH19XG4gKiAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSB9fVxuICogICAgICAgICBleGl0PXt7IG9wYWNpdHk6IDAgfX1cbiAqICAgICAgIC8+XG4gKiAgICAgKSl9XG4gKiAgIDwvQW5pbWF0ZVByZXNlbmNlPlxuICogKVxuICogYGBgXG4gKlxuICogWW91IGNhbiBzZXF1ZW5jZSBleGl0IGFuaW1hdGlvbnMgdGhyb3VnaG91dCBhIHRyZWUgdXNpbmcgdmFyaWFudHMuXG4gKlxuICogSWYgYSBjaGlsZCBjb250YWlucyBtdWx0aXBsZSBgbW90aW9uYCBjb21wb25lbnRzIHdpdGggYGV4aXRgIHByb3BzLCBpdCB3aWxsIG9ubHkgdW5tb3VudCB0aGUgY2hpbGRcbiAqIG9uY2UgYWxsIGBtb3Rpb25gIGNvbXBvbmVudHMgaGF2ZSBmaW5pc2hlZCBhbmltYXRpbmcgb3V0LiBMaWtld2lzZSwgYW55IGNvbXBvbmVudHMgdXNpbmdcbiAqIGB1c2VQcmVzZW5jZWAgYWxsIG5lZWQgdG8gY2FsbCBgc2FmZVRvUmVtb3ZlYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBBbmltYXRlUHJlc2VuY2UgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgY3VzdG9tID0gX2EuY3VzdG9tLCBfYiA9IF9hLmluaXRpYWwsIGluaXRpYWwgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iLCBvbkV4aXRDb21wbGV0ZSA9IF9hLm9uRXhpdENvbXBsZXRlLCBleGl0QmVmb3JlRW50ZXIgPSBfYS5leGl0QmVmb3JlRW50ZXIsIF9jID0gX2EucHJlc2VuY2VBZmZlY3RzTGF5b3V0LCBwcmVzZW5jZUFmZmVjdHNMYXlvdXQgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jO1xuICAgIC8vIFdlIHdhbnQgdG8gZm9yY2UgYSByZS1yZW5kZXIgb25jZSBhbGwgZXhpdGluZyBhbmltYXRpb25zIGhhdmUgZmluaXNoZWQuIFdlXG4gICAgLy8gZWl0aGVyIHVzZSBhIGxvY2FsIGZvcmNlUmVuZGVyIGZ1bmN0aW9uLCBvciBvbmUgZnJvbSBhIHBhcmVudCBjb250ZXh0IGlmIGl0IGV4aXN0cy5cbiAgICB2YXIgX2QgPSB0c2xpYi5fX3JlYWQodXNlRm9yY2VVcGRhdGUoKSwgMSksIGZvcmNlUmVuZGVyID0gX2RbMF07XG4gICAgdmFyIGZvcmNlUmVuZGVyTGF5b3V0R3JvdXAgPSBSZWFjdC51c2VDb250ZXh0KExheW91dEdyb3VwQ29udGV4dCkuZm9yY2VSZW5kZXI7XG4gICAgaWYgKGZvcmNlUmVuZGVyTGF5b3V0R3JvdXApXG4gICAgICAgIGZvcmNlUmVuZGVyID0gZm9yY2VSZW5kZXJMYXlvdXRHcm91cDtcbiAgICB2YXIgaXNNb3VudGVkID0gdXNlSXNNb3VudGVkKCk7XG4gICAgLy8gRmlsdGVyIG91dCBhbnkgY2hpbGRyZW4gdGhhdCBhcmVuJ3QgUmVhY3RFbGVtZW50cy4gV2UgY2FuIG9ubHkgdHJhY2sgUmVhY3RFbGVtZW50cyB3aXRoIGEgcHJvcHMua2V5XG4gICAgdmFyIGZpbHRlcmVkQ2hpbGRyZW4gPSBvbmx5RWxlbWVudHMoY2hpbGRyZW4pO1xuICAgIHZhciBjaGlsZHJlblRvUmVuZGVyID0gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICB2YXIgZXhpdGluZyA9IG5ldyBTZXQoKTtcbiAgICAvLyBLZWVwIGEgbGl2aW5nIHJlY29yZCBvZiB0aGUgY2hpbGRyZW4gd2UncmUgYWN0dWFsbHkgcmVuZGVyaW5nIHNvIHdlXG4gICAgLy8gY2FuIGRpZmYgdG8gZmlndXJlIG91dCB3aGljaCBhcmUgZW50ZXJpbmcgYW5kIGV4aXRpbmdcbiAgICB2YXIgcHJlc2VudENoaWxkcmVuID0gUmVhY3QudXNlUmVmKGNoaWxkcmVuVG9SZW5kZXIpO1xuICAgIC8vIEEgbG9va3VwIHRhYmxlIHRvIHF1aWNrbHkgcmVmZXJlbmNlIGNvbXBvbmVudHMgYnkga2V5XG4gICAgdmFyIGFsbENoaWxkcmVuID0gUmVhY3QudXNlUmVmKG5ldyBNYXAoKSkuY3VycmVudDtcbiAgICAvLyBJZiB0aGlzIGlzIHRoZSBpbml0aWFsIGNvbXBvbmVudCByZW5kZXIsIGp1c3QgZGVhbCB3aXRoIGxvZ2ljIHN1cnJvdW5kaW5nIHdoZXRoZXJcbiAgICAvLyB3ZSBwbGF5IG9uTW91bnQgYW5pbWF0aW9ucyBvciBub3QuXG4gICAgdmFyIGlzSW5pdGlhbFJlbmRlciA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNJbml0aWFsUmVuZGVyLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgdXBkYXRlQ2hpbGRMb29rdXAoZmlsdGVyZWRDaGlsZHJlbiwgYWxsQ2hpbGRyZW4pO1xuICAgICAgICBwcmVzZW50Q2hpbGRyZW4uY3VycmVudCA9IGNoaWxkcmVuVG9SZW5kZXI7XG4gICAgfSk7XG4gICAgdXNlVW5tb3VudEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzSW5pdGlhbFJlbmRlci5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgYWxsQ2hpbGRyZW4uY2xlYXIoKTtcbiAgICAgICAgZXhpdGluZy5jbGVhcigpO1xuICAgIH0pO1xuICAgIGlmIChpc0luaXRpYWxSZW5kZXIuY3VycmVudCkge1xuICAgICAgICByZXR1cm4gKFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChSZWFjdF9fbmFtZXNwYWNlLkZyYWdtZW50LCBudWxsLCBjaGlsZHJlblRvUmVuZGVyLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoUHJlc2VuY2VDaGlsZCwgeyBrZXk6IGdldENoaWxkS2V5KGNoaWxkKSwgaXNQcmVzZW50OiB0cnVlLCBpbml0aWFsOiBpbml0aWFsID8gdW5kZWZpbmVkIDogZmFsc2UsIHByZXNlbmNlQWZmZWN0c0xheW91dDogcHJlc2VuY2VBZmZlY3RzTGF5b3V0IH0sIGNoaWxkKSk7IH0pKSk7XG4gICAgfVxuICAgIC8vIElmIHRoaXMgaXMgYSBzdWJzZXF1ZW50IHJlbmRlciwgZGVhbCB3aXRoIGVudGVyaW5nIGFuZCBleGl0aW5nIGNoaWxkcmVuXG4gICAgY2hpbGRyZW5Ub1JlbmRlciA9IHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChjaGlsZHJlblRvUmVuZGVyKSwgZmFsc2UpO1xuICAgIC8vIERpZmYgdGhlIGtleXMgb2YgdGhlIGN1cnJlbnRseS1wcmVzZW50IGFuZCB0YXJnZXQgY2hpbGRyZW4gdG8gdXBkYXRlIG91clxuICAgIC8vIGV4aXRpbmcgbGlzdC5cbiAgICB2YXIgcHJlc2VudEtleXMgPSBwcmVzZW50Q2hpbGRyZW4uY3VycmVudC5tYXAoZ2V0Q2hpbGRLZXkpO1xuICAgIHZhciB0YXJnZXRLZXlzID0gZmlsdGVyZWRDaGlsZHJlbi5tYXAoZ2V0Q2hpbGRLZXkpO1xuICAgIC8vIERpZmYgdGhlIHByZXNlbnQgY2hpbGRyZW4gd2l0aCBvdXIgdGFyZ2V0IGNoaWxkcmVuIGFuZCBtYXJrIHRob3NlIHRoYXQgYXJlIGV4aXRpbmdcbiAgICB2YXIgbnVtUHJlc2VudCA9IHByZXNlbnRLZXlzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVByZXNlbnQ7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gcHJlc2VudEtleXNbaV07XG4gICAgICAgIGlmICh0YXJnZXRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGV4aXRpbmcuYWRkKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgd2UgY3VycmVudGx5IGhhdmUgZXhpdGluZyBjaGlsZHJlbiwgYW5kIHdlJ3JlIGRlZmVycmluZyByZW5kZXJpbmcgaW5jb21pbmcgY2hpbGRyZW5cbiAgICAvLyB1bnRpbCBhZnRlciBhbGwgY3VycmVudCBjaGlsZHJlbiBoYXZlIGV4aXRpbmcsIGVtcHR5IHRoZSBjaGlsZHJlblRvUmVuZGVyIGFycmF5XG4gICAgaWYgKGV4aXRCZWZvcmVFbnRlciAmJiBleGl0aW5nLnNpemUpIHtcbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlciA9IFtdO1xuICAgIH1cbiAgICAvLyBMb29wIHRocm91Z2ggYWxsIGN1cnJlbnRseSBleGl0aW5nIGNvbXBvbmVudHMgYW5kIGNsb25lIHRoZW0gdG8gb3ZlcndyaXRlIGBhbmltYXRlYFxuICAgIC8vIHdpdGggYW55IGBleGl0YCBwcm9wIHRoZXkgbWlnaHQgaGF2ZSBkZWZpbmVkLlxuICAgIGV4aXRpbmcuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIGFjdHVhbGx5IGVudGVyaW5nIGFnYWluLCBlYXJseSByZXR1cm5cbiAgICAgICAgaWYgKHRhcmdldEtleXMuaW5kZXhPZihrZXkpICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGNoaWxkID0gYWxsQ2hpbGRyZW4uZ2V0KGtleSk7XG4gICAgICAgIGlmICghY2hpbGQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBpbnNlcnRpb25JbmRleCA9IHByZXNlbnRLZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgdmFyIG9uRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFsbENoaWxkcmVuLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgZXhpdGluZy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGlzIGNoaWxkIGZyb20gdGhlIHByZXNlbnQgY2hpbGRyZW5cbiAgICAgICAgICAgIHZhciByZW1vdmVJbmRleCA9IHByZXNlbnRDaGlsZHJlbi5jdXJyZW50LmZpbmRJbmRleChmdW5jdGlvbiAocHJlc2VudENoaWxkKSB7IHJldHVybiBwcmVzZW50Q2hpbGQua2V5ID09PSBrZXk7IH0pO1xuICAgICAgICAgICAgcHJlc2VudENoaWxkcmVuLmN1cnJlbnQuc3BsaWNlKHJlbW92ZUluZGV4LCAxKTtcbiAgICAgICAgICAgIC8vIERlZmVyIHJlLXJlbmRlcmluZyB1bnRpbCBhbGwgZXhpdGluZyBjaGlsZHJlbiBoYXZlIGluZGVlZCBsZWZ0XG4gICAgICAgICAgICBpZiAoIWV4aXRpbmcuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHByZXNlbnRDaGlsZHJlbi5jdXJyZW50ID0gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBpZiAoaXNNb3VudGVkLmN1cnJlbnQgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICBvbkV4aXRDb21wbGV0ZSAmJiBvbkV4aXRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjaGlsZHJlblRvUmVuZGVyLnNwbGljZShpbnNlcnRpb25JbmRleCwgMCwgUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFByZXNlbmNlQ2hpbGQsIHsga2V5OiBnZXRDaGlsZEtleShjaGlsZCksIGlzUHJlc2VudDogZmFsc2UsIG9uRXhpdENvbXBsZXRlOiBvbkV4aXQsIGN1c3RvbTogY3VzdG9tLCBwcmVzZW5jZUFmZmVjdHNMYXlvdXQ6IHByZXNlbmNlQWZmZWN0c0xheW91dCB9LCBjaGlsZCkpO1xuICAgIH0pO1xuICAgIC8vIEFkZCBgTW90aW9uQ29udGV4dGAgZXZlbiB0byBjaGlsZHJlbiB0aGF0IGRvbid0IG5lZWQgaXQgdG8gZW5zdXJlIHdlJ3JlIHJlbmRlcmluZ1xuICAgIC8vIHRoZSBzYW1lIHRyZWUgYmV0d2VlbiByZW5kZXJzXG4gICAgY2hpbGRyZW5Ub1JlbmRlciA9IGNoaWxkcmVuVG9SZW5kZXIubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIga2V5ID0gY2hpbGQua2V5O1xuICAgICAgICByZXR1cm4gZXhpdGluZy5oYXMoa2V5KSA/IChjaGlsZCkgOiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFByZXNlbmNlQ2hpbGQsIHsga2V5OiBnZXRDaGlsZEtleShjaGlsZCksIGlzUHJlc2VudDogdHJ1ZSwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0OiBwcmVzZW5jZUFmZmVjdHNMYXlvdXQgfSwgY2hpbGQpKTtcbiAgICB9KTtcbiAgICBpZiAoZW52ICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBleGl0QmVmb3JlRW50ZXIgJiZcbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlci5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIllvdSdyZSBhdHRlbXB0aW5nIHRvIGFuaW1hdGUgbXVsdGlwbGUgY2hpbGRyZW4gd2l0aGluIEFuaW1hdGVQcmVzZW5jZSwgYnV0IGl0cyBleGl0QmVmb3JlRW50ZXIgcHJvcCBpcyBzZXQgdG8gdHJ1ZS4gVGhpcyB3aWxsIGxlYWQgdG8gb2RkIHZpc3VhbCBiZWhhdmlvdXIuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gKFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChSZWFjdF9fbmFtZXNwYWNlLkZyYWdtZW50LCBudWxsLCBleGl0aW5nLnNpemVcbiAgICAgICAgPyBjaGlsZHJlblRvUmVuZGVyXG4gICAgICAgIDogY2hpbGRyZW5Ub1JlbmRlci5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQpOyB9KSkpO1xufTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG52YXIgRGVwcmVjYXRlZExheW91dEdyb3VwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiAhbm9kZS5pc0xheW91dERpcnR5ICYmIG5vZGUud2lsbFVwZGF0ZShmYWxzZSk7XG59O1xuZnVuY3Rpb24gbm9kZUdyb3VwKCkge1xuICAgIHZhciBub2RlcyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgdmFyIGRpcnR5QWxsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbm9kZXMuZm9yRWFjaChub3RpZnkpOyB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc2V0KG5vZGUsIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcIndpbGxVcGRhdGVcIiwgZGlydHlBbGwpKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgbm9kZXMuZGVsZXRlKG5vZGUpO1xuICAgICAgICAgICAgKF9hID0gc3Vic2NyaXB0aW9ucy5nZXQobm9kZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYSgpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5kZWxldGUobm9kZSk7XG4gICAgICAgICAgICBkaXJ0eUFsbCgpO1xuICAgICAgICB9LFxuICAgICAgICBkaXJ0eTogZGlydHlBbGwsXG4gICAgfTtcbn1cblxudmFyIHNob3VsZEluaGVyaXRHcm91cCA9IGZ1bmN0aW9uIChpbmhlcml0KSB7IHJldHVybiBpbmhlcml0ID09PSB0cnVlOyB9O1xudmFyIHNob3VsZEluaGVyaXRJZCA9IGZ1bmN0aW9uIChpbmhlcml0KSB7XG4gICAgcmV0dXJuIHNob3VsZEluaGVyaXRHcm91cChpbmhlcml0ID09PSB0cnVlKSB8fCBpbmhlcml0ID09PSBcImlkXCI7XG59O1xudmFyIExheW91dEdyb3VwID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIF9iLCBfYztcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgaWQgPSBfYS5pZCwgaW5oZXJpdElkID0gX2EuaW5oZXJpdElkLCBfZCA9IF9hLmluaGVyaXQsIGluaGVyaXQgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kO1xuICAgIC8vIE1haW50YWluIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggaW5oZXJpdElkIHVudGlsIDcuMFxuICAgIGlmIChpbmhlcml0SWQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgaW5oZXJpdCA9IGluaGVyaXRJZDtcbiAgICB2YXIgbGF5b3V0R3JvdXBDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMYXlvdXRHcm91cENvbnRleHQpO1xuICAgIHZhciBkZXByZWNhdGVkTGF5b3V0R3JvdXBDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEZXByZWNhdGVkTGF5b3V0R3JvdXBDb250ZXh0KTtcbiAgICB2YXIgX2UgPSB0c2xpYi5fX3JlYWQodXNlRm9yY2VVcGRhdGUoKSwgMiksIGZvcmNlUmVuZGVyID0gX2VbMF0sIGtleSA9IF9lWzFdO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIHZhciB1cHN0cmVhbUlkID0gKF9iID0gbGF5b3V0R3JvdXBDb250ZXh0LmlkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkZXByZWNhdGVkTGF5b3V0R3JvdXBDb250ZXh0O1xuICAgIGlmIChjb250ZXh0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHNob3VsZEluaGVyaXRJZChpbmhlcml0KSAmJiB1cHN0cmVhbUlkKSB7XG4gICAgICAgICAgICBpZCA9IGlkID8gdXBzdHJlYW1JZCArIFwiLVwiICsgaWQgOiB1cHN0cmVhbUlkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuY3VycmVudCA9IHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIGdyb3VwOiBzaG91bGRJbmhlcml0R3JvdXAoaW5oZXJpdClcbiAgICAgICAgICAgICAgICA/IChfYyA9IGxheW91dEdyb3VwQ29udGV4dCA9PT0gbnVsbCB8fCBsYXlvdXRHcm91cENvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxheW91dEdyb3VwQ29udGV4dC5ncm91cCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbm9kZUdyb3VwKClcbiAgICAgICAgICAgICAgICA6IG5vZGVHcm91cCgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgbWVtb2l6ZWRDb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGNvbnRleHQuY3VycmVudCksIHsgZm9yY2VSZW5kZXI6IGZvcmNlUmVuZGVyIH0pKTsgfSwgW2tleV0pO1xuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KExheW91dEdyb3VwQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogbWVtb2l6ZWRDb250ZXh0IH0sIGNoaWxkcmVuKSk7XG59O1xuXG52YXIgaWQgPSAwO1xudmFyIEFuaW1hdGVTaGFyZWRMYXlvdXQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbjtcbiAgICBSZWFjdF9fbmFtZXNwYWNlLnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhleUxpc3Rlbi53YXJuaW5nKGZhbHNlLCBcIkFuaW1hdGVTaGFyZWRMYXlvdXQgaXMgZGVwcmVjYXRlZDogaHR0cHM6Ly93d3cuZnJhbWVyLmNvbS9kb2NzL2d1aWRlLXVwZ3JhZGUvIyNzaGFyZWQtbGF5b3V0LWFuaW1hdGlvbnNcIik7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KExheW91dEdyb3VwLCB7IGlkOiB1c2VDb25zdGFudChmdW5jdGlvbiAoKSB7IHJldHVybiBcImFzbC1cIi5jb25jYXQoaWQrKyk7IH0pIH0sIGNoaWxkcmVuKSk7XG59O1xuXG4vKipcbiAqIGBNb3Rpb25Db25maWdgIGlzIHVzZWQgdG8gc2V0IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgYWxsIGNoaWxkcmVuIGBtb3Rpb25gIGNvbXBvbmVudHMuXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBtb3Rpb24sIE1vdGlvbkNvbmZpZyB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgZnVuY3Rpb24gQXBwKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxNb3Rpb25Db25maWcgdHJhbnNpdGlvbj17eyB0eXBlOiBcInNwcmluZ1wiIH19PlxuICogICAgICAgPG1vdGlvbi5kaXYgYW5pbWF0ZT17eyB4OiAxMDAgfX0gLz5cbiAqICAgICA8L01vdGlvbkNvbmZpZz5cbiAqICAgKVxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBNb3Rpb25Db25maWcoX2EpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgaXNWYWxpZFByb3AgPSBfYS5pc1ZhbGlkUHJvcCwgY29uZmlnID0gdHNsaWIuX19yZXN0KF9hLCBbXCJjaGlsZHJlblwiLCBcImlzVmFsaWRQcm9wXCJdKTtcbiAgICBpc1ZhbGlkUHJvcCAmJiBsb2FkRXh0ZXJuYWxJc1ZhbGlkUHJvcChpc1ZhbGlkUHJvcCk7XG4gICAgLyoqXG4gICAgICogSW5oZXJpdCBwcm9wcyBmcm9tIGFueSBwYXJlbnQgTW90aW9uQ29uZmlnIGNvbXBvbmVudHNcbiAgICAgKi9cbiAgICBjb25maWcgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KSksIGNvbmZpZyk7XG4gICAgLyoqXG4gICAgICogRG9uJ3QgYWxsb3cgaXNTdGF0aWMgdG8gY2hhbmdlIGJldHdlZW4gcmVuZGVycyBhcyBpdCBhZmZlY3RzIGhvdyBtYW55IGhvb2tzXG4gICAgICogbW90aW9uIGNvbXBvbmVudHMgZmlyZS5cbiAgICAgKi9cbiAgICBjb25maWcuaXNTdGF0aWMgPSB1c2VDb25zdGFudChmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWcuaXNTdGF0aWM7IH0pO1xuICAgIC8qKlxuICAgICAqIENyZWF0aW5nIGEgbmV3IGNvbmZpZyBjb250ZXh0IG9iamVjdCB3aWxsIHJlLXJlbmRlciBldmVyeSBgbW90aW9uYCBjb21wb25lbnRcbiAgICAgKiBldmVyeSB0aW1lIGl0IHJlbmRlcnMuIFNvIHdlIG9ubHkgd2FudCB0byBjcmVhdGUgYSBuZXcgb25lIHNwYXJpbmdseS5cbiAgICAgKi9cbiAgICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9LCBbSlNPTi5zdHJpbmdpZnkoY29uZmlnLnRyYW5zaXRpb24pLCBjb25maWcudHJhbnNmb3JtUGFnZVBvaW50LCBjb25maWcucmVkdWNlZE1vdGlvbl0pO1xuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KE1vdGlvbkNvbmZpZ0NvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNvbnRleHQgfSwgY2hpbGRyZW4pKTtcbn1cblxuLyoqXG4gKiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGBtYCBjb21wb25lbnQgdG8gcmVkdWNlIGJ1bmRsZSBzaXplLlxuICpcbiAqIGBtYCBpcyBhIHZlcnNpb24gb2YgdGhlIGBtb3Rpb25gIGNvbXBvbmVudCB0aGF0IG9ubHkgbG9hZHMgZnVuY3Rpb25hbGl0eVxuICogY3JpdGljYWwgZm9yIHRoZSBpbml0aWFsIHJlbmRlci5cbiAqXG4gKiBgTGF6eU1vdGlvbmAgY2FuIHRoZW4gYmUgdXNlZCB0byBlaXRoZXIgc3luY2hyb25vdXNseSBvciBhc3luY2hyb25vdXNseVxuICogbG9hZCBhbmltYXRpb24gYW5kIGdlc3R1cmUgc3VwcG9ydC5cbiAqXG4gKiBgYGBqc3hcbiAqIC8vIFN5bmNocm9ub3VzIGxvYWRpbmdcbiAqIGltcG9ydCB7IExhenlNb3Rpb24sIG0sIGRvbUFuaW1hdGlvbnMgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxMYXp5TW90aW9uIGZlYXR1cmVzPXtkb21BbmltYXRpb25zfT5cbiAqICAgICAgIDxtLmRpdiBhbmltYXRlPXt7IHNjYWxlOiAyIH19IC8+XG4gKiAgICAgPC9MYXp5TW90aW9uPlxuICogICApXG4gKiB9XG4gKlxuICogLy8gQXN5bmNocm9ub3VzIGxvYWRpbmdcbiAqIGltcG9ydCB7IExhenlNb3Rpb24sIG0gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxMYXp5TW90aW9uIGZlYXR1cmVzPXsoKSA9PiBpbXBvcnQoJy4vcGF0aC90by9kb21BbmltYXRpb25zJyl9PlxuICogICAgICAgPG0uZGl2IGFuaW1hdGU9e3sgc2NhbGU6IDIgfX0gLz5cbiAqICAgICA8L0xhenlNb3Rpb24+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gTGF6eU1vdGlvbihfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBmZWF0dXJlcyA9IF9hLmZlYXR1cmVzLCBfYiA9IF9hLnN0cmljdCwgc3RyaWN0ID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2I7XG4gICAgdmFyIF9jID0gdHNsaWIuX19yZWFkKFJlYWN0LnVzZVN0YXRlKCFpc0xhenlCdW5kbGUoZmVhdHVyZXMpKSwgMiksIHNldElzTG9hZGVkID0gX2NbMV07XG4gICAgdmFyIGxvYWRlZFJlbmRlcmVyID0gUmVhY3QudXNlUmVmKHVuZGVmaW5lZCk7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBpcyBhIHN5bmNocm9ub3VzIGxvYWQsIGxvYWQgZmVhdHVyZXMgaW1tZWRpYXRlbHlcbiAgICAgKi9cbiAgICBpZiAoIWlzTGF6eUJ1bmRsZShmZWF0dXJlcykpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVyID0gZmVhdHVyZXMucmVuZGVyZXIsIGxvYWRlZEZlYXR1cmVzID0gdHNsaWIuX19yZXN0KGZlYXR1cmVzLCBbXCJyZW5kZXJlclwiXSk7XG4gICAgICAgIGxvYWRlZFJlbmRlcmVyLmN1cnJlbnQgPSByZW5kZXJlcjtcbiAgICAgICAgbG9hZEZlYXR1cmVzKGxvYWRlZEZlYXR1cmVzKTtcbiAgICB9XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTGF6eUJ1bmRsZShmZWF0dXJlcykpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzKCkudGhlbihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZXIgPSBfYS5yZW5kZXJlciwgbG9hZGVkRmVhdHVyZXMgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcInJlbmRlcmVyXCJdKTtcbiAgICAgICAgICAgICAgICBsb2FkRmVhdHVyZXMobG9hZGVkRmVhdHVyZXMpO1xuICAgICAgICAgICAgICAgIGxvYWRlZFJlbmRlcmVyLmN1cnJlbnQgPSByZW5kZXJlcjtcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRlZCh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KExhenlDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB7IHJlbmRlcmVyOiBsb2FkZWRSZW5kZXJlci5jdXJyZW50LCBzdHJpY3Q6IHN0cmljdCB9IH0sIGNoaWxkcmVuKSk7XG59XG5mdW5jdGlvbiBpc0xhenlCdW5kbGUoZmVhdHVyZXMpIHtcbiAgICByZXR1cm4gdHlwZW9mIGZlYXR1cmVzID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbnZhciBSZW9yZGVyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmZ1bmN0aW9uIGNoZWNrUmVvcmRlcihvcmRlciwgdmFsdWUsIG9mZnNldCwgdmVsb2NpdHkpIHtcbiAgICBpZiAoIXZlbG9jaXR5KVxuICAgICAgICByZXR1cm4gb3JkZXI7XG4gICAgdmFyIGluZGV4ID0gb3JkZXIuZmluZEluZGV4KGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLnZhbHVlID09PSB2YWx1ZTsgfSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSlcbiAgICAgICAgcmV0dXJuIG9yZGVyO1xuICAgIHZhciBuZXh0T2Zmc2V0ID0gdmVsb2NpdHkgPiAwID8gMSA6IC0xO1xuICAgIHZhciBuZXh0SXRlbSA9IG9yZGVyW2luZGV4ICsgbmV4dE9mZnNldF07XG4gICAgaWYgKCFuZXh0SXRlbSlcbiAgICAgICAgcmV0dXJuIG9yZGVyO1xuICAgIHZhciBpdGVtID0gb3JkZXJbaW5kZXhdO1xuICAgIHZhciBuZXh0TGF5b3V0ID0gbmV4dEl0ZW0ubGF5b3V0O1xuICAgIHZhciBuZXh0SXRlbUNlbnRlciA9IHBvcG1vdGlvbi5taXgobmV4dExheW91dC5taW4sIG5leHRMYXlvdXQubWF4LCAwLjUpO1xuICAgIGlmICgobmV4dE9mZnNldCA9PT0gMSAmJiBpdGVtLmxheW91dC5tYXggKyBvZmZzZXQgPiBuZXh0SXRlbUNlbnRlcikgfHxcbiAgICAgICAgKG5leHRPZmZzZXQgPT09IC0xICYmIGl0ZW0ubGF5b3V0Lm1pbiArIG9mZnNldCA8IG5leHRJdGVtQ2VudGVyKSkge1xuICAgICAgICByZXR1cm4gbW92ZUl0ZW0ob3JkZXIsIGluZGV4LCBpbmRleCArIG5leHRPZmZzZXQpO1xuICAgIH1cbiAgICByZXR1cm4gb3JkZXI7XG59XG5cbmZ1bmN0aW9uIFJlb3JkZXJHcm91cChfYSwgZXh0ZXJuYWxSZWYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgX2IgPSBfYS5hcywgYXMgPSBfYiA9PT0gdm9pZCAwID8gXCJ1bFwiIDogX2IsIF9jID0gX2EuYXhpcywgYXhpcyA9IF9jID09PSB2b2lkIDAgPyBcInlcIiA6IF9jLCBvblJlb3JkZXIgPSBfYS5vblJlb3JkZXIsIHZhbHVlcyA9IF9hLnZhbHVlcywgcHJvcHMgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCIsIFwiYXNcIiwgXCJheGlzXCIsIFwib25SZW9yZGVyXCIsIFwidmFsdWVzXCJdKTtcbiAgICB2YXIgQ29tcG9uZW50ID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbW90aW9uKGFzKTsgfSk7XG4gICAgdmFyIG9yZGVyID0gW107XG4gICAgdmFyIGlzUmVvcmRlcmluZyA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgaGV5TGlzdGVuLmludmFyaWFudChCb29sZWFuKHZhbHVlcyksIFwiUmVvcmRlci5Hcm91cCBtdXN0IGJlIHByb3ZpZGVkIGEgdmFsdWVzIHByb3BcIik7XG4gICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgIHJlZ2lzdGVySXRlbTogZnVuY3Rpb24gKHZhbHVlLCBsYXlvdXQpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5zdXJlIGVudHJpZXMgY2FuJ3QgYWRkIHRoZW1zZWx2ZXMgbW9yZSB0aGFuIG9uY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGxheW91dCAmJlxuICAgICAgICAgICAgICAgIG9yZGVyLmZpbmRJbmRleChmdW5jdGlvbiAoZW50cnkpIHsgcmV0dXJuIHZhbHVlID09PSBlbnRyeS52YWx1ZTsgfSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3JkZXIucHVzaCh7IHZhbHVlOiB2YWx1ZSwgbGF5b3V0OiBsYXlvdXRbYXhpc10gfSk7XG4gICAgICAgICAgICAgICAgb3JkZXIuc29ydChjb21wYXJlTWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlT3JkZXI6IGZ1bmN0aW9uIChpZCwgb2Zmc2V0LCB2ZWxvY2l0eSkge1xuICAgICAgICAgICAgaWYgKGlzUmVvcmRlcmluZy5jdXJyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBuZXdPcmRlciA9IGNoZWNrUmVvcmRlcihvcmRlciwgaWQsIG9mZnNldCwgdmVsb2NpdHkpO1xuICAgICAgICAgICAgaWYgKG9yZGVyICE9PSBuZXdPcmRlcikge1xuICAgICAgICAgICAgICAgIGlzUmVvcmRlcmluZy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBvblJlb3JkZXIobmV3T3JkZXJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChnZXRWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTE7IH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzUmVvcmRlcmluZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSk7XG4gICAgcmV0dXJuIChSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB0c2xpYi5fX2Fzc2lnbih7fSwgcHJvcHMsIHsgcmVmOiBleHRlcm5hbFJlZiB9KSxcbiAgICAgICAgUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFJlb3JkZXJDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sIGNoaWxkcmVuKSkpO1xufVxudmFyIEdyb3VwID0gUmVhY3QuZm9yd2FyZFJlZihSZW9yZGVyR3JvdXApO1xuZnVuY3Rpb24gZ2V0VmFsdWUoaXRlbSkge1xuICAgIHJldHVybiBpdGVtLnZhbHVlO1xufVxuZnVuY3Rpb24gY29tcGFyZU1pbihhLCBiKSB7XG4gICAgcmV0dXJuIGEubGF5b3V0Lm1pbiAtIGIubGF5b3V0Lm1pbjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYE1vdGlvblZhbHVlYCB0byB0cmFjayB0aGUgc3RhdGUgYW5kIHZlbG9jaXR5IG9mIGEgdmFsdWUuXG4gKlxuICogVXN1YWxseSwgdGhlc2UgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseS4gRm9yIGFkdmFuY2VkIHVzZS1jYXNlcywgbGlrZSB1c2Ugd2l0aCBgdXNlVHJhbnNmb3JtYCwgeW91IGNhbiBjcmVhdGUgYE1vdGlvblZhbHVlYHMgZXh0ZXJuYWxseSBhbmQgcGFzcyB0aGVtIGludG8gdGhlIGFuaW1hdGVkIGNvbXBvbmVudCB2aWEgdGhlIGBzdHlsZWAgcHJvcC5cbiAqXG4gKiBgYGBqc3hcbiAqIGV4cG9ydCBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3Qgc2NhbGUgPSB1c2VNb3Rpb25WYWx1ZSgxKVxuICpcbiAqICAgcmV0dXJuIDxtb3Rpb24uZGl2IHN0eWxlPXt7IHNjYWxlIH19IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gaW5pdGlhbCAtIFRoZSBpbml0aWFsIHN0YXRlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlTW90aW9uVmFsdWUoaW5pdGlhbCkge1xuICAgIHZhciB2YWx1ZSA9IHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vdGlvblZhbHVlKGluaXRpYWwpOyB9KTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIG1vdGlvbiB2YWx1ZSBpcyBiZWluZyB1c2VkIGluIHN0YXRpYyBtb2RlLCBsaWtlIG9uXG4gICAgICogdGhlIEZyYW1lciBjYW52YXMsIGZvcmNlIGNvbXBvbmVudHMgdG8gcmVyZW5kZXIgd2hlbiB0aGUgbW90aW9uXG4gICAgICogdmFsdWUgaXMgdXBkYXRlZC5cbiAgICAgKi9cbiAgICB2YXIgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLmlzU3RhdGljO1xuICAgIGlmIChpc1N0YXRpYykge1xuICAgICAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQoUmVhY3QudXNlU3RhdGUoaW5pdGlhbCksIDIpLCBzZXRMYXRlc3RfMSA9IF9hWzFdO1xuICAgICAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWUub25DaGFuZ2Uoc2V0TGF0ZXN0XzEpOyB9LCBbXSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIGlzQ3VzdG9tVmFsdWVUeXBlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdi5taXg7XG59O1xudmFyIGdldE1peGVyID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChpc0N1c3RvbVZhbHVlVHlwZSh2KSA/IHYubWl4IDogdW5kZWZpbmVkKTsgfTtcbmZ1bmN0aW9uIHRyYW5zZm9ybSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHVzZUltbWVkaWF0ZSA9ICFBcnJheS5pc0FycmF5KGFyZ3NbMF0pO1xuICAgIHZhciBhcmdPZmZzZXQgPSB1c2VJbW1lZGlhdGUgPyAwIDogLTE7XG4gICAgdmFyIGlucHV0VmFsdWUgPSBhcmdzWzAgKyBhcmdPZmZzZXRdO1xuICAgIHZhciBpbnB1dFJhbmdlID0gYXJnc1sxICsgYXJnT2Zmc2V0XTtcbiAgICB2YXIgb3V0cHV0UmFuZ2UgPSBhcmdzWzIgKyBhcmdPZmZzZXRdO1xuICAgIHZhciBvcHRpb25zID0gYXJnc1szICsgYXJnT2Zmc2V0XTtcbiAgICB2YXIgaW50ZXJwb2xhdG9yID0gcG9wbW90aW9uLmludGVycG9sYXRlKGlucHV0UmFuZ2UsIG91dHB1dFJhbmdlLCB0c2xpYi5fX2Fzc2lnbih7IG1peGVyOiBnZXRNaXhlcihvdXRwdXRSYW5nZVswXSkgfSwgb3B0aW9ucykpO1xuICAgIHJldHVybiB1c2VJbW1lZGlhdGUgPyBpbnRlcnBvbGF0b3IoaW5wdXRWYWx1ZSkgOiBpbnRlcnBvbGF0b3I7XG59XG5cbmZ1bmN0aW9uIHVzZU9uQ2hhbmdlKHZhbHVlLCBjYWxsYmFjaykge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5vbkNoYW5nZShjYWxsYmFjayk7XG4gICAgfSwgW2NhbGxiYWNrXSk7XG59XG5mdW5jdGlvbiB1c2VNdWx0aU9uQ2hhbmdlKHZhbHVlcywgaGFuZGxlcikge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlLm9uQ2hhbmdlKGhhbmRsZXIpOyB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodW5zdWJzY3JpYmUpIHsgcmV0dXJuIHVuc3Vic2NyaWJlKCk7IH0pOyB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VDb21iaW5lTW90aW9uVmFsdWVzKHZhbHVlcywgY29tYmluZVZhbHVlcykge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2UgdGhlIHJldHVybmVkIG1vdGlvbiB2YWx1ZS4gVGhpcyByZW1haW5zIHRoZSBzYW1lIGJldHdlZW4gcmVuZGVycy5cbiAgICAgKi9cbiAgICB2YXIgdmFsdWUgPSB1c2VNb3Rpb25WYWx1ZShjb21iaW5lVmFsdWVzKCkpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCB1cGRhdGUgdGhlIHRlbXBsYXRlIG1vdGlvbiB2YWx1ZSB3aXRoIHRoZSBsYXRlc3QgdmFsdWVzLlxuICAgICAqIFRoaXMgaXMgcHJlLWJvdW5kIHNvIHdoZW5ldmVyIGEgbW90aW9uIHZhbHVlIHVwZGF0ZXMgaXQgY2FuIHNjaGVkdWxlIGl0c1xuICAgICAqIGV4ZWN1dGlvbiBpbiBGcmFtZXN5bmMuIElmIGl0J3MgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZCBpdCB3b24ndCBiZSBmaXJlZCB0d2ljZVxuICAgICAqIGluIGEgc2luZ2xlIGZyYW1lLlxuICAgICAqL1xuICAgIHZhciB1cGRhdGVWYWx1ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlLnNldChjb21iaW5lVmFsdWVzKCkpOyB9O1xuICAgIC8qKlxuICAgICAqIFN5bmNocm9ub3VzbHkgdXBkYXRlIHRoZSBtb3Rpb24gdmFsdWUgd2l0aCB0aGUgbGF0ZXN0IHZhbHVlcyBkdXJpbmcgdGhlIHJlbmRlci5cbiAgICAgKiBUaGlzIGVuc3VyZXMgdGhhdCB3aXRoaW4gYSBSZWFjdCByZW5kZXIsIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgRE9NIGFyZSB1cC10by1kYXRlLlxuICAgICAqL1xuICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIGFsbCBtb3Rpb24gdmFsdWVzIGZvdW5kIHdpdGhpbiB0aGUgdGVtcGxhdGUuIFdoZW5ldmVyIGFueSBvZiB0aGVtIGNoYW5nZSxcbiAgICAgKiBzY2hlZHVsZSBhbiB1cGRhdGUuXG4gICAgICovXG4gICAgdXNlTXVsdGlPbkNoYW5nZSh2YWx1ZXMsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnVwZGF0ZSh1cGRhdGVWYWx1ZSwgZmFsc2UsIHRydWUpOyB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHVzZVRyYW5zZm9ybShpbnB1dCwgaW5wdXRSYW5nZU9yVHJhbnNmb3JtZXIsIG91dHB1dFJhbmdlLCBvcHRpb25zKSB7XG4gICAgdmFyIHRyYW5zZm9ybWVyID0gdHlwZW9mIGlucHV0UmFuZ2VPclRyYW5zZm9ybWVyID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBpbnB1dFJhbmdlT3JUcmFuc2Zvcm1lclxuICAgICAgICA6IHRyYW5zZm9ybShpbnB1dFJhbmdlT3JUcmFuc2Zvcm1lciwgb3V0cHV0UmFuZ2UsIG9wdGlvbnMpO1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0KVxuICAgICAgICA/IHVzZUxpc3RUcmFuc2Zvcm0oaW5wdXQsIHRyYW5zZm9ybWVyKVxuICAgICAgICA6IHVzZUxpc3RUcmFuc2Zvcm0oW2lucHV0XSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSB0c2xpYi5fX3JlYWQoX2EsIDEpLCBsYXRlc3QgPSBfYlswXTtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lcihsYXRlc3QpO1xuICAgICAgICB9KTtcbn1cbmZ1bmN0aW9uIHVzZUxpc3RUcmFuc2Zvcm0odmFsdWVzLCB0cmFuc2Zvcm1lcikge1xuICAgIHZhciBsYXRlc3QgPSB1c2VDb25zdGFudChmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSk7XG4gICAgcmV0dXJuIHVzZUNvbWJpbmVNb3Rpb25WYWx1ZXModmFsdWVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxhdGVzdC5sZW5ndGggPSAwO1xuICAgICAgICB2YXIgbnVtVmFsdWVzID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1WYWx1ZXM7IGkrKykge1xuICAgICAgICAgICAgbGF0ZXN0W2ldID0gdmFsdWVzW2ldLmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lcihsYXRlc3QpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VEZWZhdWx0TW90aW9uVmFsdWUodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChkZWZhdWx0VmFsdWUgPT09IHZvaWQgMCkgeyBkZWZhdWx0VmFsdWUgPSAwOyB9XG4gICAgcmV0dXJuIGlzTW90aW9uVmFsdWUodmFsdWUpID8gdmFsdWUgOiB1c2VNb3Rpb25WYWx1ZShkZWZhdWx0VmFsdWUpO1xufVxuZnVuY3Rpb24gUmVvcmRlckl0ZW0oX2EsIGV4dGVybmFsUmVmKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIHN0eWxlID0gX2Euc3R5bGUsIHZhbHVlID0gX2EudmFsdWUsIF9iID0gX2EuYXMsIGFzID0gX2IgPT09IHZvaWQgMCA/IFwibGlcIiA6IF9iLCBvbkRyYWcgPSBfYS5vbkRyYWcsIF9jID0gX2EubGF5b3V0LCBsYXlvdXQgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBwcm9wcyA9IHRzbGliLl9fcmVzdChfYSwgW1wiY2hpbGRyZW5cIiwgXCJzdHlsZVwiLCBcInZhbHVlXCIsIFwiYXNcIiwgXCJvbkRyYWdcIiwgXCJsYXlvdXRcIl0pO1xuICAgIHZhciBDb21wb25lbnQgPSB1c2VDb25zdGFudChmdW5jdGlvbiAoKSB7IHJldHVybiBtb3Rpb24oYXMpOyB9KTtcbiAgICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoUmVvcmRlckNvbnRleHQpO1xuICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgeDogdXNlRGVmYXVsdE1vdGlvblZhbHVlKHN0eWxlID09PSBudWxsIHx8IHN0eWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHlsZS54KSxcbiAgICAgICAgeTogdXNlRGVmYXVsdE1vdGlvblZhbHVlKHN0eWxlID09PSBudWxsIHx8IHN0eWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHlsZS55KSxcbiAgICB9O1xuICAgIHZhciB6SW5kZXggPSB1c2VUcmFuc2Zvcm0oW3BvaW50LngsIHBvaW50LnldLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIF9iID0gdHNsaWIuX19yZWFkKF9hLCAyKSwgbGF0ZXN0WCA9IF9iWzBdLCBsYXRlc3RZID0gX2JbMV07XG4gICAgICAgIHJldHVybiBsYXRlc3RYIHx8IGxhdGVzdFkgPyAxIDogXCJ1bnNldFwiO1xuICAgIH0pO1xuICAgIHZhciBtZWFzdXJlZExheW91dCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICBoZXlMaXN0ZW4uaW52YXJpYW50KEJvb2xlYW4oY29udGV4dCksIFwiUmVvcmRlci5JdGVtIG11c3QgYmUgYSBjaGlsZCBvZiBSZW9yZGVyLkdyb3VwXCIpO1xuICAgIHZhciBfZCA9IGNvbnRleHQsIGF4aXMgPSBfZC5heGlzLCByZWdpc3Rlckl0ZW0gPSBfZC5yZWdpc3Rlckl0ZW0sIHVwZGF0ZU9yZGVyID0gX2QudXBkYXRlT3JkZXI7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVnaXN0ZXJJdGVtKHZhbHVlLCBtZWFzdXJlZExheW91dC5jdXJyZW50KTtcbiAgICB9LCBbY29udGV4dF0pO1xuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgdHNsaWIuX19hc3NpZ24oeyBkcmFnOiBheGlzIH0sIHByb3BzLCB7IGRyYWdTbmFwVG9PcmlnaW46IHRydWUsIHN0eWxlOiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgc3R5bGUpLCB7IHg6IHBvaW50LngsIHk6IHBvaW50LnksIHpJbmRleDogekluZGV4IH0pLCBsYXlvdXQ6IGxheW91dCwgb25EcmFnOiBmdW5jdGlvbiAoZXZlbnQsIGdlc3R1cmVQb2ludCkge1xuICAgICAgICAgICAgdmFyIHZlbG9jaXR5ID0gZ2VzdHVyZVBvaW50LnZlbG9jaXR5O1xuICAgICAgICAgICAgdmVsb2NpdHlbYXhpc10gJiZcbiAgICAgICAgICAgICAgICB1cGRhdGVPcmRlcih2YWx1ZSwgcG9pbnRbYXhpc10uZ2V0KCksIHZlbG9jaXR5W2F4aXNdKTtcbiAgICAgICAgICAgIG9uRHJhZyA9PT0gbnVsbCB8fCBvbkRyYWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRHJhZyhldmVudCwgZ2VzdHVyZVBvaW50KTtcbiAgICAgICAgfSwgb25MYXlvdXRNZWFzdXJlOiBmdW5jdGlvbiAobWVhc3VyZWQpIHtcbiAgICAgICAgICAgIG1lYXN1cmVkTGF5b3V0LmN1cnJlbnQgPSBtZWFzdXJlZDtcbiAgICAgICAgfSwgcmVmOiBleHRlcm5hbFJlZiB9KSwgY2hpbGRyZW4pKTtcbn1cbnZhciBJdGVtID0gUmVhY3QuZm9yd2FyZFJlZihSZW9yZGVySXRlbSk7XG5cbnZhciBSZW9yZGVyID0ge1xuICAgIEdyb3VwOiBHcm91cCxcbiAgICBJdGVtOiBJdGVtLFxufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbnZhciBkb21BbmltYXRpb24gPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7IHJlbmRlcmVyOiBjcmVhdGVEb21WaXN1YWxFbGVtZW50IH0sIGFuaW1hdGlvbnMpLCBnZXN0dXJlQW5pbWF0aW9ucyk7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG52YXIgZG9tTWF4ID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGRvbUFuaW1hdGlvbiksIGRyYWcpLCBsYXlvdXRGZWF0dXJlcyksIHsgcHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvcjogSFRNTFByb2plY3Rpb25Ob2RlIH0pO1xuXG4vKipcbiAqIENvbWJpbmUgbXVsdGlwbGUgbW90aW9uIHZhbHVlcyBpbnRvIGEgbmV3IG9uZSB1c2luZyBhIHN0cmluZyB0ZW1wbGF0ZSBsaXRlcmFsLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHtcbiAqICAgbW90aW9uLFxuICogICB1c2VTcHJpbmcsXG4gKiAgIHVzZU1vdGlvblZhbHVlLFxuICogICB1c2VNb3Rpb25UZW1wbGF0ZVxuICogfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZnVuY3Rpb24gQ29tcG9uZW50KCkge1xuICogICBjb25zdCBzaGFkb3dYID0gdXNlU3ByaW5nKDApXG4gKiAgIGNvbnN0IHNoYWRvd1kgPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICogICBjb25zdCBzaGFkb3cgPSB1c2VNb3Rpb25UZW1wbGF0ZWBkcm9wLXNoYWRvdygke3NoYWRvd1h9cHggJHtzaGFkb3dZfXB4IDIwcHggcmdiYSgwLDAsMCwwLjMpKWBcbiAqXG4gKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyBmaWx0ZXI6IHNoYWRvdyB9fSAvPlxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VNb3Rpb25UZW1wbGF0ZShmcmFnbWVudHMpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYnVpbGQgYSBzdHJpbmcgZnJvbSB0aGUgbGF0ZXN0IG1vdGlvbiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG51bUZyYWdtZW50cyA9IGZyYWdtZW50cy5sZW5ndGg7XG4gICAgZnVuY3Rpb24gYnVpbGRWYWx1ZSgpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRnJhZ21lbnRzOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBmcmFnbWVudHNbaV07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IHZhbHVlc1tpXS5nZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgICByZXR1cm4gdXNlQ29tYmluZU1vdGlvblZhbHVlcyh2YWx1ZXMsIGJ1aWxkVmFsdWUpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBgTW90aW9uVmFsdWVgIHRoYXQsIHdoZW4gYHNldGAsIHdpbGwgdXNlIGEgc3ByaW5nIGFuaW1hdGlvbiB0byBhbmltYXRlIHRvIGl0cyBuZXcgc3RhdGUuXG4gKlxuICogSXQgY2FuIGVpdGhlciB3b3JrIGFzIGEgc3RhbmQtYWxvbmUgYE1vdGlvblZhbHVlYCBieSBpbml0aWFsaXNpbmcgaXQgd2l0aCBhIHZhbHVlLCBvciBhcyBhIHN1YnNjcmliZXJcbiAqIHRvIGFub3RoZXIgYE1vdGlvblZhbHVlYC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIGBgYGpzeFxuICogY29uc3QgeCA9IHVzZVNwcmluZygwLCB7IHN0aWZmbmVzczogMzAwIH0pXG4gKiBjb25zdCB5ID0gdXNlU3ByaW5nKHgsIHsgZGFtcGluZzogMTAgfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbnB1dFZhbHVlIC0gYE1vdGlvblZhbHVlYCBvciBudW1iZXIuIElmIHByb3ZpZGVkIGEgYE1vdGlvblZhbHVlYCwgd2hlbiB0aGUgaW5wdXQgYE1vdGlvblZhbHVlYCBjaGFuZ2VzLCB0aGUgY3JlYXRlZCBgTW90aW9uVmFsdWVgIHdpbGwgc3ByaW5nIHRvd2FyZHMgdGhhdCB2YWx1ZS5cbiAqIEBwYXJhbSBzcHJpbmdDb25maWcgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBzcHJpbmcuXG4gKiBAcmV0dXJucyBgTW90aW9uVmFsdWVgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VTcHJpbmcoc291cmNlLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0ge307IH1cbiAgICB2YXIgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLmlzU3RhdGljO1xuICAgIHZhciBhY3RpdmVTcHJpbmdBbmltYXRpb24gPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gICAgdmFyIHZhbHVlID0gdXNlTW90aW9uVmFsdWUoaXNNb3Rpb25WYWx1ZShzb3VyY2UpID8gc291cmNlLmdldCgpIDogc291cmNlKTtcbiAgICBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmF0dGFjaChmdW5jdGlvbiAodiwgc2V0KSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgbW9yZSBob2xsaXN0aWMgYXBwcm9hY2ggdG8gdGhpcyBtaWdodCBiZSB0byB1c2UgaXNTdGF0aWMgdG8gZml4IFZpc3VhbEVsZW1lbnQgYW5pbWF0aW9uc1xuICAgICAgICAgICAgICogYXQgdGhhdCBsZXZlbCwgYnV0IHRoaXMgd2lsbCB3b3JrIGZvciBub3dcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGlzU3RhdGljKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZXQodik7XG4gICAgICAgICAgICBpZiAoYWN0aXZlU3ByaW5nQW5pbWF0aW9uLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVTcHJpbmdBbmltYXRpb24uY3VycmVudC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVTcHJpbmdBbmltYXRpb24uY3VycmVudCA9IHBvcG1vdGlvbi5hbmltYXRlKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHsgZnJvbTogdmFsdWUuZ2V0KCksIHRvOiB2LCB2ZWxvY2l0eTogdmFsdWUuZ2V0VmVsb2NpdHkoKSB9LCBjb25maWcpLCB7IG9uVXBkYXRlOiBzZXQgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmdldCgpO1xuICAgICAgICB9KTtcbiAgICB9LCBbSlNPTi5zdHJpbmdpZnkoY29uZmlnKV0pO1xuICAgIHVzZU9uQ2hhbmdlKHNvdXJjZSwgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZhbHVlLnNldChwYXJzZUZsb2F0KHYpKTsgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBgTW90aW9uVmFsdWVgIHRoYXQgdXBkYXRlcyB3aGVuIHRoZSB2ZWxvY2l0eSBvZiB0aGUgcHJvdmlkZWQgYE1vdGlvblZhbHVlYCBjaGFuZ2VzLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHggPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICogY29uc3QgeFZlbG9jaXR5ID0gdXNlVmVsb2NpdHkoeClcbiAqIGNvbnN0IHhBY2NlbGVyYXRpb24gPSB1c2VWZWxvY2l0eSh4VmVsb2NpdHkpXG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZVZlbG9jaXR5KHZhbHVlKSB7XG4gICAgdmFyIHZlbG9jaXR5ID0gdXNlTW90aW9uVmFsdWUodmFsdWUuZ2V0VmVsb2NpdHkoKSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMuYWRkKGZ1bmN0aW9uIChuZXdWZWxvY2l0eSkge1xuICAgICAgICAgICAgdmVsb2NpdHkuc2V0KG5ld1ZlbG9jaXR5KTtcbiAgICAgICAgfSk7XG4gICAgfSwgW3ZhbHVlXSk7XG4gICAgcmV0dXJuIHZlbG9jaXR5O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTY3JvbGxNb3Rpb25WYWx1ZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2Nyb2xsWDogbW90aW9uVmFsdWUoMCksXG4gICAgICAgIHNjcm9sbFk6IG1vdGlvblZhbHVlKDApLFxuICAgICAgICBzY3JvbGxYUHJvZ3Jlc3M6IG1vdGlvblZhbHVlKDApLFxuICAgICAgICBzY3JvbGxZUHJvZ3Jlc3M6IG1vdGlvblZhbHVlKDApLFxuICAgIH07XG59XG5mdW5jdGlvbiBzZXRQcm9ncmVzcyhvZmZzZXQsIG1heE9mZnNldCwgdmFsdWUpIHtcbiAgICB2YWx1ZS5zZXQoIW9mZnNldCB8fCAhbWF4T2Zmc2V0ID8gMCA6IG9mZnNldCAvIG1heE9mZnNldCk7XG59XG5mdW5jdGlvbiBjcmVhdGVTY3JvbGxVcGRhdGVyKHZhbHVlcywgZ2V0T2Zmc2V0cykge1xuICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IGdldE9mZnNldHMoKSwgeE9mZnNldCA9IF9hLnhPZmZzZXQsIHlPZmZzZXQgPSBfYS55T2Zmc2V0LCB4TWF4T2Zmc2V0ID0gX2EueE1heE9mZnNldCwgeU1heE9mZnNldCA9IF9hLnlNYXhPZmZzZXQ7XG4gICAgICAgIC8vIFNldCBhYnNvbHV0ZSBwb3NpdGlvbnNcbiAgICAgICAgdmFsdWVzLnNjcm9sbFguc2V0KHhPZmZzZXQpO1xuICAgICAgICB2YWx1ZXMuc2Nyb2xsWS5zZXQoeU9mZnNldCk7XG4gICAgICAgIC8vIFNldCAwLTEgcHJvZ3Jlc3NcbiAgICAgICAgc2V0UHJvZ3Jlc3MoeE9mZnNldCwgeE1heE9mZnNldCwgdmFsdWVzLnNjcm9sbFhQcm9ncmVzcyk7XG4gICAgICAgIHNldFByb2dyZXNzKHlPZmZzZXQsIHlNYXhPZmZzZXQsIHZhbHVlcy5zY3JvbGxZUHJvZ3Jlc3MpO1xuICAgIH07XG4gICAgdXBkYXRlKCk7XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cblxudmFyIGdldEVsZW1lbnRTY3JvbGxPZmZzZXRzID0gZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4T2Zmc2V0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICAgIHlPZmZzZXQ6IGVsZW1lbnQuc2Nyb2xsVG9wLFxuICAgICAgICB4TWF4T2Zmc2V0OiBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICAgICAgeU1heE9mZnNldDogZWxlbWVudC5zY3JvbGxIZWlnaHQgLSBlbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICB9O1xufTsgfTtcbi8qKlxuICogUmV0dXJucyBNb3Rpb25WYWx1ZXMgdGhhdCB1cGRhdGUgd2hlbiB0aGUgcHJvdmlkZWQgZWxlbWVudCBzY3JvbGxzOlxuICpcbiAqIC0gYHNjcm9sbFhgIOKAlCBIb3Jpem9udGFsIHNjcm9sbCBkaXN0YW5jZSBpbiBwaXhlbHMuXG4gKiAtIGBzY3JvbGxZYCDigJQgVmVydGljYWwgc2Nyb2xsIGRpc3RhbmNlIGluIHBpeGVscy5cbiAqIC0gYHNjcm9sbFhQcm9ncmVzc2Ag4oCUIEhvcml6b250YWwgc2Nyb2xsIHByb2dyZXNzIGJldHdlZW4gYDBgIGFuZCBgMWAuXG4gKiAtIGBzY3JvbGxZUHJvZ3Jlc3NgIOKAlCBWZXJ0aWNhbCBzY3JvbGwgcHJvZ3Jlc3MgYmV0d2VlbiBgMGAgYW5kIGAxYC5cbiAqXG4gKiBUaGlzIGVsZW1lbnQgbXVzdCBiZSBzZXQgdG8gYG92ZXJmbG93OiBzY3JvbGxgIG9uIGVpdGhlciBvciBib3RoIGF4ZXMgdG8gcmVwb3J0IHNjcm9sbCBvZmZzZXQuXG4gKlxuICogYGBganN4XG4gKiBleHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHJlZiA9IHVzZVJlZigpXG4gKiAgIGNvbnN0IHsgc2Nyb2xsWVByb2dyZXNzIH0gPSB1c2VFbGVtZW50U2Nyb2xsKHJlZilcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdiByZWY9e3JlZn0+XG4gKiAgICAgICA8bW90aW9uLmRpdiBzdHlsZT17eyBzY2FsZVg6IHNjcm9sbFlQcm9ncmVzcyB9fSAvPlxuICogICAgIDwvZGl2PlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZUVsZW1lbnRTY3JvbGwocmVmKSB7XG4gICAgdmFyIHZhbHVlcyA9IHVzZUNvbnN0YW50KGNyZWF0ZVNjcm9sbE1vdGlvblZhbHVlcyk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoISFlbGVtZW50LCBcInJlZiBwcm92aWRlZCB0byB1c2VTY3JvbGwgbXVzdCBiZSBwYXNzZWQgaW50byBhIEhUTUwgZWxlbWVudC5cIik7XG4gICAgICAgIGlmICghZWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHVwZGF0ZVNjcm9sbFZhbHVlcyA9IGNyZWF0ZVNjcm9sbFVwZGF0ZXIodmFsdWVzLCBnZXRFbGVtZW50U2Nyb2xsT2Zmc2V0cyhlbGVtZW50KSk7XG4gICAgICAgIHZhciBzY3JvbGxMaXN0ZW5lciA9IGFkZERvbUV2ZW50KGVsZW1lbnQsIFwic2Nyb2xsXCIsIHVwZGF0ZVNjcm9sbFZhbHVlcyk7XG4gICAgICAgIHZhciByZXNpemVMaXN0ZW5lciA9IGFkZERvbUV2ZW50KGVsZW1lbnQsIFwicmVzaXplXCIsIHVwZGF0ZVNjcm9sbFZhbHVlcyk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzY3JvbGxMaXN0ZW5lciAmJiBzY3JvbGxMaXN0ZW5lcigpO1xuICAgICAgICAgICAgcmVzaXplTGlzdGVuZXIgJiYgcmVzaXplTGlzdGVuZXIoKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxudmFyIHZpZXdwb3J0U2Nyb2xsVmFsdWVzO1xuZnVuY3Rpb24gZ2V0Vmlld3BvcnRTY3JvbGxPZmZzZXRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHhPZmZzZXQ6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgeU9mZnNldDogd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgICB4TWF4T2Zmc2V0OiBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIC0gd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIHlNYXhPZmZzZXQ6IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0LFxuICAgIH07XG59XG52YXIgaGFzTGlzdGVuZXJzID0gZmFsc2U7XG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBoYXNMaXN0ZW5lcnMgPSB0cnVlO1xuICAgIHZhciB1cGRhdGVTY3JvbGxWYWx1ZXMgPSBjcmVhdGVTY3JvbGxVcGRhdGVyKHZpZXdwb3J0U2Nyb2xsVmFsdWVzLCBnZXRWaWV3cG9ydFNjcm9sbE9mZnNldHMpO1xuICAgIGFkZERvbUV2ZW50KHdpbmRvdywgXCJzY3JvbGxcIiwgdXBkYXRlU2Nyb2xsVmFsdWVzKTtcbiAgICBhZGREb21FdmVudCh3aW5kb3csIFwicmVzaXplXCIsIHVwZGF0ZVNjcm9sbFZhbHVlcyk7XG59XG4vKipcbiAqIFJldHVybnMgTW90aW9uVmFsdWVzIHRoYXQgdXBkYXRlIHdoZW4gdGhlIHZpZXdwb3J0IHNjcm9sbHM6XG4gKlxuICogLSBgc2Nyb2xsWGAg4oCUIEhvcml6b250YWwgc2Nyb2xsIGRpc3RhbmNlIGluIHBpeGVscy5cbiAqIC0gYHNjcm9sbFlgIOKAlCBWZXJ0aWNhbCBzY3JvbGwgZGlzdGFuY2UgaW4gcGl4ZWxzLlxuICogLSBgc2Nyb2xsWFByb2dyZXNzYCDigJQgSG9yaXpvbnRhbCBzY3JvbGwgcHJvZ3Jlc3MgYmV0d2VlbiBgMGAgYW5kIGAxYC5cbiAqIC0gYHNjcm9sbFlQcm9ncmVzc2Ag4oCUIFZlcnRpY2FsIHNjcm9sbCBwcm9ncmVzcyBiZXR3ZWVuIGAwYCBhbmQgYDFgLlxuICpcbiAqICoqV2FybmluZzoqKiBTZXR0aW5nIGBib2R5YCBvciBgaHRtbGAgdG8gYGhlaWdodDogMTAwJWAgb3Igc2ltaWxhciB3aWxsIGJyZWFrIHRoZSBgUHJvZ3Jlc3NgXG4gKiB2YWx1ZXMgYXMgdGhpcyBicmVha3MgdGhlIGJyb3dzZXIncyBjYXBhYmlsaXR5IHRvIGFjY3VyYXRlbHkgbWVhc3VyZSB0aGUgcGFnZSBsZW5ndGguXG4gKlxuICogYGBganN4XG4gKiBleHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHsgc2Nyb2xsWVByb2dyZXNzIH0gPSB1c2VWaWV3cG9ydFNjcm9sbCgpXG4gKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyBzY2FsZVg6IHNjcm9sbFlQcm9ncmVzcyB9fSAvPlxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VWaWV3cG9ydFNjcm9sbCgpIHtcbiAgICAvKipcbiAgICAgKiBMYXp5LWluaXRpYWxpc2UgdGhlIHZpZXdwb3J0IHNjcm9sbCB2YWx1ZXNcbiAgICAgKi9cbiAgICBpZiAoIXZpZXdwb3J0U2Nyb2xsVmFsdWVzKSB7XG4gICAgICAgIHZpZXdwb3J0U2Nyb2xsVmFsdWVzID0gY3JlYXRlU2Nyb2xsTW90aW9uVmFsdWVzKCk7XG4gICAgfVxuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAhaGFzTGlzdGVuZXJzICYmIGFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB2aWV3cG9ydFNjcm9sbFZhbHVlcztcbn1cblxudmFyIGdldEN1cnJlbnRUaW1lID0gdHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfVxuICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGF0ZS5ub3coKTsgfTtcbmZ1bmN0aW9uIHVzZUFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgdmFyIGluaXRpYWxUaW1lc3RhbXAgPSB1c2VDb25zdGFudChnZXRDdXJyZW50VGltZSk7XG4gICAgdmFyIGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS5pc1N0YXRpYztcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNTdGF0aWMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBwcm92aWRlVGltZVNpbmNlU3RhcnQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBfYS50aW1lc3RhbXA7XG4gICAgICAgICAgICBjYWxsYmFjayh0aW1lc3RhbXAgLSBpbml0aWFsVGltZXN0YW1wKTtcbiAgICAgICAgfTtcbiAgICAgICAgc3luY19fZGVmYXVsdFtcImRlZmF1bHRcIl0udXBkYXRlKHByb3ZpZGVUaW1lU2luY2VTdGFydCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzeW5jLmNhbmNlbFN5bmMudXBkYXRlKHByb3ZpZGVUaW1lU2luY2VTdGFydCk7IH07XG4gICAgfSwgW2NhbGxiYWNrXSk7XG59XG5cbmZ1bmN0aW9uIHVzZVRpbWUoKSB7XG4gICAgdmFyIHRpbWUgPSB1c2VNb3Rpb25WYWx1ZSgwKTtcbiAgICB1c2VBbmltYXRpb25GcmFtZShmdW5jdGlvbiAodCkgeyByZXR1cm4gdGltZS5zZXQodCk7IH0pO1xuICAgIHJldHVybiB0aW1lO1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gYW5pbWF0aW9uQ29udHJvbHMoKSB7XG4gICAgLyoqXG4gICAgICogVHJhY2sgd2hldGhlciB0aGUgaG9zdCBjb21wb25lbnQgaGFzIG1vdW50ZWQuXG4gICAgICovXG4gICAgdmFyIGhhc01vdW50ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBQZW5kaW5nIGFuaW1hdGlvbnMgdGhhdCBhcmUgc3RhcnRlZCBiZWZvcmUgYSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICAgKiBUT0RPOiBSZW1vdmUgdGhpcyBhcyBhbmltYXRpb25zIHNob3VsZCBvbmx5IHJ1biBpbiBlZmZlY3RzXG4gICAgICovXG4gICAgdmFyIHBlbmRpbmdBbmltYXRpb25zID0gW107XG4gICAgLyoqXG4gICAgICogQSBjb2xsZWN0aW9uIG9mIGxpbmtlZCBjb21wb25lbnQgYW5pbWF0aW9uIGNvbnRyb2xzLlxuICAgICAqL1xuICAgIHZhciBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgY29udHJvbHMgPSB7XG4gICAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKHZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmFkZCh2aXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiB2b2lkIHN1YnNjcmliZXJzLmRlbGV0ZSh2aXN1YWxFbGVtZW50KTsgfTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB0cmFuc2l0aW9uT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVE9ETzogV2Ugb25seSBwZXJmb3JtIHRoaXMgaGFzTW91bnRlZCBjaGVjayBiZWNhdXNlIGluIEZyYW1lciB3ZSB1c2VkIHRvXG4gICAgICAgICAgICAgKiBlbmNvdXJhZ2UgdGhlIGFiaWxpdHkgdG8gc3RhcnQgYW4gYW5pbWF0aW9uIHdpdGhpbiB0aGUgcmVuZGVyIHBoYXNlLiBUaGlzXG4gICAgICAgICAgICAgKiBpc24ndCBiZWhhdmlvdXIgY29uY3VycmVudC1zYWZlIHNvIHdoZW4gd2UgbWFrZSBGcmFtZXIgY29uY3VycmVudC1zYWZlXG4gICAgICAgICAgICAgKiB3ZSBjYW4gZGl0Y2ggdGhpcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGhhc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uc18xID0gW107XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAodmlzdWFsRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zXzEucHVzaChhbmltYXRlVmlzdWFsRWxlbWVudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uT3ZlcnJpZGU6IHRyYW5zaXRpb25PdmVycmlkZSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChhbmltYXRpb25zXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdBbmltYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBbZGVmaW5pdGlvbiwgdHJhbnNpdGlvbk92ZXJyaWRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBoZXlMaXN0ZW4uaW52YXJpYW50KGhhc01vdW50ZWQsIFwiY29udHJvbHMuc2V0KCkgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGFmdGVyIGEgY29tcG9uZW50IGhhcyBtb3VudGVkLiBDb25zaWRlciBjYWxsaW5nIHdpdGhpbiBhIHVzZUVmZmVjdCBob29rLlwiKTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uICh2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWVzKHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzdG9wQW5pbWF0aW9uKHZpc3VhbEVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBoYXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBlbmRpbmdBbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IF9hLmFuaW1hdGlvbiwgcmVzb2x2ZSA9IF9hLnJlc29sdmU7XG4gICAgICAgICAgICAgICAgY29udHJvbHMuc3RhcnQuYXBwbHkoY29udHJvbHMsIHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChhbmltYXRpb24pLCBmYWxzZSkpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gY29udHJvbHM7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBgQW5pbWF0aW9uQ29udHJvbHNgLCB3aGljaCBjYW4gYmUgdXNlZCB0byBtYW51YWxseSBzdGFydCwgc3RvcFxuICogYW5kIHNlcXVlbmNlIGFuaW1hdGlvbnMgb24gb25lIG9yIG1vcmUgY29tcG9uZW50cy5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgYEFuaW1hdGlvbkNvbnRyb2xzYCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBgYW5pbWF0ZWAgcHJvcGVydHlcbiAqIG9mIHRoZSBjb21wb25lbnRzIHlvdSB3YW50IHRvIGFuaW1hdGUuXG4gKlxuICogVGhlc2UgY29tcG9uZW50cyBjYW4gdGhlbiBiZSBhbmltYXRlZCB3aXRoIHRoZSBgc3RhcnRgIG1ldGhvZC5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgbW90aW9uLCB1c2VBbmltYXRpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJ1xuICpcbiAqIGV4cG9ydCBmdW5jdGlvbiBNeUNvbXBvbmVudChwcm9wcykge1xuICogICAgY29uc3QgY29udHJvbHMgPSB1c2VBbmltYXRpb24oKVxuICpcbiAqICAgIGNvbnRyb2xzLnN0YXJ0KHtcbiAqICAgICAgICB4OiAxMDAsXG4gKiAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMC41IH0sXG4gKiAgICB9KVxuICpcbiAqICAgIHJldHVybiA8bW90aW9uLmRpdiBhbmltYXRlPXtjb250cm9sc30gLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIEFuaW1hdGlvbiBjb250cm9sbGVyIHdpdGggYHN0YXJ0YCBhbmQgYHN0b3BgIG1ldGhvZHNcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZUFuaW1hdGlvbkNvbnRyb2xzKCkge1xuICAgIHZhciBjb250cm9scyA9IHVzZUNvbnN0YW50KGFuaW1hdGlvbkNvbnRyb2xzKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoY29udHJvbHMubW91bnQsIFtdKTtcbiAgICByZXR1cm4gY29udHJvbHM7XG59XG52YXIgdXNlQW5pbWF0aW9uID0gdXNlQW5pbWF0aW9uQ29udHJvbHM7XG5cbi8qKlxuICogQ3ljbGVzIHRocm91Z2ggYSBzZXJpZXMgb2YgdmlzdWFsIHByb3BlcnRpZXMuIENhbiBiZSB1c2VkIHRvIHRvZ2dsZSBiZXR3ZWVuIG9yIGN5Y2xlIHRocm91Z2ggYW5pbWF0aW9ucy4gSXQgd29ya3Mgc2ltaWxhciB0byBgdXNlU3RhdGVgIGluIFJlYWN0LiBJdCBpcyBwcm92aWRlZCBhbiBpbml0aWFsIGFycmF5IG9mIHBvc3NpYmxlIHN0YXRlcywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdHdvIGFyZ3VtZW50cy5cbiAqXG4gKiBBbiBpbmRleCB2YWx1ZSBjYW4gYmUgcGFzc2VkIHRvIHRoZSByZXR1cm5lZCBgY3ljbGVgIGZ1bmN0aW9uIHRvIGN5Y2xlIHRvIGEgc3BlY2lmaWMgaW5kZXguXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuICogaW1wb3J0IHsgbW90aW9uLCB1c2VDeWNsZSB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IFt4LCBjeWNsZVhdID0gdXNlQ3ljbGUoMCwgNTAsIDEwMClcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPG1vdGlvbi5kaXZcbiAqICAgICAgIGFuaW1hdGU9e3sgeDogeCB9fVxuICogICAgICAgb25UYXA9eygpID0+IGN5Y2xlWCgpfVxuICogICAgICAvPlxuICogICAgKVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIGl0ZW1zIC0gaXRlbXMgdG8gY3ljbGUgdGhyb3VnaFxuICogQHJldHVybnMgW2N1cnJlbnRTdGF0ZSwgY3ljbGVTdGF0ZV1cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZUN5Y2xlKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGl0ZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBpbmRleCA9IFJlYWN0LnVzZVJlZigwKTtcbiAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQoUmVhY3QudXNlU3RhdGUoaXRlbXNbaW5kZXguY3VycmVudF0pLCAyKSwgaXRlbSA9IF9hWzBdLCBzZXRJdGVtID0gX2FbMV07XG4gICAgdmFyIHJ1bkN5Y2xlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgaW5kZXguY3VycmVudCA9XG4gICAgICAgICAgICB0eXBlb2YgbmV4dCAhPT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgICAgID8gcG9wbW90aW9uLndyYXAoMCwgaXRlbXMubGVuZ3RoLCBpbmRleC5jdXJyZW50ICsgMSlcbiAgICAgICAgICAgICAgICA6IG5leHQ7XG4gICAgICAgIHNldEl0ZW0oaXRlbXNbaW5kZXguY3VycmVudF0pO1xuICAgIH0sIHRzbGliLl9fc3ByZWFkQXJyYXkoW2l0ZW1zLmxlbmd0aF0sIHRzbGliLl9fcmVhZChpdGVtcyksIGZhbHNlKSk7XG4gICAgcmV0dXJuIFtpdGVtLCBydW5DeWNsZV07XG59XG5cbmZ1bmN0aW9uIHVzZUluVmlldyhyZWYsIF9hKSB7XG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIHJvb3QgPSBfYi5yb290LCBtYXJnaW4gPSBfYi5tYXJnaW4sIGFtb3VudCA9IF9iLmFtb3VudCwgX2MgPSBfYi5vbmNlLCBvbmNlID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2M7XG4gICAgdmFyIF9kID0gdHNsaWIuX19yZWFkKFJlYWN0LnVzZVN0YXRlKGZhbHNlKSwgMiksIGlzSW5WaWV3ID0gX2RbMF0sIHNldEluVmlldyA9IF9kWzFdO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFyZWYuY3VycmVudCB8fCAob25jZSAmJiBpc0luVmlldykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBvbkVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0SW5WaWV3KHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIG9uY2UgPyB1bmRlZmluZWQgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRJblZpZXcoZmFsc2UpOyB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJvb3Q6IChfYSA9IHJvb3QgPT09IG51bGwgfHwgcm9vdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcm9vdC5jdXJyZW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXJnaW46IG1hcmdpbixcbiAgICAgICAgICAgIGFtb3VudDogYW1vdW50ID09PSBcInNvbWVcIiA/IFwiYW55XCIgOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkb20uaW5WaWV3KHJlZi5jdXJyZW50LCBvbkVudGVyLCBvcHRpb25zKTtcbiAgICB9LCBbcm9vdCwgcmVmLCBtYXJnaW4sIG9uY2VdKTtcbiAgICByZXR1cm4gaXNJblZpZXc7XG59XG5cbi8qKlxuICogQ2FuIG1hbnVhbGx5IHRyaWdnZXIgYSBkcmFnIGdlc3R1cmUgb24gb25lIG9yIG1vcmUgYGRyYWdgLWVuYWJsZWQgYG1vdGlvbmAgY29tcG9uZW50cy5cbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IGRyYWdDb250cm9scyA9IHVzZURyYWdDb250cm9scygpXG4gKlxuICogZnVuY3Rpb24gc3RhcnREcmFnKGV2ZW50KSB7XG4gKiAgIGRyYWdDb250cm9scy5zdGFydChldmVudCwgeyBzbmFwVG9DdXJzb3I6IHRydWUgfSlcbiAqIH1cbiAqXG4gKiByZXR1cm4gKFxuICogICA8PlxuICogICAgIDxkaXYgb25Qb2ludGVyRG93bj17c3RhcnREcmFnfSAvPlxuICogICAgIDxtb3Rpb24uZGl2IGRyYWc9XCJ4XCIgZHJhZ0NvbnRyb2xzPXtkcmFnQ29udHJvbHN9IC8+XG4gKiAgIDwvPlxuICogKVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgRHJhZ0NvbnRyb2xzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyYWdDb250cm9scygpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRDb250cm9scyA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIGEgY29tcG9uZW50J3MgaW50ZXJuYWwgYFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHNgIHRvIHRoZSB1c2VyLWZhY2luZyBBUEkuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBEcmFnQ29udHJvbHMucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvbXBvbmVudENvbnRyb2xzLmFkZChjb250cm9scyk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5jb21wb25lbnRDb250cm9scy5kZWxldGUoY29udHJvbHMpOyB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RhcnQgYSBkcmFnIGdlc3R1cmUgb24gZXZlcnkgYG1vdGlvbmAgY29tcG9uZW50IHRoYXQgaGFzIHRoaXMgc2V0IG9mIGRyYWcgY29udHJvbHNcbiAgICAgKiBwYXNzZWQgaW50byBpdCB2aWEgdGhlIGBkcmFnQ29udHJvbHNgIHByb3AuXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiBkcmFnQ29udHJvbHMuc3RhcnQoZSwge1xuICAgICAqICAgc25hcFRvQ3Vyc29yOiB0cnVlXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCAtIFBvaW50ZXJFdmVudFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uc1xuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIERyYWdDb250cm9scy5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRDb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICAgICAgY29udHJvbHMuc3RhcnQoZXZlbnQubmF0aXZlRXZlbnQgfHwgZXZlbnQsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEcmFnQ29udHJvbHM7XG59KCkpO1xudmFyIGNyZWF0ZURyYWdDb250cm9scyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEcmFnQ29udHJvbHMoKTsgfTtcbi8qKlxuICogVXN1YWxseSwgZHJhZ2dpbmcgaXMgaW5pdGlhdGVkIGJ5IHByZXNzaW5nIGRvd24gb24gYSBgbW90aW9uYCBjb21wb25lbnQgd2l0aCBhIGBkcmFnYCBwcm9wXG4gKiBhbmQgbW92aW5nIGl0LiBGb3Igc29tZSB1c2UtY2FzZXMsIGZvciBpbnN0YW5jZSBjbGlja2luZyBhdCBhbiBhcmJpdHJhcnkgcG9pbnQgb24gYSB2aWRlbyBzY3J1YmJlciwgd2VcbiAqIG1pZ2h0IHdhbnQgdG8gaW5pdGlhdGUgdGhhdCBkcmFnZ2luZyBmcm9tIGEgZGlmZmVyZW50IGNvbXBvbmVudCB0aGFuIHRoZSBkcmFnZ2FibGUgb25lLlxuICpcbiAqIEJ5IGNyZWF0aW5nIGEgYGRyYWdDb250cm9sc2AgdXNpbmcgdGhlIGB1c2VEcmFnQ29udHJvbHNgIGhvb2ssIHdlIGNhbiBwYXNzIHRoaXMgaW50b1xuICogdGhlIGRyYWdnYWJsZSBjb21wb25lbnQncyBgZHJhZ0NvbnRyb2xzYCBwcm9wLiBJdCBleHBvc2VzIGEgYHN0YXJ0YCBtZXRob2RcbiAqIHRoYXQgY2FuIHN0YXJ0IGRyYWdnaW5nIGZyb20gcG9pbnRlciBldmVudHMgb24gb3RoZXIgY29tcG9uZW50cy5cbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IGRyYWdDb250cm9scyA9IHVzZURyYWdDb250cm9scygpXG4gKlxuICogZnVuY3Rpb24gc3RhcnREcmFnKGV2ZW50KSB7XG4gKiAgIGRyYWdDb250cm9scy5zdGFydChldmVudCwgeyBzbmFwVG9DdXJzb3I6IHRydWUgfSlcbiAqIH1cbiAqXG4gKiByZXR1cm4gKFxuICogICA8PlxuICogICAgIDxkaXYgb25Qb2ludGVyRG93bj17c3RhcnREcmFnfSAvPlxuICogICAgIDxtb3Rpb24uZGl2IGRyYWc9XCJ4XCIgZHJhZ0NvbnRyb2xzPXtkcmFnQ29udHJvbHN9IC8+XG4gKiAgIDwvPlxuICogKVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VEcmFnQ29udHJvbHMoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnN0YW50KGNyZWF0ZURyYWdDb250cm9scyk7XG59XG5cbmZ1bmN0aW9uIHVzZUluc3RhbnRMYXlvdXRUcmFuc2l0aW9uKCkge1xuICAgIHJldHVybiBzdGFydFRyYW5zaXRpb247XG59XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb24oY2IpIHtcbiAgICBpZiAoIXJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQuaXNVcGRhdGluZyA9IGZhbHNlO1xuICAgIHJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50LmJsb2NrVXBkYXRlKCk7XG4gICAgY2IgPT09IG51bGwgfHwgY2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNiKCk7XG59XG5cbmZ1bmN0aW9uIHVzZUluc3RhbnRUcmFuc2l0aW9uKCkge1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZCh1c2VGb3JjZVVwZGF0ZSgpLCAyKSwgZm9yY2VVcGRhdGUgPSBfYVswXSwgZm9yY2VkUmVuZGVyQ291bnQgPSBfYVsxXTtcbiAgICB2YXIgc3RhcnRJbnN0YW50TGF5b3V0VHJhbnNpdGlvbiA9IHVzZUluc3RhbnRMYXlvdXRUcmFuc2l0aW9uKCk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuYmxvY2sgYWZ0ZXIgdHdvIGFuaW1hdGlvbiBmcmFtZXMsIG90aGVyd2lzZSB0aGlzIHdpbGwgdW5ibG9jayB0b28gc29vbi5cbiAgICAgICAgICovXG4gICAgICAgIHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnBvc3RSZW5kZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnBvc3RSZW5kZXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gKGluc3RhbnRBbmltYXRpb25TdGF0ZS5jdXJyZW50ID0gZmFsc2UpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfSwgW2ZvcmNlZFJlbmRlckNvdW50XSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBzdGFydEluc3RhbnRMYXlvdXRUcmFuc2l0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGluc3RhbnRBbmltYXRpb25TdGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB1c2VSZXNldFByb2plY3Rpb24oKSB7XG4gICAgdmFyIHJlc2V0ID0gUmVhY3RfX25hbWVzcGFjZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByb290ID0gcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQ7XG4gICAgICAgIGlmICghcm9vdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcm9vdC5yZXNldFRyZWUoKTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIHJlc2V0O1xufVxuXG52YXIgY3JlYXRlT2JqZWN0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHt9KTsgfTtcbnZhciBzdGF0ZVZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50KHtcbiAgICBidWlsZDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIG1lYXN1cmVWaWV3cG9ydEJveDogY3JlYXRlQm94LFxuICAgIHJlc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgcmVzdG9yZVRyYW5zZm9ybTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzOiBjcmVhdGVPYmplY3QsXG4gICAgcmVhZFZhbHVlRnJvbUluc3RhbmNlOiBmdW5jdGlvbiAoX3N0YXRlLCBrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuaW5pdGlhbFN0YXRlW2tleV0gfHwgMDtcbiAgICB9LFxuICAgIG1ha2VUYXJnZXRBbmltYXRhYmxlOiBmdW5jdGlvbiAoZWxlbWVudCwgX2EpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb24gPSBfYS50cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kID0gX2EudHJhbnNpdGlvbkVuZCwgdGFyZ2V0ID0gdHNsaWIuX19yZXN0KF9hLCBbXCJ0cmFuc2l0aW9uXCIsIFwidHJhbnNpdGlvbkVuZFwiXSk7XG4gICAgICAgIHZhciBvcmlnaW4gPSBnZXRPcmlnaW4odGFyZ2V0LCB0cmFuc2l0aW9uIHx8IHt9LCBlbGVtZW50KTtcbiAgICAgICAgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMoZWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4pO1xuICAgICAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24oeyB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kIH0sIHRhcmdldCk7XG4gICAgfSxcbn0pO1xudmFyIHVzZVZpc3VhbFN0YXRlID0gbWFrZVVzZVZpc3VhbFN0YXRlKHtcbiAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IGNyZWF0ZU9iamVjdCxcbiAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlT2JqZWN0LFxufSk7XG4vKipcbiAqIFRoaXMgaXMgbm90IGFuIG9mZmljaWFsbHkgc3VwcG9ydGVkIEFQSSBhbmQgbWF5IGJlIHJlbW92ZWRcbiAqIG9uIGFueSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiB1c2VBbmltYXRlZFN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZChSZWFjdC51c2VTdGF0ZShpbml0aWFsU3RhdGUpLCAyKSwgYW5pbWF0aW9uU3RhdGUgPSBfYVswXSwgc2V0QW5pbWF0aW9uU3RhdGUgPSBfYVsxXTtcbiAgICB2YXIgdmlzdWFsU3RhdGUgPSB1c2VWaXN1YWxTdGF0ZSh7fSwgZmFsc2UpO1xuICAgIHZhciBlbGVtZW50ID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3RhdGVWaXN1YWxFbGVtZW50KHsgcHJvcHM6IHt9LCB2aXN1YWxTdGF0ZTogdmlzdWFsU3RhdGUgfSwgeyBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSB9KTtcbiAgICB9KTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBlbGVtZW50Lm1vdW50KHt9KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudW5tb3VudDtcbiAgICB9LCBbZWxlbWVudF0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0UHJvcHMoe1xuICAgICAgICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgc2V0QW5pbWF0aW9uU3RhdGUodHNsaWIuX19hc3NpZ24oe30sIHYpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH0sIFtzZXRBbmltYXRpb25TdGF0ZSwgZWxlbWVudF0pO1xuICAgIHZhciBzdGFydEFuaW1hdGlvbiA9IHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRlVmlzdWFsRWxlbWVudChlbGVtZW50LCBhbmltYXRpb25EZWZpbml0aW9uKTtcbiAgICB9OyB9KTtcbiAgICByZXR1cm4gW2FuaW1hdGlvblN0YXRlLCBzdGFydEFuaW1hdGlvbl07XG59XG5cbi8vIEtlZXAgdGhpbmdzIHJlYXNvbmFibGUgYW5kIGF2b2lkIHNjYWxlOiBJbmZpbml0eS4gSW4gcHJhY3Rpc2Ugd2UgbWlnaHQgbmVlZFxuLy8gdG8gYWRkIGFub3RoZXIgdmFsdWUsIG9wYWNpdHksIHRoYXQgY291bGQgaW50ZXJwb2xhdGUgc2NhbGVYL1kgWzAsMC4wMV0gPT4gWzAsMV1cbi8vIHRvIHNpbXBseSBoaWRlIGNvbnRlbnQgYXQgdW5yZWFzb25hYmxlIHNjYWxlcy5cbnZhciBtYXhTY2FsZSA9IDEwMDAwMDtcbnZhciBpbnZlcnRTY2FsZSA9IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgIHJldHVybiBzY2FsZSA+IDAuMDAxID8gMSAvIHNjYWxlIDogbWF4U2NhbGU7XG59O1xudmFyIGhhc1dhcm5lZCA9IGZhbHNlO1xuLyoqXG4gKiBSZXR1cm5zIGEgYE1vdGlvblZhbHVlYCBlYWNoIGZvciBgc2NhbGVYYCBhbmQgYHNjYWxlWWAgdGhhdCB1cGRhdGUgd2l0aCB0aGUgaW52ZXJzZVxuICogb2YgdGhlaXIgcmVzcGVjdGl2ZSBwYXJlbnQgc2NhbGVzLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGZvciB1bmRvaW5nIHRoZSBkaXN0b3J0aW9uIG9mIGNvbnRlbnQgd2hlbiBzY2FsaW5nIGEgcGFyZW50IGNvbXBvbmVudC5cbiAqXG4gKiBCeSBkZWZhdWx0LCBgdXNlSW52ZXJ0ZWRTY2FsZWAgd2lsbCBhdXRvbWF0aWNhbGx5IGZldGNoIGBzY2FsZVhgIGFuZCBgc2NhbGVZYCBmcm9tIHRoZSBuZWFyZXN0IHBhcmVudC5cbiAqIEJ5IHBhc3Npbmcgb3RoZXIgYE1vdGlvblZhbHVlYHMgaW4gYXMgYHVzZUludmVydGVkU2NhbGUoeyBzY2FsZVgsIHNjYWxlWSB9KWAsIGl0IHdpbGwgaW52ZXJ0IHRoZSBvdXRwdXRcbiAqIG9mIHRob3NlIGluc3RlYWQuXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgeyBzY2FsZVgsIHNjYWxlWSB9ID0gdXNlSW52ZXJ0ZWRTY2FsZSgpXG4gKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyBzY2FsZVgsIHNjYWxlWSB9fSAvPlxuICogfVxuICogYGBgXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZnVuY3Rpb24gdXNlSW52ZXJ0ZWRTY2FsZShzY2FsZSkge1xuICAgIHZhciBwYXJlbnRTY2FsZVggPSB1c2VNb3Rpb25WYWx1ZSgxKTtcbiAgICB2YXIgcGFyZW50U2NhbGVZID0gdXNlTW90aW9uVmFsdWUoMSk7XG4gICAgdmFyIHZpc3VhbEVsZW1lbnQgPSB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCgpO1xuICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoISEoc2NhbGUgfHwgdmlzdWFsRWxlbWVudCksIFwiSWYgbm8gc2NhbGUgdmFsdWVzIGFyZSBwcm92aWRlZCwgdXNlSW52ZXJ0ZWRTY2FsZSBtdXN0IGJlIHVzZWQgd2l0aGluIGEgY2hpbGQgb2YgYW5vdGhlciBtb3Rpb24gY29tcG9uZW50LlwiKTtcbiAgICBoZXlMaXN0ZW4ud2FybmluZyhoYXNXYXJuZWQsIFwidXNlSW52ZXJ0ZWRTY2FsZSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMy4wLiBVc2UgdGhlIGxheW91dCBwcm9wIGluc3RlYWQuXCIpO1xuICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgaWYgKHNjYWxlKSB7XG4gICAgICAgIHBhcmVudFNjYWxlWCA9IHNjYWxlLnNjYWxlWCB8fCBwYXJlbnRTY2FsZVg7XG4gICAgICAgIHBhcmVudFNjYWxlWSA9IHNjYWxlLnNjYWxlWSB8fCBwYXJlbnRTY2FsZVk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgcGFyZW50U2NhbGVYID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShcInNjYWxlWFwiLCAxKTtcbiAgICAgICAgcGFyZW50U2NhbGVZID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShcInNjYWxlWVwiLCAxKTtcbiAgICB9XG4gICAgdmFyIHNjYWxlWCA9IHVzZVRyYW5zZm9ybShwYXJlbnRTY2FsZVgsIGludmVydFNjYWxlKTtcbiAgICB2YXIgc2NhbGVZID0gdXNlVHJhbnNmb3JtKHBhcmVudFNjYWxlWSwgaW52ZXJ0U2NhbGUpO1xuICAgIHJldHVybiB7IHNjYWxlWDogc2NhbGVYLCBzY2FsZVk6IHNjYWxlWSB9O1xufVxuXG5leHBvcnRzLkFuaW1hdGVQcmVzZW5jZSA9IEFuaW1hdGVQcmVzZW5jZTtcbmV4cG9ydHMuQW5pbWF0ZVNoYXJlZExheW91dCA9IEFuaW1hdGVTaGFyZWRMYXlvdXQ7XG5leHBvcnRzLkRlcHJlY2F0ZWRMYXlvdXRHcm91cENvbnRleHQgPSBEZXByZWNhdGVkTGF5b3V0R3JvdXBDb250ZXh0O1xuZXhwb3J0cy5EcmFnQ29udHJvbHMgPSBEcmFnQ29udHJvbHM7XG5leHBvcnRzLkZsYXRUcmVlID0gRmxhdFRyZWU7XG5leHBvcnRzLkxheW91dEdyb3VwID0gTGF5b3V0R3JvdXA7XG5leHBvcnRzLkxheW91dEdyb3VwQ29udGV4dCA9IExheW91dEdyb3VwQ29udGV4dDtcbmV4cG9ydHMuTGF6eU1vdGlvbiA9IExhenlNb3Rpb247XG5leHBvcnRzLk1vdGlvbkNvbmZpZyA9IE1vdGlvbkNvbmZpZztcbmV4cG9ydHMuTW90aW9uQ29uZmlnQ29udGV4dCA9IE1vdGlvbkNvbmZpZ0NvbnRleHQ7XG5leHBvcnRzLk1vdGlvbkNvbnRleHQgPSBNb3Rpb25Db250ZXh0O1xuZXhwb3J0cy5Nb3Rpb25WYWx1ZSA9IE1vdGlvblZhbHVlO1xuZXhwb3J0cy5QcmVzZW5jZUNvbnRleHQgPSBQcmVzZW5jZUNvbnRleHQ7XG5leHBvcnRzLlJlb3JkZXIgPSBSZW9yZGVyO1xuZXhwb3J0cy5Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQgPSBTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQ7XG5leHBvcnRzLmFkZFBvaW50ZXJFdmVudCA9IGFkZFBvaW50ZXJFdmVudDtcbmV4cG9ydHMuYWRkU2NhbGVDb3JyZWN0b3IgPSBhZGRTY2FsZUNvcnJlY3RvcjtcbmV4cG9ydHMuYW5pbWF0ZSA9IGFuaW1hdGU7XG5leHBvcnRzLmFuaW1hdGVWaXN1YWxFbGVtZW50ID0gYW5pbWF0ZVZpc3VhbEVsZW1lbnQ7XG5leHBvcnRzLmFuaW1hdGlvbkNvbnRyb2xzID0gYW5pbWF0aW9uQ29udHJvbHM7XG5leHBvcnRzLmFuaW1hdGlvbnMgPSBhbmltYXRpb25zO1xuZXhwb3J0cy5jYWxjTGVuZ3RoID0gY2FsY0xlbmd0aDtcbmV4cG9ydHMuY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMgPSBjaGVja1RhcmdldEZvck5ld1ZhbHVlcztcbmV4cG9ydHMuY3JlYXRlQm94ID0gY3JlYXRlQm94O1xuZXhwb3J0cy5jcmVhdGVEb21Nb3Rpb25Db21wb25lbnQgPSBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQ7XG5leHBvcnRzLmNyZWF0ZU1vdGlvbkNvbXBvbmVudCA9IGNyZWF0ZU1vdGlvbkNvbXBvbmVudDtcbmV4cG9ydHMuZG9tQW5pbWF0aW9uID0gZG9tQW5pbWF0aW9uO1xuZXhwb3J0cy5kb21NYXggPSBkb21NYXg7XG5leHBvcnRzLmZpbHRlclByb3BzID0gZmlsdGVyUHJvcHM7XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3NlcjtcbmV4cG9ydHMuaXNEcmFnQWN0aXZlID0gaXNEcmFnQWN0aXZlO1xuZXhwb3J0cy5pc01vdGlvblZhbHVlID0gaXNNb3Rpb25WYWx1ZTtcbmV4cG9ydHMuaXNWYWxpZE1vdGlvblByb3AgPSBpc1ZhbGlkTW90aW9uUHJvcDtcbmV4cG9ydHMubSA9IG07XG5leHBvcnRzLm1ha2VVc2VWaXN1YWxTdGF0ZSA9IG1ha2VVc2VWaXN1YWxTdGF0ZTtcbmV4cG9ydHMubW90aW9uID0gbW90aW9uO1xuZXhwb3J0cy5tb3Rpb25WYWx1ZSA9IG1vdGlvblZhbHVlO1xuZXhwb3J0cy5yZXNvbHZlTW90aW9uVmFsdWUgPSByZXNvbHZlTW90aW9uVmFsdWU7XG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbmV4cG9ydHMudXNlQW5pbWF0aW9uID0gdXNlQW5pbWF0aW9uO1xuZXhwb3J0cy51c2VBbmltYXRpb25Db250cm9scyA9IHVzZUFuaW1hdGlvbkNvbnRyb2xzO1xuZXhwb3J0cy51c2VBbmltYXRpb25GcmFtZSA9IHVzZUFuaW1hdGlvbkZyYW1lO1xuZXhwb3J0cy51c2VDeWNsZSA9IHVzZUN5Y2xlO1xuZXhwb3J0cy51c2VEZXByZWNhdGVkQW5pbWF0ZWRTdGF0ZSA9IHVzZUFuaW1hdGVkU3RhdGU7XG5leHBvcnRzLnVzZURlcHJlY2F0ZWRJbnZlcnRlZFNjYWxlID0gdXNlSW52ZXJ0ZWRTY2FsZTtcbmV4cG9ydHMudXNlRG9tRXZlbnQgPSB1c2VEb21FdmVudDtcbmV4cG9ydHMudXNlRHJhZ0NvbnRyb2xzID0gdXNlRHJhZ0NvbnRyb2xzO1xuZXhwb3J0cy51c2VFbGVtZW50U2Nyb2xsID0gdXNlRWxlbWVudFNjcm9sbDtcbmV4cG9ydHMudXNlRm9yY2VVcGRhdGUgPSB1c2VGb3JjZVVwZGF0ZTtcbmV4cG9ydHMudXNlSW5WaWV3ID0gdXNlSW5WaWV3O1xuZXhwb3J0cy51c2VJbnN0YW50TGF5b3V0VHJhbnNpdGlvbiA9IHVzZUluc3RhbnRMYXlvdXRUcmFuc2l0aW9uO1xuZXhwb3J0cy51c2VJbnN0YW50VHJhbnNpdGlvbiA9IHVzZUluc3RhbnRUcmFuc2l0aW9uO1xuZXhwb3J0cy51c2VJc1ByZXNlbnQgPSB1c2VJc1ByZXNlbnQ7XG5leHBvcnRzLnVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0O1xuZXhwb3J0cy51c2VNb3Rpb25UZW1wbGF0ZSA9IHVzZU1vdGlvblRlbXBsYXRlO1xuZXhwb3J0cy51c2VNb3Rpb25WYWx1ZSA9IHVzZU1vdGlvblZhbHVlO1xuZXhwb3J0cy51c2VQcmVzZW5jZSA9IHVzZVByZXNlbmNlO1xuZXhwb3J0cy51c2VSZWR1Y2VkTW90aW9uID0gdXNlUmVkdWNlZE1vdGlvbjtcbmV4cG9ydHMudXNlUmVkdWNlZE1vdGlvbkNvbmZpZyA9IHVzZVJlZHVjZWRNb3Rpb25Db25maWc7XG5leHBvcnRzLnVzZVJlc2V0UHJvamVjdGlvbiA9IHVzZVJlc2V0UHJvamVjdGlvbjtcbmV4cG9ydHMudXNlU3ByaW5nID0gdXNlU3ByaW5nO1xuZXhwb3J0cy51c2VUaW1lID0gdXNlVGltZTtcbmV4cG9ydHMudXNlVHJhbnNmb3JtID0gdXNlVHJhbnNmb3JtO1xuZXhwb3J0cy51c2VVbm1vdW50RWZmZWN0ID0gdXNlVW5tb3VudEVmZmVjdDtcbmV4cG9ydHMudXNlVmVsb2NpdHkgPSB1c2VWZWxvY2l0eTtcbmV4cG9ydHMudXNlVmlld3BvcnRTY3JvbGwgPSB1c2VWaWV3cG9ydFNjcm9sbDtcbmV4cG9ydHMudXNlVmlzdWFsRWxlbWVudENvbnRleHQgPSB1c2VWaXN1YWxFbGVtZW50Q29udGV4dDtcbmV4cG9ydHMudmlzdWFsRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XG5leHBvcnRzLndyYXBIYW5kbGVyID0gd3JhcEhhbmRsZXI7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaW5kZXggPSBtZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVmYXVsdFRpbWVzdGVwID0gKDEgLyA2MCkgKiAxMDAwO1xuY29uc3QgZ2V0Q3VycmVudFRpbWUgPSB0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCJcbiAgICA/ICgpID0+IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xuY29uc3Qgb25OZXh0RnJhbWUgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyAoY2FsbGJhY2spID0+IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spXG4gICAgOiAoY2FsbGJhY2spID0+IHNldFRpbWVvdXQoKCkgPT4gY2FsbGJhY2soZ2V0Q3VycmVudFRpbWUoKSksIGRlZmF1bHRUaW1lc3RlcCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlclN0ZXAocnVuTmV4dEZyYW1lKSB7XG4gICAgbGV0IHRvUnVuID0gW107XG4gICAgbGV0IHRvUnVuTmV4dEZyYW1lID0gW107XG4gICAgbGV0IG51bVRvUnVuID0gMDtcbiAgICBsZXQgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgbGV0IGZsdXNoTmV4dEZyYW1lID0gZmFsc2U7XG4gICAgY29uc3QgdG9LZWVwQWxpdmUgPSBuZXcgV2Vha1NldCgpO1xuICAgIGNvbnN0IHN0ZXAgPSB7XG4gICAgICAgIHNjaGVkdWxlOiAoY2FsbGJhY2ssIGtlZXBBbGl2ZSA9IGZhbHNlLCBpbW1lZGlhdGUgPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRkVG9DdXJyZW50RnJhbWUgPSBpbW1lZGlhdGUgJiYgaXNQcm9jZXNzaW5nO1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gYWRkVG9DdXJyZW50RnJhbWUgPyB0b1J1biA6IHRvUnVuTmV4dEZyYW1lO1xuICAgICAgICAgICAgaWYgKGtlZXBBbGl2ZSlcbiAgICAgICAgICAgICAgICB0b0tlZXBBbGl2ZS5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGJ1ZmZlci5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGFkZFRvQ3VycmVudEZyYW1lICYmIGlzUHJvY2Vzc2luZylcbiAgICAgICAgICAgICAgICAgICAgbnVtVG9SdW4gPSB0b1J1bi5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2s7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbmNlbDogKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRvUnVuTmV4dEZyYW1lLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICB0b1J1bk5leHRGcmFtZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgdG9LZWVwQWxpdmUuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2VzczogKGZyYW1lRGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2luZykge1xuICAgICAgICAgICAgICAgIGZsdXNoTmV4dEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc1Byb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICAgICAgW3RvUnVuLCB0b1J1bk5leHRGcmFtZV0gPSBbdG9SdW5OZXh0RnJhbWUsIHRvUnVuXTtcbiAgICAgICAgICAgIHRvUnVuTmV4dEZyYW1lLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICBudW1Ub1J1biA9IHRvUnVuLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChudW1Ub1J1bikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVG9SdW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHRvUnVuW2ldO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmcmFtZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9LZWVwQWxpdmUuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcC5zY2hlZHVsZShjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5OZXh0RnJhbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGZsdXNoTmV4dEZyYW1lKSB7XG4gICAgICAgICAgICAgICAgZmx1c2hOZXh0RnJhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGVwLnByb2Nlc3MoZnJhbWVEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBzdGVwO1xufVxuXG5jb25zdCBtYXhFbGFwc2VkID0gNDA7XG5sZXQgdXNlRGVmYXVsdEVsYXBzZWQgPSB0cnVlO1xubGV0IHJ1bk5leHRGcmFtZSA9IGZhbHNlO1xubGV0IGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuY29uc3QgZnJhbWUgPSB7XG4gICAgZGVsdGE6IDAsXG4gICAgdGltZXN0YW1wOiAwLFxufTtcbmNvbnN0IHN0ZXBzT3JkZXIgPSBbXG4gICAgXCJyZWFkXCIsXG4gICAgXCJ1cGRhdGVcIixcbiAgICBcInByZVJlbmRlclwiLFxuICAgIFwicmVuZGVyXCIsXG4gICAgXCJwb3N0UmVuZGVyXCIsXG5dO1xuY29uc3Qgc3RlcHMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBhY2Nba2V5XSA9IGNyZWF0ZVJlbmRlclN0ZXAoKCkgPT4gKHJ1bk5leHRGcmFtZSA9IHRydWUpKTtcbiAgICByZXR1cm4gYWNjO1xufSwge30pO1xuY29uc3Qgc3luYyA9IHN0ZXBzT3JkZXIucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IHN0ZXAgPSBzdGVwc1trZXldO1xuICAgIGFjY1trZXldID0gKHByb2Nlc3MsIGtlZXBBbGl2ZSA9IGZhbHNlLCBpbW1lZGlhdGUgPSBmYWxzZSkgPT4ge1xuICAgICAgICBpZiAoIXJ1bk5leHRGcmFtZSlcbiAgICAgICAgICAgIHN0YXJ0TG9vcCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5zY2hlZHVsZShwcm9jZXNzLCBrZWVwQWxpdmUsIGltbWVkaWF0ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gYWNjO1xufSwge30pO1xuY29uc3QgY2FuY2VsU3luYyA9IHN0ZXBzT3JkZXIucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGFjY1trZXldID0gc3RlcHNba2V5XS5jYW5jZWw7XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbmNvbnN0IGZsdXNoU3luYyA9IHN0ZXBzT3JkZXIucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGFjY1trZXldID0gKCkgPT4gc3RlcHNba2V5XS5wcm9jZXNzKGZyYW1lKTtcbiAgICByZXR1cm4gYWNjO1xufSwge30pO1xuY29uc3QgcHJvY2Vzc1N0ZXAgPSAoc3RlcElkKSA9PiBzdGVwc1tzdGVwSWRdLnByb2Nlc3MoZnJhbWUpO1xuY29uc3QgcHJvY2Vzc0ZyYW1lID0gKHRpbWVzdGFtcCkgPT4ge1xuICAgIHJ1bk5leHRGcmFtZSA9IGZhbHNlO1xuICAgIGZyYW1lLmRlbHRhID0gdXNlRGVmYXVsdEVsYXBzZWRcbiAgICAgICAgPyBkZWZhdWx0VGltZXN0ZXBcbiAgICAgICAgOiBNYXRoLm1heChNYXRoLm1pbih0aW1lc3RhbXAgLSBmcmFtZS50aW1lc3RhbXAsIG1heEVsYXBzZWQpLCAxKTtcbiAgICBmcmFtZS50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICBzdGVwc09yZGVyLmZvckVhY2gocHJvY2Vzc1N0ZXApO1xuICAgIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIGlmIChydW5OZXh0RnJhbWUpIHtcbiAgICAgICAgdXNlRGVmYXVsdEVsYXBzZWQgPSBmYWxzZTtcbiAgICAgICAgb25OZXh0RnJhbWUocHJvY2Vzc0ZyYW1lKTtcbiAgICB9XG59O1xuY29uc3Qgc3RhcnRMb29wID0gKCkgPT4ge1xuICAgIHJ1bk5leHRGcmFtZSA9IHRydWU7XG4gICAgdXNlRGVmYXVsdEVsYXBzZWQgPSB0cnVlO1xuICAgIGlmICghaXNQcm9jZXNzaW5nKVxuICAgICAgICBvbk5leHRGcmFtZShwcm9jZXNzRnJhbWUpO1xufTtcbmNvbnN0IGdldEZyYW1lRGF0YSA9ICgpID0+IGZyYW1lO1xuXG5leHBvcnRzLmNhbmNlbFN5bmMgPSBjYW5jZWxTeW5jO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3luYztcbmV4cG9ydHMuZmx1c2hTeW5jID0gZmx1c2hTeW5jO1xuZXhwb3J0cy5nZXRGcmFtZURhdGEgPSBnZXRGcmFtZURhdGE7XG4iLCJ2YXIgd2FybmluZyA9IGZ1bmN0aW9uICgpIHsgfTtcclxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uICgpIHsgfTtcclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgIHdhcm5pbmcgPSBmdW5jdGlvbiAoY2hlY2ssIG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIWNoZWNrICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGludmFyaWFudCA9IGZ1bmN0aW9uIChjaGVjaywgbWVzc2FnZSkge1xyXG4gICAgICAgIGlmICghY2hlY2spIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cblxuZXhwb3J0IHsgaW52YXJpYW50LCB3YXJuaW5nIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBoZXlMaXN0ZW4gPSByZXF1aXJlKCdoZXktbGlzdGVuJyk7XG52YXIgc3R5bGVWYWx1ZVR5cGVzID0gcmVxdWlyZSgnc3R5bGUtdmFsdWUtdHlwZXMnKTtcbnZhciBzeW5jID0gcmVxdWlyZSgnZnJhbWVzeW5jJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeSAoZSkgeyByZXR1cm4gZSAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCcgJiYgJ2RlZmF1bHQnIGluIGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgc3luY19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koc3luYyk7XG5cbmNvbnN0IGNsYW1wID0gKG1pbiwgbWF4LCB2KSA9PiBNYXRoLm1pbihNYXRoLm1heCh2LCBtaW4pLCBtYXgpO1xuXG5jb25zdCBzYWZlTWluID0gMC4wMDE7XG5jb25zdCBtaW5EdXJhdGlvbiA9IDAuMDE7XG5jb25zdCBtYXhEdXJhdGlvbiA9IDEwLjA7XG5jb25zdCBtaW5EYW1waW5nID0gMC4wNTtcbmNvbnN0IG1heERhbXBpbmcgPSAxO1xuZnVuY3Rpb24gZmluZFNwcmluZyh7IGR1cmF0aW9uID0gODAwLCBib3VuY2UgPSAwLjI1LCB2ZWxvY2l0eSA9IDAsIG1hc3MgPSAxLCB9KSB7XG4gICAgbGV0IGVudmVsb3BlO1xuICAgIGxldCBkZXJpdmF0aXZlO1xuICAgIGhleUxpc3Rlbi53YXJuaW5nKGR1cmF0aW9uIDw9IG1heER1cmF0aW9uICogMTAwMCwgXCJTcHJpbmcgZHVyYXRpb24gbXVzdCBiZSAxMCBzZWNvbmRzIG9yIGxlc3NcIik7XG4gICAgbGV0IGRhbXBpbmdSYXRpbyA9IDEgLSBib3VuY2U7XG4gICAgZGFtcGluZ1JhdGlvID0gY2xhbXAobWluRGFtcGluZywgbWF4RGFtcGluZywgZGFtcGluZ1JhdGlvKTtcbiAgICBkdXJhdGlvbiA9IGNsYW1wKG1pbkR1cmF0aW9uLCBtYXhEdXJhdGlvbiwgZHVyYXRpb24gLyAxMDAwKTtcbiAgICBpZiAoZGFtcGluZ1JhdGlvIDwgMSkge1xuICAgICAgICBlbnZlbG9wZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50aWFsRGVjYXkgPSB1bmRhbXBlZEZyZXEgKiBkYW1waW5nUmF0aW87XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGV4cG9uZW50aWFsRGVjYXkgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBleHBvbmVudGlhbERlY2F5IC0gdmVsb2NpdHk7XG4gICAgICAgICAgICBjb25zdCBiID0gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkRnJlcSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBNYXRoLmV4cCgtZGVsdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHNhZmVNaW4gLSAoYSAvIGIpICogYztcbiAgICAgICAgfTtcbiAgICAgICAgZGVyaXZhdGl2ZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50aWFsRGVjYXkgPSB1bmRhbXBlZEZyZXEgKiBkYW1waW5nUmF0aW87XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGV4cG9uZW50aWFsRGVjYXkgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkZWx0YSAqIHZlbG9jaXR5ICsgdmVsb2NpdHk7XG4gICAgICAgICAgICBjb25zdCBlID0gTWF0aC5wb3coZGFtcGluZ1JhdGlvLCAyKSAqIE1hdGgucG93KHVuZGFtcGVkRnJlcSwgMikgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGYgPSBNYXRoLmV4cCgtZGVsdGEpO1xuICAgICAgICAgICAgY29uc3QgZyA9IGNhbGNBbmd1bGFyRnJlcShNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpLCBkYW1waW5nUmF0aW8pO1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gLWVudmVsb3BlKHVuZGFtcGVkRnJlcSkgKyBzYWZlTWluID4gMCA/IC0xIDogMTtcbiAgICAgICAgICAgIHJldHVybiAoZmFjdG9yICogKChkIC0gZSkgKiBmKSkgLyBnO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW52ZWxvcGUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gTWF0aC5leHAoLXVuZGFtcGVkRnJlcSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSAodW5kYW1wZWRGcmVxIC0gdmVsb2NpdHkpICogZHVyYXRpb24gKyAxO1xuICAgICAgICAgICAgcmV0dXJuIC1zYWZlTWluICsgYSAqIGI7XG4gICAgICAgIH07XG4gICAgICAgIGRlcml2YXRpdmUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gTWF0aC5leHAoLXVuZGFtcGVkRnJlcSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSAodmVsb2NpdHkgLSB1bmRhbXBlZEZyZXEpICogKGR1cmF0aW9uICogZHVyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGEgKiBiO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpbml0aWFsR3Vlc3MgPSA1IC8gZHVyYXRpb247XG4gICAgY29uc3QgdW5kYW1wZWRGcmVxID0gYXBwcm94aW1hdGVSb290KGVudmVsb3BlLCBkZXJpdmF0aXZlLCBpbml0aWFsR3Vlc3MpO1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24gKiAxMDAwO1xuICAgIGlmIChpc05hTih1bmRhbXBlZEZyZXEpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgICAgIGRhbXBpbmc6IDEwLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzdGlmZm5lc3MgPSBNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpICogbWFzcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0aWZmbmVzcyxcbiAgICAgICAgICAgIGRhbXBpbmc6IGRhbXBpbmdSYXRpbyAqIDIgKiBNYXRoLnNxcnQobWFzcyAqIHN0aWZmbmVzcyksXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG59XG5jb25zdCByb290SXRlcmF0aW9ucyA9IDEyO1xuZnVuY3Rpb24gYXBwcm94aW1hdGVSb290KGVudmVsb3BlLCBkZXJpdmF0aXZlLCBpbml0aWFsR3Vlc3MpIHtcbiAgICBsZXQgcmVzdWx0ID0gaW5pdGlhbEd1ZXNzO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcm9vdEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgLSBlbnZlbG9wZShyZXN1bHQpIC8gZGVyaXZhdGl2ZShyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkRnJlcSwgZGFtcGluZ1JhdGlvKSB7XG4gICAgcmV0dXJuIHVuZGFtcGVkRnJlcSAqIE1hdGguc3FydCgxIC0gZGFtcGluZ1JhdGlvICogZGFtcGluZ1JhdGlvKTtcbn1cblxuY29uc3QgZHVyYXRpb25LZXlzID0gW1wiZHVyYXRpb25cIiwgXCJib3VuY2VcIl07XG5jb25zdCBwaHlzaWNzS2V5cyA9IFtcInN0aWZmbmVzc1wiLCBcImRhbXBpbmdcIiwgXCJtYXNzXCJdO1xuZnVuY3Rpb24gaXNTcHJpbmdUeXBlKG9wdGlvbnMsIGtleXMpIHtcbiAgICByZXR1cm4ga2V5cy5zb21lKChrZXkpID0+IG9wdGlvbnNba2V5XSAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGdldFNwcmluZ09wdGlvbnMob3B0aW9ucykge1xuICAgIGxldCBzcHJpbmdPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IHZlbG9jaXR5OiAwLjAsIHN0aWZmbmVzczogMTAwLCBkYW1waW5nOiAxMCwgbWFzczogMS4wLCBpc1Jlc29sdmVkRnJvbUR1cmF0aW9uOiBmYWxzZSB9LCBvcHRpb25zKTtcbiAgICBpZiAoIWlzU3ByaW5nVHlwZShvcHRpb25zLCBwaHlzaWNzS2V5cykgJiZcbiAgICAgICAgaXNTcHJpbmdUeXBlKG9wdGlvbnMsIGR1cmF0aW9uS2V5cykpIHtcbiAgICAgICAgY29uc3QgZGVyaXZlZCA9IGZpbmRTcHJpbmcob3B0aW9ucyk7XG4gICAgICAgIHNwcmluZ09wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3ByaW5nT3B0aW9ucyksIGRlcml2ZWQpLCB7IHZlbG9jaXR5OiAwLjAsIG1hc3M6IDEuMCB9KTtcbiAgICAgICAgc3ByaW5nT3B0aW9ucy5pc1Jlc29sdmVkRnJvbUR1cmF0aW9uID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHNwcmluZ09wdGlvbnM7XG59XG5mdW5jdGlvbiBzcHJpbmcoX2EpIHtcbiAgICB2YXIgeyBmcm9tID0gMC4wLCB0byA9IDEuMCwgcmVzdFNwZWVkID0gMiwgcmVzdERlbHRhIH0gPSBfYSwgb3B0aW9ucyA9IHRzbGliLl9fcmVzdChfYSwgW1wiZnJvbVwiLCBcInRvXCIsIFwicmVzdFNwZWVkXCIsIFwicmVzdERlbHRhXCJdKTtcbiAgICBjb25zdCBzdGF0ZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBmcm9tIH07XG4gICAgbGV0IHsgc3RpZmZuZXNzLCBkYW1waW5nLCBtYXNzLCB2ZWxvY2l0eSwgZHVyYXRpb24sIGlzUmVzb2x2ZWRGcm9tRHVyYXRpb24sIH0gPSBnZXRTcHJpbmdPcHRpb25zKG9wdGlvbnMpO1xuICAgIGxldCByZXNvbHZlU3ByaW5nID0gemVybztcbiAgICBsZXQgcmVzb2x2ZVZlbG9jaXR5ID0gemVybztcbiAgICBmdW5jdGlvbiBjcmVhdGVTcHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxWZWxvY2l0eSA9IHZlbG9jaXR5ID8gLSh2ZWxvY2l0eSAvIDEwMDApIDogMC4wO1xuICAgICAgICBjb25zdCBpbml0aWFsRGVsdGEgPSB0byAtIGZyb207XG4gICAgICAgIGNvbnN0IGRhbXBpbmdSYXRpbyA9IGRhbXBpbmcgLyAoMiAqIE1hdGguc3FydChzdGlmZm5lc3MgKiBtYXNzKSk7XG4gICAgICAgIGNvbnN0IHVuZGFtcGVkQW5ndWxhckZyZXEgPSBNYXRoLnNxcnQoc3RpZmZuZXNzIC8gbWFzcykgLyAxMDAwO1xuICAgICAgICBpZiAocmVzdERlbHRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3REZWx0YSA9IE1hdGgubWluKE1hdGguYWJzKHRvIC0gZnJvbSkgLyAxMDAsIDAuNCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhbXBpbmdSYXRpbyA8IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGFuZ3VsYXJGcmVxID0gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkQW5ndWxhckZyZXEsIGRhbXBpbmdSYXRpbyk7XG4gICAgICAgICAgICByZXNvbHZlU3ByaW5nID0gKHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnZlbG9wZSA9IE1hdGguZXhwKC1kYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0byAtXG4gICAgICAgICAgICAgICAgICAgIGVudmVsb3BlICpcbiAgICAgICAgICAgICAgICAgICAgICAgICgoKGluaXRpYWxWZWxvY2l0eSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIGluaXRpYWxEZWx0YSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXJGcmVxKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oYW5ndWxhckZyZXEgKiB0KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhICogTWF0aC5jb3MoYW5ndWxhckZyZXEgKiB0KSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc29sdmVWZWxvY2l0eSA9ICh0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW52ZWxvcGUgPSBNYXRoLmV4cCgtZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoZGFtcGluZ1JhdGlvICpcbiAgICAgICAgICAgICAgICAgICAgdW5kYW1wZWRBbmd1bGFyRnJlcSAqXG4gICAgICAgICAgICAgICAgICAgIGVudmVsb3BlICpcbiAgICAgICAgICAgICAgICAgICAgKChNYXRoLnNpbihhbmd1bGFyRnJlcSAqIHQpICpcbiAgICAgICAgICAgICAgICAgICAgICAgIChpbml0aWFsVmVsb2NpdHkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGFtcGVkQW5ndWxhckZyZXEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEpKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyRnJlcSArXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKiBNYXRoLmNvcyhhbmd1bGFyRnJlcSAqIHQpKSAtXG4gICAgICAgICAgICAgICAgICAgIGVudmVsb3BlICpcbiAgICAgICAgICAgICAgICAgICAgICAgIChNYXRoLmNvcyhhbmd1bGFyRnJlcSAqIHQpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaW5pdGlhbFZlbG9jaXR5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGluZ1JhdGlvICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGFtcGVkQW5ndWxhckZyZXEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckZyZXEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihhbmd1bGFyRnJlcSAqIHQpKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhbXBpbmdSYXRpbyA9PT0gMSkge1xuICAgICAgICAgICAgcmVzb2x2ZVNwcmluZyA9ICh0KSA9PiB0byAtXG4gICAgICAgICAgICAgICAgTWF0aC5leHAoLXVuZGFtcGVkQW5ndWxhckZyZXEgKiB0KSAqXG4gICAgICAgICAgICAgICAgICAgIChpbml0aWFsRGVsdGEgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGluaXRpYWxWZWxvY2l0eSArIHVuZGFtcGVkQW5ndWxhckZyZXEgKiBpbml0aWFsRGVsdGEpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRhbXBlZEFuZ3VsYXJGcmVxID0gdW5kYW1wZWRBbmd1bGFyRnJlcSAqIE1hdGguc3FydChkYW1waW5nUmF0aW8gKiBkYW1waW5nUmF0aW8gLSAxKTtcbiAgICAgICAgICAgIHJlc29sdmVTcHJpbmcgPSAodCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudmVsb3BlID0gTWF0aC5leHAoLWRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiB0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBmcmVxRm9yVCA9IE1hdGgubWluKGRhbXBlZEFuZ3VsYXJGcmVxICogdCwgMzAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRvIC1cbiAgICAgICAgICAgICAgICAgICAgKGVudmVsb3BlICpcbiAgICAgICAgICAgICAgICAgICAgICAgICgoaW5pdGlhbFZlbG9jaXR5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogaW5pdGlhbERlbHRhKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW5oKGZyZXFGb3JUKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGVkQW5ndWxhckZyZXEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNvc2goZnJlcUZvclQpKSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGVkQW5ndWxhckZyZXEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVTcHJpbmcoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHJlc29sdmVTcHJpbmcodCk7XG4gICAgICAgICAgICBpZiAoIWlzUmVzb2x2ZWRGcm9tRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VmVsb2NpdHkgPSByZXNvbHZlVmVsb2NpdHkodCkgKiAxMDAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCA9IE1hdGguYWJzKGN1cnJlbnRWZWxvY2l0eSkgPD0gcmVzdFNwZWVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQgPSBNYXRoLmFicyh0byAtIGN1cnJlbnQpIDw9IHJlc3REZWx0YTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kb25lID1cbiAgICAgICAgICAgICAgICAgICAgaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkICYmIGlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kb25lID0gdCA+PSBkdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZG9uZSA/IHRvIDogY3VycmVudDtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxpcFRhcmdldDogKCkgPT4ge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSAtdmVsb2NpdHk7XG4gICAgICAgICAgICBbZnJvbSwgdG9dID0gW3RvLCBmcm9tXTtcbiAgICAgICAgICAgIGNyZWF0ZVNwcmluZygpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5zcHJpbmcubmVlZHNJbnRlcnBvbGF0aW9uID0gKGEsIGIpID0+IHR5cGVvZiBhID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBiID09PSBcInN0cmluZ1wiO1xuY29uc3QgemVybyA9IChfdCkgPT4gMDtcblxuY29uc3QgcHJvZ3Jlc3MgPSAoZnJvbSwgdG8sIHZhbHVlKSA9PiB7XG4gICAgY29uc3QgdG9Gcm9tRGlmZmVyZW5jZSA9IHRvIC0gZnJvbTtcbiAgICByZXR1cm4gdG9Gcm9tRGlmZmVyZW5jZSA9PT0gMCA/IDEgOiAodmFsdWUgLSBmcm9tKSAvIHRvRnJvbURpZmZlcmVuY2U7XG59O1xuXG5jb25zdCBtaXggPSAoZnJvbSwgdG8sIHByb2dyZXNzKSA9PiAtcHJvZ3Jlc3MgKiBmcm9tICsgcHJvZ3Jlc3MgKiB0byArIGZyb207XG5cbmZ1bmN0aW9uIGh1ZVRvUmdiKHAsIHEsIHQpIHtcbiAgICBpZiAodCA8IDApXG4gICAgICAgIHQgKz0gMTtcbiAgICBpZiAodCA+IDEpXG4gICAgICAgIHQgLT0gMTtcbiAgICBpZiAodCA8IDEgLyA2KVxuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICBpZiAodCA8IDEgLyAyKVxuICAgICAgICByZXR1cm4gcTtcbiAgICBpZiAodCA8IDIgLyAzKVxuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0KSAqIDY7XG4gICAgcmV0dXJuIHA7XG59XG5mdW5jdGlvbiBoc2xhVG9SZ2JhKHsgaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFscGhhIH0pIHtcbiAgICBodWUgLz0gMzYwO1xuICAgIHNhdHVyYXRpb24gLz0gMTAwO1xuICAgIGxpZ2h0bmVzcyAvPSAxMDA7XG4gICAgbGV0IHJlZCA9IDA7XG4gICAgbGV0IGdyZWVuID0gMDtcbiAgICBsZXQgYmx1ZSA9IDA7XG4gICAgaWYgKCFzYXR1cmF0aW9uKSB7XG4gICAgICAgIHJlZCA9IGdyZWVuID0gYmx1ZSA9IGxpZ2h0bmVzcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHEgPSBsaWdodG5lc3MgPCAwLjVcbiAgICAgICAgICAgID8gbGlnaHRuZXNzICogKDEgKyBzYXR1cmF0aW9uKVxuICAgICAgICAgICAgOiBsaWdodG5lc3MgKyBzYXR1cmF0aW9uIC0gbGlnaHRuZXNzICogc2F0dXJhdGlvbjtcbiAgICAgICAgY29uc3QgcCA9IDIgKiBsaWdodG5lc3MgLSBxO1xuICAgICAgICByZWQgPSBodWVUb1JnYihwLCBxLCBodWUgKyAxIC8gMyk7XG4gICAgICAgIGdyZWVuID0gaHVlVG9SZ2IocCwgcSwgaHVlKTtcbiAgICAgICAgYmx1ZSA9IGh1ZVRvUmdiKHAsIHEsIGh1ZSAtIDEgLyAzKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVkOiBNYXRoLnJvdW5kKHJlZCAqIDI1NSksXG4gICAgICAgIGdyZWVuOiBNYXRoLnJvdW5kKGdyZWVuICogMjU1KSxcbiAgICAgICAgYmx1ZTogTWF0aC5yb3VuZChibHVlICogMjU1KSxcbiAgICAgICAgYWxwaGEsXG4gICAgfTtcbn1cblxuY29uc3QgbWl4TGluZWFyQ29sb3IgPSAoZnJvbSwgdG8sIHYpID0+IHtcbiAgICBjb25zdCBmcm9tRXhwbyA9IGZyb20gKiBmcm9tO1xuICAgIGNvbnN0IHRvRXhwbyA9IHRvICogdG87XG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLm1heCgwLCB2ICogKHRvRXhwbyAtIGZyb21FeHBvKSArIGZyb21FeHBvKSk7XG59O1xuY29uc3QgY29sb3JUeXBlcyA9IFtzdHlsZVZhbHVlVHlwZXMuaGV4LCBzdHlsZVZhbHVlVHlwZXMucmdiYSwgc3R5bGVWYWx1ZVR5cGVzLmhzbGFdO1xuY29uc3QgZ2V0Q29sb3JUeXBlID0gKHYpID0+IGNvbG9yVHlwZXMuZmluZCgodHlwZSkgPT4gdHlwZS50ZXN0KHYpKTtcbmNvbnN0IG5vdEFuaW1hdGFibGUgPSAoY29sb3IpID0+IGAnJHtjb2xvcn0nIGlzIG5vdCBhbiBhbmltYXRhYmxlIGNvbG9yLiBVc2UgdGhlIGVxdWl2YWxlbnQgY29sb3IgY29kZSBpbnN0ZWFkLmA7XG5jb25zdCBtaXhDb2xvciA9IChmcm9tLCB0bykgPT4ge1xuICAgIGxldCBmcm9tQ29sb3JUeXBlID0gZ2V0Q29sb3JUeXBlKGZyb20pO1xuICAgIGxldCB0b0NvbG9yVHlwZSA9IGdldENvbG9yVHlwZSh0byk7XG4gICAgaGV5TGlzdGVuLmludmFyaWFudCghIWZyb21Db2xvclR5cGUsIG5vdEFuaW1hdGFibGUoZnJvbSkpO1xuICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoISF0b0NvbG9yVHlwZSwgbm90QW5pbWF0YWJsZSh0bykpO1xuICAgIGxldCBmcm9tQ29sb3IgPSBmcm9tQ29sb3JUeXBlLnBhcnNlKGZyb20pO1xuICAgIGxldCB0b0NvbG9yID0gdG9Db2xvclR5cGUucGFyc2UodG8pO1xuICAgIGlmIChmcm9tQ29sb3JUeXBlID09PSBzdHlsZVZhbHVlVHlwZXMuaHNsYSkge1xuICAgICAgICBmcm9tQ29sb3IgPSBoc2xhVG9SZ2JhKGZyb21Db2xvcik7XG4gICAgICAgIGZyb21Db2xvclR5cGUgPSBzdHlsZVZhbHVlVHlwZXMucmdiYTtcbiAgICB9XG4gICAgaWYgKHRvQ29sb3JUeXBlID09PSBzdHlsZVZhbHVlVHlwZXMuaHNsYSkge1xuICAgICAgICB0b0NvbG9yID0gaHNsYVRvUmdiYSh0b0NvbG9yKTtcbiAgICAgICAgdG9Db2xvclR5cGUgPSBzdHlsZVZhbHVlVHlwZXMucmdiYTtcbiAgICB9XG4gICAgY29uc3QgYmxlbmRlZCA9IE9iamVjdC5hc3NpZ24oe30sIGZyb21Db2xvcik7XG4gICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGJsZW5kZWQpIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiYWxwaGFcIikge1xuICAgICAgICAgICAgICAgIGJsZW5kZWRba2V5XSA9IG1peExpbmVhckNvbG9yKGZyb21Db2xvcltrZXldLCB0b0NvbG9yW2tleV0sIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJsZW5kZWQuYWxwaGEgPSBtaXgoZnJvbUNvbG9yLmFscGhhLCB0b0NvbG9yLmFscGhhLCB2KTtcbiAgICAgICAgcmV0dXJuIGZyb21Db2xvclR5cGUudHJhbnNmb3JtKGJsZW5kZWQpO1xuICAgIH07XG59O1xuXG5jb25zdCB6ZXJvUG9pbnQgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHo6IDBcbn07XG5jb25zdCBpc051bSA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcic7XG5cbmNvbnN0IGNvbWJpbmVGdW5jdGlvbnMgPSAoYSwgYikgPT4gKHYpID0+IGIoYSh2KSk7XG5jb25zdCBwaXBlID0gKC4uLnRyYW5zZm9ybWVycykgPT4gdHJhbnNmb3JtZXJzLnJlZHVjZShjb21iaW5lRnVuY3Rpb25zKTtcblxuZnVuY3Rpb24gZ2V0TWl4ZXIob3JpZ2luLCB0YXJnZXQpIHtcbiAgICBpZiAoaXNOdW0ob3JpZ2luKSkge1xuICAgICAgICByZXR1cm4gKHYpID0+IG1peChvcmlnaW4sIHRhcmdldCwgdik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0eWxlVmFsdWVUeXBlcy5jb2xvci50ZXN0KG9yaWdpbikpIHtcbiAgICAgICAgcmV0dXJuIG1peENvbG9yKG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBtaXhDb21wbGV4KG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG59XG5jb25zdCBtaXhBcnJheSA9IChmcm9tLCB0bykgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFsuLi5mcm9tXTtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSBvdXRwdXQubGVuZ3RoO1xuICAgIGNvbnN0IGJsZW5kVmFsdWUgPSBmcm9tLm1hcCgoZnJvbVRoaXMsIGkpID0+IGdldE1peGVyKGZyb21UaGlzLCB0b1tpXSkpO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBvdXRwdXRbaV0gPSBibGVuZFZhbHVlW2ldKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn07XG5jb25zdCBtaXhPYmplY3QgPSAob3JpZ2luLCB0YXJnZXQpID0+IHtcbiAgICBjb25zdCBvdXRwdXQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbiksIHRhcmdldCk7XG4gICAgY29uc3QgYmxlbmRWYWx1ZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG91dHB1dCkge1xuICAgICAgICBpZiAob3JpZ2luW2tleV0gIT09IHVuZGVmaW5lZCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBibGVuZFZhbHVlW2tleV0gPSBnZXRNaXhlcihvcmlnaW5ba2V5XSwgdGFyZ2V0W2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBibGVuZFZhbHVlKSB7XG4gICAgICAgICAgICBvdXRwdXRba2V5XSA9IGJsZW5kVmFsdWVba2V5XSh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59O1xuZnVuY3Rpb24gYW5hbHlzZSh2YWx1ZSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN0eWxlVmFsdWVUeXBlcy5jb21wbGV4LnBhcnNlKHZhbHVlKTtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSBwYXJzZWQubGVuZ3RoO1xuICAgIGxldCBudW1OdW1iZXJzID0gMDtcbiAgICBsZXQgbnVtUkdCID0gMDtcbiAgICBsZXQgbnVtSFNMID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgIGlmIChudW1OdW1iZXJzIHx8IHR5cGVvZiBwYXJzZWRbaV0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIG51bU51bWJlcnMrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWRbaV0uaHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBudW1IU0wrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG51bVJHQisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHBhcnNlZCwgbnVtTnVtYmVycywgbnVtUkdCLCBudW1IU0wgfTtcbn1cbmNvbnN0IG1peENvbXBsZXggPSAob3JpZ2luLCB0YXJnZXQpID0+IHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHN0eWxlVmFsdWVUeXBlcy5jb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKHRhcmdldCk7XG4gICAgY29uc3Qgb3JpZ2luU3RhdHMgPSBhbmFseXNlKG9yaWdpbik7XG4gICAgY29uc3QgdGFyZ2V0U3RhdHMgPSBhbmFseXNlKHRhcmdldCk7XG4gICAgY29uc3QgY2FuSW50ZXJwb2xhdGUgPSBvcmlnaW5TdGF0cy5udW1IU0wgPT09IHRhcmdldFN0YXRzLm51bUhTTCAmJlxuICAgICAgICBvcmlnaW5TdGF0cy5udW1SR0IgPT09IHRhcmdldFN0YXRzLm51bVJHQiAmJlxuICAgICAgICBvcmlnaW5TdGF0cy5udW1OdW1iZXJzID49IHRhcmdldFN0YXRzLm51bU51bWJlcnM7XG4gICAgaWYgKGNhbkludGVycG9sYXRlKSB7XG4gICAgICAgIHJldHVybiBwaXBlKG1peEFycmF5KG9yaWdpblN0YXRzLnBhcnNlZCwgdGFyZ2V0U3RhdHMucGFyc2VkKSwgdGVtcGxhdGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaGV5TGlzdGVuLndhcm5pbmcodHJ1ZSwgYENvbXBsZXggdmFsdWVzICcke29yaWdpbn0nIGFuZCAnJHt0YXJnZXR9JyB0b28gZGlmZmVyZW50IHRvIG1peC4gRW5zdXJlIGFsbCBjb2xvcnMgYXJlIG9mIHRoZSBzYW1lIHR5cGUsIGFuZCB0aGF0IGVhY2ggY29udGFpbnMgdGhlIHNhbWUgcXVhbnRpdHkgb2YgbnVtYmVyIGFuZCBjb2xvciB2YWx1ZXMuIEZhbGxpbmcgYmFjayB0byBpbnN0YW50IHRyYW5zaXRpb24uYCk7XG4gICAgICAgIHJldHVybiAocCkgPT4gYCR7cCA+IDAgPyB0YXJnZXQgOiBvcmlnaW59YDtcbiAgICB9XG59O1xuXG5jb25zdCBtaXhOdW1iZXIgPSAoZnJvbSwgdG8pID0+IChwKSA9PiBtaXgoZnJvbSwgdG8sIHApO1xuZnVuY3Rpb24gZGV0ZWN0TWl4ZXJGYWN0b3J5KHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBtaXhOdW1iZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoc3R5bGVWYWx1ZVR5cGVzLmNvbG9yLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiBtaXhDb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtaXhDb21wbGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgcmV0dXJuIG1peEFycmF5O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG1peE9iamVjdDtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVNaXhlcnMob3V0cHV0LCBlYXNlLCBjdXN0b21NaXhlcikge1xuICAgIGNvbnN0IG1peGVycyA9IFtdO1xuICAgIGNvbnN0IG1peGVyRmFjdG9yeSA9IGN1c3RvbU1peGVyIHx8IGRldGVjdE1peGVyRmFjdG9yeShvdXRwdXRbMF0pO1xuICAgIGNvbnN0IG51bU1peGVycyA9IG91dHB1dC5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTWl4ZXJzOyBpKyspIHtcbiAgICAgICAgbGV0IG1peGVyID0gbWl4ZXJGYWN0b3J5KG91dHB1dFtpXSwgb3V0cHV0W2kgKyAxXSk7XG4gICAgICAgIGlmIChlYXNlKSB7XG4gICAgICAgICAgICBjb25zdCBlYXNpbmdGdW5jdGlvbiA9IEFycmF5LmlzQXJyYXkoZWFzZSkgPyBlYXNlW2ldIDogZWFzZTtcbiAgICAgICAgICAgIG1peGVyID0gcGlwZShlYXNpbmdGdW5jdGlvbiwgbWl4ZXIpO1xuICAgICAgICB9XG4gICAgICAgIG1peGVycy5wdXNoKG1peGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1peGVycztcbn1cbmZ1bmN0aW9uIGZhc3RJbnRlcnBvbGF0ZShbZnJvbSwgdG9dLCBbbWl4ZXJdKSB7XG4gICAgcmV0dXJuICh2KSA9PiBtaXhlcihwcm9ncmVzcyhmcm9tLCB0bywgdikpO1xufVxuZnVuY3Rpb24gc2xvd0ludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpIHtcbiAgICBjb25zdCBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICBjb25zdCBsYXN0SW5wdXRJbmRleCA9IGlucHV0TGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgbGV0IG1peGVySW5kZXggPSAwO1xuICAgICAgICBsZXQgZm91bmRNaXhlckluZGV4ID0gZmFsc2U7XG4gICAgICAgIGlmICh2IDw9IGlucHV0WzBdKSB7XG4gICAgICAgICAgICBmb3VuZE1peGVySW5kZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHYgPj0gaW5wdXRbbGFzdElucHV0SW5kZXhdKSB7XG4gICAgICAgICAgICBtaXhlckluZGV4ID0gbGFzdElucHV0SW5kZXggLSAxO1xuICAgICAgICAgICAgZm91bmRNaXhlckluZGV4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kTWl4ZXJJbmRleCkge1xuICAgICAgICAgICAgbGV0IGkgPSAxO1xuICAgICAgICAgICAgZm9yICg7IGkgPCBpbnB1dExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0W2ldID4gdiB8fCBpID09PSBsYXN0SW5wdXRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtaXhlckluZGV4ID0gaSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvZ3Jlc3NJblJhbmdlID0gcHJvZ3Jlc3MoaW5wdXRbbWl4ZXJJbmRleF0sIGlucHV0W21peGVySW5kZXggKyAxXSwgdik7XG4gICAgICAgIHJldHVybiBtaXhlcnNbbWl4ZXJJbmRleF0ocHJvZ3Jlc3NJblJhbmdlKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGUoaW5wdXQsIG91dHB1dCwgeyBjbGFtcDogaXNDbGFtcCA9IHRydWUsIGVhc2UsIG1peGVyIH0gPSB7fSkge1xuICAgIGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoaW5wdXRMZW5ndGggPT09IG91dHB1dC5sZW5ndGgsICdCb3RoIGlucHV0IGFuZCBvdXRwdXQgcmFuZ2VzIG11c3QgYmUgdGhlIHNhbWUgbGVuZ3RoJyk7XG4gICAgaGV5TGlzdGVuLmludmFyaWFudCghZWFzZSB8fCAhQXJyYXkuaXNBcnJheShlYXNlKSB8fCBlYXNlLmxlbmd0aCA9PT0gaW5wdXRMZW5ndGggLSAxLCAnQXJyYXkgb2YgZWFzaW5nIGZ1bmN0aW9ucyBtdXN0IGJlIG9mIGxlbmd0aCBgaW5wdXQubGVuZ3RoIC0gMWAsIGFzIGl0IGFwcGxpZXMgdG8gdGhlIHRyYW5zaXRpb25zICoqYmV0d2VlbioqIHRoZSBkZWZpbmVkIHZhbHVlcy4nKTtcbiAgICBpZiAoaW5wdXRbMF0gPiBpbnB1dFtpbnB1dExlbmd0aCAtIDFdKSB7XG4gICAgICAgIGlucHV0ID0gW10uY29uY2F0KGlucHV0KTtcbiAgICAgICAgb3V0cHV0ID0gW10uY29uY2F0KG91dHB1dCk7XG4gICAgICAgIGlucHV0LnJldmVyc2UoKTtcbiAgICAgICAgb3V0cHV0LnJldmVyc2UoKTtcbiAgICB9XG4gICAgY29uc3QgbWl4ZXJzID0gY3JlYXRlTWl4ZXJzKG91dHB1dCwgZWFzZSwgbWl4ZXIpO1xuICAgIGNvbnN0IGludGVycG9sYXRvciA9IGlucHV0TGVuZ3RoID09PSAyXG4gICAgICAgID8gZmFzdEludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpXG4gICAgICAgIDogc2xvd0ludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpO1xuICAgIHJldHVybiBpc0NsYW1wXG4gICAgICAgID8gKHYpID0+IGludGVycG9sYXRvcihjbGFtcChpbnB1dFswXSwgaW5wdXRbaW5wdXRMZW5ndGggLSAxXSwgdikpXG4gICAgICAgIDogaW50ZXJwb2xhdG9yO1xufVxuXG5jb25zdCByZXZlcnNlRWFzaW5nID0gZWFzaW5nID0+IHAgPT4gMSAtIGVhc2luZygxIC0gcCk7XG5jb25zdCBtaXJyb3JFYXNpbmcgPSBlYXNpbmcgPT4gcCA9PiBwIDw9IDAuNSA/IGVhc2luZygyICogcCkgLyAyIDogKDIgLSBlYXNpbmcoMiAqICgxIC0gcCkpKSAvIDI7XG5jb25zdCBjcmVhdGVFeHBvSW4gPSAocG93ZXIpID0+IHAgPT4gTWF0aC5wb3cocCwgcG93ZXIpO1xuY29uc3QgY3JlYXRlQmFja0luID0gKHBvd2VyKSA9PiBwID0+IHAgKiBwICogKChwb3dlciArIDEpICogcCAtIHBvd2VyKTtcbmNvbnN0IGNyZWF0ZUFudGljaXBhdGUgPSAocG93ZXIpID0+IHtcbiAgICBjb25zdCBiYWNrRWFzaW5nID0gY3JlYXRlQmFja0luKHBvd2VyKTtcbiAgICByZXR1cm4gcCA9PiAocCAqPSAyKSA8IDFcbiAgICAgICAgPyAwLjUgKiBiYWNrRWFzaW5nKHApXG4gICAgICAgIDogMC41ICogKDIgLSBNYXRoLnBvdygyLCAtMTAgKiAocCAtIDEpKSk7XG59O1xuXG5jb25zdCBERUZBVUxUX09WRVJTSE9PVF9TVFJFTkdUSCA9IDEuNTI1O1xuY29uc3QgQk9VTkNFX0ZJUlNUX1RIUkVTSE9MRCA9IDQuMCAvIDExLjA7XG5jb25zdCBCT1VOQ0VfU0VDT05EX1RIUkVTSE9MRCA9IDguMCAvIDExLjA7XG5jb25zdCBCT1VOQ0VfVEhJUkRfVEhSRVNIT0xEID0gOS4wIC8gMTAuMDtcbmNvbnN0IGxpbmVhciA9IHAgPT4gcDtcbmNvbnN0IGVhc2VJbiA9IGNyZWF0ZUV4cG9JbigyKTtcbmNvbnN0IGVhc2VPdXQgPSByZXZlcnNlRWFzaW5nKGVhc2VJbik7XG5jb25zdCBlYXNlSW5PdXQgPSBtaXJyb3JFYXNpbmcoZWFzZUluKTtcbmNvbnN0IGNpcmNJbiA9IHAgPT4gMSAtIE1hdGguc2luKE1hdGguYWNvcyhwKSk7XG5jb25zdCBjaXJjT3V0ID0gcmV2ZXJzZUVhc2luZyhjaXJjSW4pO1xuY29uc3QgY2lyY0luT3V0ID0gbWlycm9yRWFzaW5nKGNpcmNPdXQpO1xuY29uc3QgYmFja0luID0gY3JlYXRlQmFja0luKERFRkFVTFRfT1ZFUlNIT09UX1NUUkVOR1RIKTtcbmNvbnN0IGJhY2tPdXQgPSByZXZlcnNlRWFzaW5nKGJhY2tJbik7XG5jb25zdCBiYWNrSW5PdXQgPSBtaXJyb3JFYXNpbmcoYmFja0luKTtcbmNvbnN0IGFudGljaXBhdGUgPSBjcmVhdGVBbnRpY2lwYXRlKERFRkFVTFRfT1ZFUlNIT09UX1NUUkVOR1RIKTtcbmNvbnN0IGNhID0gNDM1Ni4wIC8gMzYxLjA7XG5jb25zdCBjYiA9IDM1NDQyLjAgLyAxODA1LjA7XG5jb25zdCBjYyA9IDE2MDYxLjAgLyAxODA1LjA7XG5jb25zdCBib3VuY2VPdXQgPSAocCkgPT4ge1xuICAgIGlmIChwID09PSAxIHx8IHAgPT09IDApXG4gICAgICAgIHJldHVybiBwO1xuICAgIGNvbnN0IHAyID0gcCAqIHA7XG4gICAgcmV0dXJuIHAgPCBCT1VOQ0VfRklSU1RfVEhSRVNIT0xEXG4gICAgICAgID8gNy41NjI1ICogcDJcbiAgICAgICAgOiBwIDwgQk9VTkNFX1NFQ09ORF9USFJFU0hPTERcbiAgICAgICAgICAgID8gOS4wNzUgKiBwMiAtIDkuOSAqIHAgKyAzLjRcbiAgICAgICAgICAgIDogcCA8IEJPVU5DRV9USElSRF9USFJFU0hPTERcbiAgICAgICAgICAgICAgICA/IGNhICogcDIgLSBjYiAqIHAgKyBjY1xuICAgICAgICAgICAgICAgIDogMTAuOCAqIHAgKiBwIC0gMjAuNTIgKiBwICsgMTAuNzI7XG59O1xuY29uc3QgYm91bmNlSW4gPSByZXZlcnNlRWFzaW5nKGJvdW5jZU91dCk7XG5jb25zdCBib3VuY2VJbk91dCA9IChwKSA9PiBwIDwgMC41XG4gICAgPyAwLjUgKiAoMS4wIC0gYm91bmNlT3V0KDEuMCAtIHAgKiAyLjApKVxuICAgIDogMC41ICogYm91bmNlT3V0KHAgKiAyLjAgLSAxLjApICsgMC41O1xuXG5mdW5jdGlvbiBkZWZhdWx0RWFzaW5nKHZhbHVlcywgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5tYXAoKCkgPT4gZWFzaW5nIHx8IGVhc2VJbk91dCkuc3BsaWNlKDAsIHZhbHVlcy5sZW5ndGggLSAxKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPZmZzZXQodmFsdWVzKSB7XG4gICAgY29uc3QgbnVtVmFsdWVzID0gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gdmFsdWVzLm1hcCgoX3ZhbHVlLCBpKSA9PiBpICE9PSAwID8gaSAvIChudW1WYWx1ZXMgLSAxKSA6IDApO1xufVxuZnVuY3Rpb24gY29udmVydE9mZnNldFRvVGltZXMob2Zmc2V0LCBkdXJhdGlvbikge1xuICAgIHJldHVybiBvZmZzZXQubWFwKChvKSA9PiBvICogZHVyYXRpb24pO1xufVxuZnVuY3Rpb24ga2V5ZnJhbWVzKHsgZnJvbSA9IDAsIHRvID0gMSwgZWFzZSwgb2Zmc2V0LCBkdXJhdGlvbiA9IDMwMCwgfSkge1xuICAgIGNvbnN0IHN0YXRlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZyb20gfTtcbiAgICBjb25zdCB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KHRvKSA/IHRvIDogW2Zyb20sIHRvXTtcbiAgICBjb25zdCB0aW1lcyA9IGNvbnZlcnRPZmZzZXRUb1RpbWVzKG9mZnNldCAmJiBvZmZzZXQubGVuZ3RoID09PSB2YWx1ZXMubGVuZ3RoXG4gICAgICAgID8gb2Zmc2V0XG4gICAgICAgIDogZGVmYXVsdE9mZnNldCh2YWx1ZXMpLCBkdXJhdGlvbik7XG4gICAgZnVuY3Rpb24gY3JlYXRlSW50ZXJwb2xhdG9yKCkge1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGUodGltZXMsIHZhbHVlcywge1xuICAgICAgICAgICAgZWFzZTogQXJyYXkuaXNBcnJheShlYXNlKSA/IGVhc2UgOiBkZWZhdWx0RWFzaW5nKHZhbHVlcywgZWFzZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgaW50ZXJwb2xhdG9yID0gY3JlYXRlSW50ZXJwb2xhdG9yKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogKHQpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gaW50ZXJwb2xhdG9yKHQpO1xuICAgICAgICAgICAgc3RhdGUuZG9uZSA9IHQgPj0gZHVyYXRpb247XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGZsaXBUYXJnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHZhbHVlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3IgPSBjcmVhdGVJbnRlcnBvbGF0b3IoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBkZWNheSh7IHZlbG9jaXR5ID0gMCwgZnJvbSA9IDAsIHBvd2VyID0gMC44LCB0aW1lQ29uc3RhbnQgPSAzNTAsIHJlc3REZWx0YSA9IDAuNSwgbW9kaWZ5VGFyZ2V0LCB9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZnJvbSB9O1xuICAgIGxldCBhbXBsaXR1ZGUgPSBwb3dlciAqIHZlbG9jaXR5O1xuICAgIGNvbnN0IGlkZWFsID0gZnJvbSArIGFtcGxpdHVkZTtcbiAgICBjb25zdCB0YXJnZXQgPSBtb2RpZnlUYXJnZXQgPT09IHVuZGVmaW5lZCA/IGlkZWFsIDogbW9kaWZ5VGFyZ2V0KGlkZWFsKTtcbiAgICBpZiAodGFyZ2V0ICE9PSBpZGVhbClcbiAgICAgICAgYW1wbGl0dWRlID0gdGFyZ2V0IC0gZnJvbTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSAtYW1wbGl0dWRlICogTWF0aC5leHAoLXQgLyB0aW1lQ29uc3RhbnQpO1xuICAgICAgICAgICAgc3RhdGUuZG9uZSA9ICEoZGVsdGEgPiByZXN0RGVsdGEgfHwgZGVsdGEgPCAtcmVzdERlbHRhKTtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZG9uZSA/IHRhcmdldCA6IHRhcmdldCArIGRlbHRhO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBmbGlwVGFyZ2V0OiAoKSA9PiB7IH0sXG4gICAgfTtcbn1cblxuY29uc3QgdHlwZXMgPSB7IGtleWZyYW1lcywgc3ByaW5nLCBkZWNheSB9O1xuZnVuY3Rpb24gZGV0ZWN0QW5pbWF0aW9uRnJvbU9wdGlvbnMoY29uZmlnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLnRvKSkge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlc1tjb25maWcudHlwZV0pIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzW2NvbmZpZy50eXBlXTtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoT2JqZWN0LmtleXMoY29uZmlnKSk7XG4gICAgaWYgKGtleXMuaGFzKFwiZWFzZVwiKSB8fFxuICAgICAgICAoa2V5cy5oYXMoXCJkdXJhdGlvblwiKSAmJiAha2V5cy5oYXMoXCJkYW1waW5nUmF0aW9cIikpKSB7XG4gICAgICAgIHJldHVybiBrZXlmcmFtZXM7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleXMuaGFzKFwiZGFtcGluZ1JhdGlvXCIpIHx8XG4gICAgICAgIGtleXMuaGFzKFwic3RpZmZuZXNzXCIpIHx8XG4gICAgICAgIGtleXMuaGFzKFwibWFzc1wiKSB8fFxuICAgICAgICBrZXlzLmhhcyhcImRhbXBpbmdcIikgfHxcbiAgICAgICAga2V5cy5oYXMoXCJyZXN0U3BlZWRcIikgfHxcbiAgICAgICAga2V5cy5oYXMoXCJyZXN0RGVsdGFcIikpIHtcbiAgICAgICAgcmV0dXJuIHNwcmluZztcbiAgICB9XG4gICAgcmV0dXJuIGtleWZyYW1lcztcbn1cblxuZnVuY3Rpb24gbG9vcEVsYXBzZWQoZWxhcHNlZCwgZHVyYXRpb24sIGRlbGF5ID0gMCkge1xuICAgIHJldHVybiBlbGFwc2VkIC0gZHVyYXRpb24gLSBkZWxheTtcbn1cbmZ1bmN0aW9uIHJldmVyc2VFbGFwc2VkKGVsYXBzZWQsIGR1cmF0aW9uLCBkZWxheSA9IDAsIGlzRm9yd2FyZFBsYXliYWNrID0gdHJ1ZSkge1xuICAgIHJldHVybiBpc0ZvcndhcmRQbGF5YmFja1xuICAgICAgICA/IGxvb3BFbGFwc2VkKGR1cmF0aW9uICsgLWVsYXBzZWQsIGR1cmF0aW9uLCBkZWxheSlcbiAgICAgICAgOiBkdXJhdGlvbiAtIChlbGFwc2VkIC0gZHVyYXRpb24pICsgZGVsYXk7XG59XG5mdW5jdGlvbiBoYXNSZXBlYXREZWxheUVsYXBzZWQoZWxhcHNlZCwgZHVyYXRpb24sIGRlbGF5LCBpc0ZvcndhcmRQbGF5YmFjaykge1xuICAgIHJldHVybiBpc0ZvcndhcmRQbGF5YmFjayA/IGVsYXBzZWQgPj0gZHVyYXRpb24gKyBkZWxheSA6IGVsYXBzZWQgPD0gLWRlbGF5O1xufVxuXG5jb25zdCBmcmFtZXN5bmMgPSAodXBkYXRlKSA9PiB7XG4gICAgY29uc3QgcGFzc1RpbWVzdGFtcCA9ICh7IGRlbHRhIH0pID0+IHVwZGF0ZShkZWx0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6ICgpID0+IHN5bmNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnVwZGF0ZShwYXNzVGltZXN0YW1wLCB0cnVlKSxcbiAgICAgICAgc3RvcDogKCkgPT4gc3luYy5jYW5jZWxTeW5jLnVwZGF0ZShwYXNzVGltZXN0YW1wKSxcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGFuaW1hdGUoX2EpIHtcbiAgICB2YXIgX2IsIF9jO1xuICAgIHZhciB7IGZyb20sIGF1dG9wbGF5ID0gdHJ1ZSwgZHJpdmVyID0gZnJhbWVzeW5jLCBlbGFwc2VkID0gMCwgcmVwZWF0OiByZXBlYXRNYXggPSAwLCByZXBlYXRUeXBlID0gXCJsb29wXCIsIHJlcGVhdERlbGF5ID0gMCwgb25QbGF5LCBvblN0b3AsIG9uQ29tcGxldGUsIG9uUmVwZWF0LCBvblVwZGF0ZSB9ID0gX2EsIG9wdGlvbnMgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcImZyb21cIiwgXCJhdXRvcGxheVwiLCBcImRyaXZlclwiLCBcImVsYXBzZWRcIiwgXCJyZXBlYXRcIiwgXCJyZXBlYXRUeXBlXCIsIFwicmVwZWF0RGVsYXlcIiwgXCJvblBsYXlcIiwgXCJvblN0b3BcIiwgXCJvbkNvbXBsZXRlXCIsIFwib25SZXBlYXRcIiwgXCJvblVwZGF0ZVwiXSk7XG4gICAgbGV0IHsgdG8gfSA9IG9wdGlvbnM7XG4gICAgbGV0IGRyaXZlckNvbnRyb2xzO1xuICAgIGxldCByZXBlYXRDb3VudCA9IDA7XG4gICAgbGV0IGNvbXB1dGVkRHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uO1xuICAgIGxldCBsYXRlc3Q7XG4gICAgbGV0IGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICBsZXQgaXNGb3J3YXJkUGxheWJhY2sgPSB0cnVlO1xuICAgIGxldCBpbnRlcnBvbGF0ZUZyb21OdW1iZXI7XG4gICAgY29uc3QgYW5pbWF0b3IgPSBkZXRlY3RBbmltYXRpb25Gcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICBpZiAoKF9jID0gKF9iID0gYW5pbWF0b3IpLm5lZWRzSW50ZXJwb2xhdGlvbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIGZyb20sIHRvKSkge1xuICAgICAgICBpbnRlcnBvbGF0ZUZyb21OdW1iZXIgPSBpbnRlcnBvbGF0ZShbMCwgMTAwXSwgW2Zyb20sIHRvXSwge1xuICAgICAgICAgICAgY2xhbXA6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgIHRvID0gMTAwO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRvcihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGZyb20sIHRvIH0pKTtcbiAgICBmdW5jdGlvbiByZXBlYXQoKSB7XG4gICAgICAgIHJlcGVhdENvdW50Kys7XG4gICAgICAgIGlmIChyZXBlYXRUeXBlID09PSBcInJldmVyc2VcIikge1xuICAgICAgICAgICAgaXNGb3J3YXJkUGxheWJhY2sgPSByZXBlYXRDb3VudCAlIDIgPT09IDA7XG4gICAgICAgICAgICBlbGFwc2VkID0gcmV2ZXJzZUVsYXBzZWQoZWxhcHNlZCwgY29tcHV0ZWREdXJhdGlvbiwgcmVwZWF0RGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsYXBzZWQgPSBsb29wRWxhcHNlZChlbGFwc2VkLCBjb21wdXRlZER1cmF0aW9uLCByZXBlYXREZWxheSk7XG4gICAgICAgICAgICBpZiAocmVwZWF0VHlwZSA9PT0gXCJtaXJyb3JcIilcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZmxpcFRhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgb25SZXBlYXQgJiYgb25SZXBlYXQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBpZiAoIWlzRm9yd2FyZFBsYXliYWNrKVxuICAgICAgICAgICAgZGVsdGEgPSAtZGVsdGE7XG4gICAgICAgIGVsYXBzZWQgKz0gZGVsdGE7XG4gICAgICAgIGlmICghaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBhbmltYXRpb24ubmV4dChNYXRoLm1heCgwLCBlbGFwc2VkKSk7XG4gICAgICAgICAgICBsYXRlc3QgPSBzdGF0ZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0ZUZyb21OdW1iZXIpXG4gICAgICAgICAgICAgICAgbGF0ZXN0ID0gaW50ZXJwb2xhdGVGcm9tTnVtYmVyKGxhdGVzdCk7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gaXNGb3J3YXJkUGxheWJhY2sgPyBzdGF0ZS5kb25lIDogZWxhcHNlZCA8PSAwO1xuICAgICAgICB9XG4gICAgICAgIG9uVXBkYXRlID09PSBudWxsIHx8IG9uVXBkYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblVwZGF0ZShsYXRlc3QpO1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgaWYgKHJlcGVhdENvdW50ID09PSAwKVxuICAgICAgICAgICAgICAgIGNvbXB1dGVkRHVyYXRpb24gIT09IG51bGwgJiYgY29tcHV0ZWREdXJhdGlvbiAhPT0gdm9pZCAwID8gY29tcHV0ZWREdXJhdGlvbiA6IChjb21wdXRlZER1cmF0aW9uID0gZWxhcHNlZCk7XG4gICAgICAgICAgICBpZiAocmVwZWF0Q291bnQgPCByZXBlYXRNYXgpIHtcbiAgICAgICAgICAgICAgICBoYXNSZXBlYXREZWxheUVsYXBzZWQoZWxhcHNlZCwgY29tcHV0ZWREdXJhdGlvbiwgcmVwZWF0RGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKSAmJiByZXBlYXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgICAgb25QbGF5ID09PSBudWxsIHx8IG9uUGxheSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25QbGF5KCk7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzID0gZHJpdmVyKHVwZGF0ZSk7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzLnN0YXJ0KCk7XG4gICAgfVxuICAgIGF1dG9wbGF5ICYmIHBsYXkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICBvblN0b3AgPT09IG51bGwgfHwgb25TdG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblN0b3AoKTtcbiAgICAgICAgICAgIGRyaXZlckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB2ZWxvY2l0eVBlclNlY29uZCh2ZWxvY2l0eSwgZnJhbWVEdXJhdGlvbikge1xuICAgIHJldHVybiBmcmFtZUR1cmF0aW9uID8gdmVsb2NpdHkgKiAoMTAwMCAvIGZyYW1lRHVyYXRpb24pIDogMDtcbn1cblxuZnVuY3Rpb24gaW5lcnRpYSh7IGZyb20gPSAwLCB2ZWxvY2l0eSA9IDAsIG1pbiwgbWF4LCBwb3dlciA9IDAuOCwgdGltZUNvbnN0YW50ID0gNzUwLCBib3VuY2VTdGlmZm5lc3MgPSA1MDAsIGJvdW5jZURhbXBpbmcgPSAxMCwgcmVzdERlbHRhID0gMSwgbW9kaWZ5VGFyZ2V0LCBkcml2ZXIsIG9uVXBkYXRlLCBvbkNvbXBsZXRlLCBvblN0b3AsIH0pIHtcbiAgICBsZXQgY3VycmVudEFuaW1hdGlvbjtcbiAgICBmdW5jdGlvbiBpc091dE9mQm91bmRzKHYpIHtcbiAgICAgICAgcmV0dXJuIChtaW4gIT09IHVuZGVmaW5lZCAmJiB2IDwgbWluKSB8fCAobWF4ICE9PSB1bmRlZmluZWQgJiYgdiA+IG1heCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJvdW5kYXJ5TmVhcmVzdCh2KSB7XG4gICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBtYXg7XG4gICAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBtaW47XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhtaW4gLSB2KSA8IE1hdGguYWJzKG1heCAtIHYpID8gbWluIDogbWF4O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGFydEFuaW1hdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGN1cnJlbnRBbmltYXRpb24gPT09IG51bGwgfHwgY3VycmVudEFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudEFuaW1hdGlvbi5zdG9wKCk7XG4gICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBhbmltYXRlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgZHJpdmVyLCBvblVwZGF0ZTogKHYpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgb25VcGRhdGUgPT09IG51bGwgfHwgb25VcGRhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVXBkYXRlKHYpO1xuICAgICAgICAgICAgICAgIChfYSA9IG9wdGlvbnMub25VcGRhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIHYpO1xuICAgICAgICAgICAgfSwgb25Db21wbGV0ZSxcbiAgICAgICAgICAgIG9uU3RvcCB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0U3ByaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgc3RhcnRBbmltYXRpb24oT2JqZWN0LmFzc2lnbih7IHR5cGU6IFwic3ByaW5nXCIsIHN0aWZmbmVzczogYm91bmNlU3RpZmZuZXNzLCBkYW1waW5nOiBib3VuY2VEYW1waW5nLCByZXN0RGVsdGEgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoaXNPdXRPZkJvdW5kcyhmcm9tKSkge1xuICAgICAgICBzdGFydFNwcmluZyh7IGZyb20sIHZlbG9jaXR5LCB0bzogYm91bmRhcnlOZWFyZXN0KGZyb20pIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHRhcmdldCA9IHBvd2VyICogdmVsb2NpdHkgKyBmcm9tO1xuICAgICAgICBpZiAodHlwZW9mIG1vZGlmeVRhcmdldCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHRhcmdldCA9IG1vZGlmeVRhcmdldCh0YXJnZXQpO1xuICAgICAgICBjb25zdCBib3VuZGFyeSA9IGJvdW5kYXJ5TmVhcmVzdCh0YXJnZXQpO1xuICAgICAgICBjb25zdCBoZWFkaW5nID0gYm91bmRhcnkgPT09IG1pbiA/IC0xIDogMTtcbiAgICAgICAgbGV0IHByZXY7XG4gICAgICAgIGxldCBjdXJyZW50O1xuICAgICAgICBjb25zdCBjaGVja0JvdW5kYXJ5ID0gKHYpID0+IHtcbiAgICAgICAgICAgIHByZXYgPSBjdXJyZW50O1xuICAgICAgICAgICAgY3VycmVudCA9IHY7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IHZlbG9jaXR5UGVyU2Vjb25kKHYgLSBwcmV2LCBzeW5jLmdldEZyYW1lRGF0YSgpLmRlbHRhKTtcbiAgICAgICAgICAgIGlmICgoaGVhZGluZyA9PT0gMSAmJiB2ID4gYm91bmRhcnkpIHx8XG4gICAgICAgICAgICAgICAgKGhlYWRpbmcgPT09IC0xICYmIHYgPCBib3VuZGFyeSkpIHtcbiAgICAgICAgICAgICAgICBzdGFydFNwcmluZyh7IGZyb206IHYsIHRvOiBib3VuZGFyeSwgdmVsb2NpdHkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHN0YXJ0QW5pbWF0aW9uKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGVjYXlcIixcbiAgICAgICAgICAgIGZyb20sXG4gICAgICAgICAgICB2ZWxvY2l0eSxcbiAgICAgICAgICAgIHRpbWVDb25zdGFudCxcbiAgICAgICAgICAgIHBvd2VyLFxuICAgICAgICAgICAgcmVzdERlbHRhLFxuICAgICAgICAgICAgbW9kaWZ5VGFyZ2V0LFxuICAgICAgICAgICAgb25VcGRhdGU6IGlzT3V0T2ZCb3VuZHModGFyZ2V0KSA/IGNoZWNrQm91bmRhcnkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiAoKSA9PiBjdXJyZW50QW5pbWF0aW9uID09PSBudWxsIHx8IGN1cnJlbnRBbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnRBbmltYXRpb24uc3RvcCgpLFxuICAgIH07XG59XG5cbmNvbnN0IHJhZGlhbnNUb0RlZ3JlZXMgPSAocmFkaWFucykgPT4gKHJhZGlhbnMgKiAxODApIC8gTWF0aC5QSTtcblxuY29uc3QgYW5nbGUgPSAoYSwgYiA9IHplcm9Qb2ludCkgPT4gcmFkaWFuc1RvRGVncmVlcyhNYXRoLmF0YW4yKGIueSAtIGEueSwgYi54IC0gYS54KSk7XG5cbmNvbnN0IGFwcGx5T2Zmc2V0ID0gKGZyb20sIHRvKSA9PiB7XG4gICAgbGV0IGhhc1JlY2VpdmVkRnJvbSA9IHRydWU7XG4gICAgaWYgKHRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdG8gPSBmcm9tO1xuICAgICAgICBoYXNSZWNlaXZlZEZyb20gPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgIGlmIChoYXNSZWNlaXZlZEZyb20pIHtcbiAgICAgICAgICAgIHJldHVybiB2IC0gZnJvbSArIHRvO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJvbSA9IHY7XG4gICAgICAgICAgICBoYXNSZWNlaXZlZEZyb20gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbmNvbnN0IGlkZW50aXR5ID0gKHYpID0+IHY7XG5jb25zdCBjcmVhdGVBdHRyYWN0b3IgPSAoYWx0ZXJEaXNwbGFjZW1lbnQgPSBpZGVudGl0eSkgPT4gKGNvbnN0YW50LCBvcmlnaW4sIHYpID0+IHtcbiAgICBjb25zdCBkaXNwbGFjZW1lbnQgPSBvcmlnaW4gLSB2O1xuICAgIGNvbnN0IHNwcmluZ01vZGlmaWVkRGlzcGxhY2VtZW50ID0gLSgwIC0gY29uc3RhbnQgKyAxKSAqICgwIC0gYWx0ZXJEaXNwbGFjZW1lbnQoTWF0aC5hYnMoZGlzcGxhY2VtZW50KSkpO1xuICAgIHJldHVybiBkaXNwbGFjZW1lbnQgPD0gMFxuICAgICAgICA/IG9yaWdpbiArIHNwcmluZ01vZGlmaWVkRGlzcGxhY2VtZW50XG4gICAgICAgIDogb3JpZ2luIC0gc3ByaW5nTW9kaWZpZWREaXNwbGFjZW1lbnQ7XG59O1xuY29uc3QgYXR0cmFjdCA9IGNyZWF0ZUF0dHJhY3RvcigpO1xuY29uc3QgYXR0cmFjdEV4cG8gPSBjcmVhdGVBdHRyYWN0b3IoTWF0aC5zcXJ0KTtcblxuY29uc3QgZGVncmVlc1RvUmFkaWFucyA9IChkZWdyZWVzKSA9PiAoZGVncmVlcyAqIE1hdGguUEkpIC8gMTgwO1xuXG5jb25zdCBpc1BvaW50ID0gKHBvaW50KSA9PiBwb2ludC5oYXNPd25Qcm9wZXJ0eSgneCcpICYmIHBvaW50Lmhhc093blByb3BlcnR5KCd5Jyk7XG5cbmNvbnN0IGlzUG9pbnQzRCA9IChwb2ludCkgPT4gaXNQb2ludChwb2ludCkgJiYgcG9pbnQuaGFzT3duUHJvcGVydHkoJ3onKTtcblxuY29uc3QgZGlzdGFuY2UxRCA9IChhLCBiKSA9PiBNYXRoLmFicyhhIC0gYik7XG5mdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgaWYgKGlzTnVtKGEpICYmIGlzTnVtKGIpKSB7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZTFEKGEsIGIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1BvaW50KGEpICYmIGlzUG9pbnQoYikpIHtcbiAgICAgICAgY29uc3QgeERlbHRhID0gZGlzdGFuY2UxRChhLngsIGIueCk7XG4gICAgICAgIGNvbnN0IHlEZWx0YSA9IGRpc3RhbmNlMUQoYS55LCBiLnkpO1xuICAgICAgICBjb25zdCB6RGVsdGEgPSBpc1BvaW50M0QoYSkgJiYgaXNQb2ludDNEKGIpID8gZGlzdGFuY2UxRChhLnosIGIueikgOiAwO1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHhEZWx0YSwgMikgKyBNYXRoLnBvdyh5RGVsdGEsIDIpICsgTWF0aC5wb3coekRlbHRhLCAyKSk7XG4gICAgfVxufVxuXG5jb25zdCBwb2ludEZyb21WZWN0b3IgPSAob3JpZ2luLCBhbmdsZSwgZGlzdGFuY2UpID0+IHtcbiAgICBhbmdsZSA9IGRlZ3JlZXNUb1JhZGlhbnMoYW5nbGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGRpc3RhbmNlICogTWF0aC5jb3MoYW5nbGUpICsgb3JpZ2luLngsXG4gICAgICAgIHk6IGRpc3RhbmNlICogTWF0aC5zaW4oYW5nbGUpICsgb3JpZ2luLnlcbiAgICB9O1xufTtcblxuY29uc3QgdG9EZWNpbWFsID0gKG51bSwgcHJlY2lzaW9uID0gMikgPT4ge1xuICAgIHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG59O1xuXG5jb25zdCBzbW9vdGhGcmFtZSA9IChwcmV2VmFsdWUsIG5leHRWYWx1ZSwgZHVyYXRpb24sIHNtb290aGluZyA9IDApID0+IHRvRGVjaW1hbChwcmV2VmFsdWUgK1xuICAgIChkdXJhdGlvbiAqIChuZXh0VmFsdWUgLSBwcmV2VmFsdWUpKSAvIE1hdGgubWF4KHNtb290aGluZywgZHVyYXRpb24pKTtcblxuY29uc3Qgc21vb3RoID0gKHN0cmVuZ3RoID0gNTApID0+IHtcbiAgICBsZXQgcHJldmlvdXNWYWx1ZSA9IDA7XG4gICAgbGV0IGxhc3RVcGRhdGVkID0gMDtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudEZyYW1lc3RhbXAgPSBzeW5jLmdldEZyYW1lRGF0YSgpLnRpbWVzdGFtcDtcbiAgICAgICAgY29uc3QgdGltZURlbHRhID0gY3VycmVudEZyYW1lc3RhbXAgIT09IGxhc3RVcGRhdGVkID8gY3VycmVudEZyYW1lc3RhbXAgLSBsYXN0VXBkYXRlZCA6IDA7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGltZURlbHRhXG4gICAgICAgICAgICA/IHNtb290aEZyYW1lKHByZXZpb3VzVmFsdWUsIHYsIHRpbWVEZWx0YSwgc3RyZW5ndGgpXG4gICAgICAgICAgICA6IHByZXZpb3VzVmFsdWU7XG4gICAgICAgIGxhc3RVcGRhdGVkID0gY3VycmVudEZyYW1lc3RhbXA7XG4gICAgICAgIHByZXZpb3VzVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH07XG59O1xuXG5jb25zdCBzbmFwID0gKHBvaW50cykgPT4ge1xuICAgIGlmICh0eXBlb2YgcG9pbnRzID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gKHYpID0+IE1hdGgucm91bmQodiAvIHBvaW50cykgKiBwb2ludHM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGNvbnN0IG51bVBvaW50cyA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICAgICAgbGV0IGxhc3REaXN0YW5jZSA9IE1hdGguYWJzKHBvaW50c1swXSAtIHYpO1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IG51bVBvaW50czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLmFicyhwb2ludCAtIHYpO1xuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IGxhc3REaXN0YW5jZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50c1tpIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IG51bVBvaW50cyAtIDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb2ludDtcbiAgICAgICAgICAgICAgICBsYXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiB2ZWxvY2l0eVBlckZyYW1lKHhwcywgZnJhbWVEdXJhdGlvbikge1xuICAgIHJldHVybiB4cHMgLyAoMTAwMCAvIGZyYW1lRHVyYXRpb24pO1xufVxuXG5jb25zdCB3cmFwID0gKG1pbiwgbWF4LCB2KSA9PiB7XG4gICAgY29uc3QgcmFuZ2VTaXplID0gbWF4IC0gbWluO1xuICAgIHJldHVybiAoKCgodiAtIG1pbikgJSByYW5nZVNpemUpICsgcmFuZ2VTaXplKSAlIHJhbmdlU2l6ZSkgKyBtaW47XG59O1xuXG5jb25zdCBhID0gKGExLCBhMikgPT4gMS4wIC0gMy4wICogYTIgKyAzLjAgKiBhMTtcbmNvbnN0IGIgPSAoYTEsIGEyKSA9PiAzLjAgKiBhMiAtIDYuMCAqIGExO1xuY29uc3QgYyA9IChhMSkgPT4gMy4wICogYTE7XG5jb25zdCBjYWxjQmV6aWVyID0gKHQsIGExLCBhMikgPT4gKChhKGExLCBhMikgKiB0ICsgYihhMSwgYTIpKSAqIHQgKyBjKGExKSkgKiB0O1xuY29uc3QgZ2V0U2xvcGUgPSAodCwgYTEsIGEyKSA9PiAzLjAgKiBhKGExLCBhMikgKiB0ICogdCArIDIuMCAqIGIoYTEsIGEyKSAqIHQgKyBjKGExKTtcbmNvbnN0IHN1YmRpdmlzaW9uUHJlY2lzaW9uID0gMC4wMDAwMDAxO1xuY29uc3Qgc3ViZGl2aXNpb25NYXhJdGVyYXRpb25zID0gMTA7XG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICBsZXQgY3VycmVudFg7XG4gICAgbGV0IGN1cnJlbnRUO1xuICAgIGxldCBpID0gMDtcbiAgICBkbyB7XG4gICAgICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgICAgIGN1cnJlbnRYID0gY2FsY0JlemllcihjdXJyZW50VCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFBID0gY3VycmVudFQ7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBzdWJkaXZpc2lvblByZWNpc2lvbiAmJlxuICAgICAgICArK2kgPCBzdWJkaXZpc2lvbk1heEl0ZXJhdGlvbnMpO1xuICAgIHJldHVybiBjdXJyZW50VDtcbn1cbmNvbnN0IG5ld3Rvbkl0ZXJhdGlvbnMgPSA4O1xuY29uc3QgbmV3dG9uTWluU2xvcGUgPSAwLjAwMTtcbmZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3dG9uSXRlcmF0aW9uczsgKytpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICAgICAgaWYgKGN1cnJlbnRTbG9wZSA9PT0gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm4gYUd1ZXNzVDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgfVxuICAgIHJldHVybiBhR3Vlc3NUO1xufVxuY29uc3Qga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xuY29uc3Qga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuZnVuY3Rpb24gY3ViaWNCZXppZXIobVgxLCBtWTEsIG1YMiwgbVkyKSB7XG4gICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKVxuICAgICAgICByZXR1cm4gbGluZWFyO1xuICAgIGNvbnN0IHNhbXBsZVZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRGb3JYKGFYKSB7XG4gICAgICAgIGxldCBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgICAgICBsZXQgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgICAgIGNvbnN0IGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcbiAgICAgICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgICAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgICB9XG4gICAgICAgIC0tY3VycmVudFNhbXBsZTtcbiAgICAgICAgY29uc3QgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgL1xuICAgICAgICAgICAgKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgICAgICBjb25zdCBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgY29uc3QgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gbmV3dG9uTWluU2xvcGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICh0KSA9PiB0ID09PSAwIHx8IHQgPT09IDEgPyB0IDogY2FsY0JlemllcihnZXRURm9yWCh0KSwgbVkxLCBtWTIpO1xufVxuXG5jb25zdCBzdGVwcyA9IChzdGVwcywgZGlyZWN0aW9uID0gJ2VuZCcpID0+IChwcm9ncmVzcykgPT4ge1xuICAgIHByb2dyZXNzID1cbiAgICAgICAgZGlyZWN0aW9uID09PSAnZW5kJyA/IE1hdGgubWluKHByb2dyZXNzLCAwLjk5OSkgOiBNYXRoLm1heChwcm9ncmVzcywgMC4wMDEpO1xuICAgIGNvbnN0IGV4cGFuZGVkID0gcHJvZ3Jlc3MgKiBzdGVwcztcbiAgICBjb25zdCByb3VuZGVkID0gZGlyZWN0aW9uID09PSAnZW5kJyA/IE1hdGguZmxvb3IoZXhwYW5kZWQpIDogTWF0aC5jZWlsKGV4cGFuZGVkKTtcbiAgICByZXR1cm4gY2xhbXAoMCwgMSwgcm91bmRlZCAvIHN0ZXBzKTtcbn07XG5cbmV4cG9ydHMuYW5nbGUgPSBhbmdsZTtcbmV4cG9ydHMuYW5pbWF0ZSA9IGFuaW1hdGU7XG5leHBvcnRzLmFudGljaXBhdGUgPSBhbnRpY2lwYXRlO1xuZXhwb3J0cy5hcHBseU9mZnNldCA9IGFwcGx5T2Zmc2V0O1xuZXhwb3J0cy5hdHRyYWN0ID0gYXR0cmFjdDtcbmV4cG9ydHMuYXR0cmFjdEV4cG8gPSBhdHRyYWN0RXhwbztcbmV4cG9ydHMuYmFja0luID0gYmFja0luO1xuZXhwb3J0cy5iYWNrSW5PdXQgPSBiYWNrSW5PdXQ7XG5leHBvcnRzLmJhY2tPdXQgPSBiYWNrT3V0O1xuZXhwb3J0cy5ib3VuY2VJbiA9IGJvdW5jZUluO1xuZXhwb3J0cy5ib3VuY2VJbk91dCA9IGJvdW5jZUluT3V0O1xuZXhwb3J0cy5ib3VuY2VPdXQgPSBib3VuY2VPdXQ7XG5leHBvcnRzLmNpcmNJbiA9IGNpcmNJbjtcbmV4cG9ydHMuY2lyY0luT3V0ID0gY2lyY0luT3V0O1xuZXhwb3J0cy5jaXJjT3V0ID0gY2lyY091dDtcbmV4cG9ydHMuY2xhbXAgPSBjbGFtcDtcbmV4cG9ydHMuY3JlYXRlQW50aWNpcGF0ZSA9IGNyZWF0ZUFudGljaXBhdGU7XG5leHBvcnRzLmNyZWF0ZUF0dHJhY3RvciA9IGNyZWF0ZUF0dHJhY3RvcjtcbmV4cG9ydHMuY3JlYXRlQmFja0luID0gY3JlYXRlQmFja0luO1xuZXhwb3J0cy5jcmVhdGVFeHBvSW4gPSBjcmVhdGVFeHBvSW47XG5leHBvcnRzLmN1YmljQmV6aWVyID0gY3ViaWNCZXppZXI7XG5leHBvcnRzLmRlY2F5ID0gZGVjYXk7XG5leHBvcnRzLmRlZ3JlZXNUb1JhZGlhbnMgPSBkZWdyZWVzVG9SYWRpYW5zO1xuZXhwb3J0cy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuZXhwb3J0cy5lYXNlSW4gPSBlYXNlSW47XG5leHBvcnRzLmVhc2VJbk91dCA9IGVhc2VJbk91dDtcbmV4cG9ydHMuZWFzZU91dCA9IGVhc2VPdXQ7XG5leHBvcnRzLmluZXJ0aWEgPSBpbmVydGlhO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlO1xuZXhwb3J0cy5pc1BvaW50ID0gaXNQb2ludDtcbmV4cG9ydHMuaXNQb2ludDNEID0gaXNQb2ludDNEO1xuZXhwb3J0cy5rZXlmcmFtZXMgPSBrZXlmcmFtZXM7XG5leHBvcnRzLmxpbmVhciA9IGxpbmVhcjtcbmV4cG9ydHMubWlycm9yRWFzaW5nID0gbWlycm9yRWFzaW5nO1xuZXhwb3J0cy5taXggPSBtaXg7XG5leHBvcnRzLm1peENvbG9yID0gbWl4Q29sb3I7XG5leHBvcnRzLm1peENvbXBsZXggPSBtaXhDb21wbGV4O1xuZXhwb3J0cy5waXBlID0gcGlwZTtcbmV4cG9ydHMucG9pbnRGcm9tVmVjdG9yID0gcG9pbnRGcm9tVmVjdG9yO1xuZXhwb3J0cy5wcm9ncmVzcyA9IHByb2dyZXNzO1xuZXhwb3J0cy5yYWRpYW5zVG9EZWdyZWVzID0gcmFkaWFuc1RvRGVncmVlcztcbmV4cG9ydHMucmV2ZXJzZUVhc2luZyA9IHJldmVyc2VFYXNpbmc7XG5leHBvcnRzLnNtb290aCA9IHNtb290aDtcbmV4cG9ydHMuc21vb3RoRnJhbWUgPSBzbW9vdGhGcmFtZTtcbmV4cG9ydHMuc25hcCA9IHNuYXA7XG5leHBvcnRzLnNwcmluZyA9IHNwcmluZztcbmV4cG9ydHMuc3RlcHMgPSBzdGVwcztcbmV4cG9ydHMudG9EZWNpbWFsID0gdG9EZWNpbWFsO1xuZXhwb3J0cy52ZWxvY2l0eVBlckZyYW1lID0gdmVsb2NpdHlQZXJGcmFtZTtcbmV4cG9ydHMudmVsb2NpdHlQZXJTZWNvbmQgPSB2ZWxvY2l0eVBlclNlY29uZDtcbmV4cG9ydHMud3JhcCA9IHdyYXA7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gbmEoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG9hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8b2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB0KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB0KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHFhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocWEsXG5yYSk7eltiXT1uZXcgdChiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHFhLHJhKTt6W2JdPW5ldyB0KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHFhLHJhKTt6W2JdPW5ldyB0KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdChcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBzYShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlwYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHRhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHVhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHhhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksR2E9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSWE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEphKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1JYSYmYVtJYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLEthO2Z1bmN0aW9uIExhKGEpe2lmKHZvaWQgMD09PUthKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0thPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitLYSthfXZhciBNYT0hMTtcbmZ1bmN0aW9uIE5hKGEsYil7aWYoIWF8fE1hKXJldHVyblwiXCI7TWE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TWE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9MYShhKTpcIlwifVxuZnVuY3Rpb24gT2EoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIExhKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTGEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIExhKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTGEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU5hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU5hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU5hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUGEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB3YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB2YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgemE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgeGE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBEYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBBYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBDYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBGYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UGEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBHYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUGEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFFhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFBhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXhhP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFJhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFNhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1TYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVWEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVRhKGEpKX1mdW5jdGlvbiBWYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9U2EoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBXYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBYYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9UmEobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBaYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnNhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiAkYShhLGIpe1phKGEsYik7dmFyIGM9UmEoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsUmEoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxXYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGRiPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBlYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrUmEoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGZiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gZ2IoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGRiKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpSYShjKX19XG5mdW5jdGlvbiBoYihhLGIpe3ZhciBjPVJhKGIudmFsdWUpLGQ9UmEoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBpYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGpiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBrYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/amIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbGIsbWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bGI9bGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gbmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBvYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxwYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMob2IpLmZvckVhY2goZnVuY3Rpb24oYSl7cGIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtvYltiXT1vYlthXX0pfSk7ZnVuY3Rpb24gcWIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fG9iLmhhc093blByb3BlcnR5KGEpJiZvYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiByYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1xYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBzYj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdGIoYSxiKXtpZihiKXtpZihzYlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdWIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB2Yj1udWxsO2Z1bmN0aW9uIHdiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeGI9bnVsbCx5Yj1udWxsLHpiPW51bGw7XG5mdW5jdGlvbiBBYihhKXtpZihhPUJiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeGIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1DYihiKSx4YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYihhKXt5Yj96Yj96Yi5wdXNoKGEpOnpiPVthXTp5Yj1hfWZ1bmN0aW9uIEViKCl7aWYoeWIpe3ZhciBhPXliLGI9emI7emI9eWI9bnVsbDtBYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQWIoYlthXSl9fWZ1bmN0aW9uIEZiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2IoKXt9dmFyIEhiPSExO2Z1bmN0aW9uIEliKGEsYixjKXtpZihIYilyZXR1cm4gYShiLGMpO0hiPSEwO3RyeXtyZXR1cm4gRmIoYSxiLGMpfWZpbmFsbHl7aWYoSGI9ITEsbnVsbCE9PXlifHxudWxsIT09emIpR2IoKSxFYigpfX1cbmZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Q2IoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBLYj0hMTtpZihpYSl0cnl7dmFyIExiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShMYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7S2I9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTGIsTGIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLExiLExiKX1jYXRjaChhKXtLYj0hMX1mdW5jdGlvbiBNYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgTmI9ITEsT2I9bnVsbCxQYj0hMSxRYj1udWxsLFJiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe05iPSEwO09iPWF9fTtmdW5jdGlvbiBTYihhLGIsYyxkLGUsZixnLGgsayl7TmI9ITE7T2I9bnVsbDtNYi5hcHBseShSYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihOYil7aWYoTmIpe3ZhciBsPU9iO05iPSExO09iPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1BifHwoUGI9ITAsUWI9bCl9fWZ1bmN0aW9uIFViKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gVmIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBXYihhKXtpZihVYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBYYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1VYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBXYihlKSxhO2lmKGY9PT1kKXJldHVybiBXYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFliKGEpe2E9WGIoYSk7cmV0dXJuIG51bGwhPT1hP1piKGEpOm51bGx9ZnVuY3Rpb24gWmIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPVpiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyICRiPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYWM9YmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssYmM9YmEudW5zdGFibGVfc2hvdWxkWWllbGQsY2M9YmEudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9YmEudW5zdGFibGVfbm93LGRjPWJhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGVjPWJhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZjPWJhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGdjPWJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGhjPWJhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGljPWJhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxqYz1udWxsLGtjPW51bGw7ZnVuY3Rpb24gbGMoYSl7aWYoa2MmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7a2Mub25Db21taXRGaWJlclJvb3QoamMsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG5jPU1hdGguY2x6MzI/TWF0aC5jbHozMjptYyxvYz1NYXRoLmxvZyxwYz1NYXRoLkxOMjtmdW5jdGlvbiBtYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShvYyhhKS9wY3wwKXwwfXZhciBxYz02NCxyYz00MTk0MzA0O1xuZnVuY3Rpb24gc2MoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdGMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXNjKGgpOihmJj1nLDAhPT1mJiYoZD1zYyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9c2MoZyk6MCE9PWYmJihkPXNjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtbmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB1YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHZjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1uYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT11YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24gd2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHhjKCl7dmFyIGE9cWM7cWM8PD0xOzA9PT0ocWMmNDE5NDI0MCkmJihxYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24geWMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB6YyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtbmMoYik7YVtiXT1jfWZ1bmN0aW9uIEFjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1uYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1uYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIENjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIERjLEVjLEZjLEdjLEhjLEljPSExLEpjPVtdLEtjPW51bGwsTGM9bnVsbCxNYz1udWxsLE5jPW5ldyBNYXAsT2M9bmV3IE1hcCxQYz1bXSxRYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBSYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOktjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6TmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBTYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUJiKGIpLG51bGwhPT1iJiZFYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBLYz1TYyhLYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTGM9U2MoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE1jPVNjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7TmMuc2V0KGYsU2MoTmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLE9jLnNldChmLFNjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFVjKGEpe3ZhciBiPVZjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VWIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9VmIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SGMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0ZjKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFdjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1YYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt2Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7dmI9bnVsbH1lbHNlIHJldHVybiBiPUJiKGMpLG51bGwhPT1iJiZFYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBZYyhhLGIsYyl7V2MoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFpjKCl7SWM9ITE7bnVsbCE9PUtjJiZXYyhLYykmJihLYz1udWxsKTtudWxsIT09TGMmJldjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmV2MoTWMpJiYoTWM9bnVsbCk7TmMuZm9yRWFjaChZYyk7T2MuZm9yRWFjaChZYyl9XG5mdW5jdGlvbiAkYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSWN8fChJYz0hMCxiYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFpjKSkpfVxuZnVuY3Rpb24gYWQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gJGMoYixhKX1pZigwPEpjLmxlbmd0aCl7JGMoSmNbMF0sYSk7Zm9yKHZhciBjPTE7YzxKYy5sZW5ndGg7YysrKXt2YXIgZD1KY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUtjJiYkYyhLYyxhKTtudWxsIT09TGMmJiRjKExjLGEpO251bGwhPT1NYyYmJGMoTWMsYSk7TmMuZm9yRWFjaChiKTtPYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxQYy5sZW5ndGg7YysrKWQ9UGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFBjLmxlbmd0aCYmKGM9UGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVWMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZQYy5zaGlmdCgpfXZhciBiZD10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxjZD0hMDtcbmZ1bmN0aW9uIGRkKGEsYixjLGQpe3ZhciBlPUMsZj1iZC50cmFuc2l0aW9uO2JkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGVkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGJkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZmQoYSxiLGMsZCl7dmFyIGU9QyxmPWJkLnRyYW5zaXRpb247YmQudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZWQoYSxiLGMsZCl9ZmluYWxseXtDPWUsYmQudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGVkKGEsYixjLGQpe2lmKGNkKXt2YXIgZT1YYyhhLGIsYyxkKTtpZihudWxsPT09ZSlnZChhLGIsZCxoZCxjKSxSYyhhLGQpO2Vsc2UgaWYoVGMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoUmMoYSxkKSxiJjQmJi0xPFFjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1CYihlKTtudWxsIT09ZiYmRGMoZik7Zj1YYyhhLGIsYyxkKTtudWxsPT09ZiYmZ2QoYSxiLGQsaGQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgZ2QoYSxiLGQsbnVsbCxjKX19dmFyIGhkPW51bGw7XG5mdW5jdGlvbiBYYyhhLGIsYyxkKXtoZD1udWxsO2E9d2IoZCk7YT1WYyhhKTtpZihudWxsIT09YSlpZihiPVViKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVZiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtoZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gaWQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZGMoKSl7Y2FzZSBlYzpyZXR1cm4gMTtjYXNlIGZjOnJldHVybiA0O2Nhc2UgZ2M6Y2FzZSBoYzpyZXR1cm4gMTY7Y2FzZSBpYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIgamQ9bnVsbCxrZD1udWxsLGxkPW51bGw7ZnVuY3Rpb24gbWQoKXtpZihsZClyZXR1cm4gbGQ7dmFyIGEsYj1rZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBqZD9qZC52YWx1ZTpqZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBsZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gbmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gb2QoKXtyZXR1cm4hMH1mdW5jdGlvbiBwZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcWQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/b2Q6cGQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1vZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1vZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpvZH0pO3JldHVybiBifVxudmFyIHJkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHNkPXFkKHJkKSx0ZD1BKHt9LHJkLHt2aWV3OjAsZGV0YWlsOjB9KSx1ZD1xZCh0ZCksdmQsd2QseGQsemQ9QSh7fSx0ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp5ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT14ZCYmKHhkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh2ZD1hLnNjcmVlblgteGQuc2NyZWVuWCx3ZD1hLnNjcmVlblkteGQuc2NyZWVuWSk6d2Q9dmQ9MCx4ZD1hKTtyZXR1cm4gdmR9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp3ZH19KSxBZD1xZCh6ZCksQmQ9QSh7fSx6ZCx7ZGF0YVRyYW5zZmVyOjB9KSxDZD1xZChCZCksRGQ9QSh7fSx0ZCx7cmVsYXRlZFRhcmdldDowfSksRWQ9cWQoRGQpLEZkPUEoe30scmQse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEdkPXFkKEZkKSxIZD1BKHt9LHJkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSWQ9cWQoSGQpLEpkPUEoe30scmQse2RhdGE6MH0pLEtkPXFkKEpkKSxMZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxNZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sTmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIE9kKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9TmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB5ZCgpe3JldHVybiBPZH1cbnZhciBQZD1BKHt9LHRkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUxkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW5kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9NZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnlkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9uZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP25kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUWQ9cWQoUGQpLFJkPUEoe30semQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksU2Q9cWQoUmQpLFRkPUEoe30sdGQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp5ZH0pLFVkPXFkKFRkKSxWZD1BKHt9LHJkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFdkPXFkKFZkKSxYZD1BKHt9LHpkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWWQ9cWQoWGQpLFpkPVs5LDEzLDI3LDMyXSwkZD1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYWU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYWU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgYmU9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFhZSxjZT1pYSYmKCEkZHx8YWUmJjg8YWUmJjExPj1hZSksZGU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZWU9ITE7XG5mdW5jdGlvbiBmZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PVpkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGdlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGhlPSExO2Z1bmN0aW9uIGllKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBnZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZWU9ITA7cmV0dXJuIGRlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWRlJiZlZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBqZShhLGIpe2lmKGhlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCEkZCYmZmUoYSxiKT8oYT1tZCgpLGxkPWtkPWpkPW51bGwsaGU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGNlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBrZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBsZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWtlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBtZShhLGIsYyxkKXtEYihkKTtiPW5lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgc2QoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgb2U9bnVsbCxwZT1udWxsO2Z1bmN0aW9uIHFlKGEpe3JlKGEsMCl9ZnVuY3Rpb24gc2UoYSl7dmFyIGI9dGUoYSk7aWYoVmEoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB1ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB2ZT0hMTtpZihpYSl7dmFyIHdlO2lmKGlhKXt2YXIgeGU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheGUpe3ZhciB5ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3llLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHllLm9uaW5wdXR9d2U9eGV9ZWxzZSB3ZT0hMTt2ZT13ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiB6ZSgpe29lJiYob2UuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQWUpLHBlPW9lPW51bGwpfWZ1bmN0aW9uIEFlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZzZShwZSkpe3ZhciBiPVtdO21lKGIscGUsYSx3YihhKSk7SWIocWUsYil9fVxuZnVuY3Rpb24gQmUoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oemUoKSxvZT1iLHBlPWMsb2UuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQWUpKTpcImZvY3Vzb3V0XCI9PT1hJiZ6ZSgpfWZ1bmN0aW9uIENlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHNlKHBlKX1mdW5jdGlvbiBEZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHNlKGIpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHNlKGIpfWZ1bmN0aW9uIEZlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgR2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6RmU7XG5mdW5jdGlvbiBIZShhLGIpe2lmKEdlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhR2UoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBJZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZShhLGIpe3ZhciBjPUllKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUllKGMpfX1mdW5jdGlvbiBLZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0tlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIExlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVdhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVdhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBOZShhKXt2YXIgYj1MZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmS2UoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk1lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUplKGMsZik7dmFyIGc9SmUoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBPZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFBlPW51bGwsUWU9bnVsbCxSZT1udWxsLFNlPSExO1xuZnVuY3Rpb24gVGUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1NlfHxudWxsPT1QZXx8UGUhPT1XYShkKXx8KGQ9UGUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTWUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxSZSYmSGUoUmUsZCl8fChSZT1kLGQ9bmUoUWUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgc2QoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVBlKSkpfVxuZnVuY3Rpb24gVWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmU9e2FuaW1hdGlvbmVuZDpVZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlVlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlVlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2U9e30sWGU9e307XG5pYSYmKFhlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWUoYSl7aWYoV2VbYV0pcmV0dXJuIFdlW2FdO2lmKCFWZVthXSlyZXR1cm4gYTt2YXIgYj1WZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYZSlyZXR1cm4gV2VbYV09YltjXTtyZXR1cm4gYX12YXIgWmU9WWUoXCJhbmltYXRpb25lbmRcIiksJGU9WWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYWY9WWUoXCJhbmltYXRpb25zdGFydFwiKSxiZj1ZZShcInRyYW5zaXRpb25lbmRcIiksY2Y9bmV3IE1hcCxkZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZWYoYSxiKXtjZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBmZj0wO2ZmPGRmLmxlbmd0aDtmZisrKXt2YXIgZ2Y9ZGZbZmZdLGhmPWdmLnRvTG93ZXJDYXNlKCksamY9Z2ZbMF0udG9VcHBlckNhc2UoKStnZi5zbGljZSgxKTtlZihoZixcIm9uXCIramYpfWVmKFplLFwib25BbmltYXRpb25FbmRcIik7ZWYoJGUsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtlZihhZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZWYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtlZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZWYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2VmKGJmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBrZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGxmPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGtmKSk7XG5mdW5jdGlvbiBtZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztUYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gcmUoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTttZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO21mKGUsaCxsKTtmPWt9fX1pZihQYil0aHJvdyBhPVFiLFBiPSExLFFiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltuZl07dm9pZCAwPT09YyYmKGM9YltuZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChvZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHBmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtvZihjLGEsZCxiKX12YXIgcWY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiByZihhKXtpZighYVtxZl0pe2FbcWZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihsZi5oYXMoYil8fHBmKGIsITEsYSkscGYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltxZl18fChiW3FmXT0hMCxwZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBvZihhLGIsYyxkKXtzd2l0Y2goaWQoYikpe2Nhc2UgMTp2YXIgZT1kZDticmVhaztjYXNlIDQ6ZT1mZDticmVhaztkZWZhdWx0OmU9ZWR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUtifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGdkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9VmMoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUliKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXdiKGMpLGc9W107XG5hOnt2YXIgaD1jZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9c2QsbT1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09bmQoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UWQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjptPVwiZm9jdXNcIjtrPUVkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm09XCJibHVyXCI7az1FZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUVkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1BZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuQ2Q7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1VZDticmVhaztjYXNlIFplOmNhc2UgJGU6Y2FzZSBhZjprPUdkO2JyZWFrO2Nhc2UgYmY6az1XZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az11ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVlkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SWQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1TZH12YXIgdz0wIT09KGImNCksSj0hdyYmXCJzY3JvbGxcIj09PWEsdj13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB4PWQscjtudWxsIT09XG54Oyl7cj14O3ZhciBGPXIuc3RhdGVOb2RlOzU9PT1yLnRhZyYmbnVsbCE9PUYmJihyPUYsbnVsbCE9PXYmJihGPUpiKHgsdiksbnVsbCE9RiYmdy5wdXNoKHNmKHgsRixyKSkpKTtpZihKKWJyZWFrO3g9eC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCxtLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09dmImJihtPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihWYyhtKXx8bVt0Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihtPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG09bT9WYyhtKTpudWxsLG51bGwhPT1cbm0mJihKPVViKG0pLG0hPT1KfHw1IT09bS50YWcmJjYhPT1tLnRhZykpbT1udWxsfWVsc2Ugaz1udWxsLG09ZDtpZihrIT09bSl7dz1BZDtGPVwib25Nb3VzZUxlYXZlXCI7dj1cIm9uTW91c2VFbnRlclwiO3g9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVNkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHY9XCJvblBvaW50ZXJFbnRlclwiLHg9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dGUoayk7cj1udWxsPT1tP2g6dGUobSk7aD1uZXcgdyhGLHgrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD1yO0Y9bnVsbDtWYyhlKT09PWQmJih3PW5ldyB3KHYseCtcImVudGVyXCIsbSxjLGUpLHcudGFyZ2V0PXIsdy5yZWxhdGVkVGFyZ2V0PUosRj13KTtKPUY7aWYoayYmbSliOnt3PWs7dj1tO3g9MDtmb3Iocj13O3I7cj11ZihyKSl4Kys7cj0wO2ZvcihGPXY7RjtGPXVmKEYpKXIrKztmb3IoOzA8eC1yOyl3PXVmKHcpLHgtLTtmb3IoOzA8ci14Oyl2PVxudWYodiksci0tO2Zvcig7eC0tOyl7aWYodz09PXZ8fG51bGwhPT12JiZ3PT09di5hbHRlcm5hdGUpYnJlYWsgYjt3PXVmKHcpO3Y9dWYodil9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZ2ZihnLGgsayx3LCExKTtudWxsIT09bSYmbnVsbCE9PUomJnZmKGcsSixtLHcsITApfX19YTp7aD1kP3RlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIFo9dWU7ZWxzZSBpZihsZShoKSlpZih2ZSlaPUVlO2Vsc2V7Wj1DZTt2YXIgeWE9QmV9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihaPURlKTtpZihaJiYoWj1aKGEsZCkpKXttZShnLFosYyxlKTticmVhayBhfXlhJiZ5YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHlhPWguX3dyYXBwZXJTdGF0ZSkmJlxueWEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfXlhPWQ/dGUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKGxlKHlhKXx8XCJ0cnVlXCI9PT15YS5jb250ZW50RWRpdGFibGUpUGU9eWEsUWU9ZCxSZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlJlPVFlPVBlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlNlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpTZT0hMTtUZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKE9lKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VGUoZyxjLGUpfXZhciBhYjtpZigkZCliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgY2E9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWNhPXZvaWQgMH1lbHNlIGhlP2ZlKGEsYykmJihjYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihjYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtjYSYmKGNlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGhlfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09Y2E/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1jYSYmaGUmJihhYj1tZCgpKTooamQ9ZSxrZD1cInZhbHVlXCJpbiBqZD9qZC52YWx1ZTpqZC50ZXh0Q29udGVudCxoZT0hMCkpLHlhPW5lKGQsY2EpLDA8eWEubGVuZ3RoJiYoY2E9bmV3IEtkKGNhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6Y2EsbGlzdGVuZXJzOnlhfSksYWI/Y2EuZGF0YT1hYjooYWI9Z2UoYyksbnVsbCE9PWFiJiYoY2EuZGF0YT1hYikpKSk7aWYoYWI9YmU/aWUoYSxjKTpqZShhLGMpKWQ9bmUoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgS2QoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9YWIpfXJlKGcsYil9KX1mdW5jdGlvbiBzZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG5lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9SmIoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoc2YoYSxmLGUpKSxmPUpiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHNmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdWYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHZmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9SmIoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoc2YoYyxrLGgpKSk6ZXx8KGs9SmIoYyxmKSxudWxsIT1rJiZnLnB1c2goc2YoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgd2Y9L1xcclxcbj8vZyx4Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24geWYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh3ZixcIlxcblwiKS5yZXBsYWNlKHhmLFwiXCIpfWZ1bmN0aW9uIHpmKGEsYixjKXtiPXlmKGIpO2lmKHlmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBBZigpe31cbnZhciBCZj1udWxsLENmPW51bGw7ZnVuY3Rpb24gRGYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRWY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLElmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEdmP2Z1bmN0aW9uKGEpe3JldHVybiBHZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSGYpfTpFZjtmdW5jdGlvbiBIZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEpmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2FkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTthZChiKX1mdW5jdGlvbiBLZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTGYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE1mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE5mPVwiX19yZWFjdEZpYmVyJFwiK01mLE9mPVwiX19yZWFjdFByb3BzJFwiK01mLHRmPVwiX19yZWFjdENvbnRhaW5lciRcIitNZixuZj1cIl9fcmVhY3RFdmVudHMkXCIrTWYsUGY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK01mLFFmPVwiX19yZWFjdEhhbmRsZXMkXCIrTWY7XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1hW05mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t0Zl18fGNbTmZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TGYoYSk7bnVsbCE9PWE7KXtpZihjPWFbTmZdKXJldHVybiBjO2E9TGYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIEJiKGEpe2E9YVtOZl18fGFbdGZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB0ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBDYihhKXtyZXR1cm4gYVtPZl18fG51bGx9dmFyIFJmPVtdLFNmPS0xO2Z1bmN0aW9uIFRmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlNmfHwoYS5jdXJyZW50PVJmW1NmXSxSZltTZl09bnVsbCxTZi0tKX1mdW5jdGlvbiBHKGEsYil7U2YrKztSZltTZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBVZj17fSxIPVRmKFVmKSxWZj1UZighMSksV2Y9VWY7ZnVuY3Rpb24gWGYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBVZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFlmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gWmYoKXtFKFZmKTtFKEgpfWZ1bmN0aW9uICRmKGEsYixjKXtpZihILmN1cnJlbnQhPT1VZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFZmLGMpfWZ1bmN0aW9uIGFnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUWEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gYmcoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFVmO1dmPUguY3VycmVudDtHKEgsYSk7RyhWZixWZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBjZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWFnKGEsYixXZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoVmYpLEUoSCksRyhILGEpKTpFKFZmKTtHKFZmLGMpfXZhciBkZz1udWxsLGVnPSExLGZnPSExO2Z1bmN0aW9uIGdnKGEpe251bGw9PT1kZz9kZz1bYV06ZGcucHVzaChhKX1mdW5jdGlvbiBoZyhhKXtlZz0hMDtnZyhhKX1cbmZ1bmN0aW9uIGlnKCl7aWYoIWZnJiZudWxsIT09ZGcpe2ZnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1kZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWRnPW51bGw7ZWc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWRnJiYoZGc9ZGcuc2xpY2UoYSsxKSksJGIoZWMsaWcpLGU7fWZpbmFsbHl7Qz1iLGZnPSExfX1yZXR1cm4gbnVsbH12YXIgamc9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24ga2coYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIGxnPVRmKG51bGwpLG1nPW51bGwsbmc9bnVsbCxvZz1udWxsO2Z1bmN0aW9uIHBnKCl7b2c9bmc9bWc9bnVsbH1cbmZ1bmN0aW9uIHFnKGEpe3ZhciBiPWxnLmN1cnJlbnQ7RShsZyk7YS5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcmcoYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBzZyhhLGIpe21nPWE7b2c9bmc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih0Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB1ZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYob2chPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09bmcpe2lmKG51bGw9PT1tZyl0aHJvdyBFcnJvcihwKDMwOCkpO25nPWE7bWcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIG5nPW5nLm5leHQ9YTtyZXR1cm4gYn12YXIgdmc9bnVsbCx3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7bnVsbCE9PWMmJihjPWMuc2hhcmVkLEJnKGEpPyhhPWMuaW50ZXJsZWF2ZWQsbnVsbD09PWE/KGIubmV4dD1iLG51bGw9PT12Zz92Zz1bY106dmcucHVzaChjKSk6KGIubmV4dD1hLm5leHQsYS5uZXh0PWIpLGMuaW50ZXJsZWF2ZWQ9Yik6KGE9Yy5wZW5kaW5nLG51bGw9PT1hP2IubmV4dD1iOihiLm5leHQ9YS5uZXh0LGEubmV4dD1iKSxjLnBlbmRpbmc9YikpfWZ1bmN0aW9uIENnKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7QmMoYSxjKX19XG5mdW5jdGlvbiBEZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gRWcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO251bGwhPT1uJiYobj1uLnVwZGF0ZVF1ZXVlLGg9bi5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP24uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciB1PWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2g9Zjtkb3t2YXIgcT1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZxKT09PXEpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBtPWEsdz1oO3E9Yjt5PWM7c3dpdGNoKHcudGFnKXtjYXNlIDE6bT13LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG0pe3U9bS5jYWxsKHksdSxxKTticmVhayBhfXU9bTticmVhayBhO2Nhc2UgMzptLmZsYWdzPW0uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bT13LnBheWxvYWQ7cT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbT9tLmNhbGwoeSx1LHEpOm07aWYobnVsbD09PXF8fHZvaWQgMD09PXEpYnJlYWsgYTt1PUEoe30sdSxxKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxxPWUuZWZmZWN0cyxudWxsPT09cT9lLmVmZmVjdHM9W2hdOnEucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnEsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXksaz11KTpuPW4ubmV4dD15LGd8PXE7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBxPWgsaD1xLm5leHQscS5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1xLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9dSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7Rmd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT11fX1cbmZ1bmN0aW9uIEdnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEhnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIElnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBNZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9VYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1KZygpLGU9S2coYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO2I9TGcoYSxlLGQpO251bGwhPT1iJiZDZyhiLGEsZSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SmcoKSxlPUtnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO2I9TGcoYSxlLGQpO251bGwhPT1iJiZDZyhiLGEsZSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SmcoKSxkPUtnKGEpLGU9emcoYyxcbmQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO0FnKGEsZSk7Yj1MZyhhLGQsYyk7bnVsbCE9PWImJkNnKGIsYSxkKX19O2Z1bmN0aW9uIE5nKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUhlKGMsZCl8fCFIZShlLGYpOiEwfVxuZnVuY3Rpb24gT2coYSxiLGMpe3ZhciBkPSExLGU9VWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dWcoZik6KGU9WWYoYik/V2Y6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WGYoYSxlKTpVZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPU1nO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gUGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJk1nLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gUWcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1IZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXVnKGYpOihmPVlmKGIpP1dmOkguY3VycmVudCxlLmNvbnRleHQ9WGYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKElnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJk1nLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLEVnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfXZhciBSZz1bXSxTZz0wLFRnPW51bGwsVWc9MCxWZz1bXSxXZz0wLFhnPW51bGwsWWc9MSxaZz1cIlwiO2Z1bmN0aW9uICRnKGEsYil7UmdbU2crK109VWc7UmdbU2crK109VGc7VGc9YTtVZz1ifVxuZnVuY3Rpb24gYWgoYSxiLGMpe1ZnW1dnKytdPVlnO1ZnW1dnKytdPVpnO1ZnW1dnKytdPVhnO1hnPWE7dmFyIGQ9WWc7YT1aZzt2YXIgZT0zMi1uYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1uYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO1lnPTE8PDMyLW5jKGIpK2V8Yzw8ZXxkO1pnPWYrYX1lbHNlIFlnPTE8PGZ8Yzw8ZXxkLFpnPWF9ZnVuY3Rpb24gYmgoYSl7bnVsbCE9PWEucmV0dXJuJiYoJGcoYSwxKSxhaChhLDEsMCkpfWZ1bmN0aW9uIGNoKGEpe2Zvcig7YT09PVRnOylUZz1SZ1stLVNnXSxSZ1tTZ109bnVsbCxVZz1SZ1stLVNnXSxSZ1tTZ109bnVsbDtmb3IoO2E9PT1YZzspWGc9VmdbLS1XZ10sVmdbV2ddPW51bGwsWmc9VmdbLS1XZ10sVmdbV2ddPW51bGwsWWc9VmdbLS1XZ10sVmdbV2ddPW51bGx9dmFyIGRoPW51bGwsZWg9bnVsbCxJPSExLGZoPW51bGw7XG5mdW5jdGlvbiBnaChhLGIpe3ZhciBjPWhoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gaWgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsZGg9YSxlaD1LZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsZGg9YSxlaD1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09WGc/e2lkOllnLG92ZXJmbG93OlpnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9aGgoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMsZGg9YSxlaD1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGpoKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24ga2goYSl7aWYoSSl7dmFyIGI9ZWg7aWYoYil7dmFyIGM9YjtpZighaWgoYSxiKSl7aWYoamgoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUtmKGMubmV4dFNpYmxpbmcpO3ZhciBkPWRoO2ImJmloKGEsYik/Z2goZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSxkaD1hKX19ZWxzZXtpZihqaChhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7ZGg9YX19fWZ1bmN0aW9uIGxoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtkaD1hfVxuZnVuY3Rpb24gbWgoYSl7aWYoYSE9PWRoKXJldHVybiExO2lmKCFJKXJldHVybiBsaChhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIURmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj1laCkpe2lmKGpoKGEpKXtmb3IoYT1laDthOylhPUtmKGEubmV4dFNpYmxpbmcpO3Rocm93IEVycm9yKHAoNDE4KSk7fWZvcig7YjspZ2goYSxiKSxiPUtmKGIubmV4dFNpYmxpbmcpfWxoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7ZWg9S2YoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXG5cIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWVoPW51bGx9fWVsc2UgZWg9ZGg/S2YoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gbmgoKXtlaD1kaD1udWxsO0k9ITF9ZnVuY3Rpb24gb2goYSl7bnVsbD09PWZoP2ZoPVthXTpmaC5wdXNoKGEpfVxuZnVuY3Rpb24gcGgoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1IZyYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gcWgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gcmgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHNoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXRoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9dWgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXdhKXJldHVybiBuKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1HYSYmcmgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1waChhLGIsYyksZC5yZXR1cm49YSxkO2Q9dmgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9cGgoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj13aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dWgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdWE6cmV0dXJuIGM9dmgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1waChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdmE6cmV0dXJuIGI9d2goYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgR2E6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gdShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZGIoYil8fEphKGIpKXJldHVybiBiPXhoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3FoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdWE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEdhOnJldHVybiBlPWMuX2luaXQscShhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGRiKGMpfHxKYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7cWgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgR2E6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGRiKGQpfHxKYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7cWgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG0oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbj1udWxsLHI9ZyxtPWc9MCx4PW51bGw7bnVsbCE9PXImJm08aC5sZW5ndGg7bSsrKXtyLmluZGV4Pm0/KHg9cixyPW51bGwpOng9ci5zaWJsaW5nO3ZhciB2PXEoZSxyLGhbbV0sayk7aWYobnVsbD09PXYpe251bGw9PT1yJiYocj14KTticmVha31hJiZyJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxyKTtnPWYodixnLG0pO251bGw9PT1uP2w9djpuLnNpYmxpbmc9djtuPXY7cj14fWlmKG09PT1oLmxlbmd0aClyZXR1cm4gYyhlLHIpLEkmJiRnKGUsbSksbDtpZihudWxsPT09cil7Zm9yKDttPGgubGVuZ3RoO20rKylyPXUoZSxoW21dLGspLG51bGwhPT1yJiYoZz1mKHIsZyxtKSxudWxsPT09bj9sPXI6bi5zaWJsaW5nPXIsbj1yKTtJJiYkZyhlLG0pO3JldHVybiBsfWZvcihyPWQoZSxyKTttPGgubGVuZ3RoO20rKyl4PXkocixlLG0saFttXSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PVxueC5rZXk/bTp4LmtleSksZz1mKHgsZyxtKSxudWxsPT09bj9sPXg6bi5zaWJsaW5nPXgsbj14KTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJiRnKGUsbSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1KYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIG49bD1udWxsLG09ZyxyPWc9MCx4PW51bGwsdj1oLm5leHQoKTtudWxsIT09bSYmIXYuZG9uZTtyKyssdj1oLm5leHQoKSl7bS5pbmRleD5yPyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdz1xKGUsbSx2LnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHcsZyxyKTtudWxsPT09bj9sPXc6bi5zaWJsaW5nPXc7bj13O209eH1pZih2LmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJiRnKGUsciksbDtpZihudWxsPT09bSl7Zm9yKDshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9dShlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHIpLG51bGw9PT1uP2w9djpuLnNpYmxpbmc9dixuPXYpO0kmJiRnKGUscik7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyF2LmRvbmU7cisrLHY9aC5uZXh0KCkpdj15KG0sZSxyLHYudmFsdWUsayksbnVsbCE9PXYmJihhJiZudWxsIT09di5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT12LmtleT9yOnYua2V5KSxnPWYodixnLHIpLG51bGw9PT1uP2w9djpuLnNpYmxpbmc9dixuPXYpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmJGcoZSxyKTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXdhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHVhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXdhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYSYmcmgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXBoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT13YT8oZD14aChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9dmgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9cGgoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHZhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9d2goZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBHYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZGIoZikpcmV0dXJuIG0oYSxkLGYsaCk7aWYoSmEoZikpcmV0dXJuIHcoYSxkLGYsaCk7cWgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD11aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciB5aD1zaCghMCksemg9c2goITEpLEFoPXt9LEJoPVRmKEFoKSxDaD1UZihBaCksRGg9VGYoQWgpO2Z1bmN0aW9uIEVoKGEpe2lmKGE9PT1BaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEZoKGEsYil7RyhEaCxiKTtHKENoLGEpO0coQmgsQWgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6a2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWtiKGIsYSl9RShCaCk7RyhCaCxiKX1mdW5jdGlvbiBHaCgpe0UoQmgpO0UoQ2gpO0UoRGgpfVxuZnVuY3Rpb24gSGgoYSl7RWgoRGguY3VycmVudCk7dmFyIGI9RWgoQmguY3VycmVudCk7dmFyIGM9a2IoYixhLnR5cGUpO2IhPT1jJiYoRyhDaCxhKSxHKEJoLGMpKX1mdW5jdGlvbiBJaChhKXtDaC5jdXJyZW50PT09YSYmKEUoQmgpLEUoQ2gpKX12YXIgSz1UZigwKTtcbmZ1bmN0aW9uIEpoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBLaD1bXTtcbmZ1bmN0aW9uIExoKCl7Zm9yKHZhciBhPTA7YTxLaC5sZW5ndGg7YSsrKUtoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7S2gubGVuZ3RoPTB9dmFyIE1oPXRhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsTmg9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsT2g9MCxMPW51bGwsTT1udWxsLE49bnVsbCxQaD0hMSxRaD0hMSxSaD0wLFNoPTA7ZnVuY3Rpb24gTygpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFRoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUdlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBVaChhLGIsYyxkLGUsZil7T2g9ZjtMPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtNaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1ZoOldoO2E9YyhkLGUpO2lmKFFoKXtmPTA7ZG97UWg9ITE7Umg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Tj1NPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO01oLmN1cnJlbnQ9WGg7YT1jKGQsZSl9d2hpbGUoUWgpfU1oLmN1cnJlbnQ9WWg7Yj1udWxsIT09TSYmbnVsbCE9PU0ubmV4dDtPaD0wO049TT1MPW51bGw7UGg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFpoKCl7dmFyIGE9MCE9PVJoO1JoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiAkaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1OP0wubWVtb2l6ZWRTdGF0ZT1OPWE6Tj1OLm5leHQ9YTtyZXR1cm4gTn1mdW5jdGlvbiBhaSgpe2lmKG51bGw9PT1NKXt2YXIgYT1MLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1NLm5leHQ7dmFyIGI9bnVsbD09PU4/TC5tZW1vaXplZFN0YXRlOk4ubmV4dDtpZihudWxsIT09YilOPWIsTT1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtNPWE7YT17bWVtb2l6ZWRTdGF0ZTpNLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk0uYmFzZVN0YXRlLGJhc2VRdWV1ZTpNLmJhc2VRdWV1ZSxxdWV1ZTpNLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PU4/TC5tZW1vaXplZFN0YXRlPU49YTpOPU4ubmV4dD1hfXJldHVybiBOfVxuZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBjaShhKXt2YXIgYj1haSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU0sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbj1sLmxhbmU7aWYoKE9oJm4pPT09biludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHU9e2xhbmU6bixhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9dSxnPWQpOms9ay5uZXh0PXU7TC5sYW5lc3w9bjtGZ3w9bn1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtHZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh0Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxMLmxhbmVzfD1mLEZnfD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZGkoYSl7dmFyIGI9YWkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0dlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHRnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gZWkoKXt9XG5mdW5jdGlvbiBmaShhLGIpe3ZhciBjPUwsZD1haSgpLGU9YigpLGY9IUdlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsdGc9ITApO2Q9ZC5xdWV1ZTtnaShoaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1OJiZOLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7aWkoOSxqaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1QKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShPaCYzMCl8fGtpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBraShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPUwudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTC51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBqaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2xpKGIpJiZMZyhhLDEsLTEpfWZ1bmN0aW9uIGhpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe2xpKGIpJiZMZyhhLDEsLTEpfSl9ZnVuY3Rpb24gbGkoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hR2UoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gbWkoYSl7dmFyIGI9JGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpiaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPW5pLmJpbmQobnVsbCxMLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBpaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1MLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LEwudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2koKXtyZXR1cm4gYWkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHBpKGEsYixjLGQpe3ZhciBlPSRoKCk7TC5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9aWkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQpe3ZhciBlPWFpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU0pe3ZhciBnPU0ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmVGgoZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9aWkoYixjLGYsZCk7cmV0dXJufX1MLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1paSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHJpKGEsYil7cmV0dXJuIHBpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGdpKGEsYil7cmV0dXJuIHFpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHNpKGEsYil7cmV0dXJuIHFpKDQsMixhLGIpfWZ1bmN0aW9uIHRpKGEsYil7cmV0dXJuIHFpKDQsNCxhLGIpfVxuZnVuY3Rpb24gdWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB2aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHFpKDQsNCx1aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiB3aSgpe31mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWFpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZUaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHlpKGEsYil7dmFyIGM9YWkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJlRoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIHppKGEsYixjKXtpZigwPT09KE9oJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSx0Zz0hMCksYS5tZW1vaXplZFN0YXRlPWM7R2UoYyxiKXx8KGM9eGMoKSxMLmxhbmVzfD1jLEZnfD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBBaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1OaC50cmFuc2l0aW9uO05oLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxOaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEJpKCl7cmV0dXJuIGFpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIENpKGEsYixjKXt2YXIgZD1LZyhhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtEaShhKT9FaShiLGMpOihGaShhLGIsYyksYz1KZygpLGE9TGcoYSxkLGMpLG51bGwhPT1hJiZHaShhLGIsZCkpfVxuZnVuY3Rpb24gbmkoYSxiLGMpe3ZhciBkPUtnKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKERpKGEpKUVpKGIsZSk7ZWxzZXtGaShhLGIsZSk7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihHZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9Yz1KZygpO2E9TGcoYSxkLGMpO251bGwhPT1hJiZHaShhLGIsZCl9fWZ1bmN0aW9uIERpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09THx8bnVsbCE9PWImJmI9PT1MfVxuZnVuY3Rpb24gRWkoYSxiKXtRaD1QaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEZpKGEsYixjKXtCZyhhKT8oYT1iLmludGVybGVhdmVkLG51bGw9PT1hPyhjLm5leHQ9YyxudWxsPT09dmc/dmc9W2JdOnZnLnB1c2goYikpOihjLm5leHQ9YS5uZXh0LGEubmV4dD1jKSxiLmludGVybGVhdmVkPWMpOihhPWIucGVuZGluZyxudWxsPT09YT9jLm5leHQ9YzooYy5uZXh0PWEubmV4dCxhLm5leHQ9YyksYi5wZW5kaW5nPWMpfWZ1bmN0aW9uIEdpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7QmMoYSxjKX19XG52YXIgWWg9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOk8sdXNlQ29udGV4dDpPLHVzZUVmZmVjdDpPLHVzZUltcGVyYXRpdmVIYW5kbGU6Tyx1c2VJbnNlcnRpb25FZmZlY3Q6Tyx1c2VMYXlvdXRFZmZlY3Q6Tyx1c2VNZW1vOk8sdXNlUmVkdWNlcjpPLHVzZVJlZjpPLHVzZVN0YXRlOk8sdXNlRGVidWdWYWx1ZTpPLHVzZURlZmVycmVkVmFsdWU6Tyx1c2VUcmFuc2l0aW9uOk8sdXNlTXV0YWJsZVNvdXJjZTpPLHVzZVN5bmNFeHRlcm5hbFN0b3JlOk8sdXNlSWQ6Tyx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFZoPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpeyRoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dWcsdXNlRWZmZWN0OnJpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBwaSg0MTk0MzA4LFxuNCx1aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHBpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz0kaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD0kaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUNpLmJpbmQobnVsbCxMLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbiRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOm1pLHVzZURlYnVnVmFsdWU6d2ksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gJGgoKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1taSghMSksYj1hWzBdO2E9QWkuYmluZChudWxsLGFbMV0pOyRoKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TCxlPSRoKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVApdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KE9oJjMwKXx8a2koZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9ZjtyaShoaS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2lpKDksamkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT0kaCgpLGI9UC5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPVpnO3ZhciBkPVlnO2M9KGQmfigxPDwzMi1uYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1SaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9U2grKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFdoPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazp4aSx1c2VDb250ZXh0OnVnLHVzZUVmZmVjdDpnaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnZpLHVzZUluc2VydGlvbkVmZmVjdDpzaSx1c2VMYXlvdXRFZmZlY3Q6dGksdXNlTWVtbzp5aSx1c2VSZWR1Y2VyOmNpLHVzZVJlZjpvaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBjaShiaSl9LFxudXNlRGVidWdWYWx1ZTp3aSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWFpKCk7cmV0dXJuIHppKGIsTS5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Y2koYmkpWzBdLGI9YWkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmVpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZpLHVzZUlkOkJpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWGg9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOnhpLHVzZUNvbnRleHQ6dWcsdXNlRWZmZWN0OmdpLHVzZUltcGVyYXRpdmVIYW5kbGU6dmksdXNlSW5zZXJ0aW9uRWZmZWN0OnNpLHVzZUxheW91dEVmZmVjdDp0aSx1c2VNZW1vOnlpLHVzZVJlZHVjZXI6ZGksdXNlUmVmOm9pLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGRpKGJpKX0sdXNlRGVidWdWYWx1ZTp3aSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWFpKCk7cmV0dXJuIG51bGw9PT1cbk0/Yi5tZW1vaXplZFN0YXRlPWE6emkoYixNLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1kaShiaSlbMF0sYj1haSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZWksdXNlU3luY0V4dGVybmFsU3RvcmU6ZmksdXNlSWQ6QmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBIaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1PYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gSWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19XG52YXIgSmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gS2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGl8fChMaT0hMCxNaT1kKTtJaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIE5pKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0lpKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtJaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PU9pP09pPW5ldyBTZXQoW3RoaXNdKTpPaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gUGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBKaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVFpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFJpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9emcoLTEsMSksYi50YWc9MixBZyhjLGIpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFRpLFVpLFZpLFdpO1xuVGk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O1VpPWZ1bmN0aW9uKCl7fTtcblZpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtFaChCaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVhhKGEsZSk7ZD1YYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWZiKGEsZSk7ZD1mYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUFmKX10YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07V2k9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBYaShhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBRKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gWWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO2NoKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFEoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFlmKGIudHlwZSkmJlpmKCksUShiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0doKCk7RShWZik7RShIKTtMaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCltaChiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PWZoJiYoWmkoZmgpLGZoPW51bGwpKTtVaShhLGIpO1EoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkloKGIpO3ZhciBlPUVoKERoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKVZpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtRKGIpO3JldHVybiBudWxsfWE9RWgoQmguY3VycmVudCk7aWYobWgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTmZdPWI7ZFtPZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8a2YubGVuZ3RoO2UrKylEKGtmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WWEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dGIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJnpmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJnpmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpVYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlVhKGQpO2liKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUFmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9amIoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtOZl09YjthW09mXT1kO1RpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXViKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGtmLmxlbmd0aDtlKyspRChrZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpZYShhLGQpO2U9WGEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnYihhLGQpO2U9ZmIoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXRiKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3JiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZtYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm5iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZuYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZzYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlVhKGEpO2NiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VWEoYSk7aWIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1JhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZWIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmViKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1BZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UShiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpV2koYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1FaChEaC5jdXJyZW50KTtFaChCaC5jdXJyZW50KTtpZihtaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW05mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG5kaCxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzp6ZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZ6ZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtOZl09YixiLnN0YXRlTm9kZT1kfVEoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKEspO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKEkmJm51bGwhPT1laCYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKXtmb3IoZD1laDtkOylkPUtmKGQubmV4dFNpYmxpbmcpO25oKCk7Yi5mbGFnc3w9OTg1NjA7cmV0dXJuIGJ9aWYobnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2Q9bWgoYik7aWYobnVsbD09PWEpe2lmKCFkKXRocm93IEVycm9yKHAoMzE4KSk7ZD1cbmIubWVtb2l6ZWRTdGF0ZTtkPW51bGwhPT1kP2QuZGVoeWRyYXRlZDpudWxsO2lmKCFkKXRocm93IEVycm9yKHAoMzE3KSk7ZFtOZl09Yn1lbHNlIG5oKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtRKGIpO3JldHVybiBudWxsfW51bGwhPT1maCYmKFppKGZoKSxmaD1udWxsKTtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP21oKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtkIT09YyYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShLLmN1cnJlbnQmMSk/MD09PVImJihSPTMpOiRpKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1EoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBHaCgpLFVpKGEsYiksbnVsbD09PWEmJnJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFEoYiksXG5udWxsO2Nhc2UgMTA6cmV0dXJuIHFnKGIudHlwZS5fY29udGV4dCksUShiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFlmKGIudHlwZSkmJlpmKCksUShiKSxudWxsO2Nhc2UgMTk6RShLKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUShiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKVhpKGYsITEpO2Vsc2V7aWYoMCE9PVJ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1KaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O1hpKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPVxubnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhLLEsuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5haiYmKGIuZmxhZ3N8PVxuMTI4LGQ9ITAsWGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9SmgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxYaShmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUShiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+YWomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsWGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPWIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1cbkIoKSxiLnNpYmxpbmc9bnVsbCxjPUsuY3VycmVudCxHKEssZD9jJjF8MjpjJjEpLGI7UShiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGJqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oY2omMTA3Mzc0MTgyNCkmJihRKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UShiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO312YXIgZGo9dGEuUmVhY3RDdXJyZW50T3duZXIsdGc9ITE7ZnVuY3Rpb24gZWooYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT96aChiLG51bGwsYyxkKTp5aChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIGZqKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtzZyhiLGUpO2Q9VWgoYSxiLGMsZCxmLGUpO2M9WmgoKTtpZihudWxsIT09YSYmIXRnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsZ2ooYSxiLGUpO0kmJmMmJmJoKGIpO2IuZmxhZ3N8PTE7ZWooYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFpaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixqaihhLGIsZixkLGUpO2E9dmgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpIZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIGdqKGEsYixlKX1iLmZsYWdzfD0xO2E9dGgoZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSGUoZixkKSYmYS5yZWY9PT1iLnJlZilpZih0Zz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYodGc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxnaihhLGIsZSl9cmV0dXJuIGtqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBsaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcobWosY2opLGNqfD1jO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjLEcobWosY2opLGNqfD1kO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhtaixjaiksY2p8PWEsbnVsbDtcbmVsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcobWosY2opLGNqfD1kO2VqKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIG5qKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGtqKGEsYixjLGQsZSl7dmFyIGY9WWYoYyk/V2Y6SC5jdXJyZW50O2Y9WGYoYixmKTtzZyhiLGUpO2M9VWgoYSxiLGMsZCxmLGUpO2Q9WmgoKTtpZihudWxsIT09YSYmIXRnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsZ2ooYSxiLGUpO0kmJmQmJmJoKGIpO2IuZmxhZ3N8PTE7ZWooYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaihhLGIsYyxkLGUpe2lmKFlmKGMpKXt2YXIgZj0hMDtiZyhiKX1lbHNlIGY9ITE7c2coYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksT2coYixjLGQpLFFnKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXVnKGwpOihsPVlmKGMpP1dmOkguY3VycmVudCxsPVhmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHU9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3V8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZQZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcT1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1xO0VnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxxIT09a3x8VmYuY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoSWcoYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxOZyhiLGMsaCxkLHEsayxsKSk/KHV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmtnKGIudHlwZSxoKTtnLnByb3BzPWw7dT1iLnBlbmRpbmdQcm9wcztxPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXVnKGspOihrPVlmKGMpP1dmOkguY3VycmVudCxrPVhmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09dXx8cSE9PWspJiZQZyhiLGcsZCxrKTt3Zz0hMTtxPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXE7RWcoYixkLGcsZSk7dmFyIG09Yi5tZW1vaXplZFN0YXRlO2ghPT11fHxxIT09bXx8VmYuY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoSWcoYixjLHksZCksbT1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxOZyhiLGMsbCxkLHEsbSxrKXx8ITEpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbSxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG0saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1tKSxnLnByb3BzPWQsZy5zdGF0ZT1tLGcuY29udGV4dD1cbmssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4gcGooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcGooYSxiLGMsZCxlLGYpe25qKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZjZyhiLGMsITEpLGdqKGEsYixmKTtkPWIuc3RhdGVOb2RlO2RqLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9eWgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD15aChiLG51bGwsaCxmKSk6ZWooYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmY2coYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBxaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0PyRmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJiRmKGEsYi5jb250ZXh0LCExKTtGaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiByaihhLGIsYyxkLGUpe25oKCk7b2goZSk7Yi5mbGFnc3w9MjU2O2VqKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBzaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIHRqKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1mdW5jdGlvbiB1aihhLGIpe3JldHVybntiYXNlTGFuZXM6YS5iYXNlTGFuZXN8YixjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczphLnRyYW5zaXRpb25zfX1cbmZ1bmN0aW9uIHZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPUsuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhLLGUmMSk7aWYobnVsbD09PWEpe2toKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtlPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZT17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmV9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZSk6Zj13aihlLGQsMCxudWxsKSxhPXhoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPXRqKGMpLGIubWVtb2l6ZWRTdGF0ZT1zaixhKTp4aihiLGUpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtoPWUuZGVoeWRyYXRlZDtpZihudWxsIT09aCl7aWYoZyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcseWooYSxiLGMsRXJyb3IocCg0MjIpKSk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXdqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPXhoKGYsZSxjLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmeWgoYixhLmNoaWxkLFxubnVsbCxjKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9dGooYyk7Yi5tZW1vaXplZFN0YXRlPXNqO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKWI9eWooYSxiLGMsbnVsbCk7ZWxzZSBpZihcIiQhXCI9PT1oLmRhdGEpYj15aihhLGIsYyxFcnJvcihwKDQxOSkpKTtlbHNlIGlmKGQ9MCE9PShjJmEuY2hpbGRMYW5lcyksdGd8fGQpe2Q9UDtpZihudWxsIT09ZCl7c3dpdGNoKGMmLWMpe2Nhc2UgNDpmPTI7YnJlYWs7Y2FzZSAxNjpmPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmY9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Zj1cbjI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmY9MH1kPTAhPT0oZiYoZC5zdXNwZW5kZWRMYW5lc3xjKSk/MDpmOzAhPT1kJiZkIT09ZS5yZXRyeUxhbmUmJihlLnJldHJ5TGFuZT1kLExnKGEsZCwtMSkpfSRpKCk7Yj15aihhLGIsYyxFcnJvcihwKDQyMSkpKX1lbHNlXCIkP1wiPT09aC5kYXRhPyhiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9emouYmluZChudWxsLGEpLGguX3JlYWN0UmV0cnk9YixiPW51bGwpOihjPWUudHJlZUNvbnRleHQsZWg9S2YoaC5uZXh0U2libGluZyksZGg9YixJPSEwLGZoPW51bGwsbnVsbCE9PWMmJihWZ1tXZysrXT1ZZyxWZ1tXZysrXT1aZyxWZ1tXZysrXT1YZyxZZz1jLmlkLFpnPWMub3ZlcmZsb3csWGc9YiksYj14aihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKSxiLmZsYWdzfD00MDk2KTtyZXR1cm4gYn1pZihmKXJldHVybiBkPUFqKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLFxuZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3RqKGMpOnVqKGUsYyksZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2osZDtjPUJqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9QWooYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3RqKGMpOnVqKGUsYyksZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2osZDtjPUJqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHhqKGEsYil7Yj13aih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9XG5mdW5jdGlvbiBCaihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9dGgoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMSkmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihkPWIuZGVsZXRpb25zLG51bGw9PT1kPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmQucHVzaChhKSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIEFqKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlO2E9YS5jaGlsZDt2YXIgZz1hLnNpYmxpbmcsaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYxKSYmYi5jaGlsZCE9PWE/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGIuZGVsZXRpb25zPW51bGwpOihjPXRoKGEsaCksYy5zdWJ0cmVlRmxhZ3M9YS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1nP2Q9dGgoZyxkKTooZD14aChkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlqKGEsYixjLGQpe251bGwhPT1kJiZvaChkKTt5aChiLGEuY2hpbGQsbnVsbCxjKTthPXhqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBDaihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO3JnKGEucmV0dXJuLGIsYyl9ZnVuY3Rpb24gRGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIEVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZWooYSxiLGQuY2hpbGRyZW4sYyk7ZD1LLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmQ2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZylDaihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoSyxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09SmgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtEaihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PUpoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1EaihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpEaihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBnaihhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7Rmd8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXRoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz10aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gRmooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnFqKGIpO25oKCk7YnJlYWs7Y2FzZSA1OkhoKGIpO2JyZWFrO2Nhc2UgMTpZZihiLnR5cGUpJiZiZyhiKTticmVhaztjYXNlIDQ6RmgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKGxnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhLLEsuY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdmooYSxiLGMpO0coSyxLLmN1cnJlbnQmMSk7YT1naihhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoSyxLLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIEVqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKEssSy5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsbGooYSxiLGMpfXJldHVybiBnaihhLGIsYyl9XG5mdW5jdGlvbiBHaihhLGIpe2NoKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBZZihiLnR5cGUpJiZaZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gR2goKSxFKFZmKSxFKEgpLExoKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gSWgoYiksbnVsbDtjYXNlIDEzOkUoSyk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO25oKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoSyksbnVsbDtjYXNlIDQ6cmV0dXJuIEdoKCksbnVsbDtjYXNlIDEwOnJldHVybiBxZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBIaj0hMSxTPSExLElqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFQ9bnVsbDtmdW5jdGlvbiBKaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1UoYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gS2ooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VShhLGIsZCl9fXZhciBMaj0hMTtcbmZ1bmN0aW9uIE1qKGEsYil7QmY9Y2Q7YT1MZSgpO2lmKE1lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKFope2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxuPTAsdT1hLHE9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3UhPT1jfHwwIT09ZSYmMyE9PXUubm9kZVR5cGV8fChoPWcrZSk7dSE9PWZ8fDAhPT1kJiYzIT09dS5ub2RlVHlwZXx8KGs9ZytkKTszPT09dS5ub2RlVHlwZSYmKGcrPVxudS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9dS5maXJzdENoaWxkKSlicmVhaztxPXU7dT15fWZvcig7Oyl7aWYodT09PWEpYnJlYWsgYjtxPT09YyYmKytsPT09ZSYmKGg9Zyk7cT09PWYmJisrbj09PWQmJihrPWcpO2lmKG51bGwhPT0oeT11Lm5leHRTaWJsaW5nKSlicmVhazt1PXE7cT11LnBhcmVudE5vZGV9dT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7Q2Y9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307Y2Q9ITE7Zm9yKFQ9YjtudWxsIT09VDspaWYoYj1ULGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFQ9YTtlbHNlIGZvcig7bnVsbCE9PVQ7KXtiPVQ7dHJ5e3ZhciBtPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW0pe3ZhciB3PW0ubWVtb2l6ZWRQcm9wcyxKPW0ubWVtb2l6ZWRTdGF0ZSx2PWIuc3RhdGVOb2RlLHg9di5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3c6a2coYi50eXBlLHcpLEopO3YuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9eH1icmVhaztjYXNlIDM6dmFyIHI9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZigxPT09ci5ub2RlVHlwZSlyLnRleHRDb250ZW50PVwiXCI7ZWxzZSBpZig5PT09ci5ub2RlVHlwZSl7dmFyIEY9ci5ib2R5O251bGwhPUYmJihGLnRleHRDb250ZW50PVwiXCIpfWJyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goWil7VShiLGIucmV0dXJuLFopfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtUPWE7YnJlYWt9VD1iLnJldHVybn1tPUxqO0xqPSExO3JldHVybiBtfVxuZnVuY3Rpb24gTmooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmS2ooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gT2ooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFBqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBRaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsUWooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltOZl0sZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW25mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbUWZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBSaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFNqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFJqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBUaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QWYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoVGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylUaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBVaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFVqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspVWooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBWPW51bGwsVmo9ITE7ZnVuY3Rpb24gV2ooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KVhqKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXtpZihrYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGtjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtrYy5vbkNvbW1pdEZpYmVyVW5tb3VudChqYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6U3x8SmooYyxiKTtjYXNlIDY6dmFyIGQ9VixlPVZqO1Y9bnVsbDtXaihhLGIsYyk7Vj1kO1ZqPWU7bnVsbCE9PVYmJihWaj8oYT1WLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlYucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1WJiYoVmo/KGE9VixjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0pmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmSmYoYSxjKSxhZChhKSk6SmYoVixjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVY7ZT1WajtWPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Vmo9ITA7XG5XaihhLGIsYyk7Vj1kO1ZqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFTJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9LaihjLGIsZyk6MCE9PShmJjQpJiZLaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1XaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFTJiYoSmooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1UoYyxiLGgpfVdqKGEsYixjKTticmVhaztjYXNlIDIxOldqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhTPShkPVMpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsV2ooYSxiLGMpLFM9ZCk6V2ooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6V2ooYSxiLGMpfX1mdW5jdGlvbiBZaihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBJaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVpqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gYWsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1OlY9aC5zdGF0ZU5vZGU7Vmo9ITE7YnJlYWsgYTtjYXNlIDM6Vj1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1ZqPSEwO2JyZWFrIGE7Y2FzZSA0OlY9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztWaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVYpdGhyb3cgRXJyb3IocCgxNjApKTtYaihmLGcsZSk7Vj1udWxsO1ZqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtVKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspYmsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmFrKGIsYSk7Y2soYSk7aWYoZCY0KXt0cnl7TmooMyxhLGEucmV0dXJuKSxPaigzLGEpfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX10cnl7TmooNSxhLGEucmV0dXJuKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgMTphayhiLGEpO2NrKGEpO2QmNTEyJiZudWxsIT09YyYmSmooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmFrKGIsYSk7Y2soYSk7ZCY1MTImJm51bGwhPT1jJiZKaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7bmIoZSxcIlwiKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJlphKGUsZik7dWIoaCxnKTt2YXIgbD11YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbj1rW2ddLHU9a1tnKzFdO1wic3R5bGVcIj09PW4/cmIoZSx1KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1uP21iKGUsdSk6XCJjaGlsZHJlblwiPT09bj9uYihlLHUpOnNhKGUsbix1LGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjokYShlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciBxPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9lYihlLCEhZi5tdWx0aXBsZSx5LCExKTpxIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZWIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZWIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtPZl09Zn1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgNjphayhiLGEpO2NrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7bD1hLnN0YXRlTm9kZTtuPWEubWVtb2l6ZWRQcm9wczt0cnl7bC5ub2RlVmFsdWU9bn1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgMzphayhiLGEpO2NrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2FkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfWJyZWFrO2Nhc2UgNDphayhiLGEpO2NrKGEpO2JyZWFrO2Nhc2UgMTM6YWsoYixhKTtjayhhKTtsPWEuY2hpbGQ7bC5mbGFncyY4MTkyJiZudWxsIT09bC5tZW1vaXplZFN0YXRlJiYobnVsbD09PWwuYWx0ZXJuYXRlfHxudWxsPT09bC5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSkmJlxuKGRrPUIoKSk7ZCY0JiZZaihhKTticmVhaztjYXNlIDIyOmw9bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFM9KG49Uyl8fGwsYWsoYixhKSxTPW4pOmFrKGIsYSk7Y2soYSk7aWYoZCY4MTkyKXtuPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7YTpmb3IodT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT11KXt1PXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbj8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9cWIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19fWVsc2UgaWYoNj09PVxucS50YWcpe2lmKG51bGw9PT11KXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bj9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTt1PT09cSYmKHU9bnVsbCk7cT1xLnJldHVybn11PT09cSYmKHU9bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ31pZihuJiYhbCYmMCE9PShhLm1vZGUmMSkpZm9yKFQ9YSxhPWEuY2hpbGQ7bnVsbCE9PWE7KXtmb3IobD1UPWE7bnVsbCE9PVQ7KXtuPVQ7dT1uLmNoaWxkO3N3aXRjaChuLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1Ok5qKDQsXG5uLG4ucmV0dXJuKTticmVhaztjYXNlIDE6SmoobixuLnJldHVybik7Zj1uLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnRXaWxsVW5tb3VudCl7cT1uO3k9bi5yZXR1cm47dHJ5e2U9cSxmLnByb3BzPWUubWVtb2l6ZWRQcm9wcyxmLnN0YXRlPWUubWVtb2l6ZWRTdGF0ZSxmLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobSl7VShxLHksbSl9fWJyZWFrO2Nhc2UgNTpKaihuLG4ucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1uLm1lbW9pemVkU3RhdGUpe2VrKGwpO2NvbnRpbnVlfX1udWxsIT09dT8odS5yZXR1cm49bixUPXUpOmVrKGwpfWE9YS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmFrKGIsYSk7Y2soYSk7ZCY0JiZZaihhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6YWsoYixhKSxjayhhKX19XG5mdW5jdGlvbiBjayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFJqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYobmIoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVNqKGEpO1VqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1TaihhKTtUaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VShhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBmayhhLGIsYyl7VD1hO2drKGEsYixjKX1cbmZ1bmN0aW9uIGdrKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVQ7KXt2YXIgZT1ULGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxIajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8UztoPUhqO3ZhciBsPVM7SGo9ZztpZigoUz1rKSYmIWwpZm9yKFQ9ZTtudWxsIT09VDspZz1ULGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2hrKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFQ9ayk6aGsoZSk7Zm9yKDtudWxsIT09ZjspVD1mLGdrKGYsYixjKSxmPWYuc2libGluZztUPWU7SGo9aDtTPWx9aWsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVD1mKTppayhhLGIsYyl9fVxuZnVuY3Rpb24gaWsoYSl7Zm9yKDtudWxsIT09VDspe3ZhciBiPVQ7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpTfHxPaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFTKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOmtnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJkdnKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1HZyhiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBuPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bil7dmFyIHU9bi5kZWh5ZHJhdGVkO251bGwhPT11JiZhZCh1KX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9U3x8Yi5mbGFncyY1MTImJlBqKGIpfWNhdGNoKHEpe1UoYixiLnJldHVybixxKX19aWYoYj09PWEpe1Q9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47VD1jO2JyZWFrfVQ9Yi5yZXR1cm59fWZ1bmN0aW9uIGVrKGEpe2Zvcig7bnVsbCE9PVQ7KXt2YXIgYj1UO2lmKGI9PT1hKXtUPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtUPWM7YnJlYWt9VD1iLnJldHVybn19XG5mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1UOyl7dmFyIGI9VDt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtPaig0LGIpfWNhdGNoKGspe1UoYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtVKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1BqKGIpfWNhdGNoKGspe1UoYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7UGooYil9Y2F0Y2goayl7VShiLGcsayl9fX1jYXRjaChrKXtVKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Q9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Q9aDticmVha31UPWIucmV0dXJufX1cbnZhciBqaz1NYXRoLmNlaWwsa2s9dGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixsaz10YS5SZWFjdEN1cnJlbnRPd25lcixtaz10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxXPTAsUD1udWxsLFg9bnVsbCxZPTAsY2o9MCxtaj1UZigwKSxSPTAsbms9bnVsbCxGZz0wLG9rPTAscGs9MCxxaz1udWxsLHJrPW51bGwsZGs9MCxhaj1JbmZpbml0eSxzaz1udWxsLExpPSExLE1pPW51bGwsT2k9bnVsbCx0az0hMSx1az1udWxsLHZrPTAsd2s9MCx4az1udWxsLHlrPS0xLHprPTA7ZnVuY3Rpb24gSmcoKXtyZXR1cm4gMCE9PShXJjYpP0IoKTotMSE9PXlrP3lrOnlrPUIoKX1cbmZ1bmN0aW9uIEtnKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oVyYyKSYmMCE9PVkpcmV0dXJuIFkmLVk7aWYobnVsbCE9PWpnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT16ayYmKHprPXhjKCkpLHprO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6aWQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBMZyhhLGIsYyl7aWYoNTA8d2spdGhyb3cgd2s9MCx4az1udWxsLEVycm9yKHAoMTg1KSk7dmFyIGQ9QWsoYSxiKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDt6YyhkLGIsYyk7aWYoMD09PShXJjIpfHxkIT09UClkPT09UCYmKDA9PT0oVyYyKSYmKG9rfD1iKSw0PT09UiYmQmsoZCxZKSksQ2soZCxjKSwxPT09YiYmMD09PVcmJjA9PT0oYS5tb2RlJjEpJiYoYWo9QigpKzUwMCxlZyYmaWcoKSk7cmV0dXJuIGR9XG5mdW5jdGlvbiBBayhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9ZnVuY3Rpb24gQmcoYSl7cmV0dXJuKG51bGwhPT1QfHxudWxsIT09dmcpJiYwIT09KGEubW9kZSYxKSYmMD09PShXJjIpfVxuZnVuY3Rpb24gQ2soYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt2YyhhLGIpO3ZhciBkPXRjKGEsYT09PVA/WTowKTtpZigwPT09ZCludWxsIT09YyYmYWMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZhYyhjKTtpZigxPT09YikwPT09YS50YWc/aGcoRGsuYmluZChudWxsLGEpKTpnZyhEay5iaW5kKG51bGwsYSkpLElmKGZ1bmN0aW9uKCl7MD09PVcmJmlnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goQ2MoZCkpe2Nhc2UgMTpjPWVjO2JyZWFrO2Nhc2UgNDpjPWZjO2JyZWFrO2Nhc2UgMTY6Yz1nYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWljO2JyZWFrO2RlZmF1bHQ6Yz1nY31jPUVrKGMsRmsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEZrKGEsYil7eWs9LTE7ems9MDtpZigwIT09KFcmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihHaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dGMoYSxhPT09UD9ZOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1IayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPVc7V3w9Mjt2YXIgZj1JaygpO2lmKFAhPT1hfHxZIT09Yilzaz1udWxsLGFqPUIoKSs1MDAsSmsoYSxiKTtkbyB0cnl7S2soKTticmVha31jYXRjaChoKXtMayhhLGgpfXdoaWxlKDEpO3BnKCk7a2suY3VycmVudD1mO1c9ZTtudWxsIT09WD9iPTA6KFA9bnVsbCxZPTAsYj1SKX1pZigwIT09Yil7Mj09PWImJihlPXdjKGEpLDAhPT1lJiYoZD1lLGI9TWsoYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9bmssSmsoYSwwKSxCayhhLGQpLENrKGEsQigpKSxjO2lmKDY9PT1iKUJrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhTmsoZSkmJihiPUhrKGEsZCksMj09PWImJihmPXdjKGEpLDAhPT1mJiYoZD1mLGI9TWsoYSxmKSkpLDE9PT1iKSl0aHJvdyBjPW5rLEprKGEsMCksQmsoYSxkKSxDayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOk9rKGEscmssc2spO2JyZWFrO2Nhc2UgMzpCayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1kays1MDAtQigpLDEwPGIpKXtpZigwIT09dGMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtKZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RWYoT2suYmluZChudWxsLGEscmssc2spLGIpO2JyZWFrfU9rKGEscmssc2spO2JyZWFrO2Nhc2UgNDpCayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW5jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmprKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUVmKE9rLmJpbmQobnVsbCxhLHJrLHNrKSxkKTticmVha31PayhhLHJrLHNrKTticmVhaztjYXNlIDU6T2soYSxyayxzayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUNrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0ZrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gTWsoYSxiKXt2YXIgYz1xazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihKayhhLGIpLmZsYWdzfD0yNTYpO2E9SGsoYSxiKTsyIT09YSYmKGI9cmsscms9YyxudWxsIT09YiYmWmkoYikpO3JldHVybiBhfWZ1bmN0aW9uIFppKGEpe251bGw9PT1yaz9yaz1hOnJrLnB1c2guYXBwbHkocmssYSl9XG5mdW5jdGlvbiBOayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUdlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gQmsoYSxiKXtiJj1+cGs7YiY9fm9rO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtbmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIERrKGEpe2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0drKCk7dmFyIGI9dGMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIENrKGEsQigpKSxudWxsO3ZhciBjPUhrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9d2MoYSk7MCE9PWQmJihiPWQsYz1NayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPW5rLEprKGEsMCksQmsoYSxiKSxDayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7T2soYSxyayxzayk7Q2soYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUGsoYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLDA9PT1XJiYoYWo9QigpKzUwMCxlZyYmaWcoKSl9fWZ1bmN0aW9uIFFrKGEpe251bGwhPT11ayYmMD09PXVrLnRhZyYmMD09PShXJjYpJiZHaygpO3ZhciBiPVc7V3w9MTt2YXIgYz1tay50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYobWsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQsbWsudHJhbnNpdGlvbj1jLFc9YiwwPT09KFcmNikmJmlnKCl9fWZ1bmN0aW9uIGJqKCl7Y2o9bWouY3VycmVudDtFKG1qKX1cbmZ1bmN0aW9uIEprKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEZmKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7Y2goZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJlpmKCk7YnJlYWs7Y2FzZSAzOkdoKCk7RShWZik7RShIKTtMaCgpO2JyZWFrO2Nhc2UgNTpJaChkKTticmVhaztjYXNlIDQ6R2goKTticmVhaztjYXNlIDEzOkUoSyk7YnJlYWs7Y2FzZSAxOTpFKEspO2JyZWFrO2Nhc2UgMTA6cWcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6YmooKX1jPWMucmV0dXJufVA9YTtYPWE9dGgoYS5jdXJyZW50LG51bGwpO1k9Y2o9YjtSPTA7bms9bnVsbDtwaz1vaz1GZz0wO3JrPXFrPW51bGw7aWYobnVsbCE9PXZnKXtmb3IoYj1cbjA7Yjx2Zy5sZW5ndGg7YisrKWlmKGM9dmdbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9dmc9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIExrKGEsYil7ZG97dmFyIGM9WDt0cnl7cGcoKTtNaC5jdXJyZW50PVloO2lmKFBoKXtmb3IodmFyIGQ9TC5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1QaD0hMX1PaD0wO049TT1MPW51bGw7UWg9ITE7Umg9MDtsay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Uj0xO25rPWI7WD1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WTtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG49aCx1PW4udGFnO2lmKDA9PT0obi5tb2RlJjEpJiYoMD09PXV8fDExPT09dXx8MTU9PT11KSl7dmFyIHE9bi5hbHRlcm5hdGU7cT8obi51cGRhdGVRdWV1ZT1xLnVwZGF0ZVF1ZXVlLG4ubWVtb2l6ZWRTdGF0ZT1xLm1lbW9pemVkU3RhdGUsXG5uLmxhbmVzPXEubGFuZXMpOihuLnVwZGF0ZVF1ZXVlPW51bGwsbi5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVJpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1NpKHksZyxoLGYsYik7eS5tb2RlJjEmJlBpKGYsbCxiKTtiPXk7az1sO3ZhciBtPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW0pe3ZhciB3PW5ldyBTZXQ7dy5hZGQoayk7Yi51cGRhdGVRdWV1ZT13fWVsc2UgbS5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7UGkoZixsLGIpOyRpKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVJpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtTaShKLGcsaCxmLGIpO29oKGspO2JyZWFrIGF9fWY9azs0IT09UiYmKFI9Mik7bnVsbD09PXFrP3FrPVtmXTpxay5wdXNoKGYpO2s9SGkoayxoKTtoPWc7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5mbGFnc3w9NjU1MzY7XG5iJj0tYjtoLmxhbmVzfD1iO3ZhciB2PUtpKGgsayxiKTtEZyhoLHYpO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgeD1oLnR5cGUscj1oLnN0YXRlTm9kZTtpZigwPT09KGguZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiByLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PU9pfHwhT2kuaGFzKHIpKSkpe2guZmxhZ3N8PTY1NTM2O2ImPS1iO2gubGFuZXN8PWI7dmFyIEY9TmkoaCxmLGIpO0RnKGgsRik7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9UmsoYyl9Y2F0Y2goWil7Yj1aO1g9PT1jJiZudWxsIT09YyYmKFg9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gSWsoKXt2YXIgYT1ray5jdXJyZW50O2trLmN1cnJlbnQ9WWg7cmV0dXJuIG51bGw9PT1hP1loOmF9XG5mdW5jdGlvbiAkaSgpe2lmKDA9PT1SfHwzPT09Unx8Mj09PVIpUj00O251bGw9PT1QfHwwPT09KEZnJjI2ODQzNTQ1NSkmJjA9PT0ob2smMjY4NDM1NDU1KXx8QmsoUCxZKX1mdW5jdGlvbiBIayhhLGIpe3ZhciBjPVc7V3w9Mjt2YXIgZD1JaygpO2lmKFAhPT1hfHxZIT09Yilzaz1udWxsLEprKGEsYik7ZG8gdHJ5e1NrKCk7YnJlYWt9Y2F0Y2goZSl7TGsoYSxlKX13aGlsZSgxKTtwZygpO1c9Yztray5jdXJyZW50PWQ7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IocCgyNjEpKTtQPW51bGw7WT0wO3JldHVybiBSfWZ1bmN0aW9uIFNrKCl7Zm9yKDtudWxsIT09WDspVGsoWCl9ZnVuY3Rpb24gS2soKXtmb3IoO251bGwhPT1YJiYhYmMoKTspVGsoWCl9ZnVuY3Rpb24gVGsoYSl7dmFyIGI9VWsoYS5hbHRlcm5hdGUsYSxjaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1JrKGEpOlg9Yjtsay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBSayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1ZaShjLGIsY2opLG51bGwhPT1jKXtYPWM7cmV0dXJufX1lbHNle2M9R2ooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WD1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtSPTY7WD1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1g9YjtyZXR1cm59WD1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1SJiYoUj01KX1mdW5jdGlvbiBPayhhLGIsYyl7dmFyIGQ9QyxlPW1rLnRyYW5zaXRpb247dHJ5e21rLnRyYW5zaXRpb249bnVsbCxDPTEsVmsoYSxiLGMsZCl9ZmluYWxseXttay50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gVmsoYSxiLGMsZCl7ZG8gR2soKTt3aGlsZShudWxsIT09dWspO2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QWMoYSxmKTthPT09UCYmKFg9UD1udWxsLFk9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx0a3x8KHRrPSEwLEVrKGdjLGZ1bmN0aW9uKCl7R2soKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9bWsudHJhbnNpdGlvbjttay50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1XO1d8PTQ7bGsuY3VycmVudD1udWxsO01qKGEsYyk7YmsoYyxhKTtOZShDZik7Y2Q9ISFCZjtDZj1CZj1udWxsO2EuY3VycmVudD1jO2ZrKGMsYSxlKTtjYygpO1c9aDtDPWc7bWsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7dGsmJih0az0hMSx1az1hLHZrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihPaT1udWxsKTtsYyhjLnN0YXRlTm9kZSxkKTtDayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWQoYltjXSk7aWYoTGkpdGhyb3cgTGk9ITEsYT1NaSxNaT1udWxsLGE7MCE9PSh2ayYxKSYmMCE9PWEudGFnJiZHaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT14az93aysrOih3az0wLHhrPWEpOndrPTA7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEdrKCl7aWYobnVsbCE9PXVrKXt2YXIgYT1DYyh2ayksYj1tay50cmFuc2l0aW9uLGM9Qzt0cnl7bWsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT11ayl2YXIgZD0hMTtlbHNle2E9dWs7dWs9bnVsbDt2az0wO2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPVc7V3w9NDtmb3IoVD1hLmN1cnJlbnQ7bnVsbCE9PVQ7KXt2YXIgZj1ULGc9Zi5jaGlsZDtpZigwIT09KFQuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFQ9bDtudWxsIT09VDspe3ZhciBuPVQ7c3dpdGNoKG4udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1Ok5qKDgsbixmKX12YXIgdT1uLmNoaWxkO2lmKG51bGwhPT11KXUucmV0dXJuPW4sVD11O2Vsc2UgZm9yKDtudWxsIT09VDspe249VDt2YXIgcT1uLnNpYmxpbmcseT1uLnJldHVybjtRaihuKTtpZihuPT09XG5sKXtUPW51bGw7YnJlYWt9aWYobnVsbCE9PXEpe3EucmV0dXJuPXk7VD1xO2JyZWFrfVQ9eX19fXZhciBtPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1tKXt2YXIgdz1tLmNoaWxkO2lmKG51bGwhPT13KXttLmNoaWxkPW51bGw7ZG97dmFyIEo9dy5zaWJsaW5nO3cuc2libGluZz1udWxsO3c9Sn13aGlsZShudWxsIT09dyl9fVQ9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixUPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVQ7KXtmPVQ7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpOaig5LGYsZi5yZXR1cm4pfXZhciB2PWYuc2libGluZztpZihudWxsIT09dil7di5yZXR1cm49Zi5yZXR1cm47VD12O2JyZWFrIGJ9VD1mLnJldHVybn19dmFyIHg9YS5jdXJyZW50O2ZvcihUPXg7bnVsbCE9PVQ7KXtnPVQ7dmFyIHI9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG5yKXIucmV0dXJuPWcsVD1yO2Vsc2UgYjpmb3IoZz14O251bGwhPT1UOyl7aD1UO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1Ok9qKDksaCl9fWNhdGNoKFope1UoaCxoLnJldHVybixaKX1pZihoPT09Zyl7VD1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtUPUY7YnJlYWsgYn1UPWgucmV0dXJufX1XPWU7aWcoKTtpZihrYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGtjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7a2Mub25Qb3N0Q29tbWl0RmliZXJSb290KGpjLGEpfWNhdGNoKFope31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLG1rLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gV2soYSxiLGMpe2I9SGkoYyxiKTtiPUtpKGEsYiwxKTtBZyhhLGIpO2I9SmcoKTthPUFrKGEsMSk7bnVsbCE9PWEmJih6YyhhLDEsYiksQ2soYSxiKSl9XG5mdW5jdGlvbiBVKGEsYixjKXtpZigzPT09YS50YWcpV2soYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7V2soYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09T2l8fCFPaS5oYXMoZCkpKXthPUhpKGMsYSk7YT1OaShiLGEsMSk7QWcoYixhKTthPUpnKCk7Yj1BayhiLDEpO251bGwhPT1iJiYoemMoYiwxLGEpLENrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1KZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztQPT09YSYmKFkmYyk9PT1jJiYoND09PVJ8fDM9PT1SJiYoWSYxMzAwMjM0MjQpPT09WSYmNTAwPkIoKS1kaz9KayhhLDApOnBrfD1jKTtDayhhLGIpfWZ1bmN0aW9uIFhrKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9cmMscmM8PD0xLDA9PT0ocmMmMTMwMDIzNDI0KSYmKHJjPTQxOTQzMDQpKSk7dmFyIGM9SmcoKTthPUFrKGEsYik7bnVsbCE9PWEmJih6YyhhLGIsYyksQ2soYSxjKSl9ZnVuY3Rpb24gemooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1hrKGEsYyl9XG5mdW5jdGlvbiBaaihhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtYayhhLGMpfXZhciBVaztcblVrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8VmYuY3VycmVudCl0Zz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIHRnPSExLEZqKGEsYixjKTt0Zz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIHRnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmYWgoYixVZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WGYoYixILmN1cnJlbnQpO3NnKGIsYyk7ZT1VaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9WmgoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj9cbihiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9bnVsbCxZZihkKT8oZj0hMCxiZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLHhnKGIpLGUudXBkYXRlcj1NZyxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIsUWcoYixkLGEsYyksYj1waihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZiaChiKSxlaihudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVlrKGQpO2E9a2coZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9a2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPW9qKG51bGwsYixcbmQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1maihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWhqKG51bGwsYixkLGtnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LGQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksa2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksb2ooYSxiLGQsZSxjKTtjYXNlIDM6YTp7cWooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O3lnKGEsYik7RWcoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsXG5jYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPWYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9RXJyb3IocCg0MjMpKTtiPXJqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUVycm9yKHAoNDI0KSk7Yj1yaihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoZWg9S2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxkaD1iLEk9ITAsZmg9bnVsbCxjPXpoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle25oKCk7aWYoZD09PWUpe2I9Z2ooYSxiLGMpO2JyZWFrIGF9ZWooYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gSGgoYiksbnVsbD09PWEmJmtoKGIpLGQ9Yi50eXBlLGU9XG5iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixEZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRGYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxuaihhLGIpLGVqKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYma2goYiksbnVsbDtjYXNlIDEzOnJldHVybiB2aihhLGIsYyk7Y2FzZSA0OnJldHVybiBGaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD15aChiLG51bGwsZCxjKTplaihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksZmooYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGVqKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZWooYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZWooYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7Zz1lLnZhbHVlO0cobGcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihHZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVZmLmN1cnJlbnQpe2I9Z2ooYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9emcoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBuPWwucGVuZGluZztudWxsPT09bj9rLm5leHQ9XG5rOihrLm5leHQ9bi5uZXh0LG4ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7cmcoZi5yZXR1cm4sYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO3JnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31laihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7XG5jYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sc2coYixjKSxlPXVnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLGVqKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1rZyhkLGIucGVuZGluZ1Byb3BzKSxlPWtnKGQudHlwZSxlKSxoaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGpqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6a2coZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLFlmKGQpPyhhPSEwLGJnKGIpKTphPSExLHNnKGIsYyksT2coYixkLGUpLFFnKGIsZCxlLGMpLHBqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gRWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGxqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixcbmIudGFnKSk7fTtmdW5jdGlvbiBFayhhLGIpe3JldHVybiAkYihhLGIpfWZ1bmN0aW9uIFprKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIGhoKGEsYixjLGQpe3JldHVybiBuZXcgWmsoYSxiLGMsZCl9XG5mdW5jdGlvbiBpaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFlrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBpaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Q2EpcmV0dXJuIDExO2lmKGE9PT1GYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB0aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPWhoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB2aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpaWooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2Ugd2E6cmV0dXJuIHhoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgeGE6Zz04O2V8PTg7YnJlYWs7Y2FzZSB6YTpyZXR1cm4gYT1oaCgxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPXphLGEubGFuZXM9ZixhO2Nhc2UgRGE6cmV0dXJuIGE9aGgoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RGEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1oaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEhhOnJldHVybiB3aihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQWE6Zz0xMDticmVhayBhO2Nhc2UgQmE6Zz05O2JyZWFrIGE7Y2FzZSBDYTpnPTExO1xuYnJlYWsgYTtjYXNlIEZhOmc9MTQ7YnJlYWsgYTtjYXNlIEdhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1oaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIHhoKGEsYixjLGQpe2E9aGgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHdqKGEsYixjLGQpe2E9aGgoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SGE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXt9O3JldHVybiBhfWZ1bmN0aW9uIHVoKGEsYixjKXthPWhoKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHdoKGEsYixjKXtiPWhoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gJGsoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz15YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz15YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz15YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gYWwoYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3ICRrKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9aGgoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTt4ZyhmKTtyZXR1cm4gYX1mdW5jdGlvbiBibChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnZhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gY2woYSl7aWYoIWEpcmV0dXJuIFVmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVWIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihZZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFlmKGMpKXJldHVybiBhZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBkbChhLGIsYyxkLGUsZixnLGgsayl7YT1hbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1jbChudWxsKTtjPWEuY3VycmVudDtkPUpnKCk7ZT1LZyhjKTtmPXpnKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7QWcoYyxmKTthLmN1cnJlbnQubGFuZXM9ZTt6YyhhLGUsZCk7Q2soYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBlbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1KZygpLGc9S2coZSk7Yz1jbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7YT1MZyhlLGcsZik7bnVsbCE9PWEmJkNnKGEsZSxnKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGZsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZ2woYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGhsKGEsYil7Z2woYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmdsKGEsYil9ZnVuY3Rpb24gaWwoKXtyZXR1cm4gbnVsbH12YXIgamw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIGtsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubGwucHJvdG90eXBlLnJlbmRlcj1rbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2VsKGEsYixudWxsLG51bGwpfTtsbC5wcm90b3R5cGUudW5tb3VudD1rbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1FrKGZ1bmN0aW9uKCl7ZWwobnVsbCxhLG51bGwsbnVsbCl9KTtiW3RmXT1udWxsfX07ZnVuY3Rpb24gbGwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5sbC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9R2MoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFBjLmxlbmd0aCYmMCE9PWImJmI8UGNbY10ucHJpb3JpdHk7YysrKTtQYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZVYyhhKX19O2Z1bmN0aW9uIG1sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBubChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gb2woKXt9XG5mdW5jdGlvbiBwbChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1mbChnKTtmLmNhbGwoYSl9fXZhciBnPWRsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLG9sKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3RmXT1nLmN1cnJlbnQ7cmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1FrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1mbChrKTtoLmNhbGwoYSl9fXZhciBrPWFsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixvbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt0Zl09ay5jdXJyZW50O3JmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtRayhmdW5jdGlvbigpe2VsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBxbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1mbChnKTtoLmNhbGwoYSl9fWVsKGIsZyxhLGUpfWVsc2UgZz1wbChjLGIsYSxlLGQpO3JldHVybiBmbChnKX1EYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXNjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKEJjKGIsY3wxKSxDayhiLEIoKSksMD09PShXJjYpJiYoYWo9QigpKzUwMCxpZygpKSl9YnJlYWs7Y2FzZSAxMzp2YXIgZD1KZygpO1FrKGZ1bmN0aW9uKCl7cmV0dXJuIExnKGEsMSxkKX0pO2hsKGEsMSl9fTtFYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1KZygpO0xnKGEsMTM0MjE3NzI4LGIpO2hsKGEsMTM0MjE3NzI4KX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SmcoKSxjPUtnKGEpO0xnKGEsYyxiKTtobChhLGMpfX07R2M9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SGM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueGI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjokYShhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9Q2IoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1ZhKGQpOyRhKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZWIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYj1QaztHYj1RaztcbnZhciBybD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQmIsdGUsQ2IsRGIsRWIsUGtdfSxzbD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VmMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4xLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHRsPXtidW5kbGVUeXBlOnNsLmJ1bmRsZVR5cGUsdmVyc2lvbjpzbC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6c2wucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzpzbC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp0YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WWIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnNsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmlsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4xLjAtbmV4dC0yMmVkYjlmNzctMjAyMjA0MjZcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB1bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXVsLmlzRGlzYWJsZWQmJnVsLnN1cHBvcnRzRmliZXIpdHJ5e2pjPXVsLmluamVjdCh0bCksa2M9dWx9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXJsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighbWwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gYmwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFtbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWpsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1hbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3RmXT1iLmN1cnJlbnQ7cmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcga2woYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVliKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFFrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBxbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighbWwoYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWpsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1kbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3RmXT1iLmN1cnJlbnQ7cmYoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBsbChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBxbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oUWsoZnVuY3Rpb24oKXtxbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdGZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1QaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIW5sKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBxbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMS4wLW5leHQtMjJlZGI5Zjc3LTIwMjIwNDI2XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcblxuLyoqXHJcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2FjdGlvblxyXG4gKi9cbnZhciBBY3Rpb247XG5cbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxyXG4gICAqIEEgUE9QIGluZGljYXRlcyBhIGNoYW5nZSB0byBhbiBhcmJpdHJhcnkgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2hcclxuICAgKiBhcyBhIGJhY2sgb3IgZm9yd2FyZCBuYXZpZ2F0aW9uLiBJdCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgZGlyZWN0aW9uIG9mIHRoZVxyXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxyXG4gICAqXHJcbiAgICogTm90ZTogVGhpcyBpcyB0aGUgZGVmYXVsdCBhY3Rpb24gZm9yIG5ld2x5IGNyZWF0ZWQgaGlzdG9yeSBvYmplY3RzLlxyXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcclxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cclxuICAgKiBhIGxpbmsgaXMgY2xpY2tlZCBhbmQgYSBuZXcgcGFnZSBsb2Fkcy4gV2hlbiB0aGlzIGhhcHBlbnMsIGFsbCBzdWJzZXF1ZW50XHJcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXHJcbiAgICovXG5cbiAgQWN0aW9uW1wiUHVzaFwiXSA9IFwiUFVTSFwiO1xuICAvKipcclxuICAgKiBBIFJFUExBQ0UgaW5kaWNhdGVzIHRoZSBlbnRyeSBhdCB0aGUgY3VycmVudCBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFja1xyXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cclxuICAgKi9cblxuICBBY3Rpb25bXCJSZXBsYWNlXCJdID0gXCJSRVBMQUNFXCI7XG59KShBY3Rpb24gfHwgKEFjdGlvbiA9IHt9KSk7XG5cbnZhciByZWFkT25seSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmo7XG59O1xuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5cbnZhciBCZWZvcmVVbmxvYWRFdmVudFR5cGUgPSAnYmVmb3JldW5sb2FkJztcbnZhciBIYXNoQ2hhbmdlRXZlbnRUeXBlID0gJ2hhc2hjaGFuZ2UnO1xudmFyIFBvcFN0YXRlRXZlbnRUeXBlID0gJ3BvcHN0YXRlJztcbi8qKlxyXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxyXG4gKiBtb3N0IHdlYiBhcHBzLCBidXQgaXQgcmVxdWlyZXMgc29tZSBjb25maWd1cmF0aW9uIG9uIHRoZSBzZXJ2ZXIgdG8gZW5zdXJlIHlvdVxyXG4gKiBzZXJ2ZSB0aGUgc2FtZSBhcHAgYXQgbXVsdGlwbGUgVVJMcy5cclxuICpcclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVicm93c2VyaGlzdG9yeVxyXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHdpbmRvdyA9IF9vcHRpb25zLndpbmRvdyxcbiAgICAgIHdpbmRvdyA9IF9vcHRpb25zJHdpbmRvdyA9PT0gdm9pZCAwID8gZG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBfb3B0aW9ucyR3aW5kb3c7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXhBbmRMb2NhdGlvbigpIHtcbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHt9O1xuICAgIHJldHVybiBbc3RhdGUuaWR4LCByZWFkT25seSh7XG4gICAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgICBzZWFyY2g6IHNlYXJjaCxcbiAgICAgIGhhc2g6IGhhc2gsXG4gICAgICBzdGF0ZTogc3RhdGUudXNyIHx8IG51bGwsXG4gICAgICBrZXk6IHN0YXRlLmtleSB8fCAnZGVmYXVsdCdcbiAgICB9KV07XG4gIH1cblxuICB2YXIgYmxvY2tlZFBvcFR4ID0gbnVsbDtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AoKSB7XG4gICAgaWYgKGJsb2NrZWRQb3BUeCkge1xuICAgICAgYmxvY2tlcnMuY2FsbChibG9ja2VkUG9wVHgpO1xuICAgICAgYmxvY2tlZFBvcFR4ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUG9wO1xuXG4gICAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb24gPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICAgICAgbmV4dEluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb25bMF0sXG4gICAgICAgICAgbmV4dExvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb25bMV07XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG5leHRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIGRlbHRhID0gaW5kZXggLSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICBpZiAoZGVsdGEpIHtcbiAgICAgICAgICAgIC8vIFJldmVydCB0aGUgUE9QXG4gICAgICAgICAgICBibG9ja2VkUG9wVHggPSB7XG4gICAgICAgICAgICAgIGFjdGlvbjogbmV4dEFjdGlvbixcbiAgICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICAgICAgcmV0cnk6IGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgICAgICAgICAgIGdvKGRlbHRhICogLTEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ28oZGVsdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUcnlpbmcgdG8gUE9QIHRvIGEgbG9jYXRpb24gd2l0aCBubyBpbmRleC4gV2UgZGlkIG5vdCBjcmVhdGVcbiAgICAgICAgICAvLyB0aGlzIGxvY2F0aW9uLCBzbyB3ZSBjYW4ndCBlZmZlY3RpdmVseSBibG9jayB0aGUgbmF2aWdhdGlvbi5cbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAvLyBUT0RPOiBXcml0ZSB1cCBhIGRvYyB0aGF0IGV4cGxhaW5zIG91ciBibG9ja2luZyBzdHJhdGVneSBpblxuICAgICAgICAgIC8vIGRldGFpbCBhbmQgbGluayB0byBpdCBoZXJlIHNvIHBlb3BsZSBjYW4gdW5kZXJzdGFuZCBiZXR0ZXIgd2hhdFxuICAgICAgICAgIC8vIGlzIGdvaW5nIG9uIGFuZCBob3cgdG8gYXZvaWQgaXQuXG4gICAgICAgICAgXCJZb3UgYXJlIHRyeWluZyB0byBibG9jayBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gdGhhdCB3YXMgbm90IFwiICsgXCJjcmVhdGVkIGJ5IHRoZSBoaXN0b3J5IGxpYnJhcnkuIFRoZSBibG9jayB3aWxsIGZhaWwgc2lsZW50bHkgaW4gXCIgKyBcInByb2R1Y3Rpb24sIGJ1dCBpbiBnZW5lcmFsIHlvdSBzaG91bGQgZG8gYWxsIG5hdmlnYXRpb24gd2l0aCB0aGUgXCIgKyBcImhpc3RvcnkgbGlicmFyeSAoaW5zdGVhZCBvZiB1c2luZyB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgZGlyZWN0bHkpIFwiICsgXCJ0byBhdm9pZCB0aGlzIHNpdHVhdGlvbi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuXG4gIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjIgPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uMlswXSxcbiAgICAgIGxvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb24yWzFdO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBjcmVhdGVFdmVudHMoKTtcbiAgdmFyIGJsb2NrZXJzID0gY3JlYXRlRXZlbnRzKCk7XG5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICBpbmRleCA9IDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoX2V4dGVuZHMoe30sIGdsb2JhbEhpc3Rvcnkuc3RhdGUsIHtcbiAgICAgIGlkeDogaW5kZXhcbiAgICB9KSwgJycpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfSAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcblxuXG4gIGZ1bmN0aW9uIGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBoYXNoOiAnJyxcbiAgICAgIHNlYXJjaDogJydcbiAgICB9LCB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHVzcjogbmV4dExvY2F0aW9uLnN0YXRlLFxuICAgICAga2V5OiBuZXh0TG9jYXRpb24ua2V5LFxuICAgICAgaWR4OiBpbmRleFxuICAgIH0sIGNyZWF0ZUhyZWYobmV4dExvY2F0aW9uKV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uKSB7XG4gICAgYWN0aW9uID0gbmV4dEFjdGlvbjtcblxuICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjMgPSBnZXRJbmRleEFuZExvY2F0aW9uKCk7XG5cbiAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uM1swXTtcbiAgICBsb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uM1sxXTtcbiAgICBsaXN0ZW5lcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcHVzaCh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyID0gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXggKyAxKSxcbiAgICAgICAgICBoaXN0b3J5U3RhdGUgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXJbMF0sXG4gICAgICAgICAgdXJsID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyWzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcbiAgICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCAnJywgdXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgfVxuXG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgdmFyIF9nZXRIaXN0b3J5U3RhdGVBbmRVcjIgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyMlswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyWzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcblxuXG4gICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhkZWx0YSkge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28oZGVsdGEpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soKSB7XG4gICAgICBnbygtMSk7XG4gICAgfSxcbiAgICBmb3J3YXJkOiBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgICAgZ28oMSk7XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIGJsb2NrOiBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XG4gICAgICB2YXIgdW5ibG9jayA9IGJsb2NrZXJzLnB1c2goYmxvY2tlcik7XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bmJsb2NrKCk7IC8vIFJlbW92ZSB0aGUgYmVmb3JldW5sb2FkIGxpc3RlbmVyIHNvIHRoZSBkb2N1bWVudCBtYXlcbiAgICAgICAgLy8gc3RpbGwgYmUgc2FsdmFnZWFibGUgaW4gdGhlIHBhZ2VoaWRlIGV2ZW50LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jdW5sb2FkaW5nLWRvY3VtZW50c1xuXG4gICAgICAgIGlmICghYmxvY2tlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcclxuICogSGFzaCBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gd2luZG93LmxvY2F0aW9uLmhhc2guIFRoaXMgbWFrZXMgaXQgaWRlYWxcclxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcclxuICogc29tZSByZWFzb24sIGVpdGhlciBiZWNhdXNlIHlvdSBkbyBjYW5ub3QgY29uZmlndXJlIGl0IG9yIHRoZSBVUkwgc3BhY2UgaXNcclxuICogcmVzZXJ2ZWQgZm9yIHNvbWV0aGluZyBlbHNlLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWhhc2hoaXN0b3J5XHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMyID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zMiR3aW5kb3cgPSBfb3B0aW9uczIud2luZG93LFxuICAgICAgd2luZG93ID0gX29wdGlvbnMyJHdpbmRvdyA9PT0gdm9pZCAwID8gZG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBfb3B0aW9uczIkd2luZG93O1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuXG4gIGZ1bmN0aW9uIGdldEluZGV4QW5kTG9jYXRpb24oKSB7XG4gICAgdmFyIF9wYXJzZVBhdGggPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKSxcbiAgICAgICAgX3BhcnNlUGF0aCRwYXRobmFtZSA9IF9wYXJzZVBhdGgucGF0aG5hbWUsXG4gICAgICAgIHBhdGhuYW1lID0gX3BhcnNlUGF0aCRwYXRobmFtZSA9PT0gdm9pZCAwID8gJy8nIDogX3BhcnNlUGF0aCRwYXRobmFtZSxcbiAgICAgICAgX3BhcnNlUGF0aCRzZWFyY2ggPSBfcGFyc2VQYXRoLnNlYXJjaCxcbiAgICAgICAgc2VhcmNoID0gX3BhcnNlUGF0aCRzZWFyY2ggPT09IHZvaWQgMCA/ICcnIDogX3BhcnNlUGF0aCRzZWFyY2gsXG4gICAgICAgIF9wYXJzZVBhdGgkaGFzaCA9IF9wYXJzZVBhdGguaGFzaCxcbiAgICAgICAgaGFzaCA9IF9wYXJzZVBhdGgkaGFzaCA9PT0gdm9pZCAwID8gJycgOiBfcGFyc2VQYXRoJGhhc2g7XG5cbiAgICB2YXIgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHt9O1xuICAgIHJldHVybiBbc3RhdGUuaWR4LCByZWFkT25seSh7XG4gICAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgICBzZWFyY2g6IHNlYXJjaCxcbiAgICAgIGhhc2g6IGhhc2gsXG4gICAgICBzdGF0ZTogc3RhdGUudXNyIHx8IG51bGwsXG4gICAgICBrZXk6IHN0YXRlLmtleSB8fCAnZGVmYXVsdCdcbiAgICB9KV07XG4gIH1cblxuICB2YXIgYmxvY2tlZFBvcFR4ID0gbnVsbDtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AoKSB7XG4gICAgaWYgKGJsb2NrZWRQb3BUeCkge1xuICAgICAgYmxvY2tlcnMuY2FsbChibG9ja2VkUG9wVHgpO1xuICAgICAgYmxvY2tlZFBvcFR4ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUG9wO1xuXG4gICAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb240ID0gZ2V0SW5kZXhBbmRMb2NhdGlvbigpLFxuICAgICAgICAgIG5leHRJbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uNFswXSxcbiAgICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjRbMV07XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG5leHRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIGRlbHRhID0gaW5kZXggLSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICBpZiAoZGVsdGEpIHtcbiAgICAgICAgICAgIC8vIFJldmVydCB0aGUgUE9QXG4gICAgICAgICAgICBibG9ja2VkUG9wVHggPSB7XG4gICAgICAgICAgICAgIGFjdGlvbjogbmV4dEFjdGlvbixcbiAgICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICAgICAgcmV0cnk6IGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgICAgICAgICAgIGdvKGRlbHRhICogLTEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ28oZGVsdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUcnlpbmcgdG8gUE9QIHRvIGEgbG9jYXRpb24gd2l0aCBubyBpbmRleC4gV2UgZGlkIG5vdCBjcmVhdGVcbiAgICAgICAgICAvLyB0aGlzIGxvY2F0aW9uLCBzbyB3ZSBjYW4ndCBlZmZlY3RpdmVseSBibG9jayB0aGUgbmF2aWdhdGlvbi5cbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAvLyBUT0RPOiBXcml0ZSB1cCBhIGRvYyB0aGF0IGV4cGxhaW5zIG91ciBibG9ja2luZyBzdHJhdGVneSBpblxuICAgICAgICAgIC8vIGRldGFpbCBhbmQgbGluayB0byBpdCBoZXJlIHNvIHBlb3BsZSBjYW4gdW5kZXJzdGFuZCBiZXR0ZXJcbiAgICAgICAgICAvLyB3aGF0IGlzIGdvaW5nIG9uIGFuZCBob3cgdG8gYXZvaWQgaXQuXG4gICAgICAgICAgXCJZb3UgYXJlIHRyeWluZyB0byBibG9jayBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gdGhhdCB3YXMgbm90IFwiICsgXCJjcmVhdGVkIGJ5IHRoZSBoaXN0b3J5IGxpYnJhcnkuIFRoZSBibG9jayB3aWxsIGZhaWwgc2lsZW50bHkgaW4gXCIgKyBcInByb2R1Y3Rpb24sIGJ1dCBpbiBnZW5lcmFsIHlvdSBzaG91bGQgZG8gYWxsIG5hdmlnYXRpb24gd2l0aCB0aGUgXCIgKyBcImhpc3RvcnkgbGlicmFyeSAoaW5zdGVhZCBvZiB1c2luZyB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgZGlyZWN0bHkpIFwiICsgXCJ0byBhdm9pZCB0aGlzIHNpdHVhdGlvbi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7IC8vIHBvcHN0YXRlIGRvZXMgbm90IGZpcmUgb24gaGFzaGNoYW5nZSBpbiBJRSAxMSBhbmQgb2xkICh0cmlkZW50KSBFZGdlXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RlL2RvY3MvV2ViL0FQSS9XaW5kb3cvcG9wc3RhdGVfZXZlbnRcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnRUeXBlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uNSA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgICAgbmV4dExvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb241WzFdOyAvLyBJZ25vcmUgZXh0cmFuZW91cyBoYXNoY2hhbmdlIGV2ZW50cy5cblxuXG4gICAgaWYgKGNyZWF0ZVBhdGgobmV4dExvY2F0aW9uKSAhPT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHtcbiAgICAgIGhhbmRsZVBvcCgpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuXG4gIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjYgPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uNlswXSxcbiAgICAgIGxvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb242WzFdO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBjcmVhdGVFdmVudHMoKTtcbiAgdmFyIGJsb2NrZXJzID0gY3JlYXRlRXZlbnRzKCk7XG5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICBpbmRleCA9IDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoX2V4dGVuZHMoe30sIGdsb2JhbEhpc3Rvcnkuc3RhdGUsIHtcbiAgICAgIGlkeDogaW5kZXhcbiAgICB9KSwgJycpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QmFzZUhyZWYoKSB7XG4gICAgdmFyIGJhc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgICAgaHJlZiA9IGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gZ2V0QmFzZUhyZWYoKSArICcjJyArICh0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVhZE9ubHkoX2V4dGVuZHMoe1xuICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgaGFzaDogJycsXG4gICAgICBzZWFyY2g6ICcnXG4gICAgfSwgdHlwZW9mIHRvID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAga2V5OiBjcmVhdGVLZXkoKVxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4KSB7XG4gICAgcmV0dXJuIFt7XG4gICAgICB1c3I6IG5leHRMb2NhdGlvbi5zdGF0ZSxcbiAgICAgIGtleTogbmV4dExvY2F0aW9uLmtleSxcbiAgICAgIGlkeDogaW5kZXhcbiAgICB9LCBjcmVhdGVIcmVmKG5leHRMb2NhdGlvbildO1xuICB9XG5cbiAgZnVuY3Rpb24gYWxsb3dUeChhY3Rpb24sIGxvY2F0aW9uLCByZXRyeSkge1xuICAgIHJldHVybiAhYmxvY2tlcnMubGVuZ3RoIHx8IChibG9ja2Vycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgcmV0cnk6IHJldHJ5XG4gICAgfSksIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5VHgobmV4dEFjdGlvbikge1xuICAgIGFjdGlvbiA9IG5leHRBY3Rpb247XG5cbiAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb243ID0gZ2V0SW5kZXhBbmRMb2NhdGlvbigpO1xuXG4gICAgaW5kZXggPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjdbMF07XG4gICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjdbMV07XG4gICAgbGlzdGVuZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHB1c2godG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG5leHRMb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIikgOiB2b2lkIDA7XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgdmFyIF9nZXRIaXN0b3J5U3RhdGVBbmRVcjMgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCArIDEpLFxuICAgICAgICAgIGhpc3RvcnlTdGF0ZSA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVcjNbMF0sXG4gICAgICAgICAgdXJsID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyM1sxXTsgLy8gVE9ETzogU3VwcG9ydCBmb3JjZWQgcmVsb2FkaW5nXG4gICAgICAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgJycsIHVybCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAgIC8vIHdheSB0byB3YXJuIHRoZW0gYWJvdXQgaXQgc2luY2UgdGhlIHBhZ2Ugd2lsbCByZWZyZXNoLi4uXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICAgIH1cblxuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICByZXBsYWNlKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhuZXh0TG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsIFwiUmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGhhc2ggaGlzdG9yeS5yZXBsYWNlKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpIDogdm9pZCAwO1xuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIHZhciBfZ2V0SGlzdG9yeVN0YXRlQW5kVXI0ID0gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXgpLFxuICAgICAgICAgIGhpc3RvcnlTdGF0ZSA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVcjRbMF0sXG4gICAgICAgICAgdXJsID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyNFsxXTsgLy8gVE9ETzogU3VwcG9ydCBmb3JjZWQgcmVsb2FkaW5nXG5cblxuICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCAnJywgdXJsKTtcbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ28oZGVsdGEpIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKGRlbHRhKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBiYWNrOiBmdW5jdGlvbiBiYWNrKCkge1xuICAgICAgZ28oLTEpO1xuICAgIH0sXG4gICAgZm9yd2FyZDogZnVuY3Rpb24gZm9yd2FyZCgpIHtcbiAgICAgIGdvKDEpO1xuICAgIH0sXG4gICAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSxcbiAgICBibG9jazogZnVuY3Rpb24gYmxvY2soYmxvY2tlcikge1xuICAgICAgdmFyIHVuYmxvY2sgPSBibG9ja2Vycy5wdXNoKGJsb2NrZXIpO1xuXG4gICAgICBpZiAoYmxvY2tlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEJlZm9yZVVubG9hZEV2ZW50VHlwZSwgcHJvbXB0QmVmb3JlVW5sb2FkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdW5ibG9jaygpOyAvLyBSZW1vdmUgdGhlIGJlZm9yZXVubG9hZCBsaXN0ZW5lciBzbyB0aGUgZG9jdW1lbnQgbWF5XG4gICAgICAgIC8vIHN0aWxsIGJlIHNhbHZhZ2VhYmxlIGluIHRoZSBwYWdlaGlkZSBldmVudC5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3VubG9hZGluZy1kb2N1bWVudHNcblxuICAgICAgICBpZiAoIWJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEJlZm9yZVVubG9hZEV2ZW50VHlwZSwgcHJvbXB0QmVmb3JlVW5sb2FkKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXHJcbiAqIE1lbW9yeSBoaXN0b3J5IHN0b3JlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiBtZW1vcnkuIEl0IGlzIGRlc2lnbmVkIGZvciB1c2VcclxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cclxuICpcclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVtZW1vcnloaXN0b3J5XHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9uczMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMzJGluaXRpYWxFbnRyID0gX29wdGlvbnMzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfb3B0aW9uczMkaW5pdGlhbEVudHIgPT09IHZvaWQgMCA/IFsnLyddIDogX29wdGlvbnMzJGluaXRpYWxFbnRyLFxuICAgICAgaW5pdGlhbEluZGV4ID0gX29wdGlvbnMzLmluaXRpYWxJbmRleDtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgdmFyIGxvY2F0aW9uID0gcmVhZE9ubHkoX2V4dGVuZHMoe1xuICAgICAgcGF0aG5hbWU6ICcvJyxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBoYXNoOiAnJyxcbiAgICAgIHN0YXRlOiBudWxsLFxuICAgICAga2V5OiBjcmVhdGVLZXkoKVxuICAgIH0sIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgoZW50cnkpIDogZW50cnkpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHsgaW5pdGlhbEVudHJpZXMgfSkgKGludmFsaWQgZW50cnk6IFwiICsgSlNPTi5zdHJpbmdpZnkoZW50cnkpICsgXCIpXCIpIDogdm9pZCAwO1xuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfSk7XG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4LCAwLCBlbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgdmFyIGxvY2F0aW9uID0gZW50cmllc1tpbmRleF07XG4gIHZhciBsaXN0ZW5lcnMgPSBjcmVhdGVFdmVudHMoKTtcbiAgdmFyIGJsb2NrZXJzID0gY3JlYXRlRXZlbnRzKCk7XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2g6ICcnLFxuICAgICAgaGFzaDogJydcbiAgICB9LCB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWxsb3dUeChhY3Rpb24sIGxvY2F0aW9uLCByZXRyeSkge1xuICAgIHJldHVybiAhYmxvY2tlcnMubGVuZ3RoIHx8IChibG9ja2Vycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgcmV0cnk6IHJldHJ5XG4gICAgfSksIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uKSB7XG4gICAgYWN0aW9uID0gbmV4dEFjdGlvbjtcbiAgICBsb2NhdGlvbiA9IG5leHRMb2NhdGlvbjtcbiAgICBsaXN0ZW5lcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcHVzaCh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsIFwiUmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIikgOiB2b2lkIDA7XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICByZXBsYWNlKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3RvcnkucmVwbGFjZShcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhkZWx0YSkge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChpbmRleCArIGRlbHRhLCAwLCBlbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGdldCBpbmRleCgpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soKSB7XG4gICAgICBnbygtMSk7XG4gICAgfSxcbiAgICBmb3J3YXJkOiBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgICAgZ28oMSk7XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIGJsb2NrOiBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcnMucHVzaChibG9ja2VyKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cblxuZnVuY3Rpb24gcHJvbXB0QmVmb3JlVW5sb2FkKGV2ZW50KSB7XG4gIC8vIENhbmNlbCB0aGUgZXZlbnQuXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIENocm9tZSAoYW5kIGxlZ2FjeSBJRSkgcmVxdWlyZXMgcmV0dXJuVmFsdWUgdG8gYmUgc2V0LlxuXG4gIGV2ZW50LnJldHVyblZhbHVlID0gJyc7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50cygpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgIHJldHVybiBoYW5kbGVycy5sZW5ndGg7XG4gICAgfSxcblxuICAgIHB1c2g6IGZ1bmN0aW9uIHB1c2goZm4pIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goZm4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlciAhPT0gZm47XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoYXJnKSB7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4gJiYgZm4oYXJnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cclxuICpcclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVwYXRoXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoX3JlZikge1xuICB2YXIgX3JlZiRwYXRobmFtZSA9IF9yZWYucGF0aG5hbWUsXG4gICAgICBwYXRobmFtZSA9IF9yZWYkcGF0aG5hbWUgPT09IHZvaWQgMCA/ICcvJyA6IF9yZWYkcGF0aG5hbWUsXG4gICAgICBfcmVmJHNlYXJjaCA9IF9yZWYuc2VhcmNoLFxuICAgICAgc2VhcmNoID0gX3JlZiRzZWFyY2ggPT09IHZvaWQgMCA/ICcnIDogX3JlZiRzZWFyY2gsXG4gICAgICBfcmVmJGhhc2ggPSBfcmVmLmhhc2gsXG4gICAgICBoYXNoID0gX3JlZiRoYXNoID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcbiAgcmV0dXJuIHBhdGhuYW1lO1xufVxuLyoqXHJcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI3BhcnNlcGF0aFxyXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhcnNlZFBhdGggPSB7fTtcblxuICBpZiAocGF0aCkge1xuICAgIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTtcblxuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHZhciBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZignPycpO1xuXG4gICAgaWYgKHNlYXJjaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gcGF0aC5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAocGF0aCkge1xuICAgICAgcGFyc2VkUGF0aC5wYXRobmFtZSA9IHBhdGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnNlZFBhdGg7XG59XG5cbmV4cG9ydCB7IEFjdGlvbiwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBwYXJzZVBhdGggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4zLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgcGFyc2VQYXRoLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBY3Rpb24gfSBmcm9tICdoaXN0b3J5JztcbmV4cG9ydCB7IEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgcGFyc2VQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIGNyZWF0ZUVsZW1lbnQsIHVzZVN0YXRlLCB1c2VMYXlvdXRFZmZlY3QsIENoaWxkcmVuLCBpc1ZhbGlkRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2aWdhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIk5hdmlnYXRpb25cIjtcbn1cblxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuXG5jb25zdCBSb3V0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dCh7XG4gIG91dGxldDogbnVsbCxcbiAgbWF0Y2hlczogW11cbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVcIjtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI2dlbmVyYXRlcGF0aFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvOihcXHcrKS9nLCAoXywga2V5KSA9PiB7XG4gICAgIShwYXJhbXNba2V5XSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBwYXJhbXNba2V5XTtcbiAgfSkucmVwbGFjZSgvXFwvKlxcKiQvLCBfID0+IHBhcmFtc1tcIipcIl0gPT0gbnVsbCA/IFwiXCIgOiBwYXJhbXNbXCIqXCJdLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpKTtcbn1cbi8qKlxuICogQSBSb3V0ZU1hdGNoIGNvbnRhaW5zIGluZm8gYWJvdXQgaG93IGEgcm91dGUgbWF0Y2hlZCBhIFVSTC5cbiAqL1xuXG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWF0Y2hyb3V0ZXNcbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlbmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG5cbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG5cbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgcGF0aG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByb3V0ZS5wYXRoIHx8IFwiXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG5cbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICFtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gam9pblBhdGhzKFtwYXJlbnRQYXRoLCBtZXRhLnJlbGF0aXZlUGF0aF0pO1xuICAgIGxldCByb3V0ZXNNZXRhID0gcGFyZW50c01ldGEuY29uY2F0KG1ldGEpOyAvLyBBZGQgdGhlIGNoaWxkcmVuIGJlZm9yZSBhZGRpbmcgdGhpcyByb3V0ZSB0byB0aGUgYXJyYXkgc28gd2UgdHJhdmVyc2UgdGhlXG4gICAgLy8gcm91dGUgdHJlZSBkZXB0aC1maXJzdCBhbmQgY2hpbGQgcm91dGVzIGFwcGVhciBiZWZvcmUgdGhlaXIgcGFyZW50cyBpblxuICAgIC8vIHRoZSBcImZsYXR0ZW5lZFwiIHZlcnNpb24uXG5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgIShyb3V0ZS5pbmRleCAhPT0gdHJ1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9IC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG5cblxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG5cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cblxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5cbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID8gLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDogLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogQSBQYXRoUGF0dGVybiBpcyB1c2VkIHRvIG1hdGNoIG9uIHNvbWUgcG9ydGlvbiBvZiBhIFVSTCBwYXRobmFtZS5cbiAqL1xuXG5cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWF0Y2hwYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZSgobWVtbywgcGFyYW1OYW1lLCBpbmRleCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG5cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpIDogdm9pZCAwO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIihbXlxcXFwvXSspXCI7XG4gIH0pO1xuXG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtTmFtZXMucHVzaChcIipcIik7XG4gICAgcmVnZXhwU291cmNlICs9IHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIiA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgIDogXCIoPzpcXFxcLyguKyl8XFxcXC8qKSRcIjsgLy8gRG9uJ3QgaW5jbHVkZSB0aGUgLyBpbiBwYXJhbXNbXCIqXCJdXG4gIH0gZWxzZSB7XG4gICAgcmVnZXhwU291cmNlICs9IGVuZCA/IFwiXFxcXC8qJFwiIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICA6IC8vIE90aGVyd2lzZSwgbWF0Y2ggYSB3b3JkIGJvdW5kYXJ5IG9yIGEgcHJvY2VlZGluZyAvLiBUaGUgd29yZCBib3VuZGFyeSByZXN0cmljdHNcbiAgICAvLyBwYXJlbnQgcm91dGVzIHRvIG1hdGNoaW5nIG9ubHkgdGhlaXIgb3duIHdvcmRzIGFuZCBub3RoaW5nIG1vcmUsIGUuZy4gcGFyZW50XG4gICAgLy8gcm91dGUgXCIvaG9tZVwiIHNob3VsZCBub3QgbWF0Y2ggXCIvaG9tZTJcIi5cbiAgICAvLyBBZGRpdGlvbmFsbHksIGFsbG93IHBhdGhzIHN0YXJ0aW5nIHdpdGggYC5gLCBgLWAsIGB+YCwgYW5kIHVybC1lbmNvZGVkIGVudGl0aWVzLFxuICAgIC8vIGJ1dCBkbyBub3QgY29uc3VtZSB0aGUgY2hhcmFjdGVyIGluIHRoZSBtYXRjaGVkIHBhdGggc28gdGhleSBjYW4gbWF0Y2ggYWdhaW5zdFxuICAgIC8vIG5lc3RlZCBwYXRocy5cbiAgICBcIig/Oig/PVsufi1dfCVbMC05QS1GXXsyfSl8XFxcXGJ8XFxcXC98JClcIjtcbiAgfVxuXG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSwgcGFyYW1OYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXFxcIlwiICsgcGFyYW1OYW1lICsgXCJcXFwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZVwiICsgKFwiIHRoZSBzdHJpbmcgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgaXMgYSBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHlcIikgKyAoXCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3Jlc29sdmVwYXRoXG4gKi9cblxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSkge1xuICBsZXQgdG8gPSB0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG9BcmcpIDogdG9Bcmc7XG4gIGxldCB0b1BhdGhuYW1lID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHRvLnBhdGhuYW1lOyAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG5cbiAgbGV0IGZyb207XG5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9IC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cblxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIHRvIHZhbHVlIGhhZCBvbmUuXG5cbiAgaWYgKHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChiYXNlbmFtZS5sZW5ndGgpO1xuXG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKGJhc2VuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG59XG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcblxuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcblxuY29uc3Qgbm9ybWFsaXplSGFzaCA9IGhhc2ggPT4gIWhhc2ggfHwgaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaC5zdGFydHNXaXRoKFwiI1wiKSA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSB1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBoYXNoLFxuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaFxuICB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGxldCB0b1BhdGhuYW1lID0gZ2V0VG9QYXRobmFtZSh0byk7XG4gICAgbGV0IGVuZHNXaXRoU2xhc2ggPSB0b1BhdGhuYW1lICE9IG51bGwgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSArIChlbmRzV2l0aFNsYXNoID8gXCIvXCIgOiBcIlwiKSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIDxSb3V0ZXI+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaW5yb3V0ZXJjb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbG9jYXRpb24gb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIHRoZSBjdXJyZW50IFVSTCBpbiB3ZWJcbiAqIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IElmIHlvdSdyZSB1c2luZyB0aGlzIGl0IG1heSBtZWFuIHlvdSdyZSBkb2luZyBzb21lIG9mIHlvdXIgb3duXG4gKiBcInJvdXRpbmdcIiBpbiB5b3VyIGFwcCwgYW5kIHdlJ2QgbGlrZSB0byBrbm93IHdoYXQgeW91ciB1c2UgY2FzZSBpcy4gV2UgbWF5XG4gKiBiZSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGhpZ2hlci1sZXZlbCB0byBiZXR0ZXIgc3VpdCB5b3VyIG5lZWRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUxvY2F0aW9uKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gYWN0aW9uIHdoaWNoIGRlc2NyaWJlcyBob3cgdGhlIHJvdXRlciBjYW1lIHRvXG4gKiB0aGUgY3VycmVudCBsb2NhdGlvbiwgZWl0aGVyIGJ5IGEgcG9wLCBwdXNoLCBvciByZXBsYWNlIG9uIHRoZSBoaXN0b3J5IHN0YWNrLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGlvbnR5cGVcbiAqL1xuXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBVUkwgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUgbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiA8TmF2TGluaz4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VtYXRjaFxuICovXG5cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IHVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KG1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCIpIDogdm9pZCAwO1xuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSk7XG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cblxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlb3V0bGV0Y29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VvdXRsZXRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcblxuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuXG4gIHJldHVybiBvdXRsZXQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcGFyYW1zXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VyZXNvbHZlZHBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8pIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiA8T3V0bGV0PiB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXJvdXRlc1xuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBcIiArIFwiVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzKTtcbn1cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMpIHtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuXG4gIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiBudWxsO1xuICByZXR1cm4gbWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogbWF0Y2gucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkID8gbWF0Y2gucm91dGUuZWxlbWVudCA6IG91dGxldCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIG91dGxldCxcbiAgICAgICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlcy5jb25jYXQobWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKVxuICAgICAgfVxuICAgIH0pO1xuICB9LCBudWxsKTtcbn1cblxuLyoqXG4gKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI21lbW9yeXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleFxuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSB1c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMjtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbmF2aWdhdGUodG8sIHtcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNvdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG5cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogaW52YXJpYW50KGZhbHNlKSA7XG59XG5cbi8qKlxuICogUHJvdmlkZXMgbG9jYXRpb24gY29udGV4dCBmb3IgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbiAqXG4gKiBOb3RlOiBZb3UgdXN1YWxseSB3b24ndCByZW5kZXIgYSA8Um91dGVyPiBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIDxCcm93c2VyUm91dGVyPlxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgPFN0YXRpY1JvdXRlcj4gZm9yIHNlcnZlciByZW5kZXJpbmcuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZXJcbiAqL1xuZnVuY3Rpb24gUm91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICAgIGNoaWxkcmVuID0gbnVsbCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb25Qcm9wLFxuICAgIG5hdmlnYXRpb25UeXBlID0gQWN0aW9uLlBvcCxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wID0gZmFsc2VcbiAgfSA9IF9yZWYzO1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgYmFzZW5hbWUgPSBub3JtYWxpemVQYXRobmFtZShiYXNlbmFtZVByb3ApO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN0YXRlLFxuICAgICAga2V5XG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5XSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24gIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG5cbiAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiA8Um91dGU+IGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjQ7XG4gIHJldHVybiB1c2VSb3V0ZXMoY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSwgbG9jYXRpb24pO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNjcmVhdGVyb3V0ZXNmcm9tY2hpbGRyZW5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGhcbiAgICB9O1xuXG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXMsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJvdXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciBET00gdjYuMy4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUxheW91dEVmZmVjdCwgY3JlYXRlRWxlbWVudCwgZm9yd2FyZFJlZiwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB7IFJvdXRlciwgdXNlSHJlZiwgY3JlYXRlUGF0aCwgdXNlTG9jYXRpb24sIHVzZVJlc29sdmVkUGF0aCwgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgTmF2aWdhdGlvblR5cGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVzLCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIl0sXG4gICAgICBfZXhjbHVkZWQyID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImVuZFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJjaGlsZHJlblwiXTtcblxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgUm91dGVyIVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTVBPTkVOVFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmO1xuICBsZXQgaGlzdG9yeVJlZiA9IHVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvd1xuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gdXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWYzO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICBvbkNsaWNrLFxuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UgPSBmYWxzZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgdG9cbiAgfSA9IF9yZWY0LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY0LCBfZXhjbHVkZWQpO1xuXG4gIGxldCBocmVmID0gdXNlSHJlZih0byk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXRcbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG5cbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgIXJlbG9hZERvY3VtZW50KSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBjcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjUsIHJlZikge1xuICBsZXQge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgIGVuZCA9IGZhbHNlLFxuICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgdG8sXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY1LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY1LCBfZXhjbHVkZWQyKTtcblxuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCB0b1BhdGhuYW1lID0gcGF0aC5wYXRobmFtZTtcblxuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCI7XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuXG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7XG4gICAgICBpc0FjdGl2ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG5cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZVxuICB9KSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0b1xuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbih7XG4gICAgaXNBY3RpdmVcbiAgfSkgOiBjaGlsZHJlbik7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIT09LU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8pO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBMZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZS5cblxuICAgICAgbGV0IHJlcGxhY2UgPSAhIXJlcGxhY2VQcm9wIHx8IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSB1c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaCk7XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2hQYXJhbXM7XG4gIH0sIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IHVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgbmF2aWdhdGUoXCI/XCIgKyBjcmVhdGVTZWFyY2hQYXJhbXMobmV4dEluaXQpLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGVdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4xLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjbGFtcCA9IChtaW4sIG1heCkgPT4gKHYpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIG1heCksIG1pbik7XG5jb25zdCBzYW5pdGl6ZSA9ICh2KSA9PiAodiAlIDEgPyBOdW1iZXIodi50b0ZpeGVkKDUpKSA6IHYpO1xuY29uc3QgZmxvYXRSZWdleCA9IC8oLSk/KFtcXGRdKlxcLj9bXFxkXSkrL2c7XG5jb25zdCBjb2xvclJlZ2V4ID0gLygjWzAtOWEtZl17Nn18I1swLTlhLWZdezN9fCMoPzpbMC05YS1mXXsyfSl7Miw0fXwocmdifGhzbClhP1xcKCgtP1tcXGRcXC5dKyU/WyxcXHNdKyl7MiwzfVxccypcXC8qXFxzKltcXGRcXC5dKyU/XFwpKS9naTtcbmNvbnN0IHNpbmdsZUNvbG9yUmVnZXggPSAvXigjWzAtOWEtZl17M318Iyg/OlswLTlhLWZdezJ9KXsyLDR9fChyZ2J8aHNsKWE/XFwoKC0/W1xcZFxcLl0rJT9bLFxcc10rKXsyLDN9XFxzKlxcLypcXHMqW1xcZFxcLl0rJT9cXCkpJC9pO1xuZnVuY3Rpb24gaXNTdHJpbmcodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZyc7XG59XG5cbmNvbnN0IG51bWJlciA9IHtcbiAgICB0ZXN0OiAodikgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInLFxuICAgIHBhcnNlOiBwYXJzZUZsb2F0LFxuICAgIHRyYW5zZm9ybTogKHYpID0+IHYsXG59O1xuY29uc3QgYWxwaGEgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG51bWJlciksIHsgdHJhbnNmb3JtOiBjbGFtcCgwLCAxKSB9KTtcbmNvbnN0IHNjYWxlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXIpLCB7IGRlZmF1bHQ6IDEgfSk7XG5cbmNvbnN0IGNyZWF0ZVVuaXRUeXBlID0gKHVuaXQpID0+ICh7XG4gICAgdGVzdDogKHYpID0+IGlzU3RyaW5nKHYpICYmIHYuZW5kc1dpdGgodW5pdCkgJiYgdi5zcGxpdCgnICcpLmxlbmd0aCA9PT0gMSxcbiAgICBwYXJzZTogcGFyc2VGbG9hdCxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiBgJHt2fSR7dW5pdH1gLFxufSk7XG5jb25zdCBkZWdyZWVzID0gY3JlYXRlVW5pdFR5cGUoJ2RlZycpO1xuY29uc3QgcGVyY2VudCA9IGNyZWF0ZVVuaXRUeXBlKCclJyk7XG5jb25zdCBweCA9IGNyZWF0ZVVuaXRUeXBlKCdweCcpO1xuY29uc3QgdmggPSBjcmVhdGVVbml0VHlwZSgndmgnKTtcbmNvbnN0IHZ3ID0gY3JlYXRlVW5pdFR5cGUoJ3Z3Jyk7XG5jb25zdCBwcm9ncmVzc1BlcmNlbnRhZ2UgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBlcmNlbnQpLCB7IHBhcnNlOiAodikgPT4gcGVyY2VudC5wYXJzZSh2KSAvIDEwMCwgdHJhbnNmb3JtOiAodikgPT4gcGVyY2VudC50cmFuc2Zvcm0odiAqIDEwMCkgfSk7XG5cbmNvbnN0IGlzQ29sb3JTdHJpbmcgPSAodHlwZSwgdGVzdFByb3ApID0+ICh2KSA9PiB7XG4gICAgcmV0dXJuIEJvb2xlYW4oKGlzU3RyaW5nKHYpICYmIHNpbmdsZUNvbG9yUmVnZXgudGVzdCh2KSAmJiB2LnN0YXJ0c1dpdGgodHlwZSkpIHx8XG4gICAgICAgICh0ZXN0UHJvcCAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodiwgdGVzdFByb3ApKSk7XG59O1xuY29uc3Qgc3BsaXRDb2xvciA9IChhTmFtZSwgYk5hbWUsIGNOYW1lKSA9PiAodikgPT4ge1xuICAgIGlmICghaXNTdHJpbmcodikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IFthLCBiLCBjLCBhbHBoYV0gPSB2Lm1hdGNoKGZsb2F0UmVnZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIFthTmFtZV06IHBhcnNlRmxvYXQoYSksXG4gICAgICAgIFtiTmFtZV06IHBhcnNlRmxvYXQoYiksXG4gICAgICAgIFtjTmFtZV06IHBhcnNlRmxvYXQoYyksXG4gICAgICAgIGFscGhhOiBhbHBoYSAhPT0gdW5kZWZpbmVkID8gcGFyc2VGbG9hdChhbHBoYSkgOiAxLFxuICAgIH07XG59O1xuXG5jb25zdCBoc2xhID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoJ2hzbCcsICdodWUnKSxcbiAgICBwYXJzZTogc3BsaXRDb2xvcignaHVlJywgJ3NhdHVyYXRpb24nLCAnbGlnaHRuZXNzJyksXG4gICAgdHJhbnNmb3JtOiAoeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGE6IGFscGhhJDEgPSAxIH0pID0+IHtcbiAgICAgICAgcmV0dXJuICgnaHNsYSgnICtcbiAgICAgICAgICAgIE1hdGgucm91bmQoaHVlKSArXG4gICAgICAgICAgICAnLCAnICtcbiAgICAgICAgICAgIHBlcmNlbnQudHJhbnNmb3JtKHNhbml0aXplKHNhdHVyYXRpb24pKSArXG4gICAgICAgICAgICAnLCAnICtcbiAgICAgICAgICAgIHBlcmNlbnQudHJhbnNmb3JtKHNhbml0aXplKGxpZ2h0bmVzcykpICtcbiAgICAgICAgICAgICcsICcgK1xuICAgICAgICAgICAgc2FuaXRpemUoYWxwaGEudHJhbnNmb3JtKGFscGhhJDEpKSArXG4gICAgICAgICAgICAnKScpO1xuICAgIH0sXG59O1xuXG5jb25zdCBjbGFtcFJnYlVuaXQgPSBjbGFtcCgwLCAyNTUpO1xuY29uc3QgcmdiVW5pdCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbnVtYmVyKSwgeyB0cmFuc2Zvcm06ICh2KSA9PiBNYXRoLnJvdW5kKGNsYW1wUmdiVW5pdCh2KSkgfSk7XG5jb25zdCByZ2JhID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoJ3JnYicsICdyZWQnKSxcbiAgICBwYXJzZTogc3BsaXRDb2xvcigncmVkJywgJ2dyZWVuJywgJ2JsdWUnKSxcbiAgICB0cmFuc2Zvcm06ICh7IHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhOiBhbHBoYSQxID0gMSB9KSA9PiAncmdiYSgnICtcbiAgICAgICAgcmdiVW5pdC50cmFuc2Zvcm0ocmVkKSArXG4gICAgICAgICcsICcgK1xuICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShncmVlbikgK1xuICAgICAgICAnLCAnICtcbiAgICAgICAgcmdiVW5pdC50cmFuc2Zvcm0oYmx1ZSkgK1xuICAgICAgICAnLCAnICtcbiAgICAgICAgc2FuaXRpemUoYWxwaGEudHJhbnNmb3JtKGFscGhhJDEpKSArXG4gICAgICAgICcpJyxcbn07XG5cbmZ1bmN0aW9uIHBhcnNlSGV4KHYpIHtcbiAgICBsZXQgciA9ICcnO1xuICAgIGxldCBnID0gJyc7XG4gICAgbGV0IGIgPSAnJztcbiAgICBsZXQgYSA9ICcnO1xuICAgIGlmICh2Lmxlbmd0aCA+IDUpIHtcbiAgICAgICAgciA9IHYuc3Vic3RyKDEsIDIpO1xuICAgICAgICBnID0gdi5zdWJzdHIoMywgMik7XG4gICAgICAgIGIgPSB2LnN1YnN0cig1LCAyKTtcbiAgICAgICAgYSA9IHYuc3Vic3RyKDcsIDIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgciA9IHYuc3Vic3RyKDEsIDEpO1xuICAgICAgICBnID0gdi5zdWJzdHIoMiwgMSk7XG4gICAgICAgIGIgPSB2LnN1YnN0cigzLCAxKTtcbiAgICAgICAgYSA9IHYuc3Vic3RyKDQsIDEpO1xuICAgICAgICByICs9IHI7XG4gICAgICAgIGcgKz0gZztcbiAgICAgICAgYiArPSBiO1xuICAgICAgICBhICs9IGE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogcGFyc2VJbnQociwgMTYpLFxuICAgICAgICBncmVlbjogcGFyc2VJbnQoZywgMTYpLFxuICAgICAgICBibHVlOiBwYXJzZUludChiLCAxNiksXG4gICAgICAgIGFscGhhOiBhID8gcGFyc2VJbnQoYSwgMTYpIC8gMjU1IDogMSxcbiAgICB9O1xufVxuY29uc3QgaGV4ID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoJyMnKSxcbiAgICBwYXJzZTogcGFyc2VIZXgsXG4gICAgdHJhbnNmb3JtOiByZ2JhLnRyYW5zZm9ybSxcbn07XG5cbmNvbnN0IGNvbG9yID0ge1xuICAgIHRlc3Q6ICh2KSA9PiByZ2JhLnRlc3QodikgfHwgaGV4LnRlc3QodikgfHwgaHNsYS50ZXN0KHYpLFxuICAgIHBhcnNlOiAodikgPT4ge1xuICAgICAgICBpZiAocmdiYS50ZXN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmdiYS5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoc2xhLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiBoc2xhLnBhcnNlKHYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhleC5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNmb3JtOiAodikgPT4ge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodilcbiAgICAgICAgICAgID8gdlxuICAgICAgICAgICAgOiB2Lmhhc093blByb3BlcnR5KCdyZWQnKVxuICAgICAgICAgICAgICAgID8gcmdiYS50cmFuc2Zvcm0odilcbiAgICAgICAgICAgICAgICA6IGhzbGEudHJhbnNmb3JtKHYpO1xuICAgIH0sXG59O1xuXG5jb25zdCBjb2xvclRva2VuID0gJyR7Y30nO1xuY29uc3QgbnVtYmVyVG9rZW4gPSAnJHtufSc7XG5mdW5jdGlvbiB0ZXN0KHYpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgcmV0dXJuIChpc05hTih2KSAmJlxuICAgICAgICBpc1N0cmluZyh2KSAmJlxuICAgICAgICAoKF9iID0gKF9hID0gdi5tYXRjaChmbG9hdFJlZ2V4KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgKyAoKF9kID0gKF9jID0gdi5tYXRjaChjb2xvclJlZ2V4KSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlbmd0aCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMCkgPiAwKTtcbn1cbmZ1bmN0aW9uIGFuYWx5c2Uodikge1xuICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpXG4gICAgICAgIHYgPSBgJHt2fWA7XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgbGV0IG51bUNvbG9ycyA9IDA7XG4gICAgY29uc3QgY29sb3JzID0gdi5tYXRjaChjb2xvclJlZ2V4KTtcbiAgICBpZiAoY29sb3JzKSB7XG4gICAgICAgIG51bUNvbG9ycyA9IGNvbG9ycy5sZW5ndGg7XG4gICAgICAgIHYgPSB2LnJlcGxhY2UoY29sb3JSZWdleCwgY29sb3JUb2tlbik7XG4gICAgICAgIHZhbHVlcy5wdXNoKC4uLmNvbG9ycy5tYXAoY29sb3IucGFyc2UpKTtcbiAgICB9XG4gICAgY29uc3QgbnVtYmVycyA9IHYubWF0Y2goZmxvYXRSZWdleCk7XG4gICAgaWYgKG51bWJlcnMpIHtcbiAgICAgICAgdiA9IHYucmVwbGFjZShmbG9hdFJlZ2V4LCBudW1iZXJUb2tlbik7XG4gICAgICAgIHZhbHVlcy5wdXNoKC4uLm51bWJlcnMubWFwKG51bWJlci5wYXJzZSkpO1xuICAgIH1cbiAgICByZXR1cm4geyB2YWx1ZXMsIG51bUNvbG9ycywgdG9rZW5pc2VkOiB2IH07XG59XG5mdW5jdGlvbiBwYXJzZSh2KSB7XG4gICAgcmV0dXJuIGFuYWx5c2UodikudmFsdWVzO1xufVxuZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtZXIodikge1xuICAgIGNvbnN0IHsgdmFsdWVzLCBudW1Db2xvcnMsIHRva2VuaXNlZCB9ID0gYW5hbHlzZSh2KTtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBsZXQgb3V0cHV0ID0gdG9rZW5pc2VkO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShpIDwgbnVtQ29sb3JzID8gY29sb3JUb2tlbiA6IG51bWJlclRva2VuLCBpIDwgbnVtQ29sb3JzID8gY29sb3IudHJhbnNmb3JtKHZbaV0pIDogc2FuaXRpemUodltpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn1cbmNvbnN0IGNvbnZlcnROdW1iZXJzVG9aZXJvID0gKHYpID0+IHR5cGVvZiB2ID09PSAnbnVtYmVyJyA/IDAgOiB2O1xuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZU5vbmUodikge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHYpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVHJhbnNmb3JtZXIodik7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyKHBhcnNlZC5tYXAoY29udmVydE51bWJlcnNUb1plcm8pKTtcbn1cbmNvbnN0IGNvbXBsZXggPSB7IHRlc3QsIHBhcnNlLCBjcmVhdGVUcmFuc2Zvcm1lciwgZ2V0QW5pbWF0YWJsZU5vbmUgfTtcblxuY29uc3QgbWF4RGVmYXVsdHMgPSBuZXcgU2V0KFsnYnJpZ2h0bmVzcycsICdjb250cmFzdCcsICdzYXR1cmF0ZScsICdvcGFjaXR5J10pO1xuZnVuY3Rpb24gYXBwbHlEZWZhdWx0RmlsdGVyKHYpIHtcbiAgICBsZXQgW25hbWUsIHZhbHVlXSA9IHYuc2xpY2UoMCwgLTEpLnNwbGl0KCcoJyk7XG4gICAgaWYgKG5hbWUgPT09ICdkcm9wLXNoYWRvdycpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IFtudW1iZXJdID0gdmFsdWUubWF0Y2goZmxvYXRSZWdleCkgfHwgW107XG4gICAgaWYgKCFudW1iZXIpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IHVuaXQgPSB2YWx1ZS5yZXBsYWNlKG51bWJlciwgJycpO1xuICAgIGxldCBkZWZhdWx0VmFsdWUgPSBtYXhEZWZhdWx0cy5oYXMobmFtZSkgPyAxIDogMDtcbiAgICBpZiAobnVtYmVyICE9PSB2YWx1ZSlcbiAgICAgICAgZGVmYXVsdFZhbHVlICo9IDEwMDtcbiAgICByZXR1cm4gbmFtZSArICcoJyArIGRlZmF1bHRWYWx1ZSArIHVuaXQgKyAnKSc7XG59XG5jb25zdCBmdW5jdGlvblJlZ2V4ID0gLyhbYS16LV0qKVxcKC4qP1xcKS9nO1xuY29uc3QgZmlsdGVyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb21wbGV4KSwgeyBnZXRBbmltYXRhYmxlTm9uZTogKHYpID0+IHtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25zID0gdi5tYXRjaChmdW5jdGlvblJlZ2V4KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9ucyA/IGZ1bmN0aW9ucy5tYXAoYXBwbHlEZWZhdWx0RmlsdGVyKS5qb2luKCcgJykgOiB2O1xuICAgIH0gfSk7XG5cbmV4cG9ydHMuYWxwaGEgPSBhbHBoYTtcbmV4cG9ydHMuY29sb3IgPSBjb2xvcjtcbmV4cG9ydHMuY29tcGxleCA9IGNvbXBsZXg7XG5leHBvcnRzLmRlZ3JlZXMgPSBkZWdyZWVzO1xuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG5leHBvcnRzLmhleCA9IGhleDtcbmV4cG9ydHMuaHNsYSA9IGhzbGE7XG5leHBvcnRzLm51bWJlciA9IG51bWJlcjtcbmV4cG9ydHMucGVyY2VudCA9IHBlcmNlbnQ7XG5leHBvcnRzLnByb2dyZXNzUGVyY2VudGFnZSA9IHByb2dyZXNzUGVyY2VudGFnZTtcbmV4cG9ydHMucHggPSBweDtcbmV4cG9ydHMucmdiVW5pdCA9IHJnYlVuaXQ7XG5leHBvcnRzLnJnYmEgPSByZ2JhO1xuZXhwb3J0cy5zY2FsZSA9IHNjYWxlO1xuZXhwb3J0cy52aCA9IHZoO1xuZXhwb3J0cy52dyA9IHZ3O1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkKSBTW0ErK10gPSBkO2Vsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgZCkgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgIH0gZWxzZSBZID0gISFkIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWJicnxhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3BWYWxpZDtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydHt0eXBlT2YgYXMgZSxpc0VsZW1lbnQgYXMgdCxpc1ZhbGlkRWxlbWVudFR5cGUgYXMgbn1mcm9tXCJyZWFjdC1pc1wiO2ltcG9ydCByLHt1c2VTdGF0ZSBhcyBvLHVzZUNvbnRleHQgYXMgcyx1c2VNZW1vIGFzIGksdXNlRWZmZWN0IGFzIGEsdXNlUmVmIGFzIGMsY3JlYXRlRWxlbWVudCBhcyB1LHVzZURlYnVnVmFsdWUgYXMgbCx1c2VMYXlvdXRFZmZlY3QgYXMgZH1mcm9tXCJyZWFjdFwiO2ltcG9ydCBoIGZyb21cInNoYWxsb3dlcXVhbFwiO2ltcG9ydCBwIGZyb21cIkBlbW90aW9uL3N0eWxpc1wiO2ltcG9ydCBmIGZyb21cIkBlbW90aW9uL3VuaXRsZXNzXCI7aW1wb3J0IG0gZnJvbVwiQGVtb3Rpb24vaXMtcHJvcC12YWxpZFwiO2ltcG9ydCB5IGZyb21cImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI7ZnVuY3Rpb24gdigpe3JldHVybih2PU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIHIgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKSYmKGVbcl09bltyXSl9cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGc9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W2VbMF1dLHI9MCxvPXQubGVuZ3RoO3I8bztyKz0xKW4ucHVzaCh0W3JdLGVbcisxXSk7cmV0dXJuIG59LFM9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJbb2JqZWN0IE9iamVjdF1cIj09PSh0LnRvU3RyaW5nP3QudG9TdHJpbmcoKTpPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpJiYhZSh0KX0sdz1PYmplY3QuZnJlZXplKFtdKSxFPU9iamVjdC5mcmVlemUoe30pO2Z1bmN0aW9uIGIoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1mdW5jdGlvbiBfKGUpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwic3RyaW5nXCI9PXR5cGVvZiBlJiZlfHxlLmRpc3BsYXlOYW1lfHxlLm5hbWV8fFwiQ29tcG9uZW50XCJ9ZnVuY3Rpb24gTihlKXtyZXR1cm4gZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUuc3R5bGVkQ29tcG9uZW50SWR9dmFyIEE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJihwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfQVRUUnx8cHJvY2Vzcy5lbnYuU0NfQVRUUil8fFwiZGF0YS1zdHlsZWRcIixDPVwiNS4zLjVcIixJPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiSFRNTEVsZW1lbnRcImluIHdpbmRvdyxQPUJvb2xlYW4oXCJib29sZWFuXCI9PXR5cGVvZiBTQ19ESVNBQkxFX1NQRUVEWT9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZcIlwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZP1wiZmFsc2VcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmXCJcIiE9PXByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZP1wiZmFsc2VcIiE9PXByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZJiZwcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWTpcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKSxPPXt9LFI9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj97MTpcIkNhbm5vdCBjcmVhdGUgc3R5bGVkLWNvbXBvbmVudCBmb3IgY29tcG9uZW50OiAlcy5cXG5cXG5cIiwyOlwiQ2FuJ3QgY29sbGVjdCBzdHlsZXMgb25jZSB5b3UndmUgY29uc3VtZWQgYSBgU2VydmVyU3R5bGVTaGVldGAncyBzdHlsZXMhIGBTZXJ2ZXJTdHlsZVNoZWV0YCBpcyBhIG9uZSBvZmYgaW5zdGFuY2UgZm9yIGVhY2ggc2VydmVyLXNpZGUgcmVuZGVyIGN5Y2xlLlxcblxcbi0gQXJlIHlvdSB0cnlpbmcgdG8gcmV1c2UgaXQgYWNyb3NzIHJlbmRlcnM/XFxuLSBBcmUgeW91IGFjY2lkZW50YWxseSBjYWxsaW5nIGNvbGxlY3RTdHlsZXMgdHdpY2U/XFxuXFxuXCIsMzpcIlN0cmVhbWluZyBTU1IgaXMgb25seSBzdXBwb3J0ZWQgaW4gYSBOb2RlLmpzIGVudmlyb25tZW50OyBQbGVhc2UgZG8gbm90IHRyeSB0byBjYWxsIHRoaXMgbWV0aG9kIGluIHRoZSBicm93c2VyLlxcblxcblwiLDQ6XCJUaGUgYFN0eWxlU2hlZXRNYW5hZ2VyYCBleHBlY3RzIGEgdmFsaWQgdGFyZ2V0IG9yIHNoZWV0IHByb3AhXFxuXFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIGNsaWVudCBhbmQgaXMgeW91ciB0YXJnZXQgZmFsc3k/XFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIHNlcnZlciBhbmQgaXMgdGhlIHNoZWV0IGZhbHN5P1xcblxcblwiLDU6XCJUaGUgY2xvbmUgbWV0aG9kIGNhbm5vdCBiZSB1c2VkIG9uIHRoZSBjbGllbnQhXFxuXFxuLSBBcmUgeW91IHJ1bm5pbmcgaW4gYSBjbGllbnQtbGlrZSBlbnZpcm9ubWVudCBvbiB0aGUgc2VydmVyP1xcbi0gQXJlIHlvdSB0cnlpbmcgdG8gcnVuIFNTUiBvbiB0aGUgY2xpZW50P1xcblxcblwiLDY6XCJUcnlpbmcgdG8gaW5zZXJ0IGEgbmV3IHN0eWxlIHRhZywgYnV0IHRoZSBnaXZlbiBOb2RlIGlzIHVubW91bnRlZCFcXG5cXG4tIEFyZSB5b3UgdXNpbmcgYSBjdXN0b20gdGFyZ2V0IHRoYXQgaXNuJ3QgbW91bnRlZD9cXG4tIERvZXMgeW91ciBkb2N1bWVudCBub3QgaGF2ZSBhIHZhbGlkIGhlYWQgZWxlbWVudD9cXG4tIEhhdmUgeW91IGFjY2lkZW50YWxseSByZW1vdmVkIGEgc3R5bGUgdGFnIG1hbnVhbGx5P1xcblxcblwiLDc6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciBcInRoZW1lXCIgcHJvcCBmdW5jdGlvbiwgZS5nLlxcblxcbmBgYGpzXFxudGhlbWU9eygpID0+ICh7fSl9XFxuYGBgXFxuXFxuJyw4OidUaGVtZVByb3ZpZGVyOiBQbGVhc2UgbWFrZSB5b3VyIFwidGhlbWVcIiBwcm9wIGFuIG9iamVjdC5cXG5cXG4nLDk6XCJNaXNzaW5nIGRvY3VtZW50IGA8aGVhZD5gXFxuXFxuXCIsMTA6XCJDYW5ub3QgZmluZCBhIFN0eWxlU2hlZXQgaW5zdGFuY2UuIFVzdWFsbHkgdGhpcyBoYXBwZW5zIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb3BpZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgbG9hZGVkIGF0IG9uY2UuIENoZWNrIG91dCB0aGlzIGlzc3VlIGZvciBob3cgdG8gdHJvdWJsZXNob290IGFuZCBmaXggdGhlIGNvbW1vbiBjYXNlcyB3aGVyZSB0aGlzIHNpdHVhdGlvbiBjYW4gaGFwcGVuOiBodHRwczovL2dpdGh1Yi5jb20vc3R5bGVkLWNvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVudHMvaXNzdWVzLzE5NDEjaXNzdWVjb21tZW50LTQxNzg2MjAyMVxcblxcblwiLDExOlwiX1RoaXMgZXJyb3Igd2FzIHJlcGxhY2VkIHdpdGggYSBkZXYtdGltZSB3YXJuaW5nLCBpdCB3aWxsIGJlIGRlbGV0ZWQgZm9yIHY0IGZpbmFsLl8gW2NyZWF0ZUdsb2JhbFN0eWxlXSByZWNlaXZlZCBjaGlsZHJlbiB3aGljaCB3aWxsIG5vdCBiZSByZW5kZXJlZC4gUGxlYXNlIHVzZSB0aGUgY29tcG9uZW50IHdpdGhvdXQgcGFzc2luZyBjaGlsZHJlbiBlbGVtZW50cy5cXG5cXG5cIiwxMjpcIkl0IHNlZW1zIHlvdSBhcmUgaW50ZXJwb2xhdGluZyBhIGtleWZyYW1lIGRlY2xhcmF0aW9uICglcykgaW50byBhbiB1bnRhZ2dlZCBzdHJpbmcuIFRoaXMgd2FzIHN1cHBvcnRlZCBpbiBzdHlsZWQtY29tcG9uZW50cyB2MywgYnV0IGlzIG5vdCBsb25nZXIgc3VwcG9ydGVkIGluIHY0IGFzIGtleWZyYW1lcyBhcmUgbm93IGluamVjdGVkIG9uLWRlbWFuZC4gUGxlYXNlIHdyYXAgeW91ciBzdHJpbmcgaW4gdGhlIGNzc1xcXFxgXFxcXGAgaGVscGVyIHdoaWNoIGVuc3VyZXMgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgY29ycmVjdGx5LiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYXBpI2Nzc1xcblxcblwiLDEzOlwiJXMgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlxcblxcblwiLDE0OidUaGVtZVByb3ZpZGVyOiBcInRoZW1lXCIgcHJvcCBpcyByZXF1aXJlZC5cXG5cXG4nLDE1OlwiQSBzdHlsaXMgcGx1Z2luIGhhcyBiZWVuIHN1cHBsaWVkIHRoYXQgaXMgbm90IG5hbWVkLiBXZSBuZWVkIGEgbmFtZSBmb3IgZWFjaCBwbHVnaW4gdG8gYmUgYWJsZSB0byBwcmV2ZW50IHN0eWxpbmcgY29sbGlzaW9ucyBiZXR3ZWVuIGRpZmZlcmVudCBzdHlsaXMgY29uZmlndXJhdGlvbnMgd2l0aGluIHRoZSBzYW1lIGFwcC4gQmVmb3JlIHlvdSBwYXNzIHlvdXIgcGx1Z2luIHRvIGA8U3R5bGVTaGVldE1hbmFnZXIgc3R5bGlzUGx1Z2lucz17W119PmAsIHBsZWFzZSBtYWtlIHN1cmUgZWFjaCBwbHVnaW4gaXMgdW5pcXVlbHktbmFtZWQsIGUuZy5cXG5cXG5gYGBqc1xcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbXBvcnRlZFBsdWdpbiwgJ25hbWUnLCB7IHZhbHVlOiAnc29tZS11bmlxdWUtbmFtZScgfSk7XFxuYGBgXFxuXFxuXCIsMTY6XCJSZWFjaGVkIHRoZSBsaW1pdCBvZiBob3cgbWFueSBzdHlsZWQgY29tcG9uZW50cyBtYXkgYmUgY3JlYXRlZCBhdCBncm91cCAlcy5cXG5Zb3UgbWF5IG9ubHkgY3JlYXRlIHVwIHRvIDEsMDczLDc0MSw4MjQgY29tcG9uZW50cy4gSWYgeW91J3JlIGNyZWF0aW5nIGNvbXBvbmVudHMgZHluYW1pY2FsbHksXFxuYXMgZm9yIGluc3RhbmNlIGluIHlvdXIgcmVuZGVyIG1ldGhvZCB0aGVuIHlvdSBtYXkgYmUgcnVubmluZyBpbnRvIHRoaXMgbGltaXRhdGlvbi5cXG5cXG5cIiwxNzpcIkNTU1N0eWxlU2hlZXQgY291bGQgbm90IGJlIGZvdW5kIG9uIEhUTUxTdHlsZUVsZW1lbnQuXFxuSGFzIHN0eWxlZC1jb21wb25lbnRzJyBzdHlsZSB0YWcgYmVlbiB1bm1vdW50ZWQgb3IgYWx0ZXJlZCBieSBhbm90aGVyIHNjcmlwdD9cXG5cIn06e307ZnVuY3Rpb24gRCgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoPD0wP3ZvaWQgMDphcmd1bWVudHNbMF0sdD1bXSxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKz0xKXQucHVzaChuPDB8fGFyZ3VtZW50cy5sZW5ndGg8PW4/dm9pZCAwOmFyZ3VtZW50c1tuXSk7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZT1lLnJlcGxhY2UoLyVbYS16XS8sdCl9KSksZX1mdW5jdGlvbiBqKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTt0aHJvd1wicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/bmV3IEVycm9yKFwiQW4gZXJyb3Igb2NjdXJyZWQuIFNlZSBodHRwczovL2dpdC5pby9KVUlhRSNcIitlK1wiIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKyhuLmxlbmd0aD4wP1wiIEFyZ3M6IFwiK24uam9pbihcIiwgXCIpOlwiXCIpKTpuZXcgRXJyb3IoRC5hcHBseSh2b2lkIDAsW1JbZV1dLmNvbmNhdChuKSkudHJpbSgpKX12YXIgVD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5ncm91cFNpemVzPW5ldyBVaW50MzJBcnJheSg1MTIpLHRoaXMubGVuZ3RoPTUxMix0aGlzLnRhZz1lfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmluZGV4T2ZHcm91cD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPTA7bjxlO24rKyl0Kz10aGlzLmdyb3VwU2l6ZXNbbl07cmV0dXJuIHR9LHQuaW5zZXJ0UnVsZXM9ZnVuY3Rpb24oZSx0KXtpZihlPj10aGlzLmdyb3VwU2l6ZXMubGVuZ3RoKXtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzLHI9bi5sZW5ndGgsbz1yO2U+PW87KShvPDw9MSk8MCYmaigxNixcIlwiK2UpO3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkobyksdGhpcy5ncm91cFNpemVzLnNldChuKSx0aGlzLmxlbmd0aD1vO2Zvcih2YXIgcz1yO3M8bztzKyspdGhpcy5ncm91cFNpemVzW3NdPTB9Zm9yKHZhciBpPXRoaXMuaW5kZXhPZkdyb3VwKGUrMSksYT0wLGM9dC5sZW5ndGg7YTxjO2ErKyl0aGlzLnRhZy5pbnNlcnRSdWxlKGksdFthXSkmJih0aGlzLmdyb3VwU2l6ZXNbZV0rKyxpKyspfSx0LmNsZWFyR3JvdXA9ZnVuY3Rpb24oZSl7aWYoZTx0aGlzLmxlbmd0aCl7dmFyIHQ9dGhpcy5ncm91cFNpemVzW2VdLG49dGhpcy5pbmRleE9mR3JvdXAoZSkscj1uK3Q7dGhpcy5ncm91cFNpemVzW2VdPTA7Zm9yKHZhciBvPW47bzxyO28rKyl0aGlzLnRhZy5kZWxldGVSdWxlKG4pfX0sdC5nZXRHcm91cD1mdW5jdGlvbihlKXt2YXIgdD1cIlwiO2lmKGU+PXRoaXMubGVuZ3RofHwwPT09dGhpcy5ncm91cFNpemVzW2VdKXJldHVybiB0O2Zvcih2YXIgbj10aGlzLmdyb3VwU2l6ZXNbZV0scj10aGlzLmluZGV4T2ZHcm91cChlKSxvPXIrbixzPXI7czxvO3MrKyl0Kz10aGlzLnRhZy5nZXRSdWxlKHMpK1wiLyohc2MqL1xcblwiO3JldHVybiB0fSxlfSgpLHg9bmV3IE1hcCxrPW5ldyBNYXAsVj0xLEI9ZnVuY3Rpb24oZSl7aWYoeC5oYXMoZSkpcmV0dXJuIHguZ2V0KGUpO2Zvcig7ay5oYXMoVik7KVYrKzt2YXIgdD1WKys7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKCgwfHQpPDB8fHQ+MTw8MzApJiZqKDE2LFwiXCIrdCkseC5zZXQoZSx0KSxrLnNldCh0LGUpLHR9LHo9ZnVuY3Rpb24oZSl7cmV0dXJuIGsuZ2V0KGUpfSxNPWZ1bmN0aW9uKGUsdCl7dD49ViYmKFY9dCsxKSx4LnNldChlLHQpLGsuc2V0KHQsZSl9LEc9XCJzdHlsZVtcIitBKyddW2RhdGEtc3R5bGVkLXZlcnNpb249XCI1LjMuNVwiXScsTD1uZXcgUmVnRXhwKFwiXlwiK0ErJ1xcXFwuZyhcXFxcZCspXFxcXFtpZD1cIihbXFxcXHdcXFxcZC1dKylcIlxcXFxdLio/XCIoW15cIl0qKScpLEY9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcixvPW4uc3BsaXQoXCIsXCIpLHM9MCxpPW8ubGVuZ3RoO3M8aTtzKyspKHI9b1tzXSkmJmUucmVnaXN0ZXJOYW1lKHQscil9LFk9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49KHQudGV4dENvbnRlbnR8fFwiXCIpLnNwbGl0KFwiLyohc2MqL1xcblwiKSxyPVtdLG89MCxzPW4ubGVuZ3RoO288cztvKyspe3ZhciBpPW5bb10udHJpbSgpO2lmKGkpe3ZhciBhPWkubWF0Y2goTCk7aWYoYSl7dmFyIGM9MHxwYXJzZUludChhWzFdLDEwKSx1PWFbMl07MCE9PWMmJihNKHUsYyksRihlLHUsYVszXSksZS5nZXRUYWcoKS5pbnNlcnRSdWxlcyhjLHIpKSxyLmxlbmd0aD0wfWVsc2Ugci5wdXNoKGkpfX19LHE9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ2b2lkIDAhPT13aW5kb3cuX193ZWJwYWNrX25vbmNlX18/d2luZG93Ll9fd2VicGFja19ub25jZV9fOm51bGx9LEg9ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuaGVhZCxuPWV8fHQscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5jaGlsZE5vZGVzLG49dC5sZW5ndGg7bj49MDtuLS0pe3ZhciByPXRbbl07aWYociYmMT09PXIubm9kZVR5cGUmJnIuaGFzQXR0cmlidXRlKEEpKXJldHVybiByfX0obikscz12b2lkIDAhPT1vP28ubmV4dFNpYmxpbmc6bnVsbDtyLnNldEF0dHJpYnV0ZShBLFwiYWN0aXZlXCIpLHIuc2V0QXR0cmlidXRlKFwiZGF0YS1zdHlsZWQtdmVyc2lvblwiLFwiNS4zLjVcIik7dmFyIGk9cSgpO3JldHVybiBpJiZyLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsaSksbi5pbnNlcnRCZWZvcmUocixzKSxyfSwkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9SChlKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKSx0aGlzLnNoZWV0PWZ1bmN0aW9uKGUpe2lmKGUuc2hlZXQpcmV0dXJuIGUuc2hlZXQ7Zm9yKHZhciB0PWRvY3VtZW50LnN0eWxlU2hlZXRzLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07aWYoby5vd25lck5vZGU9PT1lKXJldHVybiBvfWooMTcpfSh0KSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIHRoaXMuc2hlZXQuaW5zZXJ0UnVsZSh0LGUpLHRoaXMubGVuZ3RoKyssITB9Y2F0Y2goZSl7cmV0dXJuITF9fSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5zaGVldC5kZWxldGVSdWxlKGUpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnNoZWV0LmNzc1J1bGVzW2VdO3JldHVybiB2b2lkIDAhPT10JiZcInN0cmluZ1wiPT10eXBlb2YgdC5jc3NUZXh0P3QuY3NzVGV4dDpcIlwifSxlfSgpLFc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1IKGUpO3RoaXMubm9kZXM9dC5jaGlsZE5vZGVzLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe2lmKGU8PXRoaXMubGVuZ3RoJiZlPj0wKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSxyPXRoaXMubm9kZXNbZV07cmV0dXJuIHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUobixyfHxudWxsKSx0aGlzLmxlbmd0aCsrLCEwfXJldHVybiExfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbZV0pLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLm5vZGVzW2VdLnRleHRDb250ZW50OlwiXCJ9LGV9KCksVT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5ydWxlcz1bXSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw9dGhpcy5sZW5ndGgmJih0aGlzLnJ1bGVzLnNwbGljZShlLDAsdCksdGhpcy5sZW5ndGgrKywhMCl9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnJ1bGVzLnNwbGljZShlLDEpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLnJ1bGVzW2VdOlwiXCJ9LGV9KCksSj1JLFg9e2lzU2VydmVyOiFJLHVzZUNTU09NSW5qZWN0aW9uOiFQfSxaPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dm9pZCAwPT09ZSYmKGU9RSksdm9pZCAwPT09dCYmKHQ9e30pLHRoaXMub3B0aW9ucz12KHt9LFgse30sZSksdGhpcy5ncz10LHRoaXMubmFtZXM9bmV3IE1hcChuKSx0aGlzLnNlcnZlcj0hIWUuaXNTZXJ2ZXIsIXRoaXMuc2VydmVyJiZJJiZKJiYoSj0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChHKSxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO28mJlwiYWN0aXZlXCIhPT1vLmdldEF0dHJpYnV0ZShBKSYmKFkoZSxvKSxvLnBhcmVudE5vZGUmJm8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSl9fSh0aGlzKSl9ZS5yZWdpc3RlcklkPWZ1bmN0aW9uKGUpe3JldHVybiBCKGUpfTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSxuZXcgZSh2KHt9LHRoaXMub3B0aW9ucyx7fSx0KSx0aGlzLmdzLG4mJnRoaXMubmFtZXN8fHZvaWQgMCl9LHQuYWxsb2NhdGVHU0luc3RhbmNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdzW2VdPSh0aGlzLmdzW2VdfHwwKSsxfSx0LmdldFRhZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRhZ3x8KHRoaXMudGFnPShuPSh0PXRoaXMub3B0aW9ucykuaXNTZXJ2ZXIscj10LnVzZUNTU09NSW5qZWN0aW9uLG89dC50YXJnZXQsZT1uP25ldyBVKG8pOnI/bmV3ICQobyk6bmV3IFcobyksbmV3IFQoZSkpKTt2YXIgZSx0LG4scixvfSx0Lmhhc05hbWVGb3JJZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuaGFzKHQpfSx0LnJlZ2lzdGVyTmFtZT1mdW5jdGlvbihlLHQpe2lmKEIoZSksdGhpcy5uYW1lcy5oYXMoZSkpdGhpcy5uYW1lcy5nZXQoZSkuYWRkKHQpO2Vsc2V7dmFyIG49bmV3IFNldDtuLmFkZCh0KSx0aGlzLm5hbWVzLnNldChlLG4pfX0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQsbil7dGhpcy5yZWdpc3Rlck5hbWUoZSx0KSx0aGlzLmdldFRhZygpLmluc2VydFJ1bGVzKEIoZSksbil9LHQuY2xlYXJOYW1lcz1mdW5jdGlvbihlKXt0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuY2xlYXIoKX0sdC5jbGVhclJ1bGVzPWZ1bmN0aW9uKGUpe3RoaXMuZ2V0VGFnKCkuY2xlYXJHcm91cChCKGUpKSx0aGlzLmNsZWFyTmFtZXMoZSl9LHQuY2xlYXJUYWc9ZnVuY3Rpb24oKXt0aGlzLnRhZz12b2lkIDB9LHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuZ2V0VGFnKCksbj10Lmxlbmd0aCxyPVwiXCIsbz0wO288bjtvKyspe3ZhciBzPXoobyk7aWYodm9pZCAwIT09cyl7dmFyIGk9ZS5uYW1lcy5nZXQocyksYT10LmdldEdyb3VwKG8pO2lmKGkmJmEmJmkuc2l6ZSl7dmFyIGM9QStcIi5nXCIrbysnW2lkPVwiJytzKydcIl0nLHU9XCJcIjt2b2lkIDAhPT1pJiZpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UubGVuZ3RoPjAmJih1Kz1lK1wiLFwiKX0pKSxyKz1cIlwiK2ErYysne2NvbnRlbnQ6XCInK3UrJ1wifS8qIXNjKi9cXG4nfX19cmV0dXJuIHJ9KHRoaXMpfSxlfSgpLEs9LyhhKShkKS9naSxRPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUrKGU+MjU/Mzk6OTcpKX07ZnVuY3Rpb24gZWUoZSl7dmFyIHQsbj1cIlwiO2Zvcih0PU1hdGguYWJzKGUpO3Q+NTI7dD10LzUyfDApbj1RKHQlNTIpK247cmV0dXJuKFEodCU1MikrbikucmVwbGFjZShLLFwiJDEtJDJcIil9dmFyIHRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXQubGVuZ3RoO247KWU9MzMqZV50LmNoYXJDb2RlQXQoLS1uKTtyZXR1cm4gZX0sbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRlKDUzODEsZSl9O2Z1bmN0aW9uIHJlKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl7dmFyIG49ZVt0XTtpZihiKG4pJiYhTihuKSlyZXR1cm4hMX1yZXR1cm4hMH12YXIgb2U9bmUoXCI1LjMuNVwiKSxzZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMucnVsZXM9ZSx0aGlzLnN0YXRpY1J1bGVzSWQ9XCJcIix0aGlzLmlzU3RhdGljPVwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih2b2lkIDA9PT1ufHxuLmlzU3RhdGljKSYmcmUoZSksdGhpcy5jb21wb25lbnRJZD10LHRoaXMuYmFzZUhhc2g9dGUob2UsdCksdGhpcy5iYXNlU3R5bGU9bixaLnJlZ2lzdGVySWQodCl9cmV0dXJuIGUucHJvdG90eXBlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLmNvbXBvbmVudElkLG89W107aWYodGhpcy5iYXNlU3R5bGUmJm8ucHVzaCh0aGlzLmJhc2VTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhlLHQsbikpLHRoaXMuaXNTdGF0aWMmJiFuLmhhc2gpaWYodGhpcy5zdGF0aWNSdWxlc0lkJiZ0Lmhhc05hbWVGb3JJZChyLHRoaXMuc3RhdGljUnVsZXNJZCkpby5wdXNoKHRoaXMuc3RhdGljUnVsZXNJZCk7ZWxzZXt2YXIgcz1OZSh0aGlzLnJ1bGVzLGUsdCxuKS5qb2luKFwiXCIpLGk9ZWUodGUodGhpcy5iYXNlSGFzaCxzKT4+PjApO2lmKCF0Lmhhc05hbWVGb3JJZChyLGkpKXt2YXIgYT1uKHMsXCIuXCIraSx2b2lkIDAscik7dC5pbnNlcnRSdWxlcyhyLGksYSl9by5wdXNoKGkpLHRoaXMuc3RhdGljUnVsZXNJZD1pfWVsc2V7Zm9yKHZhciBjPXRoaXMucnVsZXMubGVuZ3RoLHU9dGUodGhpcy5iYXNlSGFzaCxuLmhhc2gpLGw9XCJcIixkPTA7ZDxjO2QrKyl7dmFyIGg9dGhpcy5ydWxlc1tkXTtpZihcInN0cmluZ1wiPT10eXBlb2YgaClsKz1oLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih1PXRlKHUsaCtkKSk7ZWxzZSBpZihoKXt2YXIgcD1OZShoLGUsdCxuKSxmPUFycmF5LmlzQXJyYXkocCk/cC5qb2luKFwiXCIpOnA7dT10ZSh1LGYrZCksbCs9Zn19aWYobCl7dmFyIG09ZWUodT4+PjApO2lmKCF0Lmhhc05hbWVGb3JJZChyLG0pKXt2YXIgeT1uKGwsXCIuXCIrbSx2b2lkIDAscik7dC5pbnNlcnRSdWxlcyhyLG0seSl9by5wdXNoKG0pfX1yZXR1cm4gby5qb2luKFwiIFwiKX0sZX0oKSxpZT0vXlxccypcXC9cXC8uKiQvZ20sYWU9W1wiOlwiLFwiW1wiLFwiLlwiLFwiI1wiXTtmdW5jdGlvbiBjZShlKXt2YXIgdCxuLHIsbyxzPXZvaWQgMD09PWU/RTplLGk9cy5vcHRpb25zLGE9dm9pZCAwPT09aT9FOmksYz1zLnBsdWdpbnMsdT12b2lkIDA9PT1jP3c6YyxsPW5ldyBwKGEpLGQ9W10saD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe2lmKHQpdHJ5e2UodCtcIn1cIil9Y2F0Y2goZSl7fX1yZXR1cm4gZnVuY3Rpb24obixyLG8scyxpLGEsYyx1LGwsZCl7c3dpdGNoKG4pe2Nhc2UgMTppZigwPT09bCYmNjQ9PT1yLmNoYXJDb2RlQXQoMCkpcmV0dXJuIGUocitcIjtcIiksXCJcIjticmVhaztjYXNlIDI6aWYoMD09PXUpcmV0dXJuIHIrXCIvKnwqL1wiO2JyZWFrO2Nhc2UgMzpzd2l0Y2godSl7Y2FzZSAxMDI6Y2FzZSAxMTI6cmV0dXJuIGUob1swXStyKSxcIlwiO2RlZmF1bHQ6cmV0dXJuIHIrKDA9PT1kP1wiLyp8Ki9cIjpcIlwiKX1jYXNlLTI6ci5zcGxpdChcIi8qfCovfVwiKS5mb3JFYWNoKHQpfX19KChmdW5jdGlvbihlKXtkLnB1c2goZSl9KSksZj1mdW5jdGlvbihlLHIscyl7cmV0dXJuIDA9PT1yJiYtMSE9PWFlLmluZGV4T2Yoc1tuLmxlbmd0aF0pfHxzLm1hdGNoKG8pP2U6XCIuXCIrdH07ZnVuY3Rpb24gbShlLHMsaSxhKXt2b2lkIDA9PT1hJiYoYT1cIiZcIik7dmFyIGM9ZS5yZXBsYWNlKGllLFwiXCIpLHU9cyYmaT9pK1wiIFwiK3MrXCIgeyBcIitjK1wiIH1cIjpjO3JldHVybiB0PWEsbj1zLHI9bmV3IFJlZ0V4cChcIlxcXFxcIituK1wiXFxcXGJcIixcImdcIiksbz1uZXcgUmVnRXhwKFwiKFxcXFxcIituK1wiXFxcXGIpezIsfVwiKSxsKGl8fCFzP1wiXCI6cyx1KX1yZXR1cm4gbC51c2UoW10uY29uY2F0KHUsW2Z1bmN0aW9uKGUsdCxvKXsyPT09ZSYmby5sZW5ndGgmJm9bMF0ubGFzdEluZGV4T2Yobik+MCYmKG9bMF09b1swXS5yZXBsYWNlKHIsZikpfSxoLGZ1bmN0aW9uKGUpe2lmKC0yPT09ZSl7dmFyIHQ9ZDtyZXR1cm4gZD1bXSx0fX1dKSksbS5oYXNoPXUubGVuZ3RoP3UucmVkdWNlKChmdW5jdGlvbihlLHQpe3JldHVybiB0Lm5hbWV8fGooMTUpLHRlKGUsdC5uYW1lKX0pLDUzODEpLnRvU3RyaW5nKCk6XCJcIixtfXZhciB1ZT1yLmNyZWF0ZUNvbnRleHQoKSxsZT11ZS5Db25zdW1lcixkZT1yLmNyZWF0ZUNvbnRleHQoKSxoZT0oZGUuQ29uc3VtZXIsbmV3IFopLHBlPWNlKCk7ZnVuY3Rpb24gZmUoKXtyZXR1cm4gcyh1ZSl8fGhlfWZ1bmN0aW9uIG1lKCl7cmV0dXJuIHMoZGUpfHxwZX1mdW5jdGlvbiB5ZShlKXt2YXIgdD1vKGUuc3R5bGlzUGx1Z2lucyksbj10WzBdLHM9dFsxXSxjPWZlKCksdT1pKChmdW5jdGlvbigpe3ZhciB0PWM7cmV0dXJuIGUuc2hlZXQ/dD1lLnNoZWV0OmUudGFyZ2V0JiYodD10LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoe3RhcmdldDplLnRhcmdldH0sITEpKSxlLmRpc2FibGVDU1NPTUluamVjdGlvbiYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt1c2VDU1NPTUluamVjdGlvbjohMX0pKSx0fSksW2UuZGlzYWJsZUNTU09NSW5qZWN0aW9uLGUuc2hlZXQsZS50YXJnZXRdKSxsPWkoKGZ1bmN0aW9uKCl7cmV0dXJuIGNlKHtvcHRpb25zOntwcmVmaXg6IWUuZGlzYWJsZVZlbmRvclByZWZpeGVzfSxwbHVnaW5zOm59KX0pLFtlLmRpc2FibGVWZW5kb3JQcmVmaXhlcyxuXSk7cmV0dXJuIGEoKGZ1bmN0aW9uKCl7aChuLGUuc3R5bGlzUGx1Z2lucyl8fHMoZS5zdHlsaXNQbHVnaW5zKX0pLFtlLnN0eWxpc1BsdWdpbnNdKSxyLmNyZWF0ZUVsZW1lbnQodWUuUHJvdmlkZXIse3ZhbHVlOnV9LHIuY3JlYXRlRWxlbWVudChkZS5Qcm92aWRlcix7dmFsdWU6bH0sXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9yLkNoaWxkcmVuLm9ubHkoZS5jaGlsZHJlbik6ZS5jaGlsZHJlbikpfXZhciB2ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbj10aGlzO3RoaXMuaW5qZWN0PWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9cGUpO3ZhciByPW4ubmFtZSt0Lmhhc2g7ZS5oYXNOYW1lRm9ySWQobi5pZCxyKXx8ZS5pbnNlcnRSdWxlcyhuLmlkLHIsdChuLnJ1bGVzLHIsXCJAa2V5ZnJhbWVzXCIpKX0sdGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBqKDEyLFN0cmluZyhuLm5hbWUpKX0sdGhpcy5uYW1lPWUsdGhpcy5pZD1cInNjLWtleWZyYW1lcy1cIitlLHRoaXMucnVsZXM9dH1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0TmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9cGUpLHRoaXMubmFtZStlLmhhc2h9LGV9KCksZ2U9LyhbQS1aXSkvLFNlPS8oW0EtWl0pL2csd2U9L15tcy0vLEVlPWZ1bmN0aW9uKGUpe3JldHVyblwiLVwiK2UudG9Mb3dlckNhc2UoKX07ZnVuY3Rpb24gYmUoZSl7cmV0dXJuIGdlLnRlc3QoZSk/ZS5yZXBsYWNlKFNlLEVlKS5yZXBsYWNlKHdlLFwiLW1zLVwiKTplfXZhciBfZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8ITE9PT1lfHxcIlwiPT09ZX07ZnVuY3Rpb24gTmUoZSxuLHIsbyl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciBzLGk9W10sYT0wLGM9ZS5sZW5ndGg7YTxjO2ErPTEpXCJcIiE9PShzPU5lKGVbYV0sbixyLG8pKSYmKEFycmF5LmlzQXJyYXkocyk/aS5wdXNoLmFwcGx5KGkscyk6aS5wdXNoKHMpKTtyZXR1cm4gaX1pZihfZShlKSlyZXR1cm5cIlwiO2lmKE4oZSkpcmV0dXJuXCIuXCIrZS5zdHlsZWRDb21wb25lbnRJZDtpZihiKGUpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZihsPWUpfHxsLnByb3RvdHlwZSYmbC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudHx8IW4pcmV0dXJuIGU7dmFyIHU9ZShuKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ0KHUpJiZjb25zb2xlLndhcm4oXyhlKStcIiBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXCIpLE5lKHUsbixyLG8pfXZhciBsO3JldHVybiBlIGluc3RhbmNlb2YgdmU/cj8oZS5pbmplY3QocixvKSxlLmdldE5hbWUobykpOmU6UyhlKT9mdW5jdGlvbiBlKHQsbil7dmFyIHIsbyxzPVtdO2Zvcih2YXIgaSBpbiB0KXQuaGFzT3duUHJvcGVydHkoaSkmJiFfZSh0W2ldKSYmKEFycmF5LmlzQXJyYXkodFtpXSkmJnRbaV0uaXNDc3N8fGIodFtpXSk/cy5wdXNoKGJlKGkpK1wiOlwiLHRbaV0sXCI7XCIpOlModFtpXSk/cy5wdXNoLmFwcGx5KHMsZSh0W2ldLGkpKTpzLnB1c2goYmUoaSkrXCI6IFwiKyhyPWksbnVsbD09KG89dFtpXSl8fFwiYm9vbGVhblwiPT10eXBlb2Ygb3x8XCJcIj09PW8/XCJcIjpcIm51bWJlclwiIT10eXBlb2Ygb3x8MD09PW98fHIgaW4gZj9TdHJpbmcobykudHJpbSgpOm8rXCJweFwiKStcIjtcIikpO3JldHVybiBuP1tuK1wiIHtcIl0uY29uY2F0KHMsW1wifVwiXSk6c30oZSk6ZS50b1N0cmluZygpfXZhciBBZT1mdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKSYmKGUuaXNDc3M9ITApLGV9O2Z1bmN0aW9uIENlKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gYihlKXx8UyhlKT9BZShOZShnKHcsW2VdLmNvbmNhdChuKSkpKTowPT09bi5sZW5ndGgmJjE9PT1lLmxlbmd0aCYmXCJzdHJpbmdcIj09dHlwZW9mIGVbMF0/ZTpBZShOZShnKGUsbikpKX12YXIgSWU9L2ludmFsaWQgaG9vayBjYWxsL2ksUGU9bmV3IFNldCxPZT1mdW5jdGlvbihlLHQpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBuPVwiVGhlIGNvbXBvbmVudCBcIitlKyh0Pycgd2l0aCB0aGUgaWQgb2YgXCInK3QrJ1wiJzpcIlwiKStcIiBoYXMgYmVlbiBjcmVhdGVkIGR5bmFtaWNhbGx5LlxcbllvdSBtYXkgc2VlIHRoaXMgd2FybmluZyBiZWNhdXNlIHlvdSd2ZSBjYWxsZWQgc3R5bGVkIGluc2lkZSBhbm90aGVyIGNvbXBvbmVudC5cXG5UbyByZXNvbHZlIHRoaXMgb25seSBjcmVhdGUgbmV3IFN0eWxlZENvbXBvbmVudHMgb3V0c2lkZSBvZiBhbnkgcmVuZGVyIG1ldGhvZCBhbmQgZnVuY3Rpb24gY29tcG9uZW50LlwiLHI9Y29uc29sZS5lcnJvcjt0cnl7dmFyIG89ITA7Y29uc29sZS5lcnJvcj1mdW5jdGlvbihlKXtpZihJZS50ZXN0KGUpKW89ITEsUGUuZGVsZXRlKG4pO2Vsc2V7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscz1uZXcgQXJyYXkodD4xP3QtMTowKSxpPTE7aTx0O2krKylzW2ktMV09YXJndW1lbnRzW2ldO3IuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQocykpfX0sYygpLG8mJiFQZS5oYXMobikmJihjb25zb2xlLndhcm4obiksUGUuYWRkKG4pKX1jYXRjaChlKXtJZS50ZXN0KGUubWVzc2FnZSkmJlBlLmRlbGV0ZShuKX1maW5hbGx5e2NvbnNvbGUuZXJyb3I9cn19fSxSZT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPUUpLGUudGhlbWUhPT1uLnRoZW1lJiZlLnRoZW1lfHx0fHxuLnRoZW1lfSxEZT0vWyFcIiMkJSYnKCkqKywuLzo7PD0+P0BbXFxcXFxcXV5ge3x9fi1dKy9nLGplPS8oXi18LSQpL2c7ZnVuY3Rpb24gVGUoZSl7cmV0dXJuIGUucmVwbGFjZShEZSxcIi1cIikucmVwbGFjZShqZSxcIlwiKX12YXIgeGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGVlKG5lKGUpPj4+MCl9O2Z1bmN0aW9uIGtlKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYoXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8ZS5jaGFyQXQoMCk9PT1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpKX12YXIgVmU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZXx8XCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiYhQXJyYXkuaXNBcnJheShlKX0sQmU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJfX3Byb3RvX19cIiE9PWUmJlwiY29uc3RydWN0b3JcIiE9PWUmJlwicHJvdG90eXBlXCIhPT1lfTtmdW5jdGlvbiB6ZShlLHQsbil7dmFyIHI9ZVtuXTtWZSh0KSYmVmUocik/TWUocix0KTplW25dPXR9ZnVuY3Rpb24gTWUoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO2Zvcih2YXIgbz0wLHM9bjtvPHMubGVuZ3RoO28rKyl7dmFyIGk9c1tvXTtpZihWZShpKSlmb3IodmFyIGEgaW4gaSlCZShhKSYmemUoZSxpW2FdLGEpfXJldHVybiBlfXZhciBHZT1yLmNyZWF0ZUNvbnRleHQoKSxMZT1HZS5Db25zdW1lcjtmdW5jdGlvbiBGZShlKXt2YXIgdD1zKEdlKSxuPWkoKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuIGooMTQpO2lmKGIoZSkpe3ZhciBuPWUodCk7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8bnVsbCE9PW4mJiFBcnJheS5pc0FycmF5KG4pJiZcIm9iamVjdFwiPT10eXBlb2Ygbj9uOmooNyl9cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl8fFwib2JqZWN0XCIhPXR5cGVvZiBlP2ooOCk6dD92KHt9LHQse30sZSk6ZX0oZS50aGVtZSx0KX0pLFtlLnRoZW1lLHRdKTtyZXR1cm4gZS5jaGlsZHJlbj9yLmNyZWF0ZUVsZW1lbnQoR2UuUHJvdmlkZXIse3ZhbHVlOm59LGUuY2hpbGRyZW4pOm51bGx9dmFyIFllPXt9O2Z1bmN0aW9uIHFlKGUsdCxuKXt2YXIgbz1OKGUpLGk9IWtlKGUpLGE9dC5hdHRycyxjPXZvaWQgMD09PWE/dzphLGQ9dC5jb21wb25lbnRJZCxoPXZvaWQgMD09PWQ/ZnVuY3Rpb24oZSx0KXt2YXIgbj1cInN0cmluZ1wiIT10eXBlb2YgZT9cInNjXCI6VGUoZSk7WWVbbl09KFllW25dfHwwKSsxO3ZhciByPW4rXCItXCIreGUoXCI1LjMuNVwiK24rWWVbbl0pO3JldHVybiB0P3QrXCItXCIrcjpyfSh0LmRpc3BsYXlOYW1lLHQucGFyZW50Q29tcG9uZW50SWQpOmQscD10LmRpc3BsYXlOYW1lLGY9dm9pZCAwPT09cD9mdW5jdGlvbihlKXtyZXR1cm4ga2UoZSk/XCJzdHlsZWQuXCIrZTpcIlN0eWxlZChcIitfKGUpK1wiKVwifShlKTpwLGc9dC5kaXNwbGF5TmFtZSYmdC5jb21wb25lbnRJZD9UZSh0LmRpc3BsYXlOYW1lKStcIi1cIit0LmNvbXBvbmVudElkOnQuY29tcG9uZW50SWR8fGgsUz1vJiZlLmF0dHJzP0FycmF5LnByb3RvdHlwZS5jb25jYXQoZS5hdHRycyxjKS5maWx0ZXIoQm9vbGVhbik6YyxBPXQuc2hvdWxkRm9yd2FyZFByb3A7byYmZS5zaG91bGRGb3J3YXJkUHJvcCYmKEE9dC5zaG91bGRGb3J3YXJkUHJvcD9mdW5jdGlvbihuLHIsbyl7cmV0dXJuIGUuc2hvdWxkRm9yd2FyZFByb3AobixyLG8pJiZ0LnNob3VsZEZvcndhcmRQcm9wKG4scixvKX06ZS5zaG91bGRGb3J3YXJkUHJvcCk7dmFyIEMsST1uZXcgc2UobixnLG8/ZS5jb21wb25lbnRTdHlsZTp2b2lkIDApLFA9SS5pc1N0YXRpYyYmMD09PWMubGVuZ3RoLE89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSx0LG4scil7dmFyIG89ZS5hdHRycyxpPWUuY29tcG9uZW50U3R5bGUsYT1lLmRlZmF1bHRQcm9wcyxjPWUuZm9sZGVkQ29tcG9uZW50SWRzLGQ9ZS5zaG91bGRGb3J3YXJkUHJvcCxoPWUuc3R5bGVkQ29tcG9uZW50SWQscD1lLnRhcmdldDtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZsKGgpO3ZhciBmPWZ1bmN0aW9uKGUsdCxuKXt2b2lkIDA9PT1lJiYoZT1FKTt2YXIgcj12KHt9LHQse3RoZW1lOmV9KSxvPXt9O3JldHVybiBuLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0LG4scyxpPWU7Zm9yKHQgaW4gYihpKSYmKGk9aShyKSksaSlyW3RdPW9bdF09XCJjbGFzc05hbWVcIj09PXQ/KG49b1t0XSxzPWlbdF0sbiYmcz9uK1wiIFwiK3M6bnx8cyk6aVt0XX0pKSxbcixvXX0oUmUodCxzKEdlKSxhKXx8RSx0LG8pLHk9ZlswXSxnPWZbMV0sUz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1mZSgpLHM9bWUoKSxpPXQ/ZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhFLG8scyk6ZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhuLG8scyk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmbChpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYhdCYmciYmcihpKSxpfShpLHIseSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2Uud2FyblRvb01hbnlDbGFzc2VzOnZvaWQgMCksdz1uLF89Zy4kYXN8fHQuJGFzfHxnLmFzfHx0LmFzfHxwLE49a2UoXyksQT1nIT09dD92KHt9LHQse30sZyk6dCxDPXt9O2Zvcih2YXIgSSBpbiBBKVwiJFwiIT09SVswXSYmXCJhc1wiIT09SSYmKFwiZm9yd2FyZGVkQXNcIj09PUk/Qy5hcz1BW0ldOihkP2QoSSxtLF8pOiFOfHxtKEkpKSYmKENbSV09QVtJXSkpO3JldHVybiB0LnN0eWxlJiZnLnN0eWxlIT09dC5zdHlsZSYmKEMuc3R5bGU9dih7fSx0LnN0eWxlLHt9LGcuc3R5bGUpKSxDLmNsYXNzTmFtZT1BcnJheS5wcm90b3R5cGUuY29uY2F0KGMsaCxTIT09aD9TOm51bGwsdC5jbGFzc05hbWUsZy5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSxDLnJlZj13LHUoXyxDKX0oQyxlLHQsUCl9O3JldHVybiBPLmRpc3BsYXlOYW1lPWYsKEM9ci5mb3J3YXJkUmVmKE8pKS5hdHRycz1TLEMuY29tcG9uZW50U3R5bGU9SSxDLmRpc3BsYXlOYW1lPWYsQy5zaG91bGRGb3J3YXJkUHJvcD1BLEMuZm9sZGVkQ29tcG9uZW50SWRzPW8/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmZvbGRlZENvbXBvbmVudElkcyxlLnN0eWxlZENvbXBvbmVudElkKTp3LEMuc3R5bGVkQ29tcG9uZW50SWQ9ZyxDLnRhcmdldD1vP2UudGFyZ2V0OmUsQy53aXRoQ29tcG9uZW50PWZ1bmN0aW9uKGUpe3ZhciByPXQuY29tcG9uZW50SWQsbz1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIG4scixvPXt9LHM9T2JqZWN0LmtleXMoZSk7Zm9yKHI9MDtyPHMubGVuZ3RoO3IrKyluPXNbcl0sdC5pbmRleE9mKG4pPj0wfHwob1tuXT1lW25dKTtyZXR1cm4gb30odCxbXCJjb21wb25lbnRJZFwiXSkscz1yJiZyK1wiLVwiKyhrZShlKT9lOlRlKF8oZSkpKTtyZXR1cm4gcWUoZSx2KHt9LG8se2F0dHJzOlMsY29tcG9uZW50SWQ6c30pLG4pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQyxcImRlZmF1bHRQcm9wc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzPW8/TWUoe30sZS5kZWZhdWx0UHJvcHMsdCk6dH19KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoT2UoZixnKSxDLndhcm5Ub29NYW55Q2xhc3Nlcz1mdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9ITE7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCFyJiYobltvXT0hMCxPYmplY3Qua2V5cyhuKS5sZW5ndGg+PTIwMCkpe3ZhciBzPXQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCI7Y29uc29sZS53YXJuKFwiT3ZlciAyMDAgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50IFwiK2UrcytcIi5cXG5Db25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbkV4YW1wbGU6XFxuICBjb25zdCBDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHByb3BzID0+ICh7XFxuICAgIHN0eWxlOiB7XFxuICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZCxcXG4gICAgfSxcXG4gIH0pKWB3aWR0aDogMTAwJTtgXFxuXFxuICA8Q29tcG9uZW50IC8+XCIpLHI9ITAsbj17fX19fShmLGcpKSxDLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIuXCIrQy5zdHlsZWRDb21wb25lbnRJZH0saSYmeShDLGUse2F0dHJzOiEwLGNvbXBvbmVudFN0eWxlOiEwLGRpc3BsYXlOYW1lOiEwLGZvbGRlZENvbXBvbmVudElkczohMCxzaG91bGRGb3J3YXJkUHJvcDohMCxzdHlsZWRDb21wb25lbnRJZDohMCx0YXJnZXQ6ITAsd2l0aENvbXBvbmVudDohMH0pLEN9dmFyIEhlPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbiBlKHQscixvKXtpZih2b2lkIDA9PT1vJiYobz1FKSwhbihyKSlyZXR1cm4gaigxLFN0cmluZyhyKSk7dmFyIHM9ZnVuY3Rpb24oKXtyZXR1cm4gdChyLG8sQ2UuYXBwbHkodm9pZCAwLGFyZ3VtZW50cykpfTtyZXR1cm4gcy53aXRoQ29uZmlnPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se30sbikpfSxzLmF0dHJzPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se2F0dHJzOkFycmF5LnByb3RvdHlwZS5jb25jYXQoby5hdHRycyxuKS5maWx0ZXIoQm9vbGVhbil9KSl9LHN9KHFlLGUpfTtbXCJhXCIsXCJhYmJyXCIsXCJhZGRyZXNzXCIsXCJhcmVhXCIsXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYXVkaW9cIixcImJcIixcImJhc2VcIixcImJkaVwiLFwiYmRvXCIsXCJiaWdcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImJyXCIsXCJidXR0b25cIixcImNhbnZhc1wiLFwiY2FwdGlvblwiLFwiY2l0ZVwiLFwiY29kZVwiLFwiY29sXCIsXCJjb2xncm91cFwiLFwiZGF0YVwiLFwiZGF0YWxpc3RcIixcImRkXCIsXCJkZWxcIixcImRldGFpbHNcIixcImRmblwiLFwiZGlhbG9nXCIsXCJkaXZcIixcImRsXCIsXCJkdFwiLFwiZW1cIixcImVtYmVkXCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRcIixcImhlYWRlclwiLFwiaGdyb3VwXCIsXCJoclwiLFwiaHRtbFwiLFwiaVwiLFwiaWZyYW1lXCIsXCJpbWdcIixcImlucHV0XCIsXCJpbnNcIixcImtiZFwiLFwia2V5Z2VuXCIsXCJsYWJlbFwiLFwibGVnZW5kXCIsXCJsaVwiLFwibGlua1wiLFwibWFpblwiLFwibWFwXCIsXCJtYXJrXCIsXCJtYXJxdWVlXCIsXCJtZW51XCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwibWV0ZXJcIixcIm5hdlwiLFwibm9zY3JpcHRcIixcIm9iamVjdFwiLFwib2xcIixcIm9wdGdyb3VwXCIsXCJvcHRpb25cIixcIm91dHB1dFwiLFwicFwiLFwicGFyYW1cIixcInBpY3R1cmVcIixcInByZVwiLFwicHJvZ3Jlc3NcIixcInFcIixcInJwXCIsXCJydFwiLFwicnVieVwiLFwic1wiLFwic2FtcFwiLFwic2NyaXB0XCIsXCJzZWN0aW9uXCIsXCJzZWxlY3RcIixcInNtYWxsXCIsXCJzb3VyY2VcIixcInNwYW5cIixcInN0cm9uZ1wiLFwic3R5bGVcIixcInN1YlwiLFwic3VtbWFyeVwiLFwic3VwXCIsXCJ0YWJsZVwiLFwidGJvZHlcIixcInRkXCIsXCJ0ZXh0YXJlYVwiLFwidGZvb3RcIixcInRoXCIsXCJ0aGVhZFwiLFwidGltZVwiLFwidGl0bGVcIixcInRyXCIsXCJ0cmFja1wiLFwidVwiLFwidWxcIixcInZhclwiLFwidmlkZW9cIixcIndiclwiLFwiY2lyY2xlXCIsXCJjbGlwUGF0aFwiLFwiZGVmc1wiLFwiZWxsaXBzZVwiLFwiZm9yZWlnbk9iamVjdFwiLFwiZ1wiLFwiaW1hZ2VcIixcImxpbmVcIixcImxpbmVhckdyYWRpZW50XCIsXCJtYXJrZXJcIixcIm1hc2tcIixcInBhdGhcIixcInBhdHRlcm5cIixcInBvbHlnb25cIixcInBvbHlsaW5lXCIsXCJyYWRpYWxHcmFkaWVudFwiLFwicmVjdFwiLFwic3RvcFwiLFwic3ZnXCIsXCJ0ZXh0XCIsXCJ0ZXh0UGF0aFwiLFwidHNwYW5cIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7SGVbZV09SGUoZSl9KSk7dmFyICRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMucnVsZXM9ZSx0aGlzLmNvbXBvbmVudElkPXQsdGhpcy5pc1N0YXRpYz1yZShlKSxaLnJlZ2lzdGVySWQodGhpcy5jb21wb25lbnRJZCsxKX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVTdHlsZXM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89cihOZSh0aGlzLnJ1bGVzLHQsbixyKS5qb2luKFwiXCIpLFwiXCIpLHM9dGhpcy5jb21wb25lbnRJZCtlO24uaW5zZXJ0UnVsZXMocyxzLG8pfSx0LnJlbW92ZVN0eWxlcz1mdW5jdGlvbihlLHQpe3QuY2xlYXJSdWxlcyh0aGlzLmNvbXBvbmVudElkK2UpfSx0LnJlbmRlclN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXtlPjImJloucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkK2UpLHRoaXMucmVtb3ZlU3R5bGVzKGUsbiksdGhpcy5jcmVhdGVTdHlsZXMoZSx0LG4scil9LGV9KCk7ZnVuY3Rpb24gV2UoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKyluW28tMV09YXJndW1lbnRzW29dO3ZhciBpPUNlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKSxhPVwic2MtZ2xvYmFsLVwiK3hlKEpTT04uc3RyaW5naWZ5KGkpKSx1PW5ldyAkZShpLGEpO2Z1bmN0aW9uIGwoZSl7dmFyIHQ9ZmUoKSxuPW1lKCksbz1zKEdlKSxsPWModC5hbGxvY2F0ZUdTSW5zdGFuY2UoYSkpLmN1cnJlbnQ7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmci5DaGlsZHJlbi5jb3VudChlLmNoaWxkcmVuKSYmY29uc29sZS53YXJuKFwiVGhlIGdsb2JhbCBzdHlsZSBjb21wb25lbnQgXCIrYStcIiB3YXMgZ2l2ZW4gY2hpbGQgSlNYLiBjcmVhdGVHbG9iYWxTdHlsZSBkb2VzIG5vdCByZW5kZXIgY2hpbGRyZW4uXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmkuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xIT09ZS5pbmRleE9mKFwiQGltcG9ydFwiKX0pKSYmY29uc29sZS53YXJuKFwiUGxlYXNlIGRvIG5vdCB1c2UgQGltcG9ydCBDU1Mgc3ludGF4IGluIGNyZWF0ZUdsb2JhbFN0eWxlIGF0IHRoaXMgdGltZSwgYXMgdGhlIENTU09NIEFQSXMgd2UgdXNlIGluIHByb2R1Y3Rpb24gZG8gbm90IGhhbmRsZSBpdCB3ZWxsLiBJbnN0ZWFkLCB3ZSByZWNvbW1lbmQgdXNpbmcgYSBsaWJyYXJ5IHN1Y2ggYXMgcmVhY3QtaGVsbWV0IHRvIGluamVjdCBhIHR5cGljYWwgPGxpbms+IG1ldGEgdGFnIHRvIHRoZSBzdHlsZXNoZWV0LCBvciBzaW1wbHkgZW1iZWRkaW5nIGl0IG1hbnVhbGx5IGluIHlvdXIgaW5kZXguaHRtbCA8aGVhZD4gc2VjdGlvbiBmb3IgYSBzaW1wbGVyIGFwcC5cIiksdC5zZXJ2ZXImJmgobCxlLHQsbyxuKSxkKChmdW5jdGlvbigpe2lmKCF0LnNlcnZlcilyZXR1cm4gaChsLGUsdCxvLG4pLGZ1bmN0aW9uKCl7cmV0dXJuIHUucmVtb3ZlU3R5bGVzKGwsdCl9fSksW2wsZSx0LG8sbl0pLG51bGx9ZnVuY3Rpb24gaChlLHQsbixyLG8pe2lmKHUuaXNTdGF0aWMpdS5yZW5kZXJTdHlsZXMoZSxPLG4sbyk7ZWxzZXt2YXIgcz12KHt9LHQse3RoZW1lOlJlKHQscixsLmRlZmF1bHRQcm9wcyl9KTt1LnJlbmRlclN0eWxlcyhlLHMsbixvKX19cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmT2UoYSksci5tZW1vKGwpfWZ1bmN0aW9uIFVlKGUpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0JiZjb25zb2xlLndhcm4oXCJga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC5cIik7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3ZhciBvPUNlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKS5qb2luKFwiXCIpLHM9eGUobyk7cmV0dXJuIG5ldyB2ZShzLG8pfXZhciBKZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgZT10aGlzO3RoaXMuX2VtaXRTaGVldENTUz1mdW5jdGlvbigpe3ZhciB0PWUuaW5zdGFuY2UudG9TdHJpbmcoKTtpZighdClyZXR1cm5cIlwiO3ZhciBuPXEoKTtyZXR1cm5cIjxzdHlsZSBcIitbbiYmJ25vbmNlPVwiJytuKydcIicsQSsnPVwidHJ1ZVwiJywnZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy41XCInXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikrXCI+XCIrdCtcIjwvc3R5bGU+XCJ9LHRoaXMuZ2V0U3R5bGVUYWdzPWZ1bmN0aW9uKCl7cmV0dXJuIGUuc2VhbGVkP2ooMik6ZS5fZW1pdFNoZWV0Q1NTKCl9LHRoaXMuZ2V0U3R5bGVFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIHQ7aWYoZS5zZWFsZWQpcmV0dXJuIGooMik7dmFyIG49KCh0PXt9KVtBXT1cIlwiLHRbXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCJdPVwiNS4zLjVcIix0LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXtfX2h0bWw6ZS5pbnN0YW5jZS50b1N0cmluZygpfSx0KSxvPXEoKTtyZXR1cm4gbyYmKG4ubm9uY2U9byksW3IuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsdih7fSxuLHtrZXk6XCJzYy0wLTBcIn0pKV19LHRoaXMuc2VhbD1mdW5jdGlvbigpe2Uuc2VhbGVkPSEwfSx0aGlzLmluc3RhbmNlPW5ldyBaKHtpc1NlcnZlcjohMH0pLHRoaXMuc2VhbGVkPSExfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNvbGxlY3RTdHlsZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc2VhbGVkP2ooMik6ci5jcmVhdGVFbGVtZW50KHllLHtzaGVldDp0aGlzLmluc3RhbmNlfSxlKX0sdC5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIGooMyl9LGV9KCksWGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ci5mb3J3YXJkUmVmKChmdW5jdGlvbih0LG4pe3ZhciBvPXMoR2UpLGk9ZS5kZWZhdWx0UHJvcHMsYT1SZSh0LG8saSk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdm9pZCAwPT09YSYmY29uc29sZS53YXJuKCdbd2l0aFRoZW1lXSBZb3UgYXJlIG5vdCB1c2luZyBhIFRoZW1lUHJvdmlkZXIgbm9yIHBhc3NpbmcgYSB0aGVtZSBwcm9wIG9yIGEgdGhlbWUgaW4gZGVmYXVsdFByb3BzIGluIGNvbXBvbmVudCBjbGFzcyBcIicrXyhlKSsnXCInKSxyLmNyZWF0ZUVsZW1lbnQoZSx2KHt9LHQse3RoZW1lOmEscmVmOm59KSl9KSk7cmV0dXJuIHkodCxlKSx0LmRpc3BsYXlOYW1lPVwiV2l0aFRoZW1lKFwiK18oZSkrXCIpXCIsdH0sWmU9ZnVuY3Rpb24oKXtyZXR1cm4gcyhHZSl9LEtlPXtTdHlsZVNoZWV0OlosbWFzdGVyU2hlZXQ6aGV9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0JiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHlvdSd2ZSBpbXBvcnRlZCAnc3R5bGVkLWNvbXBvbmVudHMnIG9uIFJlYWN0IE5hdGl2ZS5cXG5QZXJoYXBzIHlvdSdyZSBsb29raW5nIHRvIGltcG9ydCAnc3R5bGVkLWNvbXBvbmVudHMvbmF0aXZlJz9cXG5SZWFkIG1vcmUgYWJvdXQgdGhpcyBhdCBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9iYXNpY3MjcmVhY3QtbmF0aXZlXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidGVzdFwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXT13aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXXx8MCwxPT09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl0mJmNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgdG8gbm90IHJlbmRlciBwcm9wZXJseSwgZXJyb3JzIGR1cmluZyB0aGUgcmVoeWRyYXRpb24gcHJvY2VzcywgYSBtaXNzaW5nIHRoZW1lIHByb3AsIGFuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGdvb2QgcmVhc29uLlxcblxcblNlZSBodHRwczovL3MtYy5zaC8yQkFYemVkIGZvciBtb3JlIGluZm8uXCIpLHdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdKz0xKTtleHBvcnQgZGVmYXVsdCBIZTtleHBvcnR7SmUgYXMgU2VydmVyU3R5bGVTaGVldCxsZSBhcyBTdHlsZVNoZWV0Q29uc3VtZXIsdWUgYXMgU3R5bGVTaGVldENvbnRleHQseWUgYXMgU3R5bGVTaGVldE1hbmFnZXIsTGUgYXMgVGhlbWVDb25zdW1lcixHZSBhcyBUaGVtZUNvbnRleHQsRmUgYXMgVGhlbWVQcm92aWRlcixLZSBhcyBfX1BSSVZBVEVfXyxXZSBhcyBjcmVhdGVHbG9iYWxTdHlsZSxDZSBhcyBjc3MsTiBhcyBpc1N0eWxlZENvbXBvbmVudCxVZSBhcyBrZXlmcmFtZXMsWmUgYXMgdXNlVGhlbWUsQyBhcyB2ZXJzaW9uLFhlIGFzIHdpdGhUaGVtZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTmF2YmFyID0gdm9pZCAwO1xyXG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmNvbnN0IHN0eWxlZF9jb21wb25lbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN0eWxlZC1jb21wb25lbnRzXCIpKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcclxuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcclxuY29uc3QgTmF2YmFyQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0Lm5hdiBgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJiMmIyYjtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gIGhlaWdodDogNDBweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBwb3NpdGlvbjogc3RpY2t5O1xyXG4gIHotaW5kZXg6IDM7XHJcbiAgdG9wOiAwcHg7XHJcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMxNGE3NmM7XHJcbiAgQGZvbnQtZmFjZSB7XHJcbiAgICBmb250LWZhbWlseTogXCJSb2JvdG9cIjtcclxuICAgIHNyYzogdXJsKFwiLy9kYi5vbmxpbmV3ZWJmb250cy5jb20vdC8wMDMzYTJmYmMwMzI5NzQwZmI4NmMxY2ZkMTM0Y2I5NC5lb3RcIik7XHJcbiAgICBzcmM6IHVybChcIi8vZGIub25saW5ld2ViZm9udHMuY29tL3QvMDAzM2EyZmJjMDMyOTc0MGZiODZjMWNmZDEzNGNiOTQuZW90PyNpZWZpeFwiKVxyXG4gICAgICAgIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLFxyXG4gICAgICB1cmwoXCIvL2RiLm9ubGluZXdlYmZvbnRzLmNvbS90LzAwMzNhMmZiYzAzMjk3NDBmYjg2YzFjZmQxMzRjYjk0LndvZmYyXCIpXHJcbiAgICAgICAgZm9ybWF0KFwid29mZjJcIiksXHJcbiAgICAgIHVybChcIi8vZGIub25saW5ld2ViZm9udHMuY29tL3QvMDAzM2EyZmJjMDMyOTc0MGZiODZjMWNmZDEzNGNiOTQud29mZlwiKVxyXG4gICAgICAgIGZvcm1hdChcIndvZmZcIiksXHJcbiAgICAgIHVybChcIi8vZGIub25saW5ld2ViZm9udHMuY29tL3QvMDAzM2EyZmJjMDMyOTc0MGZiODZjMWNmZDEzNGNiOTQudHRmXCIpXHJcbiAgICAgICAgZm9ybWF0KFwidHJ1ZXR5cGVcIiksXHJcbiAgICAgIHVybChcIi8vZGIub25saW5ld2ViZm9udHMuY29tL3QvMDAzM2EyZmJjMDMyOTc0MGZiODZjMWNmZDEzNGNiOTQuc3ZnI1JvYm90b1wiKVxyXG4gICAgICAgIGZvcm1hdChcInN2Z1wiKTtcclxuICB9XHJcbiAgZm9udC1mYW1pbHk6IFJvYm90bztcclxuYDtcclxuY29uc3QgTmF2TGluayA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5saSBgXHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG5gO1xyXG5jb25zdCBOYXZMaW5rSXRlbSA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgOmhvdmVyIHtcclxuICAgIGNvbG9yOiAjZTczYzdlO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICB0cmFuc2l0aW9uOiAwLjVzO1xyXG5gO1xyXG5jb25zdCBOYXZMaW5rTGlzdCA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC51bCBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGdhcDogMjBweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbmA7XHJcbmNvbnN0IE5hdmJhciA9ICgpID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyQ29udGFpbmVyLCBudWxsLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE5hdkxpbmtMaXN0LCBudWxsLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChOYXZMaW5rLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTmF2TGlua0l0ZW0sIHsgb25DbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5TY3JvbGxUbykodHlwZXNfMS5TZWN0aW9ucy5ob21lKTtcclxuICAgICAgICAgICAgICAgICAgICB9IH0sIFwiSG9tZVwiKSksXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE5hdkxpbmssIG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChOYXZMaW5rSXRlbSwgeyBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLlNjcm9sbFRvKSh0eXBlc18xLlNlY3Rpb25zLmFib3V0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IH0sIFwiQWJvdXRcIikpLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChOYXZMaW5rLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTmF2TGlua0l0ZW0sIHsgb25DbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5TY3JvbGxUbykodHlwZXNfMS5TZWN0aW9ucy5wcm9qZWN0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSB9LCBcIlByb2plY3RzXCIpKSxcclxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTmF2TGluaywgbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE5hdkxpbmtJdGVtLCB7IG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuU2Nyb2xsVG8pKHR5cGVzXzEuU2VjdGlvbnMuY29udGFjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSB9LCBcIkNvbnRhY3RcIikpKSkpO1xyXG59O1xyXG5leHBvcnRzLk5hdmJhciA9IE5hdmJhcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5BYm91dCA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBzdHlsZWRfY29tcG9uZW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKSk7XHJcbmNvbnN0IGZyYW1lcl9tb3Rpb25fMSA9IHJlcXVpcmUoXCJmcmFtZXItbW90aW9uXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL3R5cGVzXCIpO1xyXG5jb25zdCBSZWFjdExvZ29fMSA9IHJlcXVpcmUoXCIuLi8uLi9pbWFnZXMvUmVhY3RMb2dvXCIpO1xyXG5jb25zdCBKU0xvZ29fMSA9IHJlcXVpcmUoXCIuLi8uLi9pbWFnZXMvSlNMb2dvXCIpO1xyXG5jb25zdCBIVE1MTG9nb18xID0gcmVxdWlyZShcIi4uLy4uL2ltYWdlcy9IVE1MTG9nb1wiKTtcclxuY29uc3QgQ1NTTG9nb18xID0gcmVxdWlyZShcIi4uLy4uL2ltYWdlcy9DU1NMb2dvXCIpO1xyXG5jb25zdCBOb2RlSlNMb2dvXzEgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2VzL05vZGVKU0xvZ29cIik7XHJcbmNvbnN0IFR5cGVTY3JpcHRMb2dvXzEgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2VzL1R5cGVTY3JpcHRMb2dvXCIpO1xyXG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xyXG5jb25zdCBMaW5lVHdvXzEgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2VzL0xpbmVUd29cIik7XHJcbmNvbnN0IEFib3V0Q29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJiMmIyYjtcclxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG87XHJcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xyXG5gO1xyXG5jb25zdCBBYm91dEhlYWRlckNvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5gO1xyXG5jb25zdCBBYm91dFRpdGxlVGV4dCA9ICgwLCBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQpKGZyYW1lcl9tb3Rpb25fMS5tb3Rpb24uZGl2KSBgXHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xyXG4gIGZvbnQtc2l6ZTogMzBwdDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgcGFkZGluZy10b3A6IDQwcHg7XHJcbmA7XHJcbmNvbnN0IEFib3V0Q29udGVudENvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBnYXA6IDIwcHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XHJcbmA7XHJcbmNvbnN0IEJpb0NvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGdhcDogNDBweDtcclxuYDtcclxuY29uc3QgUGljdHVyZU9mTWUgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuaW1nIGBcclxuICBoZWlnaHQ6IDQwMHB4O1xyXG4gIHdpZHRoOiA0MDBweDtcclxuICBib3JkZXItcmFkaXVzOiA3cHg7XHJcbmA7XHJcbmNvbnN0IEJpb1RleHQgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2IGBcclxuICB3aWR0aDogNzAwcHg7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbmA7XHJcbmNvbnN0IFNraWxsc0NvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgcGFkZGluZy10b3A6IDQwcHg7XHJcbiAgZ2FwOiAxMHB4O1xyXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xyXG5gO1xyXG5jb25zdCBTa2lsbHNJdGVtc1RpdGxlVGV4dCA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogMzBweDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5gO1xyXG5jb25zdCBTa2lsbHNJdGVtID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGdhcDogNjBweDtcclxuYDtcclxuY29uc3QgU2tpbGxzSXRlbVJvdyA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcGFkZGluZy10b3A6IDMwcHg7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICBnYXA6IDEwcHg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuYDtcclxuY29uc3QgU2tpbGxzSXRlbUxpc3QgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQudWwgYFxyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMSwgbWlubWF4KDE0MHB4LCAyMDBweCkpO1xyXG4gIGdhcDogMjBweDtcclxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbmA7XHJcbmNvbnN0IEFib3V0ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChBYm91dENvbnRhaW5lciwgeyBpZDogdHlwZXNfMS5TZWN0aW9ucy5hYm91dCB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEFib3V0SGVhZGVyQ29udGFpbmVyLCBudWxsLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChBYm91dFRpdGxlVGV4dCwgbnVsbCwgXCJBYm91dCBNZVwiKSxcclxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGluZVR3b18xLkxpbmVUd28sIG51bGwpKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChBYm91dENvbnRlbnRDb250YWluZXIsIG51bGwsXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEJpb0NvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEJpb1RleHQsIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJIZWxsbyEgTXkgbmFtZSdzIE5hZGVyIGFuZCBJJ20gYSBzZWxmLXRhdWdodCwgZnJvbnQtZW5kIGRldmVsb3BlciBmcm9tIFNvdXRoZXJuIENhbGlmb3JuaWEuIENyYWZ0aW5nIGEgZnVuIHlldCBiZWF1dGlmdWxseSBzaW1wbGUgdXNlciBleHBlcmllbmNlIGlzIHdoYXQgSSBhaW0gZm9yIHdpdGggYWxsIG9mIG15IHByb2plY3RzLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnJcIiwgbnVsbCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCIgSSdtIHJlZ3VsYXJseSB3b3JraW5nIG9uIGltcHJvdmluZyBteSBza2lsbHMgYW5kIGZ1cnRoZXJpbmcgbXkgZGV2ZWxvcG1lbnQsIG9uZSBkZXNpZ24gcHJvYmxlbSBhdCBhIHRpbWUuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIpLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUGljdHVyZU9mTWUsIHsgc3JjOiBgJHsoMCwgdXRpbHNfMS5HZXRCYXNlSW1nUGF0aCkoKX0vcGljdHVyZU9mTWUuanBnYCB9KSksXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0NvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0l0ZW1zVGl0bGVUZXh0LCBudWxsLCBcIlNraWxsc1wiKSxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0l0ZW0sIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2tpbGxzSXRlbUxpc3QsIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0l0ZW1Sb3csIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChSZWFjdExvZ29fMS5SZWFjdExvZ28sIG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgUmVhY3RcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0l0ZW1Sb3csIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChKU0xvZ29fMS5KU0xvZ28sIG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgSmF2YVNjcmlwdFwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2tpbGxzSXRlbVJvdywgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEhUTUxMb2dvXzEuSFRNTExvZ28sIG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgSFRNTFwiKSksXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2tpbGxzSXRlbUxpc3QsIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0l0ZW1Sb3csIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDU1NMb2dvXzEuQ1NTTG9nbywgbnVsbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBDU1NcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0l0ZW1Sb3csIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChUeXBlU2NyaXB0TG9nb18xLlR5cGVTY3JpcHRMb2dvLCBudWxsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIFR5cGVTY3JpcHRcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNraWxsc0l0ZW1Sb3csIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChOb2RlSlNMb2dvXzEuTm9kZUpTTG9nbywgbnVsbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBOb2RlLmpzXCIpKSkpKSkpO1xyXG59O1xyXG5leHBvcnRzLkFib3V0ID0gQWJvdXQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ29udGFjdCA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBmcmFtZXJfbW90aW9uXzEgPSByZXF1aXJlKFwiZnJhbWVyLW1vdGlvblwiKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCBHaXRodWJfMSA9IHJlcXVpcmUoXCIuLi8uLi9pbWFnZXMvR2l0aHViXCIpO1xyXG5jb25zdCBMaW5rZWRpbl8xID0gcmVxdWlyZShcIi4uLy4uL2ltYWdlcy9MaW5rZWRpblwiKTtcclxuY29uc3QgUmVzdW1lXzEgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2VzL1Jlc3VtZVwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi90eXBlc1wiKTtcclxuY29uc3QgVXBBcnJvd18xID0gcmVxdWlyZShcIi4uLy4uL2ltYWdlcy9VcEFycm93XCIpO1xyXG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xyXG5jb25zdCBFbWFpbExvZ29fMSA9IHJlcXVpcmUoXCIuLi8uLi9pbWFnZXMvRW1haWxMb2dvXCIpO1xyXG5jb25zdCBMaW5lVHdvXzEgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2VzL0xpbmVUd29cIik7XHJcbmNvbnN0IENvbnRhY3RJdGVtc0NvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgaGVpZ2h0OiA1MHZoO1xyXG4gIGZsZXg6IDE7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJiMmIyYjtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG87XHJcbmA7XHJcbmNvbnN0IENvbnRhY3RIZWFkZXJDb250YWluZXIgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2IGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuYDtcclxuY29uc3QgQ29udGFjdFRleHRJbnZpdGF0aW9uID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogNDBwdDtcclxuYDtcclxuY29uc3QgQ29udGFjdFRleHRJbnZpdGF0aW9uVHdvID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGZvbnQtc2l6ZTogMTdwdDtcclxuYDtcclxuY29uc3QgQ29udGFjdExpbmtzID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDRweCAtIDIwcHgpO1xyXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA0cHggLSAyMHB4KTtcclxuICBib3JkZXI6IDNweCAjMTRhNzZjIHNvbGlkO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICBnYXA6IDIwcHg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIG1hcmdpbjogYXV0bztcclxuYDtcclxuY29uc3QgTGlua3NDb250YWluZXIgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2IGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBnYXA6IDIwcHg7XHJcbiAgcGFkZGluZy10b3A6IDE1cHg7XHJcbmA7XHJcbmNvbnN0IExpbmtJdGVtQ29udGFpbmVyID0gKDAsIHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdCkoZnJhbWVyX21vdGlvbl8xLm1vdGlvbi5kaXYpIGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG5gO1xyXG5jb25zdCBVcEFycm93Q29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogc3RpY2t5O1xyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTRhNzZjO1xyXG4gIH1cclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICB3aWR0aDogNjBweDtcclxuICB0cmFuc2l0aW9uOiAwLjVzO1xyXG5gO1xyXG5jb25zdCBCdWlsdEJ5VGV4dCA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XHJcbiAgZm9udC1zaXplOiAxM3B4O1xyXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNjUpO1xyXG5gO1xyXG5jb25zdCBDb250YWN0ID0gKHsgc2NhbGVTaXplID0gMS4xIH0pID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29udGFjdEl0ZW1zQ29udGFpbmVyLCB7IGlkOiB0eXBlc18xLlNlY3Rpb25zLmNvbnRhY3QgfSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb250YWN0TGlua3MsIG51bGwsXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbnRhY3RIZWFkZXJDb250YWluZXIsIG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb250YWN0VGV4dEludml0YXRpb24sIG51bGwsIFwiV2FudCB0byBrbm93IG1vcmU/XCIpLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGluZVR3b18xLkxpbmVUd28sIG51bGwpLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29udGFjdFRleHRJbnZpdGF0aW9uVHdvLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiSSdtIGN1cnJlbnRseSBvcGVuIHRvIG5ldyBqb2Igb3Bwb3J0dW5pdGllcywgXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJiclwiLCBudWxsKSxcclxuICAgICAgICAgICAgICAgICAgICBcImlmIHlvdSB3b3VsZCBsaWtlIHRvIGdldCBpbiB0b3VjaCwgbXkgaW5ib3ggaXMgYWx3YXlzIG9wZW4hXCIpKSxcclxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGlua3NDb250YWluZXIsIG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChMaW5rSXRlbUNvbnRhaW5lciwgeyB3aGlsZUhvdmVyOiB7IHNjYWxlOiBzY2FsZVNpemUgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlc3VtZV8xLlJlc3VtZSwgeyBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMXQ4T2I0TV9WMkI4ZnhvZmZWQ0lnS2xOTEdsZXo5Snl0L3ZpZXc/dXNwPXNoYXJpbmdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gfSkpLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGlua0l0ZW1Db250YWluZXIsIHsgd2hpbGVIb3ZlcjogeyBzY2FsZTogc2NhbGVTaXplIH0gfSxcclxuICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChHaXRodWJfMS5HaXRodWIsIHsgb25DbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oXCJodHRwczovL2dpdGh1Yi5jb20vdGVybWluYWRlcjdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gfSkpLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGlua0l0ZW1Db250YWluZXIsIHsgd2hpbGVIb3ZlcjogeyBzY2FsZTogc2NhbGVTaXplIH0gfSxcclxuICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChMaW5rZWRpbl8xLkxpbmtlZGluLCB7IG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKFwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL25hZGVyLWVicmFoaW0tMjg1NzZiMTk5L1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSB9KSksXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChMaW5rSXRlbUNvbnRhaW5lciwgeyB3aGlsZUhvdmVyOiB7IHNjYWxlOiBzY2FsZVNpemUgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEVtYWlsTG9nb18xLkVtYWlsTG9nbywgeyBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihcIm1haWx0bzpuZWJyYWhpbTI0MjRAZ21haWwuY29tXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IH0pKSksXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFVwQXJyb3dDb250YWluZXIsIG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChVcEFycm93XzEuVXBBcnJvdywgeyBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLlNjcm9sbFRvKSh0eXBlc18xLlNlY3Rpb25zLmhvbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gfSkpLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChCdWlsdEJ5VGV4dCwgbnVsbCwgXCJEZXNpZ25lZCAmIEJ1aWx0IGJ5IE5hZGVyIEVicmFoaW1cIikpKSk7XHJcbn07XHJcbmV4cG9ydHMuQ29udGFjdCA9IENvbnRhY3Q7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuSG9tZXBhZ2UgPSB2b2lkIDA7XHJcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCBDb250YWN0XzEgPSByZXF1aXJlKFwiLi9Db250YWN0XCIpO1xyXG5jb25zdCBBYm91dF8xID0gcmVxdWlyZShcIi4vQWJvdXRcIik7XHJcbmNvbnN0IFByb2plY3RzXzEgPSByZXF1aXJlKFwiLi9Qcm9qZWN0c1wiKTtcclxuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi90eXBlc1wiKTtcclxuY29uc3QgTmF2YmFyXzEgPSByZXF1aXJlKFwiLi4vTmF2YmFyXCIpO1xyXG5jb25zdCBTb2NpYWxzXzEgPSByZXF1aXJlKFwiLi4vU29jaWFsc1wiKTtcclxuY29uc3QgSG9tZXBhZ2VDb250YWluZXIgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2IGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB3aWR0aDogMTAwJTtcclxuYDtcclxuY29uc3QgV2VsY29tZVRleHRDb250YWluZXIgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2IGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgtNDVkZWcsICNlZTc3NTIsICNlNzNjN2UsICMyM2E2ZDUsICMxNGE3NmMpO1xyXG4gIGJhY2tncm91bmQtc2l6ZTogNDAwJSA0MDAlO1xyXG4gIGFuaW1hdGlvbjogZ3JhZGllbnQgNjBzIGVhc2UgaW5maW5pdGU7XHJcbiAgaGVpZ2h0OiAxMDB2aDtcclxuICB3aWR0aDogMTAwJTtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgQGtleWZyYW1lcyBncmFkaWVudCB7XHJcbiAgICAwJSB7XHJcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAlIDUwJTtcclxuICAgIH1cclxuICAgIDUwJSB7XHJcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDEwMCUgNTAlO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAlIDUwJTtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcbmNvbnN0IFdlbGNvbWVUZXh0ID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmgxIGBcclxuICBAZm9udC1mYWNlIHtcclxuICAgIGZvbnQtZmFtaWx5OiBcIlJvYm90b1wiO1xyXG4gICAgc3JjOiB1cmwoXCIvL2RiLm9ubGluZXdlYmZvbnRzLmNvbS90LzAwMzNhMmZiYzAzMjk3NDBmYjg2YzFjZmQxMzRjYjk0LmVvdFwiKTtcclxuICAgIHNyYzogdXJsKFwiLy9kYi5vbmxpbmV3ZWJmb250cy5jb20vdC8wMDMzYTJmYmMwMzI5NzQwZmI4NmMxY2ZkMTM0Y2I5NC5lb3Q/I2llZml4XCIpXHJcbiAgICAgICAgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksXHJcbiAgICAgIHVybChcIi8vZGIub25saW5ld2ViZm9udHMuY29tL3QvMDAzM2EyZmJjMDMyOTc0MGZiODZjMWNmZDEzNGNiOTQud29mZjJcIilcclxuICAgICAgICBmb3JtYXQoXCJ3b2ZmMlwiKSxcclxuICAgICAgdXJsKFwiLy9kYi5vbmxpbmV3ZWJmb250cy5jb20vdC8wMDMzYTJmYmMwMzI5NzQwZmI4NmMxY2ZkMTM0Y2I5NC53b2ZmXCIpXHJcbiAgICAgICAgZm9ybWF0KFwid29mZlwiKSxcclxuICAgICAgdXJsKFwiLy9kYi5vbmxpbmV3ZWJmb250cy5jb20vdC8wMDMzYTJmYmMwMzI5NzQwZmI4NmMxY2ZkMTM0Y2I5NC50dGZcIilcclxuICAgICAgICBmb3JtYXQoXCJ0cnVldHlwZVwiKSxcclxuICAgICAgdXJsKFwiLy9kYi5vbmxpbmV3ZWJmb250cy5jb20vdC8wMDMzYTJmYmMwMzI5NzQwZmI4NmMxY2ZkMTM0Y2I5NC5zdmcjUm9ib3RvXCIpXHJcbiAgICAgICAgZm9ybWF0KFwic3ZnXCIpO1xyXG4gIH1cclxuICBmb250LWZhbWlseTogUm9ib3RvO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBmb250LXNpemU6IDUwcHg7XHJcbmA7XHJcbmNvbnN0IFdlbGNvbWVCdXR0b24gPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuYnV0dG9uIGBcclxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICBib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG87XHJcbiAgcGFkZGluZzogMTVweDtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIDpob3ZlciB7XHJcbiAgICBjb2xvcjogI2U3M2M3ZTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjZTczYzdlO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuNXM7XHJcbmA7XHJcbmNvbnN0IFByZXZpZXdzQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1zaXplOiAyNXB4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG5gO1xyXG5jb25zdCBIb21lcGFnZSA9ICgpID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSG9tZXBhZ2VDb250YWluZXIsIG51bGwsXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoV2VsY29tZVRleHRDb250YWluZXIsIHsgaWQ6IHR5cGVzXzEuU2VjdGlvbnMuaG9tZSB9LFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChXZWxjb21lVGV4dCwgbnVsbCxcclxuICAgICAgICAgICAgICAgIFwiSGksIEknbSBOYWRlciBFYnJhaGltLlwiLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJiclwiLCBudWxsKSxcclxuICAgICAgICAgICAgICAgIFwiIEknbSBhIGZyb250LWVuZCBkZXZlbG9wZXIuXCIpLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChXZWxjb21lQnV0dG9uLCB7IG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5TY3JvbGxUbykodHlwZXNfMS5TZWN0aW9ucy5hYm91dCk7XHJcbiAgICAgICAgICAgICAgICB9IH0sIFwiTGVhcm4gbW9yZSBhYm91dCBtZVwiKSksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyXzEuTmF2YmFyLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChQcmV2aWV3c0NvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQWJvdXRfMS5BYm91dCwgbnVsbCksXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2plY3RzXzEuUHJvamVjdHMsIG51bGwpLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChTb2NpYWxzXzEuU29jaWFscywgbnVsbCksXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbnRhY3RfMS5Db250YWN0LCBudWxsKSkpKTtcclxufTtcclxuZXhwb3J0cy5Ib21lcGFnZSA9IEhvbWVwYWdlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlByb2plY3RJdGVtID0gdm9pZCAwO1xyXG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmNvbnN0IHN0eWxlZF9jb21wb25lbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN0eWxlZC1jb21wb25lbnRzXCIpKTtcclxuY29uc3QgVGlueUdpdGh1Yl8xID0gcmVxdWlyZShcIi4uLy4uL2ltYWdlcy9UaW55R2l0aHViXCIpO1xyXG5jb25zdCBBcHBMaW5rXzEgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2VzL0FwcExpbmtcIik7XHJcbmNvbnN0IFByb2plY3RJdGVtQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgYDtcclxuY29uc3QgUHJvamVjdFJvdyA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgaGVpZ2h0OiBhdXRvO1xyXG4gIHdpZHRoOiAxNTAwcHg7XHJcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBwYWRkaW5nLXRvcDogMzBweDtcclxuYDtcclxuY29uc3QgUHJvamVjdFRpdGxlID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgOmhvdmVyIHtcclxuICAgIGNvbG9yOiAjMTRhNzZjO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgdHJhbnNpdGlvbjogMC41cztcclxuICBwYWRkaW5nLXRvcDogMjBweDtcclxuICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgbWFyZ2luLWxlZnQ6IDIwMHB4O1xyXG5gO1xyXG5jb25zdCBQaWN0dXJlQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBoZWlnaHQ6IDQwMHB4O1xyXG4gIHdpZHRoOiA1MDBweDtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbmA7XHJcbmNvbnN0IFByb2plY3RQaWN0dXJlID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmltZyBgXHJcbiAgOmhvdmVyIHtcclxuICAgIG9wYWNpdHk6IDAuNjU7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG4gIGhlaWdodDogYXV0bztcclxuICB3aWR0aDogNTAwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbmA7XHJcbmNvbnN0IFByb2plY3RJbmZvQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZm9udC1zaXplOiAzMHB4O1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICB6LWluZGV4OiAyO1xyXG4gIGhlaWdodDogMzUwcHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi1sZWZ0OiAtNjBweDtcclxuICB3aWR0aDogNTAwcHg7XHJcbmA7XHJcbmNvbnN0IFByb2plY3REZXNjcmlwdGlvbkNvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMzZDNkM2Q7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIGJveC1zaGFkb3c6IDJweCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC41KTtcclxuICB3aWR0aDogNTAwcHg7XHJcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcclxuICBtYXJnaW4tdG9wOiA5NXB4O1xyXG5gO1xyXG5jb25zdCBQcm9qZWN0RGVzY3JpcHRpb24gPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2IGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBhZGRpbmc6IDI1cHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xyXG4gIGZvbnQtc2l6ZTogMTdweDtcclxuYDtcclxuY29uc3QgUHJvamVjdFRlY2hzQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gIHBhZGRpbmctdG9wOiAzMHB4O1xyXG5gO1xyXG5jb25zdCBQcm9qZWN0VGVjaHMgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2IGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNjUpO1xyXG4gIGZvbnQtc2l6ZTogMTVweDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG5gO1xyXG5jb25zdCBMaW5rc0NvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgYm90dG9tOiAwO1xyXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgZ2FwOiAxMHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAxNXB4O1xyXG4gIG1hcmdpbi1sZWZ0OiA0MjBweDtcclxuYDtcclxuY29uc3QgUHJvamVjdEl0ZW0gPSAoeyB0aXRsZSwgc3JjLCBwYXRoLCBkZXNjcmlwdGlvbiwgdGVjaG5vbG9naWVzLCBnaXRodWIsIH0pID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUHJvamVjdEl0ZW1Db250YWluZXIsIG51bGwsXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUHJvamVjdFJvdywgbnVsbCxcclxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUGljdHVyZUNvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2plY3RQaWN0dXJlLCB7IHNyYzogc3JjLCBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gfSkpLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChQcm9qZWN0SW5mb0NvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2plY3RUaXRsZSwgeyBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gfSwgdGl0bGUpLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUHJvamVjdERlc2NyaXB0aW9uQ29udGFpbmVyLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2plY3REZXNjcmlwdGlvbiwgbnVsbCwgZGVzY3JpcHRpb24pKSxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2plY3RUZWNoc0NvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChQcm9qZWN0VGVjaHMsIG51bGwsIHRlY2hub2xvZ2llcy5qb2luKFwiLCAgXCIpKSksXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChMaW5rc0NvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChUaW55R2l0aHViXzEuVGlueUdpdGh1YiwgeyBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihnaXRodWIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEFwcExpbmtfMS5BcHBMaW5rLCB7IG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IH0pKSkpKSk7XHJcbn07XHJcbmV4cG9ydHMuUHJvamVjdEl0ZW0gPSBQcm9qZWN0SXRlbTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Qcm9qZWN0cyA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBzdHlsZWRfY29tcG9uZW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKSk7XHJcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XHJcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XHJcbmNvbnN0IFByb2plY3RJdGVtXzEgPSByZXF1aXJlKFwiLi9Qcm9qZWN0SXRlbVwiKTtcclxuY29uc3QgTGluZVR3b18xID0gcmVxdWlyZShcIi4uLy4uL2ltYWdlcy9MaW5lVHdvXCIpO1xyXG5jb25zdCBQcm9qZWN0c0NvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmIyYjJiO1xyXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG87XHJcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xyXG5gO1xyXG5jb25zdCBQcm9qZWN0SGVhZGVyQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbmA7XHJcbmNvbnN0IFByb2plY3RzU2VjdGlvblRpdGxlVGV4dCA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBmb250LXNpemU6IDMwcHQ7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbmA7XHJcbmNvbnN0IFByb2plY3RDb250ZW50Q29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbmA7XHJcbmNvbnN0IFByb2plY3RJdGVtc0NvbnRhaW5lciA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5kaXYgYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5gO1xyXG5jb25zdCBQcm9qZWN0c1BpY3R1cmVzID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBnYXA6IDIwcHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XHJcbiAgcGFkZGluZy10b3A6IDIwcHg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGdhcDogMzBweDtcclxuYDtcclxuY29uc3QgUHJvamVjdHMgPSAoKSA9PiB7XHJcbiAgICAvL21ha2Ugb2JqZWN0IGRpZmZlcmVudGlhdGluZyBsZWZ0IHN0cnVjdHVyZSBmcm9tIHJpZ2h0IHN0cnVjdHVyZVxyXG4gICAgY29uc3QgUHJvamVjdEl0ZW1BcnJheSA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBcIkdpdGh1YiBGaW5kZXJcIixcclxuICAgICAgICAgICAgc3JjOiBgJHsoMCwgdXRpbHNfMS5HZXRCYXNlSW1nUGF0aCkoKX0vU2NyZWVuc2hvdHMvZ2l0aHViRmluZGVyU2NyZWVuc2hvdC5wbmdgLFxyXG4gICAgICAgICAgICBwYXRoOiBcImh0dHBzOi8vZ2l0aHViLWZpbmRlci1uYWRlci5oZXJva3VhcHAuY29tL1wiLFxyXG4gICAgICAgICAgICBnaXRodWI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3Rlcm1pbmFkZXI3L2dpdGh1Yi1maW5kZXJcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUmVhY3QgYXBwIHRoYXQgbWFrZXMgcmVxdWVzdHMgdG8gdGhlIEdpdGh1YiBBUEkgYnkgc2VhcmNoaW5nIHByb2ZpbGVzIG9uIGdpdGh1YiBhbmQgcmV0dXJuaW5nIGluZm9ybWF0aW9uIGFuZCBkYXRhLCBzdWNoIGFzIHByb2ZpbGUgaW1hZ2UsIGJpb2dyYXBoeSwgbGF0ZXN0IHJlcG9zaXRvcnkgY29tbWl0cywgZXRjLlwiLFxyXG4gICAgICAgICAgICB0ZWNobm9sb2dpZXM6IFtcIkF4aW9zIFwiLCBcIiBHaXRodWIgQVBJIFwiLCBcIiBSZWFjdCBcIiwgXCIgSGVyb2t1IFwiXSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiQ2FsY3VsYXRvclwiLFxyXG4gICAgICAgICAgICBzcmM6IGAkeygwLCB1dGlsc18xLkdldEJhc2VJbWdQYXRoKSgpfS9TY3JlZW5zaG90cy9jYWxjdWxhdG9yU2NyZWVuc2hvdC5wbmdgLFxyXG4gICAgICAgICAgICBwYXRoOiBcImh0dHBzOi8vanMtY2FsY3VsYXRvci1uYWRlci5oZXJva3VhcHAuY29tL1wiLFxyXG4gICAgICAgICAgICBnaXRodWI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3Rlcm1pbmFkZXI3L2pzLWNhbGN1bGF0b3JcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ2FsY3VsYXRvciBhcHAgdGhhdCB1c2VzIEphdmFTY3JpcHQgdG8gcGVyZm9ybSBtYXRoZW1hdGljYWwgZXF1YXRpb25zIGFjY3VyYXRlbHkuXCIsXHJcbiAgICAgICAgICAgIHRlY2hub2xvZ2llczogW1wiUmVhY3RcIiwgXCJTdHlsZWQgQ29tcG9uZW50c1wiLCBcIkhlcm9rdVwiLCBcIkphdmFTY3JpcHRcIl0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBcIjI1ICsgNSBDbG9ja1wiLFxyXG4gICAgICAgICAgICBzcmM6IGAkeygwLCB1dGlsc18xLkdldEJhc2VJbWdQYXRoKSgpfS9TY3JlZW5zaG90cy9jbG9ja1NjcmVlbnNob3QucG5nYCxcclxuICAgICAgICAgICAgcGF0aDogXCJodHRwczovL2Nsb2NrLW5hZGVyLmhlcm9rdWFwcC5jb20vXCIsXHJcbiAgICAgICAgICAgIGdpdGh1YjogXCJodHRwczovL2dpdGh1Yi5jb20vdGVybWluYWRlcjcvY2xvY2tcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBjbG9jayBhcHAgdGhhdCBzd2l0Y2hlcyBiZXR3ZWVuIGlucHV0IHNlc3Npb24gYW5kIGJyZWFrIHRpbWUgYXV0b21hdGljYWxseS5cIixcclxuICAgICAgICAgICAgdGVjaG5vbG9naWVzOiBbXCJSZWFjdFwiLCBcIkphdmFTY3JpcHRcIiwgXCJIZXJva3VcIiwgXCJTdHlsZWQgQ29tcG9uZW50c1wiXSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiRHJ1bS1NYWNoaW5lXCIsXHJcbiAgICAgICAgICAgIHNyYzogYCR7KDAsIHV0aWxzXzEuR2V0QmFzZUltZ1BhdGgpKCl9L1NjcmVlbnNob3RzL2RydW1NYWNoaW5lU2NyZWVuc2hvdC5wbmdgLFxyXG4gICAgICAgICAgICBwYXRoOiBcImh0dHBzOi8vZHJ1bS1tYWNoaW5lLW5hZGVyLmhlcm9rdWFwcC5jb20vXCIsXHJcbiAgICAgICAgICAgIGdpdGh1YjogXCJodHRwczovL2dpdGh1Yi5jb20vdGVybWluYWRlcjcvZHJ1bS1tYWNoaW5lLWZjY1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJEcnVtIG1hY2hpbmUgYXBwIHdpdGggYXVkaW8gdGllZCB0byBlYWNoIGluZGl2aWR1YWwgYnV0dG9uIHByZXNzXCIsXHJcbiAgICAgICAgICAgIHRlY2hub2xvZ2llczogW1xyXG4gICAgICAgICAgICAgICAgXCJSZWFjdFwiLFxyXG4gICAgICAgICAgICAgICAgXCJDU1MgU3R5bGluZ1wiLFxyXG4gICAgICAgICAgICAgICAgXCJKYXZhU2NyaXB0XCIsXHJcbiAgICAgICAgICAgICAgICBcIlJlYWN0IEhvb2tzXCIsXHJcbiAgICAgICAgICAgICAgICBcIkhlcm9rdVwiLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH0sXHJcbiAgICBdO1xyXG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChQcm9qZWN0c0NvbnRhaW5lciwgeyBpZDogdHlwZXNfMS5TZWN0aW9ucy5wcm9qZWN0cyB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2plY3RIZWFkZXJDb250YWluZXIsIG51bGwsXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2plY3RzU2VjdGlvblRpdGxlVGV4dCwgbnVsbCwgXCJQcm9qZWN0cyBJJ3ZlIFdvcmtlZCBPblwiKSxcclxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGluZVR3b18xLkxpbmVUd28sIG51bGwpKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChQcm9qZWN0Q29udGVudENvbnRhaW5lciwgbnVsbCxcclxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUHJvamVjdEl0ZW1zQ29udGFpbmVyLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUHJvamVjdHNQaWN0dXJlcywgbnVsbCwgUHJvamVjdEl0ZW1BcnJheS5tYXAoKHsgdGl0bGUsIHNyYywgcGF0aCwgZGVzY3JpcHRpb24sIHRlY2hub2xvZ2llcywgZ2l0aHViIH0pID0+IChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChQcm9qZWN0SXRlbV8xLlByb2plY3RJdGVtLCB7IHRpdGxlOiB0aXRsZSwgc3JjOiBzcmMsIHBhdGg6IHBhdGgsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiwgdGVjaG5vbG9naWVzOiB0ZWNobm9sb2dpZXMsIGdpdGh1YjogZ2l0aHViIH0pKSkpKSkpKTtcclxufTtcclxuZXhwb3J0cy5Qcm9qZWN0cyA9IFByb2plY3RzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlNvY2lhbHMgPSB2b2lkIDA7XHJcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCBmcmFtZXJfbW90aW9uXzEgPSByZXF1aXJlKFwiZnJhbWVyLW1vdGlvblwiKTtcclxuY29uc3QgVGlueUdpdGh1Yl8xID0gcmVxdWlyZShcIi4uL2ltYWdlcy9UaW55R2l0aHViXCIpO1xyXG5jb25zdCBTb2NpYWxzQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogc3RpY2t5O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgei1pbmRleDogMztcclxuICBib3R0b206IDBweDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJiMmIyYjtcclxuICBwYWRkaW5nLWxlZnQ6IDgwcHg7XHJcbmA7XHJcbmNvbnN0IFNvY2lhbHNMaXN0ID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG5gO1xyXG5jb25zdCBTb2NpYWxMaW5rSXRlbSA9ICgwLCBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQpKGZyYW1lcl9tb3Rpb25fMS5tb3Rpb24uZGl2KSBgXHJcbiAgOmhvdmVyIHtcclxuICAgIGNvbG9yOiAjMTRhNzZjO1xyXG4gIH1cclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICB0cmFuc2l0aW9uOiAwLjVzO1xyXG5gO1xyXG5jb25zdCBTb2NpYWxzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChTb2NpYWxzQ29udGFpbmVyLCBudWxsLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNvY2lhbHNMaXN0LCBudWxsLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChTb2NpYWxMaW5rSXRlbSwgeyB3aGlsZUhvdmVyOiB7IHk6IC01IH0sIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMiB9IH0sXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChUaW55R2l0aHViXzEuVGlueUdpdGh1YiwgeyBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKFwiaHR0cHM6Ly9naXRodWIuY29tL3Rlcm1pbmFkZXI3XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gfSkpKSkpO1xyXG59O1xyXG5leHBvcnRzLlNvY2lhbHMgPSBTb2NpYWxzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkFwcExpbmsgPSB2b2lkIDA7XHJcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCBMb2dvSXRlbSA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5zdmcgYFxyXG4gIDpob3ZlciB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBjb2xvcjogIzE0YTc2YztcclxuICB9XHJcbiAgdHJhbnNpdGlvbjogMC41cztcclxuYDtcclxuY29uc3QgQXBwTGluayA9ICh7IGhlaWdodCA9IFwiMjVweFwiLCB3aWR0aCA9IFwiMjVweFwiLCBvbkNsaWNrLCB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvZ29JdGVtLCB7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHJvbGU6IFwiaW1nXCIsIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsIGZpbGw6IFwibm9uZVwiLCBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLCBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIiwgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiLCBoZWlnaHQ6IGhlaWdodCwgd2lkdGg6IHdpZHRoLCBvbkNsaWNrOiBvbkNsaWNrIH0sXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCBcIkV4dGVybmFsIExpbmtcIiksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMTggMTN2NmEyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMlY4YTIgMiAwIDAgMSAyLTJoNlwiIH0pLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicG9seWxpbmVcIiwgeyBwb2ludHM6IFwiMTUgMyAyMSAzIDIxIDlcIiB9KSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpbmVcIiwgeyB4MTogXCIxMFwiLCB5MTogXCIxNFwiLCB4MjogXCIyMVwiLCB5MjogXCIzXCIgfSkpKTtcclxufTtcclxuZXhwb3J0cy5BcHBMaW5rID0gQXBwTGluaztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5DU1NMb2dvID0gdm9pZCAwO1xyXG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmNvbnN0IENTU0xvZ28gPSAoeyBoZWlnaHQgPSBcIjQ1cHhcIiwgd2lkdGggPSBcIjQ1cHhcIiB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgdmlld0JveDogXCItNTIuNSAwIDM2MSAzNjFcIiwgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgcHJlc2VydmVBc3BlY3RSYXRpbzogXCJ4TWlkWU1pZFwiIH0sXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMTI3Ljg0NCAzNjAuMDg4TDIzLjY2MiAzMzEuMTY2LjQ0NSA3MC43NjZoMjU1LjExbC0yMy4yNDEgMjYwLjM2LTEwNC40NyAyOC45NjJ6XCIsIGZpbGw6IFwiIzI2NERFNFwiIH0pLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTIxMi40MTcgMzE0LjU0N2wxOS44Ni0yMjIuNDlIMTI4VjMzNy45NWw4NC40MTctMjMuNDAzelwiLCBmaWxsOiBcIiMyOTY1RjFcIiB9KSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk01My42NjkgMTg4LjYzNmwyLjg2MiAzMS45MzdIMTI4di0zMS45MzdINTMuNjY5ek00Ny45MTcgMTIzLjk5NWwyLjkwMyAzMS45MzdIMTI4di0zMS45MzdINDcuOTE3ek0xMjggMjcxLjU4bC0uMTQuMDM3LTM1LjU2OC05LjYwNC0yLjI3NC0yNS40NzFoLTMyLjA2bDQuNDc0IDUwLjE0NiA2NS40MjEgMTguMTYuMTQ3LS4wNFYyNzEuNTh6XCIsIGZpbGw6IFwiI0VCRUJFQlwiIH0pLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTYwLjQ4NCAwaDM4LjY4djE2LjE3Nkg3Ni42NnYxNi4xNzZoMjIuNTA2djE2LjE3NUg2MC40ODRWMHpNMTA2LjkwMSAwaDM4LjY4MXYxNC4wNjZoLTIyLjUwNXYyLjgxM2gyMi41MDV2MzIuMzUyaC0zOC42OFYzNC40NmgyMi41MDV2LTIuODEzSDEwNi45VjB6TTE1My4zMTkgMEgxOTJ2MTQuMDY2aC0yMi41MDV2Mi44MTNIMTkydjMyLjM1MmgtMzguNjgxVjM0LjQ2aDIyLjUwNXYtMi44MTNIMTUzLjMyVjB6XCIgfSksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMjAyLjEyNyAxODguNjM2bDUuNzY1LTY0LjY0MUgxMjcuODl2MzEuOTM3aDQ1LjAwMmwtMi45MDYgMzIuNzA0SDEyNy44OXYzMS45MzdoMzkuMzI3bC0zLjcwOCA0MS40Mi0zNS42MiA5LjYxNHYzMy4yMjZsNjUuNDczLTE4LjE0NS40OC01LjM5NiA3LjUwNi04NC4wOC43NzktOC41NzZ6XCIsIGZpbGw6IFwiI0ZGRlwiIH0pKSk7XHJcbn07XHJcbmV4cG9ydHMuQ1NTTG9nbyA9IENTU0xvZ287XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRW1haWxMb2dvID0gdm9pZCAwO1xyXG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmNvbnN0IHN0eWxlZF9jb21wb25lbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN0eWxlZC1jb21wb25lbnRzXCIpKTtcclxuY29uc3QgTG9nb0l0ZW0gPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuc3ZnIGBcclxuICA6aG92ZXIge1xyXG4gICAgZmlsbDogIzE0YTc2YztcclxuICB9XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIHRyYW5zaXRpb246IGZpbGwgMC41cztcclxuYDtcclxuY29uc3QgRW1haWxMb2dvID0gKHsgaGVpZ2h0ID0gXCI5MHB4XCIsIHdpZHRoID0gXCI2NXB4XCIsIG9uQ2xpY2ssIH0pID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9nb0l0ZW0sIHsgZmlsbDogXCJ3aGl0ZVwiLCB2ZXJzaW9uOiBcIjEuMVwiLCBpZDogXCJDYXBhXzFcIiwgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgdmlld0JveDogXCIwIDAgOTYuMjY0IDk2LjI2NFwiLCBvbkNsaWNrOiBvbkNsaWNrIH0sXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTk0LjI2NCwxNy4xMzJIMmMtMS4xMDQsMC0yLDAuODk2LTIsMnY1OGMwLDEuMTA0LDAuODk2LDIsMiwyaDkyLjI2NGMxLjEwNCwwLDItMC44OTYsMi0ydi01OFxcclxcbiAgICAgICAgICAgIEM5Ni4yNjQsMTguMDI4LDk1LjM2NywxNy4xMzIsOTQuMjY0LDE3LjEzMnogTTkwLjkyOSwzNC44MjVjMCwwLjU0OC0wLjI5OSwxLjA1Mi0wLjc3OCwxLjMxNWwtNDEuMjksMjIuNjFcXHJcXG4gICAgICAgICAgICBjLTAuMjI1LDAuMTIzLTAuNDczLDAuMTg1LTAuNzIxLDAuMTg1cy0wLjQ5Ni0wLjA2Mi0wLjcyMS0wLjE4NEw2LjExNSwzNi4xNDFjLTAuNDgxLTAuMjYzLTAuNzgtMC43NjgtMC43OC0xLjMxNnYtNy41NVxcclxcbiAgICAgICAgICAgIGMwLTAuNTI1LDAuMjc0LTEuMDExLDAuNzI0LTEuMjgzYzAuNDQ3LTAuMjcxLDEuMDA4LTAuMjksMS40NzItMC4wNDZsMzkuNjg0LDIwLjc2MmMwLjU1MiwwLjI5LDEuMzAxLDAuMjg5LDEuODU1LTAuMDAxXFxyXFxuICAgICAgICAgICAgbDM5LjY2NC0yMC43NmMwLjQ2My0wLjI0NCwxLjAyMS0wLjIyNiwxLjQ3MiwwLjA0NmMwLjQ0OCwwLjI3MiwwLjcyNCwwLjc1OCwwLjcyNCwxLjI4M0w5MC45MjksMzQuODI1TDkwLjkyOSwzNC44MjV6XCIgfSkpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpKSk7XHJcbn07XHJcbmV4cG9ydHMuRW1haWxMb2dvID0gRW1haWxMb2dvO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkdpdGh1YiA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBzdHlsZWRfY29tcG9uZW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKSk7XHJcbmNvbnN0IExvZ29JdGVtID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LnN2ZyBgXHJcbiAgOmhvdmVyIHtcclxuICAgIGZpbGw6ICNlNzNjN2U7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbmA7XHJcbmNvbnN0IEdpdGh1YiA9ICh7IGhlaWdodCA9IFwiOTBweFwiLCB3aWR0aCA9IFwiOTBweFwiLCBvbkNsaWNrLCB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvZ29JdGVtLCB7IGZpbGw6IFwid2hpdGVcIiwgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgdmlld0JveDogXCIwIDAgMjQgMjRcIiwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgb25DbGljazogb25DbGljayB9LFxyXG4gICAgICAgIFwiIFwiLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEwLjksMi4xYy00LjYsMC41LTguMyw0LjItOC44LDguN2MtMC41LDQuNywyLjIsOC45LDYuMywxMC41QzguNywyMS40LDksMjEuMiw5LDIwLjh2LTEuNmMwLDAtMC40LDAuMS0wLjksMC4xIGMtMS40LDAtMi0xLjItMi4xLTEuOWMtMC4xLTAuNC0wLjMtMC43LTAuNi0xQzUuMSwxNi4zLDUsMTYuMyw1LDE2LjJDNSwxNiw1LjMsMTYsNS40LDE2YzAuNiwwLDEuMSwwLjcsMS4zLDFjMC41LDAuOCwxLjEsMSwxLjQsMSBjMC40LDAsMC43LTAuMSwwLjktMC4yYzAuMS0wLjcsMC40LTEuNCwxLTEuOGMtMi4zLTAuNS00LTEuOC00LTRjMC0xLjEsMC41LTIuMiwxLjItM0M3LjEsOC44LDcsOC4zLDcsNy42QzcsNy4yLDcsNi42LDcuMyw2IGMwLDAsMS40LDAsMi44LDEuM0MxMC42LDcuMSwxMS4zLDcsMTIsN3MxLjQsMC4xLDIsMC4zQzE1LjMsNiwxNi44LDYsMTYuOCw2QzE3LDYuNiwxNyw3LjIsMTcsNy42YzAsMC44LTAuMSwxLjItMC4yLDEuNCBjMC43LDAuOCwxLjIsMS44LDEuMiwzYzAsMi4yLTEuNywzLjUtNCw0YzAuNiwwLjUsMSwxLjQsMSwyLjN2Mi42YzAsMC4zLDAuMywwLjYsMC43LDAuNWMzLjctMS41LDYuMy01LjEsNi4zLTkuMyBDMjIsNi4xLDE2LjksMS40LDEwLjksMi4xelwiIH0pKSk7XHJcbn07XHJcbmV4cG9ydHMuR2l0aHViID0gR2l0aHViO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkhUTUxMb2dvID0gdm9pZCAwO1xyXG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmNvbnN0IEhUTUxMb2dvID0gKHsgaGVpZ2h0ID0gXCI0NXB4XCIsIHdpZHRoID0gXCI0NXB4XCIgfSkgPT4ge1xyXG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHZpZXdCb3g6IFwiLTUyLjUgMCAzNjEgMzYxXCIsIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHByZXNlcnZlQXNwZWN0UmF0aW86IFwieE1pbllNaW4gbWVldFwiIH0sXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMjU1LjU1NSA3MC43NjZsLTIzLjI0MSAyNjAuMzYtMTA0LjQ3IDI4Ljk2Mi0xMDQuMTgyLTI4LjkyMkwuNDQ1IDcwLjc2NmgyNTUuMTF6XCIsIGZpbGw6IFwiI0U0NEQyNlwiIH0pLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEyOCAzMzcuOTVsODQuNDE3LTIzLjQwMyAxOS44Ni0yMjIuNDlIMTI4VjMzNy45NXpcIiwgZmlsbDogXCIjRjE2NTI5XCIgfSksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNODIuODIgMTU1LjkzMkgxMjh2LTMxLjkzN0g0Ny45MTdsLjc2NCA4LjU2OCA3Ljg1IDg4LjAxSDEyOHYtMzEuOTM3SDg1LjczOWwtMi45MTktMzIuNzA0ek05MC4wMTggMjM2LjU0MmgtMzIuMDZsNC40NzQgNTAuMTQ2IDY1LjQyMSAxOC4xNi4xNDctLjA0VjI3MS41OGwtLjE0LjAzNy0zNS41NjgtOS42MDQtMi4yNzQtMjUuNDcxelwiLCBmaWxsOiBcIiNFQkVCRUJcIiB9KSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0yNC4xOCAwaDE2LjIzdjE2LjAzNWgxNC44NDdWMGgxNi4yMzF2NDguNTU4aC0xNi4yM3YtMTYuMjZINDAuNDExdjE2LjI2aC0xNi4yM1Ywek05Mi44MyAxNi4xMDNINzguNTQ0VjBoNDQuODE0djE2LjEwM2gtMTQuMjk1djMyLjQ1NWgtMTYuMjNWMTYuMTAzaC0uMDAxek0xMzAuNDcgMGgxNi45MjNsMTAuNDEgMTcuMDYyTDE2OC4yMDMgMGgxNi45M3Y0OC41NThoLTE2LjE2NFYyNC40OWwtMTEuMTY2IDE3LjI2NWgtLjI4TDE0Ni4zNSAyNC40OXYyNC4wNjhoLTE1Ljg4VjB6TTE5My4yMSAwaDE2LjIzNXYzMi41MDhoMjIuODI0djE2LjA1aC0zOS4wNlYwelwiIH0pLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEyNy44OSAyMjAuNTczaDM5LjMyN2wtMy43MDggNDEuNDItMzUuNjIgOS42MTR2MzMuMjI2bDY1LjQ3My0xOC4xNDUuNDgtNS4zOTYgNy41MDYtODQuMDguNzc5LTguNTc2SDEyNy44OXYzMS45Mzd6TTEyNy44OSAxNTUuODU0di4wNzhoNzcuMTQzbC42NC03LjE3OCAxLjQ1Ni0xNi4xOTEuNzYzLTguNTY4SDEyNy44OXYzMS44NnpcIiwgZmlsbDogXCIjRkZGXCIgfSkpKTtcclxufTtcclxuZXhwb3J0cy5IVE1MTG9nbyA9IEhUTUxMb2dvO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkpTTG9nbyA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBKU0xvZ28gPSAoeyBoZWlnaHQgPSBcIjQwcHhcIiwgd2lkdGggPSBcIjQwcHhcIiB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgdmlld0JveDogXCIwIDAgMjU2IDI1NlwiLCB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBcInhNaW5ZTWluIG1lZXRcIiB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTAgMGgyNTZ2MjU2SDBWMHpcIiwgZmlsbDogXCIjRjdERjFFXCIgfSksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNNjcuMzEyIDIxMy45MzJsMTkuNTktMTEuODU2YzMuNzggNi43MDEgNy4yMTggMTIuMzcxIDE1LjQ2NSAxMi4zNzEgNy45MDUgMCAxMi44OS0zLjA5MiAxMi44OS0xNS4xMnYtODEuNzk4aDI0LjA1N3Y4Mi4xMzhjMCAyNC45MTctMTQuNjA2IDM2LjI1OS0zNS45MTYgMzYuMjU5LTE5LjI0NSAwLTMwLjQxNi05Ljk2Ny0zNi4wODctMjEuOTk2TTE1Mi4zODEgMjExLjM1NGwxOS41ODgtMTEuMzQxYzUuMTU3IDguNDIxIDExLjg1OSAxNC42MDcgMjMuNzE1IDE0LjYwNyA5Ljk2OSAwIDE2LjMyNS00Ljk4NCAxNi4zMjUtMTEuODU4IDAtOC4yNDgtNi41My0xMS4xNy0xNy41MjgtMTUuOThsLTYuMDEzLTIuNThjLTE3LjM1Ny03LjM4Ny0yOC44Ny0xNi42NjctMjguODctMzYuMjU3IDAtMTguMDQ0IDEzLjc0Ny0zMS43OTIgMzUuMjI4LTMxLjc5MiAxNS4yOTQgMCAyNi4yOTIgNS4zMjggMzQuMTk2IDE5LjI0N0wyMTAuMjkgMTQ3LjQzYy00LjEyNS03LjM4OS04LjU5MS0xMC4zMS0xNS40NjUtMTAuMzEtNy4wNDYgMC0xMS41MTQgNC40NjgtMTEuNTE0IDEwLjMxIDAgNy4yMTcgNC40NjggMTAuMTQgMTQuNzc4IDE0LjYwOGw2LjAxNCAyLjU3N2MyMC40NSA4Ljc2NSAzMS45NjMgMTcuNyAzMS45NjMgMzcuODA0IDAgMjEuNjU0LTE3LjAxMiAzMy41MS0zOS44NjcgMzMuNTEtMjIuMzM5IDAtMzYuNzc0LTEwLjY1NC00My44MTktMjQuNTc0XCIgfSkpKTtcclxufTtcclxuZXhwb3J0cy5KU0xvZ28gPSBKU0xvZ287XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTGluZVR3byA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBzdHlsZWRfY29tcG9uZW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKSk7XHJcbmNvbnN0IExvZ29JdGVtID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LnN2ZyBgYDtcclxuY29uc3QgTGluZVR3byA9ICh7IGhlaWdodCA9IFwiNjBweFwiLCB3aWR0aCA9IFwiMTUwcHhcIiB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvZ29JdGVtLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHZpZXdCb3g6IFwiMCA0IDE2IDEyXCIsIHZlcnNpb246IFwiMS4xXCIsIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIGZpbGw6IFwid2hpdGVcIiB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGZpbGw6IFwid2hpdGVcIiwgZDogXCJNMCA3aDE2djFoLTE2di0xelwiIH0pKSk7XHJcbn07XHJcbmV4cG9ydHMuTGluZVR3byA9IExpbmVUd287XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTGlua2VkaW4gPSB2b2lkIDA7XHJcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCBMb2dvSXRlbSA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5zdmcgYFxyXG4gIDpob3ZlciB7XHJcbiAgICBmaWxsOiAjMjNhNmQ1O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICB0cmFuc2l0aW9uOiBmaWxsIDAuNXM7XHJcbmA7XHJcbmNvbnN0IExpbmtlZGluID0gKHsgaGVpZ2h0ID0gXCI5MHB4XCIsIHdpZHRoID0gXCI5MHB4XCIsIG9uQ2xpY2ssIH0pID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9nb0l0ZW0sIHsgZmlsbDogXCJ3aGl0ZVwiLCB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB2aWV3Qm94OiBcIjAgMCAzMCAzMFwiLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBvbkNsaWNrOiBvbkNsaWNrIH0sXHJcbiAgICAgICAgXCIgXCIsXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMTUsM0M4LjM3MywzLDMsOC4zNzMsMywxNWMwLDYuNjI3LDUuMzczLDEyLDEyLDEyczEyLTUuMzczLDEyLTEyQzI3LDguMzczLDIxLjYyNywzLDE1LDN6IE0xMC40OTYsOC40MDMgYzAuODQyLDAsMS40MDMsMC41NjEsMS40MDMsMS4zMDljMCwwLjc0OC0wLjU2MSwxLjMwOS0xLjQ5NiwxLjMwOUM5LjU2MSwxMS4wMjIsOSwxMC40Niw5LDkuNzEyQzksOC45NjQsOS41NjEsOC40MDMsMTAuNDk2LDguNDAzeiBNMTIsMjBIOXYtOGgzVjIweiBNMjIsMjBoLTIuODI0di00LjM3MmMwLTEuMjA5LTAuNzUzLTEuNDg4LTEuMDM1LTEuNDg4cy0xLjIyNCwwLjE4Ni0xLjIyNCwxLjQ4OGMwLDAuMTg2LDAsNC4zNzIsMCw0LjM3MkgxNHYtOCBoMi45MTh2MS4xMTZDMTcuMjk0LDEyLjQ2NSwxOC4wNDcsMTIsMTkuNDU5LDEyQzIwLjg3MSwxMiwyMiwxMy4xMTYsMjIsMTUuNjI4VjIwelwiIH0pKSk7XHJcbn07XHJcbmV4cG9ydHMuTGlua2VkaW4gPSBMaW5rZWRpbjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Ob2RlSlNMb2dvID0gdm9pZCAwO1xyXG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmNvbnN0IE5vZGVKU0xvZ28gPSAoeyBoZWlnaHQgPSBcIjQwcHhcIiwgd2lkdGggPSBcIjQwcHhcIiB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgdmlld0JveDogXCItMTYuNSAwIDI4OSAyODlcIiwgdmVyc2lvbjogXCIxLjFcIiwgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgcHJlc2VydmVBc3BlY3RSYXRpbzogXCJ4TWlkWU1pZFwiIH0sXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEyNy45OTk5OTksMjg4LjQ2Mzc3MSBDMTI0LjAyNDg0NCwyODguNDYzNzcxIDEyMC4zMTQ2OTksMjg3LjQwMzcyOCAxMTYuODY5NTY0LDI4NS41NDg2NTYgTDgxLjYyMzE4ODQsMjY0LjYxMjgzOCBDNzYuMzIyOTgsMjYxLjY5NzcyNCA3OC45NzMwODU0LDI2MC42Mzc2ODIgODAuNTYzMTQ1OCwyNjAuMTA3NjYxIEM4Ny43MTg0MjU5LDI1Ny43MjI1NyA4OS4wNDM0Nzc1LDI1Ny4xOTI1NDcgOTYuNDYzNzY4OCwyNTIuOTUyMzgxIEM5Ny4yNTg3OTc5LDI1Mi40MjIzNjEgOTguMzE4ODQwNSwyNTIuNjg3MzcyIDk5LjExMzg3MTgsMjUzLjIxNzM5MiBMMTI2LjE0NDkyNywyNjkuMzgzMDI0IEMxMjcuMjA0OTcsMjY5LjkxMzA0NSAxMjguNTMwMDIxLDI2OS45MTMwNDUgMTI5LjMyNTA1MywyNjkuMzgzMDI0IEwyMzUuMDY0MTgyLDIwOC4xNjU2MzQgQzIzNi4xMjQyMjUsMjA3LjYzNTYxMSAyMzYuNjU0MjQ1LDIwNi41NzU1NzEgMjM2LjY1NDI0NSwyMDUuMjUwNTE5IEwyMzYuNjU0MjQ1LDgzLjA4MDc0NjcgQzIzNi42NTQyNDUsODEuNzU1NjkyOSAyMzYuMTI0MjI1LDgwLjY5NTY1MjYgMjM1LjA2NDE4Miw4MC4xNjU2MzI0IEwxMjkuMzI1MDUzLDE5LjIxMzI1MDYgQzEyOC4yNjUwMSwxOC42ODMyMzA1IDEyNi45Mzk5NTksMTguNjgzMjMwNSAxMjYuMTQ0OTI3LDE5LjIxMzI1MDYgTDIwLjQwNTc5NTQsODAuMTY1NjMyNCBDMTkuMzQ1NzU1MSw4MC42OTU2NTI2IDE4LjgxNTczNDksODIuMDIwNzA0MSAxOC44MTU3MzQ5LDgzLjA4MDc0NjcgTDE4LjgxNTczNDksMjA1LjI1MDUxOSBDMTguODE1NzM0OSwyMDYuMzEwNTYgMTkuMzQ1NzU1MSwyMDcuNjM1NjExIDIwLjQwNTc5NTQsMjA4LjE2NTYzNCBMNDkuMjkxOTI0NywyMjQuODYxMjg2IEM2NC45Mjc1MzY0LDIzMi44MTE1OTUgNzQuNzMyOTE5NiwyMjMuNTM2MjM0IDc0LjczMjkxOTYsMjE0LjI2MDg3MSBMNzQuNzMyOTE5Niw5My42ODExNTkgQzc0LjczMjkxOTYsOTIuMDkxMDk4NSA3Ni4wNTc5NzExLDkwLjUwMTAzNTggNzcuOTEzMDQyOCw5MC41MDEwMzU4IEw5MS40Mjg1NzE2LDkwLjUwMTAzNTggQzkzLjAxODYzNDMsOTAuNTAxMDM1OCA5NC42MDg2OTQ4LDkxLjgyNjA4NzMgOTQuNjA4Njk0OCw5My42ODExNTkgTDk0LjYwODY5NDgsMjE0LjI2MDg3MSBDOTQuNjA4Njk0OCwyMzUuMTk2Njg5IDgzLjIxMzI1MTIsMjQ3LjM4NzE2NCA2My4zMzc0NzM3LDI0Ny4zODcxNjQgQzU3LjI0MjIzNjIsMjQ3LjM4NzE2NCA1Mi40NzIwNTAyLDI0Ny4zODcxNjQgMzguOTU2NTIxNCwyNDAuNzYxOTA2IEwxMS4xMzA0MzQ3LDIyNC44NjEyODYgQzQuMjQwMTY1ODEsMjIwLjg4NjEyOSA1LjY4NDM0MTg5ZS0xNCwyMTMuNDY1ODQgNS42ODQzNDE4OWUtMTQsMjA1LjUxNTUyOCBMNS42ODQzNDE4OWUtMTQsODMuMzQ1NzU1NyBDNS42ODQzNDE4OWUtMTQsNzUuMzk1NDQ2NSA0LjI0MDE2NTgxLDY3Ljk3NTE1NTIgMTEuMTMwNDM0Nyw2NC4wMDAwMDA2IEwxMTYuODY5NTY0LDIuNzgyNjA3NTIgQzEyMy40OTQ4MjQsLTAuOTI3NTM1ODQxIDEzMi41MDUxNzYsLTAuOTI3NTM1ODQxIDEzOS4xMzA0MzYsMi43ODI2MDc1MiBMMjQ0Ljg2OTU2NSw2NC4wMDAwMDA2IEMyNTEuNzU5ODM0LDY3Ljk3NTE1NTIgMjU2LDc1LjM5NTQ0NjUgMjU2LDgzLjM0NTc1NTcgTDI1NiwyMDUuNTE1NTI4IEMyNTYsMjEzLjQ2NTg0IDI1MS43NTk4MzQsMjIwLjg4NjEyOSAyNDQuODY5NTY1LDIyNC44NjEyODYgTDEzOS4xMzA0MzYsMjg2LjA3ODY3NiBDMTM1LjY4NTI5OSwyODcuNjY4NzM5IDEzMS43MTAxNDUsMjg4LjQ2Mzc3MSAxMjcuOTk5OTk5LDI4OC40NjM3NzEgTDEyNy45OTk5OTksMjg4LjQ2Mzc3MSBaIE0xNjAuNTk2Mjc0LDIwNC40NTU0ODggQzExNC4yMTk0NjEsMjA0LjQ1NTQ4OCAxMDQuNjc5MDg5LDE4My4yNTQ2NTkgMTA0LjY3OTA4OSwxNjUuMjMzOTU1IEMxMDQuNjc5MDg5LDE2My42NDM4OTMgMTA2LjAwNDE0MSwxNjIuMDUzODMyIDEwNy44NTkyMTIsMTYyLjA1MzgzMiBMMTIxLjYzOTc1MiwxNjIuMDUzODMyIEMxMjMuMjI5ODEzLDE2Mi4wNTM4MzIgMTI0LjU1NDg2NCwxNjMuMTEzODcyIDEyNC41NTQ4NjQsMTY0LjcwMzkzNSBDMTI2LjY3NDk0NywxNzguNzQ5NDg0IDEzMi43NzAxODcsMTg1LjYzOTc1MyAxNjAuODYxMjgzLDE4NS42Mzk3NTMgQzE4My4xMjIxNTQsMTg1LjYzOTc1MyAxOTIuNjYyNTI2LDE4MC42MDQ1NTYgMTkyLjY2MjUyNiwxNjguNjc5MDkgQzE5Mi42NjI1MjYsMTYxLjc4ODgyMSAxOTAuMDEyNDIzLDE1Ni43NTM2MjQgMTU1LjI5NjA2NSwxNTMuMzA4NDg5IEMxMjYuNDA5OTM4LDE1MC4zOTMzNzUgMTA4LjM4OTIzNSwxNDQuMDMzMTI2IDEwOC4zODkyMzUsMTIwLjk3NzIyNiBDMTA4LjM4OTIzNSw5OS41MTEzODc1IDEyNi40MDk5MzgsODYuNzkwODkwMSAxNTYuNjIxMTE5LDg2Ljc5MDg5MDEgQzE5MC41NDI0NDMsODYuNzkwODkwMSAyMDcuMjM4MDk1LDk4LjQ1MTM0NzIgMjA5LjM1ODE3OCwxMjMuODkyMzQgQzIwOS4zNTgxNzgsMTI0LjY4NzM3MSAyMDkuMDkzMTY3LDEyNS40ODI0MDMgMjA4LjU2MzE0NywxMjYuMjc3NDM0IEMyMDguMDMzMTI3LDEyNi44MDc0NTQgMjA3LjIzODA5NSwxMjcuMzM3NDc0IDIwNi40NDMwNjQsMTI3LjMzNzQ3NCBMMTkyLjY2MjUyNiwxMjcuMzM3NDc0IEMxOTEuMzM3NDc1LDEyNy4zMzc0NzQgMTkwLjAxMjQyMywxMjYuMjc3NDM0IDE4OS43NDc0MTIsMTI0Ljk1MjM4MiBDMTg2LjU2NzI4OSwxMTAuMzc2ODEzIDE3OC4zNTE5NjYsMTA1LjYwNjYyNSAxNTYuNjIxMTE5LDEwNS42MDY2MjUgQzEzMi4yNDAxNjUsMTA1LjYwNjYyNSAxMjkuMzI1MDUzLDExNC4wODY5NTcgMTI5LjMyNTA1MywxMjAuNDQ3MjA1IEMxMjkuMzI1MDUzLDEyOC4xMzI1MDYgMTMyLjc3MDE4NywxMzAuNTE3NiAxNjUuNjMxNDcxLDEzNC43NTc3NjYgQzE5OC4yMjc3NDQsMTM4Ljk5NzkzMSAyMTMuNTk4MzQ0LDE0NS4wOTMxNjkgMjEzLjU5ODM0NCwxNjcuODg0MDU4IEMyMTMuMzMzMzMzLDE5MS4yMDQ5NyAxOTQuMjUyNTg5LDIwNC40NTU0ODggMTYwLjU5NjI3NCwyMDQuNDU1NDg4IEwxNjAuNTk2Mjc0LDIwNC40NTU0ODggWlwiLCBmaWxsOiBcIiM1MzlFNDNcIiB9KSkpKTtcclxufTtcclxuZXhwb3J0cy5Ob2RlSlNMb2dvID0gTm9kZUpTTG9nbztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5SZWFjdExvZ28gPSB2b2lkIDA7XHJcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCBMb2dvSXRlbSA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5zdmcgYGA7XHJcbmNvbnN0IFJlYWN0TG9nbyA9ICh7IGhlaWdodCA9IFwiNDVweFwiLCB3aWR0aCA9IFwiNDVweFwiIH0pID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9nb0l0ZW0sIHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgdmlld0JveDogXCIwIDAgMzIgMzJcIiB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7IHRyYW5zZm9ybTogXCJtYXRyaXgoLjA1Njk2IDAgMCAuMDU2OTYgLjY0Nzc0NCAyLjQzODI2KVwiLCBmaWxsOiBcIm5vbmVcIiwgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiIH0sXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHsgcjogXCI1MC4xNjdcIiwgY3k6IFwiMjM3LjYyOFwiLCBjeDogXCIyNjkuNTI5XCIsIGZpbGw6IFwiIzAwZDhmZlwiIH0pLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgeyBzdHJva2U6IFwiIzAwZDhmZlwiLCBzdHJva2VXaWR0aDogXCIyNFwiIH0sXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0yNjkuNTMgMTM1LjYyOGM2Ny4zNTYgMCAxMjkuOTI4IDkuNjY1IDE3Ny4xMDcgMjUuOTA3IDU2Ljg0NCAxOS41NyA5MS43OTQgNDkuMjMzIDkxLjc5NCA3Ni4wOTMgMCAyNy45OS0zNy4wNCA1OS41MDMtOTguMDgzIDc5LjcyOC00Ni4xNSAxNS4yOS0xMDYuODggMjMuMjcyLTE3MC44MTggMjMuMjcyLTY1LjU1NCAwLTEyNy42My03LjQ5Mi0xNzQuMy0yMy40NC01OS4wNDYtMjAuMTgyLTk0LjYxLTUyLjEwMy05NC42MS03OS41NiAwLTI2LjY0MiAzMy4zNy01Ni4wNzYgODkuNDE1LTc1LjYxNiA0Ny4zNTUtMTYuNTEgMTExLjQ3Mi0yNi4zODQgMTc5LjQ4Ni0yNi4zODR6XCIgfSksXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0xODAuNzM2IDE4Ni45MjJjMzMuNjUtNTguMzQ4IDczLjI4LTEwNy43MjQgMTEwLjkyLTE0MC40OEMzMzcuMDA2IDYuOTc2IDM4MC4xNjMtOC40OCA0MDMuNDMgNC45MzdjMjQuMjQ4IDEzLjk4MyAzMy4wNDIgNjEuODE0IDIwLjA2NyAxMjQuNzk2LTkuOCA0Ny42MTgtMzMuMjM0IDEwNC4yMTItNjUuMTc2IDE1OS42LTMyLjc1IDU2Ljc4OC03MC4yNSAxMDYuODItMTA3LjM3NyAxMzkuMjcyLTQ2Ljk4IDQxLjA2OC05Mi40IDU1LjkzLTExNi4xODUgNDIuMjEzLTIzLjA4LTEzLjMtMzEuOTA2LTU2LjkyLTIwLjgzNC0xMTUuMjMzIDkuMzU1LTQ5LjI3IDMyLjgzMi0xMDkuNzQ1IDY2LjgtMTY4LjY2NHpcIiB9KSxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTE4MC44MiAyODkuNDgyQzE0Ny4wNzUgMjMxLjIgMTI0LjEgMTcyLjE5NSAxMTQuNTEgMTIzLjIyN2MtMTEuNTQ0LTU5LTMuMzgyLTEwNC4xMSAxOS44NjQtMTE3LjU2NiAyNC4yMjQtMTQuMDI0IDcwLjA1NSAyLjI0NCAxMTguMTQgNDQuOTQgMzYuMzU2IDMyLjI4IDczLjY4OCA4MC44MzcgMTA1LjcyMyAxMzYuMTczIDMyLjg0NCA1Ni43MzMgNTcuNDYgMTE0LjIxIDY3LjAzNiAxNjIuNTgyIDEyLjExNyA2MS4yMTMgMi4zMSAxMDcuOTg0LTIxLjQ1MyAxMjEuNzQtMjMuMDU3IDEzLjM0OC02NS4yNS0uNzg0LTExMC4yNC0zOS41LTM4LjAxMy0zMi43MS03OC42ODItODMuMjUzLTExMi43Ni0xNDIuMTE1elwiIH0pKSkpKTtcclxufTtcclxuZXhwb3J0cy5SZWFjdExvZ28gPSBSZWFjdExvZ287XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuUmVzdW1lID0gdm9pZCAwO1xyXG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmNvbnN0IHN0eWxlZF9jb21wb25lbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN0eWxlZC1jb21wb25lbnRzXCIpKTtcclxuY29uc3QgTG9nb0l0ZW0gPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuc3ZnIGBcclxuICA6aG92ZXIge1xyXG4gICAgZmlsbDogI2VlNzc1MjtcclxuICB9XHJcbiAgdHJhbnNpdGlvbjogMC41cztcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbmA7XHJcbmNvbnN0IFJlc3VtZSA9ICh7IGhlaWdodCA9IFwiNzVweFwiLCB3aWR0aCA9IFwiODBweFwiLCBvbkNsaWNrLCB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvZ29JdGVtLCB7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIGhlaWdodDogaGVpZ2h0LCB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLCB3aWR0aDogd2lkdGgsIGZpbGw6IFwid2hpdGVcIiwgb25DbGljazogb25DbGljayB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTAgMGgyNHYyNEgwelwiLCBmaWxsOiBcIm5vbmVcIiB9KSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0xNCAySDZjLTEuMSAwLTEuOTkuOS0xLjk5IDJMNCAyMGMwIDEuMS44OSAyIDEuOTkgMkgxOGMxLjEgMCAyLS45IDItMlY4bC02LTZ6bTIgMTZIOHYtMmg4djJ6bTAtNEg4di0yaDh2MnptLTMtNVYzLjVMMTguNSA5SDEzelwiIH0pKSk7XHJcbn07XHJcbmV4cG9ydHMuUmVzdW1lID0gUmVzdW1lO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlRpbnlHaXRodWIgPSB2b2lkIDA7XHJcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCBMb2dvSXRlbSA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdC5zdmcgYFxyXG4gIDpob3ZlciB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBjb2xvcjogIzE0YTc2YztcclxuICB9XHJcblxyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbmA7XHJcbmNvbnN0IFRpbnlHaXRodWIgPSAoeyBoZWlnaHQgPSBcIjI1cHhcIiwgd2lkdGggPSBcIjI1cHhcIiwgb25DbGljaywgfSkgPT4ge1xyXG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChMb2dvSXRlbSwgeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBoZWlnaHQ6IGhlaWdodCwgd2lkdGg6IHdpZHRoLCByb2xlOiBcImltZ1wiLCB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLCBmaWxsOiBcIm5vbmVcIiwgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLCBcInN0cm9rZS13aWR0aFwiOiBcIjJcIiwgXCJzdHJva2UtbGluZWNhcFwiOiBcInJvdW5kXCIsIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIiwgb25DbGljazogb25DbGljayB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTkgMTljLTUgMS41LTUtMi41LTctM20xNCA2di0zLjg3YTMuMzcgMy4zNyAwIDAgMC0uOTQtMi42MWMzLjE0LS4zNSA2LjQ0LTEuNTQgNi40NC03QTUuNDQgNS40NCAwIDAgMCAyMCA0Ljc3IDUuMDcgNS4wNyAwIDAgMCAxOS45MSAxUzE4LjczLjY1IDE2IDIuNDhhMTMuMzggMTMuMzggMCAwIDAtNyAwQzYuMjcuNjUgNS4wOSAxIDUuMDkgMUE1LjA3IDUuMDcgMCAwIDAgNSA0Ljc3YTUuNDQgNS40NCAwIDAgMC0xLjUgMy43OGMwIDUuNDIgMy4zIDYuNjEgNi40NCA3QTMuMzcgMy4zNyAwIDAgMCA5IDE4LjEzVjIyXCIgfSkpKTtcclxufTtcclxuZXhwb3J0cy5UaW55R2l0aHViID0gVGlueUdpdGh1YjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5UeXBlU2NyaXB0TG9nbyA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBzdHlsZWRfY29tcG9uZW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKSk7XHJcbmNvbnN0IExvZ29JdGVtID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LnN2ZyBgYDtcclxuY29uc3QgVHlwZVNjcmlwdExvZ28gPSAoeyBoZWlnaHQgPSBcIjQ1cHhcIiwgd2lkdGggPSBcIjQ1cHhcIiB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvZ29JdGVtLCB7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHZpZXdCb3g6IFwiMCAwIDc1IDc1IFwiIH0sXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMCAzMnYzMmg2NC4wMDJWLS4wMDJIMHptNTEuNTc3LTIuNTVjMS42MjUuNDA2IDIuODY1IDEuMTI4IDQuMDAzIDIuMzA2LjU5LjYzIDEuNDYzIDEuNzc4IDEuNTM0IDIuMDUyLjAyLjA4LTIuNzYzIDEuOTUtNC40NSAyLjk5Ny0uMDYuMDQtLjMwNS0uMjIzLS41OC0uNjMtLjgyMy0xLjItMS42ODYtMS43MTctMy4wMDctMS44MDgtMS45NC0uMTMyLTMuMi44ODQtMy4xOCAyLjU4IDAgLjQ5OC4wNy43OTIuMjc0IDEuMi40MjcuODg0IDEuMjIgMS40MTIgMy43MDggMi40OSA0LjU4MiAxLjk3IDYuNTQyIDMuMjcgNy43NiA1LjEyIDEuMzYgMi4wNjIgMS42NjYgNS4zNTQuNzQyIDcuODAyLTEuMDE2IDIuNjYyLTMuNTM1IDQuNDctNy4wOCA1LjA3LTEuMDk3LjE5My0zLjY5OC4xNjMtNC44NzYtLjA1LTIuNTctLjQ1Ny01LjAwOC0xLjcyNy02LjUxMi0zLjM5My0uNTktLjY1LTEuNzM3LTIuMzQ3LTEuNjY2LTIuNDcuMDMtLjA0LjI5NS0uMjAzLjU5LS4zNzZsMi4zNzctMS4zNyAxLjg0LTEuMDY3LjM4Ni41N2MuNTM4LjgyMyAxLjcxNyAxLjk1IDIuNDI4IDIuMzI2IDIuMDQyIDEuMDc3IDQuODQ2LjkyNCA2LjIyNy0uMzE1LjU5LS41MzguODMzLTEuMDk3LjgzMy0xLjkyIDAtLjc0Mi0uMDktMS4wNjctLjQ3Ny0xLjYyNS0uNDk4LS43MS0xLjUxNC0xLjMxLTQuNC0yLjU2LTMuMzAyLTEuNDIyLTQuNzI0LTIuMzA2LTYuMDI0LTMuNzA4LS43NTItLjgxMy0xLjQ2My0yLjExMy0xLjc1OC0zLjItLjI0NC0uOTA0LS4zMDUtMy4xNy0uMTEyLTQuMDg0LjY4LTMuMiAzLjA4OC01LjQxNSA2LjU2My02LjA3NSAxLjEyOC0uMjEzIDMuNzUtLjEzMiA0Ljg1Ni4xNDJ6TTM2LjU1MiAzMi4xMmwuMDIgMi42MmgtOC4zM3YyMy42N0gyMi4zNXYtMjMuNjdoLTguMzN2LTIuNTdsLjA3LTIuNjRjLjAzLS4wNCA1LjEtLjA2IDExLjI0Ni0uMDVsMTEuMTg1LjAzelwiLCBmaWxsOiBcIiMwMDdhY2NcIiB9KSkpO1xyXG59O1xyXG5leHBvcnRzLlR5cGVTY3JpcHRMb2dvID0gVHlwZVNjcmlwdExvZ287XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVXBBcnJvdyA9IHZvaWQgMDtcclxuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5jb25zdCBzdHlsZWRfY29tcG9uZW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKSk7XHJcbmNvbnN0IExvZ29JdGVtID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LnN2ZyBgXHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG5gO1xyXG5jb25zdCBVcEFycm93ID0gKHsgaGVpZ2h0ID0gXCI1MHB4XCIsIHdpZHRoID0gXCI0MHB4XCIsIG9uQ2xpY2ssIH0pID0+IHtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9nb0l0ZW0sIHsgdmVyc2lvbjogXCIxLjFcIiwgaWQ6IFwiQ2FwYV8xXCIsIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHZpZXdCb3g6IFwiMCAwIDQ5IDQ5XCIsIGZpbGw6IFwid2hpdGVcIiwgb25DbGljazogb25DbGljayB9LFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsLFxyXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEuMjc3LDI5Ljk5OGg0NmMwLjQzMiwwLDAuODE0LTAuMjc3LDAuOTUtMC42ODdzLTAuMDA4LTAuODYtMC4zNTUtMS4xMTdsLTIzLTE3Yy0wLjM1My0wLjI2MS0wLjgzNi0wLjI2MS0xLjE4OCwwXFxyXFxuXFx0XFx0XFx0bC0yMywxN2MtMC4zNDcsMC4yNTctMC40OTEsMC43MDctMC4zNTYsMS4xMTdTMC44NDYsMjkuOTk4LDEuMjc3LDI5Ljk5OHogTTI0LjI3NywxMy4yNDJsMTkuOTY1LDE0Ljc1Nkg0LjMxM0wyNC4yNzcsMTMuMjQyelwiIH0pLFxyXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNNDgsMzIuMDAxSDFjLTAuNTUyLDAtMSwwLjQ0OC0xLDF2NGMwLDAuNTUyLDAuNDQ4LDEsMSwxaDQ3YzAuNTUyLDAsMS0wLjQ0OCwxLTF2LTRDNDksMzIuNDQ5LDQ4LjU1MiwzMi4wMDEsNDgsMzIuMDAxelxcclxcblxcdFxcdFxcdCBNNDcsMzYuMDAxSDJ2LTJoNDVWMzYuMDAxelwiIH0pKSksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCksXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwpLFxyXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsKSxcclxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCkpKTtcclxufTtcclxuZXhwb3J0cy5VcEFycm93ID0gVXBBcnJvdztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5BcHAgPSB2b2lkIDA7XHJcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuY29uc3Qgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIikpO1xyXG5jb25zdCByZWFjdF9kb21fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcclxuY29uc3QgcmVhY3Rfcm91dGVyX2RvbV8xID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci1kb21cIik7XHJcbmNvbnN0IEhvbWVwYWdlXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL1NlY3Rpb25zL0hvbWVwYWdlXCIpO1xyXG5jb25zdCBXZWJzaXRlQ29udGFpbmVyID0gc3R5bGVkX2NvbXBvbmVudHNfMS5kZWZhdWx0LmRpdiBgXHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG5gO1xyXG5jb25zdCBBcHAgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFdlYnNpdGVDb250YWluZXIsIG51bGwsXHJcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3Rfcm91dGVyX2RvbV8xLkJyb3dzZXJSb3V0ZXIsIG51bGwsXHJcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHJlYWN0X3JvdXRlcl9kb21fMS5Sb3V0ZXMsIG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF9yb3V0ZXJfZG9tXzEuUm91dGUsIHsgcGF0aDogXCIvcGVyc29uYWwtd2Vic2l0ZVwiLCBlbGVtZW50OiByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChIb21lcGFnZV8xLkhvbWVwYWdlLCBudWxsKSB9KSkpKSk7XHJcbn07XHJcbmV4cG9ydHMuQXBwID0gQXBwO1xyXG5yZWFjdF9kb21fMS5kZWZhdWx0LnJlbmRlcihyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChleHBvcnRzLkFwcCwgbnVsbCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU2VjdGlvbnMgPSB2b2lkIDA7XHJcbnZhciBTZWN0aW9ucztcclxuKGZ1bmN0aW9uIChTZWN0aW9ucykge1xyXG4gICAgU2VjdGlvbnNbXCJhYm91dFwiXSA9IFwiYWJvdXRcIjtcclxuICAgIFNlY3Rpb25zW1wiY29udGFjdFwiXSA9IFwiY29udGFjdFwiO1xyXG4gICAgU2VjdGlvbnNbXCJwcm9qZWN0c1wiXSA9IFwicHJvamVjdHNcIjtcclxuICAgIFNlY3Rpb25zW1wiaG9tZVwiXSA9IFwiaG9tZVwiO1xyXG59KShTZWN0aW9ucyA9IGV4cG9ydHMuU2VjdGlvbnMgfHwgKGV4cG9ydHMuU2VjdGlvbnMgPSB7fSkpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkdldEJhc2VJbWdQYXRoID0gZXhwb3J0cy5Jc0luRGV2ID0gZXhwb3J0cy5TY3JvbGxUbyA9IHZvaWQgMDtcclxuY29uc3QgU2Nyb2xsVG8gPSAoaWQpID0+IHtcclxuICAgIGNvbnN0IHNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICB3aW5kb3cuc2Nyb2xsVG8oe1xyXG4gICAgICAgIHRvcDogc2VjdGlvbiA9PT0gbnVsbCB8fCBzZWN0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWN0aW9uLm9mZnNldFRvcCxcclxuICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiLFxyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuU2Nyb2xsVG8gPSBTY3JvbGxUbztcclxuY29uc3QgSXNJbkRldiA9ICgpID0+IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCI7XHJcbmV4cG9ydHMuSXNJbkRldiA9IElzSW5EZXY7XHJcbmNvbnN0IEdldEJhc2VJbWdQYXRoID0gKCkgPT4ge1xyXG4gICAgaWYgKCgwLCBleHBvcnRzLklzSW5EZXYpKCkpIHtcclxuICAgICAgICByZXR1cm4gXCJpbWFnZXNcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBcImRpc3QvaW1hZ2VzXCI7XHJcbn07XHJcbmV4cG9ydHMuR2V0QmFzZUltZ1BhdGggPSBHZXRCYXNlSW1nUGF0aDtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNjI5KTtcbiJdLCJuYW1lcyI6WyJNb3Rpb25WYWx1ZSIsInNldEFuaW1hdGlvbiIsImFuaW1hdGlvbiIsInRoaXMiLCJmaW5pc2hlZCIsInRoZW4iLCJjbGVhckFuaW1hdGlvbiIsImNhdGNoIiwiZ2VuZXJhdG9yIiwidW5kZWZpbmVkIiwiZGF0YSIsIldlYWtNYXAiLCJnZXRBbmltYXRpb25EYXRhIiwiZWxlbWVudCIsImhhcyIsInNldCIsInRyYW5zZm9ybXMiLCJ2YWx1ZXMiLCJNYXAiLCJnZXQiLCJub29wIiwibm9vcFJldHVybiIsInYiLCJhZGRVbmlxdWVJdGVtIiwiYXJyYXkiLCJpdGVtIiwiaW5kZXhPZiIsInB1c2giLCJyZW1vdmVJdGVtIiwiYXJyIiwiaW5kZXgiLCJzcGxpY2UiLCJheGVzIiwidHJhbnNmb3JtQWxpYXMiLCJ4IiwieSIsInoiLCJyb3RhdGlvbiIsInN5bnRheCIsImluaXRpYWxWYWx1ZSIsInRvRGVmYXVsdFVuaXQiLCJiYXNlVHJhbnNmb3JtUHJvcGVydGllcyIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsInNjYWxlIiwic2tldyIsInRyYW5zZm9ybURlZmluaXRpb25zIiwiYXNUcmFuc2Zvcm1Dc3NWYXIiLCJuYW1lIiwiZm9yRWFjaCIsImF4aXMiLCJjb21wYXJlVHJhbnNmb3JtT3JkZXIiLCJhIiwiYiIsInRyYW5zZm9ybUxvb2t1cCIsIlNldCIsImlzVHJhbnNmb3JtIiwiYnVpbGRUcmFuc2Zvcm1UZW1wbGF0ZSIsInNvcnQiLCJyZWR1Y2UiLCJ0cmFuc2Zvcm1MaXN0VG9TdHJpbmciLCJ0cmltIiwidGVtcGxhdGUiLCJpc0Nzc1ZhciIsInN0YXJ0c1dpdGgiLCJyZWdpc3RlcmVkUHJvcGVydGllcyIsImRlZmF1bHRzIiwiZHVyYXRpb24iLCJkZWxheSIsImVuZERlbGF5IiwicmVwZWF0IiwiZWFzaW5nIiwiaXNOdW1iZXIiLCJ2YWx1ZSIsImlzRWFzaW5nR2VuZXJhdG9yIiwiQm9vbGVhbiIsImNyZWF0ZUFuaW1hdGlvbiIsImlzRWFzaW5nTGlzdCIsIkFycmF5IiwiaXNBcnJheSIsImNhbGNCZXppZXIiLCJ0IiwiYTEiLCJhMiIsImN1YmljQmV6aWVyIiwibVgxIiwibVkxIiwibVgyIiwibVkyIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJjdXJyZW50WCIsImN1cnJlbnRUIiwiaSIsIk1hdGgiLCJhYnMiLCJiaW5hcnlTdWJkaXZpZGUiLCJuYW1lZEVhc2luZ3MiLCJlYXNlIiwiZnVuY3Rpb25BcmdzUmVnZXgiLCJnZXRFYXNpbmdGdW5jdGlvbiIsImRlZmluaXRpb24iLCJhcmdzIiwiZXhlYyIsImFyZ3NBcnJheSIsInNwbGl0Iiwic3RlcHMiLCJkaXJlY3Rpb24iLCJwcm9ncmVzcyIsImV4cGFuZGVkIiwibWluIiwibWF4IiwiZmxvb3IiLCJjZWlsIiwicGFyc2VGbG9hdCIsImdldEVhc2luZ0ZvclNlZ21lbnQiLCJyYW5nZVNpemUiLCJ3cmFwIiwibGVuZ3RoIiwibWl4IiwiZmlsbE9mZnNldCIsIm9mZnNldCIsInJlbWFpbmluZyIsIm9mZnNldFByb2dyZXNzIiwiZGVmYXVsdE9mZnNldCIsIkFuaW1hdGlvbiIsImNvbnN0cnVjdG9yIiwib3V0cHV0Iiwia2V5ZnJhbWVzIiwic3RhcnRUaW1lIiwicmF0ZSIsImNhbmNlbFRpbWVzdGFtcCIsInBsYXlTdGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY3VzdG9tIiwiYW5pbWF0aW9uRWFzaW5nIiwidG90YWxEdXJhdGlvbiIsImludGVycG9sYXRlJDEiLCJpbnB1dCIsInJlbWFpbmRlciIsInByb2dyZXNzSW5SYW5nZSIsInAiLCJzZWdtZW50RWFzaW5nIiwiaW50ZXJwb2xhdGUiLCJtYXAiLCJ0aWNrIiwidGltZXN0YW1wIiwiX2EiLCJwYXVzZVRpbWUiLCJjdXJyZW50SXRlcmF0aW9uIiwiaXRlcmF0aW9uUHJvZ3Jlc3MiLCJpdGVyYXRpb25Jc09kZCIsImxhdGVzdCIsImNhbGwiLCJmcmFtZVJlcXVlc3RJZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBsYXkiLCJub3ciLCJwZXJmb3JtYW5jZSIsInBhdXNlIiwiZmluaXNoIiwic3RvcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsIiwicmV2ZXJzZSIsImNvbW1pdFN0eWxlcyIsImN1cnJlbnRUaW1lIiwicGxheWJhY2tSYXRlIiwidGltZSIsInNlY29uZHMiLCJjb252ZXJ0RWFzaW5nIiwiaXNDdWJpY0JlemllciIsImN1YmljQmV6aWVyQXNTdHJpbmciLCJjIiwiZCIsInRlc3RBbmltYXRpb24iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhbmltYXRlIiwiZmVhdHVyZVRlc3RzIiwiY3NzUmVnaXN0ZXJQcm9wZXJ0eSIsIkNTUyIsIk9iamVjdCIsImhhc093blByb3BlcnR5Iiwid2FhcGkiLCJFbGVtZW50IiwicHJvdG90eXBlIiwicGFydGlhbEtleWZyYW1lcyIsIm9wYWNpdHkiLCJlIiwicmVzdWx0cyIsInN1cHBvcnRzIiwia2V5Iiwia2V5ZnJhbWVzTGlzdCIsImdldFN0eWxlTmFtZSIsInN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJzZXRQcm9wZXJ0eSIsInN0b3BBbmltYXRpb24iLCJuZWVkc0NvbW1pdCIsImFuaW1hdGVTdHlsZSIsImtleWZyYW1lc0RlZmluaXRpb24iLCJvcHRpb25zIiwicmVjb3JkIiwid2luZG93IiwiX19NT1RJT05fREVWX1RPT0xTX1JFQ09SRCIsImlzUmVjb3JkaW5nIiwiYWxsb3dXZWJraXRBY2NlbGVyYXRpb24iLCJjYW5BbmltYXRlTmF0aXZlbHkiLCJ2YWx1ZUlzVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiYWRkVHJhbnNmb3JtVG9FbGVtZW50IiwibW90aW9uVmFsdWUiLCJtb3Rpb25WYWx1ZXMiLCJnZXRNb3Rpb25WYWx1ZSIsInJlYWRJbml0aWFsVmFsdWUiLCJfYiIsImh5ZHJhdGVLZXlmcmFtZXMiLCJhZGQiLCJyZWdpc3RlclByb3BlcnR5IiwiaW5oZXJpdHMiLCJyZWdpc3RlckNzc1ZhcmlhYmxlIiwidW5zaGlmdCIsImFuaW1hdGlvbk9wdGlvbnMiLCJpdGVyYXRpb25zIiwiZmlsbCIsIm9uZmluaXNoIiwib25jYW5jZWwiLCJ0YXJnZXQiLCJhc3NpZ24iLCJnZXRPcHRpb25zIiwicmVzb2x2ZUVsZW1lbnRzIiwiZWxlbWVudHMiLCJzZWxlY3RvckNhY2hlIiwicXVlcnlTZWxlY3RvckFsbCIsImZyb20iLCJmYWN0b3J5Iiwid3JhcEFuaW1hdGlvbldpdGhDb250cm9scyIsImFuaW1hdGlvbkZhY3RvcnkiLCJQcm94eSIsImFuaW1hdGlvbnMiLCJmaWx0ZXIiLCJjb250cm9scyIsImFjdGl2ZUFuaW1hdGlvbiIsImFsbCIsInNlbGVjdEZpbmlzaGVkIiwic3RhZ2dlciIsInN0YXJ0IiwidG90YWwiLCJmcm9tSW5kZXgiLCJsYXN0SW5kZXgiLCJnZXRGcm9tSW5kZXgiLCJkaXN0YW5jZSIsIm1heERlbGF5IiwiZWFzaW5nRnVuY3Rpb24iLCJyZXNvbHZlT3B0aW9uIiwib3B0aW9uIiwibnVtRWxlbWVudHMiLCJhbmltYXRpb25GYWN0b3JpZXMiLCJ2YWx1ZU9wdGlvbnMiLCJjYWxjTmV4dFRpbWUiLCJjdXJyZW50IiwibmV4dCIsInByZXYiLCJsYWJlbHMiLCJhZGRLZXlmcmFtZXMiLCJzZXF1ZW5jZSIsImVuZFRpbWUiLCJrZXlmcmFtZSIsImF0IiwiZXJhc2VLZXlmcmFtZXMiLCJjb21wYXJlQnlUaW1lIiwidGltZWxpbmUiLCJhbmltYXRpb25EZWZpbml0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwidGltZWxpbmVPcHRpb25zIiwiX19yZXN0IiwiZWxlbWVudFNlcXVlbmNlcyIsImVsZW1lbnRDYWNoZSIsInRpbWVMYWJlbHMiLCJwcmV2VGltZSIsInNlZ21lbnQiLCJlbGVtZW50RGVmaW5pdGlvbiIsIm1heER1cmF0aW9uIiwiZWxlbWVudEluZGV4IiwiZWxlbWVudFNlcXVlbmNlIiwic2VxdWVuY2VzIiwidmFsdWVTZXF1ZW5jZSIsImdldFZhbHVlU2VxdWVuY2UiLCJ2YWx1ZUtleWZyYW1lcyIsImludmFyaWFudCIsInRhcmdldFRpbWUiLCJ2YWx1ZVNlcXVlbmNlcyIsInZhbHVlT2Zmc2V0IiwidmFsdWVFYXNpbmciLCJjcmVhdGVBbmltYXRpb25zRnJvbVRpbWVsaW5lIiwiY2FsY0dlbmVyYXRvclZlbG9jaXR5IiwicmVzb2x2ZVZhbHVlIiwicHJldlQiLCJ2ZWxvY2l0eSIsImZyYW1lRHVyYXRpb24iLCJzcHJpbmciLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwibWFzcyIsInRvIiwicmVzdFNwZWVkIiwicmVzdERpc3RhbmNlIiwic3RhdGUiLCJkb25lIiwiaGFzUmVhY2hlZFRhcmdldCIsImluaXRpYWxEZWx0YSIsInVuZGFtcGVkQW5ndWxhckZyZXEiLCJzcXJ0IiwiZGFtcGluZ1JhdGlvIiwiY2FsY0RhbXBpbmdSYXRpbyIsInJlc29sdmVTcHJpbmciLCJhbmd1bGFyRnJlcSIsImV4cCIsInNpbiIsImNvcyIsImN1cnJlbnRWZWxvY2l0eSIsImlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCIsImlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQiLCJvcmlnaW4iLCJjcmVhdGVHZW5lcmF0b3JFYXNpbmciLCJjcmVhdGVHZW5lcmF0b3IiLCJrZXlmcmFtZXNDYWNoZSIsImdlbmVyYXRvckNhY2hlIiwiZ2V0R2VuZXJhdG9yIiwiaXNTY2FsZSIsImdldEtleWZyYW1lcyIsIm92ZXJzaG9vdER1cmF0aW9uIiwicHJlZ2VuZXJhdGVLZXlmcmFtZXMiLCJnZXRPcmlnaW4iLCJjYW5Vc2VHZW5lcmF0b3IiLCJzZXR0aW5ncyIsIm51bUtleWZyYW1lcyIsImV2ZXJ5IiwiaXNOdW1iZXJPck51bGwiLCJ1bnJlc29sdmVkT3JpZ2luIiwicHJldkdlbmVyYXRvciIsImdlbmVyYXRvclN0YXJ0VGltZSIsInByZXZHZW5lcmF0b3JDdXJyZW50IiwiaW5jbHVkZXMiLCJrZXlmcmFtZXNNZXRhZGF0YSIsInBvd2VyIiwiZGVjYXkiLCJib3VuY2VEYW1waW5nIiwiYm91bmNlU3RpZmZuZXNzIiwiY2hhbmdlVGFyZ2V0IiwibmVhcmVzdEJvdW5kYXJ5IiwiYW1wbGl0dWRlIiwiaWRlYWwiLCJjYWxjRGVsdGEiLCJjYWxjTGF0ZXN0IiwiYXBwbHlGcmljdGlvbiIsImRlbHRhIiwidGltZVJlYWNoZWRCb3VuZGFyeSIsInNwcmluZyQxIiwiY2hlY2tDYXRjaEJvdW5kYXJ5IiwiaGFzVXBkYXRlZEZyYW1lIiwidGhyZXNob2xkcyIsImFueSIsImluVmlldyIsIm9uU3RhcnQiLCJyb290IiwibWFyZ2luIiwicm9vdE1hcmdpbiIsImFtb3VudCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwicmVzb2x2ZWRFbGVtZW50cyIsImFjdGl2ZUludGVyc2VjdGlvbnMiLCJvYnNlcnZlciIsImVudHJpZXMiLCJlbnRyeSIsIm9uRW5kIiwiaXNJbnRlcnNlY3RpbmciLCJuZXdPbkVuZCIsInVub2JzZXJ2ZSIsImRlbGV0ZSIsInRocmVzaG9sZCIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwicmVzb2x2ZVZhcmlhbnQiLCJ2YXJpYW50cyIsImlzVmFyaWFudCIsInNjaGVkdWxlZCIsInByb2Nlc3NTY2hlZHVsZWRBbmltYXRpb25zIiwiZ2VuZXJhdG9ycyIsImNvbXBhcmVCeURlcHRoIiwiZmlyZUFuaW1hdGVVcGRhdGVzIiwiZmlyZU5leHQiLCJzY2hlZHVsZUFuaW1hdGlvbiIsImdldERlcHRoIiwiYW5pbWF0ZVVwZGF0ZXMiLCJpdGVyYXRvciIsIm1vdGlvbkV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJkaXNwYXRjaFBvaW50ZXJFdmVudCIsImV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJkaXNwYXRjaFZpZXdFdmVudCIsIm9yaWdpbmFsRW50cnkiLCJtb3VzZUV2ZW50IiwiYWN0aW9uIiwicG9pbnRlclR5cGUiLCJnZXN0dXJlcyIsImlzQWN0aXZlIiwic3Vic2NyaWJlIiwiZW5hYmxlIiwiZGlzYWJsZSIsImluVmlld09wdGlvbnMiLCJvbmNlIiwidmlld09wdGlvbnMiLCJlbnRlckVudHJ5IiwibGVhdmVFbnRyeSIsImhvdmVyIiwib25FbnRlciIsIm9uTGVhdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByZXNzIiwib25Qb2ludGVyVXAiLCJvblBvaW50ZXJEb3duIiwic3RhdGVUeXBlcyIsImtleXMiLCJtb3VudGVkU3RhdGVzIiwiY3JlYXRlTW90aW9uU3RhdGUiLCJwYXJlbnQiLCJkZXB0aCIsImFjdGl2ZVN0YXRlcyIsImluaXRpYWwiLCJnZXN0dXJlU3Vic2NyaXB0aW9ucyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiaW5pdGlhbFZhcmlhbnRTb3VyY2UiLCJiYXNlVGFyZ2V0Iiwic2V0R2VzdHVyZSIsInVwZGF0ZUdlc3R1cmVTdWJzY3JpcHRpb25zIiwiaXNHZXN0dXJlQWN0aXZlIiwicmVtb3ZlIiwidXBkYXRlIiwibmV3T3B0aW9ucyIsInNldEFjdGl2ZSIsInByZXZUYXJnZXQiLCJ2YXJpYW50IiwidHJhbnNpdGlvbiIsImFsbFRhcmdldEtleXMiLCJwcmV2TGVuZ3RoIiwic2hhbGxvd0NvbXBhcmUiLCJhbmltYXRpb25UYXJnZXQiLCJnZXRUYXJnZXQiLCJtb3VudCIsIm5ld0VsZW1lbnQiLCJ1bnNjaGVkdWxlQW5pbWF0aW9uIiwiaXNNb3VudGVkIiwiY3JlYXRlU3R5bGVzIiwiaW5pdGlhbEtleWZyYW1lcyIsInRyYW5zZm9ybUtleXMiLCJpbml0aWFsS2V5ZnJhbWUiLCJjYW1lbExldHRlclRvUGlwZUxldHRlciIsImxldHRlciIsInRvTG93ZXJDYXNlIiwiY3JlYXRlU3R5bGVTdHJpbmciLCJzdHlsZXMiLCJyZXBsYWNlIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidHNsaWIiLCJSZWFjdCIsImhleUxpc3RlbiIsInN5bmMiLCJwb3Btb3Rpb24iLCJzdHlsZVZhbHVlVHlwZXMiLCJkb20iLCJfaW50ZXJvcERlZmF1bHRMZWdhY3kiLCJfaW50ZXJvcE5hbWVzcGFjZSIsIl9fZXNNb2R1bGUiLCJuIiwiY3JlYXRlIiwiayIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJmcmVlemUiLCJSZWFjdF9fbmFtZXNwYWNlIiwiUmVhY3RfX2RlZmF1bHQiLCJzeW5jX19kZWZhdWx0IiwiZW52IiwicHJvY2VzcyIsImNyZWF0ZURlZmluaXRpb24iLCJwcm9wTmFtZXMiLCJpc0VuYWJsZWQiLCJwcm9wcyIsInNvbWUiLCJmZWF0dXJlRGVmaW5pdGlvbnMiLCJtZWFzdXJlTGF5b3V0IiwiZXhpdCIsImRyYWciLCJmb2N1cyIsInRhcCIsInBhbiIsImxvYWRGZWF0dXJlcyIsImZlYXR1cmVzIiwicHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciIsIkNvbXBvbmVudCIsIkxhenlDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInN0cmljdCIsImZlYXR1cmVOYW1lcyIsIm51bUZlYXR1cmVzIiwiTW90aW9uQ29uZmlnQ29udGV4dCIsInRyYW5zZm9ybVBhZ2VQb2ludCIsImlzU3RhdGljIiwicmVkdWNlZE1vdGlvbiIsIk1vdGlvbkNvbnRleHQiLCJ1c2VWaXN1YWxFbGVtZW50Q29udGV4dCIsInVzZUNvbnRleHQiLCJ2aXN1YWxFbGVtZW50IiwiUHJlc2VuY2VDb250ZXh0IiwiaXNCcm93c2VyIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsInByZWZlcnNSZWR1Y2VkTW90aW9uIiwiaGFzRGV0ZWN0ZWQiLCJ1c2VSZWR1Y2VkTW90aW9uIiwibWF0Y2hNZWRpYSIsIm1vdGlvbk1lZGlhUXVlcnlfMSIsInNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyIsIm1hdGNoZXMiLCJhZGRMaXN0ZW5lciIsImluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiIsIl9fcmVhZCIsInVzZVN0YXRlIiwidXNlUmVkdWNlZE1vdGlvbkNvbmZpZyIsInJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlIiwiaXNSZWZPYmplY3QiLCJyZWYiLCJpc1ZhcmlhbnRMYWJlbHMiLCJpc1ZhcmlhbnRMYWJlbCIsInJlc29sdmVWYXJpYW50RnJvbVByb3BzIiwiY3VycmVudFZhbHVlcyIsImdldFByb3BzIiwiZm9yRWFjaFZhbHVlIiwiZ2V0Q3VycmVudCIsImdldFZlbG9jaXR5IiwiZ2V0VmVsb2NpdHkkMSIsImNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzIiwid2hpbGVIb3ZlciIsIndoaWxlRHJhZyIsIndoaWxlVGFwIiwid2hpbGVGb2N1cyIsImNoZWNrSWZWYXJpYW50Tm9kZSIsInZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3kiLCJwcm9wIiwiam9pbiIsInVzZUNvbnN0YW50IiwiaW5pdCIsInVzZVJlZiIsIlN1YnNjcmlwdGlvbk1hbmFnZXIiLCJzdWJzY3JpcHRpb25zIiwiaGFuZGxlciIsIl90aGlzIiwibm90aWZ5IiwibnVtU3Vic2NyaXB0aW9ucyIsImdldFNpemUiLCJjbGVhciIsInZlcnNpb24iLCJ0aW1lRGVsdGEiLCJsYXN0VXBkYXRlZCIsInVwZGF0ZVN1YnNjcmliZXJzIiwidmVsb2NpdHlVcGRhdGVTdWJzY3JpYmVycyIsInJlbmRlclN1YnNjcmliZXJzIiwiY2FuVHJhY2tWZWxvY2l0eSIsInVwZGF0ZUFuZE5vdGlmeSIsInJlbmRlciIsImdldEZyYW1lRGF0YSIsInBvc3RSZW5kZXIiLCJzY2hlZHVsZVZlbG9jaXR5Q2hlY2siLCJ2ZWxvY2l0eUNoZWNrIiwiaGFzQW5pbWF0ZWQiLCJpc05hTiIsIm9uQ2hhbmdlIiwic3Vic2NyaXB0aW9uIiwiY2xlYXJMaXN0ZW5lcnMiLCJvblJlbmRlclJlcXVlc3QiLCJhdHRhY2giLCJwYXNzaXZlRWZmZWN0IiwiZ2V0UHJldmlvdXMiLCJ2ZWxvY2l0eVBlclNlY29uZCIsImlzQW5pbWF0aW5nIiwiZGVzdHJveSIsImlzTW90aW9uVmFsdWUiLCJzZWNvbmRzVG9NaWxsaXNlY29uZHMiLCJlYXNpbmdMb29rdXAiLCJsaW5lYXIiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiY2lyY0luIiwiY2lyY0luT3V0IiwiY2lyY091dCIsImJhY2tJbiIsImJhY2tJbk91dCIsImJhY2tPdXQiLCJhbnRpY2lwYXRlIiwiYm91bmNlSW4iLCJib3VuY2VJbk91dCIsImJvdW5jZU91dCIsImVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uIiwieDEiLCJ5MSIsIngyIiwieTIiLCJjb25jYXQiLCJpc0FuaW1hdGFibGUiLCJjb21wbGV4IiwidGVzdCIsImlzS2V5ZnJhbWVzVGFyZ2V0IiwidW5kZXJEYW1wZWRTcHJpbmciLCJ0eXBlIiwiY3JpdGljYWxseURhbXBlZFNwcmluZyIsImxpbmVhclR3ZWVuIiwiZGVmYXVsdFRyYW5zaXRpb25zIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2NhbGVYIiwic2NhbGVZIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJkZWZhdWx0IiwiaW50IiwiX19hc3NpZ24iLCJudW1iZXIiLCJyb3VuZCIsIm51bWJlclZhbHVlVHlwZXMiLCJib3JkZXJXaWR0aCIsInB4IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSYWRpdXMiLCJyYWRpdXMiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJ3aWR0aCIsIm1heFdpZHRoIiwiaGVpZ2h0IiwibWF4SGVpZ2h0Iiwic2l6ZSIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsInBhZGRpbmciLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwiZGVncmVlcyIsInNjYWxlWiIsInNrZXdYIiwic2tld1kiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJwZXJzcGVjdGl2ZSIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiYWxwaGEiLCJvcmlnaW5YIiwicHJvZ3Jlc3NQZXJjZW50YWdlIiwib3JpZ2luWSIsIm9yaWdpbloiLCJ6SW5kZXgiLCJmaWxsT3BhY2l0eSIsInN0cm9rZU9wYWNpdHkiLCJudW1PY3RhdmVzIiwiZGVmYXVsdFZhbHVlVHlwZXMiLCJvdXRsaW5lQ29sb3IiLCJzdHJva2UiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiV2Via2l0RmlsdGVyIiwiZ2V0RGVmYXVsdFZhbHVlVHlwZSIsImdldEFuaW1hdGFibGVOb25lIiwiZGVmYXVsdFZhbHVlVHlwZSIsImluc3RhbnRBbmltYXRpb25TdGF0ZSIsInJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMiLCJsZWdhY3lSZXBlYXRXYXJuaW5nIiwiZ2V0UG9wbW90aW9uQW5pbWF0aW9uT3B0aW9ucyIsInZhbHVlS2V5IiwidHJhbnNpdGlvbkZhY3RvcnkiLCJfX3NwcmVhZEFycmF5Iiwid2hlbiIsImRlbGF5Q2hpbGRyZW4iLCJzdGFnZ2VyQ2hpbGRyZW4iLCJzdGFnZ2VyRGlyZWN0aW9uIiwicmVwZWF0VHlwZSIsInJlcGVhdERlbGF5IiwiaXNUcmFuc2l0aW9uRGVmaW5lZCIsInRpbWVzIiwieW95byIsImZsaXAiLCJsb29wIiwiaXNFYXNpbmdBcnJheSIsIndhcm5pbmciLCJjb252ZXJ0VHJhbnNpdGlvblRvQW5pbWF0aW9uT3B0aW9ucyIsImlzWmVybyIsImdldFplcm9Vbml0IiwicG90ZW50aWFsVW5pdFR5cGUiLCJnZXRWYWx1ZVRyYW5zaXRpb24iLCJzdGFydEFuaW1hdGlvbiIsIm9uQ29tcGxldGUiLCJkZWxheVRpbWVyIiwidmFsdWVUcmFuc2l0aW9uIiwiaXNUYXJnZXRBbmltYXRhYmxlIiwiaXNPcmlnaW5BbmltYXRhYmxlIiwib25VcGRhdGUiLCJpbmVydGlhIiwiZmluYWxUYXJnZXQiLCJnZXRBbmltYXRpb24iLCJnZXREZWxheUZyb21UcmFuc2l0aW9uIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImJvcmRlcnMiLCJudW1Cb3JkZXJzIiwiYXNOdW1iZXIiLCJpc1B4IiwiZ2V0UmFkaXVzIiwicmFkaXVzTmFtZSIsImVhc2VDcm9zc2ZhZGVJbiIsImNvbXByZXNzIiwiZWFzZUNyb3NzZmFkZU91dCIsImNvcHlBeGlzSW50byIsIm9yaWdpbkF4aXMiLCJjb3B5Qm94SW50byIsImJveCIsIm9yaWdpbkJveCIsImlzSWRlbnRpdHlTY2FsZSIsImhhc1NjYWxlIiwiaGFzVHJhbnNmb3JtIiwiaGFzVHJhbnNsYXRlIiwic2NhbGVQb2ludCIsInBvaW50Iiwib3JpZ2luUG9pbnQiLCJhcHBseVBvaW50RGVsdGEiLCJib3hTY2FsZSIsImFwcGx5QXhpc0RlbHRhIiwiYXBwbHlCb3hEZWx0YSIsInRyYW5zbGF0ZUF4aXMiLCJ0cmFuc2Zvcm1BeGlzIiwic2NhbGVLZXkiLCJvcmlnaW5LZXkiLCJheGlzT3JpZ2luIiwieEtleXMkMSIsInlLZXlzJDEiLCJ0cmFuc2Zvcm1Cb3giLCJjYWxjTGVuZ3RoIiwiaXNOZWFyIiwibWF4RGlzdGFuY2UiLCJjYWxjQXhpc0RlbHRhIiwic291cmNlIiwiY2FsY0JveERlbHRhIiwiY2FsY1JlbGF0aXZlQXhpcyIsInJlbGF0aXZlIiwiY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uIiwibGF5b3V0IiwiY2FsY1JlbGF0aXZlUG9zaXRpb24iLCJyZW1vdmVQb2ludERlbHRhIiwicmVtb3ZlQXhpc1RyYW5zZm9ybXMiLCJzb3VyY2VBeGlzIiwicGVyY2VudCIsInJlbW92ZUF4aXNEZWx0YSIsInhLZXlzIiwieUtleXMiLCJyZW1vdmVCb3hUcmFuc2Zvcm1zIiwic291cmNlQm94IiwiY3JlYXRlQm94IiwiaXNBeGlzRGVsdGFaZXJvIiwiaXNEZWx0YVplcm8iLCJib3hFcXVhbHMiLCJOb2RlU3RhY2siLCJtZW1iZXJzIiwibm9kZSIsInNjaGVkdWxlUmVuZGVyIiwicHJldkxlYWQiLCJsZWFkIiwicHJvbW90ZSIsInJlbGVnYXRlIiwiaW5kZXhPZk5vZGUiLCJmaW5kSW5kZXgiLCJtZW1iZXIiLCJpc1ByZXNlbnQiLCJwcmVzZXJ2ZUZvbGxvd09wYWNpdHkiLCJzaG93IiwiaW5zdGFuY2UiLCJyZXN1bWVGcm9tIiwicHJlc2VydmVPcGFjaXR5Iiwic25hcHNob3QiLCJsYXRlc3RWYWx1ZXMiLCJhbmltYXRpb25WYWx1ZXMiLCJpc1NoYXJlZCIsImlzVXBkYXRpbmciLCJpc0xheW91dERpcnR5IiwiY3Jvc3NmYWRlIiwiaGlkZSIsImV4aXRBbmltYXRpb25Db21wbGV0ZSIsIl9jIiwiX2QiLCJfZSIsIm9uRXhpdENvbXBsZXRlIiwicmVzdW1pbmdGcm9tIiwicmVtb3ZlTGVhZFNuYXBzaG90Iiwic2NhbGVDb3JyZWN0b3JzIiwiYWRkU2NhbGVDb3JyZWN0b3IiLCJjb3JyZWN0b3JzIiwiYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtIiwidHJlZVNjYWxlIiwibGF0ZXN0VHJhbnNmb3JtIiwieFRyYW5zbGF0ZSIsInlUcmFuc2xhdGUiLCJlbGVtZW50U2NhbGVYIiwiZWxlbWVudFNjYWxlWSIsImVhY2hBeGlzIiwiY2FsbGJhY2siLCJ0cmFuc2Zvcm1BeGVzIiwidHJhbnNmb3JtUHJvcHMiLCJzb3J0VHJhbnNmb3JtUHJvcHMiLCJvcGVyYXRpb25LZXkiLCJheGVzS2V5IiwidHJhbnNmb3JtUHJvcFNldCIsImlzVHJhbnNmb3JtUHJvcCIsInRyYW5zZm9ybU9yaWdpblByb3BzIiwiaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wIiwiRmxhdFRyZWUiLCJjaGlsZHJlbiIsImlzRGlydHkiLCJjaGlsZCIsInJlc29sdmVNb3Rpb25WYWx1ZSIsInVud3JhcHBlZFZhbHVlIiwidG9WYWx1ZSIsImdsb2JhbFByb2plY3Rpb25TdGF0ZSIsImhhc0FuaW1hdGVkU2luY2VSZXNpemUiLCJoYXNFdmVyVXBkYXRlZCIsImNyZWF0ZVByb2plY3Rpb25Ob2RlIiwiYXR0YWNoUmVzaXplTGlzdGVuZXIiLCJkZWZhdWx0UGFyZW50IiwibWVhc3VyZVNjcm9sbCIsImNoZWNrSXNTY3JvbGxSb290IiwicmVzZXRUcmFuc2Zvcm0iLCJQcm9qZWN0aW9uTm9kZSIsImlkIiwiaXNUcmVlQW5pbWF0aW5nIiwiaXNBbmltYXRpb25CbG9ja2VkIiwidXBkYXRlTWFudWFsbHlCbG9ja2VkIiwidXBkYXRlQmxvY2tlZEJ5UmVzaXplIiwiaXNTVkciLCJuZWVkc1Jlc2V0Iiwic2hvdWxkUmVzZXRUcmFuc2Zvcm0iLCJldmVudEhhbmRsZXJzIiwicG90ZW50aWFsTm9kZXMiLCJjaGVja1VwZGF0ZUZhaWxlZCIsImNsZWFyQWxsU25hcHNob3RzIiwidXBkYXRlUHJvamVjdGlvbiIsIm5vZGVzIiwicmVzb2x2ZVRhcmdldERlbHRhIiwiY2FsY1Byb2plY3Rpb24iLCJoYXNQcm9qZWN0ZWQiLCJpc1Zpc2libGUiLCJhbmltYXRpb25Qcm9ncmVzcyIsInNoYXJlZE5vZGVzIiwicGF0aCIsInJlZ2lzdGVyUG90ZW50aWFsTm9kZSIsIm5vdGlmeUxpc3RlbmVycyIsIl9pIiwiYXJndW1lbnRzIiwic3Vic2NyaXB0aW9uTWFuYWdlciIsImFwcGx5IiwiaGFzTGlzdGVuZXJzIiwiU1ZHRWxlbWVudCIsInRhZ05hbWUiLCJsYXlvdXRJZCIsImdldEluc3RhbmNlIiwidW5ibG9ja1RpbWVvdXRfMSIsInJlc2l6ZVVuYmxvY2tVcGRhdGVfMSIsImZpbmlzaEFuaW1hdGlvbiIsInJlZ2lzdGVyU2hhcmVkTm9kZSIsIl9mIiwiaGFzTGF5b3V0Q2hhbmdlZCIsImhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCIsIm5ld0xheW91dCIsImlzVHJlZUFuaW1hdGlvbkJsb2NrZWQiLCJyZWxhdGl2ZVRhcmdldCIsImxheW91dFRyYW5zaXRpb24iLCJnZXREZWZhdWx0VHJhbnNpdGlvbiIsImRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uIiwiX2ciLCJvbkxheW91dEFuaW1hdGlvblN0YXJ0Iiwib25MYXlvdXRBbmltYXRpb25Db21wbGV0ZSIsInRhcmdldENoYW5nZWQiLCJ0YXJnZXRMYXlvdXQiLCJoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkIiwiY3VycmVudEFuaW1hdGlvbiIsInNldEFuaW1hdGlvbk9yaWdpbiIsIm9uUGxheSIsInNob3VsZFJlZHVjZU1vdGlvbiIsImlzTGVhZCIsInVubW91bnQiLCJ3aWxsVXBkYXRlIiwiZ2V0U3RhY2siLCJjYW5jZWxTeW5jIiwicHJlUmVuZGVyIiwiYmxvY2tVcGRhdGUiLCJ1bmJsb2NrVXBkYXRlIiwiaXNVcGRhdGVCbG9ja2VkIiwic3RhcnRVcGRhdGUiLCJyZXNldFJvdGF0aW9uIiwic2hvdWxkTm90aWZ5TGlzdGVuZXJzIiwidXBkYXRlU2Nyb2xsIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJwcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSIsInVwZGF0ZVNuYXBzaG90IiwiZGlkVXBkYXRlIiwiY2xlYXJNZWFzdXJlbWVudHMiLCJtb3VudE5vZGVFYXJseSIsInJlc2V0VHJhbnNmb3JtU3R5bGUiLCJ1cGRhdGVMYXlvdXQiLCJub3RpZnlMYXlvdXRVcGRhdGUiLCJmbHVzaFN5bmMiLCJjbGVhclNuYXBzaG90IiwicmVtb3ZlTGVhZFNuYXBzaG90cyIsInNjaGVkdWxlVXBkYXRlUHJvamVjdGlvbiIsInNjaGVkdWxlQ2hlY2tBZnRlclVubW91bnQiLCJtZWFzdXJlZCIsIm1lYXN1cmUiLCJyZW1vdmVUcmFuc2Zvcm0iLCJyZW1vdmVFbGVtZW50U2Nyb2xsIiwicm91bmRCb3giLCJhbHdheXNNZWFzdXJlTGF5b3V0IiwicHJldkxheW91dCIsImFjdHVhbCIsImxheW91dENvcnJlY3RlZCIsInByb2plY3Rpb25EZWx0YSIsIm5vdGlmeUxheW91dE1lYXN1cmUiLCJsYXlvdXRTY3JvbGwiLCJpc1Njcm9sbFJvb3QiLCJzY3JvbGwiLCJpc1Jlc2V0UmVxdWVzdGVkIiwiaGFzUHJvamVjdGlvbiIsInRyYW5zZm9ybVRlbXBsYXRlVmFsdWUiLCJ0cmFuc2Zvcm1UZW1wbGF0ZUhhc0NoYW5nZWQiLCJtZWFzdXJlVmlld3BvcnRCb3giLCJib3hXaXRob3V0U2Nyb2xsIiwic2Nyb2xsXzEiLCJyb290U2Nyb2xsIiwiYXBwbHlUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1Pbmx5Iiwid2l0aFRyYW5zZm9ybXMiLCJib3hXaXRob3V0VHJhbnNmb3JtIiwic2V0VGFyZ2V0RGVsdGEiLCJ0YXJnZXREZWx0YSIsInNldE9wdGlvbnMiLCJyZWxhdGl2ZVBhcmVudCIsImdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50IiwicmVsYXRpdmVUYXJnZXRPcmlnaW4iLCJ0YXJnZXRXaXRoVHJhbnNmb3JtcyIsImF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCIsInBlbmRpbmdBbmltYXRpb24iLCJnZXRMZWFkIiwidHJlZVBhdGgiLCJpc1NoYXJlZFRyYW5zaXRpb24iLCJ0cmVlTGVuZ3RoIiwiZGlzcGxheSIsImFwcGx5VHJlZURlbHRhcyIsInByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0iLCJwcmV2VHJlZVNjYWxlWCIsInByZXZUcmVlU2NhbGVZIiwicHJldlByb2plY3Rpb25UcmFuc2Zvcm0iLCJwcm9qZWN0aW9uVHJhbnNmb3JtIiwibm90aWZ5QWxsIiwic25hcHNob3RMYXRlc3RWYWx1ZXMiLCJtaXhlZFZhbHVlcyIsInJlbGF0aXZlTGF5b3V0IiwiaXNTaGFyZWRMYXlvdXRBbmltYXRpb24iLCJpc09ubHlNZW1iZXIiLCJzaG91bGRDcm9zc2ZhZGVPcGFjaXR5IiwiaGFzT3BhY2l0eUNyb3NzZmFkZSIsIm1peFRhcmdldERlbHRhIiwibWl4QXhpc0RlbHRhIiwibWl4QXhpcyIsImZvbGxvdyIsIm9wYWNpdHlFeGl0IiwiYm9yZGVyTGFiZWwiLCJmb2xsb3dSYWRpdXMiLCJsZWFkUmFkaXVzIiwibWl4VmFsdWVzIiwiY29tcGxldGVBbmltYXRpb24iLCJhcHBseVRyYW5zZm9ybXNUb1RhcmdldCIsImluaXRpYWxQcm9tb3Rpb25Db25maWciLCJzaG91bGRQcmVzZXJ2ZUZvbGxvd09wYWNpdHkiLCJzdGFjayIsImdldFByZXZMZWFkIiwiaGFzUm90YXRlIiwicmVzZXRWYWx1ZXMiLCJnZXRTdGF0aWNWYWx1ZSIsInNldFN0YXRpY1ZhbHVlIiwic3luY1JlbmRlciIsImdldFByb2plY3Rpb25TdHlsZXMiLCJzdHlsZVByb3AiLCJ2aXNpYmlsaXR5IiwicG9pbnRlckV2ZW50cyIsImVtcHR5U3R5bGVzIiwidmFsdWVzVG9SZW5kZXIiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJfaCIsImNvcnJlY3QiLCJhcHBseVRvIiwiY29ycmVjdGVkIiwibnVtIiwicmVzZXRUcmVlIiwibGF5b3V0XzEiLCJtZWFzdXJlZExheW91dCIsImFuaW1hdGlvblR5cGUiLCJheGlzU25hcHNob3QiLCJsYXlvdXREZWx0YSIsInZpc3VhbERlbHRhIiwicGFyZW50U25hcHNob3QiLCJwYXJlbnRMYXlvdXQiLCJyZWxhdGl2ZVNuYXBzaG90Iiwib25CZWZvcmVMYXlvdXRNZWFzdXJlIiwibm90aWZ5QmVmb3JlTGF5b3V0TWVhc3VyZSIsInNlYXJjaE5vZGUiLCJxdWVyeVNlbGVjdG9yIiwicm91bmRBeGlzIiwiaWQkMSIsIkxheW91dEdyb3VwQ29udGV4dCIsIlN3aXRjaExheW91dEdyb3VwQ29udGV4dCIsIlZpc3VhbEVsZW1lbnRIYW5kbGVyIiwiX3N1cGVyIiwiX19leHRlbmRzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJ1cGRhdGVQcm9wcyIsImNvbXBvbmVudERpZFVwZGF0ZSIsInNldFByb3BzIiwiY3JlYXRlTW90aW9uQ29tcG9uZW50IiwicHJlbG9hZGVkRmVhdHVyZXMiLCJjcmVhdGVWaXN1YWxFbGVtZW50IiwidXNlUmVuZGVyIiwidXNlVmlzdWFsU3RhdGUiLCJmb3J3YXJkUmVmIiwiZXh0ZXJuYWxSZWYiLCJsYXlvdXRHcm91cElkIiwidXNlTGF5b3V0SWQiLCJjb25maWciLCJpbmhlcml0IiwiZ2V0Q3VycmVudFRyZWVWYXJpYW50cyIsInVzZU1lbW8iLCJ1c2VDcmVhdGVNb3Rpb25Db250ZXh0IiwicHJvamVjdGlvbklkIiwidmlzdWFsU3RhdGUiLCJsYXp5Q29udGV4dCIsInByZXNlbmNlQ29udGV4dCIsInZpc3VhbEVsZW1lbnRSZWYiLCJyZW5kZXJlciIsInByZXNlbmNlSWQiLCJibG9ja0luaXRpYWxBbmltYXRpb24iLCJhbmltYXRpb25TdGF0ZSIsImFuaW1hdGVDaGFuZ2VzIiwibm90aWZ5VW5tb3VudCIsInVzZVZpc3VhbEVsZW1lbnQiLCJQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yIiwiZHJhZ0NvbnN0cmFpbnRzIiwicHJvamVjdGlvbiIsImdldExhdGVzdFZhbHVlcyIsInVzZVByb2plY3Rpb24iLCJuYW1lXzEiLCJ1c2VGZWF0dXJlcyIsIlByb3ZpZGVyIiwidXNlQ2FsbGJhY2siLCJ1c2VNb3Rpb25SZWYiLCJjcmVhdGVNb3Rpb25Qcm94eSIsImNyZWF0ZUNvbmZpZyIsImN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZyIsImNvbXBvbmVudENhY2hlIiwiX3RhcmdldCIsImxvd2VyY2FzZVNWR0VsZW1lbnRzIiwiaXNTVkdDb21wb25lbnQiLCJpc0ZvcmNlZE1vdGlvblZhbHVlIiwidHJhbnNsYXRlQWxpYXMiLCJpc0NTU1ZhcmlhYmxlJDEiLCJnZXRWYWx1ZUFzVHlwZSIsImJ1aWxkSFRNTFN0eWxlcyIsInZhcnMiLCJoYXNUcmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm1Jc05vbmUiLCJ2YWx1ZVR5cGUiLCJ2YWx1ZUFzVHlwZSIsInRyYW5zZm9ybUlzRGVmYXVsdCIsImVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uIiwiYWxsb3dUcmFuc2Zvcm1Ob25lIiwidHJhbnNmb3JtU3RyaW5nIiwidHJhbnNmb3JtSGFzWiIsIm51bVRyYW5zZm9ybUtleXMiLCJidWlsZFRyYW5zZm9ybSIsImJ1aWxkVHJhbnNmb3JtT3JpZ2luIiwiY29weVJhd1ZhbHVlc09ubHkiLCJ1c2VIVE1MUHJvcHMiLCJodG1sUHJvcHMiLCJ1c2VJbml0aWFsTW90aW9uVmFsdWVzIiwidHJhbnNmb3JtVmFsdWVzIiwidXNlU3R5bGUiLCJkcmFnTGlzdGVuZXIiLCJkcmFnZ2FibGUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsIldlYmtpdFRvdWNoQ2FsbG91dCIsInRvdWNoQWN0aW9uIiwidmFsaWRNb3Rpb25Qcm9wcyIsImlzVmFsaWRNb3Rpb25Qcm9wIiwic2hvdWxkRm9yd2FyZCIsImxvYWRFeHRlcm5hbElzVmFsaWRQcm9wIiwiaXNWYWxpZFByb3AiLCJmaWx0ZXJQcm9wcyIsImlzRG9tIiwiZm9yd2FyZE1vdGlvblByb3BzIiwiZmlsdGVyZWRQcm9wcyIsImNhbGNPcmlnaW4kMSIsImRhc2hLZXlzIiwiY2FtZWxLZXlzIiwiYnVpbGRTVkdBdHRycyIsImF0dHJYIiwiYXR0clkiLCJwYXRoTGVuZ3RoIiwicGF0aFNwYWNpbmciLCJwYXRoT2Zmc2V0IiwiYXR0cnMiLCJkaW1lbnNpb25zIiwicHhPcmlnaW5YIiwicHhPcmlnaW5ZIiwiY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiIsInNwYWNpbmciLCJ1c2VEYXNoQ2FzZSIsImJ1aWxkU1ZHUGF0aCIsImNyZWF0ZVN2Z1JlbmRlclN0YXRlIiwidXNlU1ZHUHJvcHMiLCJ2aXN1YWxQcm9wcyIsInJhd1N0eWxlcyIsImNyZWF0ZVVzZVJlbmRlciIsImVsZW1lbnRQcm9wcyIsIkNBTUVMX0NBU0VfUEFUVEVSTiIsImNhbWVsVG9EYXNoIiwic3RyIiwicmVuZGVySFRNTCIsImNhbWVsQ2FzZUF0dHJpYnV0ZXMiLCJyZW5kZXJTVkciLCJyZW5kZXJTdGF0ZSIsIl9zdHlsZVByb3AiLCJzZXRBdHRyaWJ1dGUiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMSIsIm5ld1ZhbHVlcyIsInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsInRvVXBwZXJDYXNlIiwiaXNBbmltYXRpb25Db250cm9scyIsIm1ha2VTdGF0ZSIsImNyZWF0ZVJlbmRlclN0YXRlIiwib25Nb3VudCIsIm1ha2VMYXRlc3RWYWx1ZXMiLCJtYWtlVXNlVmlzdWFsU3RhdGUiLCJzY3JhcGVNb3Rpb25WYWx1ZXMiLCJpc0NvbnRyb2xsaW5nVmFyaWFudHMiLCJpc1ZhcmlhbnROb2RlIiwiaW5pdGlhbEFuaW1hdGlvbklzQmxvY2tlZCIsInZhcmlhbnRUb1NldCIsInJlc29sdmVkIiwidHJhbnNpdGlvbkVuZCIsInZhbHVlVGFyZ2V0IiwiQW5pbWF0aW9uVHlwZSIsInN2Z01vdGlvbkNvbmZpZyIsImdldEJCb3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJodG1sTW90aW9uQ29uZmlnIiwiY3JlYXRlRG9tTW90aW9uQ29uZmlnIiwiYmFzZUNvbmZpZyIsImFkZERvbUV2ZW50IiwiZXZlbnROYW1lIiwicGFzc2l2ZSIsInVzZURvbUV2ZW50IiwiaXNNb3VzZUV2ZW50IiwiUG9pbnRlckV2ZW50IiwiTW91c2VFdmVudCIsImlzVG91Y2hFdmVudCIsInRvdWNoZXMiLCJkZWZhdWx0UGFnZVBvaW50IiwicGFnZVgiLCJwYWdlWSIsInBvaW50RnJvbVRvdWNoIiwicG9pbnRUeXBlIiwiY2hhbmdlZFRvdWNoZXMiLCJwb2ludEZyb21Nb3VzZSIsImV4dHJhY3RFdmVudEluZm8iLCJ3cmFwSGFuZGxlciIsInNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyIiwiZXZlbnRIYW5kbGVyIiwibGlzdGVuZXIiLCJidXR0b24iLCJtb3VzZUV2ZW50TmFtZXMiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmNhbmNlbCIsInBvaW50ZXJvdmVyIiwicG9pbnRlcm91dCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInRvdWNoRXZlbnROYW1lcyIsImdldFBvaW50ZXJFdmVudE5hbWUiLCJvbnBvaW50ZXJkb3duIiwib250b3VjaHN0YXJ0Iiwib25tb3VzZWRvd24iLCJhZGRQb2ludGVyRXZlbnQiLCJ1c2VQb2ludGVyRXZlbnQiLCJjcmVhdGVMb2NrIiwibG9jayIsImdsb2JhbEhvcml6b250YWxMb2NrIiwiZ2xvYmFsVmVydGljYWxMb2NrIiwiZ2V0R2xvYmFsTG9jayIsIm9wZW5Ib3Jpem9udGFsXzEiLCJvcGVuVmVydGljYWxfMSIsImlzRHJhZ0FjdGl2ZSIsIm9wZW5HZXN0dXJlTG9jayIsImNyZWF0ZUhvdmVyRXZlbnQiLCJpbmZvIiwiSG92ZXIiLCJpc05vZGVPckNoaWxkIiwicGFyZW50RWxlbWVudCIsInVzZVVubW91bnRFZmZlY3QiLCJ3YXJuZWQiLCJvYnNlcnZlckNhbGxiYWNrcyIsIm9ic2VydmVycyIsImZpcmVPYnNlcnZlckNhbGxiYWNrIiwiZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzIiwidGhyZXNob2xkTmFtZXMiLCJ1c2VJbnRlcnNlY3Rpb25PYnNlcnZlciIsInNob3VsZE9ic2VydmUiLCJyb290SW50ZXJlc2VjdGlvbk9ic2VydmVyIiwibG9va3VwUm9vdCIsInJvb3RPYnNlcnZlcnMiLCJKU09OIiwic3RyaW5naWZ5IiwiaW5pdEludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZUludGVyc2VjdGlvbiIsImlzSW5WaWV3IiwiaGFzRW50ZXJlZFZpZXciLCJJblZpZXciLCJvblZpZXdwb3J0RW50ZXIiLCJvblZpZXdwb3J0TGVhdmUiLCJ1c2VNaXNzaW5nSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJmYWxsYmFjayIsIm1lc3NhZ2UiLCJjb25zb2xlIiwid2FybiIsIm1ha2VSZW5kZXJsZXNzQ29tcG9uZW50IiwiaG9vayIsImdlc3R1cmVBbmltYXRpb25zIiwid2hpbGVJblZpZXciLCJ2aWV3cG9ydCIsIm9uVGFwIiwib25UYXBTdGFydCIsIm9uVGFwQ2FuY2VsIiwiaGFzUHJlc3NMaXN0ZW5lcnMiLCJpc1ByZXNzaW5nIiwiY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycyIsImV2ZW50T3B0aW9ucyIsInJlbW92ZVBvaW50ZXJFbmRMaXN0ZW5lciIsImNoZWNrUG9pbnRlckVuZCIsIlRhcCIsIm9uUG9pbnRlckNhbmNlbCIsInBpcGUiLCJGb2N1cyIsIm9uSG92ZXJTdGFydCIsIm9uSG92ZXJFbmQiLCJjb3VudGVyIiwiaW5jcmVtZW50SWQiLCJ1c2VJZCIsInVzZVByZXNlbmNlIiwicmVnaXN0ZXIiLCJ0ZXN0VmFsdWVUeXBlIiwiZGltZW5zaW9uVmFsdWVUeXBlcyIsInZ3IiwidmgiLCJwYXJzZSIsImZpbmREaW1lbnNpb25WYWx1ZVR5cGUiLCJmaW5kIiwidmFsdWVUeXBlcyIsImZpbmRWYWx1ZVR5cGUiLCJzZXRNb3Rpb25WYWx1ZSIsImhhc1ZhbHVlIiwiZ2V0VmFsdWUiLCJhZGRWYWx1ZSIsInNldFRhcmdldCIsIm1ha2VUYXJnZXRBbmltYXRhYmxlIiwic2V0VmFyaWFudHMiLCJ2YXJpYW50TGFiZWxzIiwiZ2V0VmFyaWFudCIsInZhcmlhbnRDaGlsZHJlbiIsImNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzIiwibmV3VmFsdWVLZXlzIiwibnVtTmV3VmFsdWVzIiwidGFyZ2V0VmFsdWUiLCJyZWFkVmFsdWUiLCJzZXRCYXNlVGFyZ2V0IiwiZ2V0T3JpZ2luRnJvbVRyYW5zaXRpb24iLCJhbmltYXRlVmlzdWFsRWxlbWVudCIsIm5vdGlmeUFuaW1hdGlvblN0YXJ0IiwiYW5pbWF0ZVZhcmlhbnQiLCJyZXNvbHZlZERlZmluaXRpb24iLCJhbmltYXRlVGFyZ2V0Iiwibm90aWZ5QW5pbWF0aW9uQ29tcGxldGUiLCJ0cmFuc2l0aW9uT3ZlcnJpZGUiLCJnZXRDaGlsZEFuaW1hdGlvbnMiLCJmb3J3YXJkRGVsYXkiLCJtYXhTdGFnZ2VyRHVyYXRpb24iLCJnZW5lcmF0ZVN0YWdnZXJEdXJhdGlvbiIsInNvcnRCeVRyZWVPcmRlciIsImFuaW1hdGVDaGlsZHJlbiIsImZpcnN0IiwibGFzdCIsImFuaW1hdGlvblR5cGVTdGF0ZSIsImdldFN0YXRlIiwic2hvdWxkQmxvY2tBbmltYXRpb24iLCJzb3J0Tm9kZVBvc2l0aW9uIiwicHJvdGVjdGVkS2V5cyIsIm5lZWRzQW5pbWF0aW5nIiwic2hvdWxkQmxvY2siLCJ2YXJpYW50UHJpb3JpdHlPcmRlciIsIkFuaW1hdGUiLCJEcmFnIiwiRXhpdCIsInJldmVyc2VQcmlvcml0eU9yZGVyIiwibnVtQW5pbWF0aW9uVHlwZXMiLCJjcmVhdGVUeXBlU3RhdGUiLCJwcmV2UmVzb2x2ZWRWYWx1ZXMiLCJhbmltYXRlTGlzdCIsImFsbEFuaW1hdGVkS2V5cyIsImlzSW5pdGlhbFJlbmRlciIsImJ1aWxkUmVzb2x2ZWRUeXBlVmFsdWVzIiwiYWNjIiwiY2hhbmdlZEFjdGl2ZVR5cGUiLCJnZXRWYXJpYW50Q29udGV4dCIsInJlbW92ZWRLZXlzIiwiZW5jb3VudGVyZWRLZXlzIiwicmVtb3ZlZFZhcmlhbnRJbmRleCIsIkluZmluaXR5IiwiX2xvb3BfMSIsInR5cGVTdGF0ZSIsInByb3BJc1ZhcmlhbnQiLCJhY3RpdmVEZWx0YSIsImlzSW5oZXJpdGVkIiwibWFudWFsbHlBbmltYXRlT25Nb3VudCIsInByZXZQcm9wIiwidmFyaWFudERpZENoYW5nZSIsImNoZWNrVmFyaWFudHNEaWRDaGFuZ2UiLCJzaG91bGRBbmltYXRlVHlwZSIsImRlZmluaXRpb25MaXN0IiwicmVzb2x2ZWRWYWx1ZXMiLCJhbGxLZXlzIiwibWFya1RvQW5pbWF0ZSIsImZhbGxiYWNrQW5pbWF0aW9uXzEiLCJmYWxsYmFja1RhcmdldCIsImdldEJhc2VUYXJnZXQiLCJzaG91bGRBbmltYXRlIiwiaXNBbmltYXRlZCIsInNldEFuaW1hdGVGdW5jdGlvbiIsIm1ha2VBbmltYXRvciIsImNyZWF0ZUFuaW1hdGlvblN0YXRlIiwic2FmZVRvUmVtb3ZlIiwiUGFuU2Vzc2lvbiIsImhhbmRsZXJzIiwic3RhcnRFdmVudCIsImxhc3RNb3ZlRXZlbnQiLCJsYXN0TW92ZUV2ZW50SW5mbyIsInVwZGF0ZVBvaW50IiwiZ2V0UGFuSW5mbyIsImhpc3RvcnkiLCJpc1BhblN0YXJ0ZWQiLCJpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZCIsIm9uTW92ZSIsImhhbmRsZVBvaW50ZXJNb3ZlIiwidHJhbnNmb3JtUG9pbnQiLCJidXR0b25zIiwiaGFuZGxlUG9pbnRlclVwIiwiZW5kIiwib25TZXNzaW9uRW5kIiwicGFuSW5mbyIsImluaXRpYWxJbmZvIiwib25TZXNzaW9uU3RhcnQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJ1cGRhdGVIYW5kbGVycyIsInN1YnRyYWN0UG9pbnQiLCJsYXN0RGV2aWNlUG9pbnQiLCJzdGFydERldmljZVBvaW50IiwidGltZXN0YW1wZWRQb2ludCIsImxhc3RQb2ludCIsImNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyIsImNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyIsImxheW91dEF4aXMiLCJjb25zdHJhaW50c0F4aXMiLCJkZWZhdWx0RWxhc3RpYyIsInJlc29sdmVBeGlzRWxhc3RpYyIsImRyYWdFbGFzdGljIiwibWluTGFiZWwiLCJtYXhMYWJlbCIsInJlc29sdmVQb2ludEVsYXN0aWMiLCJsYWJlbCIsImNvbnZlcnRCb3VuZGluZ0JveFRvQm94IiwidG9wTGVmdCIsImJvdHRvbVJpZ2h0IiwidHJhbnNmb3JtQm94UG9pbnRzIiwiZWxlbWVudERyYWdDb250cm9scyIsIlZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMiLCJvcGVuR2xvYmFsTG9jayIsImlzRHJhZ2dpbmciLCJjdXJyZW50RGlyZWN0aW9uIiwiY29uc3RyYWludHMiLCJoYXNNdXRhdGVkQ29uc3RyYWludHMiLCJlbGFzdGljIiwib3JpZ2luRXZlbnQiLCJzbmFwVG9DdXJzb3IiLCJwYW5TZXNzaW9uIiwiZHJhZ1Byb3BhZ2F0aW9uIiwib25EcmFnU3RhcnQiLCJyZXNvbHZlQ29uc3RyYWludHMiLCJnZXRBeGlzTW90aW9uVmFsdWUiLCJtZWFzdXJlZEF4aXMiLCJkcmFnRGlyZWN0aW9uTG9jayIsIm9uRGlyZWN0aW9uTG9jayIsIm9uRHJhZyIsImxvY2tUaHJlc2hvbGQiLCJnZXRDdXJyZW50RGlyZWN0aW9uIiwidXBkYXRlQXhpcyIsImdldFRyYW5zZm9ybVBhZ2VQb2ludCIsIm9uRHJhZ0VuZCIsIl9wb2ludCIsInNob3VsZERyYWciLCJheGlzVmFsdWUiLCJwcmV2Q29uc3RyYWludHMiLCJyZXNvbHZlUmVmQ29uc3RyYWludHMiLCJsYXlvdXRCb3giLCJjYWxjUmVsYXRpdmVDb25zdHJhaW50cyIsInJlc29sdmVEcmFnRWxhc3RpYyIsInJlbGF0aXZlQ29uc3RyYWludHMiLCJyZWJhc2VBeGlzQ29uc3RyYWludHMiLCJvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMiLCJjb25zdHJhaW50c0VsZW1lbnQiLCJjb25zdHJhaW50c0JveCIsInJvb3RQcm9qZWN0aW9uTm9kZSIsInZpZXdwb3J0Qm94IiwibWVhc3VyZVBhZ2VCb3giLCJtZWFzdXJlZENvbnN0cmFpbnRzIiwiY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMiLCJ1c2VyQ29uc3RyYWludHMiLCJjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCIsImRyYWdNb21lbnR1bSIsImRyYWdUcmFuc2l0aW9uIiwiZHJhZ1NuYXBUb09yaWdpbiIsIm9uRHJhZ1RyYW5zaXRpb25FbmQiLCJtb21lbnR1bUFuaW1hdGlvbnMiLCJ0aW1lQ29uc3RhbnQiLCJyZXN0RGVsdGEiLCJzdGFydEF4aXNWYWx1ZUFuaW1hdGlvbiIsImRyYWdLZXkiLCJzY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMiLCJib3hQcm9ncmVzcyIsInNvdXJjZUxlbmd0aCIsInRhcmdldExlbmd0aCIsImNsYW1wIiwiYWRkTGlzdGVuZXJzIiwic3RvcFBvaW50ZXJMaXN0ZW5lciIsIm1lYXN1cmVEcmFnQ29uc3RyYWludHMiLCJzdG9wTWVhc3VyZUxheW91dExpc3RlbmVyIiwic3RvcFJlc2l6ZUxpc3RlbmVyIiwib25QYW4iLCJvblBhblN0YXJ0Iiwib25QYW5FbmQiLCJvblBhblNlc3Npb25TdGFydCIsImhhc1BhbkV2ZW50cyIsImdyb3VwRHJhZ0NvbnRyb2xzIiwiZHJhZ0NvbnRyb2xzIiwibmFtZXMiLCJ0cmVlVHlwZSIsImJ1aWxkIiwicmVuZGVySW5zdGFuY2UiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJyZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSIsInJlbW92ZUZyb21WYXJpYW50VHJlZSIsImxpZmVjeWNsZXMiLCJtYW5hZ2VycyIsInByb3BTdWJzY3JpcHRpb25zIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJtYW5hZ2VyIiwidXBkYXRlUHJvcExpc3RlbmVycyIsIm9uIiwicHJvcExpc3RlbmVyIiwiY3JlYXRlTGlmZWN5Y2xlcyIsInZhbHVlU3Vic2NyaXB0aW9ucyIsInByZXZNb3Rpb25WYWx1ZXMiLCJ0cmlnZ2VyQnVpbGQiLCJub3RpZnlVcGRhdGUiLCJiaW5kVG9Nb3Rpb25WYWx1ZSIsInJlbW92ZU9uQ2hhbmdlIiwibGF0ZXN0VmFsdWUiLCJyZW1vdmVPblJlbmRlclJlcXVlc3QiLCJpbml0aWFsTW90aW9uVmFsdWVzIiwibmV3SW5zdGFuY2UiLCJhZGRWYXJpYW50Q2hpbGQiLCJjbG9zZXN0VmFyaWFudE5vZGUiLCJnZXRDbG9zZXN0VmFyaWFudE5vZGUiLCJvdGhlciIsImdldExheW91dElkIiwic2V0VmlzaWJpbGl0eSIsImNhbk11dGF0ZSIsInJlbW92ZVZhbHVlIiwiZGVmYXVsdFZhbHVlIiwibmV3UHJvcHMiLCJuZXh0VmFsdWUiLCJwcmV2VmFsdWUiLCJleGlzdGluZ1ZhbHVlIiwidXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwic3RhcnRBdFBhcmVudCIsImNvbnRleHRfMSIsIm51bVZhcmlhbnRQcm9wcyIsInZhcmlhbnRQcm9wcyIsImlzQ1NTVmFyaWFibGUiLCJjc3NWYXJpYWJsZVJlZ2V4IiwiZ2V0VmFyaWFibGVWYWx1ZSIsIm1hdGNoIiwicGFyc2VDU1NWYXJpYWJsZSIsInRva2VuIiwiQm91bmRpbmdCb3hEaW1lbnNpb24iLCJwb3NpdGlvbmFsS2V5cyIsImlzUG9zaXRpb25hbEtleSIsInNldEFuZFJlc2V0VmVsb2NpdHkiLCJpc051bU9yUHhUeXBlIiwiZ2V0UG9zRnJvbU1hdHJpeCIsIm1hdHJpeCIsInBvcyIsImdldFRyYW5zbGF0ZUZyb21NYXRyaXgiLCJwb3MyIiwicG9zMyIsIl9iYm94IiwibWF0cml4M2QiLCJub25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtS2V5cyIsInBvc2l0aW9uYWxWYWx1ZXMiLCJ1bml0Q29udmVyc2lvbiIsImhhc1Bvc2l0aW9uYWxLZXkiLCJ0YXJnZXRQb3NpdGlvbmFsS2V5cyIsInJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMiLCJoYXNBdHRlbXB0ZWRUb1JlbW92ZVRyYW5zZm9ybVZhbHVlcyIsImNoYW5nZWRWYWx1ZVR5cGVLZXlzIiwidG9UeXBlIiwiZnJvbVR5cGUiLCJyZW1vdmVkVHJhbnNmb3JtcyIsInJlbW92ZU5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm0iLCJzY3JvbGxZXzEiLCJwYWdlWU9mZnNldCIsImNvbnZlcnRlZFRhcmdldCIsImNoYW5nZWRLZXlzIiwib3JpZ2luQmJveCIsImVsZW1lbnRDb21wdXRlZFN0eWxlIiwidGFyZ2V0QmJveCIsImNvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyIsInNjcm9sbFRvIiwiY2hlY2tBbmRDb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMiLCJodG1sQ29uZmlnIiwiZG9tRWxlbWVudCIsImRlZmF1bHRUeXBlIiwiY29tcHV0ZWRTdHlsZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwicmVzdG9yZVRyYW5zZm9ybSIsIm11dGFibGVTdGF0ZSIsInBhcnNlZCIsInJlc29sdmVDU1NWYXJpYWJsZXMiLCJwYXJzZURvbVZhcmlhbnQiLCJodG1sVmlzdWFsRWxlbWVudCIsInN2Z1Zpc3VhbEVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJfZWxlbWVudCIsImNyZWF0ZURvbVZpc3VhbEVsZW1lbnQiLCJwaXhlbHNUb1BlcmNlbnQiLCJwaXhlbHMiLCJjb3JyZWN0Qm9yZGVyUmFkaXVzIiwidmFyVG9rZW4iLCJjb3JyZWN0Qm94U2hhZG93Iiwib3JpZ2luYWwiLCJjb250YWluc0NTU1ZhcmlhYmxlcyIsImNzc1ZhcmlhYmxlcyIsInNoYWRvdyIsImNyZWF0ZVRyYW5zZm9ybWVyIiwieFNjYWxlIiwieVNjYWxlIiwiYXZlcmFnZVNjYWxlIiwiaV8xIiwiY3NzVmFyaWFibGUiLCJNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQiLCJjb21wb25lbnREaWRNb3VudCIsImxheW91dEdyb3VwIiwic3dpdGNoTGF5b3V0R3JvdXAiLCJkZWZhdWx0U2NhbGVDb3JyZWN0b3JzIiwiZ3JvdXAiLCJwcmV2UHJvcHMiLCJsYXlvdXREZXBlbmRlbmN5IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJwcm9tb3RlQ29udGV4dCIsImRlcmVnaXN0ZXIiLCJib3hTaGFkb3ciLCJsYXlvdXRGZWF0dXJlcyIsIkRvY3VtZW50UHJvamVjdGlvbk5vZGUiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxMZWZ0IiwiYm9keSIsInNjcm9sbFRvcCIsIkhUTUxQcm9qZWN0aW9uTm9kZSIsImRvY3VtZW50Tm9kZSIsInBvc2l0aW9uIiwiZmVhdHVyZUJ1bmRsZSIsIm1vdGlvbiIsIm0iLCJ1c2VJc01vdW50ZWQiLCJ1c2VGb3JjZVVwZGF0ZSIsImZvcmNlZFJlbmRlckNvdW50Iiwic2V0Rm9yY2VkUmVuZGVyQ291bnQiLCJmb3JjZVJlbmRlciIsIlByZXNlbmNlQ2hpbGQiLCJwcmVzZW5jZUFmZmVjdHNMYXlvdXQiLCJwcmVzZW5jZUNoaWxkcmVuIiwibmV3Q2hpbGRyZW5NYXAiLCJjaGlsZElkIiwiZV8xIiwiX192YWx1ZXMiLCJlXzFfMSIsImVycm9yIiwicmV0dXJuIiwiXyIsImdldENoaWxkS2V5IiwiRGVwcmVjYXRlZExheW91dEdyb3VwQ29udGV4dCIsInNob3VsZEluaGVyaXRHcm91cCIsIkxheW91dEdyb3VwIiwiaW5oZXJpdElkIiwiZGlydHlBbGwiLCJsYXlvdXRHcm91cENvbnRleHQiLCJkZXByZWNhdGVkTGF5b3V0R3JvdXBDb250ZXh0IiwidXBzdHJlYW1JZCIsInNob3VsZEluaGVyaXRJZCIsImRpcnR5IiwibWVtb2l6ZWRDb250ZXh0IiwiaXNMYXp5QnVuZGxlIiwiUmVvcmRlckNvbnRleHQiLCJHcm91cCIsImFzIiwib25SZW9yZGVyIiwib3JkZXIiLCJpc1Jlb3JkZXJpbmciLCJyZWdpc3Rlckl0ZW0iLCJjb21wYXJlTWluIiwidXBkYXRlT3JkZXIiLCJuZXdPcmRlciIsIm5leHRPZmZzZXQiLCJuZXh0SXRlbSIsIm5leHRMYXlvdXQiLCJuZXh0SXRlbUNlbnRlciIsInRvSW5kZXgiLCJzbGljZSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsIm1vdmVJdGVtIiwiY2hlY2tSZW9yZGVyIiwidXNlTW90aW9uVmFsdWUiLCJzZXRMYXRlc3RfMSIsImdldE1peGVyIiwiaXNDdXN0b21WYWx1ZVR5cGUiLCJ1c2VJbW1lZGlhdGUiLCJhcmdPZmZzZXQiLCJpbnB1dFZhbHVlIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwiaW50ZXJwb2xhdG9yIiwibWl4ZXIiLCJ1c2VDb21iaW5lTW90aW9uVmFsdWVzIiwiY29tYmluZVZhbHVlcyIsInVwZGF0ZVZhbHVlIiwidW5zdWJzY3JpYmUiLCJ1c2VNdWx0aU9uQ2hhbmdlIiwidXNlVHJhbnNmb3JtIiwiaW5wdXRSYW5nZU9yVHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lciIsInVzZUxpc3RUcmFuc2Zvcm0iLCJudW1WYWx1ZXMiLCJ1c2VEZWZhdWx0TW90aW9uVmFsdWUiLCJ2aWV3cG9ydFNjcm9sbFZhbHVlcyIsIlJlb3JkZXIiLCJJdGVtIiwibGF0ZXN0WCIsImxhdGVzdFkiLCJnZXN0dXJlUG9pbnQiLCJvbkxheW91dE1lYXN1cmUiLCJkb21BbmltYXRpb24iLCJkb21NYXgiLCJjcmVhdGVTY3JvbGxNb3Rpb25WYWx1ZXMiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInNjcm9sbFhQcm9ncmVzcyIsInNjcm9sbFlQcm9ncmVzcyIsInNldFByb2dyZXNzIiwibWF4T2Zmc2V0IiwiY3JlYXRlU2Nyb2xsVXBkYXRlciIsImdldE9mZnNldHMiLCJ4T2Zmc2V0IiwieU9mZnNldCIsInhNYXhPZmZzZXQiLCJ5TWF4T2Zmc2V0IiwiZ2V0Vmlld3BvcnRTY3JvbGxPZmZzZXRzIiwicGFnZVhPZmZzZXQiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImdldEN1cnJlbnRUaW1lIiwiRGF0ZSIsInVzZUFuaW1hdGlvbkZyYW1lIiwiaW5pdGlhbFRpbWVzdGFtcCIsInByb3ZpZGVUaW1lU2luY2VTdGFydCIsImFuaW1hdGlvbkNvbnRyb2xzIiwiaGFzTW91bnRlZCIsInBlbmRpbmdBbmltYXRpb25zIiwic3Vic2NyaWJlcnMiLCJhbmltYXRpb25zXzEiLCJzZXRWYWx1ZXMiLCJ1c2VBbmltYXRpb25Db250cm9scyIsInVzZUFuaW1hdGlvbiIsIkRyYWdDb250cm9scyIsImNvbXBvbmVudENvbnRyb2xzIiwibmF0aXZlRXZlbnQiLCJjcmVhdGVEcmFnQ29udHJvbHMiLCJ1c2VJbnN0YW50TGF5b3V0VHJhbnNpdGlvbiIsInN0YXJ0VHJhbnNpdGlvbiIsImNiIiwiY3JlYXRlT2JqZWN0Iiwic3RhdGVWaXN1YWxFbGVtZW50IiwiX3N0YXRlIiwiaW5pdGlhbFN0YXRlIiwiaW52ZXJ0U2NhbGUiLCJoYXNXYXJuZWQiLCJBbmltYXRlUHJlc2VuY2UiLCJleGl0QmVmb3JlRW50ZXIiLCJmb3JjZVJlbmRlckxheW91dEdyb3VwIiwiZmlsdGVyZWRDaGlsZHJlbiIsImZpbHRlcmVkIiwiQ2hpbGRyZW4iLCJpc1ZhbGlkRWxlbWVudCIsIm9ubHlFbGVtZW50cyIsImNoaWxkcmVuVG9SZW5kZXIiLCJleGl0aW5nIiwicHJlc2VudENoaWxkcmVuIiwiYWxsQ2hpbGRyZW4iLCJ1cGRhdGVDaGlsZExvb2t1cCIsIkZyYWdtZW50IiwicHJlc2VudEtleXMiLCJ0YXJnZXRLZXlzIiwibnVtUHJlc2VudCIsImluc2VydGlvbkluZGV4IiwicmVtb3ZlSW5kZXgiLCJwcmVzZW50Q2hpbGQiLCJjbG9uZUVsZW1lbnQiLCJBbmltYXRlU2hhcmVkTGF5b3V0IiwiTGF6eU1vdGlvbiIsInNldElzTG9hZGVkIiwibG9hZGVkUmVuZGVyZXIiLCJsb2FkZWRGZWF0dXJlcyIsIk1vdGlvbkNvbmZpZyIsImNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCIsInVzZUN5Y2xlIiwiaXRlbXMiLCJzZXRJdGVtIiwicnVuQ3ljbGUiLCJ1c2VEZXByZWNhdGVkQW5pbWF0ZWRTdGF0ZSIsInNldEFuaW1hdGlvblN0YXRlIiwiYW5pbWF0aW9uRGVmaW5pdGlvbiIsInVzZURlcHJlY2F0ZWRJbnZlcnRlZFNjYWxlIiwicGFyZW50U2NhbGVYIiwicGFyZW50U2NhbGVZIiwidXNlRHJhZ0NvbnRyb2xzIiwidXNlRWxlbWVudFNjcm9sbCIsInVwZGF0ZVNjcm9sbFZhbHVlcyIsInNjcm9sbFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJnZXRFbGVtZW50U2Nyb2xsT2Zmc2V0cyIsInNjcm9sbExpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJ1c2VJblZpZXciLCJzZXRJblZpZXciLCJ1c2VJbnN0YW50VHJhbnNpdGlvbiIsImZvcmNlVXBkYXRlIiwic3RhcnRJbnN0YW50TGF5b3V0VHJhbnNpdGlvbiIsInVzZUlzUHJlc2VudCIsInVzZU1vdGlvblRlbXBsYXRlIiwiZnJhZ21lbnRzIiwibnVtRnJhZ21lbnRzIiwiYnVpbGRWYWx1ZSIsInVzZVJlc2V0UHJvamVjdGlvbiIsInVzZVNwcmluZyIsImFjdGl2ZVNwcmluZ0FuaW1hdGlvbiIsInVzZU9uQ2hhbmdlIiwidXNlVGltZSIsInVzZVZlbG9jaXR5IiwibmV3VmVsb2NpdHkiLCJ1c2VWaWV3cG9ydFNjcm9sbCIsImFkZEV2ZW50TGlzdGVuZXJzIiwicmVhY3RQcm9wc1JlZ2V4IiwiY2FjaGUiLCJhcmciLCJjaGFyQ29kZUF0IiwiZGVmYXVsdFRpbWVzdGVwIiwib25OZXh0RnJhbWUiLCJ1c2VEZWZhdWx0RWxhcHNlZCIsInJ1bk5leHRGcmFtZSIsImlzUHJvY2Vzc2luZyIsImZyYW1lIiwic3RlcHNPcmRlciIsInRvUnVuIiwidG9SdW5OZXh0RnJhbWUiLCJudW1Ub1J1biIsImZsdXNoTmV4dEZyYW1lIiwidG9LZWVwQWxpdmUiLCJXZWFrU2V0Iiwic3RlcCIsInNjaGVkdWxlIiwia2VlcEFsaXZlIiwiaW1tZWRpYXRlIiwiYWRkVG9DdXJyZW50RnJhbWUiLCJidWZmZXIiLCJmcmFtZURhdGEiLCJjcmVhdGVSZW5kZXJTdGVwIiwic3RhcnRMb29wIiwicHJvY2Vzc1N0ZXAiLCJzdGVwSWQiLCJwcm9jZXNzRnJhbWUiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJtb2R1bGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsIlN5bWJvbCIsImZvciIsImYiLCJnIiwiaCIsImwiLCJxIiwiciIsInciLCJ1IiwiJCR0eXBlb2YiLCJBIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJjYWxjQW5ndWxhckZyZXEiLCJ1bmRhbXBlZEZyZXEiLCJkdXJhdGlvbktleXMiLCJwaHlzaWNzS2V5cyIsImlzU3ByaW5nVHlwZSIsImlzUmVzb2x2ZWRGcm9tRHVyYXRpb24iLCJzcHJpbmdPcHRpb25zIiwiZGVyaXZlZCIsImJvdW5jZSIsImVudmVsb3BlIiwiZGVyaXZhdGl2ZSIsImV4cG9uZW50aWFsRGVjYXkiLCJwb3ciLCJpbml0aWFsR3Vlc3MiLCJyZXN1bHQiLCJhcHByb3hpbWF0ZVJvb3QiLCJmaW5kU3ByaW5nIiwiZ2V0U3ByaW5nT3B0aW9ucyIsInplcm8iLCJyZXNvbHZlVmVsb2NpdHkiLCJjcmVhdGVTcHJpbmciLCJpbml0aWFsVmVsb2NpdHkiLCJkYW1wZWRBbmd1bGFyRnJlcSIsImZyZXFGb3JUIiwic2luaCIsImNvc2giLCJmbGlwVGFyZ2V0IiwibmVlZHNJbnRlcnBvbGF0aW9uIiwiX3QiLCJ0b0Zyb21EaWZmZXJlbmNlIiwiaHVlVG9SZ2IiLCJoc2xhVG9SZ2JhIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsInJlZCIsImdyZWVuIiwiYmx1ZSIsIm1peExpbmVhckNvbG9yIiwiZnJvbUV4cG8iLCJ0b0V4cG8iLCJjb2xvclR5cGVzIiwiaGV4IiwicmdiYSIsImhzbGEiLCJnZXRDb2xvclR5cGUiLCJub3RBbmltYXRhYmxlIiwibWl4Q29sb3IiLCJmcm9tQ29sb3JUeXBlIiwidG9Db2xvclR5cGUiLCJmcm9tQ29sb3IiLCJ0b0NvbG9yIiwiYmxlbmRlZCIsInplcm9Qb2ludCIsImlzTnVtIiwiY29tYmluZUZ1bmN0aW9ucyIsInRyYW5zZm9ybWVycyIsIm1peENvbXBsZXgiLCJtaXhBcnJheSIsImJsZW5kVmFsdWUiLCJmcm9tVGhpcyIsIm1peE9iamVjdCIsImFuYWx5c2UiLCJudW1OdW1iZXJzIiwibnVtUkdCIiwibnVtSFNMIiwib3JpZ2luU3RhdHMiLCJ0YXJnZXRTdGF0cyIsIm1peE51bWJlciIsImlzQ2xhbXAiLCJpbnB1dExlbmd0aCIsIm1peGVycyIsImN1c3RvbU1peGVyIiwibWl4ZXJGYWN0b3J5IiwibnVtTWl4ZXJzIiwiY3JlYXRlTWl4ZXJzIiwiZmFzdEludGVycG9sYXRlIiwibGFzdElucHV0SW5kZXgiLCJtaXhlckluZGV4IiwiZm91bmRNaXhlckluZGV4Iiwic2xvd0ludGVycG9sYXRlIiwicmV2ZXJzZUVhc2luZyIsIm1pcnJvckVhc2luZyIsImNyZWF0ZUV4cG9JbiIsImNyZWF0ZUJhY2tJbiIsImNyZWF0ZUFudGljaXBhdGUiLCJiYWNrRWFzaW5nIiwiYWNvcyIsInAyIiwiZGVmYXVsdEVhc2luZyIsIm8iLCJjb252ZXJ0T2Zmc2V0VG9UaW1lcyIsIl92YWx1ZSIsImNyZWF0ZUludGVycG9sYXRvciIsIm1vZGlmeVRhcmdldCIsInR5cGVzIiwibG9vcEVsYXBzZWQiLCJlbGFwc2VkIiwiZnJhbWVzeW5jIiwicGFzc1RpbWVzdGFtcCIsImF1dG9wbGF5IiwiZHJpdmVyIiwicmVwZWF0TWF4Iiwib25TdG9wIiwib25SZXBlYXQiLCJkcml2ZXJDb250cm9scyIsImludGVycG9sYXRlRnJvbU51bWJlciIsInJlcGVhdENvdW50IiwiY29tcHV0ZWREdXJhdGlvbiIsImlzQ29tcGxldGUiLCJpc0ZvcndhcmRQbGF5YmFjayIsImFuaW1hdG9yIiwiZGV0ZWN0QW5pbWF0aW9uRnJvbU9wdGlvbnMiLCJoYXNSZXBlYXREZWxheUVsYXBzZWQiLCJyZXZlcnNlRWxhcHNlZCIsInJhZGlhbnNUb0RlZ3JlZXMiLCJyYWRpYW5zIiwiUEkiLCJpZGVudGl0eSIsImNyZWF0ZUF0dHJhY3RvciIsImFsdGVyRGlzcGxhY2VtZW50IiwiY29uc3RhbnQiLCJkaXNwbGFjZW1lbnQiLCJzcHJpbmdNb2RpZmllZERpc3BsYWNlbWVudCIsImF0dHJhY3QiLCJhdHRyYWN0RXhwbyIsImRlZ3JlZXNUb1JhZGlhbnMiLCJpc1BvaW50IiwiaXNQb2ludDNEIiwiZGlzdGFuY2UxRCIsInRvRGVjaW1hbCIsInByZWNpc2lvbiIsInNtb290aEZyYW1lIiwic21vb3RoaW5nIiwiZ2V0U2xvcGUiLCJrU2FtcGxlU3RlcFNpemUiLCJhbmdsZSIsImF0YW4yIiwiYXBwbHlPZmZzZXQiLCJoYXNSZWNlaXZlZEZyb20iLCJzYW1wbGVWYWx1ZXMiLCJGbG9hdDMyQXJyYXkiLCJhWCIsImludGVydmFsU3RhcnQiLCJjdXJyZW50U2FtcGxlIiwia1NwbGluZVRhYmxlU2l6ZSIsImd1ZXNzRm9yVCIsImluaXRpYWxTbG9wZSIsImFHdWVzc1QiLCJjdXJyZW50U2xvcGUiLCJuZXd0b25SYXBoc29uSXRlcmF0ZSIsImFBIiwiYUIiLCJnZXRURm9yWCIsInhEZWx0YSIsInlEZWx0YSIsInpEZWx0YSIsImlzT3V0T2ZCb3VuZHMiLCJib3VuZGFyeU5lYXJlc3QiLCJzdGFydFNwcmluZyIsImJvdW5kYXJ5IiwiaGVhZGluZyIsImNoZWNrQm91bmRhcnkiLCJwb2ludEZyb21WZWN0b3IiLCJzbW9vdGgiLCJzdHJlbmd0aCIsInByZXZpb3VzVmFsdWUiLCJjdXJyZW50RnJhbWVzdGFtcCIsIm5ld1ZhbHVlIiwic25hcCIsInBvaW50cyIsIm51bVBvaW50cyIsImxhc3REaXN0YW5jZSIsInJvdW5kZWQiLCJ2ZWxvY2l0eVBlckZyYW1lIiwieHBzIiwiYWEiLCJiYSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwibGEiLCJtYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwicWEiLCJyYSIsInNhIiwib2EiLCJwYSIsIm5hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJ0YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidWEiLCJ2YSIsIndhIiwieGEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIkVycm9yIiwiTWEiLCJOYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIk9hIiwidGFnIiwiUGEiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJRYSIsIlJhIiwiU2EiLCJub2RlTmFtZSIsIlVhIiwiX3ZhbHVlVHJhY2tlciIsImNvbmZpZ3VyYWJsZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVGEiLCJWYSIsImNoZWNrZWQiLCJXYSIsImFjdGl2ZUVsZW1lbnQiLCJYYSIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWWEiLCJjb250cm9sbGVkIiwiWmEiLCIkYSIsImJiIiwib3duZXJEb2N1bWVudCIsImRiIiwiZWIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZmIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImdiIiwiaGIiLCJpYiIsInRleHRDb250ZW50IiwiamIiLCJrYiIsImxiIiwibWIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwidG9TdHJpbmciLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwib2IiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZVdpZHRoIiwicGIiLCJxYiIsInJiIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwic2IiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidGIiLCJ1YiIsImlzIiwidmIiLCJ3YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ4YiIsInliIiwiemIiLCJBYiIsIkJiIiwic3RhdGVOb2RlIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIm9uRXJyb3IiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJVYiIsImFsdGVybmF0ZSIsImZsYWdzIiwiVmIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIldiIiwiWWIiLCJzaWJsaW5nIiwiWGIiLCJaYiIsIiRiIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImFjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJiYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiY2MiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJCIiwidW5zdGFibGVfbm93IiwiZGMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImVjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJmYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZ2MiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImhjIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJpYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImpjIiwia2MiLCJuYyIsImNsejMyIiwib2MiLCJwYyIsImxvZyIsIkxOMiIsInFjIiwicmMiLCJzYyIsInRjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInVjIiwid2MiLCJ4YyIsInljIiwiemMiLCJldmVudFRpbWVzIiwiQmMiLCJDIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJwb2ludGVySWQiLCJTYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiVWMiLCJWYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIldjIiwiWGMiLCJzaGlmdCIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIlRjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsIm9kIiwicGQiLCJxZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInZkIiwid2QiLCJ4ZCIsInJkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwic2QiLCJ0ZCIsInZpZXciLCJ1ZCIsInpkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwieWQiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJBZCIsIkNkIiwiZGF0YVRyYW5zZmVyIiwiRWQiLCJHZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJIZCIsImNsaXBib2FyZERhdGEiLCJJZCIsIktkIiwiTGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTWQiLCJOZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJPZCIsIlBkIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY29kZSIsImxvY2F0aW9uIiwibG9jYWxlIiwid2hpY2giLCJRZCIsIlNkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJpc1ByaW1hcnkiLCJVZCIsInRhcmdldFRvdWNoZXMiLCJXZCIsIlhkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImRvY3VtZW50TW9kZSIsImJlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwia2UiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ1cmwiLCJ3ZWVrIiwibGUiLCJtZSIsIm5lIiwibGlzdGVuZXJzIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsIm9uaW5wdXQiLCJ6ZSIsImRldGFjaEV2ZW50IiwiQWUiLCJCZSIsImF0dGFjaEV2ZW50IiwiQ2UiLCJEZSIsIkVlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJuZXh0U2libGluZyIsIktlIiwiY29udGFpbnMiLCJMZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJNZSIsImNvbnRlbnRFZGl0YWJsZSIsIk5lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIldlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImtmIiwibGYiLCJtZiIsIlRiIiwiRCIsIm5mIiwib2YiLCJwZiIsInFmIiwicmFuZG9tIiwicmYiLCJiaW5kIiwiY2FwdHVyZSIsIkoiLCJGIiwic2YiLCJ0ZiIsInBhcmVudFdpbmRvdyIsInVmIiwidmYiLCJaIiwieWEiLCJhYiIsImNhIiwiaWUiLCJjaGFyIiwiamUiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiX19odG1sIiwiRWYiLCJGZiIsIkdmIiwiSWYiLCJxdWV1ZU1pY3JvdGFzayIsIkhmIiwiSmYiLCJLZiIsIkxmIiwicHJldmlvdXNTaWJsaW5nIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIkUiLCJHIiwiVWYiLCJIIiwiVmYiLCJXZiIsIlhmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWWYiLCJaZiIsIiRmIiwiYWciLCJnZXRDaGlsZENvbnRleHQiLCJiZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsIl9jdXJyZW50VmFsdWUiLCJyZyIsImNoaWxkTGFuZXMiLCJzZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidGciLCJ1ZyIsIm1lbW9pemVkVmFsdWUiLCJ2ZyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImludGVybGVhdmVkIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJyZWZzIiwiSWciLCJNZyIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkpnIiwiS2ciLCJMZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJOZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiT2ciLCJ1cGRhdGVyIiwiUGciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJRZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJJIiwiZmgiLCJnaCIsImhoIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJpaCIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJqaCIsIm1vZGUiLCJraCIsImxoIiwibWgiLCJtZW1vaXplZFByb3BzIiwibmgiLCJvaCIsInBoIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJpbXBsZW1lbnRhdGlvbiIsIndoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSyIsIkpoIiwicmV2ZWFsT3JkZXIiLCJLaCIsIkxoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJNaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJOaCIsIk9oIiwiTCIsIk0iLCJOIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJPIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiYWkiLCJiaSIsImNpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJnZXRTbmFwc2hvdCIsImlpIiwiamkiLCJQIiwia2kiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwibGkiLCJtaSIsIm5pIiwiZGVwcyIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwicmVhZENvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlUmVkdWNlciIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJIaSIsIklpIiwiVGkiLCJWaSIsIldpIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsImNvbXBvbmVudERpZENhdGNoIiwiT2kiLCJjb21wb25lbnRTdGFjayIsIlBpIiwicGluZ0NhY2hlIiwiUWkiLCJSaSIsIlNpIiwiWGkiLCJ0YWlsTW9kZSIsInRhaWwiLCJRIiwic3VidHJlZUZsYWdzIiwiWWkiLCJwZW5kaW5nQ29udGV4dCIsIlppIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJSIiwiJGkiLCJyZW5kZXJpbmciLCJhaiIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImlzQmFja3dhcmRzIiwiYmoiLCJjaiIsImRqIiwiUmVhY3RDdXJyZW50T3duZXIiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJtaiIsIm5qIiwib2oiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJwaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwieGoiLCJ5aiIsInpqIiwiX3JlYWN0UmV0cnkiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiR2oiLCJIaiIsIlMiLCJJaiIsIlQiLCJKaiIsIlUiLCJLaiIsIkxqIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiVWoiLCJWIiwiVmoiLCJXaiIsIlhqIiwib25Db21taXRGaWJlclVubW91bnQiLCJZaiIsIlpqIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiZ2siLCJoayIsImlrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJVayIsImprIiwia2siLCJsayIsIm1rIiwiVyIsIlgiLCJZIiwibmsiLCJvayIsInBrIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ2YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJoZyIsIkRrIiwiRWsiLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiT2siLCJ0aW1lb3V0SGFuZGxlIiwiUGsiLCJRayIsIlJrIiwiU2siLCJUayIsIm11dGFibGVSZWFkTGFuZXMiLCJBYyIsIk1qIiwib25Db21taXRGaWJlclJvb3QiLCJsYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlZrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiV2siLCJYayIsIlprIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsIiRrIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImFsIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImJsIiwiY2wiLCJkbCIsImVsIiwiZmwiLCJnbCIsImhsIiwiRmoiLCJZayIsImpsIiwicmVwb3J0RXJyb3IiLCJrbCIsIl9pbnRlcm5hbFJvb3QiLCJsbCIsIm1sIiwibmwiLCJvbCIsInFsIiwicGwiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsImZvcm0iLCJybCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInNsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInRsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInVsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImVyciIsImdldE1vZHVsZUlkIiwiQWN0aW9uIiwiX2V4dGVuZHMiLCJCZWZvcmVVbmxvYWRFdmVudFR5cGUiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsInByb21wdEJlZm9yZVVubG9hZCIsImNyZWF0ZUV2ZW50cyIsImZuIiwiY3JlYXRlS2V5Iiwic3Vic3RyIiwiY3JlYXRlUGF0aCIsIl9yZWYiLCJfcmVmJHBhdGhuYW1lIiwicGF0aG5hbWUiLCJfcmVmJHNlYXJjaCIsIl9yZWYkaGFzaCIsImhhc2giLCJwYXJzZVBhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsImNvbmQiLCJnZW5lcmF0ZVBhdGgiLCJwYXJhbXMiLCJtYXRjaFJvdXRlcyIsInJvdXRlcyIsImxvY2F0aW9uQXJnIiwiYmFzZW5hbWUiLCJzdHJpcEJhc2VuYW1lIiwiYnJhbmNoZXMiLCJmbGF0dGVuUm91dGVzIiwic2NvcmUiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwicGFyZW50c01ldGEiLCJwYXJlbnRQYXRoIiwicm91dGUiLCJyZWxhdGl2ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwiam9pblBhdGhzIiwiY29tcHV0ZVNjb3JlIiwicGFyYW1SZSIsImlzU3BsYXQiLCJzIiwic2VnbWVudHMiLCJpbml0aWFsU2NvcmUiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaFBhdGgiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsInBhdHRlcm4iLCJtYXRjaGVyIiwicGFyYW1OYW1lcyIsInJlZ2V4cFNvdXJjZSIsInBhcmFtTmFtZSIsImVuZHNXaXRoIiwiUmVnRXhwIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwibWVtbyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJyZXNvbHZlUGF0aCIsImZyb21QYXRobmFtZSIsInRvUGF0aG5hbWUiLCJwb3AiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVRvIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsImxvY2F0aW9uUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwibmV4dENoYXIiLCJwYXRocyIsInVzZUhyZWYiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJuYXZpZ2F0b3IiLCJ1c2VSZXNvbHZlZFBhdGgiLCJqb2luZWRQYXRobmFtZSIsImdldFRvUGF0aG5hbWUiLCJlbmRzV2l0aFNsYXNoIiwiY3JlYXRlSHJlZiIsInVzZUxvY2F0aW9uIiwidXNlTmF2aWdhdGlvblR5cGUiLCJuYXZpZ2F0aW9uVHlwZSIsInVzZU1hdGNoIiwidXNlTmF2aWdhdGUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJhY3RpdmVSZWYiLCJnbyIsIk91dGxldENvbnRleHQiLCJ1c2VPdXRsZXRDb250ZXh0IiwidXNlT3V0bGV0IiwidXNlUGFyYW1zIiwicm91dGVNYXRjaCIsInVzZVJvdXRlcyIsInBhcmVudE1hdGNoZXMiLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJfcmVuZGVyTWF0Y2hlcyIsInJlZHVjZVJpZ2h0IiwiTWVtb3J5Um91dGVyIiwiaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsSW5kZXgiLCJoaXN0b3J5UmVmIiwiX29wdGlvbnMzIiwiX29wdGlvbnMzJGluaXRpYWxFbnRyIiwiUG9wIiwiYmxvY2tlcnMiLCJnZXROZXh0TG9jYXRpb24iLCJhbGxvd1R4IiwicmV0cnkiLCJhcHBseVR4IiwibmV4dEFjdGlvbiIsIm5leHRMb2NhdGlvbiIsIm5leHRJbmRleCIsIlB1c2giLCJSZXBsYWNlIiwiYmFjayIsImZvcndhcmQiLCJsaXN0ZW4iLCJibG9jayIsImJsb2NrZXIiLCJjcmVhdGVNZW1vcnlIaXN0b3J5Iiwic2V0U3RhdGUiLCJSb3V0ZXIiLCJOYXZpZ2F0ZSIsIl9yZWYyIiwibmF2aWdhdGUiLCJPdXRsZXQiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWYzIiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIlJvdXRlcyIsIl9yZWY0IiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwicmVuZGVyTWF0Y2hlcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIkJyb3dzZXJSb3V0ZXIiLCJfb3B0aW9ucyR3aW5kb3ciLCJnbG9iYWxIaXN0b3J5IiwiZ2V0SW5kZXhBbmRMb2NhdGlvbiIsIl93aW5kb3ckbG9jYXRpb24iLCJpZHgiLCJ1c3IiLCJibG9ja2VkUG9wVHgiLCJfZ2V0SW5kZXhBbmRMb2NhdGlvbiIsIl9nZXRJbmRleEFuZExvY2F0aW9uMiIsImdldEhpc3RvcnlTdGF0ZUFuZFVybCIsIl9nZXRJbmRleEFuZExvY2F0aW9uMyIsInJlcGxhY2VTdGF0ZSIsIl9nZXRIaXN0b3J5U3RhdGVBbmRVciIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIl9nZXRIaXN0b3J5U3RhdGVBbmRVcjIiLCJ1bmJsb2NrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJIYXNoUm91dGVyIiwiX29wdGlvbnMyJHdpbmRvdyIsIl9wYXJzZVBhdGgiLCJfcGFyc2VQYXRoJHBhdGhuYW1lIiwiX3BhcnNlUGF0aCRzZWFyY2giLCJfcGFyc2VQYXRoJGhhc2giLCJoYW5kbGVQb3AiLCJfZ2V0SW5kZXhBbmRMb2NhdGlvbjQiLCJfZ2V0SW5kZXhBbmRMb2NhdGlvbjYiLCJnZXRCYXNlSHJlZiIsIl9nZXRJbmRleEFuZExvY2F0aW9uNyIsIl9nZXRIaXN0b3J5U3RhdGVBbmRVcjMiLCJfZ2V0SGlzdG9yeVN0YXRlQW5kVXI0IiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJIaXN0b3J5Um91dGVyIiwiTGluayIsInJlbG9hZERvY3VtZW50IiwicmVzdCIsImludGVybmFsT25DbGljayIsInVzZUxpbmtDbGlja0hhbmRsZXIiLCJOYXZMaW5rIiwiX3JlZjUiLCJhcmlhQ3VycmVudFByb3AiLCJjbGFzc05hbWUiLCJjbGFzc05hbWVQcm9wIiwiYXJpYUN1cnJlbnQiLCJfdGVtcCIsInJlcGxhY2VQcm9wIiwiaXNNb2RpZmllZEV2ZW50IiwidXNlU2VhcmNoUGFyYW1zIiwiZGVmYXVsdEluaXQiLCJkZWZhdWx0U2VhcmNoUGFyYW1zUmVmIiwiY3JlYXRlU2VhcmNoUGFyYW1zIiwic2VhcmNoUGFyYW1zIiwiZ2V0QWxsIiwiYXBwZW5kIiwibmV4dEluaXQiLCJuYXZpZ2F0ZU9wdGlvbnMiLCJVUkxTZWFyY2hQYXJhbXMiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImxhenkiLCJ1bnN0YWJsZV9hY3QiLCJzb3J0SW5kZXgiLCJzZXRJbW1lZGlhdGUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIm9iakEiLCJvYmpCIiwiY29tcGFyZUNvbnRleHQiLCJyZXQiLCJrZXlzQSIsImtleXNCIiwiYkhhc093blByb3BlcnR5IiwidmFsdWVBIiwidmFsdWVCIiwic2FuaXRpemUiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZmxvYXRSZWdleCIsImNvbG9yUmVnZXgiLCJzaW5nbGVDb2xvclJlZ2V4IiwiaXNTdHJpbmciLCJjcmVhdGVVbml0VHlwZSIsInVuaXQiLCJpc0NvbG9yU3RyaW5nIiwidGVzdFByb3AiLCJzcGxpdENvbG9yIiwiYU5hbWUiLCJiTmFtZSIsImNOYW1lIiwiYWxwaGEkMSIsImNsYW1wUmdiVW5pdCIsInJnYlVuaXQiLCJwYXJzZUludCIsImNvbG9yVG9rZW4iLCJudW1iZXJUb2tlbiIsIm51bUNvbG9ycyIsImNvbG9ycyIsIm51bWJlcnMiLCJ0b2tlbmlzZWQiLCJjb252ZXJ0TnVtYmVyc1RvWmVybyIsIm1heERlZmF1bHRzIiwiYXBwbHlEZWZhdWx0RmlsdGVyIiwiZnVuY3Rpb25SZWdleCIsImZ1bmN0aW9ucyIsInByZWZpeCIsInVzZSIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwic3R5bGVkQ29tcG9uZW50SWQiLCJSRUFDVF9BUFBfU0NfQVRUUiIsIlNDX0FUVFIiLCJTQ19ESVNBQkxFX1NQRUVEWSIsIlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSIsImoiLCJncm91cFNpemVzIiwiVWludDMyQXJyYXkiLCJpbmRleE9mR3JvdXAiLCJpbnNlcnRSdWxlcyIsImluc2VydFJ1bGUiLCJjbGVhckdyb3VwIiwiZGVsZXRlUnVsZSIsImdldEdyb3VwIiwiZ2V0UnVsZSIsInJlZ2lzdGVyTmFtZSIsImdldFRhZyIsIl9fd2VicGFja19ub25jZV9fIiwiaGVhZCIsImNoaWxkTm9kZXMiLCJoYXNBdHRyaWJ1dGUiLCIkIiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsImNzc1J1bGVzIiwiY3NzVGV4dCIsInJ1bGVzIiwiaXNTZXJ2ZXIiLCJ1c2VDU1NPTUluamVjdGlvbiIsImdzIiwic2VydmVyIiwicmVnaXN0ZXJJZCIsInJlY29uc3RydWN0V2l0aE9wdGlvbnMiLCJhbGxvY2F0ZUdTSW5zdGFuY2UiLCJoYXNOYW1lRm9ySWQiLCJjbGVhck5hbWVzIiwiY2xlYXJSdWxlcyIsImNsZWFyVGFnIiwic3RhdGljUnVsZXNJZCIsImNvbXBvbmVudElkIiwiYmFzZUhhc2giLCJiYXNlU3R5bGUiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsInBsdWdpbnMiLCJsYXN0SW5kZXhPZiIsInN0eWxpc1BsdWdpbnMiLCJkaXNhYmxlQ1NTT01JbmplY3Rpb24iLCJkaXNhYmxlVmVuZG9yUHJlZml4ZXMiLCJnZXROYW1lIiwiaXNDc3MiLCJ0aGVtZSIsIkZlIiwicGFyZW50Q29tcG9uZW50SWQiLCJzaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvbmVudFN0eWxlIiwiZm9sZGVkQ29tcG9uZW50SWRzIiwiJGFzIiwid2l0aENvbXBvbmVudCIsIl9mb2xkZWREZWZhdWx0UHJvcHMiLCJ3aXRoQ29uZmlnIiwicmVtb3ZlU3R5bGVzIiwicmVuZGVyU3R5bGVzIiwiX2VtaXRTaGVldENTUyIsImdldFN0eWxlVGFncyIsInNlYWxlZCIsImdldFN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2VhbCIsImNvbGxlY3RTdHlsZXMiLCJpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0iLCJTdHlsZVNoZWV0IiwibWFzdGVyU2hlZXQiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJOYXZiYXIiLCJyZWFjdF8xIiwic3R5bGVkX2NvbXBvbmVudHNfMSIsInR5cGVzXzEiLCJ1dGlsc18xIiwiTmF2YmFyQ29udGFpbmVyIiwibmF2IiwiTmF2TGlua0l0ZW0iLCJkaXYiLCJOYXZMaW5rTGlzdCIsIlNjcm9sbFRvIiwiU2VjdGlvbnMiLCJob21lIiwiYWJvdXQiLCJwcm9qZWN0cyIsImNvbnRhY3QiLCJBYm91dCIsImZyYW1lcl9tb3Rpb25fMSIsIlJlYWN0TG9nb18xIiwiSlNMb2dvXzEiLCJIVE1MTG9nb18xIiwiQ1NTTG9nb18xIiwiTm9kZUpTTG9nb18xIiwiVHlwZVNjcmlwdExvZ29fMSIsIkxpbmVUd29fMSIsIkFib3V0Q29udGFpbmVyIiwiQWJvdXRIZWFkZXJDb250YWluZXIiLCJBYm91dFRpdGxlVGV4dCIsIkFib3V0Q29udGVudENvbnRhaW5lciIsIkJpb0NvbnRhaW5lciIsIlBpY3R1cmVPZk1lIiwiQmlvVGV4dCIsIlNraWxsc0NvbnRhaW5lciIsIlNraWxsc0l0ZW1zVGl0bGVUZXh0IiwiU2tpbGxzSXRlbSIsIlNraWxsc0l0ZW1Sb3ciLCJTa2lsbHNJdGVtTGlzdCIsIkxpbmVUd28iLCJHZXRCYXNlSW1nUGF0aCIsIlJlYWN0TG9nbyIsIkpTTG9nbyIsIkhUTUxMb2dvIiwiQ1NTTG9nbyIsIlR5cGVTY3JpcHRMb2dvIiwiTm9kZUpTTG9nbyIsIkNvbnRhY3QiLCJHaXRodWJfMSIsIkxpbmtlZGluXzEiLCJSZXN1bWVfMSIsIlVwQXJyb3dfMSIsIkVtYWlsTG9nb18xIiwiQ29udGFjdEl0ZW1zQ29udGFpbmVyIiwiQ29udGFjdEhlYWRlckNvbnRhaW5lciIsIkNvbnRhY3RUZXh0SW52aXRhdGlvbiIsIkNvbnRhY3RUZXh0SW52aXRhdGlvblR3byIsIkNvbnRhY3RMaW5rcyIsIkxpbmtzQ29udGFpbmVyIiwiTGlua0l0ZW1Db250YWluZXIiLCJVcEFycm93Q29udGFpbmVyIiwiQnVpbHRCeVRleHQiLCJzY2FsZVNpemUiLCJSZXN1bWUiLCJvcGVuIiwiR2l0aHViIiwiTGlua2VkaW4iLCJFbWFpbExvZ28iLCJVcEFycm93IiwiSG9tZXBhZ2UiLCJDb250YWN0XzEiLCJBYm91dF8xIiwiUHJvamVjdHNfMSIsIk5hdmJhcl8xIiwiU29jaWFsc18xIiwiSG9tZXBhZ2VDb250YWluZXIiLCJXZWxjb21lVGV4dENvbnRhaW5lciIsIldlbGNvbWVUZXh0IiwiaDEiLCJXZWxjb21lQnV0dG9uIiwiUHJldmlld3NDb250YWluZXIiLCJQcm9qZWN0cyIsIlNvY2lhbHMiLCJQcm9qZWN0SXRlbSIsIlRpbnlHaXRodWJfMSIsIkFwcExpbmtfMSIsIlByb2plY3RJdGVtQ29udGFpbmVyIiwiUHJvamVjdFJvdyIsIlByb2plY3RUaXRsZSIsIlBpY3R1cmVDb250YWluZXIiLCJQcm9qZWN0UGljdHVyZSIsIlByb2plY3RJbmZvQ29udGFpbmVyIiwiUHJvamVjdERlc2NyaXB0aW9uQ29udGFpbmVyIiwiUHJvamVjdERlc2NyaXB0aW9uIiwiUHJvamVjdFRlY2hzQ29udGFpbmVyIiwiUHJvamVjdFRlY2hzIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInRlY2hub2xvZ2llcyIsImdpdGh1YiIsIlRpbnlHaXRodWIiLCJBcHBMaW5rIiwiUHJvamVjdEl0ZW1fMSIsIlByb2plY3RzQ29udGFpbmVyIiwiUHJvamVjdEhlYWRlckNvbnRhaW5lciIsIlByb2plY3RzU2VjdGlvblRpdGxlVGV4dCIsIlByb2plY3RDb250ZW50Q29udGFpbmVyIiwiUHJvamVjdEl0ZW1zQ29udGFpbmVyIiwiUHJvamVjdHNQaWN0dXJlcyIsIlByb2plY3RJdGVtQXJyYXkiLCJTb2NpYWxzQ29udGFpbmVyIiwiU29jaWFsc0xpc3QiLCJTb2NpYWxMaW5rSXRlbSIsIkxvZ29JdGVtIiwic3ZnIiwieG1sbnMiLCJyb2xlIiwidmlld0JveCIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJmaWxsUnVsZSIsImN5IiwiY3giLCJBcHAiLCJyZWFjdF9kb21fMSIsInJlYWN0X3JvdXRlcl9kb21fMSIsIkhvbWVwYWdlXzEiLCJXZWJzaXRlQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJJc0luRGV2Iiwic2VjdGlvbiIsIm9mZnNldFRvcCIsImJlaGF2aW9yIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiVHlwZUVycm9yIiwiX18iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwiZGVzYyIsImRlY29yYXRlIiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiX19nZW5lcmF0b3IiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJvcCIsIl9fY3JlYXRlQmluZGluZyIsImsyIiwid3JpdGFibGUiLCJfX2V4cG9ydFN0YXIiLCJhciIsIl9fc3ByZWFkIiwiX19zcHJlYWRBcnJheXMiLCJpbCIsInBhY2siLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImNvb2tlZCIsInJhdyIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsIl9faW1wb3J0U3RhciIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsImtpbmQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEluIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIm9iaiIsInRvU3RyaW5nVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==